uint64_t sub_2142B6644()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(unsigned int *, uint64_t);
  uint64_t v13;

  v0 = sub_2141D8BF8(&qword_254D6A800);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_2141D8BF8(&qword_254D6A7F8);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v7 = (unsigned int *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - v8;
  sub_2141DD324();
  sub_21442450C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_2142B685C((uint64_t)v2);
    return *MEMORY[0x24BE096C0];
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  result = (*(uint64_t (**)(unsigned int *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (v5 == 4)
  {
    v10 = *v7;
    v12 = *(void (**)(unsigned int *, uint64_t))(v4 + 8);
    v12(v7, v3);
    v12((unsigned int *)v9, v3);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142B67B0()
{
  type metadata accessor for _ChartContentInputs(0);
  return sub_2144244C4();
}

uint64_t sub_2142B67FC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  v5 = a1;
  result = sub_2141D8BF8(&qword_254D6A7F8);
  v4 = *(_QWORD *)(result - 8);
  if (*(_QWORD *)(v4 + 64) == 4)
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(v4 + 16))(a2, &v5, result);
  __break(1u);
  return result;
}

uint64_t sub_2142B685C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_254D6A800);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_2142B689C(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = atan2(-(a2 - a4 * 0.5), a1 - a3 * 0.5) * 180.0 / 3.14159265;
  if (v4 <= 0.0)
    v4 = v4 + 360.0;
  v5 = 90.0 - v4;
  if (v5 < 0.0)
    v5 = v5 + 360.0;
  return v5 / 360.0;
}

uint64_t sub_2142B6920@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;

  v26 = a5;
  v27 = a2;
  v28 = a1;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  v25 = a3;
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  return result;
}

uint64_t sub_2142B6AB8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v10;
  void (*v11)(uint64_t *__return_ptr, uint64_t *);
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[8];
  uint64_t v15;
  _BYTE v16[120];

  sub_2141E801C(v3, (uint64_t)v14, &qword_253F13368);
  v7 = v14[4];
  v8 = v14[7];
  v10 = v15;
  v11 = (void (*)(uint64_t *__return_ptr, uint64_t *))v14[0];
  sub_2141E801C(v3, (uint64_t)v16, &qword_253F13368);
  if ((v16[104] & 1) != 0)
  {
    if (a3 == 2)
    {
      v12[0] = a1;
      v12[1] = a2;
      swift_retain();
      sub_2141DD47C(v7);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v8, v10);
      v11(&v13, v12);
      sub_2142BEFB0(v3);
      return v13;
    }
  }
  else if (a3 <= 1u)
  {
    v13 = a1;
    swift_retain();
    sub_2141DD47C(v7);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v8, v10);
    v11(v12, &v13);
    sub_2142BEFB0(v3);
    return v12[0];
  }
  return 0;
}

uint64_t sub_2142B6C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v5 = v4;
  sub_2141E070C(v5, (uint64_t)&v22, &qword_254D695C8);
  if ((v30 & 1) != 0)
  {
    v19 = v27;
    v20 = v28;
    v21 = v29;
    v14 = v22;
    v15 = v23;
    v16 = v24;
    v17 = v25;
    v18 = v26;
    if (a3 == 2)
    {
      *(_QWORD *)&v12[0] = a1;
      *((_QWORD *)&v12[0] + 1) = a2;
      ((void (*)(_OWORD *))v14)(v12);
      return sub_2141E0750((uint64_t)&v14, &qword_254D6A6C8);
    }
    else
    {
      result = sub_2141E0750((uint64_t)&v14, &qword_254D6A6C8);
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_QWORD *)(a4 + 32) = 0;
    }
  }
  else
  {
    v19 = v27;
    v20 = v28;
    v21 = v29;
    v14 = v22;
    v15 = v23;
    v16 = v24;
    v17 = v25;
    v18 = v26;
    if (a3 > 1u)
    {
      sub_2141E0750((uint64_t)&v14, &qword_254D6A838);
      memset(v12, 0, sizeof(v12));
      v13 = 0;
    }
    else
    {
      v11 = a1;
      ((void (*)(_OWORD *__return_ptr, uint64_t *))v14)(v12, &v11);
      sub_2141E0750((uint64_t)&v14, &qword_254D6A838);
    }
    return sub_2141E801C((uint64_t)v12, a4, (uint64_t *)&unk_253F0FF58);
  }
  return result;
}

uint64_t *sub_2142B6D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t *result;
  void (*v12)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[5];
  _BYTE v21[136];
  _BYTE v22[136];
  _BYTE v23[136];
  _BYTE v24[136];

  v5 = v4;
  sub_2141E801C((uint64_t)v5, (uint64_t)v22, &qword_254D695C0);
  sub_2141E801C((uint64_t)v22, (uint64_t)v24, &qword_254D695C0);
  sub_2141E801C((uint64_t)v5, (uint64_t)v23, &qword_254D695C0);
  if (sub_2142BF008((uint64_t)v23) == 1)
  {
    sub_2141E801C((uint64_t)v24, (uint64_t)v21, &qword_254D695C0);
    result = (uint64_t *)nullsub_1(v21, v10);
    if (a3 != 2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      goto LABEL_9;
    }
    v19[0] = a1;
    v19[1] = a2;
    v12 = (void (*)(_QWORD *__return_ptr, _QWORD *))*result;
  }
  else
  {
    sub_2141E801C((uint64_t)v24, (uint64_t)v21, &qword_254D695C0);
    result = (uint64_t *)nullsub_1(v21, v13);
    if (a3 > 1u)
    {
      v18 = 0;
      v17 = 0;
      v16 = 0;
      v15 = 0;
      v14 = 0;
      goto LABEL_9;
    }
    v19[0] = a1;
    v12 = (void (*)(_QWORD *__return_ptr, _QWORD *))*result;
  }
  sub_21424CE84((uint64_t)result, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
  v12(v20, v19);
  result = sub_2142BF010(v5);
  v14 = v20[0];
  v15 = v20[1];
  v16 = v20[2];
  v17 = v20[3];
  v18 = v20[4];
LABEL_9:
  *a4 = v14;
  a4[1] = v15;
  a4[2] = v16;
  a4[3] = v17;
  a4[4] = v18;
  return result;
}

uint64_t sub_2142B6EFC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *__return_ptr, uint64_t *);
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[7];
  uint64_t v15;
  _BYTE v16[112];

  sub_2141E801C((uint64_t)v3, (uint64_t)v14, qword_253F10468);
  v7 = v14[3];
  v9 = v14[6];
  v10 = v15;
  v11 = (void (*)(uint64_t *__return_ptr, uint64_t *))v14[0];
  sub_2141E801C((uint64_t)v3, (uint64_t)v16, qword_253F10468);
  if ((v16[96] & 1) != 0)
  {
    if (a3 == 2)
    {
      v12[0] = a1;
      v12[1] = a2;
      swift_retain();
      swift_retain();
      sub_2141DD47C(v7);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v9, v10);
      v11(&v13, v12);
      sub_2142BF070(v3);
      return v13;
    }
  }
  else if (a3 <= 1u)
  {
    v13 = a1;
    swift_retain();
    swift_retain();
    sub_2141DD47C(v7);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v9, v10);
    v11(v12, &v13);
    sub_2142BF070(v3);
    return v12[0];
  }
  return 0;
}

uint64_t ChartProxy.plotAreaFrame.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for ChartModel.Scenegraph() + 60)))
    return swift_retain();
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t ChartProxy.plotFrame.getter()
{
  type metadata accessor for ChartModel.Scenegraph();
  return swift_retain();
}

double ChartProxy.plotAreaSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 1112);
}

uint64_t ChartProxy.position<A>(forX:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  double v12;
  double v13;
  char v14;
  char v15;
  double v16[2];
  double v17[2];

  if (*(unsigned __int8 *)(v3 + 504) == 255)
    return 0;
  v5 = v3;
  v6 = sub_214400B9C(a1, a2, a3);
  v8 = v7;
  v10 = v9;
  v11 = sub_214204924(v6, v7, v9, 0.0);
  v13 = v12;
  v15 = v14;
  sub_2141E60B8(v6, v8, v10);
  if ((v15 & 1) != 0)
    return 0;
  *(_QWORD *)&v16[0] = v11;
  v16[1] = v13;
  sub_2142B71F4(v16, v5, v17);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_2142B71F4@<X0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t result;
  uint64_t v12;

  v6 = sub_2144240D4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*a1 + a1[1]) * 0.5;
  type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDED118], v6);
  LOBYTE(a1) = sub_2144240C8();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((a1 & 1) != 0)
    v10 = *(double *)(a2 + 1112) - v10;
  *a3 = v10;
  return result;
}

uint64_t ChartProxy.position<A>(forY:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  double v9;
  double v10;
  double v11;
  char v12;
  char v13;
  uint64_t result;

  if (*(unsigned __int8 *)(v3 + 616) == 255
    || (v4 = sub_214400B9C(a1, a2, a3),
        v6 = v5,
        v8 = v7,
        v9 = COERCE_DOUBLE(sub_214204924(v4, v5, v7, 0.0)),
        v11 = v10,
        v13 = v12,
        sub_2141E60B8(v4, v6, v8),
        (v13 & 1) != 0))
  {
    *(double *)&result = 0.0;
  }
  else
  {
    *(double *)&result = (v9 + v11) * 0.5;
  }
  return result;
}

uint64_t ChartProxy.position<A, B>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v23;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v23 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v23 - v14, a1, a3);
  v16 = (uint64_t)&v15[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v16, a2, a4);
  v17 = ChartProxy.position<A>(forX:)((uint64_t)v15, a3, a5);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, TupleTypeMetadata2);
  }
  else
  {
    v19 = v17;
    ChartProxy.position<A>(forY:)(v16, a4, a6);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, TupleTypeMetadata2);
    if ((v21 & 1) == 0)
      return v19;
  }
  return 0;
}

uint64_t ChartProxy.positionRange<A>(forX:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char v13;
  double v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  double v26;
  double v27;
  char v28;
  char v29;
  uint64_t result;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _OWORD v36[6];
  uint64_t v37;
  char v38;

  v4 = v3;
  v8 = sub_2144240D4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v4 + 504);
  if (v12 == 255)
  {
    v13 = 1;
    v14 = 0.0;
    v15 = 0.0;
  }
  else
  {
    v16 = *(_QWORD *)(v4 + 496);
    v17 = *(_OWORD *)(v4 + 416);
    v36[0] = *(_OWORD *)(v4 + 400);
    v36[1] = v17;
    v18 = *(_OWORD *)(v4 + 448);
    v36[2] = *(_OWORD *)(v4 + 432);
    v36[3] = v18;
    v19 = *(_OWORD *)(v4 + 480);
    v36[4] = *(_OWORD *)(v4 + 464);
    v36[5] = v19;
    v37 = v16;
    v38 = v12 & 1;
    v20 = sub_214400B9C(a1, a2, a3);
    v22 = v21;
    v24 = v23;
    *(double *)&v25 = COERCE_DOUBLE(sub_214204924(v20, v21, v23, 0.0));
    v27 = v26;
    v13 = v28 & 1;
    sub_2141E60B8(v20, v22, v24);
    v14 = *(double *)&v25;
    v15 = v27;
  }
  type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDED118], v8);
  v29 = sub_2144240C8();
  *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8));
  if ((v29 & 1) != 0)
  {
    if ((v13 & 1) != 0)
    {
      *(double *)&result = 0.0;
      return result;
    }
    if (v14 > v15)
      v31 = v14;
    else
      v31 = v15;
    v32 = *(double *)(v4 + 1112);
    if (v15 >= v14)
      v33 = v14;
    else
      v33 = v15;
    if (v32 - v31 <= v32 - v33)
    {
      *(double *)&result = v32 - v31;
      return result;
    }
    __break(1u);
  }
  else
  {
    if ((v13 & 1) != 0)
    {
      *(double *)&result = 0.0;
      return result;
    }
    if (v15 >= v14)
      v34 = v14;
    else
      v34 = v15;
    if (v14 > v15)
      v35 = v14;
    else
      v35 = v15;
    if (v34 <= v35)
    {
      *(double *)&result = v34;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t ChartProxy.positionRange<A>(forY:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  double v9;
  double v10;
  double v11;
  char v12;
  char v13;
  uint64_t result;
  double v15;
  double v16;

  if (*(unsigned __int8 *)(v3 + 616) == 255)
    return 0;
  v4 = sub_214400B9C(a1, a2, a3);
  v6 = v5;
  v8 = v7;
  v9 = COERCE_DOUBLE(sub_214204924(v4, v5, v7, 0.0));
  v11 = v10;
  v13 = v12;
  result = sub_2141E60B8(v4, v6, v8);
  if ((v13 & 1) != 0)
    return 0;
  v15 = v9;
  if (v11 >= v9)
    v16 = v9;
  else
    v16 = v11;
  if (v9 <= v11)
    v15 = v11;
  if (v16 <= v15)
    return *(_QWORD *)&v16;
  __break(1u);
  return result;
}

uint64_t ChartProxy.positionRange<A, B>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  float64_t v21;
  float64_t v22;
  uint64_t v23;
  double v24;
  float64_t v25;
  char v26;
  char v27;
  uint64_t result;
  char v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v16 = (char *)&v33 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v33 - v15, a1, a3);
  v17 = (uint64_t)&v16[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v17, a2, a4);
  *(double *)&v18 = COERCE_DOUBLE(ChartProxy.positionRange<A>(forX:)((uint64_t)v16, a3, a5));
  if ((v20 & 1) != 0)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, TupleTypeMetadata2);
    goto LABEL_5;
  }
  v21 = *(double *)&v18;
  v22 = v19;
  v23 = ChartProxy.positionRange<A>(forY:)(v17, a4, v34);
  v25 = v24;
  v27 = v26;
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, TupleTypeMetadata2);
  if ((v27 & 1) != 0)
  {
LABEL_5:
    v21 = 0.0;
    v23 = 0;
    v32 = 0uLL;
    v29 = 1;
    goto LABEL_6;
  }
  v29 = 0;
  v30.f64[0] = v21;
  *(_QWORD *)&v30.f64[1] = v23;
  v31.f64[0] = v22;
  v31.f64[1] = v25;
  v32 = vsubq_f64(v31, v30);
LABEL_6:
  *(float64_t *)a7 = v21;
  *(_QWORD *)(a7 + 8) = v23;
  *(float64x2_t *)(a7 + 16) = v32;
  *(_BYTE *)(a7 + 32) = v29;
  return result;
}

uint64_t ChartProxy.value<A>(atX:as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  char v89;

  v9 = sub_2144240D4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(unsigned __int8 *)(v4 + 504);
  if (v14 != 255)
  {
    v73 = a2;
    v74 = a1;
    v15 = *(_QWORD *)(v4 + 400);
    v16 = *(_QWORD *)(v4 + 408);
    v82 = *(_QWORD *)(v4 + 416);
    v83 = v15;
    v17 = *(_QWORD *)(v4 + 424);
    v75 = *(_QWORD *)(v4 + 432);
    v76 = a3;
    v77 = *(_QWORD *)(v4 + 440);
    v78 = v16;
    v18 = *(_QWORD *)(v4 + 448);
    v19 = *(_QWORD *)(v4 + 456);
    v84 = v17;
    v85 = v18;
    v21 = *(_QWORD *)(v4 + 464);
    v20 = *(_QWORD *)(v4 + 472);
    v23 = *(_QWORD *)(v4 + 480);
    v22 = *(_QWORD *)(v4 + 488);
    v80 = v14;
    LODWORD(v81) = v14 & 1;
    v24 = *(_QWORD *)(v4 + 496);
    v68 = v4 + *(int *)(type metadata accessor for ChartModel.Scenegraph() + 56);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, *MEMORY[0x24BDED118], v9);
    v67 = v81;
    v69 = v24;
    v66 = v24;
    v70 = v22;
    v65 = v22;
    v71 = v23;
    v64 = v23;
    v72 = v20;
    v63[1] = v20;
    v79 = v21;
    LOBYTE(v63[0]) = v21;
    v25 = v78;
    v26 = v75;
    v27 = v77;
    v81 = v19;
    sub_21421BAE4(v83, v78, v82, v84, v75, v77, v85, v19, v63[0]);
    LOBYTE(v22) = sub_2144240C8();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    if ((v22 & 1) != 0)
      a4 = *(double *)(v4 + 1112) - a4;
    a3 = v76;
    v28 = (void (*)(uint64_t *__return_ptr, _QWORD *))v26;
    if ((v80 & 1) != 0)
    {
      if (v26)
      {
        *(double *)v86 = a4;
        v29 = v25;
        v30 = v80;
        swift_retain();
        v31 = v27;
        sub_2141DD47C((uint64_t)v28);
        swift_bridgeObjectRetain();
        v32 = v81;
        v33 = v79;
        sub_2141E83DC(v81, v79);
        v28(&v87, v86);
        v34 = v88;
        v68 = v87;
        v67 = v30;
        v35 = v69;
        v36 = v70;
        v37 = v71;
        v38 = v72;
        LOBYTE(v63[0]) = v33;
        v39 = (uint64_t)v28;
        v41 = v83;
        v40 = v84;
        v42 = v29;
        v43 = v82;
        v44 = v31;
        v45 = v85;
        sub_21421BB38(v83, v42, v82, v84, v39, v44, v85, v32, v63[0], v72, v71, v70, v69, v67);
        v64 = v37;
        a3 = v76;
        v11 = sub_21421BB38(v41, v78, v43, v40, v75, v77, v45, v32, v79, v38, v64, v36, v35, v80);
        if (v34)
          v46 = v68;
        else
          v46 = 0;
        if (v34)
          LOBYTE(v14) = 2;
        else
          LOBYTE(v14) = -1;
        goto LABEL_18;
      }
    }
    else if (v26)
    {
      *(double *)v86 = a4;
      v47 = v25;
      v48 = v80;
      swift_retain();
      v49 = v27;
      sub_2141DD47C((uint64_t)v28);
      swift_bridgeObjectRetain();
      v50 = v79;
      sub_2141E83DC(v81, v79);
      v28(&v87, v86);
      v67 = v48;
      v51 = v69;
      v52 = v70;
      v53 = v71;
      v54 = v72;
      LOBYTE(v63[0]) = v50;
      v56 = v83;
      v55 = v84;
      v57 = v47;
      v58 = v82;
      v59 = v49;
      v60 = v85;
      sub_21421BB38(v83, v57, v82, v84, (uint64_t)v28, v59, v85, v81, v63[0], v72, v71, v70, v69, v67);
      v11 = sub_21421BB38(v56, v78, v58, v55, (uint64_t)v28, v77, v60, v81, v79, v54, v53, v52, v51, v80);
      v34 = 0;
      v46 = v87;
      v14 = v88 << 31 >> 31;
      if ((v88 & 1) != 0)
        v46 = 0;
      goto LABEL_18;
    }
    v11 = sub_21421BB38(v83, v25, v82, v84, 0, v27, v85, v81, v79, v72, v71, v70, v69, v80);
    v46 = 0;
    v34 = 0;
    LOBYTE(v14) = -1;
LABEL_18:
    a1 = v74;
    goto LABEL_19;
  }
  v46 = 0;
  v34 = 0;
LABEL_19:
  v87 = v46;
  v88 = v34;
  v89 = v14;
  MEMORY[0x24BDAC7A8](v11);
  sub_2141D8BF8(qword_254D6A808);
  sub_2142B6920((void (*)(char *, char *))sub_2142BAAF4, (uint64_t)v63, MEMORY[0x24BEE4078], a1, v61, a3);
  return sub_2141E60A4(v87, v88, v89);
}

uint64_t ChartProxy.value<A>(atY:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[5];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  char v41;

  v7 = a4;
  v8 = *(unsigned __int8 *)(v5 + 616);
  if (v8 != 255)
  {
    v37 = a4;
    v9 = *(_QWORD *)(v5 + 512);
    v10 = *(_QWORD *)(v5 + 520);
    v11 = *(_QWORD *)(v5 + 528);
    v12 = *(_QWORD *)(v5 + 536);
    v13 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(v5 + 544);
    v14 = *(_QWORD *)(v5 + 552);
    v15 = *(_QWORD *)(v5 + 560);
    v16 = *(_QWORD *)(v5 + 568);
    v17 = *(_QWORD *)(v5 + 576);
    v18 = *(_QWORD *)(v5 + 584);
    v19 = *(_QWORD *)(v5 + 592);
    v20 = *(_QWORD *)(v5 + 600);
    v21 = *(_QWORD *)(v5 + 608);
    if ((v8 & 1) != 0)
    {
      if (v13)
      {
        *(double *)v38 = a5;
        v32 = v10;
        v33 = v9;
        v35 = v15;
        v36 = a3;
        v30 = v11;
        v31 = v12;
        v34 = v16;
        sub_21421C7C0(v9, v10, v11, v12, (uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v21, v8);
        v13(&v39, v38);
        v22 = v40;
        v29 = v39;
        a1 = sub_21421BB38(v33, v32, v30, v31, (uint64_t)v13, v14, v35, v34, v17, v18, v19, v20, v21, v8);
        if (v22)
          v23 = v29;
        else
          v23 = 0;
        if (v22)
          LOBYTE(v24) = 2;
        else
          LOBYTE(v24) = -1;
        goto LABEL_16;
      }
    }
    else if (v13)
    {
      *(double *)v38 = a5;
      v32 = v10;
      v33 = v9;
      v35 = v15;
      v36 = a3;
      v30 = v11;
      v31 = v12;
      v34 = v16;
      sub_21421C7C0(v9, v10, v11, v12, (uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v21, v8);
      v13(&v39, v38);
      a1 = sub_21421BB38(v33, v32, v30, v31, (uint64_t)v13, v14, v35, v34, v17, v18, v19, v20, v21, v8);
      v22 = 0;
      v23 = v39;
      v24 = v40 << 31 >> 31;
      if ((v40 & 1) != 0)
        v23 = 0;
      goto LABEL_16;
    }
    v23 = 0;
    v22 = 0;
    LOBYTE(v24) = -1;
LABEL_16:
    v7 = v37;
    goto LABEL_17;
  }
  v23 = 0;
  v22 = 0;
  LOBYTE(v24) = -1;
LABEL_17:
  v39 = v23;
  v40 = v22;
  v41 = v24;
  MEMORY[0x24BDAC7A8](a1);
  v28[2] = a2;
  v28[3] = v25;
  v28[4] = a2;
  sub_2141D8BF8(qword_254D6A808);
  sub_2142B6920((void (*)(char *, char *))sub_2142BAAF4, (uint64_t)v28, MEMORY[0x24BEE4078], a2, v26, v7);
  return sub_2141E60A4(v39, v40, v41);
}

uint64_t ChartProxy.value<A, B>(at:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata2;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  v38 = a4;
  v39 = a5;
  v36 = sub_214425388();
  v34 = *(_QWORD *)(v36 - 8);
  v12 = MEMORY[0x24BDAC7A8](v36);
  v14 = (char *)&v34 - v13;
  v37 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v35 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_214425388();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v34 - v19;
  v21 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ChartProxy.value<A>(atX:as:)(a1, a3, (uint64_t)v20, a6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
LABEL_5:
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v39, 1, 1, TupleTypeMetadata2);
  }
  v24 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
  v25 = v24(v23, v20, a1);
  ChartProxy.value<A>(atY:as:)(v25, a2, v38, (uint64_t)v14, a7);
  v26 = v37;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v14, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, a1);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v36);
    goto LABEL_5;
  }
  v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v30 = v35;
  v29(v35, v14, a2);
  v31 = swift_getTupleTypeMetadata2();
  v32 = v39;
  v33 = &v39[*(int *)(v31 + 48)];
  v24(v39, v23, a1);
  v29(v33, v30, a2);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v32, 0, 1, v31);
}

uint64_t ChartProxy.plotContainerFrame.getter()
{
  type metadata accessor for ChartModel.Scenegraph();
  return swift_retain();
}

uint64_t ChartProxy.foregroundStyle<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(unsigned __int8 *)(v3 + 720);
  if (v4 == 255)
    return 0;
  v18 = *(_QWORD *)(v3 + 624);
  v19 = *(_QWORD *)(v3 + 632);
  v20 = *(_QWORD *)(v3 + 640);
  v21 = *(_QWORD *)(v3 + 648);
  v14 = *(_QWORD *)(v3 + 656);
  v16 = *(_QWORD *)(v3 + 664);
  v22 = *(_QWORD *)(v3 + 672);
  v17 = *(_QWORD *)(v3 + 680);
  v23 = *(_QWORD *)(v3 + 688);
  v15 = *(_QWORD *)(v3 + 696);
  v24 = *(_QWORD *)(v3 + 704);
  v25 = *(_QWORD *)(v3 + 712);
  sub_21424D78C(v18, v19, v20, v21, v14, v16, v22, v17, v23, v15, v24, v25, v4);
  v8 = sub_214400B9C(a1, a2, a3);
  v10 = v9;
  LOBYTE(a2) = v11;
  v12 = sub_2142B6EFC(v8, v9, v11);
  sub_2141E60B8(v8, v10, a2);
  sub_21421B874(v18, v19, v20, v21, v14, v16, v22, v17, v23, v15, v24, v25, v4);
  return v12;
}

uint64_t ChartProxy.lineStyle<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  _BYTE v22[136];
  _BYTE v23[136];
  _BYTE v24[136];

  sub_2141E801C(v4 + 976, (uint64_t)v23, &qword_253F149E8);
  sub_2141E801C((uint64_t)v23, (uint64_t)v24, &qword_253F149E8);
  result = sub_21421B90C((uint64_t)v24);
  if ((_DWORD)result == 1)
  {
    v10 = 0;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  else
  {
    sub_2141E801C((uint64_t)v24, (uint64_t)v22, &qword_254D695C0);
    sub_21424D8C4((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21424D6F8);
    v13 = sub_214400B9C(a1, a2, a3);
    v15 = v14;
    v17 = v16;
    sub_2142B6D98(v13, v14, v16, v20);
    v18 = v20[1];
    v19 = v20[0];
    v10 = v21;
    sub_2141E60B8(v13, v15, v17);
    result = sub_21424D8C4((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BA44);
    v12 = v18;
    v11 = v19;
  }
  *(_OWORD *)a4 = v11;
  *(_OWORD *)(a4 + 16) = v12;
  *(_QWORD *)(a4 + 32) = v10;
  return result;
}

double ChartProxy.symbol<A>(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  double result;
  _BYTE v15[136];

  sub_2141E070C(v4 + 728, (uint64_t)v15, &qword_253F149F0);
  if (v15[128] == 255)
  {
    sub_2141E0750((uint64_t)v15, &qword_253F149F0);
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    v9 = sub_214400B9C(a1, a2, a3);
    v11 = v10;
    v13 = v12;
    sub_2142B6C10(v9, v10, v12, a4);
    sub_2141E60B8(v9, v11, v13);
    sub_2141E0750((uint64_t)v15, &qword_254D695C8);
  }
  return result;
}

uint64_t ChartProxy.symbolSize<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(unsigned __int8 *)(v3 + 968);
  if (v4 == 255)
    return 0;
  v17 = *(_QWORD *)(v3 + 864);
  v18 = *(_QWORD *)(v3 + 872);
  v19 = *(_QWORD *)(v3 + 880);
  v20 = *(_QWORD *)(v3 + 888);
  v15 = *(_QWORD *)(v3 + 896);
  v16 = *(_QWORD *)(v3 + 904);
  v21 = *(_QWORD *)(v3 + 912);
  v22 = *(_QWORD *)(v3 + 920);
  v23 = *(_QWORD *)(v3 + 928);
  v24 = *(_QWORD *)(v3 + 936);
  v25 = *(_QWORD *)(v3 + 944);
  v26 = *(_QWORD *)(v3 + 952);
  v27 = *(_QWORD *)(v3 + 960);
  sub_21421C7C0(v17, v18, v19, v20, v15, v16, v21, v22, v23, v24, v25, v26, v27, v4);
  v8 = sub_214400B9C(a1, a2, a3);
  v10 = v9;
  v12 = v11;
  v13 = sub_2142B6AB8(v8, v9, v11);
  sub_2141E60B8(v8, v10, v12);
  sub_21421BB38(v17, v18, v19, v20, v15, v16, v21, v22, v23, v24, v25, v26, v27, v4);
  return v13;
}

uint64_t ChartProxy.xDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned __int8 *)(v3 + 504) != 255)
  {
    v6 = sub_2141D8BF8(&qword_253F13368);
    v7 = sub_214204AE4(a2, v6, a2, a3);
    if (v7)
      return v7;
  }
  v8 = sub_214425040();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.yDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned __int8 *)(v3 + 616) != 255)
  {
    v6 = sub_2141D8BF8(&qword_253F13368);
    v7 = sub_214204AE4(a2, v6, a2, a3);
    if (v7)
      return v7;
  }
  v8 = sub_214425040();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.foregroundStyleDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned __int8 *)(v3 + 720) != 255)
  {
    v6 = sub_2141D8BF8(qword_253F10468);
    v7 = sub_214204AE4(a2, v6, a2, a3);
    if (v7)
      return v7;
  }
  v8 = sub_214425040();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.symbolDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[136];

  sub_2141E070C(v3 + 728, (uint64_t)v9, &qword_253F149F0);
  if (v9[128] == 255)
  {
    sub_2141E0750((uint64_t)v9, &qword_253F149F0);
LABEL_5:
    v7 = sub_214425040();
    swift_bridgeObjectRelease();
    return v7;
  }
  v6 = sub_2141D8BF8(&qword_254D695C8);
  v7 = sub_214204AE4(a2, v6, a2, a3);
  sub_2141E0750((uint64_t)v9, &qword_254D695C8);
  if (!v7)
    goto LABEL_5;
  return v7;
}

uint64_t ChartProxy.symbolSizeDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned __int8 *)(v3 + 968) != 255)
  {
    v6 = sub_2141D8BF8(&qword_253F13368);
    v7 = sub_214204AE4(a2, v6, a2, a3);
    if (v7)
      return v7;
  }
  v8 = sub_214425040();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.lineStyleDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[136];
  _BYTE v11[136];
  _BYTE v12[136];

  sub_2141E801C(v3 + 976, (uint64_t)v11, &qword_253F149E8);
  sub_2141E801C((uint64_t)v11, (uint64_t)v12, &qword_253F149E8);
  if (sub_21421B90C((uint64_t)v12) != 1)
  {
    sub_2141E801C((uint64_t)v12, (uint64_t)v10, &qword_254D695C0);
    v6 = sub_2141D8BF8(&qword_254D695C0);
    v7 = sub_214204AE4(a2, v6, a2, a3);
    if (v7)
      return v7;
  }
  v8 = sub_214425040();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.selectXValue(at:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(uint64_t *__return_ptr, double *);
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  _BYTE v82[56];

  v3 = sub_2144240D4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ChartModel.Scenegraph();
  sub_2141E070C(v1 + *(int *)(v7 + 68), (uint64_t)&v79, &qword_253F13C28);
  if (v81 == 255)
  {
    sub_2141E0750((uint64_t)&v79, &qword_253F13C28);
    return sub_2143836AC(10);
  }
  sub_2141E6174((uint64_t)&v79, (uint64_t)v82);
  v8 = *(unsigned __int8 *)(v1 + 504);
  if (v8 == 255)
    return sub_2141E61B0((uint64_t)v82);
  v9 = *(_QWORD *)(v1 + 400);
  v74 = *(_QWORD *)(v1 + 408);
  v75 = *(_QWORD *)(v1 + 416);
  v76 = v9;
  v77 = *(_QWORD *)(v1 + 424);
  v70 = *(_QWORD *)(v1 + 432);
  v10 = *(_QWORD *)(v1 + 448);
  v72 = *(_QWORD *)(v1 + 440);
  v73 = v10;
  v11 = *(_QWORD *)(v1 + 464);
  v68 = *(_QWORD *)(v1 + 456);
  v12 = *(_QWORD *)(v1 + 472);
  v13 = *(_QWORD *)(v1 + 480);
  v15 = *(_QWORD *)(v1 + 488);
  v14 = *(_QWORD *)(v1 + 496);
  v71 = v8;
  LODWORD(v67) = v8 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDED118], v3);
  v64 = v14;
  v65 = v15;
  v66 = v13;
  v67 = v12;
  v69 = v11;
  v58 = v11;
  v16 = v74;
  v17 = v70;
  v18 = v72;
  v19 = v73;
  v20 = v68;
  sub_21421BAE4(v76, v74, v75, v77, v70, v72, v73, v68, v58);
  v21 = sub_2144240C8();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((v21 & 1) != 0)
    a1 = *(double *)(v1 + 1112) - a1;
  v22 = (void (*)(uint64_t *__return_ptr, double *))v17;
  if ((v71 & 1) != 0)
  {
    if (v17)
    {
      v78 = a1;
      v23 = v16;
      v24 = v71;
      swift_retain();
      v25 = v18;
      sub_2141DD47C((uint64_t)v22);
      swift_bridgeObjectRetain();
      v26 = v20;
      v27 = v69;
      sub_2141E83DC(v20, v69);
      v28 = v25;
      v22(&v79, &v78);
      v62 = v79;
      v29 = (uint64_t)v22;
      v63 = v80;
      v60 = v24;
      v30 = v64;
      v31 = v65;
      v32 = v66;
      v33 = v67;
      v35 = v76;
      v34 = v77;
      v36 = v23;
      v37 = v75;
      v38 = v28;
      v39 = v73;
      sub_21421BB38(v76, v36, v75, v77, v29, v38, v73, v26, v27, v67, v66, v65, v64, v60);
      sub_21421BB38(v35, v74, v37, v34, v70, v72, v39, v26, v27, v33, v32, v31, v30, v71);
      v40 = v63;
      if (v63)
      {
        v41 = 2;
        v42 = v62;
LABEL_13:
        sub_2143F9D1C(v42, v40, v41);
        return sub_2141E61B0((uint64_t)v82);
      }
      return sub_2141E61B0((uint64_t)v82);
    }
LABEL_14:
    sub_21421BB38(v76, v16, v75, v77, 0, v18, v19, v20, v69, v67, v66, v65, v64, v71);
    return sub_2141E61B0((uint64_t)v82);
  }
  if (!v17)
    goto LABEL_14;
  v78 = a1;
  v44 = v16;
  v45 = v71;
  swift_retain();
  sub_2141DD47C((uint64_t)v22);
  swift_bridgeObjectRetain();
  v46 = v20;
  v47 = v69;
  sub_2141E83DC(v20, v69);
  v22(&v79, &v78);
  v61 = v45;
  v48 = v64;
  v49 = v65;
  v50 = v66;
  v51 = v67;
  v59 = v47;
  v53 = v76;
  v52 = v77;
  v54 = v44;
  v55 = v75;
  v56 = v18;
  v57 = v73;
  sub_21421BB38(v76, v54, v75, v77, (uint64_t)v22, v56, v73, v46, v59, v67, v66, v65, v64, v61);
  sub_21421BB38(v53, v74, v55, v52, (uint64_t)v22, v72, v57, v46, v69, v51, v50, v49, v48, v71);
  if ((v80 & 1) == 0)
  {
    v40 = 0;
    v41 = 0;
    v42 = v79;
    goto LABEL_13;
  }
  return sub_2141E61B0((uint64_t)v82);
}

uint64_t ChartProxy.selectYValue(at:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, double *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  _BYTE v38[56];

  v3 = type metadata accessor for ChartModel.Scenegraph();
  sub_2141E070C(v1 + *(int *)(v3 + 68) + 96, (uint64_t)&v35, &qword_253F13C28);
  if (v37 == 255)
  {
    sub_2141E0750((uint64_t)&v35, &qword_253F13C28);
    return sub_2143836AC(10);
  }
  sub_2141E6174((uint64_t)&v35, (uint64_t)v38);
  v4 = *(unsigned __int8 *)(v1 + 616);
  if (v4 != 255)
  {
    v5 = *(_QWORD *)(v1 + 512);
    v6 = *(_QWORD *)(v1 + 520);
    v7 = *(_QWORD *)(v1 + 528);
    v8 = *(_QWORD *)(v1 + 536);
    v9 = *(void (**)(uint64_t *__return_ptr, double *))(v1 + 544);
    v10 = *(_QWORD *)(v1 + 552);
    v11 = *(_QWORD *)(v1 + 560);
    v12 = *(_QWORD *)(v1 + 568);
    v13 = *(_QWORD *)(v1 + 576);
    v14 = *(_QWORD *)(v1 + 584);
    v15 = *(_QWORD *)(v1 + 592);
    v16 = *(_QWORD *)(v1 + 600);
    v17 = *(_QWORD *)(v1 + 608);
    if ((v4 & 1) != 0)
    {
      if (!v9)
        return sub_2141E61B0((uint64_t)v38);
      v34 = a1;
      v31 = v6;
      v33 = v5;
      v27 = v12;
      v29 = v7;
      v25 = v8;
      sub_21421C7C0(v5, v6, v7, v8, (uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v17, v4);
      v9(&v35, &v34);
      v22 = v36;
      v23 = v35;
      sub_21421BB38(v33, v31, v29, v25, (uint64_t)v9, v10, v11, v27, v13, v14, v15, v16, v17, v4);
      if (!v22)
        return sub_2141E61B0((uint64_t)v38);
      v18 = v22;
      v19 = 2;
      v20 = v23;
    }
    else
    {
      if (!v9)
        return sub_2141E61B0((uint64_t)v38);
      v34 = a1;
      v30 = v6;
      v32 = v5;
      v26 = v12;
      v28 = v7;
      v24 = v8;
      sub_21421C7C0(v5, v6, v7, v8, (uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v17, v4);
      v9(&v35, &v34);
      sub_21421BB38(v32, v30, v28, v24, (uint64_t)v9, v10, v11, v26, v13, v14, v15, v16, v17, v4);
      if ((v36 & 1) != 0)
        return sub_2141E61B0((uint64_t)v38);
      v18 = 0;
      v19 = 0;
      v20 = v35;
    }
    sub_2143F9D1C(v20, v18, v19);
  }
  return sub_2141E61B0((uint64_t)v38);
}

uint64_t ChartProxy.selectXRange(from:to:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD);
  uint64_t v20;
  void (*v21)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *);
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *);
  char v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  uint64_t v119;
  int v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unsigned int v126;
  void (*v127)(char *, _QWORD, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *);
  uint64_t v135;
  void (*v136)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  void (*v144)(char *, _QWORD, uint64_t);
  uint64_t v145;
  unsigned __int8 v146;
  _BYTE v147[20];

  v3 = v2;
  v6 = sub_2144240D4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ChartModel.Scenegraph();
  sub_2141E070C(v2 + *(int *)(v10 + 68) + 48, (uint64_t)&v144, &qword_253F154C0);
  if (v146 == 255)
  {
    sub_2141E0750((uint64_t)&v144, &qword_253F154C0);
    return sub_2143836AC(10);
  }
  sub_2141E61E4((uint64_t)&v144, (uint64_t)v147);
  v11 = *(unsigned __int8 *)(v2 + 504);
  if (v11 == 255)
    return sub_2141E625C((uint64_t)v147);
  v12 = *(_QWORD *)(v2 + 400);
  v137 = *(_QWORD *)(v2 + 408);
  v140 = *(_QWORD *)(v2 + 416);
  v141 = v12;
  v142 = *(_QWORD *)(v2 + 424);
  v136 = *(void (**)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *))(v2 + 432);
  v134 = *(void (**)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *))(v2 + 440);
  v133 = *(_QWORD *)(v2 + 448);
  v13 = *(_QWORD *)(v2 + 464);
  v135 = *(_QWORD *)(v3 + 456);
  v14 = *(_QWORD *)(v3 + 472);
  v15 = *(_QWORD *)(v3 + 480);
  v16 = *(_QWORD *)(v3 + 488);
  v17 = *(_QWORD *)(v3 + 496);
  LODWORD(v139) = v11;
  LODWORD(v132) = v11 & 1;
  v18 = v3 + *(int *)(v10 + 56);
  v19 = *(void (**)(_QWORD))(v7 + 104);
  v126 = *MEMORY[0x24BDED118];
  v127 = (void (*)(char *, _QWORD, uint64_t))v19;
  v19(v9);
  v129 = v17;
  v130 = v16;
  v131 = v15;
  v132 = v14;
  v138 = v13;
  v111 = v13;
  v20 = v137;
  v21 = v136;
  v22 = (uint64_t)v134;
  v23 = v133;
  v24 = v135;
  sub_21421BAE4(v141, v137, v140, v142, (uint64_t)v136, (uint64_t)v134, v133, v135, v111);
  v128 = v18;
  LOBYTE(v18) = sub_2144240C8();
  v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v124 = v9;
  v125 = v6;
  v25(v9, v6);
  if ((v18 & 1) != 0)
    a1 = *(double *)(v3 + 1112) - a1;
  v26 = v21;
  if ((v139 & 1) != 0)
  {
    if (v21)
    {
      v121 = v25;
      v143 = a1;
      v27 = v139;
      swift_retain();
      sub_2141DD47C((uint64_t)v21);
      swift_bridgeObjectRetain();
      v28 = v138;
      sub_2141E83DC(v24, v138);
      v29 = v23;
      v30 = v22;
      v21(&v144, &v143);
      v31 = (uint64_t)v21;
      v123 = (uint64_t)v144;
      v32 = v24;
      v122 = v145;
      v116 = v27;
      v33 = v129;
      v34 = v130;
      v35 = v131;
      v36 = v132;
      v112 = v28;
      v37 = v141;
      v38 = v142;
      v39 = v20;
      v40 = v140;
      sub_21421BB38(v141, v39, v140, v142, v31, v30, v29, v32, v112, v132, v131, v130, v129, v116);
      sub_21421BB38(v37, v137, v40, v38, (uint64_t)v136, v30, v29, v135, v138, v36, v35, v34, v33, v139);
      v41 = v122;
      if (!v122)
        return sub_2141E625C((uint64_t)v147);
      v42 = 2;
      v43 = v123;
      goto LABEL_13;
    }
LABEL_20:
    sub_21421BB38(v141, v20, v140, v142, 0, v22, v23, v24, v138, v132, v131, v130, v129, v139);
    return sub_2141E625C((uint64_t)v147);
  }
  if (!v21)
    goto LABEL_20;
  v121 = v25;
  v143 = a1;
  v45 = v20;
  v46 = v139;
  swift_retain();
  sub_2141DD47C((uint64_t)v26);
  swift_bridgeObjectRetain();
  v47 = v138;
  sub_2141E83DC(v24, v138);
  v48 = v22;
  v26(&v144, &v143);
  v49 = (uint64_t)v26;
  v117 = v46;
  v50 = v129;
  v51 = v130;
  v52 = v131;
  v53 = v132;
  v113 = v47;
  v54 = v140;
  v55 = v141;
  v56 = v45;
  v57 = v142;
  v58 = v48;
  v59 = v135;
  sub_21421BB38(v141, v56, v140, v142, v49, v58, v23, v135, v113, v132, v131, v130, v129, v117);
  sub_21421BB38(v55, v137, v54, v57, (uint64_t)v136, (uint64_t)v134, v23, v59, v138, v53, v52, v51, v50, v139);
  if ((v145 & 1) != 0)
    return sub_2141E625C((uint64_t)v147);
  v41 = 0;
  v42 = 0;
  v43 = (uint64_t)v144;
LABEL_13:
  v60 = *(unsigned __int8 *)(v3 + 504);
  if (v60 != 255)
  {
    v120 = v42;
    v123 = v43;
    v122 = v41;
    v61 = *(_QWORD *)(v3 + 408);
    v62 = *(_QWORD *)(v3 + 416);
    v137 = *(_QWORD *)(v3 + 400);
    v138 = v62;
    v139 = *(_QWORD *)(v3 + 424);
    v140 = v61;
    v134 = *(void (**)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *))(v3 + 432);
    v63 = *(_QWORD *)(v3 + 448);
    v64 = *(_QWORD *)(v3 + 456);
    v141 = *(_QWORD *)(v3 + 440);
    v142 = v63;
    v66 = *(_QWORD *)(v3 + 464);
    v65 = *(_QWORD *)(v3 + 472);
    v68 = *(_QWORD *)(v3 + 480);
    v67 = *(_QWORD *)(v3 + 488);
    LODWORD(v135) = v60;
    v69 = *(_QWORD *)(v3 + 496);
    v70 = v124;
    v71 = v125;
    v127(v124, v126, v125);
    v129 = v69;
    v130 = v67;
    v131 = v68;
    v132 = v65;
    v133 = v66;
    v114 = v66;
    v72 = v134;
    v136 = (void (*)(void (**__return_ptr)(char *, _QWORD, uint64_t), double *))v64;
    sub_21421BAE4(v137, v140, v138, v139, (uint64_t)v134, v141, v142, v64, v114);
    v73 = sub_2144240C8();
    v121(v70, v71);
    if ((v73 & 1) != 0)
      a2 = *(double *)(v3 + 1112) - a2;
    v74 = v123;
    v75 = v135;
    if ((v135 & 1) != 0)
    {
      if (v72)
      {
        v143 = a2;
        v76 = v140;
        swift_retain();
        v77 = v141;
        sub_2141DD47C((uint64_t)v72);
        swift_bridgeObjectRetain();
        v78 = v133;
        sub_2141E83DC((uint64_t)v136, v133);
        v72(&v144, &v143);
        v127 = v144;
        v128 = v145;
        v118 = v75;
        v79 = v129;
        v80 = v130;
        v81 = v131;
        v82 = v132;
        v83 = (uint64_t)v72;
        v84 = v137;
        v85 = v76;
        v86 = v138;
        v87 = v139;
        v88 = v77;
        v89 = v142;
        v90 = (uint64_t)v136;
        sub_21421BB38(v137, v85, v138, v139, v83, v88, v142, (uint64_t)v136, v78, v132, v131, v130, v129, v118);
        sub_21421BB38(v84, v140, v86, v87, (uint64_t)v134, v141, v89, v90, v78, v82, v81, v80, v79, v135);
        v91 = v128;
        if (v128)
        {
          v92 = 2;
          v93 = v122;
          v94 = v120;
          v95 = v123;
          v96 = (uint64_t)v127;
LABEL_28:
          sub_2143F9E84(v95, v93, v94, v96, v91, v92);
          return sub_2141E625C((uint64_t)v147);
        }
LABEL_24:
        v110 = v123;
LABEL_26:
        sub_2141E60A4(v110, v122, v120);
        return sub_2141E625C((uint64_t)v147);
      }
    }
    else if (v72)
    {
      v143 = a2;
      v97 = v140;
      swift_retain();
      v98 = v141;
      sub_2141DD47C((uint64_t)v72);
      swift_bridgeObjectRetain();
      v99 = v133;
      sub_2141E83DC((uint64_t)v136, v133);
      v72(&v144, &v143);
      v100 = v129;
      v101 = v130;
      v102 = v131;
      v103 = v132;
      v115 = v99;
      v105 = v137;
      v104 = v138;
      v106 = v97;
      v107 = v139;
      v108 = v98;
      v109 = v142;
      sub_21421BB38(v137, v106, v138, v139, (uint64_t)v72, v108, v142, (uint64_t)v136, v115, v132, v131, v130, v129, v75);
      sub_21421BB38(v105, v140, v104, v107, (uint64_t)v72, v141, v109, (uint64_t)v136, v133, v103, v102, v101, v100, v75);
      if ((v145 & 1) == 0)
      {
        v91 = 0;
        v92 = 0;
        v96 = (uint64_t)v144;
        v93 = v122;
        v94 = v120;
        v95 = v123;
        goto LABEL_28;
      }
      goto LABEL_24;
    }
    sub_21421BB38(v137, v140, v138, v139, 0, v141, v142, (uint64_t)v136, v133, v132, v131, v130, v129, v135);
    v110 = v74;
    goto LABEL_26;
  }
  sub_2141E60A4(v43, v41, v42);
  return sub_2141E625C((uint64_t)v147);
}

uint64_t ChartProxy.selectYRange(from:to:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t *__return_ptr, double *);
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  _BYTE v38[56];

  v5 = type metadata accessor for ChartModel.Scenegraph();
  sub_2141E070C(v2 + *(int *)(v5 + 68) + 144, (uint64_t)&v35, &qword_253F154C0);
  if (v37 == 255)
  {
    sub_2141E0750((uint64_t)&v35, &qword_253F154C0);
    return sub_2143836AC(10);
  }
  sub_2141E61E4((uint64_t)&v35, (uint64_t)v38);
  v6 = *(unsigned __int8 *)(v2 + 616);
  if (v6 != 255)
  {
    v26 = *(_QWORD *)(v2 + 520);
    v27 = *(_QWORD *)(v2 + 512);
    v24 = *(_QWORD *)(v2 + 536);
    v25 = *(_QWORD *)(v2 + 528);
    v7 = *(void (**)(uint64_t *__return_ptr, double *))(v2 + 544);
    v28 = *(_QWORD *)(v2 + 560);
    v29 = *(_QWORD *)(v2 + 568);
    v22 = *(_QWORD *)(v2 + 552);
    v23 = *(_QWORD *)(v2 + 576);
    v32 = *(_QWORD *)(v2 + 592);
    v33 = *(_QWORD *)(v2 + 584);
    v30 = *(_QWORD *)(v2 + 608);
    v31 = *(_QWORD *)(v2 + 600);
    if ((v6 & 1) != 0)
    {
      if (!v7)
        return sub_2141E625C((uint64_t)v38);
      v34 = a1;
      sub_21421C7C0(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      v12 = v36;
      v21 = v35;
      sub_21421BB38(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      if (!v12)
        return sub_2141E625C((uint64_t)v38);
      v34 = a2;
      sub_21421C7C0(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      v18 = v35;
      v19 = v36;
      sub_21421BB38(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      v13 = v19;
      if (!v19)
      {
        v9 = v12;
        v8 = v21;
        v10 = 2;
        goto LABEL_16;
      }
      v14 = 2;
      v16 = v12;
      v15 = v21;
      v17 = v18;
    }
    else
    {
      if (!v7)
        return sub_2141E625C((uint64_t)v38);
      v34 = a1;
      sub_21421C7C0(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      sub_21421BB38(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      if ((v36 & 1) != 0)
        return sub_2141E625C((uint64_t)v38);
      v20 = v35;
      v34 = a2;
      sub_21421C7C0(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      sub_21421BB38(v27, v26, v25, v24, (uint64_t)v7, v22, v28, v29, v23, v33, v32, v31, v30, v6);
      if ((v36 & 1) != 0)
      {
        v8 = v20;
        v9 = 0;
        v10 = 0;
LABEL_16:
        sub_2141E60A4(v8, v9, v10);
        return sub_2141E625C((uint64_t)v38);
      }
      v14 = 0;
      v16 = 0;
      v13 = 0;
      v17 = v35;
      v15 = v20;
    }
    sub_2143F9E84(v15, v16, v14, v17, v13, v14);
  }
  return sub_2141E625C((uint64_t)v38);
}

uint64_t ChartProxy.selectAngleValue(at:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t *__return_ptr, double *);
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  _BYTE v78[56];

  v3 = sub_2144240D4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ChartModel.Scenegraph();
  sub_2141E070C(v1 + *(int *)(v7 + 68) + 192, (uint64_t)&v75, &qword_253F13C28);
  if (v77 == 255)
  {
    sub_2141E0750((uint64_t)&v75, &qword_253F13C28);
    return sub_2143836AC(10);
  }
  sub_2141E6174((uint64_t)&v75, (uint64_t)v78);
  v8 = *(unsigned __int8 *)(v1 + 504);
  if (v8 == 255)
    return sub_2141E61B0((uint64_t)v78);
  v9 = a1 * 57.2957795 / 360.0 * *(double *)(v1 + 1112);
  v10 = *(_QWORD *)(v1 + 400);
  v70 = *(_QWORD *)(v1 + 408);
  v71 = *(_QWORD *)(v1 + 416);
  v72 = v10;
  v73 = *(_QWORD *)(v1 + 424);
  v66 = *(_QWORD *)(v1 + 432);
  v63 = *(_QWORD *)(v1 + 440);
  v65 = *(_QWORD *)(v1 + 448);
  v11 = *(_QWORD *)(v1 + 464);
  v68 = *(_QWORD *)(v1 + 456);
  v12 = v3;
  v64 = v3;
  v13 = *(_QWORD *)(v1 + 472);
  v14 = *(_QWORD *)(v1 + 480);
  v16 = *(_QWORD *)(v1 + 488);
  v15 = *(_QWORD *)(v1 + 496);
  v69 = v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDED118], v12);
  v17 = v63;
  v59 = v15;
  v60 = v16;
  v61 = v14;
  v62 = v13;
  v67 = v11;
  v53 = v11;
  v18 = v70;
  v19 = v66;
  v20 = v65;
  v21 = v68;
  sub_21421BAE4(v72, v70, v71, v73, v66, v63, v65, v68, v53);
  v22 = sub_2144240C8();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v64);
  if ((v22 & 1) != 0)
    v9 = *(double *)(v1 + 1112) - v9;
  v23 = (void (*)(uint64_t *__return_ptr, double *))v19;
  if ((v69 & 1) != 0)
  {
    if (v19)
    {
      v74 = v9;
      v24 = v18;
      v25 = v69;
      swift_retain();
      sub_2141DD47C((uint64_t)v23);
      swift_bridgeObjectRetain();
      v26 = v67;
      sub_2141E83DC(v21, v67);
      v23(&v75, &v74);
      v58 = v75;
      v27 = (uint64_t)v23;
      v64 = v76;
      v56 = v25;
      v28 = v59;
      v29 = v60;
      v30 = v61;
      v31 = v62;
      v54 = v26;
      v33 = v72;
      v32 = v73;
      v34 = v24;
      v35 = v71;
      v36 = v65;
      sub_21421BB38(v72, v34, v71, v73, v27, v17, v65, v21, v54, v62, v61, v60, v59, v56);
      sub_21421BB38(v33, v70, v35, v32, v66, v17, v36, v21, v67, v31, v30, v29, v28, v69);
      v37 = v64;
      if (v64)
      {
        v38 = 2;
        v39 = v58;
LABEL_13:
        sub_2143F9D1C(v39, v37, v38);
        return sub_2141E61B0((uint64_t)v78);
      }
      return sub_2141E61B0((uint64_t)v78);
    }
LABEL_14:
    sub_21421BB38(v72, v18, v71, v73, 0, v17, v20, v21, v67, v62, v61, v60, v59, v69);
    return sub_2141E61B0((uint64_t)v78);
  }
  if (!v19)
    goto LABEL_14;
  v74 = v9;
  v41 = v18;
  v42 = v69;
  swift_retain();
  sub_2141DD47C((uint64_t)v23);
  v43 = v20;
  swift_bridgeObjectRetain();
  v44 = v67;
  sub_2141E83DC(v21, v67);
  v23(&v75, &v74);
  v57 = v42;
  v45 = v59;
  v46 = v60;
  v47 = v61;
  v48 = v62;
  v55 = v44;
  v50 = v72;
  v49 = v73;
  v51 = v41;
  v52 = v71;
  sub_21421BB38(v72, v51, v71, v73, (uint64_t)v23, v17, v43, v68, v55, v62, v61, v60, v59, v57);
  sub_21421BB38(v50, v70, v52, v49, (uint64_t)v23, v17, v43, v68, v67, v48, v47, v46, v45, v69);
  if ((v76 & 1) == 0)
  {
    v37 = 0;
    v38 = 0;
    v39 = v75;
    goto LABEL_13;
  }
  return sub_2141E61B0((uint64_t)v78);
}

double ChartProxy.angle(at:)(double a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;

  v3 = atan2(-(a2 - *(double *)(v2 + 1120) * 0.5), a1 - *(double *)(v2 + 1112) * 0.5) * 180.0 / 3.14159265;
  if (v3 <= 0.0)
    v3 = v3 + 360.0;
  v4 = 90.0 - v3;
  if (v4 < 0.0)
    v4 = v4 + 360.0;
  return v4 / 360.0 * 360.0 * 0.0174532925;
}

uint64_t ChartProxy.value<A>(atAngle:as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;

  return ChartProxy.value<A>(atX:as:)(a1, a2, a3, a4 * 57.2957795 / 360.0 * *(double *)(v4 + 1112));
}

uint64_t View.chartOverlay<A>(alignment:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2142BA818(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_24D183050, (uint64_t)sub_2142BABA4, MEMORY[0x24BDF3140]);
}

uint64_t View.chartBackground<A>(alignment:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2142BA818(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_24D183078, (uint64_t)sub_2142BABA4, MEMORY[0x24BDF32B0]);
}

uint64_t sub_2142BA818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(ValueMetadata *, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, ValueMetadata *, uint64_t, uint64_t, unint64_t, uint64_t))
{
  _QWORD *v18;
  unint64_t v19;

  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a3;
  v18[7] = a4;
  v19 = sub_2142BABA8();
  swift_retain();
  a11(&type metadata for ChartScenegraphKey, a1, a2, a10, v18, a5, &type metadata for ChartScenegraphKey, a6, a7, v19, a8);
  return swift_release();
}

uint64_t sub_2142BA8F4@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *);
  uint64_t v29;
  uint64_t v30;

  v29 = a6;
  v30 = a5;
  v27 = a3;
  v28 = a2;
  v8 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ChartModel.Scenegraph();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ChartProxy();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x24BDAC7A8](v16);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v27 - v23;
  sub_2141E070C(a1, (uint64_t)v10, qword_253F13E08);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_2142D8A8C((uint64_t)v14);
    sub_2141E0750((uint64_t)v10, qword_253F13E08);
  }
  else
  {
    sub_2142BEF30((uint64_t)v10, (uint64_t)v14);
  }
  sub_2142BEF30((uint64_t)v14, (uint64_t)v18);
  v28(v18);
  sub_2142BEF74((uint64_t)v18);
  sub_2142D7304((uint64_t)v22, a4, (uint64_t)v24);
  v25 = *(void (**)(char *, uint64_t))(v19 + 8);
  v25(v22, a4);
  sub_2142D6BB0((uint64_t)v24, a4, v29);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, a4);
}

void sub_2142BAAF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2142BAB08(a1, a2);
}

void sub_2142BAB08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 16);
  sub_2141DD14C(*(_QWORD *)a1, v7, v8);
  sub_2143F9FE4(v6, v7, v8, v4, v5, a2);
}

uint64_t sub_2142BAB80()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_2142BABA8()
{
  unint64_t result;

  result = qword_253F10440;
  if (!qword_253F10440)
  {
    result = MEMORY[0x2199CD934](&unk_214434B40, &type metadata for ChartScenegraphKey);
    atomic_store(result, (unint64_t *)&qword_253F10440);
  }
  return result;
}

uint64_t sub_2142BABEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2142BA8F4(a1, *(void (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ChartProxy(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  BOOL *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  char v11;
  _OWORD *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  int v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t *v103;
  int v104;
  char v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t *v109;
  int v110;
  char v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  _OWORD *v149;
  _OWORD *v150;
  int v151;
  __int128 v152;
  __int128 v153;
  _OWORD *v154;
  _OWORD *v155;
  int v156;
  __int128 v157;
  __int128 v158;
  _OWORD *v159;
  _OWORD *v160;
  int v161;
  __int128 v162;
  __int128 v163;
  _OWORD *v164;
  _OWORD *v165;
  int v166;
  __int128 v167;
  __int128 v168;
  _OWORD *v169;
  _OWORD *v170;
  int v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  BOOL *v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  int *v209;

  v4 = type metadata accessor for ChartModel.Scenegraph();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return a1;
  }
  v6 = (int *)v4;
  v7 = (BOOL *)(a1 + 264);
  v8 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v9;
  v10 = a2 + 4;
  v11 = *((_BYTE *)a2 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v11 & 1) != 0)
  {
    v12 = (_OWORD *)(a1 + 32);
    v13 = *((unsigned __int8 *)a2 + 72);
    if (v13 == 255)
    {
      v14 = *((_OWORD *)a2 + 3);
      *v12 = *v10;
      *(_OWORD *)(a1 + 48) = v14;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 56) = v16;
      (**(void (***)(_OWORD *, uint64_t))(v16 - 8))(v12, (uint64_t)(a2 + 4));
      *(_BYTE *)(a1 + 72) = (v13 & 1) != 0;
    }
    v17 = (_OWORD *)(a1 + 80);
    v18 = a2 + 10;
    v19 = *((unsigned __int8 *)a2 + 120);
    if (v19 == 255)
    {
      v20 = *((_OWORD *)a2 + 6);
      *v17 = *v18;
      *(_OWORD *)(a1 + 96) = v20;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)a2 + 105);
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 104) = v21;
      (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v17, v18);
      *(_BYTE *)(a1 + 120) = (v19 & 1) != 0;
    }
    v22 = (_OWORD *)(a1 + 128);
    v23 = a2 + 16;
    v24 = *((unsigned __int8 *)a2 + 168);
    if (v24 == 255)
    {
      v25 = *((_OWORD *)a2 + 9);
      *v22 = *v23;
      *(_OWORD *)(a1 + 144) = v25;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)((char *)a2 + 153);
    }
    else
    {
      v26 = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(a1 + 152) = v26;
      (**(void (***)(_OWORD *, _OWORD *))(v26 - 8))(v22, v23);
      *(_BYTE *)(a1 + 168) = (v24 & 1) != 0;
    }
    v27 = (_OWORD *)(a1 + 176);
    v28 = a2 + 22;
    v29 = *((unsigned __int8 *)a2 + 216);
    if (v29 == 255)
    {
      v30 = *((_OWORD *)a2 + 12);
      *v27 = *v28;
      *(_OWORD *)(a1 + 192) = v30;
      *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)a2 + 201);
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 25);
      *(_OWORD *)(a1 + 200) = v31;
      (**(void (***)(_OWORD *, _OWORD *))(v31 - 8))(v27, v28);
      *(_BYTE *)(a1 + 216) = (v29 & 1) != 0;
    }
    v32 = (_OWORD *)(a1 + 224);
    v33 = a2 + 28;
    v34 = *((unsigned __int8 *)a2 + 264);
    if (v34 == 255)
    {
      v35 = *((_OWORD *)a2 + 15);
      *v32 = *v33;
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)((char *)a2 + 249);
    }
    else
    {
      v36 = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 248) = v36;
      (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v32, v33);
      *v7 = (v34 & 1) != 0;
    }
    v37 = (_OWORD *)(a1 + 272);
    v38 = a2 + 34;
    v39 = *((unsigned __int8 *)a2 + 312);
    if (v39 == 255)
    {
      v40 = *((_OWORD *)a2 + 18);
      *v37 = *v38;
      *(_OWORD *)(a1 + 288) = v40;
      *(_OWORD *)(a1 + 297) = *(_OWORD *)((char *)a2 + 297);
    }
    else
    {
      v41 = a2[37];
      v42 = a2[38];
      *(_QWORD *)(a1 + 296) = v41;
      *(_QWORD *)(a1 + 304) = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v41 - 8))(v37, v38);
      *(_BYTE *)(a1 + 312) = (v39 & 1) != 0;
    }
    *(_WORD *)(a1 + 313) = *(_WORD *)((char *)a2 + 313);
    *(_BYTE *)(a1 + 315) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 315) = 0;
    swift_retain();
  }
  *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
  v43 = a2[40];
  if (v43)
  {
    v44 = a2[41];
    *(_QWORD *)(a1 + 320) = v43;
    *(_QWORD *)(a1 + 328) = v44;
    swift_retain();
    v45 = a2[42];
    if (v45)
      goto LABEL_38;
  }
  else
  {
    *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
    v45 = a2[42];
    if (v45)
    {
LABEL_38:
      v46 = a2[43];
      *(_QWORD *)(a1 + 336) = v45;
      *(_QWORD *)(a1 + 344) = v46;
      swift_retain();
      v47 = a2[44];
      if (v47)
        goto LABEL_39;
      goto LABEL_44;
    }
  }
  *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  v47 = a2[44];
  if (v47)
  {
LABEL_39:
    v48 = a2[45];
    *(_QWORD *)(a1 + 352) = v47;
    *(_QWORD *)(a1 + 360) = v48;
    swift_retain();
    v49 = a2[46];
    if (v49)
      goto LABEL_40;
LABEL_45:
    *(_OWORD *)(a1 + 368) = *((_OWORD *)a2 + 23);
    v51 = a2[48];
    if (v51)
      goto LABEL_41;
    goto LABEL_46;
  }
LABEL_44:
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  v49 = a2[46];
  if (!v49)
    goto LABEL_45;
LABEL_40:
  v50 = a2[47];
  *(_QWORD *)(a1 + 368) = v49;
  *(_QWORD *)(a1 + 376) = v50;
  swift_retain();
  v51 = a2[48];
  if (v51)
  {
LABEL_41:
    v52 = a2[49];
    *(_QWORD *)(a1 + 384) = v51;
    *(_QWORD *)(a1 + 392) = v52;
    swift_retain();
    goto LABEL_47;
  }
LABEL_46:
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
LABEL_47:
  v53 = *((unsigned __int8 *)a2 + 504);
  v209 = v6;
  if (v53 == 255)
  {
    v54 = *((_OWORD *)a2 + 30);
    *(_OWORD *)(a1 + 464) = *((_OWORD *)a2 + 29);
    *(_OWORD *)(a1 + 480) = v54;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)((char *)a2 + 489);
    v55 = *((_OWORD *)a2 + 26);
    *(_OWORD *)(a1 + 400) = *((_OWORD *)a2 + 25);
    *(_OWORD *)(a1 + 416) = v55;
    v56 = *((_OWORD *)a2 + 28);
    *(_OWORD *)(a1 + 432) = *((_OWORD *)a2 + 27);
    *(_OWORD *)(a1 + 448) = v56;
  }
  else
  {
    v204 = v53 & 1;
    v57 = a2[50];
    v58 = a2[51];
    v59 = a2[52];
    v60 = a2[53];
    v61 = a2[54];
    v62 = a2[55];
    v64 = a2[56];
    v63 = a2[57];
    v180 = a2[58];
    v184 = a2[59];
    v189 = a2[60];
    v194 = a2[61];
    v199 = a2[62];
    sub_21421BAE4(v57, v58, v59, v60, v61, v62, v64, v63, v180);
    *(_QWORD *)(a1 + 400) = v57;
    *(_QWORD *)(a1 + 408) = v58;
    *(_QWORD *)(a1 + 416) = v59;
    *(_QWORD *)(a1 + 424) = v60;
    *(_QWORD *)(a1 + 432) = v61;
    *(_QWORD *)(a1 + 440) = v62;
    v7 = (BOOL *)(a1 + 264);
    *(_QWORD *)(a1 + 448) = v64;
    *(_QWORD *)(a1 + 456) = v63;
    *(_QWORD *)(a1 + 464) = v180;
    *(_QWORD *)(a1 + 472) = v184;
    *(_QWORD *)(a1 + 480) = v189;
    *(_QWORD *)(a1 + 488) = v194;
    *(_QWORD *)(a1 + 496) = v199;
    *(_BYTE *)(a1 + 504) = v204;
  }
  v65 = *((unsigned __int8 *)a2 + 616);
  if (v65 == 255)
  {
    v66 = *((_OWORD *)a2 + 37);
    *(_OWORD *)(a1 + 576) = *((_OWORD *)a2 + 36);
    *(_OWORD *)(a1 + 592) = v66;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)((char *)a2 + 601);
    v67 = *((_OWORD *)a2 + 33);
    *(_OWORD *)(a1 + 512) = *((_OWORD *)a2 + 32);
    *(_OWORD *)(a1 + 528) = v67;
    v68 = *((_OWORD *)a2 + 35);
    *(_OWORD *)(a1 + 544) = *((_OWORD *)a2 + 34);
    *(_OWORD *)(a1 + 560) = v68;
  }
  else
  {
    v205 = v65 & 1;
    v69 = a2[64];
    v70 = a2[65];
    v71 = a2[66];
    v72 = a2[67];
    v73 = a2[68];
    v74 = a2[69];
    v75 = a2[70];
    v76 = a2[71];
    v181 = a2[72];
    v185 = a2[73];
    v190 = a2[74];
    v195 = a2[75];
    v200 = a2[76];
    sub_21421BAE4(v69, v70, v71, v72, v73, v74, v75, v76, v181);
    *(_QWORD *)(a1 + 512) = v69;
    *(_QWORD *)(a1 + 520) = v70;
    *(_QWORD *)(a1 + 528) = v71;
    *(_QWORD *)(a1 + 536) = v72;
    *(_QWORD *)(a1 + 544) = v73;
    *(_QWORD *)(a1 + 552) = v74;
    *(_QWORD *)(a1 + 560) = v75;
    v7 = (BOOL *)(a1 + 264);
    *(_QWORD *)(a1 + 568) = v76;
    *(_QWORD *)(a1 + 576) = v181;
    *(_QWORD *)(a1 + 584) = v185;
    *(_QWORD *)(a1 + 592) = v190;
    *(_QWORD *)(a1 + 600) = v195;
    *(_QWORD *)(a1 + 608) = v200;
    *(_BYTE *)(a1 + 616) = v205;
  }
  v77 = *((unsigned __int8 *)a2 + 720);
  if (v77 == 255)
  {
    v78 = *((_OWORD *)a2 + 44);
    *(_OWORD *)(a1 + 688) = *((_OWORD *)a2 + 43);
    *(_OWORD *)(a1 + 704) = v78;
    *(_BYTE *)(a1 + 720) = *((_BYTE *)a2 + 720);
    v79 = *((_OWORD *)a2 + 40);
    *(_OWORD *)(a1 + 624) = *((_OWORD *)a2 + 39);
    *(_OWORD *)(a1 + 640) = v79;
    v80 = *((_OWORD *)a2 + 42);
    *(_OWORD *)(a1 + 656) = *((_OWORD *)a2 + 41);
    *(_OWORD *)(a1 + 672) = v80;
  }
  else
  {
    v206 = v77 & 1;
    v81 = a2[78];
    v82 = a2[79];
    v83 = a2[80];
    v84 = a2[81];
    v85 = a2[82];
    v86 = a2[83];
    v87 = a2[84];
    v88 = a2[85];
    v186 = a2[86];
    v191 = a2[87];
    v196 = a2[88];
    v201 = a2[89];
    sub_21421B808(v81, v82, v83, v84, v85, v86, v87, v88);
    *(_QWORD *)(a1 + 624) = v81;
    *(_QWORD *)(a1 + 632) = v82;
    *(_QWORD *)(a1 + 640) = v83;
    *(_QWORD *)(a1 + 648) = v84;
    *(_QWORD *)(a1 + 656) = v85;
    *(_QWORD *)(a1 + 664) = v86;
    *(_QWORD *)(a1 + 672) = v87;
    v7 = (BOOL *)(a1 + 264);
    *(_QWORD *)(a1 + 680) = v88;
    *(_QWORD *)(a1 + 688) = v186;
    *(_QWORD *)(a1 + 696) = v191;
    *(_QWORD *)(a1 + 704) = v196;
    *(_QWORD *)(a1 + 712) = v201;
    *(_BYTE *)(a1 + 720) = v206;
  }
  v89 = *((unsigned __int8 *)a2 + 856);
  if (v89 != 255)
  {
    v94 = a2[92];
    *(_QWORD *)(a1 + 728) = a2[91];
    *(_QWORD *)(a1 + 736) = v94;
    v95 = (_OWORD *)(a1 + 744);
    v96 = a2 + 93;
    v97 = a2[96];
    swift_retain();
    if ((v89 & 1) == 0)
    {
      if (v97)
      {
        *(_QWORD *)(a1 + 768) = v97;
        *(_QWORD *)(a1 + 776) = a2[97];
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v97 - 8))(a1 + 744, (uint64_t)(a2 + 93), v97);
        v98 = a2[98];
        if (v98)
        {
LABEL_61:
          v99 = a2[99];
          *(_QWORD *)(a1 + 784) = v98;
          *(_QWORD *)(a1 + 792) = v99;
          swift_retain();
LABEL_67:
          *(_QWORD *)(a1 + 800) = a2[100];
          v103 = a2 + 101;
          v104 = *((unsigned __int8 *)a2 + 816);
          swift_bridgeObjectRetain();
          if (v104 == 255)
          {
            *(_QWORD *)(a1 + 808) = *v103;
            *(_BYTE *)(a1 + 816) = *((_BYTE *)a2 + 816);
          }
          else
          {
            v105 = v104 & 1;
            v106 = *v103;
            sub_2141E83F4(v106, v105);
            *(_QWORD *)(a1 + 808) = v106;
            v7[552] = v105;
          }
          v107 = *(_OWORD *)(a2 + 105);
          *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 103);
          *(_OWORD *)(a1 + 840) = v107;
          v7[592] = 0;
          goto LABEL_77;
        }
      }
      else
      {
        v102 = *(_OWORD *)(a2 + 95);
        *v95 = *v96;
        *(_OWORD *)(a1 + 760) = v102;
        *(_QWORD *)(a1 + 776) = a2[97];
        v98 = a2[98];
        if (v98)
          goto LABEL_61;
      }
      *(_OWORD *)(a1 + 784) = *((_OWORD *)a2 + 49);
      goto LABEL_67;
    }
    if (v97)
    {
      *(_QWORD *)(a1 + 768) = v97;
      *(_QWORD *)(a1 + 776) = a2[97];
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v97 - 8))(a1 + 744, (uint64_t)(a2 + 93), v97);
      v100 = a2[98];
      if (v100)
      {
LABEL_64:
        v101 = a2[99];
        *(_QWORD *)(a1 + 784) = v100;
        *(_QWORD *)(a1 + 792) = v101;
        swift_retain();
LABEL_73:
        *(_QWORD *)(a1 + 800) = a2[100];
        v109 = a2 + 101;
        v110 = *((unsigned __int8 *)a2 + 816);
        swift_bridgeObjectRetain();
        if (v110 == 255)
        {
          *(_QWORD *)(a1 + 808) = *v109;
          *(_BYTE *)(a1 + 816) = *((_BYTE *)a2 + 816);
        }
        else
        {
          v111 = v110 & 1;
          v112 = *v109;
          sub_2141E83F4(v112, v111);
          *(_QWORD *)(a1 + 808) = v112;
          v7[552] = v111;
        }
        v113 = *(_OWORD *)(a2 + 105);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 103);
        *(_OWORD *)(a1 + 840) = v113;
        v7[592] = 1;
        goto LABEL_77;
      }
    }
    else
    {
      v108 = *(_OWORD *)(a2 + 95);
      *v95 = *v96;
      *(_OWORD *)(a1 + 760) = v108;
      *(_QWORD *)(a1 + 776) = a2[97];
      v100 = a2[98];
      if (v100)
        goto LABEL_64;
    }
    *(_OWORD *)(a1 + 784) = *((_OWORD *)a2 + 49);
    goto LABEL_73;
  }
  v90 = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 103);
  *(_OWORD *)(a1 + 840) = v90;
  *(_BYTE *)(a1 + 856) = *((_BYTE *)a2 + 856);
  v91 = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 95);
  *(_OWORD *)(a1 + 776) = v91;
  v92 = *(_OWORD *)(a2 + 101);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 99);
  *(_OWORD *)(a1 + 808) = v92;
  v93 = *(_OWORD *)(a2 + 93);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 91);
  *(_OWORD *)(a1 + 744) = v93;
LABEL_77:
  v114 = *((unsigned __int8 *)a2 + 968);
  if (v114 == 255)
  {
    v115 = *((_OWORD *)a2 + 59);
    *(_OWORD *)(a1 + 928) = *((_OWORD *)a2 + 58);
    *(_OWORD *)(a1 + 944) = v115;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)((char *)a2 + 953);
    v116 = *((_OWORD *)a2 + 55);
    *(_OWORD *)(a1 + 864) = *((_OWORD *)a2 + 54);
    *(_OWORD *)(a1 + 880) = v116;
    v117 = *((_OWORD *)a2 + 57);
    *(_OWORD *)(a1 + 896) = *((_OWORD *)a2 + 56);
    *(_OWORD *)(a1 + 912) = v117;
  }
  else
  {
    v207 = v114 & 1;
    v118 = a2[108];
    v119 = a2[109];
    v120 = a2[110];
    v121 = a2[111];
    v122 = a2[112];
    v123 = a2[113];
    v124 = a2[114];
    v125 = a2[115];
    v182 = a2[116];
    v187 = a2[117];
    v192 = a2[118];
    v197 = a2[119];
    v202 = a2[120];
    sub_21421BAE4(v118, v119, v120, v121, v122, v123, v124, v125, v182);
    *(_QWORD *)(a1 + 864) = v118;
    *(_QWORD *)(a1 + 872) = v119;
    *(_QWORD *)(a1 + 880) = v120;
    *(_QWORD *)(a1 + 888) = v121;
    *(_QWORD *)(a1 + 896) = v122;
    *(_QWORD *)(a1 + 904) = v123;
    *(_QWORD *)(a1 + 912) = v124;
    *(_QWORD *)(a1 + 920) = v125;
    *(_QWORD *)(a1 + 928) = v182;
    *(_QWORD *)(a1 + 936) = v187;
    *(_QWORD *)(a1 + 944) = v192;
    *(_QWORD *)(a1 + 952) = v197;
    *(_QWORD *)(a1 + 960) = v202;
    *(_BYTE *)(a1 + 968) = v207;
  }
  v126 = *((unsigned __int8 *)a2 + 1104);
  if (v126 == 255)
  {
    v127 = *((_OWORD *)a2 + 68);
    *(_OWORD *)(a1 + 1072) = *((_OWORD *)a2 + 67);
    *(_OWORD *)(a1 + 1088) = v127;
    *(_BYTE *)(a1 + 1104) = *((_BYTE *)a2 + 1104);
    v128 = *((_OWORD *)a2 + 64);
    *(_OWORD *)(a1 + 1008) = *((_OWORD *)a2 + 63);
    *(_OWORD *)(a1 + 1024) = v128;
    v129 = *((_OWORD *)a2 + 66);
    *(_OWORD *)(a1 + 1040) = *((_OWORD *)a2 + 65);
    *(_OWORD *)(a1 + 1056) = v129;
    v130 = *((_OWORD *)a2 + 62);
    *(_OWORD *)(a1 + 976) = *((_OWORD *)a2 + 61);
    *(_OWORD *)(a1 + 992) = v130;
  }
  else
  {
    v208 = v126 & 1;
    v131 = a2[122];
    v132 = a2[123];
    v133 = a2[124];
    v134 = a2[125];
    v135 = a2[126];
    v136 = a2[127];
    v137 = a2[128];
    v138 = a2[129];
    v177 = a2[130];
    v178 = a2[131];
    v179 = a2[132];
    v183 = a2[133];
    v188 = a2[134];
    v193 = a2[135];
    v198 = a2[136];
    v203 = a2[137];
    sub_21421B980(v131, v132, v133, v134, v135, v136, v137, v138, v177, v178, v179, v183);
    *(_QWORD *)(a1 + 976) = v131;
    *(_QWORD *)(a1 + 984) = v132;
    *(_QWORD *)(a1 + 992) = v133;
    *(_QWORD *)(a1 + 1000) = v134;
    *(_QWORD *)(a1 + 1008) = v135;
    *(_QWORD *)(a1 + 1016) = v136;
    *(_QWORD *)(a1 + 1024) = v137;
    *(_QWORD *)(a1 + 1032) = v138;
    *(_QWORD *)(a1 + 1040) = v177;
    *(_QWORD *)(a1 + 1048) = v178;
    *(_QWORD *)(a1 + 1056) = v179;
    *(_QWORD *)(a1 + 1064) = v183;
    *(_QWORD *)(a1 + 1072) = v188;
    *(_QWORD *)(a1 + 1080) = v193;
    *(_QWORD *)(a1 + 1088) = v198;
    *(_QWORD *)(a1 + 1096) = v203;
    *(_BYTE *)(a1 + 1104) = v208;
  }
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 139);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 141);
  *(_BYTE *)(a1 + 1144) = *((_BYTE *)a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *((_OWORD *)a2 + 72);
  *(_OWORD *)(a1 + 1168) = *((_OWORD *)a2 + 73);
  v139 = v209[14];
  v140 = a1 + v139;
  v141 = (uint64_t)a2 + v139;
  v142 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v140, v141, v142);
  *(_QWORD *)(a1 + v209[15]) = *(uint64_t *)((char *)a2 + v209[15]);
  *(_QWORD *)(a1 + v209[16]) = *(uint64_t *)((char *)a2 + v209[16]);
  v143 = v209[17];
  v144 = a1 + v143;
  v145 = (uint64_t)a2 + v143;
  v146 = *(unsigned __int8 *)(v145 + 40);
  swift_retain();
  swift_retain();
  if (v146 == 255)
  {
    v147 = *(_OWORD *)(v145 + 16);
    *(_OWORD *)v144 = *(_OWORD *)v145;
    *(_OWORD *)(v144 + 16) = v147;
    *(_OWORD *)(v144 + 25) = *(_OWORD *)(v145 + 25);
  }
  else
  {
    v148 = *(_OWORD *)(v145 + 24);
    *(_OWORD *)(v144 + 24) = v148;
    (**(void (***)(uint64_t, uint64_t))(v148 - 8))(v144, v145);
    *(_BYTE *)(v144 + 40) = (v146 & 1) != 0;
  }
  v149 = (_OWORD *)(v144 + 48);
  v150 = (_OWORD *)(v145 + 48);
  v151 = *(unsigned __int8 *)(v145 + 88);
  if (v151 == 255)
  {
    v152 = *(_OWORD *)(v145 + 64);
    *v149 = *v150;
    *(_OWORD *)(v144 + 64) = v152;
    *(_OWORD *)(v144 + 73) = *(_OWORD *)(v145 + 73);
  }
  else
  {
    v153 = *(_OWORD *)(v145 + 72);
    *(_OWORD *)(v144 + 72) = v153;
    (**(void (***)(_OWORD *, _OWORD *))(v153 - 8))(v149, v150);
    *(_BYTE *)(v144 + 88) = (v151 & 1) != 0;
  }
  v154 = (_OWORD *)(v144 + 96);
  v155 = (_OWORD *)(v145 + 96);
  v156 = *(unsigned __int8 *)(v145 + 136);
  if (v156 == 255)
  {
    v157 = *(_OWORD *)(v145 + 112);
    *v154 = *v155;
    *(_OWORD *)(v144 + 112) = v157;
    *(_OWORD *)(v144 + 121) = *(_OWORD *)(v145 + 121);
  }
  else
  {
    v158 = *(_OWORD *)(v145 + 120);
    *(_OWORD *)(v144 + 120) = v158;
    (**(void (***)(_OWORD *, _OWORD *))(v158 - 8))(v154, v155);
    *(_BYTE *)(v144 + 136) = (v156 & 1) != 0;
  }
  v159 = (_OWORD *)(v144 + 144);
  v160 = (_OWORD *)(v145 + 144);
  v161 = *(unsigned __int8 *)(v145 + 184);
  if (v161 == 255)
  {
    v162 = *(_OWORD *)(v145 + 160);
    *v159 = *v160;
    *(_OWORD *)(v144 + 160) = v162;
    *(_OWORD *)(v144 + 169) = *(_OWORD *)(v145 + 169);
  }
  else
  {
    v163 = *(_OWORD *)(v145 + 168);
    *(_OWORD *)(v144 + 168) = v163;
    (**(void (***)(_OWORD *, _OWORD *))(v163 - 8))(v159, v160);
    *(_BYTE *)(v144 + 184) = (v161 & 1) != 0;
  }
  v164 = (_OWORD *)(v144 + 192);
  v165 = (_OWORD *)(v145 + 192);
  v166 = *(unsigned __int8 *)(v145 + 232);
  if (v166 == 255)
  {
    v167 = *(_OWORD *)(v145 + 208);
    *v164 = *v165;
    *(_OWORD *)(v144 + 208) = v167;
    *(_OWORD *)(v144 + 217) = *(_OWORD *)(v145 + 217);
  }
  else
  {
    v168 = *(_OWORD *)(v145 + 216);
    *(_OWORD *)(v144 + 216) = v168;
    (**(void (***)(_OWORD *, _OWORD *))(v168 - 8))(v164, v165);
    *(_BYTE *)(v144 + 232) = (v166 & 1) != 0;
  }
  v169 = (_OWORD *)(v144 + 240);
  v170 = (_OWORD *)(v145 + 240);
  v171 = *(unsigned __int8 *)(v145 + 280);
  if (v171 == 255)
  {
    v172 = *(_OWORD *)(v145 + 256);
    *v169 = *v170;
    *(_OWORD *)(v144 + 256) = v172;
    *(_OWORD *)(v144 + 265) = *(_OWORD *)(v145 + 265);
  }
  else
  {
    v173 = *(_QWORD *)(v145 + 264);
    v174 = *(_QWORD *)(v145 + 272);
    *(_QWORD *)(v144 + 264) = v173;
    *(_QWORD *)(v144 + 272) = v174;
    (**(void (***)(_OWORD *, _OWORD *))(v173 - 8))(v169, v170);
    v175 = (BOOL *)(v144 + 280);
    *v175 = (v171 & 1) != 0;
  }
  *(_WORD *)(v144 + 281) = *(_WORD *)(v145 + 281);
  return a1;
}

uint64_t destroy for ChartProxy(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  swift_release();
  swift_release();
  swift_release();
  if ((*(_BYTE *)(a1 + 315) & 1) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 72) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 32);
    if (*(unsigned __int8 *)(a1 + 120) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 80);
    if (*(unsigned __int8 *)(a1 + 168) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 128);
    if (*(unsigned __int8 *)(a1 + 216) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 176);
    if (*(unsigned __int8 *)(a1 + 264) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 224);
    if (*(unsigned __int8 *)(a1 + 312) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 272);
  }
  else
  {
    swift_release();
  }
  if (*(_QWORD *)(a1 + 320))
    swift_release();
  if (*(_QWORD *)(a1 + 336))
    swift_release();
  if (*(_QWORD *)(a1 + 352))
    swift_release();
  if (*(_QWORD *)(a1 + 368))
    swift_release();
  if (*(_QWORD *)(a1 + 384))
    swift_release();
  if (*(unsigned __int8 *)(a1 + 504) != 255)
    sub_21421BB6C(*(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), *(_QWORD *)(a1 + 416), *(_QWORD *)(a1 + 424), *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), *(_OWORD *)(a1 + 464));
  if (*(unsigned __int8 *)(a1 + 616) != 255)
    sub_21421BB6C(*(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), *(_QWORD *)(a1 + 528), *(_QWORD *)(a1 + 536), *(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), *(_OWORD *)(a1 + 576));
  if (*(unsigned __int8 *)(a1 + 720) != 255)
    sub_21421B8A0(*(_QWORD *)(a1 + 624), *(_QWORD *)(a1 + 632), *(_QWORD *)(a1 + 640), *(_QWORD *)(a1 + 648), *(_QWORD *)(a1 + 656), *(_QWORD *)(a1 + 664), *(_QWORD *)(a1 + 672), *(_QWORD *)(a1 + 680));
  if (*(unsigned __int8 *)(a1 + 856) != 255)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 768))
      _s6Charts15AnyChartContentVwxx_0(a1 + 744);
    if (*(_QWORD *)(a1 + 784))
      swift_release();
    swift_bridgeObjectRelease();
    v2 = *(unsigned __int8 *)(a1 + 816);
    if (v2 != 255)
      sub_2141E833C(*(_QWORD *)(a1 + 808), v2 & 1);
  }
  if (*(unsigned __int8 *)(a1 + 968) != 255)
    sub_21421BB6C(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), *(_OWORD *)(a1 + 928));
  if (*(unsigned __int8 *)(a1 + 1104) != 255)
    sub_21421BA80(*(_QWORD *)(a1 + 976), *(_QWORD *)(a1 + 984), *(_QWORD *)(a1 + 992), *(_QWORD *)(a1 + 1000), *(_QWORD *)(a1 + 1008), *(_QWORD *)(a1 + 1016), *(_QWORD *)(a1 + 1024), *(_QWORD *)(a1 + 1032), *(_QWORD *)(a1 + 1040), *(_QWORD *)(a1 + 1048), *(_QWORD *)(a1 + 1056), *(_QWORD *)(a1 + 1064));
  v3 = type metadata accessor for ChartModel.Scenegraph();
  v4 = a1 + *(int *)(v3 + 56);
  v5 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  result = swift_release();
  v7 = (unsigned __int8 *)(a1 + *(int *)(v3 + 68));
  if (v7[40] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  if (v7[88] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 48));
  if (v7[136] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 96));
  if (v7[184] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 144));
  if (v7[232] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 192));
  if (v7[280] != 255)
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 240));
  return result;
}

uint64_t initializeWithCopy for ChartProxy(uint64_t a1, uint64_t a2)
{
  BOOL *v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  char v9;
  _OWORD *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  int v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  _OWORD *v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t *v100;
  int v101;
  char v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t *v106;
  int v107;
  char v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  __int128 v145;
  __int128 v146;
  _OWORD *v147;
  _OWORD *v148;
  int v149;
  __int128 v150;
  __int128 v151;
  _OWORD *v152;
  _OWORD *v153;
  int v154;
  __int128 v155;
  __int128 v156;
  _OWORD *v157;
  _OWORD *v158;
  int v159;
  __int128 v160;
  __int128 v161;
  _OWORD *v162;
  _OWORD *v163;
  int v164;
  __int128 v165;
  __int128 v166;
  _OWORD *v167;
  _OWORD *v168;
  int v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  BOOL *v173;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  BOOL *v207;

  v4 = (BOOL *)(a1 + 264);
  v5 = (_WORD *)(a2 + 313);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v9 & 1) != 0)
  {
    v10 = (_OWORD *)(a1 + 32);
    v11 = *(unsigned __int8 *)(a2 + 72);
    if (v11 == 255)
    {
      v12 = v8[1];
      *v10 = *v8;
      *(_OWORD *)(a1 + 48) = v12;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)v8 + 25);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 56) = v13;
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v10, v8);
      *(_BYTE *)(a1 + 72) = (v11 & 1) != 0;
    }
    v14 = (_OWORD *)(a1 + 80);
    v15 = (_OWORD *)(a2 + 80);
    v16 = *(unsigned __int8 *)(a2 + 120);
    if (v16 == 255)
    {
      v17 = *(_OWORD *)(a2 + 96);
      *v14 = *v15;
      *(_OWORD *)(a1 + 96) = v17;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
    }
    else
    {
      v18 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 104) = v18;
      (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v14, v15);
      *(_BYTE *)(a1 + 120) = (v16 & 1) != 0;
    }
    v19 = (_OWORD *)(a1 + 128);
    v20 = (_OWORD *)(a2 + 128);
    v21 = *(unsigned __int8 *)(a2 + 168);
    if (v21 == 255)
    {
      v22 = *(_OWORD *)(a2 + 144);
      *v19 = *v20;
      *(_OWORD *)(a1 + 144) = v22;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 152) = v23;
      (**(void (***)(_OWORD *, _OWORD *))(v23 - 8))(v19, v20);
      *(_BYTE *)(a1 + 168) = (v21 & 1) != 0;
    }
    v24 = (_OWORD *)(a1 + 176);
    v25 = (_OWORD *)(a2 + 176);
    v26 = *(unsigned __int8 *)(a2 + 216);
    if (v26 == 255)
    {
      v27 = *(_OWORD *)(a2 + 192);
      *v24 = *v25;
      *(_OWORD *)(a1 + 192) = v27;
      *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 200) = v28;
      (**(void (***)(_OWORD *, _OWORD *))(v28 - 8))(v24, v25);
      *(_BYTE *)(a1 + 216) = (v26 & 1) != 0;
    }
    v29 = (_OWORD *)(a1 + 224);
    v30 = (_OWORD *)(a2 + 224);
    v31 = *(unsigned __int8 *)(a2 + 264);
    if (v31 == 255)
    {
      v32 = *(_OWORD *)(a2 + 240);
      *v29 = *v30;
      *(_OWORD *)(a1 + 240) = v32;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
    }
    else
    {
      v33 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 248) = v33;
      (**(void (***)(_OWORD *, _OWORD *))(v33 - 8))(v29, v30);
      *v4 = (v31 & 1) != 0;
    }
    v34 = (_OWORD *)(a1 + 272);
    v35 = (_OWORD *)(a2 + 272);
    v36 = *(unsigned __int8 *)(a2 + 312);
    if (v36 == 255)
    {
      v37 = *(_OWORD *)(a2 + 288);
      *v34 = *v35;
      *(_OWORD *)(a1 + 288) = v37;
      *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
    }
    else
    {
      v38 = *(_QWORD *)(a2 + 296);
      v39 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v38;
      *(_QWORD *)(a1 + 304) = v39;
      (**(void (***)(_OWORD *, _OWORD *))(v38 - 8))(v34, v35);
      v4[48] = (v36 & 1) != 0;
    }
    *(_WORD *)(v4 + 49) = *v5;
    v4[51] = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
    v4[51] = 0;
    swift_retain();
  }
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  v40 = *(_QWORD *)(a2 + 320);
  if (v40)
  {
    v41 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v40;
    *(_QWORD *)(a1 + 328) = v41;
    swift_retain();
    v42 = *(_QWORD *)(a2 + 336);
    if (v42)
      goto LABEL_36;
  }
  else
  {
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    v42 = *(_QWORD *)(a2 + 336);
    if (v42)
    {
LABEL_36:
      v43 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 336) = v42;
      *(_QWORD *)(a1 + 344) = v43;
      swift_retain();
      v44 = *(_QWORD *)(a2 + 352);
      if (v44)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  v44 = *(_QWORD *)(a2 + 352);
  if (v44)
  {
LABEL_37:
    v45 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = v44;
    *(_QWORD *)(a1 + 360) = v45;
    swift_retain();
    v46 = *(_QWORD *)(a2 + 368);
    if (v46)
      goto LABEL_38;
LABEL_43:
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    v48 = *(_QWORD *)(a2 + 384);
    if (v48)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_42:
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  v46 = *(_QWORD *)(a2 + 368);
  if (!v46)
    goto LABEL_43;
LABEL_38:
  v47 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v46;
  *(_QWORD *)(a1 + 376) = v47;
  swift_retain();
  v48 = *(_QWORD *)(a2 + 384);
  if (v48)
  {
LABEL_39:
    v49 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = v48;
    *(_QWORD *)(a1 + 392) = v49;
    swift_retain();
    goto LABEL_45;
  }
LABEL_44:
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_45:
  v50 = *(unsigned __int8 *)(a2 + 504);
  v207 = v4;
  if (v50 == 255)
  {
    v51 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v51;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    v52 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v52;
    v53 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v53;
  }
  else
  {
    v202 = v50 & 1;
    v54 = *(_QWORD *)(a2 + 400);
    v55 = *(_QWORD *)(a2 + 408);
    v56 = *(_QWORD *)(a2 + 416);
    v57 = *(_QWORD *)(a2 + 424);
    v58 = *(_QWORD *)(a2 + 432);
    v59 = *(_QWORD *)(a2 + 440);
    v60 = *(_QWORD *)(a2 + 448);
    v61 = *(_QWORD *)(a2 + 456);
    v178 = *(_QWORD *)(a2 + 464);
    v182 = *(_QWORD *)(a2 + 472);
    v187 = *(_QWORD *)(a2 + 480);
    v192 = *(_QWORD *)(a2 + 488);
    v197 = *(_QWORD *)(a2 + 496);
    sub_21421BAE4(v54, v55, v56, v57, v58, v59, v60, v61, v178);
    *(_QWORD *)(a1 + 400) = v54;
    *(_QWORD *)(a1 + 408) = v55;
    *(_QWORD *)(a1 + 416) = v56;
    *(_QWORD *)(a1 + 424) = v57;
    *(_QWORD *)(a1 + 432) = v58;
    *(_QWORD *)(a1 + 440) = v59;
    v4 = v207;
    *(_QWORD *)(a1 + 448) = v60;
    *(_QWORD *)(a1 + 456) = v61;
    *(_QWORD *)(a1 + 464) = v178;
    *(_QWORD *)(a1 + 472) = v182;
    *(_QWORD *)(a1 + 480) = v187;
    *(_QWORD *)(a1 + 488) = v192;
    *(_QWORD *)(a1 + 496) = v197;
    v207[240] = v202;
  }
  v62 = *(unsigned __int8 *)(a2 + 616);
  if (v62 == 255)
  {
    v63 = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 592) = v63;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    v64 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v64;
    v65 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v65;
  }
  else
  {
    v203 = v62 & 1;
    v66 = *(_QWORD *)(a2 + 512);
    v67 = *(_QWORD *)(a2 + 520);
    v68 = *(_QWORD *)(a2 + 528);
    v69 = *(_QWORD *)(a2 + 536);
    v70 = *(_QWORD *)(a2 + 544);
    v71 = *(_QWORD *)(a2 + 552);
    v72 = *(_QWORD *)(a2 + 560);
    v73 = *(_QWORD *)(a2 + 568);
    v179 = *(_QWORD *)(a2 + 576);
    v183 = *(_QWORD *)(a2 + 584);
    v188 = *(_QWORD *)(a2 + 592);
    v193 = *(_QWORD *)(a2 + 600);
    v198 = *(_QWORD *)(a2 + 608);
    sub_21421BAE4(v66, v67, v68, v69, v70, v71, v72, v73, v179);
    *(_QWORD *)(a1 + 512) = v66;
    *(_QWORD *)(a1 + 520) = v67;
    *(_QWORD *)(a1 + 528) = v68;
    *(_QWORD *)(a1 + 536) = v69;
    *(_QWORD *)(a1 + 544) = v70;
    *(_QWORD *)(a1 + 552) = v71;
    v4 = v207;
    *(_QWORD *)(a1 + 560) = v72;
    *(_QWORD *)(a1 + 568) = v73;
    *(_QWORD *)(a1 + 576) = v179;
    *(_QWORD *)(a1 + 584) = v183;
    *(_QWORD *)(a1 + 592) = v188;
    *(_QWORD *)(a1 + 600) = v193;
    *(_QWORD *)(a1 + 608) = v198;
    v207[352] = v203;
  }
  v74 = *(unsigned __int8 *)(a2 + 720);
  if (v74 == 255)
  {
    v75 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v75;
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    v76 = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 640) = v76;
    v77 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v77;
  }
  else
  {
    v204 = v74 & 1;
    v78 = *(_QWORD *)(a2 + 624);
    v79 = *(_QWORD *)(a2 + 632);
    v80 = *(_QWORD *)(a2 + 640);
    v81 = *(_QWORD *)(a2 + 648);
    v82 = *(_QWORD *)(a2 + 656);
    v83 = *(_QWORD *)(a2 + 664);
    v84 = *(_QWORD *)(a2 + 672);
    v85 = *(_QWORD *)(a2 + 680);
    v184 = *(_QWORD *)(a2 + 688);
    v189 = *(_QWORD *)(a2 + 696);
    v194 = *(_QWORD *)(a2 + 704);
    v199 = *(_QWORD *)(a2 + 712);
    sub_21421B808(v78, v79, v80, v81, v82, v83, v84, v85);
    *(_QWORD *)(a1 + 624) = v78;
    *(_QWORD *)(a1 + 632) = v79;
    *(_QWORD *)(a1 + 640) = v80;
    *(_QWORD *)(a1 + 648) = v81;
    *(_QWORD *)(a1 + 656) = v82;
    *(_QWORD *)(a1 + 664) = v83;
    v4 = v207;
    *(_QWORD *)(a1 + 672) = v84;
    *(_QWORD *)(a1 + 680) = v85;
    *(_QWORD *)(a1 + 688) = v184;
    *(_QWORD *)(a1 + 696) = v189;
    *(_QWORD *)(a1 + 704) = v194;
    *(_QWORD *)(a1 + 712) = v199;
    v207[456] = v204;
  }
  v86 = *(unsigned __int8 *)(a2 + 856);
  if (v86 == 255)
  {
    v87 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v87;
    *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
    v88 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = v88;
    v89 = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 808) = v89;
    v90 = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 744) = v90;
    goto LABEL_75;
  }
  v91 = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = v91;
  v92 = (_OWORD *)(a1 + 744);
  v93 = (_OWORD *)(a2 + 744);
  v94 = *(_QWORD *)(a2 + 768);
  swift_retain();
  if ((v86 & 1) == 0)
  {
    if (v94)
    {
      *(_QWORD *)(a1 + 768) = v94;
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v94 - 8))(a1 + 744, a2 + 744, v94);
      v95 = *(_QWORD *)(a2 + 784);
      if (v95)
      {
LABEL_59:
        v96 = *(_QWORD *)(a2 + 792);
        *(_QWORD *)(a1 + 784) = v95;
        *(_QWORD *)(a1 + 792) = v96;
        swift_retain();
LABEL_65:
        *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
        v100 = (uint64_t *)(a2 + 808);
        v101 = *(unsigned __int8 *)(a2 + 816);
        swift_bridgeObjectRetain();
        if (v101 == 255)
        {
          *(_QWORD *)(a1 + 808) = *v100;
          *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
        }
        else
        {
          v102 = v101 & 1;
          v103 = *v100;
          sub_2141E83F4(v103, v102);
          *(_QWORD *)(a1 + 808) = v103;
          v4[552] = v102;
        }
        v104 = *(_OWORD *)(a2 + 840);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
        *(_OWORD *)(a1 + 840) = v104;
        v4[592] = 0;
        goto LABEL_75;
      }
    }
    else
    {
      v99 = *(_OWORD *)(a2 + 760);
      *v92 = *v93;
      *(_OWORD *)(a1 + 760) = v99;
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      v95 = *(_QWORD *)(a2 + 784);
      if (v95)
        goto LABEL_59;
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_65;
  }
  if (!v94)
  {
    v105 = *(_OWORD *)(a2 + 760);
    *v92 = *v93;
    *(_OWORD *)(a1 + 760) = v105;
    *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
    v97 = *(_QWORD *)(a2 + 784);
    if (v97)
      goto LABEL_62;
LABEL_70:
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_71;
  }
  *(_QWORD *)(a1 + 768) = v94;
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v94 - 8))(a1 + 744, a2 + 744, v94);
  v97 = *(_QWORD *)(a2 + 784);
  if (!v97)
    goto LABEL_70;
LABEL_62:
  v98 = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 784) = v97;
  *(_QWORD *)(a1 + 792) = v98;
  swift_retain();
LABEL_71:
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  v106 = (uint64_t *)(a2 + 808);
  v107 = *(unsigned __int8 *)(a2 + 816);
  swift_bridgeObjectRetain();
  if (v107 == 255)
  {
    *(_QWORD *)(a1 + 808) = *v106;
    *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  }
  else
  {
    v108 = v107 & 1;
    v109 = *v106;
    sub_2141E83F4(v109, v108);
    *(_QWORD *)(a1 + 808) = v109;
    v4[552] = v108;
  }
  v110 = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
  *(_OWORD *)(a1 + 840) = v110;
  v4[592] = 1;
LABEL_75:
  v111 = *(unsigned __int8 *)(a2 + 968);
  if (v111 == 255)
  {
    v112 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
    *(_OWORD *)(a1 + 944) = v112;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    v113 = *(_OWORD *)(a2 + 880);
    *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
    *(_OWORD *)(a1 + 880) = v113;
    v114 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
    *(_OWORD *)(a1 + 912) = v114;
  }
  else
  {
    v205 = v111 & 1;
    v115 = *(_QWORD *)(a2 + 864);
    v116 = *(_QWORD *)(a2 + 872);
    v117 = *(_QWORD *)(a2 + 880);
    v118 = *(_QWORD *)(a2 + 888);
    v119 = *(_QWORD *)(a2 + 896);
    v120 = *(_QWORD *)(a2 + 904);
    v121 = *(_QWORD *)(a2 + 912);
    v122 = *(_QWORD *)(a2 + 920);
    v180 = *(_QWORD *)(a2 + 928);
    v185 = *(_QWORD *)(a2 + 936);
    v190 = *(_QWORD *)(a2 + 944);
    v195 = *(_QWORD *)(a2 + 952);
    v200 = *(_QWORD *)(a2 + 960);
    sub_21421BAE4(v115, v116, v117, v118, v119, v120, v121, v122, v180);
    *(_QWORD *)(a1 + 864) = v115;
    *(_QWORD *)(a1 + 872) = v116;
    *(_QWORD *)(a1 + 880) = v117;
    *(_QWORD *)(a1 + 888) = v118;
    *(_QWORD *)(a1 + 896) = v119;
    *(_QWORD *)(a1 + 904) = v120;
    *(_QWORD *)(a1 + 912) = v121;
    *(_QWORD *)(a1 + 920) = v122;
    *(_QWORD *)(a1 + 928) = v180;
    *(_QWORD *)(a1 + 936) = v185;
    *(_QWORD *)(a1 + 944) = v190;
    *(_QWORD *)(a1 + 952) = v195;
    *(_QWORD *)(a1 + 960) = v200;
    v207[704] = v205;
  }
  v123 = *(unsigned __int8 *)(a2 + 1104);
  if (v123 == 255)
  {
    v124 = *(_OWORD *)(a2 + 1088);
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)(a1 + 1088) = v124;
    *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
    v125 = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = v125;
    v126 = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = v126;
    v127 = *(_OWORD *)(a2 + 992);
    *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 992) = v127;
  }
  else
  {
    v206 = v123 & 1;
    v128 = *(_QWORD *)(a2 + 976);
    v129 = *(_QWORD *)(a2 + 984);
    v130 = *(_QWORD *)(a2 + 992);
    v131 = *(_QWORD *)(a2 + 1000);
    v132 = *(_QWORD *)(a2 + 1008);
    v133 = *(_QWORD *)(a2 + 1016);
    v134 = *(_QWORD *)(a2 + 1024);
    v135 = *(_QWORD *)(a2 + 1032);
    v175 = *(_QWORD *)(a2 + 1040);
    v176 = *(_QWORD *)(a2 + 1048);
    v177 = *(_QWORD *)(a2 + 1056);
    v181 = *(_QWORD *)(a2 + 1064);
    v186 = *(_QWORD *)(a2 + 1072);
    v191 = *(_QWORD *)(a2 + 1080);
    v196 = *(_QWORD *)(a2 + 1088);
    v201 = *(_QWORD *)(a2 + 1096);
    sub_21421B980(v128, v129, v130, v131, v132, v133, v134, v135, v175, v176, v177, v181);
    *(_QWORD *)(a1 + 976) = v128;
    *(_QWORD *)(a1 + 984) = v129;
    *(_QWORD *)(a1 + 992) = v130;
    *(_QWORD *)(a1 + 1000) = v131;
    *(_QWORD *)(a1 + 1008) = v132;
    *(_QWORD *)(a1 + 1016) = v133;
    *(_QWORD *)(a1 + 1024) = v134;
    *(_QWORD *)(a1 + 1032) = v135;
    *(_QWORD *)(a1 + 1040) = v175;
    *(_QWORD *)(a1 + 1048) = v176;
    *(_QWORD *)(a1 + 1056) = v177;
    *(_QWORD *)(a1 + 1064) = v181;
    *(_QWORD *)(a1 + 1072) = v186;
    *(_QWORD *)(a1 + 1080) = v191;
    *(_QWORD *)(a1 + 1088) = v196;
    *(_QWORD *)(a1 + 1096) = v201;
    v207[840] = v206;
  }
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  v136 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v137 = v136[14];
  v138 = a1 + v137;
  v139 = a2 + v137;
  v140 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
  *(_QWORD *)(a1 + v136[15]) = *(_QWORD *)(a2 + v136[15]);
  *(_QWORD *)(a1 + v136[16]) = *(_QWORD *)(a2 + v136[16]);
  v141 = v136[17];
  v142 = a1 + v141;
  v143 = a2 + v141;
  v144 = *(unsigned __int8 *)(v143 + 40);
  swift_retain();
  swift_retain();
  if (v144 == 255)
  {
    v145 = *(_OWORD *)(v143 + 16);
    *(_OWORD *)v142 = *(_OWORD *)v143;
    *(_OWORD *)(v142 + 16) = v145;
    *(_OWORD *)(v142 + 25) = *(_OWORD *)(v143 + 25);
  }
  else
  {
    v146 = *(_OWORD *)(v143 + 24);
    *(_OWORD *)(v142 + 24) = v146;
    (**(void (***)(uint64_t, uint64_t))(v146 - 8))(v142, v143);
    *(_BYTE *)(v142 + 40) = (v144 & 1) != 0;
  }
  v147 = (_OWORD *)(v142 + 48);
  v148 = (_OWORD *)(v143 + 48);
  v149 = *(unsigned __int8 *)(v143 + 88);
  if (v149 == 255)
  {
    v150 = *(_OWORD *)(v143 + 64);
    *v147 = *v148;
    *(_OWORD *)(v142 + 64) = v150;
    *(_OWORD *)(v142 + 73) = *(_OWORD *)(v143 + 73);
  }
  else
  {
    v151 = *(_OWORD *)(v143 + 72);
    *(_OWORD *)(v142 + 72) = v151;
    (**(void (***)(_OWORD *, _OWORD *))(v151 - 8))(v147, v148);
    *(_BYTE *)(v142 + 88) = (v149 & 1) != 0;
  }
  v152 = (_OWORD *)(v142 + 96);
  v153 = (_OWORD *)(v143 + 96);
  v154 = *(unsigned __int8 *)(v143 + 136);
  if (v154 == 255)
  {
    v155 = *(_OWORD *)(v143 + 112);
    *v152 = *v153;
    *(_OWORD *)(v142 + 112) = v155;
    *(_OWORD *)(v142 + 121) = *(_OWORD *)(v143 + 121);
  }
  else
  {
    v156 = *(_OWORD *)(v143 + 120);
    *(_OWORD *)(v142 + 120) = v156;
    (**(void (***)(_OWORD *, _OWORD *))(v156 - 8))(v152, v153);
    *(_BYTE *)(v142 + 136) = (v154 & 1) != 0;
  }
  v157 = (_OWORD *)(v142 + 144);
  v158 = (_OWORD *)(v143 + 144);
  v159 = *(unsigned __int8 *)(v143 + 184);
  if (v159 == 255)
  {
    v160 = *(_OWORD *)(v143 + 160);
    *v157 = *v158;
    *(_OWORD *)(v142 + 160) = v160;
    *(_OWORD *)(v142 + 169) = *(_OWORD *)(v143 + 169);
  }
  else
  {
    v161 = *(_OWORD *)(v143 + 168);
    *(_OWORD *)(v142 + 168) = v161;
    (**(void (***)(_OWORD *, _OWORD *))(v161 - 8))(v157, v158);
    *(_BYTE *)(v142 + 184) = (v159 & 1) != 0;
  }
  v162 = (_OWORD *)(v142 + 192);
  v163 = (_OWORD *)(v143 + 192);
  v164 = *(unsigned __int8 *)(v143 + 232);
  if (v164 == 255)
  {
    v165 = *(_OWORD *)(v143 + 208);
    *v162 = *v163;
    *(_OWORD *)(v142 + 208) = v165;
    *(_OWORD *)(v142 + 217) = *(_OWORD *)(v143 + 217);
  }
  else
  {
    v166 = *(_OWORD *)(v143 + 216);
    *(_OWORD *)(v142 + 216) = v166;
    (**(void (***)(_OWORD *, _OWORD *))(v166 - 8))(v162, v163);
    *(_BYTE *)(v142 + 232) = (v164 & 1) != 0;
  }
  v167 = (_OWORD *)(v142 + 240);
  v168 = (_OWORD *)(v143 + 240);
  v169 = *(unsigned __int8 *)(v143 + 280);
  if (v169 == 255)
  {
    v170 = *(_OWORD *)(v143 + 256);
    *v167 = *v168;
    *(_OWORD *)(v142 + 256) = v170;
    *(_OWORD *)(v142 + 265) = *(_OWORD *)(v143 + 265);
  }
  else
  {
    v171 = *(_QWORD *)(v143 + 264);
    v172 = *(_QWORD *)(v143 + 272);
    *(_QWORD *)(v142 + 264) = v171;
    *(_QWORD *)(v142 + 272) = v172;
    (**(void (***)(_OWORD *, _OWORD *))(v171 - 8))(v167, v168);
    v173 = (BOOL *)(v142 + 280);
    *v173 = (v169 & 1) != 0;
  }
  *(_WORD *)(v142 + 281) = *(_WORD *)(v143 + 281);
  return a1;
}

uint64_t assignWithCopy for ChartProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  __int128 *v95;
  _BYTE *v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  __int128 *v134;
  _BYTE *v135;
  int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  _OWORD *v172;
  _BYTE *v173;
  int v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _OWORD *v188;
  __int128 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t *v197;
  int v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t *v205;
  int v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  __int128 v210;
  __int128 *v211;
  __int128 *v212;
  _BYTE *v213;
  int v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _OWORD *v250;
  _OWORD *v251;
  _BYTE *v252;
  int v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  __int128 *v299;
  int v300;
  int v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  __int128 *v308;
  __int128 *v309;
  int v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  __int128 *v316;
  __int128 *v317;
  int v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  __int128 *v324;
  __int128 *v325;
  int v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  __int128 *v332;
  __int128 *v333;
  int v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  __int128 *v340;
  __int128 *v341;
  _BYTE *v342;
  int v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  char v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _BYTE *v355;
  uint64_t v356;
  _BYTE *v357;
  uint64_t v358;
  _BYTE *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _BYTE *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char v407;
  char v408;
  char v409;
  char v410;
  char v411;
  char v412;
  char v413;
  char v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char v419;
  char v420;

  v4 = a1 + 264;
  v5 = a2 + 313;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v6 = (__int128 *)(a2 + 32);
    sub_2141E0750(a1 + 32, &qword_253F15AE8);
    if ((*(_BYTE *)(v5 + 2) & 1) != 0)
    {
      v7 = *(unsigned __int8 *)(a2 + 72);
      if (v7 == 255)
      {
        v8 = *v6;
        v9 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *(_OWORD *)(a1 + 32) = v8;
        *(_OWORD *)(a1 + 48) = v9;
      }
      else
      {
        v10 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v10;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 32, a2 + 32);
        *(_BYTE *)(a1 + 72) = (v7 & 1) != 0;
      }
      v11 = (_OWORD *)(a1 + 80);
      v12 = (__int128 *)(a2 + 80);
      v13 = *(unsigned __int8 *)(a2 + 120);
      if (v13 == 255)
      {
        v14 = *v12;
        v15 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
        *v11 = v14;
        *(_OWORD *)(a1 + 96) = v15;
      }
      else
      {
        v16 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v16;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        (**(void (***)(_OWORD *, __int128 *))(v16 - 8))(v11, v12);
        *(_BYTE *)(a1 + 120) = (v13 & 1) != 0;
      }
      v17 = (_OWORD *)(a1 + 128);
      v18 = (__int128 *)(a2 + 128);
      v19 = *(unsigned __int8 *)(a2 + 168);
      if (v19 == 255)
      {
        v20 = *v18;
        v21 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
        *v17 = v20;
        *(_OWORD *)(a1 + 144) = v21;
      }
      else
      {
        v22 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 152) = v22;
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        (**(void (***)(_OWORD *, __int128 *))(v22 - 8))(v17, v18);
        *(_BYTE *)(a1 + 168) = (v19 & 1) != 0;
      }
      v23 = (_OWORD *)(a1 + 176);
      v24 = (__int128 *)(a2 + 176);
      v25 = *(unsigned __int8 *)(a2 + 216);
      if (v25 == 255)
      {
        v26 = *v24;
        v27 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
        *v23 = v26;
        *(_OWORD *)(a1 + 192) = v27;
      }
      else
      {
        v28 = *(_QWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 200) = v28;
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        (**(void (***)(_OWORD *, __int128 *))(v28 - 8))(v23, v24);
        *(_BYTE *)(a1 + 216) = (v25 & 1) != 0;
      }
      v29 = (_OWORD *)(a1 + 224);
      v30 = (__int128 *)(a2 + 224);
      v31 = *(unsigned __int8 *)(a2 + 264);
      if (v31 == 255)
      {
        v32 = *v30;
        v33 = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
        *v29 = v32;
        *(_OWORD *)(a1 + 240) = v33;
      }
      else
      {
        v34 = *(_QWORD *)(a2 + 248);
        *(_QWORD *)(a1 + 248) = v34;
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        (**(void (***)(_OWORD *, __int128 *))(v34 - 8))(v29, v30);
        *(_BYTE *)v4 = (v31 & 1) != 0;
      }
      v35 = (_OWORD *)(a1 + 272);
      v36 = (__int128 *)(a2 + 272);
      v37 = *(unsigned __int8 *)(a2 + 312);
      if (v37 == 255)
      {
        v38 = *v36;
        v39 = *(_OWORD *)(a2 + 288);
        *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
        *v35 = v38;
        *(_OWORD *)(a1 + 288) = v39;
      }
      else
      {
        v40 = *(_QWORD *)(a2 + 296);
        *(_QWORD *)(a1 + 296) = v40;
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
        (**(void (***)(_OWORD *, __int128 *))(v40 - 8))(v35, v36);
        *(_BYTE *)(v4 + 48) = (v37 & 1) != 0;
      }
      *(_WORD *)(v4 + 49) = *(_WORD *)v5;
      *(_BYTE *)(v4 + 51) = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v6;
      *(_BYTE *)(v4 + 51) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(v5 + 3);
  v41 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v41)
    {
      v42 = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 320) = v41;
      *(_QWORD *)(a1 + 328) = v42;
      swift_retain();
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v41)
  {
    v43 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v41;
    *(_QWORD *)(a1 + 328) = v43;
    swift_retain();
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
LABEL_42:
  v44 = *(_QWORD *)(a2 + 336);
  if (*(_QWORD *)(a1 + 336))
  {
    if (v44)
    {
      v45 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 336) = v44;
      *(_QWORD *)(a1 + 344) = v45;
      swift_retain();
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v44)
  {
    v46 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = v44;
    *(_QWORD *)(a1 + 344) = v46;
    swift_retain();
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_49:
  v47 = *(_QWORD *)(a2 + 352);
  if (*(_QWORD *)(a1 + 352))
  {
    if (v47)
    {
      v48 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = v47;
      *(_QWORD *)(a1 + 360) = v48;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    swift_release();
  }
  else if (v47)
  {
    v49 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = v47;
    *(_QWORD *)(a1 + 360) = v49;
    swift_retain();
    goto LABEL_56;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
LABEL_56:
  v50 = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 368))
  {
    if (v50)
    {
      v51 = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = v50;
      *(_QWORD *)(a1 + 376) = v51;
      swift_retain();
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  else if (v50)
  {
    v52 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = v50;
    *(_QWORD *)(a1 + 376) = v52;
    swift_retain();
    goto LABEL_63;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
LABEL_63:
  v53 = *(_QWORD *)(a2 + 384);
  if (*(_QWORD *)(a1 + 384))
  {
    if (v53)
    {
      v54 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = v53;
      *(_QWORD *)(a1 + 392) = v54;
      swift_retain();
      swift_release();
      goto LABEL_70;
    }
    swift_release();
  }
  else if (v53)
  {
    v55 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = v53;
    *(_QWORD *)(a1 + 392) = v55;
    swift_retain();
    goto LABEL_70;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_70:
  v56 = (__int128 *)(a1 + 400);
  v57 = (__int128 *)(a2 + 400);
  v58 = *(unsigned __int8 *)(a2 + 504);
  v417 = v5;
  v418 = v4;
  if (*(unsigned __int8 *)(a1 + 504) == 255)
  {
    if (v58 == 255)
    {
      v64 = *v57;
      v65 = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 432) = v65;
      *v56 = v64;
      v66 = *(_OWORD *)(a2 + 448);
      v67 = *(_OWORD *)(a2 + 464);
      v68 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
      *(_OWORD *)(a1 + 464) = v67;
      *(_OWORD *)(a1 + 480) = v68;
      *(_OWORD *)(a1 + 448) = v66;
    }
    else
    {
      v408 = v58 & 1;
      v86 = *(_QWORD *)(a2 + 400);
      v87 = *(_QWORD *)(a2 + 408);
      v88 = *(_QWORD *)(a2 + 416);
      v89 = *(_QWORD *)(a2 + 424);
      v90 = *(_QWORD *)(a2 + 432);
      v91 = *(_QWORD *)(a2 + 440);
      v92 = *(_QWORD *)(a2 + 448);
      v93 = *(_QWORD *)(a2 + 456);
      v363 = *(_QWORD *)(a2 + 464);
      v373 = *(_QWORD *)(a2 + 472);
      v383 = *(_QWORD *)(a2 + 480);
      v393 = *(_QWORD *)(a2 + 488);
      v403 = *(_QWORD *)(a2 + 496);
      sub_21421BAE4(v86, v87, v88, v89, v90, v91, v92, v93, v363);
      *(_QWORD *)(a1 + 400) = v86;
      *(_QWORD *)(a1 + 408) = v87;
      *(_QWORD *)(a1 + 416) = v88;
      *(_QWORD *)(a1 + 424) = v89;
      *(_QWORD *)(a1 + 432) = v90;
      *(_QWORD *)(a1 + 440) = v91;
      v4 = v418;
      *(_QWORD *)(a1 + 448) = v92;
      *(_QWORD *)(a1 + 456) = v93;
      *(_QWORD *)(a1 + 464) = v363;
      *(_QWORD *)(a1 + 472) = v373;
      *(_QWORD *)(a1 + 480) = v383;
      *(_QWORD *)(a1 + 488) = v393;
      *(_QWORD *)(a1 + 496) = v403;
      *(_BYTE *)(v418 + 240) = v408;
    }
  }
  else if (v58 == 255)
  {
    sub_2141E0750(a1 + 400, &qword_253F13368);
    v60 = *(_OWORD *)(a2 + 416);
    v59 = *(_OWORD *)(a2 + 432);
    *v56 = *v57;
    *(_OWORD *)(a1 + 416) = v60;
    *(_OWORD *)(a1 + 432) = v59;
    v62 = *(_OWORD *)(a2 + 464);
    v61 = *(_OWORD *)(a2 + 480);
    v63 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    *(_OWORD *)(a1 + 464) = v62;
    *(_OWORD *)(a1 + 480) = v61;
    *(_OWORD *)(a1 + 448) = v63;
  }
  else
  {
    v407 = v58 & 1;
    v69 = *(_QWORD *)(a2 + 400);
    v70 = *(_QWORD *)(a2 + 408);
    v71 = *(_QWORD *)(a2 + 416);
    v72 = *(_QWORD *)(a2 + 424);
    v73 = *(_QWORD *)(a2 + 432);
    v74 = *(_QWORD *)(a2 + 440);
    v75 = *(_QWORD *)(a2 + 448);
    v76 = *(_QWORD *)(a2 + 456);
    v362 = *(_QWORD *)(a2 + 464);
    v372 = *(_QWORD *)(a2 + 472);
    v382 = *(_QWORD *)(a2 + 480);
    v392 = *(_QWORD *)(a2 + 488);
    v402 = *(_QWORD *)(a2 + 496);
    sub_21421BAE4(v69, v70, v71, v72, v73, v74, v75, v76, v362);
    v77 = *(_QWORD *)(a1 + 400);
    v78 = *(_QWORD *)(a1 + 408);
    v79 = *(_QWORD *)(a1 + 416);
    v80 = *(_QWORD *)(a1 + 424);
    v81 = *(_QWORD *)(a1 + 432);
    v82 = *(_QWORD *)(a1 + 440);
    v83 = *(_QWORD *)(a1 + 448);
    v84 = *(_QWORD *)(a1 + 456);
    v85 = *(_OWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 400) = v69;
    *(_QWORD *)(a1 + 408) = v70;
    *(_QWORD *)(a1 + 416) = v71;
    *(_QWORD *)(a1 + 424) = v72;
    *(_QWORD *)(a1 + 432) = v73;
    *(_QWORD *)(a1 + 440) = v74;
    v4 = v418;
    *(_QWORD *)(a1 + 448) = v75;
    *(_QWORD *)(a1 + 456) = v76;
    *(_QWORD *)(a1 + 464) = v362;
    *(_QWORD *)(a1 + 472) = v372;
    *(_QWORD *)(a1 + 480) = v382;
    *(_QWORD *)(a1 + 488) = v392;
    *(_QWORD *)(a1 + 496) = v402;
    *(_BYTE *)(v418 + 240) = v407;
    sub_21421BB6C(v77, v78, v79, v80, v81, v82, v83, v84, v85);
  }
  v94 = (__int128 *)(a1 + 512);
  v95 = (__int128 *)(a2 + 512);
  v96 = (_BYTE *)(v4 + 352);
  v97 = *(unsigned __int8 *)(a2 + 616);
  if (*(unsigned __int8 *)(a1 + 616) == 255)
  {
    if (v97 == 255)
    {
      v103 = *v95;
      v104 = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 544) = v104;
      *v94 = v103;
      v105 = *(_OWORD *)(a2 + 560);
      v106 = *(_OWORD *)(a2 + 576);
      v107 = *(_OWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
      *(_OWORD *)(a1 + 576) = v106;
      *(_OWORD *)(a1 + 592) = v107;
      *(_OWORD *)(a1 + 560) = v105;
    }
    else
    {
      v410 = v97 & 1;
      v125 = *(_QWORD *)(a2 + 512);
      v126 = *(_QWORD *)(a2 + 520);
      v127 = *(_QWORD *)(a2 + 528);
      v128 = *(_QWORD *)(a2 + 536);
      v129 = *(_QWORD *)(a2 + 544);
      v130 = *(_QWORD *)(a2 + 552);
      v131 = *(_QWORD *)(a2 + 560);
      v132 = *(_QWORD *)(a2 + 568);
      v365 = *(_QWORD *)(a2 + 576);
      v375 = *(_QWORD *)(a2 + 584);
      v385 = *(_QWORD *)(a2 + 592);
      v395 = *(_QWORD *)(a2 + 600);
      v405 = *(_QWORD *)(a2 + 608);
      v357 = v96;
      sub_21421BAE4(v125, v126, v127, v128, v129, v130, v131, v132, v365);
      *(_QWORD *)(a1 + 512) = v125;
      *(_QWORD *)(a1 + 520) = v126;
      *(_QWORD *)(a1 + 528) = v127;
      *(_QWORD *)(a1 + 536) = v128;
      *(_QWORD *)(a1 + 544) = v129;
      *(_QWORD *)(a1 + 552) = v130;
      v4 = v418;
      *(_QWORD *)(a1 + 560) = v131;
      *(_QWORD *)(a1 + 568) = v132;
      *(_QWORD *)(a1 + 576) = v365;
      *(_QWORD *)(a1 + 584) = v375;
      *(_QWORD *)(a1 + 592) = v385;
      *(_QWORD *)(a1 + 600) = v395;
      *(_QWORD *)(a1 + 608) = v405;
      *v357 = v410;
    }
  }
  else if (v97 == 255)
  {
    sub_2141E0750(a1 + 512, &qword_253F13368);
    v99 = *(_OWORD *)(a2 + 528);
    v98 = *(_OWORD *)(a2 + 544);
    *v94 = *v95;
    *(_OWORD *)(a1 + 528) = v99;
    *(_OWORD *)(a1 + 544) = v98;
    v101 = *(_OWORD *)(a2 + 576);
    v100 = *(_OWORD *)(a2 + 592);
    v102 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    *(_OWORD *)(a1 + 576) = v101;
    *(_OWORD *)(a1 + 592) = v100;
    *(_OWORD *)(a1 + 560) = v102;
  }
  else
  {
    v409 = v97 & 1;
    v108 = *(_QWORD *)(a2 + 520);
    v109 = *(_QWORD *)(a2 + 528);
    v110 = *(_QWORD *)(a2 + 536);
    v111 = *(_QWORD *)(a2 + 544);
    v112 = *(_QWORD *)(a2 + 552);
    v113 = *(_QWORD *)(a2 + 560);
    v114 = *(_QWORD *)(a2 + 568);
    v356 = *(_QWORD *)(a2 + 512);
    v364 = *(_QWORD *)(a2 + 576);
    v374 = *(_QWORD *)(a2 + 584);
    v384 = *(_QWORD *)(a2 + 592);
    v394 = *(_QWORD *)(a2 + 600);
    v404 = *(_QWORD *)(a2 + 608);
    v115 = v96;
    sub_21421BAE4(v356, v108, v109, v110, v111, v112, v113, v114, *(_OWORD *)(a2 + 576));
    v116 = *(_QWORD *)(a1 + 512);
    v117 = *(_QWORD *)(a1 + 520);
    v118 = *(_QWORD *)(a1 + 528);
    v119 = *(_QWORD *)(a1 + 536);
    v120 = *(_QWORD *)(a1 + 544);
    v121 = *(_QWORD *)(a1 + 552);
    v122 = *(_QWORD *)(a1 + 560);
    v123 = *(_QWORD *)(a1 + 568);
    v124 = *(_OWORD *)(a1 + 576);
    *(_QWORD *)(a1 + 512) = v356;
    *(_QWORD *)(a1 + 520) = v108;
    *(_QWORD *)(a1 + 528) = v109;
    *(_QWORD *)(a1 + 536) = v110;
    *(_QWORD *)(a1 + 544) = v111;
    *(_QWORD *)(a1 + 552) = v112;
    v4 = v418;
    *(_QWORD *)(a1 + 560) = v113;
    *(_QWORD *)(a1 + 568) = v114;
    *(_QWORD *)(a1 + 576) = v364;
    *(_QWORD *)(a1 + 584) = v374;
    *(_QWORD *)(a1 + 592) = v384;
    *(_QWORD *)(a1 + 600) = v394;
    *(_QWORD *)(a1 + 608) = v404;
    *v115 = v409;
    sub_21421BB6C(v116, v117, v118, v119, v120, v121, v122, v123, v124);
  }
  v133 = (__int128 *)(a1 + 624);
  v134 = (__int128 *)(a2 + 624);
  v135 = (_BYTE *)(v4 + 456);
  v136 = *(unsigned __int8 *)(a2 + 720);
  if (*(unsigned __int8 *)(a1 + 720) == 255)
  {
    if (v136 == 255)
    {
      v142 = *v134;
      v143 = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
      *(_OWORD *)(a1 + 656) = v143;
      *v133 = v142;
      v144 = *(_OWORD *)(a2 + 672);
      v145 = *(_OWORD *)(a2 + 688);
      v146 = *(_OWORD *)(a2 + 704);
      *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
      *(_OWORD *)(a1 + 688) = v145;
      *(_OWORD *)(a1 + 704) = v146;
      *(_OWORD *)(a1 + 672) = v144;
    }
    else
    {
      v412 = v136 & 1;
      v163 = *(_QWORD *)(a2 + 624);
      v164 = *(_QWORD *)(a2 + 632);
      v165 = *(_QWORD *)(a2 + 640);
      v166 = *(_QWORD *)(a2 + 648);
      v167 = *(_QWORD *)(a2 + 656);
      v168 = *(_QWORD *)(a2 + 664);
      v169 = *(_QWORD *)(a2 + 672);
      v170 = *(_QWORD *)(a2 + 680);
      v377 = *(_QWORD *)(a2 + 688);
      v387 = *(_QWORD *)(a2 + 696);
      v397 = *(_OWORD *)(a2 + 704);
      v367 = v135;
      sub_21421B808(v163, v164, v165, v166, v167, v168, v169, v170);
      *(_QWORD *)(a1 + 624) = v163;
      *(_QWORD *)(a1 + 632) = v164;
      *(_QWORD *)(a1 + 640) = v165;
      *(_QWORD *)(a1 + 648) = v166;
      *(_QWORD *)(a1 + 656) = v167;
      *(_QWORD *)(a1 + 664) = v168;
      v4 = v418;
      *(_QWORD *)(a1 + 672) = v169;
      *(_QWORD *)(a1 + 680) = v170;
      *(_QWORD *)(a1 + 688) = v377;
      *(_QWORD *)(a1 + 696) = v387;
      *(_OWORD *)(a1 + 704) = v397;
      *v367 = v412;
    }
  }
  else if (v136 == 255)
  {
    sub_2141E0750(a1 + 624, qword_253F10468);
    v138 = *(_OWORD *)(a2 + 640);
    v137 = *(_OWORD *)(a2 + 656);
    *v133 = *v134;
    *(_OWORD *)(a1 + 640) = v138;
    *(_OWORD *)(a1 + 656) = v137;
    v140 = *(_OWORD *)(a2 + 688);
    v139 = *(_OWORD *)(a2 + 704);
    v141 = *(_OWORD *)(a2 + 672);
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    *(_OWORD *)(a1 + 688) = v140;
    *(_OWORD *)(a1 + 704) = v139;
    *(_OWORD *)(a1 + 672) = v141;
  }
  else
  {
    v411 = v136 & 1;
    v147 = *(_QWORD *)(a2 + 632);
    v148 = *(_QWORD *)(a2 + 640);
    v149 = *(_QWORD *)(a2 + 648);
    v150 = *(_QWORD *)(a2 + 656);
    v151 = *(_QWORD *)(a2 + 664);
    v152 = *(_QWORD *)(a2 + 672);
    v153 = *(_QWORD *)(a2 + 680);
    v366 = *(_QWORD *)(a2 + 624);
    v376 = *(_QWORD *)(a2 + 688);
    v386 = *(_QWORD *)(a2 + 696);
    v396 = *(_QWORD *)(a2 + 704);
    v406 = *(_QWORD *)(a2 + 712);
    v154 = v135;
    sub_21421B808(v366, v147, v148, v149, v150, v151, v152, v153);
    v155 = *(_QWORD *)(a1 + 624);
    v156 = *(_QWORD *)(a1 + 632);
    v157 = *(_QWORD *)(a1 + 640);
    v158 = *(_QWORD *)(a1 + 648);
    v159 = *(_QWORD *)(a1 + 656);
    v160 = *(_QWORD *)(a1 + 664);
    v161 = *(_QWORD *)(a1 + 672);
    v162 = *(_QWORD *)(a1 + 680);
    *(_QWORD *)(a1 + 624) = v366;
    *(_QWORD *)(a1 + 632) = v147;
    *(_QWORD *)(a1 + 640) = v148;
    *(_QWORD *)(a1 + 648) = v149;
    *(_QWORD *)(a1 + 656) = v150;
    *(_QWORD *)(a1 + 664) = v151;
    v4 = v418;
    *(_QWORD *)(a1 + 672) = v152;
    *(_QWORD *)(a1 + 680) = v153;
    *(_QWORD *)(a1 + 688) = v376;
    *(_QWORD *)(a1 + 696) = v386;
    *(_QWORD *)(a1 + 704) = v396;
    *(_QWORD *)(a1 + 712) = v406;
    *v154 = v411;
    sub_21421B8A0(v155, v156, v157, v158, v159, v160, v161, v162);
  }
  v171 = (_OWORD *)(a1 + 728);
  v172 = (_OWORD *)(a2 + 728);
  v173 = (_BYTE *)(v4 + 592);
  v174 = *(unsigned __int8 *)(a2 + 856);
  if (*(unsigned __int8 *)(a1 + 856) == 255)
  {
    if (v174 == 255)
    {
      *v171 = *v172;
      v181 = *(_OWORD *)(a2 + 744);
      v182 = *(_OWORD *)(a2 + 760);
      v183 = *(_OWORD *)(a2 + 792);
      *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
      *(_OWORD *)(a1 + 792) = v183;
      *(_OWORD *)(a1 + 744) = v181;
      *(_OWORD *)(a1 + 760) = v182;
      v184 = *(_OWORD *)(a2 + 808);
      v185 = *(_OWORD *)(a2 + 824);
      v186 = *(_OWORD *)(a2 + 840);
      *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
      *(_OWORD *)(a1 + 824) = v185;
      *(_OWORD *)(a1 + 840) = v186;
      *(_OWORD *)(a1 + 808) = v184;
      goto LABEL_117;
    }
LABEL_98:
    v187 = *(_QWORD *)(a2 + 736);
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
    *(_QWORD *)(a1 + 736) = v187;
    v188 = (_OWORD *)(a1 + 744);
    v189 = (__int128 *)(a2 + 744);
    v190 = *(_QWORD *)(a2 + 768);
    swift_retain();
    if ((v174 & 1) != 0)
    {
      if (v190)
      {
        *(_QWORD *)(a1 + 768) = v190;
        *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v190 - 8))(a1 + 744, a2 + 744, v190);
        v191 = *(_QWORD *)(a2 + 784);
        if (v191)
        {
LABEL_101:
          v192 = *(_QWORD *)(a2 + 792);
          *(_QWORD *)(a1 + 784) = v191;
          *(_QWORD *)(a1 + 792) = v192;
          swift_retain();
LABEL_107:
          *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
          v197 = (uint64_t *)(a2 + 808);
          v198 = *(unsigned __int8 *)(a2 + 816);
          swift_bridgeObjectRetain();
          if (v198 == 255)
          {
            v199 = *v197;
            *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
            *(_QWORD *)(a1 + 808) = v199;
          }
          else
          {
            v200 = v198 & 1;
            v201 = *v197;
            sub_2141E83F4(v201, v200);
            *(_QWORD *)(a1 + 808) = v201;
            *(_BYTE *)(v4 + 552) = v200;
          }
          v202 = *(_OWORD *)(a2 + 840);
          *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
          *(_OWORD *)(a1 + 840) = v202;
          *v173 = 1;
          goto LABEL_117;
        }
      }
      else
      {
        v195 = *v189;
        v196 = *(_OWORD *)(a2 + 760);
        *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
        *v188 = v195;
        *(_OWORD *)(a1 + 760) = v196;
        v191 = *(_QWORD *)(a2 + 784);
        if (v191)
          goto LABEL_101;
      }
      *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
      goto LABEL_107;
    }
    if (v190)
    {
      *(_QWORD *)(a1 + 768) = v190;
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v190 - 8))(a1 + 744, a2 + 744, v190);
      v193 = *(_QWORD *)(a2 + 784);
      if (v193)
      {
LABEL_104:
        v194 = *(_QWORD *)(a2 + 792);
        *(_QWORD *)(a1 + 784) = v193;
        *(_QWORD *)(a1 + 792) = v194;
        swift_retain();
LABEL_113:
        *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
        v205 = (uint64_t *)(a2 + 808);
        v206 = *(unsigned __int8 *)(a2 + 816);
        swift_bridgeObjectRetain();
        if (v206 == 255)
        {
          v207 = *v205;
          *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
          *(_QWORD *)(a1 + 808) = v207;
        }
        else
        {
          v208 = v206 & 1;
          v209 = *v205;
          sub_2141E83F4(v209, v208);
          *(_QWORD *)(a1 + 808) = v209;
          *(_BYTE *)(v4 + 552) = v208;
        }
        v210 = *(_OWORD *)(a2 + 840);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
        *(_OWORD *)(a1 + 840) = v210;
        *v173 = 0;
        goto LABEL_117;
      }
    }
    else
    {
      v203 = *v189;
      v204 = *(_OWORD *)(a2 + 760);
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      *v188 = v203;
      *(_OWORD *)(a1 + 760) = v204;
      v193 = *(_QWORD *)(a2 + 784);
      if (v193)
        goto LABEL_104;
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_113;
  }
  if (v174 == 255)
  {
    sub_2141E0750(a1 + 728, &qword_254D695C8);
    *v171 = *v172;
    v175 = *(_OWORD *)(a2 + 792);
    v177 = *(_OWORD *)(a2 + 744);
    v176 = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 792) = v175;
    *(_OWORD *)(a1 + 744) = v177;
    *(_OWORD *)(a1 + 760) = v176;
    v179 = *(_OWORD *)(a2 + 824);
    v178 = *(_OWORD *)(a2 + 840);
    v180 = *(_OWORD *)(a2 + 808);
    *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
    *(_OWORD *)(a1 + 824) = v179;
    *(_OWORD *)(a1 + 840) = v178;
    *(_OWORD *)(a1 + 808) = v180;
    goto LABEL_117;
  }
  if (a1 != a2)
  {
    sub_2141E0750(a1 + 728, &qword_254D695C8);
    LOBYTE(v174) = *(_BYTE *)(v417 + 543);
    goto LABEL_98;
  }
LABEL_117:
  v211 = (__int128 *)(a1 + 864);
  v212 = (__int128 *)(a2 + 864);
  v213 = (_BYTE *)(v4 + 704);
  v214 = *(unsigned __int8 *)(a2 + 968);
  if (*(unsigned __int8 *)(a1 + 968) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v212;
      v221 = *(_OWORD *)(a2 + 896);
      *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 896) = v221;
      *v211 = v220;
      v222 = *(_OWORD *)(a2 + 912);
      v223 = *(_OWORD *)(a2 + 928);
      v224 = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
      *(_OWORD *)(a1 + 928) = v223;
      *(_OWORD *)(a1 + 944) = v224;
      *(_OWORD *)(a1 + 912) = v222;
    }
    else
    {
      v414 = v214 & 1;
      v242 = *(_QWORD *)(a2 + 864);
      v243 = *(_QWORD *)(a2 + 872);
      v244 = *(_QWORD *)(a2 + 880);
      v245 = *(_QWORD *)(a2 + 888);
      v246 = *(_QWORD *)(a2 + 896);
      v247 = *(_QWORD *)(a2 + 904);
      v248 = *(_QWORD *)(a2 + 912);
      v249 = *(_QWORD *)(a2 + 920);
      v369 = *(_QWORD *)(a2 + 928);
      v379 = *(_QWORD *)(a2 + 936);
      v389 = *(_QWORD *)(a2 + 944);
      v399 = *(_OWORD *)(a2 + 952);
      v359 = v213;
      sub_21421BAE4(v242, v243, v244, v245, v246, v247, v248, v249, v369);
      *(_QWORD *)(a1 + 864) = v242;
      *(_QWORD *)(a1 + 872) = v243;
      *(_QWORD *)(a1 + 880) = v244;
      *(_QWORD *)(a1 + 888) = v245;
      *(_QWORD *)(a1 + 896) = v246;
      *(_QWORD *)(a1 + 904) = v247;
      v4 = v418;
      *(_QWORD *)(a1 + 912) = v248;
      *(_QWORD *)(a1 + 920) = v249;
      *(_QWORD *)(a1 + 928) = v369;
      *(_QWORD *)(a1 + 936) = v379;
      *(_QWORD *)(a1 + 944) = v389;
      *(_OWORD *)(a1 + 952) = v399;
      *v359 = v414;
    }
  }
  else if (v214 == 255)
  {
    sub_2141E0750(a1 + 864, &qword_253F13368);
    v216 = *(_OWORD *)(a2 + 880);
    v215 = *(_OWORD *)(a2 + 896);
    *v211 = *v212;
    *(_OWORD *)(a1 + 880) = v216;
    *(_OWORD *)(a1 + 896) = v215;
    v218 = *(_OWORD *)(a2 + 928);
    v217 = *(_OWORD *)(a2 + 944);
    v219 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    *(_OWORD *)(a1 + 928) = v218;
    *(_OWORD *)(a1 + 944) = v217;
    *(_OWORD *)(a1 + 912) = v219;
  }
  else
  {
    v413 = v214 & 1;
    v225 = *(_QWORD *)(a2 + 872);
    v226 = *(_QWORD *)(a2 + 880);
    v227 = *(_QWORD *)(a2 + 888);
    v228 = *(_QWORD *)(a2 + 896);
    v229 = *(_QWORD *)(a2 + 904);
    v230 = *(_QWORD *)(a2 + 912);
    v231 = *(_QWORD *)(a2 + 920);
    v358 = *(_QWORD *)(a2 + 864);
    v368 = *(_QWORD *)(a2 + 928);
    v378 = *(_QWORD *)(a2 + 936);
    v388 = *(_QWORD *)(a2 + 944);
    v398 = *(_OWORD *)(a2 + 952);
    v232 = v213;
    sub_21421BAE4(v358, v225, v226, v227, v228, v229, v230, v231, *(_OWORD *)(a2 + 928));
    v233 = *(_QWORD *)(a1 + 864);
    v234 = *(_QWORD *)(a1 + 872);
    v235 = *(_QWORD *)(a1 + 880);
    v236 = *(_QWORD *)(a1 + 888);
    v237 = *(_QWORD *)(a1 + 896);
    v238 = *(_QWORD *)(a1 + 904);
    v239 = *(_QWORD *)(a1 + 912);
    v240 = *(_QWORD *)(a1 + 920);
    v241 = *(_OWORD *)(a1 + 928);
    *(_QWORD *)(a1 + 864) = v358;
    *(_QWORD *)(a1 + 872) = v225;
    *(_QWORD *)(a1 + 880) = v226;
    *(_QWORD *)(a1 + 888) = v227;
    *(_QWORD *)(a1 + 896) = v228;
    *(_QWORD *)(a1 + 904) = v229;
    v4 = v418;
    *(_QWORD *)(a1 + 912) = v230;
    *(_QWORD *)(a1 + 920) = v231;
    *(_QWORD *)(a1 + 928) = v368;
    *(_QWORD *)(a1 + 936) = v378;
    *(_QWORD *)(a1 + 944) = v388;
    *(_OWORD *)(a1 + 952) = v398;
    *v232 = v413;
    sub_21421BB6C(v233, v234, v235, v236, v237, v238, v239, v240, v241);
  }
  v250 = (_OWORD *)(a1 + 976);
  v251 = (_OWORD *)(a2 + 976);
  v252 = (_BYTE *)(v4 + 840);
  v253 = *(unsigned __int8 *)(a2 + 1104);
  if (*(unsigned __int8 *)(a1 + 1104) == 255)
  {
    if (v253 == 255)
    {
      *v250 = *v251;
      v260 = *(_OWORD *)(a2 + 992);
      v261 = *(_OWORD *)(a2 + 1008);
      v262 = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
      *(_OWORD *)(a1 + 1040) = v262;
      *(_OWORD *)(a1 + 992) = v260;
      *(_OWORD *)(a1 + 1008) = v261;
      v263 = *(_OWORD *)(a2 + 1056);
      v264 = *(_OWORD *)(a2 + 1072);
      v265 = *(_OWORD *)(a2 + 1088);
      *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
      *(_OWORD *)(a1 + 1072) = v264;
      *(_OWORD *)(a1 + 1088) = v265;
      *(_OWORD *)(a1 + 1056) = v263;
    }
    else
    {
      v420 = v253 & 1;
      v284 = *(_QWORD *)(a2 + 976);
      v285 = *(_QWORD *)(a2 + 984);
      v286 = *(_QWORD *)(a2 + 992);
      v287 = *(_QWORD *)(a2 + 1000);
      v288 = *(_QWORD *)(a2 + 1008);
      v289 = *(_QWORD *)(a2 + 1016);
      v290 = *(_QWORD *)(a2 + 1024);
      v291 = *(_QWORD *)(a2 + 1032);
      v353 = *(_QWORD *)(a2 + 1040);
      v361 = *(_QWORD *)(a2 + 1048);
      v371 = *(_QWORD *)(a2 + 1056);
      v381 = *(_QWORD *)(a2 + 1064);
      v391 = *(_QWORD *)(a2 + 1072);
      v401 = *(_OWORD *)(a2 + 1080);
      v416 = *(_QWORD *)(a2 + 1096);
      v355 = v252;
      sub_21421B980(v284, v285, v286, v287, v288, v289, v290, v291, v353, v361, v371, v381);
      *(_QWORD *)(a1 + 976) = v284;
      *(_QWORD *)(a1 + 984) = v285;
      *(_QWORD *)(a1 + 992) = v286;
      *(_QWORD *)(a1 + 1000) = v287;
      *(_QWORD *)(a1 + 1008) = v288;
      *(_QWORD *)(a1 + 1016) = v289;
      *(_QWORD *)(a1 + 1024) = v290;
      *(_QWORD *)(a1 + 1032) = v291;
      *(_QWORD *)(a1 + 1040) = v353;
      *(_QWORD *)(a1 + 1048) = v361;
      *(_QWORD *)(a1 + 1056) = v371;
      *(_QWORD *)(a1 + 1064) = v381;
      *(_QWORD *)(a1 + 1072) = v391;
      *(_OWORD *)(a1 + 1080) = v401;
      *(_QWORD *)(a1 + 1096) = v416;
      *v355 = v420;
    }
  }
  else if (v253 == 255)
  {
    sub_2141E0750(a1 + 976, &qword_254D695C0);
    *v250 = *v251;
    v254 = *(_OWORD *)(a2 + 1040);
    v256 = *(_OWORD *)(a2 + 992);
    v255 = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1040) = v254;
    *(_OWORD *)(a1 + 992) = v256;
    *(_OWORD *)(a1 + 1008) = v255;
    v258 = *(_OWORD *)(a2 + 1072);
    v257 = *(_OWORD *)(a2 + 1088);
    v259 = *(_OWORD *)(a2 + 1056);
    *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
    *(_OWORD *)(a1 + 1072) = v258;
    *(_OWORD *)(a1 + 1088) = v257;
    *(_OWORD *)(a1 + 1056) = v259;
  }
  else
  {
    v419 = v253 & 1;
    v266 = *(_QWORD *)(a2 + 976);
    v267 = *(_QWORD *)(a2 + 984);
    v268 = *(_QWORD *)(a2 + 992);
    v269 = *(_QWORD *)(a2 + 1000);
    v270 = *(_QWORD *)(a2 + 1008);
    v271 = *(_QWORD *)(a2 + 1016);
    v272 = *(_QWORD *)(a2 + 1024);
    v352 = *(_QWORD *)(a2 + 1032);
    v354 = *(_QWORD *)(a2 + 1040);
    v360 = *(_QWORD *)(a2 + 1048);
    v370 = *(_QWORD *)(a2 + 1056);
    v380 = *(_QWORD *)(a2 + 1064);
    v390 = *(_QWORD *)(a2 + 1072);
    v400 = *(_OWORD *)(a2 + 1080);
    v415 = *(_QWORD *)(a2 + 1096);
    v273 = v252;
    sub_21421B980(v266, v267, v268, v269, v270, v271, v272, v352, v354, v360, v370, v380);
    v274 = *(_QWORD *)(a1 + 976);
    v275 = *(_QWORD *)(a1 + 984);
    v276 = *(_QWORD *)(a1 + 992);
    v277 = *(_QWORD *)(a1 + 1000);
    v278 = *(_QWORD *)(a1 + 1008);
    v279 = *(_QWORD *)(a1 + 1016);
    v280 = *(_QWORD *)(a1 + 1024);
    v281 = *(_QWORD *)(a1 + 1032);
    v282 = *(_OWORD *)(a1 + 1040);
    v283 = *(_OWORD *)(a1 + 1056);
    *(_QWORD *)(a1 + 976) = v266;
    *(_QWORD *)(a1 + 984) = v267;
    *(_QWORD *)(a1 + 992) = v268;
    *(_QWORD *)(a1 + 1000) = v269;
    *(_QWORD *)(a1 + 1008) = v270;
    *(_QWORD *)(a1 + 1016) = v271;
    *(_QWORD *)(a1 + 1024) = v272;
    *(_QWORD *)(a1 + 1032) = v352;
    *(_QWORD *)(a1 + 1040) = v354;
    *(_QWORD *)(a1 + 1048) = v360;
    *(_QWORD *)(a1 + 1056) = v370;
    *(_QWORD *)(a1 + 1064) = v380;
    *(_QWORD *)(a1 + 1072) = v390;
    *(_OWORD *)(a1 + 1080) = v400;
    *(_QWORD *)(a1 + 1096) = v415;
    *v273 = v419;
    sub_21421BA80(v274, v275, v276, v277, v278, v279, v280, v281, v282, *((uint64_t *)&v282 + 1), v283, BYTE8(v283));
  }
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(v417 + 831);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a2 + 1160);
  *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(a2 + 1176);
  v292 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v293 = v292[14];
  v294 = a1 + v293;
  v295 = a2 + v293;
  v296 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v296 - 8) + 24))(v294, v295, v296);
  *(_QWORD *)(a1 + v292[15]) = *(_QWORD *)(a2 + v292[15]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v292[16]) = *(_QWORD *)(a2 + v292[16]);
  swift_retain();
  swift_release();
  v297 = v292[17];
  v298 = a1 + v297;
  v299 = (__int128 *)(a2 + v297);
  v300 = *(unsigned __int8 *)(a1 + v297 + 40);
  v301 = *(unsigned __int8 *)(a2 + v297 + 40);
  if (v300 == 255)
  {
    if (v301 == 255)
    {
      v304 = *v299;
      v305 = v299[1];
      *(_OWORD *)(v298 + 25) = *(__int128 *)((char *)v299 + 25);
      *(_OWORD *)v298 = v304;
      *(_OWORD *)(v298 + 16) = v305;
      goto LABEL_141;
    }
    if ((v301 & 1) != 0)
      goto LABEL_138;
LABEL_140:
    v307 = *((_QWORD *)v299 + 3);
    *(_QWORD *)(v298 + 24) = v307;
    *(_QWORD *)(v298 + 32) = *((_QWORD *)v299 + 4);
    (**(void (***)(uint64_t, __int128 *))(v307 - 8))(v298, v299);
    *(_BYTE *)(v298 + 40) = 0;
    goto LABEL_141;
  }
  if (v301 == 255)
  {
    sub_2141E61B0(v298);
    v302 = *(__int128 *)((char *)v299 + 25);
    v303 = v299[1];
    *(_OWORD *)v298 = *v299;
    *(_OWORD *)(v298 + 16) = v303;
    *(_OWORD *)(v298 + 25) = v302;
    goto LABEL_141;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(v298);
    if ((*((_BYTE *)v299 + 40) & 1) != 0)
    {
LABEL_138:
      v306 = *((_QWORD *)v299 + 3);
      *(_QWORD *)(v298 + 24) = v306;
      *(_QWORD *)(v298 + 32) = *((_QWORD *)v299 + 4);
      (**(void (***)(uint64_t, __int128 *))(v306 - 8))(v298, v299);
      *(_BYTE *)(v298 + 40) = 1;
      goto LABEL_141;
    }
    goto LABEL_140;
  }
LABEL_141:
  v308 = (__int128 *)(v298 + 48);
  v309 = v299 + 3;
  v310 = *((unsigned __int8 *)v299 + 88);
  if (*(unsigned __int8 *)(v298 + 88) == 255)
  {
    if (v310 == 255)
    {
      v313 = *v309;
      v314 = v299[4];
      *(_OWORD *)(v298 + 73) = *(__int128 *)((char *)v299 + 73);
      *v308 = v313;
      *(_OWORD *)(v298 + 64) = v314;
      goto LABEL_151;
    }
    goto LABEL_148;
  }
  if (v310 == 255)
  {
    sub_2141E625C(v298 + 48);
    v311 = *(__int128 *)((char *)v299 + 73);
    v312 = v299[4];
    *v308 = *v309;
    *(_OWORD *)(v298 + 64) = v312;
    *(_OWORD *)(v298 + 73) = v311;
    goto LABEL_151;
  }
  if (a1 != a2)
  {
    sub_2141E625C(v298 + 48);
    LOBYTE(v310) = *((_BYTE *)v299 + 88);
LABEL_148:
    v315 = *((_QWORD *)v299 + 9);
    *(_QWORD *)(v298 + 72) = v315;
    *(_QWORD *)(v298 + 80) = *((_QWORD *)v299 + 10);
    (**(void (***)(uint64_t, uint64_t))(v315 - 8))(v298 + 48, (uint64_t)(v299 + 3));
    *(_BYTE *)(v298 + 88) = (v310 & 1) != 0;
  }
LABEL_151:
  v316 = (__int128 *)(v298 + 96);
  v317 = v299 + 6;
  v318 = *((unsigned __int8 *)v299 + 136);
  if (*(unsigned __int8 *)(v298 + 136) == 255)
  {
    if (v318 == 255)
    {
      v321 = *v317;
      v322 = v299[7];
      *(_OWORD *)(v298 + 121) = *(__int128 *)((char *)v299 + 121);
      *v316 = v321;
      *(_OWORD *)(v298 + 112) = v322;
      goto LABEL_161;
    }
    goto LABEL_158;
  }
  if (v318 == 255)
  {
    sub_2141E61B0(v298 + 96);
    v319 = *(__int128 *)((char *)v299 + 121);
    v320 = v299[7];
    *v316 = *v317;
    *(_OWORD *)(v298 + 112) = v320;
    *(_OWORD *)(v298 + 121) = v319;
    goto LABEL_161;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(v298 + 96);
    LOBYTE(v318) = *((_BYTE *)v299 + 136);
LABEL_158:
    v323 = *((_QWORD *)v299 + 15);
    *(_QWORD *)(v298 + 120) = v323;
    *(_QWORD *)(v298 + 128) = *((_QWORD *)v299 + 16);
    (**(void (***)(uint64_t, uint64_t))(v323 - 8))(v298 + 96, (uint64_t)(v299 + 6));
    *(_BYTE *)(v298 + 136) = (v318 & 1) != 0;
  }
LABEL_161:
  v324 = (__int128 *)(v298 + 144);
  v325 = v299 + 9;
  v326 = *((unsigned __int8 *)v299 + 184);
  if (*(unsigned __int8 *)(v298 + 184) == 255)
  {
    if (v326 == 255)
    {
      v329 = *v325;
      v330 = v299[10];
      *(_OWORD *)(v298 + 169) = *(__int128 *)((char *)v299 + 169);
      *v324 = v329;
      *(_OWORD *)(v298 + 160) = v330;
      goto LABEL_171;
    }
    goto LABEL_168;
  }
  if (v326 == 255)
  {
    sub_2141E625C(v298 + 144);
    v327 = *(__int128 *)((char *)v299 + 169);
    v328 = v299[10];
    *v324 = *v325;
    *(_OWORD *)(v298 + 160) = v328;
    *(_OWORD *)(v298 + 169) = v327;
    goto LABEL_171;
  }
  if (a1 != a2)
  {
    sub_2141E625C(v298 + 144);
    LOBYTE(v326) = *((_BYTE *)v299 + 184);
LABEL_168:
    v331 = *((_QWORD *)v299 + 21);
    *(_QWORD *)(v298 + 168) = v331;
    *(_QWORD *)(v298 + 176) = *((_QWORD *)v299 + 22);
    (**(void (***)(uint64_t, uint64_t))(v331 - 8))(v298 + 144, (uint64_t)(v299 + 9));
    *(_BYTE *)(v298 + 184) = (v326 & 1) != 0;
  }
LABEL_171:
  v332 = (__int128 *)(v298 + 192);
  v333 = v299 + 12;
  v334 = *((unsigned __int8 *)v299 + 232);
  if (*(unsigned __int8 *)(v298 + 232) == 255)
  {
    if (v334 == 255)
    {
      v337 = *v333;
      v338 = v299[13];
      *(_OWORD *)(v298 + 217) = *(__int128 *)((char *)v299 + 217);
      *v332 = v337;
      *(_OWORD *)(v298 + 208) = v338;
      goto LABEL_181;
    }
    goto LABEL_178;
  }
  if (v334 == 255)
  {
    sub_2141E61B0(v298 + 192);
    v335 = *(__int128 *)((char *)v299 + 217);
    v336 = v299[13];
    *v332 = *v333;
    *(_OWORD *)(v298 + 208) = v336;
    *(_OWORD *)(v298 + 217) = v335;
    goto LABEL_181;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(v298 + 192);
    LOBYTE(v334) = *((_BYTE *)v299 + 232);
LABEL_178:
    v339 = *((_QWORD *)v299 + 27);
    *(_QWORD *)(v298 + 216) = v339;
    *(_QWORD *)(v298 + 224) = *((_QWORD *)v299 + 28);
    (**(void (***)(uint64_t, uint64_t))(v339 - 8))(v298 + 192, (uint64_t)(v299 + 12));
    *(_BYTE *)(v298 + 232) = (v334 & 1) != 0;
  }
LABEL_181:
  v340 = (__int128 *)(v298 + 240);
  v341 = v299 + 15;
  v342 = (_BYTE *)(v298 + 280);
  v343 = *((unsigned __int8 *)v299 + 280);
  if (*(unsigned __int8 *)(v298 + 280) == 255)
  {
    if (v343 == 255)
    {
      v346 = *v341;
      v347 = v299[16];
      *(_OWORD *)(v298 + 265) = *(__int128 *)((char *)v299 + 265);
      *v340 = v346;
      *(_OWORD *)(v298 + 256) = v347;
      goto LABEL_191;
    }
    v350 = *((_QWORD *)v299 + 33);
    *(_QWORD *)(v298 + 264) = v350;
    *(_QWORD *)(v298 + 272) = *((_QWORD *)v299 + 34);
    (**(void (***)(uint64_t, uint64_t))(v350 - 8))(v298 + 240, (uint64_t)(v299 + 15));
    if ((v343 & 1) != 0)
    {
LABEL_188:
      *v342 = 1;
      goto LABEL_191;
    }
LABEL_190:
    *v342 = 0;
    goto LABEL_191;
  }
  if (v343 != 255)
  {
    if (a1 == a2)
      goto LABEL_191;
    sub_2141E625C(v298 + 240);
    v348 = *((_BYTE *)v299 + 280);
    v349 = *((_QWORD *)v299 + 33);
    *(_QWORD *)(v298 + 264) = v349;
    *(_QWORD *)(v298 + 272) = *((_QWORD *)v299 + 34);
    (**(void (***)(uint64_t, uint64_t))(v349 - 8))(v298 + 240, (uint64_t)(v299 + 15));
    if ((v348 & 1) != 0)
      goto LABEL_188;
    goto LABEL_190;
  }
  sub_2141E625C(v298 + 240);
  v344 = *(__int128 *)((char *)v299 + 265);
  v345 = v299[16];
  *v340 = *v341;
  *(_OWORD *)(v298 + 256) = v345;
  *(_OWORD *)(v298 + 265) = v344;
LABEL_191:
  *(_BYTE *)(v298 + 281) = *((_BYTE *)v299 + 281);
  *(_BYTE *)(v298 + 282) = *((_BYTE *)v299 + 282);
  return a1;
}

uint64_t initializeWithTake for ChartProxy(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x170uLL);
  memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x2C1uLL);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  v5 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v6 = v5[14];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + v5[15]) = *(_QWORD *)(a2 + v5[15]);
  *(_QWORD *)(a1 + v5[16]) = *(_QWORD *)(a2 + v5[16]);
  memcpy((void *)(a1 + v5[17]), (const void *)(a2 + v5[17]), 0x11BuLL);
  return a1;
}

uint64_t assignWithTake for ChartProxy(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;

  v4 = (_BYTE *)(a2 + 316);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  if (a1 != a2)
  {
    sub_2141E0750(a1 + 32, &qword_253F15AE8);
    memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x11CuLL);
  }
  *(_BYTE *)(a1 + 316) = *v4;
  v5 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 320) = v5;
      *(_QWORD *)(a1 + 328) = v6;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v5;
    *(_QWORD *)(a1 + 328) = v7;
    goto LABEL_10;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
LABEL_10:
  v8 = *(_QWORD *)(a2 + 336);
  if (*(_QWORD *)(a1 + 336))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 336) = v8;
      *(_QWORD *)(a1 + 344) = v9;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
  }
  else if (v8)
  {
    v10 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = v8;
    *(_QWORD *)(a1 + 344) = v10;
    goto LABEL_17;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_17:
  v11 = *(_QWORD *)(a2 + 352);
  if (*(_QWORD *)(a1 + 352))
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = v11;
      *(_QWORD *)(a1 + 360) = v12;
      swift_release();
      goto LABEL_24;
    }
    swift_release();
  }
  else if (v11)
  {
    v13 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = v11;
    *(_QWORD *)(a1 + 360) = v13;
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
LABEL_24:
  v14 = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 368))
  {
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = v14;
      *(_QWORD *)(a1 + 376) = v15;
      swift_release();
      goto LABEL_31;
    }
    swift_release();
  }
  else if (v14)
  {
    v16 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = v14;
    *(_QWORD *)(a1 + 376) = v16;
    goto LABEL_31;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
LABEL_31:
  v17 = *(_QWORD *)(a2 + 384);
  if (*(_QWORD *)(a1 + 384))
  {
    if (v17)
    {
      v18 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = v17;
      *(_QWORD *)(a1 + 392) = v18;
      swift_release();
      goto LABEL_38;
    }
    swift_release();
  }
  else if (v17)
  {
    v19 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = v17;
    *(_QWORD *)(a1 + 392) = v19;
    goto LABEL_38;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_38:
  if (*(unsigned __int8 *)(a1 + 504) == 255)
  {
LABEL_41:
    v21 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v21;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    v22 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v22;
    v23 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v23;
    goto LABEL_43;
  }
  v20 = *(unsigned __int8 *)(a2 + 504);
  if (v20 == 255)
  {
    sub_2141E0750(a1 + 400, &qword_253F13368);
    goto LABEL_41;
  }
  v24 = *(_QWORD *)(a2 + 496);
  v25 = *(_QWORD *)(a1 + 400);
  v26 = *(_QWORD *)(a1 + 408);
  v27 = *(_QWORD *)(a1 + 416);
  v28 = *(_QWORD *)(a1 + 424);
  v29 = *(_QWORD *)(a1 + 432);
  v30 = *(_QWORD *)(a1 + 440);
  v31 = *(_QWORD *)(a1 + 448);
  v32 = *(_QWORD *)(a1 + 456);
  v33 = *(_OWORD *)(a1 + 464);
  v34 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v34;
  v35 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v35;
  v36 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v36;
  *(_QWORD *)(a1 + 496) = v24;
  *(_BYTE *)(a1 + 504) = v20 & 1;
  sub_21421BB6C(v25, v26, v27, v28, v29, v30, v31, v32, v33);
LABEL_43:
  if (*(unsigned __int8 *)(a1 + 616) == 255)
  {
LABEL_46:
    v38 = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 592) = v38;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    v39 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v39;
    v40 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v40;
    goto LABEL_48;
  }
  v37 = *(unsigned __int8 *)(a2 + 616);
  if (v37 == 255)
  {
    sub_2141E0750(a1 + 512, &qword_253F13368);
    goto LABEL_46;
  }
  v41 = *(_QWORD *)(a2 + 608);
  v42 = *(_QWORD *)(a1 + 512);
  v43 = *(_QWORD *)(a1 + 520);
  v44 = *(_QWORD *)(a1 + 528);
  v45 = *(_QWORD *)(a1 + 536);
  v46 = *(_QWORD *)(a1 + 544);
  v47 = *(_QWORD *)(a1 + 552);
  v48 = *(_QWORD *)(a1 + 560);
  v49 = *(_QWORD *)(a1 + 568);
  v50 = *(_OWORD *)(a1 + 576);
  v51 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v51;
  v52 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v52;
  v53 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v53;
  *(_QWORD *)(a1 + 608) = v41;
  *(_BYTE *)(a1 + 616) = v37 & 1;
  sub_21421BB6C(v42, v43, v44, v45, v46, v47, v48, v49, v50);
LABEL_48:
  if (*(unsigned __int8 *)(a1 + 720) == 255)
  {
LABEL_51:
    v55 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v55;
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    v56 = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 640) = v56;
    v57 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v57;
    goto LABEL_53;
  }
  v54 = *(unsigned __int8 *)(a2 + 720);
  if (v54 == 255)
  {
    sub_2141E0750(a1 + 624, qword_253F10468);
    goto LABEL_51;
  }
  v58 = *(_QWORD *)(a1 + 624);
  v59 = *(_QWORD *)(a1 + 632);
  v60 = *(_QWORD *)(a1 + 640);
  v61 = *(_QWORD *)(a1 + 648);
  v62 = *(_QWORD *)(a1 + 656);
  v63 = *(_QWORD *)(a1 + 664);
  v64 = *(_QWORD *)(a1 + 672);
  v65 = *(_QWORD *)(a1 + 680);
  v66 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v66;
  v67 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v67;
  v68 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = v68;
  *(_BYTE *)(a1 + 720) = v54 & 1;
  sub_21421B8A0(v58, v59, v60, v61, v62, v63, v64, v65);
LABEL_53:
  if (*(unsigned __int8 *)(a1 + 856) == 255)
  {
LABEL_57:
    v69 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v69;
    *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
    v70 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = v70;
    v71 = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 808) = v71;
    v72 = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 744) = v72;
    goto LABEL_58;
  }
  if (*(unsigned __int8 *)(a2 + 856) == 255 || a1 != a2)
  {
    sub_2141E0750(a1 + 728, &qword_254D695C8);
    goto LABEL_57;
  }
LABEL_58:
  if (*(unsigned __int8 *)(a1 + 968) == 255)
  {
LABEL_61:
    v74 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
    *(_OWORD *)(a1 + 944) = v74;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    v75 = *(_OWORD *)(a2 + 880);
    *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
    *(_OWORD *)(a1 + 880) = v75;
    v76 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
    *(_OWORD *)(a1 + 912) = v76;
    goto LABEL_63;
  }
  v73 = *(unsigned __int8 *)(a2 + 968);
  if (v73 == 255)
  {
    sub_2141E0750(a1 + 864, &qword_253F13368);
    goto LABEL_61;
  }
  v77 = *(_QWORD *)(a2 + 960);
  v78 = *(_QWORD *)(a1 + 864);
  v79 = *(_QWORD *)(a1 + 872);
  v80 = *(_QWORD *)(a1 + 880);
  v81 = *(_QWORD *)(a1 + 888);
  v82 = *(_QWORD *)(a1 + 896);
  v83 = *(_QWORD *)(a1 + 904);
  v84 = *(_QWORD *)(a1 + 912);
  v85 = *(_QWORD *)(a1 + 920);
  v86 = *(_OWORD *)(a1 + 928);
  v87 = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v87;
  v88 = *(_OWORD *)(a2 + 912);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 912) = v88;
  v89 = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
  *(_OWORD *)(a1 + 944) = v89;
  *(_QWORD *)(a1 + 960) = v77;
  *(_BYTE *)(a1 + 968) = v73 & 1;
  sub_21421BB6C(v78, v79, v80, v81, v82, v83, v84, v85, v86);
LABEL_63:
  if (*(unsigned __int8 *)(a1 + 1104) == 255)
  {
LABEL_66:
    v91 = *(_OWORD *)(a2 + 1088);
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)(a1 + 1088) = v91;
    *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
    v92 = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = v92;
    v93 = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = v93;
    v94 = *(_OWORD *)(a2 + 992);
    *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 992) = v94;
    goto LABEL_68;
  }
  v90 = *(unsigned __int8 *)(a2 + 1104);
  if (v90 == 255)
  {
    sub_2141E0750(a1 + 976, &qword_254D695C0);
    goto LABEL_66;
  }
  v95 = *(_QWORD *)(a1 + 976);
  v96 = *(_QWORD *)(a1 + 984);
  v97 = *(_QWORD *)(a1 + 992);
  v98 = *(_QWORD *)(a1 + 1000);
  v99 = *(_QWORD *)(a1 + 1008);
  v100 = *(_QWORD *)(a1 + 1016);
  v101 = *(_QWORD *)(a1 + 1024);
  v102 = *(_QWORD *)(a1 + 1032);
  v103 = *(_OWORD *)(a1 + 1040);
  v104 = *(_OWORD *)(a1 + 1056);
  v105 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 992) = v105;
  v106 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v106;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_BYTE *)(a1 + 1104) = v90 & 1;
  sub_21421BA80(v95, v96, v97, v98, v99, v100, v101, v102, v103, *((uint64_t *)&v103 + 1), v104, BYTE8(v104));
LABEL_68:
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_BYTE *)(a1 + 1144) = v4[828];
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  v107 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v108 = v107[14];
  v109 = a1 + v108;
  v110 = a2 + v108;
  v111 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 40))(v109, v110, v111);
  *(_QWORD *)(a1 + v107[15]) = *(_QWORD *)(a2 + v107[15]);
  swift_release();
  *(_QWORD *)(a1 + v107[16]) = *(_QWORD *)(a2 + v107[16]);
  swift_release();
  v112 = v107[17];
  v113 = a1 + v112;
  v114 = a2 + v112;
  if (*(unsigned __int8 *)(a1 + v112 + 40) == 255)
  {
LABEL_72:
    v115 = *(_OWORD *)(v114 + 16);
    *(_OWORD *)v113 = *(_OWORD *)v114;
    *(_OWORD *)(v113 + 16) = v115;
    *(_OWORD *)(v113 + 25) = *(_OWORD *)(v114 + 25);
    goto LABEL_73;
  }
  if (*(unsigned __int8 *)(v114 + 40) == 255 || a1 != a2)
  {
    sub_2141E61B0(v113);
    goto LABEL_72;
  }
LABEL_73:
  if (*(unsigned __int8 *)(v113 + 88) == 255)
  {
LABEL_77:
    v116 = *(_OWORD *)(v114 + 64);
    *(_OWORD *)(v113 + 48) = *(_OWORD *)(v114 + 48);
    *(_OWORD *)(v113 + 64) = v116;
    *(_OWORD *)(v113 + 73) = *(_OWORD *)(v114 + 73);
    goto LABEL_78;
  }
  if (*(unsigned __int8 *)(v114 + 88) == 255 || a1 != a2)
  {
    sub_2141E625C(v113 + 48);
    goto LABEL_77;
  }
LABEL_78:
  if (*(unsigned __int8 *)(v113 + 136) == 255)
  {
LABEL_82:
    v117 = *(_OWORD *)(v114 + 112);
    *(_OWORD *)(v113 + 96) = *(_OWORD *)(v114 + 96);
    *(_OWORD *)(v113 + 112) = v117;
    *(_OWORD *)(v113 + 121) = *(_OWORD *)(v114 + 121);
    goto LABEL_83;
  }
  if (*(unsigned __int8 *)(v114 + 136) == 255 || a1 != a2)
  {
    sub_2141E61B0(v113 + 96);
    goto LABEL_82;
  }
LABEL_83:
  if (*(unsigned __int8 *)(v113 + 184) == 255)
  {
LABEL_87:
    v118 = *(_OWORD *)(v114 + 160);
    *(_OWORD *)(v113 + 144) = *(_OWORD *)(v114 + 144);
    *(_OWORD *)(v113 + 160) = v118;
    *(_OWORD *)(v113 + 169) = *(_OWORD *)(v114 + 169);
    goto LABEL_88;
  }
  if (*(unsigned __int8 *)(v114 + 184) == 255 || a1 != a2)
  {
    sub_2141E625C(v113 + 144);
    goto LABEL_87;
  }
LABEL_88:
  if (*(unsigned __int8 *)(v113 + 232) == 255)
  {
LABEL_92:
    v119 = *(_OWORD *)(v114 + 208);
    *(_OWORD *)(v113 + 192) = *(_OWORD *)(v114 + 192);
    *(_OWORD *)(v113 + 208) = v119;
    *(_OWORD *)(v113 + 217) = *(_OWORD *)(v114 + 217);
    goto LABEL_93;
  }
  if (*(unsigned __int8 *)(v114 + 232) == 255 || a1 != a2)
  {
    sub_2141E61B0(v113 + 192);
    goto LABEL_92;
  }
LABEL_93:
  if (*(unsigned __int8 *)(v113 + 280) == 255)
  {
LABEL_97:
    v120 = *(_OWORD *)(v114 + 256);
    *(_OWORD *)(v113 + 240) = *(_OWORD *)(v114 + 240);
    *(_OWORD *)(v113 + 256) = v120;
    *(_OWORD *)(v113 + 265) = *(_OWORD *)(v114 + 265);
    goto LABEL_98;
  }
  if (*(unsigned __int8 *)(v114 + 280) == 255 || a1 != a2)
  {
    sub_2141E625C(v113 + 240);
    goto LABEL_97;
  }
LABEL_98:
  *(_BYTE *)(v113 + 281) = *(_BYTE *)(v114 + 281);
  *(_BYTE *)(v113 + 282) = *(_BYTE *)(v114 + 282);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartProxy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142BED40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartModel.Scenegraph();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ChartProxy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142BED88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartModel.Scenegraph();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ChartProxy()
{
  uint64_t result;

  result = qword_253F10650;
  if (!qword_253F10650)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2142BEE04()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ChartModel.Scenegraph();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2142BEE6C(_QWORD *a1)
{
  return sub_2142BEE94(a1, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDF0B60], MEMORY[0x24BDF0B70]);
}

uint64_t sub_2142BEE80(_QWORD *a1)
{
  return sub_2142BEE94(a1, MEMORY[0x24BDF0F40], MEMORY[0x24BDF0F50]);
}

uint64_t sub_2142BEE94(_QWORD *a1, uint64_t (*a2)(uint64_t, _QWORD *), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[4];

  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v12[0] = &type metadata for ChartScenegraphKey;
  v12[1] = v5;
  v12[2] = sub_2142BABA8();
  v12[3] = v7;
  v8 = a2(255, v12);
  v9 = sub_214424110();
  v11[0] = v6;
  v11[1] = MEMORY[0x2199CD934](a3, v8);
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v9, v11);
}

uint64_t sub_2142BEF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142BEF74(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ChartProxy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2142BEFB0(uint64_t a1)
{
  sub_21421BB6C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_OWORD *)(a1 + 64));
  return a1;
}

uint64_t sub_2142BF008(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t *sub_2142BF010(uint64_t *a1)
{
  sub_21421BA80(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

uint64_t *sub_2142BF070(uint64_t *a1)
{
  sub_21421B8A0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

void ChartContent.mask<A>(content:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = a4;
  v18 = a5;
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  a1(v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a2);
  v19 = a2;
  v20 = a3;
  v21 = v17;
  v22 = v18;
  type metadata accessor for ModifiedChartContent_Mask();
}

uint64_t sub_2142BF1AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3 + *(int *)(a1 + 52), v4, v1);
}

_UNKNOWN **sub_2142BF1E4()
{
  return &off_254D6A840;
}

uint64_t sub_2142BF1F0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_2142BF27C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142BF358 + 4 * byte_21442AA10[v17 - 1]))();
}

void sub_2142BF3D4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for ModifiedChartContent_Mask()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_2142BF5E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[10];
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = *a2;
  v12 = a2[1];
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a1;
  v21 = v11;
  v22 = v12;
  swift_retain();
  sub_21421FC18(0, (void (*)(void))sub_2141ED18C, (uint64_t)v15);
  swift_release();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = v11;
  v14[8] = v12;
  swift_retain();
  sub_21421FC18(1, (void (*)(void))sub_2142BF924, (uint64_t)v14);
  return swift_release();
}

__n128 sub_2142BF6A0@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 result;
  uint64_t v24;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  v12 = *a2;
  v13 = *((_QWORD *)a2 + 1);
  v14 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v15 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v16 = *(int *)(v15 + 64);
  v17 = *(_QWORD *)(v14 + v16);
  *(_QWORD *)(v14 + v16) = 0;
  v35 = a3;
  v36 = a4;
  v37 = a5;
  v38 = a6;
  v39 = a1;
  v40 = v12;
  v41 = v13;
  sub_21421FC18(0, (void (*)(void))sub_2141ECF3C, (uint64_t)v34);
  v24 = v42;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a1;
  v32 = v12;
  v33 = v13;
  sub_21421FC18(1, (void (*)(void))sub_2142BF864, (uint64_t)v26);
  v18 = v42;
  *(_QWORD *)(v14 + *(int *)(v15 + 64)) = v17;
  v19 = swift_allocObject();
  v20 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 24);
  sub_2141D8BF8(&qword_253F15D40);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v21 + 32) = v24;
  v22 = swift_allocObject();
  result = (__n128)xmmword_214426EF0;
  *(_OWORD *)(v22 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v22 + 32) = v18;
  *(_QWORD *)(v19 + 16) = v20;
  *(_QWORD *)(v19 + 24) = v21;
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v17;
  *a7 = v19 | 0x1000000000000000;
  return result;
}

uint64_t sub_2142BF844(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_2142BF5E0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

double sub_2142BF854@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_2142BF6A0(a1, a2, a3[2], a3[3], a3[4], a3[5], a4).n128_u64[0];
  return result;
}

void sub_2142BF864()
{
  type metadata accessor for ModifiedChartContent_Mask();
}

uint64_t sub_2142BF8B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v5 = v2 + *(int *)(a1 + 52);
  v7 = v3;
  v8 = v4;
  return (*(uint64_t (**)(uint64_t, char *))(v1 + 40))(v5, &v7);
}

uint64_t sub_2142BF8F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_2142BF924()
{
  type metadata accessor for ModifiedChartContent_Mask();
}

uint64_t sub_2142BF960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v4 = v3 + *(int *)(a1 + 52);
  v6 = *(_OWORD *)(v2 + 56);
  return (*(uint64_t (**)(uint64_t, __int128 *))(v1 + 32))(v4, &v6);
}

void _s8CardinalVwxx(id *a1)
{

}

uint64_t _s8CardinalVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = v3;
  return a1;
}

uint64_t _s8CardinalVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t _s8CardinalVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  return a1;
}

uint64_t _s8CardinalVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s8CardinalVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s8CardinalVMa()
{
  return &_s8CardinalVN;
}

uint64_t sub_2142BFB74()
{
  return sub_214425328();
}

void sub_2142BFBF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 >= 2)
  {
    if (v2 == 2)
      sub_21442531C();
    else
      sub_2142BFC90(*(double *)(v0 + 48), *(double *)(v0 + 56));
  }
  v3 = *(_QWORD *)(v0 + 24);
  if (v3 == 1 || !v3 && *(_QWORD *)(v1 + 16) == 1)
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
  if (__OFSUB__(0, v3))
    __break(1u);
  else
    *(_QWORD *)(v1 + 24) = -v3;
}

__n128 sub_2142BFC90(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = *(_QWORD *)(v2 + 16);
  if (v5 == 1)
  {
    *(_QWORD *)(v2 + 16) = 2;
    *(double *)(v2 + 48) = a1;
    *(double *)(v2 + 56) = a2;
  }
  else if (v5)
  {
    *(_QWORD *)(v2 + 16) = 3;
    sub_2142BFB74();
  }
  else
  {
    *(_QWORD *)(v2 + 16) = 1;
    if (*(_QWORD *)(v2 + 24) == 1)
      sub_21442531C();
    else
      sub_214425310();
  }
  result = *(__n128 *)(v2 + 48);
  v7 = *(_OWORD *)(v2 + 64);
  *(__n128 *)(v2 + 32) = result;
  *(_OWORD *)(v2 + 48) = v7;
  *(double *)(v2 + 64) = a1;
  *(double *)(v2 + 72) = a2;
  return result;
}

int64x2_t sub_2142BFD68()
{
  int64x2_t *v0;
  int64x2_t result;

  v0[1].i64[0] = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  v0[2] = result;
  v0[3] = result;
  v0[4] = result;
  return result;
}

void sub_2142BFD84()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = -1;
}

void sub_2142BFD90()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = 0;
}

id sub_2142BFD9C()
{
  id *v0;

  return *v0;
}

uint64_t sub_2142BFDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v5 = *(_QWORD *)(a5 + 16);
  if (!v5)
    return 0;
  v7 = *(_QWORD *)(a5 + 32);
  v8 = *(_QWORD *)(a5 + 40);
  v30 = *(_BYTE *)(a5 + 48);
  v9 = v5 - 1;
  if (v5 == 1)
  {
    sub_2141DD130(v7, v8, v30);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2141DD130(v7, v8, v30);
    swift_bridgeObjectRetain();
    v10 = a5 + 88;
    do
    {
      v29 = v9;
      v27 = v7;
      v28 = v8;
      v11 = *(_QWORD *)(v10 - 24);
      v12 = *(_QWORD *)(v10 - 16);
      v13 = *(_BYTE *)(v10 - 8);
      v24 = v13;
      v10 += 32;
      sub_2141DD130(v11, v12, v13);
      swift_bridgeObjectRetain();
      v26 = v30 & 1;
      v14 = sub_2144247E8();
      v16 = v15;
      v18 = v17 & 1;
      v25 = sub_2144247E8();
      v20 = v19;
      v30 = v21 & 1;
      sub_2141ED0BC(v27, v28, v26);
      swift_bridgeObjectRelease();
      v22 = v16;
      v8 = v20;
      sub_2141ED0BC(v14, v22, v18);
      swift_bridgeObjectRelease();
      v7 = v25;
      sub_2141ED0BC(v11, v12, v24);
      swift_bridgeObjectRelease();
      v9 = v29 - 1;
    }
    while (v29 != 1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_2142BFFA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;

  v6 = *(_QWORD *)(a5 + 16);
  if (v6 == a6)
    return 0;
  if (v6 <= a6)
    goto LABEL_23;
  v33 = a5 + 32;
  v8 = (uint64_t *)(a5 + 32 + 32 * a6);
  v9 = v8[3];
  if (v9)
  {
    v10 = v8[1];
    v39 = *v8;
    v11 = v8[2];
    v12 = sub_2142C31B4(a6, a5);
    if (v12 == v6)
    {
      sub_2141EF2B4(v39, v10, v11, v9);
      return v39;
    }
    v13 = v12;
    v38 = v11 & 1;
    swift_bridgeObjectRetain();
    result = sub_2141EF2B4(v39, v10, v11, v9);
    v32 = a5 + 88;
    while (1)
    {
      v23 = v39;
      if (v13 >= v6)
        break;
      v24 = (uint64_t *)(v33 + 32 * v13);
      if (!v24[3])
        goto LABEL_24;
      v25 = v10;
      v27 = *v24;
      v26 = v24[1];
      v28 = v24[2];
      v29 = v6;
      if (v13 + 1 != v6)
      {
        v30 = (_QWORD *)(v32 + 32 * v13);
        v29 = v13 + 1;
        while (v29 < (uint64_t)v6)
        {
          if (*v30)
            goto LABEL_8;
          v31 = v29 + 1;
          if (__OFADD__(v29, 1))
            goto LABEL_21;
          ++v29;
          v30 += 4;
          if (v31 == v6)
          {
            v29 = v6;
            goto LABEL_8;
          }
        }
        __break(1u);
LABEL_21:
        __break(1u);
        break;
      }
LABEL_8:
      v35 = v26;
      v37 = v28 & 1;
      sub_2141DD130(v27, v26, v28 & 1);
      swift_bridgeObjectRetain();
      v14 = v38 & 1;
      v15 = sub_2144247E8();
      v34 = v25;
      v17 = v16;
      v19 = v18 & 1;
      v39 = sub_2144247E8();
      v36 = v20;
      v38 = v21 & 1;
      sub_2141ED0BC(v23, v34, v14);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v15, v17, v19);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v27, v35, v37);
      result = swift_bridgeObjectRelease();
      v13 = v29;
      v22 = v29 == v6;
      v10 = v36;
      if (v22)
      {
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2142C0244(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjCClassFromMetadata;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  _BYTE v44[12];
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;

  v57 = sub_214424218();
  v8 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v10 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = MEMORY[0x24BEE4AF8];
  v12 = (uint64_t *)(v11 + 16);
  sub_2142C1E7C(a1, v11);
  swift_beginAccess();
  v13 = *v12;
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_23;
  v54 = a2;
  v55 = a3;
  v56 = a4;
  v14 = *(_OWORD *)(v13 + 176);
  v65 = *(_OWORD *)(v13 + 160);
  v66 = v14;
  v67 = *(_OWORD *)(v13 + 192);
  v68 = *(_BYTE *)(v13 + 208);
  v15 = *(_OWORD *)(v13 + 112);
  v61 = *(_OWORD *)(v13 + 96);
  v62 = v15;
  v16 = *(_OWORD *)(v13 + 144);
  v63 = *(_OWORD *)(v13 + 128);
  v64 = v16;
  v17 = *(_OWORD *)(v13 + 48);
  v58[0] = *(_OWORD *)(v13 + 32);
  v58[1] = v17;
  v18 = *(_OWORD *)(v13 + 80);
  v59 = *(_OWORD *)(v13 + 64);
  v60 = v18;
  v19 = v58[0];
  v53 = v62;
  v48 = *((_QWORD *)&v62 + 1);
  v52 = v63;
  v51 = BYTE8(v63);
  v50 = v64;
  v47 = v65;
  v46 = *((_QWORD *)&v64 + 1);
  v49 = BYTE8(v65);
  if (SBYTE8(v18) < 0)
  {
    v22 = BYTE8(v18) & 1;
    sub_214251C5C((uint64_t)v58);
  }
  else
  {
    v45 = LOBYTE(v58[0]);
    v20 = *((_QWORD *)&v59 + 1);
    v21 = v60;
    if (BYTE8(v18))
    {
      if (BYTE8(v18) == 1)
      {
        sub_214251C5C((uint64_t)v58);
        v22 = 1;
        sub_2141EF1B0(v20, v21, 1);
      }
      else
      {
        sub_214251C5C((uint64_t)v58);
        v22 = 2;
      }
    }
    else
    {
      sub_214251C5C((uint64_t)v58);
      sub_2141EF1B0(v20, v21, 0);
      v22 = 0;
    }
    v19 = v45;
  }
  sub_21442420C();
  v23 = sub_2144247A0();
  v25 = v24;
  v26 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v26(v10, v57);
  v27 = v54;
  v28 = v55;
  v29 = v56;
  v30 = sub_2142C07E8(v19, v22, v23, v25, v54, v55, v56);
  swift_bridgeObjectRelease();
  if (!v30)
  {
    swift_bridgeObjectRelease();
    sub_214251D30((uint64_t)v58);
    return 0;
  }
  v31 = v49;
  if ((char)v49 < 0)
  {
    v31 = v49 & 1;
  }
  else if (v49)
  {
    if (v49 == 1)
    {
      v31 = 1;
      sub_2141EF1B0(v46, v47, 1);
    }
  }
  else
  {
    sub_2141EF1B0(v46, v47, 0);
    v31 = 0;
  }
  sub_21442420C();
  v32 = sub_2144247A0();
  v34 = v33;
  v26(v10, v57);
  v35 = sub_2142C07E8(v53, v31, v32, v34, v27, v28, v29);
  swift_bridgeObjectRelease();
  if (!v35)
  {
    swift_unknownObjectRelease();
    sub_214251D30((uint64_t)v58);
LABEL_23:
    swift_bridgeObjectRelease();
    return 0;
  }
  objc_opt_self();
  if (!swift_dynamicCastObjCClass())
  {
    swift_unknownObjectRelease();
    sub_214251D30((uint64_t)v58);
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  v36 = sub_21424F838(v13);
  v37 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v37);
  *(_QWORD *)&v44[-16] = v29;
  sub_2142C3234(v36, (void (*)(_QWORD *, uint64_t))sub_2142C2134);
  swift_bridgeObjectRelease();
  sub_2142C3588(0, &qword_253F12270);
  type metadata accessor for FindClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v39 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v40 = (void *)sub_214424EE4();
  v41 = objc_msgSend(v39, sel_localizedStringForKey_value_table_, v40, 0, 0);

  sub_214424EF0();
  v42 = sub_214425334();
  sub_214251D30((uint64_t)v58);
  return v42;
}

uint64_t sub_2142C07C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_2142C07E8(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[40];
  unsigned __int8 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  _OWORD v51[2];
  uint64_t v52;
  char v53;
  _BYTE v54[128];
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;

  sub_2142C138C(a1, a2, a5, a6, (uint64_t)v54);
  sub_2141E801C((uint64_t)v54, (uint64_t)v55, &qword_253F121D8);
  if (sub_2142C352C((uint64_t)v55) == 1)
    return 0;
  v43 = v58;
  v42 = v59;
  v40 = v55[1];
  v41 = v60;
  v10 = v62;
  v44 = v61;
  v11 = v63;
  if (!a2)
  {
    if ((v63 & 1) == 0 && !v64)
    {
      v36 = v55[0];
      v38 = v57;
      v34 = v56;
      if (*(_QWORD *)(a7 + 16) && (v25 = sub_214336B74(a1), (v26 & 1) != 0))
      {
        sub_21422F3FC(*(_QWORD *)(a7 + 56) + 48 * v25, (uint64_t)&v47);
      }
      else
      {
        v49 = 0;
        v47 = 0u;
        v48 = 0u;
        v50 = -1;
      }
      v28 = v43;
      v27 = v44;
      v30 = v41;
      v29 = v42;
      sub_2142C3540((uint64_t)&v47, (uint64_t)v45);
      if (v46 != 255)
        goto LABEL_26;
      goto LABEL_27;
    }
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    if ((v63 & 1) == 0 && v64 == 1)
    {
      v36 = v55[0];
      v38 = v57;
      v34 = v56;
      if (*(_QWORD *)(a7 + 16) && (v12 = sub_214336B74(a1), (v13 & 1) != 0))
      {
        sub_21422F3FC(*(_QWORD *)(a7 + 56) + 48 * v12, (uint64_t)&v47);
      }
      else
      {
        v49 = 0;
        v47 = 0u;
        v48 = 0u;
        v50 = -1;
      }
      v28 = v43;
      v27 = v44;
      v30 = v41;
      v29 = v42;
      sub_2142C3540((uint64_t)&v47, (uint64_t)v45);
      if (v46 != 255)
      {
LABEL_26:
        sub_21422F3C0((uint64_t)v45, (uint64_t)v51);
        swift_retain();
        sub_2141DD47C(v28);
        v31 = v30;
        swift_bridgeObjectRetain();
        v32 = v10;
        sub_2141E83DC(v27, v10);
LABEL_28:
        sub_2141E0750((uint64_t)&v47, &qword_253F146B8);
        sub_2142E95B8(v31);
        sub_2142C3588(0, &qword_253F12278);
        sub_21422F3FC((uint64_t)v51, (uint64_t)&v47);
        v33 = swift_allocObject();
        sub_21422F3C0((uint64_t)&v47, v33 + 16);
        swift_bridgeObjectRetain();
        v20 = (id)sub_214425358();
        sub_21421BB6C(v36, v40, v34, v38, v43, v29, v31, v44, v32);
        sub_21421BB6C(v36, v40, v34, v38, v43, v29, v41, v44, v32);
        sub_21422F27C((uint64_t)v51);
        return v20;
      }
LABEL_27:
      v52 = 0;
      memset(v51, 0, sizeof(v51));
      v53 = 3;
      swift_retain();
      sub_2141DD47C(v43);
      v31 = v41;
      swift_bridgeObjectRetain();
      v32 = v10;
      sub_2141E83DC(v44, v10);
      sub_2141E0750((uint64_t)v45, &qword_253F146B8);
      goto LABEL_28;
    }
LABEL_14:
    v17 = v55[0];
    v18 = v57;
    v19 = v56;
    swift_bridgeObjectRelease();
    sub_21421BB6C(v17, v40, v19, v18, v43, v42, v41, v44, v10);
    return 0;
  }
  v14 = v55[0];
  v15 = v56;
  v16 = v57;
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    v35 = objc_allocWithZone(MEMORY[0x24BDB3D58]);
    v39 = v16;
    v37 = v14;
    v22 = v16;
    sub_21421BAE4(v14, v40, v15, v16, v43, v42, v41, v44, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = (void *)sub_214424EE4();
    swift_bridgeObjectRelease();
    v24 = (void *)sub_214424FD4();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v35, sel_initWithTitle_categoryOrder_, v23, v24);

    sub_21421BB6C(v37, v40, v15, v22, v43, v42, v41, v44, v10);
    sub_21421BB6C(v37, v40, v15, v39, v43, v42, v41, v44, v10);
    return v20;
  }
  sub_21421BB6C(v14, v40, v15, v16, v43, v42, v41, v44, v10);
  return 0;
}

id sub_2142C0EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_214424218();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_2142C3364(v10, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v11 + 16);
  v34 = a1;
  v35 = a2;
  v32 = v7;
  v33 = v6;
  v13 = 0;
  if (v12)
  {
    v14 = (uint64_t *)(v11 + 56);
    while (1)
    {
      v15 = *v14;
      v14 += 4;
      if (v15)
        break;
      if (v12 == ++v13)
        goto LABEL_7;
    }
  }
  if (v13 == v12)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    v16 = sub_2142BFFA8(32, 0xE100000000000000, 0, MEMORY[0x24BEE4AF8], v11, v13);
    v21 = v22;
    v24 = v23;
    v26 = v25;
    swift_bridgeObjectRelease_n();
    v17 = v24 & 1;
    v18 = v21;
    v19 = v24 & 1;
    v20 = v26;
  }
  sub_2141EF2B4(v16, v18, v19, v20);
  sub_21442420C();
  v27 = sub_2144247A0();
  v29 = v28;
  sub_2141ED0BC(v16, v21, v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  v30 = sub_2142C110C(v27, v29, *(_BYTE *)(v34 + 40), v35);
  swift_bridgeObjectRelease();
  sub_21422F7F0(v16, v18, v19, v20);
  return v30;
}

id sub_2142C110C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v17;

  v4 = a3;
  v17 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (unsigned __int8 *)(a4 + 88);
    do
    {
      if (v7[80] <= 1u)
      {
        v8 = *((_QWORD *)v7 - 2);
        v9 = *((_QWORD *)v7 - 1);
        v10 = *v7;
        if ((v10 & 0x80) != 0 || v10 < 2)
        {
          sub_2142C3588(0, &qword_253F12268);
          sub_2144252D4();
        }
        else
        {
          sub_2142C3588(0, &qword_253F12268);
          sub_2141DD14C(v8, v9, 2);
          sub_2144252C8();
        }
        MEMORY[0x2199CC8E4]();
        if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21442501C();
        sub_214425064();
        sub_214424FF8();
      }
      v7 += 184;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v4 = a3;
  }
  v11 = objc_allocWithZone(MEMORY[0x24BDB3D80]);
  swift_bridgeObjectRetain();
  v12 = (void *)sub_214424EE4();
  swift_bridgeObjectRelease();
  sub_2142C3588(0, &qword_253F12268);
  v13 = (void *)sub_214424FD4();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, sel_initWithName_isContinuous_dataPoints_, v12, v4 & 1, v13);

  return v14;
}

char *sub_2142C138C@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *result;
  unsigned __int8 *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[13];
  char v109;
  char *v110;
  char v111;
  _BYTE v112[136];

  if (!*(_QWORD *)(a3 + 16)
    || (v10 = sub_214336B74(a1), (v11 & 1) == 0)
    || (v12 = *(_QWORD *)(a3 + 56) + 112 * v10, v13 = *(unsigned __int8 *)(v12 + 104), v13 == 255))
  {
    sub_2142C3610((uint64_t)v108);
    sub_2141E801C((uint64_t)v108, (uint64_t)v112, &qword_253F121D8);
    return (char *)sub_2141E801C((uint64_t)v112, a5, &qword_253F121D8);
  }
  v102 = *(_QWORD *)v12;
  v103 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v12 + 24);
  v107 = *(_QWORD *)(v12 + 16);
  v15 = *(_QWORD *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 40);
  v17 = *(_QWORD *)(v12 + 48);
  v99 = a5;
  v100 = *(_QWORD *)(v12 + 56);
  v18 = *(_QWORD *)(v12 + 64);
  v20 = *(_QWORD *)(v12 + 80);
  v19 = *(_QWORD *)(v12 + 88);
  v21 = *(_QWORD *)(v12 + 96);
  v104 = v14;
  v105 = *(_QWORD *)(v12 + 72);
  v106 = v18;
  v101 = v20;
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_12;
  v95 = *(_QWORD *)(v12 + 40);
  v96 = *(_QWORD *)(v12 + 32);
  v97 = *(_QWORD *)(v12 + 88);
  v98 = *(_QWORD *)(v12 + 48);
  v94 = *(_QWORD *)(v12 + 96);
  v22 = sub_214336B74(a1);
  v21 = v94;
  v19 = v97;
  v17 = v98;
  LOBYTE(v18) = v106;
  if ((v23 & 1) == 0)
  {
LABEL_12:
    v31 = a2;
    if (a2)
    {
      v33 = v102;
      v32 = v103;
      v48 = v14;
      v49 = v15;
      v50 = v15;
      v51 = v16;
      v52 = v16;
      v53 = v17;
      v54 = v100;
      v55 = v107;
      v56 = v19;
      v57 = v21;
      if (v31 == 1)
      {
        sub_21421BAE4(v102, v103, v107, v48, v50, v52, v17, v100, v18);
        v59 = v57;
        v60 = v101;
        v62 = v105;
        v61 = v106;
        v63 = 1;
      }
      else
      {
        sub_21421BAE4(v102, v103, v107, v48, v50, v52, v17, v100, v18);
        v59 = v57;
        v60 = v101;
        v62 = v105;
        v61 = v106;
        v63 = 2;
      }
    }
    else
    {
      v33 = v102;
      v32 = v103;
      v55 = v107;
      v44 = v14;
      v49 = v15;
      v45 = v15;
      v51 = v16;
      v46 = v16;
      v53 = v17;
      v54 = v100;
      v56 = v19;
      v47 = v21;
      sub_21421BAE4(v102, v103, v107, v44, v45, v46, v17, v100, v18);
      v59 = v47;
      v60 = v101;
      v62 = v105;
      v61 = v106;
      v63 = 0;
    }
    v64 = v104;
    v29 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_82;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v22);
  if (!a2)
  {
    v65 = *(_QWORD *)(v24 + 16);
    v90 = v13;
    if (!v65)
    {
      v33 = v102;
      v32 = v103;
      v54 = v100;
      sub_21421BAE4(v102, v103, v107, v14, v15, v16, v98, v100, v106);
      v29 = (char *)MEMORY[0x24BEE4AF8];
LABEL_78:
      v63 = 0;
      goto LABEL_79;
    }
    sub_21421C7C0(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    v66 = v107;
    sub_21421C7C0(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    result = (char *)swift_bridgeObjectRetain();
    v67 = (unsigned __int8 *)(v24 + 40);
    v29 = (char *)MEMORY[0x24BEE4AF8];
    v68 = (unsigned __int8 *)(v24 + 40);
    while (1)
    {
      v69 = *v68;
      v68 += 16;
      if (v69)
        goto LABEL_39;
      v70 = *((_QWORD *)v67 - 1);
      v71 = *(_QWORD *)(v70 + 16);
      v72 = *((_QWORD *)v29 + 2);
      v73 = v72 + v71;
      if (__OFADD__(v72, v71))
        goto LABEL_88;
      swift_bridgeObjectRetain();
      result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v73 <= *((_QWORD *)v29 + 3) >> 1)
      {
        if (*(_QWORD *)(v70 + 16))
          goto LABEL_50;
      }
      else
      {
        if (v72 <= v73)
          v74 = v72 + v71;
        else
          v74 = v72;
        result = sub_214224AE0(result, v74, 1, v29);
        v29 = result;
        if (*(_QWORD *)(v70 + 16))
        {
LABEL_50:
          v75 = *((_QWORD *)v29 + 2);
          if ((*((_QWORD *)v29 + 3) >> 1) - v75 < v71)
            goto LABEL_91;
          result = (char *)memcpy(&v29[8 * v75 + 32], (const void *)(v70 + 32), 8 * v71);
          if (v71)
          {
            v76 = *((_QWORD *)v29 + 2);
            v42 = __OFADD__(v76, v71);
            v77 = v76 + v71;
            if (v42)
              goto LABEL_94;
            *((_QWORD *)v29 + 2) = v77;
          }
          goto LABEL_38;
        }
      }
      if (v71)
        goto LABEL_87;
LABEL_38:
      result = (char *)swift_bridgeObjectRelease();
      v66 = v107;
LABEL_39:
      v67 = v68;
      if (!--v65)
      {
        swift_bridgeObjectRelease();
        v33 = v102;
        v32 = v103;
        v54 = v100;
        sub_21421BB38(v102, v103, v66, v104, v96, v95, v98, v100, v106, v105, v20, v97, v94, v92);
        goto LABEL_78;
      }
    }
  }
  if (a2 != 1)
  {
    v78 = *(_QWORD *)(v24 + 16);
    if (!v78)
    {
      v33 = v102;
      v32 = v103;
      v54 = v100;
      sub_21421BAE4(v102, v103, v107, v14, v15, v16, v98, v100, v106);
      v29 = (char *)MEMORY[0x24BEE4AF8];
LABEL_81:
      v63 = 2;
      v64 = v104;
      v62 = v105;
      v51 = v95;
      v49 = v96;
      v56 = v97;
      v53 = v98;
      v61 = v106;
      v55 = v107;
      v60 = v101;
      v59 = v94;
      goto LABEL_82;
    }
    v79 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v22);
    sub_21421C7C0(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    sub_21421C7C0(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    result = (char *)swift_bridgeObjectRetain();
    v80 = (unsigned __int8 *)(v79 + 40);
    v29 = (char *)MEMORY[0x24BEE4AF8];
    v81 = (unsigned __int8 *)(v79 + 40);
    while (1)
    {
      v82 = *v81;
      v81 += 16;
      if (v82 != 2)
        goto LABEL_58;
      v83 = *((_QWORD *)v80 - 1);
      v84 = *(_QWORD *)(v83 + 16);
      v85 = *((_QWORD *)v29 + 2);
      v86 = v85 + v84;
      if (__OFADD__(v85, v84))
        goto LABEL_86;
      swift_bridgeObjectRetain();
      result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v86 <= *((_QWORD *)v29 + 3) >> 1)
      {
        if (*(_QWORD *)(v83 + 16))
          goto LABEL_69;
      }
      else
      {
        if (v85 <= v86)
          v87 = v85 + v84;
        else
          v87 = v85;
        result = sub_214221AF8(result, v87, 1, v29);
        v29 = result;
        if (*(_QWORD *)(v83 + 16))
        {
LABEL_69:
          if ((*((_QWORD *)v29 + 3) >> 1) - *((_QWORD *)v29 + 2) < v84)
            goto LABEL_90;
          result = (char *)swift_arrayInitWithCopy();
          if (v84)
          {
            v88 = *((_QWORD *)v29 + 2);
            v42 = __OFADD__(v88, v84);
            v89 = v88 + v84;
            if (v42)
              goto LABEL_93;
            *((_QWORD *)v29 + 2) = v89;
          }
          goto LABEL_57;
        }
      }
      if (v84)
        goto LABEL_85;
LABEL_57:
      result = (char *)swift_bridgeObjectRelease();
LABEL_58:
      v80 = v81;
      if (!--v78)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v13) = v93;
        v33 = v102;
        v32 = v103;
        v54 = v100;
        sub_21421BB38(v102, v103, v107, v104, v96, v95, v98, v100, v106, v105, v20, v97, v94, v93);
        goto LABEL_81;
      }
    }
  }
  v25 = *(_QWORD *)(v24 + 16);
  v90 = v13;
  if (!v25)
  {
    v33 = v102;
    v32 = v103;
    v54 = v100;
    sub_21421BAE4(v102, v103, v107, v14, v15, v16, v98, v100, v106);
    v29 = (char *)MEMORY[0x24BEE4AF8];
    v63 = 1;
LABEL_79:
    v64 = v104;
    v62 = v105;
    v51 = v95;
    v49 = v96;
    v56 = v97;
    v53 = v98;
    v61 = v106;
    v55 = v107;
    v60 = v101;
    v59 = v94;
    LOBYTE(v13) = v90;
LABEL_82:
    v108[0] = v33;
    v108[1] = v32;
    v108[2] = v55;
    v108[3] = v64;
    v108[4] = v49;
    v108[5] = v51;
    v108[6] = v53;
    v108[7] = v54;
    v108[8] = v61;
    v108[9] = v62;
    v108[10] = v60;
    v108[11] = v56;
    v108[12] = v59;
    v109 = v13 & 1;
    v110 = v29;
    v111 = v63;
    nullsub_1(v108, v58);
    sub_2141E801C((uint64_t)v108, (uint64_t)v112, &qword_253F121D8);
    a5 = v99;
    return (char *)sub_2141E801C((uint64_t)v112, a5, &qword_253F121D8);
  }
  sub_21421C7C0(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
  v26 = v107;
  sub_21421C7C0(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
  result = (char *)swift_bridgeObjectRetain();
  v28 = (unsigned __int8 *)(v24 + 40);
  v29 = (char *)MEMORY[0x24BEE4AF8];
  v30 = (unsigned __int8 *)(v24 + 40);
  while (1)
  {
    v34 = *v30;
    v30 += 16;
    if (v34 != 1)
      goto LABEL_18;
    v35 = *((_QWORD *)v28 - 1);
    v36 = *(_QWORD *)(v35 + 16);
    v37 = *((_QWORD *)v29 + 2);
    v38 = v37 + v36;
    if (__OFADD__(v37, v36))
      goto LABEL_84;
    swift_bridgeObjectRetain();
    result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v38 <= *((_QWORD *)v29 + 3) >> 1)
    {
      if (*(_QWORD *)(v35 + 16))
        goto LABEL_29;
    }
    else
    {
      if (v37 <= v38)
        v39 = v37 + v36;
      else
        v39 = v37;
      result = sub_214224AE0(result, v39, 1, v29);
      v29 = result;
      if (*(_QWORD *)(v35 + 16))
      {
LABEL_29:
        v40 = *((_QWORD *)v29 + 2);
        if ((*((_QWORD *)v29 + 3) >> 1) - v40 < v36)
          goto LABEL_89;
        result = (char *)memcpy(&v29[8 * v40 + 32], (const void *)(v35 + 32), 8 * v36);
        if (v36)
        {
          v41 = *((_QWORD *)v29 + 2);
          v42 = __OFADD__(v41, v36);
          v43 = v41 + v36;
          if (v42)
            goto LABEL_92;
          *((_QWORD *)v29 + 2) = v43;
        }
        goto LABEL_17;
      }
    }
    if (v36)
      break;
LABEL_17:
    result = (char *)swift_bridgeObjectRelease();
    v26 = v107;
LABEL_18:
    v28 = v30;
    if (!--v25)
    {
      swift_bridgeObjectRelease();
      v33 = v102;
      v32 = v103;
      v54 = v100;
      sub_21421BB38(v102, v103, v26, v104, v96, v95, v98, v100, v106, v105, v20, v97, v94, v91);
      v63 = 1;
      goto LABEL_79;
    }
  }
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
  return result;
}

uint64_t sub_2142C1CD0(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD v12[2];
  uint64_t v13;
  double v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 v18;

  v4 = sub_214423B94();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2141D8BF8(qword_253F13A80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21422F3FC(a1, (uint64_t)&v15);
  if (v18 - 1 >= 2)
  {
    if (v18)
    {
      v14 = a2;
      sub_214423B7C();
      sub_2142B585C();
      sub_21442396C();
      sub_2142B58A0();
      sub_214424D04();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return *(_QWORD *)&v12[0];
    }
    else
    {
      v12[0] = v15;
      v12[1] = v16;
      v13 = v17;
      v14 = a2;
      v10 = sub_2141E88D0(v12, *((uint64_t *)&v16 + 1));
      v9 = sub_2143F54C0((uint64_t)v10, (uint64_t)&v14, MEMORY[0x24BEE13C8]);
      sub_2141E0750((uint64_t)v12, qword_253F12450);
    }
  }
  else
  {
    sub_21422F27C((uint64_t)&v15);
    return 0;
  }
  return v9;
}

uint64_t sub_2142C1E7C(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[76];

  v4 = type metadata accessor for SgGroup(0);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  switch(a1 >> 60)
  {
    case 0uLL:
      v8 = swift_projectBox();
      sub_21423145C(v8, (uint64_t)v7);
      v9 = *((_QWORD *)v7 + 1);
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        swift_bridgeObjectRetain();
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)(v9 + 8 * v11++ + 32);
          swift_retain();
          sub_2142C1E7C(v12, a2);
          swift_release();
        }
        while (v10 != v11);
        swift_bridgeObjectRelease();
      }
      result = sub_2142314A0((uint64_t)v7);
      break;
    case 1uLL:
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        swift_bridgeObjectRetain();
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(v13 + 8 * v15++ + 32);
          swift_retain();
          sub_2142C1E7C(v16, a2);
          swift_release();
        }
        while (v14 != v15);
        result = swift_bridgeObjectRelease();
      }
      break;
    case 2uLL:
      sub_2141FE108((_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), (uint64_t)v26);
      v17 = v26[1];
      v18 = *(_QWORD *)(v26[1] + 16);
      if (v18)
      {
        swift_bridgeObjectRetain();
        v19 = 0;
        do
        {
          v20 = *(_QWORD *)(v17 + 8 * v19++ + 32);
          swift_retain();
          sub_2142C1E7C(v20, a2);
          swift_release();
        }
        while (v18 != v19);
        swift_bridgeObjectRelease();
      }
      result = sub_2141FE470((uint64_t)v26);
      break;
    case 0xBuLL:
      result = (uint64_t)memcpy(v26, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x120uLL);
      v21 = v26[34];
      v22 = *(_QWORD *)(v26[34] + 16);
      if (v22)
      {
        swift_bridgeObjectRetain();
        sub_21422F5A0((uint64_t)v26);
        v23 = 0;
        do
        {
          v24 = *(_QWORD *)(v21 + 8 * v23++ + 32);
          swift_retain();
          sub_2142C1E7C(v24, a2);
          swift_release();
        }
        while (v22 != v23);
        sub_21422F6C8((uint64_t)v26);
        result = swift_bridgeObjectRelease();
      }
      break;
    case 0xCuLL:
      memcpy(v26, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), sizeof(v26));
      swift_beginAccess();
      sub_2142302F8((uint64_t)v26);
      sub_2142C213C((uint64_t)v26, (char **)(a2 + 16));
      result = sub_2142305C0((uint64_t)v26);
      break;
    default:
      return result;
  }
  return result;
}

id sub_2142C2134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142C0EFC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_2142C213C(uint64_t a1, char **a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  uint64_t result;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  _BYTE v139[152];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  _QWORD v152[19];
  uint64_t v153;
  uint64_t v154;
  _BYTE v155[152];
  _QWORD v156[19];
  _BYTE v157[152];
  _QWORD v158[19];
  _BYTE v159[152];
  _QWORD v160[20];

  sub_2141E801C(a1 + 128, (uint64_t)v159, &qword_253F13428);
  sub_2141E801C((uint64_t)v159, (uint64_t)v160, &qword_253F13428);
  if (sub_21422C64C(v160) != 1)
  {
    sub_2141EF6B8((uint64_t)v160, (uint64_t)&v140);
    if (sub_21421C2FC((uint64_t)&v140) != 1)
    {
      v2 = (unsigned __int8 *)sub_21421C308((uint64_t)&v140);
      v108 = *v2;
      v106 = *((_QWORD *)v2 + 2);
      v107 = *((_QWORD *)v2 + 1);
      v105 = v2[24];
      v109 = *((_QWORD *)v2 + 4);
      v103 = *((_QWORD *)v2 + 6);
      v104 = *((_QWORD *)v2 + 5);
      v102 = v2[56];
      v100 = *((_QWORD *)v2 + 9);
      v101 = *((_QWORD *)v2 + 8);
      sub_2141E801C((uint64_t)v159, (uint64_t)v158, &qword_253F13428);
      sub_21421C318(v158, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      goto LABEL_6;
    }
    sub_21421C308((uint64_t)&v140);
  }
  v107 = 0;
  v108 = 0;
  v105 = 0;
  v106 = 0;
  v109 = 0;
  v103 = 0;
  v104 = 0;
  v101 = 0;
  v102 = 0;
  v100 = 0;
LABEL_6:
  sub_2141E801C(a1 + 440, (uint64_t)v155, &qword_253F13428);
  sub_2141E801C((uint64_t)v155, (uint64_t)v156, &qword_253F13428);
  if (sub_21422C64C(v156) == 1
    || (sub_2141EF6B8((uint64_t)v156, (uint64_t)v157),
        sub_2141EF6B8((uint64_t)v157, (uint64_t)v158),
        v3 = sub_21421C2FC((uint64_t)v158),
        v4 = sub_21421C308((uint64_t)v158),
        v3 == 1))
  {
    v132 = (char *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v5 = *(_BYTE *)v4;
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(_BYTE *)(v4 + 24);
    v10 = *(_QWORD *)(v4 + 32);
    v9 = *(_QWORD *)(v4 + 40);
    v11 = *(_QWORD *)(v4 + 48);
    v12 = *(_BYTE *)(v4 + 56);
    v135 = *(_OWORD *)(v4 + 64);
    sub_21422F2B0((uint64_t)v155, (uint64_t (*)(void))sub_21420B7DC);
    sub_21422F2B0((uint64_t)v155, (uint64_t (*)(void))sub_21420B7DC);
    sub_2141DD130(v6, v7, v8);
    swift_bridgeObjectRetain();
    sub_2141DD140(v9, v11, v12);
    v13 = sub_214225F04(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v15 = *((_QWORD *)v13 + 2);
    v14 = *((_QWORD *)v13 + 3);
    v132 = v13;
    if (v15 >= v14 >> 1)
      v132 = sub_214225F04((char *)(v14 > 1), v15 + 1, 1, v13);
    *((_QWORD *)v132 + 2) = v15 + 1;
    v16 = &v132[80 * v15];
    v16[32] = v5;
    *((_QWORD *)v16 + 5) = v6;
    *((_QWORD *)v16 + 6) = v7;
    v16[56] = v8;
    *((_QWORD *)v16 + 8) = v10;
    *((_QWORD *)v16 + 9) = v9;
    *((_QWORD *)v16 + 10) = v11;
    v16[88] = v12;
    *((_OWORD *)v16 + 6) = v135;
    sub_2141ED0BC(v6, v7, v8);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v9, v11, v12);
    sub_21422F2B0((uint64_t)v155, (uint64_t (*)(void))sub_2141EF5D4);
  }
  v17 = *(_QWORD *)(a1 + 120);
  v154 = v17;
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v19 = v17 + 32;
    swift_bridgeObjectRetain();
    v111 = (char *)MEMORY[0x24BEE4AF8];
    for (i = v18 - 1; ; --i)
    {
      sub_2141EF6B8(v19, (uint64_t)v152);
      sub_2141EF6B8((uint64_t)v152, (uint64_t)&v140);
      v21 = sub_21421C2FC((uint64_t)&v140);
      v22 = sub_21421C308((uint64_t)&v140);
      if (v21 == 1)
        goto LABEL_29;
      v130 = *(_BYTE *)v22;
      v23 = *(_QWORD *)(v22 + 8);
      v24 = *(_QWORD *)(v22 + 16);
      v25 = *(_BYTE *)(v22 + 24);
      v27 = *(_QWORD *)(v22 + 32);
      v26 = *(_QWORD *)(v22 + 40);
      v28 = *(_QWORD *)(v22 + 48);
      v29 = *(unsigned __int8 *)(v22 + 56);
      v133 = *(_QWORD *)(v22 + 64);
      v136 = *(_QWORD *)(v22 + 72);
      if (*(char *)(v22 + 56) < 0)
        goto LABEL_23;
      if (v29 >= 2)
        break;
      sub_2141DD130(v23, v24, v25);
      swift_bridgeObjectRetain();
      sub_2141DD130(v23, v24, v25);
      swift_bridgeObjectRetain();
      sub_21421C318(v152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      v124 = v26;
      v121 = v28;
      sub_2141EF1B0(v26, v28, v29);
      sub_2141EF6B8((uint64_t)v152, (uint64_t)v139);
      v30 = sub_21421C308((uint64_t)v139);
      v31 = *(_QWORD *)(v30 + 40);
      v32 = *(_QWORD *)(v30 + 48);
      v33 = *(_BYTE *)(v30 + 56);
      v115 = *(_QWORD *)(v30 + 16);
      v117 = *(_QWORD *)(v30 + 8);
      v114 = *(_BYTE *)(v30 + 24);
      sub_2141DD130(v117, v115, v114);
      swift_bridgeObjectRetain();
      v127 = v31;
      sub_2141DD140(v31, v32, v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v111 = sub_214225F04(0, *((_QWORD *)v111 + 2) + 1, 1, v111);
      v35 = *((_QWORD *)v111 + 2);
      v34 = *((_QWORD *)v111 + 3);
      v36 = v35 + 1;
      if (v35 >= v34 >> 1)
      {
        v49 = sub_214225F04((char *)(v34 > 1), v35 + 1, 1, v111);
        v36 = v35 + 1;
        v111 = v49;
      }
      *((_QWORD *)v111 + 2) = v36;
      v37 = &v111[80 * v35];
      v37[32] = v130;
      *((_QWORD *)v37 + 5) = v23;
      *((_QWORD *)v37 + 6) = v24;
      v37[56] = v25;
      *((_QWORD *)v37 + 8) = v27;
      *((_QWORD *)v37 + 9) = v124;
      *((_QWORD *)v37 + 10) = v121;
      v37[88] = v29;
      *((_QWORD *)v37 + 12) = v133;
      *((_QWORD *)v37 + 13) = v136;
      sub_2141ED0BC(v23, v24, v25);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v124, v121, v29);
      sub_21421C318(v152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      sub_2141ED0BC(v117, v115, v114);
      swift_bridgeObjectRelease();
      v39 = v32;
      v38 = v127;
      v40 = v33;
LABEL_28:
      sub_2141EF1B0(v38, v39, v40);
LABEL_29:
      if (!i)
      {
        sub_2141F9244((uint64_t)&v154);
        goto LABEL_33;
      }
      v19 += 152;
    }
    sub_2141DD14C(v26, v28, 2);
    swift_bridgeObjectRetain();
LABEL_23:
    v128 = v29;
    sub_2141DD130(v23, v24, v25);
    swift_bridgeObjectRetain();
    sub_21421C318(v152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_2141DD130(v23, v24, v25);
    swift_bridgeObjectRetain();
    sub_21421C318(v152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    v41 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v132 = sub_214225F04(0, *((_QWORD *)v132 + 2) + 1, 1, v132);
    v43 = *((_QWORD *)v132 + 2);
    v42 = *((_QWORD *)v132 + 3);
    if (v43 >= v42 >> 1)
      v132 = sub_214225F04((char *)(v42 > 1), v43 + 1, 1, v132);
    *((_QWORD *)v132 + 2) = v43 + 1;
    v44 = &v132[80 * v43];
    v44[32] = v130;
    *((_QWORD *)v44 + 5) = v23;
    *((_QWORD *)v44 + 6) = v24;
    v44[56] = v25;
    *((_QWORD *)v44 + 8) = v27;
    *((_QWORD *)v44 + 9) = v41;
    *((_QWORD *)v44 + 10) = v28;
    v44[88] = v128;
    *((_QWORD *)v44 + 12) = v133;
    *((_QWORD *)v44 + 13) = v136;
    sub_2141ED0BC(v23, v24, v25);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v41, v28, v128);
    sub_21421C318(v152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    sub_2141EF6B8((uint64_t)v152, (uint64_t)v139);
    v45 = sub_21421C308((uint64_t)v139);
    v46 = *(_QWORD *)(v45 + 40);
    v47 = *(_QWORD *)(v45 + 48);
    v48 = *(_BYTE *)(v45 + 56);
    sub_2141ED0BC(*(_QWORD *)(v45 + 8), *(_QWORD *)(v45 + 16), *(_BYTE *)(v45 + 24));
    swift_bridgeObjectRelease();
    v38 = v46;
    v39 = v47;
    v40 = v48;
    goto LABEL_28;
  }
  v111 = (char *)MEMORY[0x24BEE4AF8];
LABEL_33:
  v50 = *(_QWORD *)(a1 + 280);
  v153 = v50;
  v51 = *(_QWORD *)(v50 + 16);
  if (!v51)
  {
    v73 = v109;
    if (v109)
      goto LABEL_48;
    v61 = 0;
    v60 = 0;
    v59 = 0;
    v58 = 0;
    v57 = 0;
    v56 = 0;
    v55 = 0;
    v54 = 0;
LABEL_50:
    v92 = v54;
    v93 = v55;
    v94 = v56;
    v95 = v57;
    v73 = v58;
    v96 = v59;
    v97 = v60;
    v91 = v61;
    goto LABEL_51;
  }
  v52 = v50 + 32;
  swift_bridgeObjectRetain();
  v53 = v52;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v134 = v51 - 1;
  v63 = 0;
  while (1)
  {
    v137 = v53;
    sub_2141EF6B8(v53, (uint64_t)v152);
    sub_2141EF6B8((uint64_t)v152, (uint64_t)&v140);
    if (sub_21421C2FC((uint64_t)&v140) != 1)
      break;
    sub_21421C308((uint64_t)&v140);
    v65 = v134;
    v64 = v137;
    if (!v134)
      goto LABEL_40;
LABEL_39:
    v134 = v65 - 1;
    v53 = v64 + 152;
  }
  v66 = (unsigned __int8 *)sub_21421C308((uint64_t)&v140);
  v131 = *v66;
  v116 = v66[24];
  v118 = *((_QWORD *)v66 + 2);
  v113 = v58;
  v119 = *((_QWORD *)v66 + 4);
  v120 = *((_QWORD *)v66 + 1);
  v123 = *((_QWORD *)v66 + 6);
  v125 = *((_QWORD *)v66 + 5);
  v112 = v61;
  v122 = v66[56];
  v126 = *((_QWORD *)v66 + 9);
  v129 = *((_QWORD *)v66 + 8);
  sub_2141EF6B8((uint64_t)v152, (uint64_t)v139);
  v67 = sub_21421C308((uint64_t)v139);
  v68 = v55;
  v69 = *(_QWORD *)(v67 + 40);
  v70 = v54;
  v71 = *(_QWORD *)(v67 + 48);
  v72 = *(_BYTE *)(v67 + 56);
  sub_2141DD130(*(_QWORD *)(v67 + 8), *(_QWORD *)(v67 + 16), *(_BYTE *)(v67 + 24));
  swift_bridgeObjectRetain();
  sub_2141DD140(v69, v71, v72);
  sub_2142C3638(v70, v68, v56, v57, v113, v59, v60, v112);
  v55 = v120;
  v57 = v116;
  v56 = v118;
  sub_2141DD130(v120, v118, v116);
  v58 = v119;
  swift_bridgeObjectRetain();
  v60 = v123;
  v59 = v125;
  v61 = v122;
  sub_2141DD140(v125, v123, v122);
  sub_21421C318(v152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
  v62 = v129;
  v54 = v131;
  v63 = v126;
  v65 = v134;
  v64 = v137;
  if (v134)
    goto LABEL_39;
LABEL_40:
  sub_2141F9244((uint64_t)&v153);
  v73 = v109;
  if (!v109)
    goto LABEL_50;
  if (!v58)
  {
LABEL_48:
    v91 = v102;
    v93 = v107;
    v92 = v108;
    v95 = v105;
    v94 = v106;
    v97 = v103;
    v96 = v104;
LABEL_51:
    sub_2142C3638(v92, v93, v94, v95, v73, v96, v97, v91);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v74 = *(_BYTE *)(a1 + 592);
  LOBYTE(v140) = v108;
  *((_QWORD *)&v140 + 1) = v107;
  *(_QWORD *)&v141 = v106;
  BYTE8(v141) = v105 != 0;
  *(_QWORD *)&v142 = v109;
  *((_QWORD *)&v142 + 1) = v104;
  *(_QWORD *)&v143 = v103;
  BYTE8(v143) = v102;
  *(_QWORD *)&v144 = v101;
  *((_QWORD *)&v144 + 1) = v100;
  LOBYTE(v145) = v54;
  *((_QWORD *)&v145 + 1) = v55;
  *(_QWORD *)&v146 = v56;
  BYTE8(v146) = v57 & 1;
  *(_QWORD *)&v147 = v58;
  *((_QWORD *)&v147 + 1) = v59;
  *(_QWORD *)&v148 = v60;
  BYTE8(v148) = v61;
  *(_QWORD *)&v149 = v62;
  *((_QWORD *)&v149 + 1) = v63;
  *(_QWORD *)&v150 = v132;
  *((_QWORD *)&v150 + 1) = v111;
  v151 = v74;
  v138 = *a2;
  sub_2142C3698(v108, v107, v106, v105, v109, v104, v103, v102);
  sub_2142C3698(v54, v55, v56, v57, v58, v59, v60, v61);
  sub_214251C5C((uint64_t)&v140);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v75 = v138;
  else
    v75 = sub_214225DE8(0, *((_QWORD *)v138 + 2) + 1, 1, v138);
  v77 = *((_QWORD *)v75 + 2);
  v76 = *((_QWORD *)v75 + 3);
  v78 = v109;
  if (v77 >= v76 >> 1)
  {
    v98 = sub_214225DE8((char *)(v76 > 1), v77 + 1, 1, v75);
    v78 = v109;
    v75 = v98;
  }
  *((_QWORD *)v75 + 2) = v77 + 1;
  v79 = &v75[184 * v77];
  v80 = v140;
  v81 = v141;
  v82 = v143;
  *((_OWORD *)v79 + 4) = v142;
  *((_OWORD *)v79 + 5) = v82;
  *((_OWORD *)v79 + 2) = v80;
  *((_OWORD *)v79 + 3) = v81;
  v83 = v144;
  v84 = v145;
  v85 = v147;
  *((_OWORD *)v79 + 8) = v146;
  *((_OWORD *)v79 + 9) = v85;
  *((_OWORD *)v79 + 6) = v83;
  *((_OWORD *)v79 + 7) = v84;
  v86 = v148;
  v87 = v149;
  v88 = v150;
  v79[208] = v151;
  *((_OWORD *)v79 + 11) = v87;
  *((_OWORD *)v79 + 12) = v88;
  *((_OWORD *)v79 + 10) = v86;
  v89 = v75;
  sub_2142C3638(v108, v107, v106, v105, v78, v104, v103, v102);
  sub_2142C3638(v54, v55, v56, v57, v58, v59, v60, v61);
  result = sub_214251D30((uint64_t)&v140);
  *a2 = v89;
  return result;
}

uint64_t sub_2142C2C40()
{
  uint64_t v0;
  __int128 v1;
  __n128 v2;
  unsigned __int8 v3;
  __n128 v4;
  _BYTE v6[72];
  __int128 v7;
  __int128 v8;
  __n128 v9[2];
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  __n128 v16;
  signed __int8 v17;

  sub_214425874();
  sub_214425880();
  v1 = *(_OWORD *)(v0 + 24);
  v2 = *(__n128 *)(v0 + 56);
  v9[0] = *(__n128 *)(v0 + 40);
  v9[1] = v2;
  v10 = *(_QWORD *)(v0 + 72);
  v7 = *(_OWORD *)(v0 + 8);
  v8 = v1;
  sub_21421CDBC(v9, &v11);
  sub_21421CDBC(&v11, &v16);
  v3 = v17;
  if (v17 < 0)
  {
    v17 &= ~0x80u;
    sub_214425880();
    sub_2143FD828();
  }
  else
  {
    v4 = v16;
    v12 = v7;
    v13 = v8;
    sub_21421CC0C((uint64_t)&v12, (uint64_t)v15);
    v14 = *((_QWORD *)&v13 + 1);
    sub_214425880();
    sub_21421CE7C((uint64_t)v15);
    sub_2141F92E8((uint64_t)&v14);
    sub_21421D0FC((uint64_t)&v11);
    sub_2143FD1BC((uint64_t)v6, v4.n128_i64[0], v4.n128_i64[1], v3);
    sub_21421CC48((uint64_t)v15);
    sub_2141F9244((uint64_t)&v14);
    sub_21421CDF8((uint64_t)&v11);
  }
  return sub_2144258B0();
}

uint64_t sub_2142C2D80()
{
  return sub_2142C2C40();
}

uint64_t sub_2142C2DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(char *)(v1 + 56);
  sub_214425880();
  sub_214425880();
  if (v8 < 0)
    return sub_2143FD828();
  sub_2141DD130(v3, v4, v5);
  swift_bridgeObjectRetain();
  sub_2141DD140(v6, v7, v8);
  sub_2143FD1BC(a1, v6, v7, v8);
  sub_2141ED0BC(v3, v4, v5);
  swift_bridgeObjectRelease();
  return sub_2141EF1B0(v6, v7, v8);
}

uint64_t sub_2142C2EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[72];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(char *)(v0 + 56);
  sub_214425874();
  sub_214425880();
  sub_214425880();
  if (v6 < 0)
  {
    sub_2143FD828();
  }
  else
  {
    sub_2141DD130(v1, v2, v3);
    swift_bridgeObjectRetain();
    sub_2141DD140(v4, v5, v6);
    sub_2143FD1BC((uint64_t)v8, v4, v5, v6);
    sub_2141ED0BC(v1, v2, v3);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v4, v5, v6);
  }
  return sub_2144258B0();
}

BOOL sub_2142C2FD8(unsigned __int8 *a1, unsigned __int8 *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v11;

  if (*a1 != *a2)
    return 0;
  LOBYTE(v11) = a2[24];
  return sub_2143D8A9C(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), a1[24], *((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6), a1[56], *((_QWORD *)a2 + 1), *((double *)a2 + 4), a4, a5, a6, a7, a8, a9, a10, *((_QWORD *)a2 + 2), v11, *((_QWORD *)a2 + 4),
           *((double *)a2 + 5),
           *((double *)a2 + 6),
           a2[56]);
}

uint64_t sub_2142C3050()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 32);
  sub_214425874();
  sub_21420F564((uint64_t)v3, v1);
  sub_21442588C();
  return sub_2144258B0();
}

uint64_t sub_2142C30AC(uint64_t a1)
{
  uint64_t v1;

  sub_21420F564(a1, *(_QWORD *)(v1 + 32));
  return sub_21442588C();
}

uint64_t sub_2142C30E0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 32);
  sub_214425874();
  sub_21420F564((uint64_t)v3, v1);
  sub_21442588C();
  return sub_2144258B0();
}

uint64_t sub_2142C3138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if ((sub_2144247F4() & 1) == 0)
    return 0;
  if ((sub_21420E694(v2, v4) & 1) != 0)
    return v3 ^ v5 ^ 1u;
  return 0;
}

uint64_t sub_2142C31B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  result = *(_QWORD *)(a2 + 16);
  if (result == a1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v4 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result < v4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v4 < 0)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (v4 != result)
  {
    v5 = (_QWORD *)(a2 + 32 * a1 + 88);
    while (v4 < result)
    {
      if (*v5)
        return v4;
      v6 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_14;
      ++v4;
      v5 += 4;
      if (v6 == result)
        return result;
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_2142C3234(uint64_t a1, void (*a2)(_QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_2144255B0();
    v5 = (_QWORD *)(a1 + 80);
    do
    {
      v6 = *(v5 - 6);
      v7 = *(v5 - 5);
      v8 = *((_BYTE *)v5 - 32);
      v10 = *(v5 - 3);
      v9 = *(v5 - 2);
      v11 = *((_BYTE *)v5 - 8);
      v12 = *v5;
      v5 += 7;
      v14[0] = v6;
      v14[1] = v7;
      v15 = v8;
      v16 = v10;
      v17 = v9;
      v18 = v11;
      sub_2141DD130(v6, v7, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(v14, v12);
      sub_2141ED0BC(v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21442558C();
      sub_2144255BC();
      sub_2144255C8();
      sub_214425598();
      --v3;
    }
    while (v3);
    return v19;
  }
  return result;
}

uint64_t sub_2142C3364(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  int64_t i;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  char v38;
  _BYTE v39[152];
  _BYTE v40[160];
  uint64_t v41;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v41 = MEMORY[0x24BEE4AF8];
    sub_2141D40D0(0, v2, 0);
    v3 = v41;
    v5 = a1 + 48;
    for (i = v2 - 1; ; i = v24 - 1)
    {
      v24 = i;
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_QWORD *)v5;
      v9 = *(_BYTE *)(v5 + 8);
      v11 = *(_QWORD *)(v5 + 16);
      v10 = *(_QWORD *)(v5 + 24);
      v12 = *(_QWORD *)(v5 + 32);
      v29[0] = *(_BYTE *)(v5 - 16);
      v30 = v7;
      v31 = v8;
      v32 = v9;
      v33 = v11;
      v34 = v10;
      v35 = v12;
      v36 = *(_BYTE *)(v5 + 40);
      v13 = v36;
      v37 = *(_OWORD *)(v5 + 48);
      v38 = 3;
      sub_2141EF6F4((uint64_t)v29);
      sub_2141EF6B8((uint64_t)v29, (uint64_t)v39);
      nullsub_1(v39, v14);
      sub_2141E801C((uint64_t)v39, (uint64_t)v40, &qword_253F13428);
      sub_2141DD130(v7, v8, v9);
      swift_bridgeObjectRetain();
      sub_2141DD140(v10, v12, v13);
      v15 = sub_21422BE94((uint64_t)v40, a2);
      v27 = v16;
      v28 = v15;
      v25 = v18;
      v26 = v17;
      sub_2141ED0BC(v7, v8, v9);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v10, v12, v13);
      v41 = v3;
      v20 = *(_QWORD *)(v3 + 16);
      v19 = *(_QWORD *)(v3 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_2141D40D0((_QWORD *)(v19 > 1), v20 + 1, 1);
        v3 = v41;
      }
      *(_QWORD *)(v3 + 16) = v20 + 1;
      v21 = (_QWORD *)(v3 + 32 * v20);
      v21[4] = v28;
      v21[5] = v27;
      v21[6] = v26;
      v21[7] = v25;
      if (!v24)
        break;
      v5 += 80;
    }
  }
  return v3;
}

uint64_t sub_2142C352C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 104);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_2142C3540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F146B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142C3588(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_2142C35C4(double a1)
{
  uint64_t v1;

  return sub_2142C1CD0(v1 + 16, a1);
}

uint64_t sub_2142C35E0()
{
  uint64_t v0;

  if (*(unsigned __int8 *)(v0 + 56) <= 2u)
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  return swift_deallocObject();
}

double sub_2142C3610(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)&result = 255;
  *(_OWORD *)(a1 + 104) = xmmword_2144278B0;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_2142C3638(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a5)
  {
    sub_2141ED0BC(a2, a3, a4 & 1);
    swift_bridgeObjectRelease();
    return sub_2141EF1B0(a6, a7, a8);
  }
  return result;
}

uint64_t sub_2142C3698(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a5)
  {
    sub_2141DD130(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    return sub_2141DD140(a6, a7, a8);
  }
  return result;
}

uint64_t destroy for DataField(uint64_t a1)
{
  sub_2141ED0BC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  return sub_2141EF1B0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for DataField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_2141DD130(v4, v5, v6);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  sub_2141DD140(v7, v8, v9);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for DataField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_2141DD130(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  sub_2141DD140(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  v15 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v12;
  sub_2141EF1B0(v13, v14, v15);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for DataField(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v4;
  sub_2141ED0BC(v5, v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v8;
  sub_2141EF1B0(v9, v10, v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataField(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataField()
{
  return &type metadata for DataField;
}

uint64_t destroy for DataPoint.SeriesKey(uint64_t a1)
{
  sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DataPoint.SeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DataPoint.SeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for DataPoint.SeriesKey(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_2141ED0BC(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataPoint.SeriesKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataPoint.SeriesKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataPoint.SeriesKey()
{
  return &type metadata for DataPoint.SeriesKey;
}

uint64_t destroy for DataPoint(uint64_t a1)
{
  sub_2141ED0BC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  sub_2141EF1B0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  sub_2141ED0BC(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
  swift_bridgeObjectRelease();
  sub_2141EF1B0(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DataPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_2141DD130(v4, v5, v6);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  sub_2141DD140(v7, v8, v9);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_BYTE *)(a2 + 104);
  sub_2141DD130(v10, v11, v12);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRetain();
  sub_2141DD140(v13, v14, v15);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v14;
  *(_BYTE *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v16;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DataPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_2141DD130(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  sub_2141DD140(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  v15 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v12;
  sub_2141EF1B0(v13, v14, v15);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_BYTE *)(a2 + 104);
  sub_2141DD130(v16, v17, v18);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  *(_BYTE *)(a1 + 104) = v18;
  sub_2141ED0BC(v19, v20, v21);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a2 + 128);
  v24 = *(_BYTE *)(a2 + 136);
  sub_2141DD140(v22, v23, v24);
  v25 = *(_QWORD *)(a1 + 120);
  v26 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v22;
  *(_QWORD *)(a1 + 128) = v23;
  v27 = *(_BYTE *)(a1 + 136);
  *(_BYTE *)(a1 + 136) = v24;
  sub_2141EF1B0(v25, v26, v27);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

__n128 initializeWithTake for DataPoint(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for DataPoint(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v4;
  sub_2141ED0BC(v5, v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v8;
  sub_2141EF1B0(v9, v10, v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_BYTE *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_BYTE *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = v12;
  sub_2141ED0BC(v13, v14, v15);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  v16 = *(_BYTE *)(a2 + 136);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v19 = *(_BYTE *)(a1 + 136);
  *(_BYTE *)(a1 + 136) = v16;
  sub_2141EF1B0(v17, v18, v19);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataPoint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 177))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataPoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 177) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataPoint()
{
  return &type metadata for DataPoint;
}

unint64_t sub_2142C40CC()
{
  unint64_t result;

  result = qword_253F12210;
  if (!qword_253F12210)
  {
    result = MEMORY[0x2199CD934](&unk_21442AACC, &type metadata for DataPoint.SeriesKey);
    atomic_store(result, (unint64_t *)&qword_253F12210);
  }
  return result;
}

unint64_t sub_2142C4114()
{
  unint64_t result;

  result = qword_254D6A880;
  if (!qword_254D6A880)
  {
    result = MEMORY[0x2199CD934](&unk_21442AB34, &type metadata for DataField);
    atomic_store(result, (unint64_t *)&qword_254D6A880);
  }
  return result;
}

uint64_t AxisGridLine.init(centered:stroke:snapToPixel:pixelOffset:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, double a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result;
  double v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;

  result = sub_2142C41F8(a2, (uint64_t)v15);
  v12 = a4;
  if ((a5 & 1) != 0)
    v12 = 0.0;
  v13 = v15[1];
  *(_OWORD *)(a6 + 24) = v15[0];
  v14 = v16;
  *(_BYTE *)a6 = a1;
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 16) = -1;
  *(_OWORD *)(a6 + 40) = v13;
  *(_QWORD *)(a6 + 56) = v14;
  *(_BYTE *)(a6 + 64) = 1;
  *(_BYTE *)(a6 + 65) = a3 & 1;
  *(double *)(a6 + 72) = v12;
  return result;
}

uint64_t sub_2142C41F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F11F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double AxisGridLine.init(centered:stroke:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  sub_2142C41F8(a2, (uint64_t)v8);
  v5 = v9;
  *(_BYTE *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = -1;
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)(a3 + 24) = v8[0];
  *(_OWORD *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 56) = v5;
  *(_WORD *)(a3 + 64) = 1;
  *(_QWORD *)(a3 + 72) = 0;
  return result;
}

double static AxisGridLine._renderAxisMark(_:_:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  _BYTE v12[8];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 65);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *a2;
  v12[0] = *(_BYTE *)a1;
  v13 = v3;
  v14 = v4;
  v15 = *(_OWORD *)(a1 + 24);
  v16 = *(_OWORD *)(a1 + 40);
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v11 = v9;
  static AxisTick._renderAxisMark(_:_:)((uint64_t)v12, &v11, a3);
  return result;
}

double sub_2142C4320@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  _BYTE v12[8];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 65);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *a2;
  v12[0] = *(_BYTE *)a1;
  v13 = v3;
  v14 = v4;
  v15 = *(_OWORD *)(a1 + 24);
  v16 = *(_OWORD *)(a1 + 40);
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v11 = v9;
  static AxisTick._renderAxisMark(_:_:)((uint64_t)v12, &v11, a3);
  return result;
}

uint64_t destroy for AxisGridLine()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AxisGridLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AxisGridLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for AxisGridLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisGridLine(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisGridLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisGridLine()
{
  return &type metadata for AxisGridLine;
}

uint64_t sub_2142C45FC(uint64_t result, uint64_t (*a2)(unint64_t, uint64_t))
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = result + 32;
    v5 = *(_QWORD *)(result + 16);
    while (1)
    {
      v6 = v3 + (v5 >> 1);
      if (__OFADD__(v3, v5 >> 1))
        break;
      if (v6 >= v2)
        goto LABEL_15;
      v7 = *(_QWORD *)(v4 + 8 * v6);
      swift_bridgeObjectRetain();
      v8 = a2(v3 + (v5 >> 1), v7);
      result = swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        v5 >>= 1;
      else
        v5 += ~(v5 >> 1);
      if ((v8 & 1) == 0)
        v3 = v6 + 1;
      if ((uint64_t)v5 <= 0)
        return v3;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_2142C46C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_25:
    __break(1u);
    return result;
  }
  if (v6 >= 1)
  {
    result = swift_unknownObjectRetain();
    v9 = v5;
    while (1)
    {
      v10 = v9 - ((unint64_t)v6 >> 1);
      if (__OFADD__(v9, -(uint64_t)((unint64_t)v6 >> 1)))
        break;
      v11 = v10 - 1;
      if (__OFSUB__(v10, 1))
        goto LABEL_23;
      if (v11 < a3 || v11 >= v5)
        goto LABEL_24;
      v13 = *(_QWORD *)(a2 + 8 * v11);
      swift_bridgeObjectRetain();
      v14 = a5(v11, v13);
      result = swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        v6 = (unint64_t)v6 >> 1;
      else
        v6 += ~((unint64_t)v6 >> 1);
      if ((v14 & 1) == 0)
        v9 = v11;
      if (v6 <= 0)
      {
        swift_unknownObjectRelease();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a4 >> 1;
LABEL_19:
  if (v9 > a3)
    return v9 - 1;
  else
    return 0;
}

uint64_t sub_2142C47D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v12;
  BOOL v13;

  if ((*(_BYTE *)(v1
                 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval
                 + 8) & 1) == 0)
  {
    v6 = *(double *)(v1
                   + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval);
    sub_2144239F0();
    v8 = v7;
    result = sub_2144239F0();
    v10 = floor((v8 - v9) / v6);
    if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) != 0)
    {
      if (v10 > -9.22337204e18)
      {
        if (v10 < 9.22337204e18)
          return (uint64_t)v10;
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = sub_2142C61B4(v1 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component, v1 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor, a1);
  if ((v3 & 1) == 0)
  {
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_stride);
    if (result < 0)
    {
      if (!v4)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (result == 0x8000000000000000 && v4 == -1)
        goto LABEL_28;
      v12 = result / v4 * v4;
      v13 = __OFSUB__(v12, v4);
      v5 = v12 - v4;
      if (v13)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      goto LABEL_16;
    }
    if (v4)
    {
      v5 = result / v4 * v4;
LABEL_16:
      if (v5 != 0x8000000000000000 || v4 != -1)
        return v5 / v4;
      goto LABEL_25;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2142C491C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v64 = a2;
  v4 = sub_2141D8BF8(&qword_253F13340);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v60 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v56 - v7;
  v62 = sub_2141D8BF8(&qword_253F15D60);
  v9 = MEMORY[0x24BDAC7A8](v62);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v61 = (char *)&v56 - v12;
  v63 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  MEMORY[0x24BDAC7A8](v63);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_214423B70();
  v65 = *(_QWORD **)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v56 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v56 - v23;
  result = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v56 - v26;
  if ((*(_BYTE *)(v2
                 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval
                 + 8) & 1) == 0)
  {
    result = sub_2144239F0();
    if (!__OFADD__(a1, 1))
    {
      sub_2144239F0();
      sub_2144239E4();
      sub_2144239E4();
      sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      result = sub_214424E84();
      if ((result & 1) != 0)
      {
        v45 = v61;
        v46 = v62;
        v47 = &v61[*(int *)(v62 + 48)];
        v48 = v65;
        v49 = (void (*)(char *, char *, uint64_t))v65[4];
        v49(v61, v27, v15);
        v50 = v47;
        v49(v47, v24, v15);
        v51 = &v11[*(int *)(v46 + 48)];
        v52 = v14;
        v53 = (void (*)(char *, char *, uint64_t))v48[2];
        v53(v11, v45, v15);
        v53(v51, v50, v15);
        v42 = (uint64_t)v52;
        v49(v52, v11, v15);
        v43 = (void (*)(char *, uint64_t))v48[1];
        v43(v51, v15);
        v54 = &v11[*(int *)(v46 + 48)];
        v49(v11, v45, v15);
        v49(v54, v50, v15);
        v49(&v52[*(int *)(v63 + 36)], v54, v15);
        goto LABEL_12;
      }
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_stride);
  if ((unsigned __int128)(a1 * (__int128)v28) >> 64 != (a1 * v28) >> 63)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v56 = v14;
  v57 = v11;
  v29 = v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component;
  v30 = v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor;
  v58 = *(_QWORD *)(v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_cache);
  v59 = a1;
  sub_2142C6548(v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component, a1 * v28, v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor, (uint64_t)v8);
  v31 = v65;
  v32 = (uint64_t (*)(char *, uint64_t, uint64_t))v65[6];
  result = v32(v8, 1, v15);
  if ((_DWORD)result == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v33 = (uint64_t (*)(char *, char *, uint64_t))v31[4];
  result = v33(v21, v8, v15);
  v34 = v59 + 1;
  if (__OFADD__(v59, 1))
    goto LABEL_15;
  if ((unsigned __int128)(v34 * (__int128)v28) >> 64 != (v34 * v28) >> 63)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v35 = v60;
  sub_2142C6548(v29, v34 * v28, v30, v60);
  result = v32((char *)v35, 1, v15);
  if ((_DWORD)result != 1)
  {
    v33(v18, (char *)v35, v15);
    sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    result = sub_214424E84();
    v11 = v57;
    if ((result & 1) != 0)
    {
      v37 = v61;
      v36 = v62;
      v38 = &v61[*(int *)(v62 + 48)];
      v33(v61, v21, v15);
      v33(v38, v18, v15);
      v39 = &v11[*(int *)(v36 + 48)];
      v40 = v65;
      v41 = (void (*)(char *, char *, uint64_t))v65[2];
      v41(v11, v37, v15);
      v41(v39, v38, v15);
      v42 = (uint64_t)v56;
      v33(v56, v11, v15);
      v43 = (void (*)(char *, uint64_t))v40[1];
      v43(v39, v15);
      v44 = &v11[*(int *)(v36 + 48)];
      v33(v11, v37, v15);
      v33(v44, v38, v15);
      v33((char *)(v42 + *(int *)(v63 + 36)), v44, v15);
LABEL_12:
      v55 = v64;
      v43(v11, v15);
      return sub_2141E801C(v42, v55, (uint64_t *)&unk_253F15EB0);
    }
    goto LABEL_18;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_2142C4E84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;

  v2 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v15 - v6;
  type metadata accessor for CalendarBinningUnit(0);
  v8 = sub_2142C47D0(a1);
  v9 = sub_2142C47D0(a1 + *(int *)(v2 + 36));
  sub_2142C491C(v8, (uint64_t)v7);
  result = sub_2142C491C(v9, (uint64_t)v5);
  v11 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_214423B40();
  if ((result & 1) != 0)
  {
    v13 = __OFSUB__(v12--, 1);
    if (v13)
      goto LABEL_10;
  }
  v14 = sub_214423B40();
  sub_2141E0750((uint64_t)v5, (uint64_t *)&unk_253F15EB0);
  result = sub_2141E0750((uint64_t)v7, (uint64_t *)&unk_253F15EB0);
  if ((v14 & 1) == 0)
    return v12;
  v13 = __OFSUB__(v12--, 1);
  if (!v13)
    return v12;
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_2142C4FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  char v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v35 = sub_2141D8BF8(&qword_253F15D60);
  v3 = MEMORY[0x24BDAC7A8](v35);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v33 - v6;
  v8 = sub_214423B70();
  v9 = *(_QWORD **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v34 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v33 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v33 - v18;
  type metadata accessor for CalendarBinningUnit(0);
  v20 = sub_2142C47D0(a1);
  sub_2142C491C(v20, (uint64_t)v19);
  v33 = v12;
  v21 = sub_214423B40();
  v22 = (void (*)(char *, uint64_t, uint64_t))v9[2];
  v22(v11, a1, v8);
  sub_2142C9CD8((uint64_t)v19, (uint64_t)v17);
  if ((v21 & 1) != 0)
  {
    sub_2141E0750((uint64_t)v17, (uint64_t *)&unk_253F15EB0);
    v23 = (void (*)(char *, uint64_t))v9[1];
    v23(v11, v8);
  }
  else
  {
    v24 = sub_214423B40();
    sub_2141E0750((uint64_t)v17, (uint64_t *)&unk_253F15EB0);
    v23 = (void (*)(char *, uint64_t))v9[1];
    v23(v11, v8);
    if ((v24 & 1) == 0)
      return sub_2141E801C((uint64_t)v19, v36, (uint64_t *)&unk_253F15EB0);
  }
  sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v25 = sub_214424E84();
  result = sub_2141E0750((uint64_t)v19, (uint64_t *)&unk_253F15EB0);
  if ((v25 & 1) != 0)
  {
    v27 = v35;
    v28 = &v7[*(int *)(v35 + 48)];
    v22(v7, a1, v8);
    v22(v28, a1, v8);
    v29 = &v5[*(int *)(v27 + 48)];
    v22(v5, (uint64_t)v7, v8);
    v22(v29, (uint64_t)v28, v8);
    v30 = (void (*)(char *, char *, uint64_t))v9[4];
    v31 = v34;
    v30(v34, v5, v8);
    v23(v29, v8);
    v32 = &v5[*(int *)(v27 + 48)];
    v30(v5, v7, v8);
    v30(v32, v28, v8);
    v30(&v31[*(int *)(v33 + 36)], v32, v8);
    v23(v5, v8);
    v19 = v31;
    return sub_2141E801C((uint64_t)v19, v36, (uint64_t *)&unk_253F15EB0);
  }
  __break(1u);
  return result;
}

uint64_t sub_2142C5308(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v59 = a3;
  v54 = sub_2141D8BF8(&qword_253F15D60);
  v6 = MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v53 = (char *)&v48 - v8;
  v9 = sub_214423B70();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v48 - v14;
  v16 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v52 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v55 = (uint64_t)&v48 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v48 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v48 - v24;
  sub_2142C4FD8(a1, (uint64_t)&v48 - v24);
  v26 = a1 + *(int *)(v16 + 36);
  v27 = (uint64_t)v23;
  v51 = v3;
  sub_2142C4FD8(v26, (uint64_t)v23);
  v57 = a2;
  v28 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  if ((a2 & 1) != 0)
    v28(v15, v25, v9);
  else
    v28(v15, &v25[*(int *)(v16 + 36)], v9);
  v29 = v10;
  v30 = v27;
  if ((v59 & 1) != 0)
    v30 = v27 + *(int *)(v16 + 36);
  v50 = v16;
  v58 = v27;
  v28(v13, (char *)v30, v9);
  sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  if ((sub_214424E6C() & 1) != 0)
  {
    v31 = (uint64_t)v25;
    v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
    v32(v15, v9);
    sub_2141E0750(v58, (uint64_t *)&unk_253F15EB0);
    sub_2141E0750(v31, (uint64_t *)&unk_253F15EB0);
    return (v59 & 1) + (v57 & 1);
  }
  result = sub_214424E84();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v59 = (uint64_t)v25;
  v35 = v53;
  v34 = v54;
  v36 = *(int *)(v54 + 48);
  v49 = v13;
  v37 = &v53[v36];
  v28(v53, v15, v9);
  v28(v37, v13, v9);
  v38 = *(int *)(v34 + 48);
  v57 = v15;
  v39 = v29;
  v40 = v56;
  v41 = &v56[v38];
  v28(v56, v35, v9);
  v28(v41, v37, v9);
  v42 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  v43 = (uint64_t)v52;
  v42(v52, v40, v9);
  v44 = *(void (**)(char *, uint64_t))(v39 + 8);
  v44(v41, v9);
  v45 = &v40[*(int *)(v34 + 48)];
  v42(v40, v35, v9);
  v42(v45, v37, v9);
  v42((char *)(v43 + *(int *)(v50 + 36)), v45, v9);
  v44(v40, v9);
  v46 = v55;
  sub_2141E801C(v43, v55, (uint64_t *)&unk_253F15EB0);
  v47 = sub_2142C4E84(v46);
  sub_2141E0750(v46, (uint64_t *)&unk_253F15EB0);
  v44(v49, v9);
  v44(v57, v9);
  sub_2141E0750(v58, (uint64_t *)&unk_253F15EB0);
  sub_2141E0750(v59, (uint64_t *)&unk_253F15EB0);
  result = v47 + 1;
  if (__OFADD__(v47, 1))
LABEL_12:
    __break(1u);
  return result;
}

uint64_t sub_2142C5728()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t result;
  double v4;
  double v5;
  double v6;
  double v7;

  sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  sub_2144239F0();
  v2 = v1;
  result = sub_2144239F0();
  v5 = v2 - v4;
  v6 = ceil((v2 - v4)/ *(double *)(v0+ OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_durationBounds+ 8));
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v7 = ceil(v5/ *(double *)(v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_durationBounds))+ 1.0;
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = (uint64_t)v6;
  if ((uint64_t)v7 < (uint64_t)v6)
LABEL_15:
    __break(1u);
  return result;
}

uint64_t sub_2142C5844(uint64_t a1, char a2, char a3)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = sub_2142C5728();
  if ((a2 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_7;
  v7 = __OFSUB__(result--, 1);
  if (v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = __OFADD__(v6++, 1);
  if (v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v6 >= result)
    return result;
  __break(1u);
LABEL_7:
  v7 = __OFADD__(result++, 1);
  if (v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 < result)
LABEL_15:
    __break(1u);
  return result;
}

uint64_t sub_2142C58CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;

  v1 = sub_214423B70();
  v28 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - v5;
  v7 = sub_214423C48();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141FDEA0(v0, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v23 = &v13[*(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48)];
    v21 = v8;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    v24 = v28;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v6, v23, v1);
    sub_214425880();
    sub_2141FED10(&qword_253F121C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2A8]);
    sub_214424DC4();
LABEL_6:
    sub_2141FED10(&qword_253F10FE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_214424DC4();
    v22 = *(void (**)(char *, uint64_t))(v24 + 8);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v25 = &v13[*(int *)(sub_2141D8BF8(qword_253F0FEA0) + 64)];
    v21 = v8;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    v24 = v28;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v6, v25, v1);
    sub_214425880();
    sub_2141FED10(&qword_253F121C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2A8]);
    sub_214424DC4();
    sub_214425880();
    goto LABEL_6;
  }
  v16 = sub_2141D8BF8(&qword_253F0FE98);
  v17 = &v13[*(int *)(v16 + 48)];
  v18 = &v13[*(int *)(v16 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
  v19 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v19(v6, v17, v1);
  v20 = v18;
  v21 = v8;
  v19(v4, v20, v1);
  sub_214425880();
  sub_2141FED10(&qword_253F121C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2A8]);
  sub_214424DC4();
  sub_2141FED10(&qword_253F10FE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_214424DC4();
  sub_214424DC4();
  v22 = *(void (**)(char *, uint64_t))(v28 + 8);
  v22(v4, v1);
LABEL_7:
  v22(v6, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v10, v7);
}

uint64_t sub_2142C5C68()
{
  sub_214425874();
  sub_2142C58CC();
  return sub_2144258B0();
}

uint64_t sub_2142C5CA8()
{
  sub_214425874();
  sub_2142C58CC();
  return sub_2144258B0();
}

uint64_t sub_2142C5CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for CalendarCache.Value(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v20[-v14];
  v16 = &v9[*(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48)];
  v17 = sub_214423C48();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v9, a1, v17);
  v18 = sub_214423B70();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, a2, v18);
  swift_storeEnumTagMultiPayload();
  v21 = v3;
  v22 = a1;
  v23 = a2;
  swift_beginAccess();
  sub_2142C5F1C((uint64_t)v9, (void (*)(void))sub_2142CA028, (unint64_t)v15);
  swift_endAccess();
  sub_2141DD370((uint64_t)v9, type metadata accessor for CalendarCache.Key);
  sub_2141FDEA0((uint64_t)v15, (uint64_t)v13, type metadata accessor for CalendarCache.Value);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    sub_2141DD370((uint64_t)v15, type metadata accessor for CalendarCache.Value);
    return sub_2141E801C((uint64_t)v13, a3, &qword_253F10FC8);
  }
  else
  {
    result = sub_2141DD370((uint64_t)v13, type metadata accessor for CalendarCache.Value);
    __break(1u);
  }
  return result;
}

uint64_t sub_2142C5ED0()
{
  sub_214423BB8();
  type metadata accessor for CalendarCache.Value(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2142C5F1C@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[2];

  v4 = v3;
  v8 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v8 + 16)
    && (v9 = sub_214336C24(a1), (v10 & 1) != 0)
    && (v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9), (v11 & 0x8000000000000000) == 0))
  {
    v12 = *(_QWORD **)(v4 + 8);
    if (v11 == *(_QWORD *)(v4 + 16))
      goto LABEL_7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v4 + 8) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_11;
    while (1)
    {
      v14 = v12[2];
      v15 = *(unsigned __int8 *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F11908) - 8) + 80);
      v18[0] = (uint64_t)v12 + ((v15 + 32) & ~v15);
      v18[1] = v14;
      sub_214369948(v18, v11, v4);
      *(_QWORD *)(v4 + 8) = v12;
LABEL_7:
      if (v11 < v12[2])
        break;
      __break(1u);
LABEL_11:
      v12 = (_QWORD *)sub_21434EA94(v12);
      *(_QWORD *)(v4 + 8) = v12;
    }
    v16 = sub_2141D8BF8(&qword_253F11908);
    return sub_2141FDEA0((uint64_t)v12+ ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v11+ *(int *)(v16 + 52), a3, type metadata accessor for CalendarCache.Value);
  }
  else
  {
    a2();
    return sub_214369B0C(a3, a1);
  }
}

uint64_t sub_2142C6070(size_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[2];

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v6 + 16)
    && (v7 = sub_214336EFC(a1), (v8 & 1) != 0)
    && (v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7), (v9 & 0x8000000000000000) == 0))
  {
    v10 = *(_QWORD **)(v3 + 8);
    if (v9 == *(_QWORD *)(v3 + 16))
      goto LABEL_7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 8) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_12;
    while (1)
    {
      v12 = v10[2];
      v13 = *(unsigned __int8 *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F11900) - 8) + 80);
      v17[0] = (uint64_t)v10 + ((v13 + 32) & ~v13);
      v17[1] = v12;
      sub_214369A4C(v17, v9, v3);
      *(_QWORD *)(v3 + 8) = v10;
LABEL_7:
      if (v9 < v10[2])
        break;
      __break(1u);
LABEL_12:
      v10 = (_QWORD *)sub_21434EBAC(v10);
      *(_QWORD *)(v3 + 8) = v10;
    }
    v14 = sub_2141D8BF8(&qword_253F11900);
    v15 = *(_QWORD *)((char *)v10
                    + ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))
                    + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v9
                    + *(int *)(v14 + 52));
    swift_retain();
  }
  else
  {
    a2(v17);
    v15 = v17[0];
    sub_21436A4D8(v17[0], a1);
  }
  return v15;
}

uint64_t sub_2142C61B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23 = a3;
  v5 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CalendarCache.Value(0);
  v8 = MEMORY[0x24BDAC7A8](v25);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - v11;
  v13 = sub_2141D8BF8(&qword_253F0FE98);
  v14 = &v7[*(int *)(v13 + 48)];
  v15 = &v7[*(int *)(v13 + 64)];
  v16 = sub_214423C48();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v7, a1, v16);
  v17 = sub_214423B70();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v18(v14, a2, v17);
  v19 = v15;
  v20 = v23;
  v18(v19, v23, v17);
  swift_storeEnumTagMultiPayload();
  v26 = v24;
  v27 = a1;
  v28 = a2;
  v29 = v20;
  swift_beginAccess();
  sub_2142C5F1C((uint64_t)v7, (void (*)(void))sub_2142CA040, (unint64_t)v12);
  swift_endAccess();
  sub_2141DD370((uint64_t)v7, type metadata accessor for CalendarCache.Key);
  sub_2141FDEA0((uint64_t)v12, (uint64_t)v10, type metadata accessor for CalendarCache.Value);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_2141DD370((uint64_t)v12, type metadata accessor for CalendarCache.Value);
    return *(_QWORD *)v10;
  }
  else
  {
    result = sub_2141DD370((uint64_t)v10, type metadata accessor for CalendarCache.Value);
    __break(1u);
  }
  return result;
}

uint64_t sub_2142C63B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  v6 = sub_214423960();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141D8BF8(&qword_253F122A0);
  v10 = sub_214423C48();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_214426EF0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v13 + v12, a1, v10);
  sub_2143F1544(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_214423BD0();
  swift_bridgeObjectRelease();
  v14 = sub_21442393C();
  LOBYTE(a1) = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)a4 = v14;
  *(_BYTE *)(a4 + 8) = a1 & 1;
  type metadata accessor for CalendarCache.Value(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2142C6548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v22 = a4;
  v8 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for CalendarCache.Value(0);
  v11 = MEMORY[0x24BDAC7A8](v23);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = sub_2141D8BF8(qword_253F0FEA0);
  v17 = *(int *)(v16 + 48);
  v18 = &v10[*(int *)(v16 + 64)];
  v19 = sub_214423C48();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v10, a1, v19);
  *(_QWORD *)&v10[v17] = a2;
  v20 = sub_214423B70();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, a3, v20);
  swift_storeEnumTagMultiPayload();
  v24 = v4;
  v25 = a1;
  v26 = a2;
  v27 = a3;
  swift_beginAccess();
  sub_2142C5F1C((uint64_t)v10, (void (*)(void))sub_2142CA034, (unint64_t)v15);
  swift_endAccess();
  sub_2141DD370((uint64_t)v10, type metadata accessor for CalendarCache.Key);
  sub_2141FDEA0((uint64_t)v15, (uint64_t)v13, type metadata accessor for CalendarCache.Value);
  if (swift_getEnumCaseMultiPayload())
  {
    result = sub_2141DD370((uint64_t)v13, type metadata accessor for CalendarCache.Value);
    __break(1u);
  }
  else
  {
    sub_2141DD370((uint64_t)v15, type metadata accessor for CalendarCache.Value);
    return sub_2141E801C((uint64_t)v13, v22, &qword_253F13340);
  }
  return result;
}

uint64_t sub_2142C673C()
{
  sub_214423C18();
  type metadata accessor for CalendarCache.Value(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2142C6790()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = MEMORY[0x24BEE4AF8];
  v1 = sub_214369114(MEMORY[0x24BEE4AF8]);
  sub_2141D8BF8(qword_253F11BE8);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_21442ABC0;
  *(_QWORD *)(v2 + 32) = v0;
  *(_QWORD *)(v2 + 40) = -1;
  *(_QWORD *)(v2 + 48) = -1;
  *(_QWORD *)(v2 + 56) = v1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  pthread_key_create((pthread_key_t *)(v2 + 16), (void (__cdecl *)(void *))sub_2143C64DC);
  swift_endAccess();
  result = swift_bridgeObjectRelease();
  off_253F11B58 = (_UNKNOWN *)v2;
  return result;
}

uint64_t sub_2142C6848@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = sub_214423C54();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for CalendarCache(0);
  v8 = swift_allocObject();
  v9 = (_QWORD *)(v8 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893713CalendarCache_cache);
  v10 = MEMORY[0x24BEE4AF8];
  v11 = sub_2143697B0(MEMORY[0x24BEE4AF8]);
  *v9 = 64;
  v9[1] = v10;
  v9[2] = -1;
  v9[3] = -1;
  v9[4] = v11;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v8 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893713CalendarCache_calendar, v7, v4);
  *a2 = v8;
  return result;
}

uint64_t sub_2142C6938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893713CalendarCache_calendar;
  v2 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2142C69A8()
{
  return type metadata accessor for CalendarCache(0);
}

uint64_t type metadata accessor for CalendarCache(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F11210);
}

uint64_t sub_2142C69C4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214423C54();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_2142C6A38(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  pthread_key_t *v25;
  pthread_key_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  char *v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  int v66;
  char *v67;
  uint64_t v68;
  size_t v69;
  uint64_t v70;
  int v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  double v82;
  double v83;
  double *v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  void (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  size_t v116;
  size_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v5 = v4;
  v113 = a3;
  v102 = sub_214423BA0();
  v101 = *(_QWORD *)(v102 - 8);
  v9 = MEMORY[0x24BDAC7A8](v102);
  v99 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v100 = (char *)&v97 - v11;
  v12 = sub_214423C48();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v16);
  v105 = (uint64_t)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v18);
  v106 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_214423B70();
  v111 = *(_QWORD *)(v107 - 8);
  v20 = MEMORY[0x24BDAC7A8](v107);
  v108 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v109 = (char *)&v97 - v22;
  v112 = v13;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v114 = v12;
  v110 = v23;
  v23((char *)(v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component), a1, v12);
  v115 = a2;
  v116 = a4;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_stride) = a2;
  v117 = a4;
  if (qword_253F11B60 != -1)
    swift_once();
  v24 = (char *)off_253F11B58;
  v25 = (pthread_key_t *)((char *)off_253F11B58 + 16);
  swift_beginAccess();
  v26 = *((_QWORD *)v24 + 2);
  swift_retain();
  v27 = pthread_getspecific(v26);
  if (!v27)
  {
    v27 = (_OWORD *)swift_slowAlloc();
    pthread_setspecific(*((_QWORD *)v24 + 2), v27);
    v122 = sub_2141D8BF8(&qword_253F11C70);
    v28 = swift_allocObject();
    *(_QWORD *)&v120 = v28;
    v29 = *((_QWORD *)v24 + 4);
    v30 = v15;
    v31 = *((_QWORD *)v24 + 7);
    v32 = *(_OWORD *)(v24 + 40);
    *(_QWORD *)(v28 + 16) = *((_QWORD *)v24 + 3);
    *(_QWORD *)(v28 + 24) = v29;
    *(_OWORD *)(v28 + 32) = v32;
    *(_QWORD *)(v28 + 48) = v31;
    sub_2142CA018(&v120, v27);
    swift_bridgeObjectRetain();
    v15 = v30;
    swift_bridgeObjectRetain();
  }
  sub_21427362C((uint64_t)v27, (uint64_t)&v118);
  v33 = sub_2141D8BF8(&qword_253F11C70);
  swift_dynamicCast();
  v34 = sub_2142C6070(v116, (void (*)(uint64_t *__return_ptr))sub_2142C9FE4);
  v36 = *((_QWORD *)&v120 + 1);
  v35 = v120;
  v104 = v122;
  v37 = v121;
  v103 = v123;
  v38 = pthread_getspecific(*v25);
  if (!v38)
  {
    v38 = (_OWORD *)swift_slowAlloc();
    pthread_setspecific(*((_QWORD *)v24 + 2), v38);
    v119 = v33;
    v39 = swift_allocObject();
    *(_QWORD *)&v118 = v39;
    v97 = v37;
    v40 = v36;
    v41 = v35;
    v42 = a1;
    v43 = v15;
    v44 = *((_QWORD *)v24 + 3);
    v45 = *((_QWORD *)v24 + 4);
    v98 = v5;
    v46 = *((_QWORD *)v24 + 7);
    v47 = *(_OWORD *)(v24 + 40);
    *(_QWORD *)(v39 + 16) = v44;
    *(_QWORD *)(v39 + 24) = v45;
    *(_OWORD *)(v39 + 32) = v47;
    *(_QWORD *)(v39 + 48) = v46;
    sub_2142CA018(&v118, v38);
    v15 = v43;
    a1 = v42;
    v35 = v41;
    v36 = v40;
    v37 = v97;
    swift_bridgeObjectRetain();
    v5 = v98;
    swift_bridgeObjectRetain();
  }
  v119 = v33;
  v48 = (_QWORD *)swift_allocObject();
  *(_QWORD *)&v118 = v48;
  v48[2] = v35;
  v48[3] = v36;
  v49 = v104;
  v48[4] = v37;
  v48[5] = v49;
  v48[6] = v103;
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v38);
  sub_2142CA018(&v118, v38);
  swift_release();
  *(_QWORD *)(v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_cache) = v34;
  swift_retain();
  v50 = v105;
  v51 = v113;
  sub_2142C5CE4(a1, v113, v105);
  swift_release();
  v52 = sub_214423900();
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v50, 1, v52) == 1)
  {
    sub_2141E0750(v50, &qword_253F10FC8);
    v54 = 1;
    v55 = v112;
    v56 = v107;
    v57 = (uint64_t)v106;
  }
  else
  {
    v58 = v50;
    v57 = (uint64_t)v106;
    sub_2144238F4();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v58, v52);
    v54 = 0;
    v55 = v112;
    v56 = v107;
  }
  v59 = v111;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v57, v54, 1, v56);
  v60 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v108, v51, v56);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v56);
  v62 = v109;
  if (v61 == 1)
  {
    v63 = v60;
    v64 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    v64(v109, v63, v56);
    sub_2141E0750(v57, &qword_253F13340);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v56);
    v64 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    v64(v62, (char *)v57, v56);
  }
  v64((char *)(v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor), v62, v56);
  v65 = v114;
  v110(v15, a1, v114);
  v66 = (*(uint64_t (**)(char *, uint64_t))(v55 + 88))(v15, v65);
  if (v66 != *MEMORY[0x24BDCF240])
  {
    if (v66 != *MEMORY[0x24BDCF250])
    {
      if (v66 == *MEMORY[0x24BDCF220])
      {
        v86 = sub_214423C54();
        (*(void (**)(size_t, uint64_t))(*(_QWORD *)(v86 - 8) + 8))(v116, v86);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v56);
        v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a1, v65);
        v80 = v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
        *(_QWORD *)(v5
                  + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = 0;
        v81 = 1;
        v72 = 79200.0;
        v73 = 93600.0;
        goto LABEL_26;
      }
      if (v66 == *MEMORY[0x24BDCF230])
      {
        v87 = sub_214423C54();
        (*(void (**)(size_t, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v116, v87);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v56);
        v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a1, v65);
        v81 = 0;
        v88 = (double)v115;
        v89 = 3600.0;
      }
      else
      {
        if (v66 != *MEMORY[0x24BDCF258])
        {
          if (v66 == *MEMORY[0x24BDCF260])
          {
            v93 = sub_214423C54();
            (*(void (**)(size_t, uint64_t))(*(_QWORD *)(v93 - 8) + 8))(v116, v93);
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v56);
            v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a1, v65);
            v81 = 0;
            v80 = v5
                + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
            *(double *)(v5
                      + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = (double)v115;
            v73 = 1.0;
            v72 = 1.0;
            goto LABEL_26;
          }
          if (v66 == *MEMORY[0x24BDCF1E8])
          {
            v95 = sub_214423C54();
            (*(void (**)(size_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v116, v95);
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v56);
            v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a1, v65);
            v80 = v5
                + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
            *(_QWORD *)(v5
                      + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = 0;
            v81 = 1;
            v73 = 604800.0;
            v72 = 604800.0;
            goto LABEL_26;
          }
          result = sub_214425628();
          __break(1u);
          return result;
        }
        v90 = sub_214423C54();
        (*(void (**)(size_t, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v116, v90);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v56);
        v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a1, v65);
        v81 = 0;
        v88 = (double)v115;
        v89 = 60.0;
      }
      v73 = v89;
      v91 = v88 * v89;
      v80 = v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
      *(double *)(v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = v91;
      v72 = v73;
      goto LABEL_26;
    }
    v76 = v99;
    v77 = v56;
    v78 = v116;
    sub_214423BAC();
    v79 = sub_214423C54();
    (*(void (**)(size_t, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v78, v79);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v77);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(a1, v65);
    v71 = (*(uint64_t (**)(char *, uint64_t))(v101 + 88))(v76, v102);
    v72 = 2412000.0;
    v73 = 2685600.0;
    if (v71 == *MEMORY[0x24BDCEF70] || v71 == *MEMORY[0x24BDCEF60])
      goto LABEL_25;
    if (v71 == *MEMORY[0x24BDCEF40])
      goto LABEL_23;
    v72 = 424800.0;
    v73 = 2599200.0;
    if (v71 == *MEMORY[0x24BDCEF28] || v71 == *MEMORY[0x24BDCEF20] || v71 == *MEMORY[0x24BDCEF18])
      goto LABEL_25;
    if (v71 == *MEMORY[0x24BDCEF30])
    {
LABEL_23:
      v72 = 2498400.0;
      v75 = 0x4143D49000000000;
      goto LABEL_24;
    }
    if (v71 == *MEMORY[0x24BDCEF50])
      goto LABEL_45;
    if (v71 == *MEMORY[0x24BDCEF38])
    {
      v96 = 0xB87000000000;
    }
    else
    {
      v72 = 2498400.0;
      v73 = 2599200.0;
      if (v71 == *MEMORY[0x24BDCEF48] || v71 == *MEMORY[0x24BDCEEF8])
        goto LABEL_25;
      if (v71 == *MEMORY[0x24BDCEF68])
      {
LABEL_45:
        v92 = 0x414266F000000000;
LABEL_57:
        v72 = *(double *)&v92;
        v75 = 0x41447D5000000000;
        goto LABEL_24;
      }
      if (v71 != *MEMORY[0x24BDCEF58])
        goto LABEL_73;
      v96 = 0xFB000000000;
    }
    v92 = v96 & 0xFFFFFFFFFFFFLL | 0x4143000000000000;
    goto LABEL_57;
  }
  v67 = v100;
  v68 = v56;
  v69 = v116;
  sub_214423BAC();
  v70 = sub_214423C54();
  (*(void (**)(size_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v69, v70);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v68);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(a1, v65);
  v71 = (*(uint64_t (**)(char *, uint64_t))(v101 + 88))(v67, v102);
  v72 = 31532400.0;
  v73 = 31622400.0;
  if (v71 == *MEMORY[0x24BDCEF70] || v71 == *MEMORY[0x24BDCEF60])
    goto LABEL_25;
  if (v71 == *MEMORY[0x24BDCEF40])
  {
    v74 = 0x2A4F00000000;
LABEL_18:
    *(_QWORD *)&v72 = v74 & 0xFFFFFFFFFFFFLL | 0x417D000000000000;
    v75 = 0x417FB91800000000;
    goto LABEL_24;
  }
  v72 = 31532400.0;
  v73 = 31622400.0;
  if (v71 == *MEMORY[0x24BDCEF28] || v71 == *MEMORY[0x24BDCEF20] || v71 == *MEMORY[0x24BDCEF18])
    goto LABEL_25;
  if (v71 == *MEMORY[0x24BDCEF30])
  {
    v74 = 0x153700000000;
    goto LABEL_18;
  }
  v72 = 31532400.0;
  v73 = 31622400.0;
  if (v71 == *MEMORY[0x24BDCEF50] || v71 == *MEMORY[0x24BDCEF38])
    goto LABEL_25;
  if (v71 == *MEMORY[0x24BDCEF48])
  {
    v94 = 0x161800000000;
LABEL_60:
    *(_QWORD *)&v72 = v94 & 0xFFFFFFFFFFFFLL | 0x417D000000000000;
    v75 = 0x417D412900000000;
    goto LABEL_24;
  }
  if (v71 == *MEMORY[0x24BDCEEF8])
    goto LABEL_59;
  v72 = 31532400.0;
  v73 = 31622400.0;
  if (v71 == *MEMORY[0x24BDCEF68] || v71 == *MEMORY[0x24BDCEF58] || v71 == *MEMORY[0x24BDCEF08])
    goto LABEL_25;
  if (v71 == *MEMORY[0x24BDCEF00])
  {
LABEL_59:
    v94 = 0x2A4F00000000;
    goto LABEL_60;
  }
  if (v71 != *MEMORY[0x24BDCEF10])
  {
    v71 = (*(uint64_t (**)(char *, uint64_t, double, double))(v101 + 8))(v100, v102, 31532400.0, 31622400.0);
    v74 = 0x161800000000;
    goto LABEL_18;
  }
  v72 = 30582000.0;
  v75 = 0x417D556000000000;
LABEL_24:
  v73 = *(double *)&v75;
LABEL_25:
  while (1)
  {
    v80 = v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
    *(_QWORD *)(v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = 0;
    v81 = 1;
LABEL_26:
    *(_BYTE *)(v80 + 8) = v81;
    v82 = v72 * (double)v115;
    v83 = v73 * (double)v115;
    if (v82 <= v83)
      break;
    __break(1u);
LABEL_73:
    if (v71 == *MEMORY[0x24BDCEF08])
      goto LABEL_45;
    v72 = 2498400.0;
    v73 = 2599200.0;
    if (v71 != *MEMORY[0x24BDCEF00] && v71 != *MEMORY[0x24BDCEF10])
    {
      v71 = (*(uint64_t (**)(char *, uint64_t, double, double))(v101 + 8))(v99, v102, 2498400.0, 2599200.0);
      goto LABEL_45;
    }
  }
  v84 = (double *)(v5 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_durationBounds);
  *v84 = v82;
  v84[1] = v83;
  return v5;
}

uint64_t sub_2142C78B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component;
  v2 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor;
  v4 = sub_214423B70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_2142C7938()
{
  return type metadata accessor for CalendarBinningImpl(0);
}

uint64_t type metadata accessor for CalendarBinningImpl(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F11498);
}

uint64_t sub_2142C7954()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_214423C48();
  if (v1 <= 0x3F)
  {
    result = sub_214423B70();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t *sub_2142C7A08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = sub_214423900();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        v14 = sub_2141D8BF8(&qword_253F10FC8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = sub_214423B70();
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_2141D8BF8(&qword_253F13340);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_2142C7BA8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = sub_214423900();
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v3 = sub_214423B70();
  }
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return result;
}

void *sub_2142C7C2C(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v10 = sub_214423900();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      v12 = sub_2141D8BF8(&qword_253F10FC8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(a1, a2, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = sub_214423B70();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_2141D8BF8(&qword_253F13340);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *sub_2142C7DA4(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for CalendarCache.Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = sub_214423900();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = sub_2141D8BF8(&qword_253F10FC8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = sub_214423B70();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_2141D8BF8(&qword_253F13340);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for CalendarCache.Value(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F11180);
}

void *sub_2142C7F48(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v10 = sub_214423900();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      v12 = sub_2141D8BF8(&qword_253F10FC8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(a1, a2, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = sub_214423B70();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_2141D8BF8(&qword_253F13340);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *sub_2142C80C0(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for CalendarCache.Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = sub_214423900();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = sub_2141D8BF8(&qword_253F10FC8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(a1, a2, v10);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = sub_214423B70();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_2141D8BF8(&qword_253F13340);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_2142C8250()
{
  unint64_t v0;
  unint64_t v1;

  sub_21420E5A4(319, &qword_253F10FE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    sub_21420E5A4(319, &qword_253F10FD0, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

char *sub_2142C82F8(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v15 = sub_214423C48();
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v16 = sub_2141D8BF8(qword_253F0FEA0);
      *(_QWORD *)&a1[*(int *)(v16 + 48)] = *(uint64_t *)((char *)a2 + *(int *)(v16 + 48));
      v17 = *(int *)(v16 + 64);
      v18 = &a1[v17];
      v19 = (char *)a2 + v17;
      v20 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_214423C48();
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = sub_2141D8BF8(&qword_253F0FE98);
      v9 = *(int *)(v8 + 48);
      v10 = &a1[v9];
      v11 = (char *)a2 + v9;
      v12 = sub_214423B70();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(v10, v11, v12);
      v13(&a1[*(int *)(v8 + 64)], (char *)a2 + *(int *)(v8 + 64), v12);
    }
    else
    {
      v21 = sub_214423C48();
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
      v22 = *(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48);
      v23 = &a1[v22];
      v24 = (char *)a2 + v22;
      v25 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2142C84E0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v5 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    v4 = *(int *)(sub_2141D8BF8(qword_253F0FEA0) + 64);
LABEL_6:
    v6 = a1 + v4;
    v7 = sub_214423B70();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    v3 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = *(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48);
    goto LABEL_6;
  }
  v8 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  v9 = sub_2141D8BF8(&qword_253F0FE98);
  v10 = a1 + *(int *)(v9 + 48);
  v11 = sub_214423B70();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)(a1 + *(int *)(v9 + 64), v11);
}

uint64_t sub_2142C8620(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v12 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v13 = sub_2141D8BF8(qword_253F0FEA0);
    *(_QWORD *)(a1 + *(int *)(v13 + 48)) = *(_QWORD *)(a2 + *(int *)(v13 + 48));
    v14 = *(int *)(v13 + 64);
LABEL_6:
    v16 = a1 + v14;
    v17 = a2 + v14;
    v18 = sub_214423B70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v15 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
    v14 = *(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48);
    goto LABEL_6;
  }
  v5 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  v6 = sub_2141D8BF8(&qword_253F0FE98);
  v7 = *(int *)(v6 + 48);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423B70();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_2142C87A8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_2141DD370(a1, type metadata accessor for CalendarCache.Key);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = sub_214423C48();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = sub_2141D8BF8(qword_253F0FEA0);
      *(_QWORD *)(a1 + *(int *)(v13 + 48)) = *(_QWORD *)(a2 + *(int *)(v13 + 48));
      v14 = *(int *)(v13 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = sub_214423C48();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = sub_2141D8BF8(&qword_253F0FE98);
        v7 = *(int *)(v6 + 48);
        v8 = a1 + v7;
        v9 = a2 + v7;
        v10 = sub_214423B70();
        v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
        v11(v8, v9, v10);
        v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v15 = sub_214423C48();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v14 = *(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48);
    }
    v16 = a1 + v14;
    v17 = a2 + v14;
    v18 = sub_214423B70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    goto LABEL_8;
  }
  return a1;
}

uint64_t type metadata accessor for CalendarCache.Key(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F110C8);
}

uint64_t sub_2142C895C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v12 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    v13 = sub_2141D8BF8(qword_253F0FEA0);
    *(_QWORD *)(a1 + *(int *)(v13 + 48)) = *(_QWORD *)(a2 + *(int *)(v13 + 48));
    v14 = *(int *)(v13 + 64);
LABEL_6:
    v16 = a1 + v14;
    v17 = a2 + v14;
    v18 = sub_214423B70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v15 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
    v14 = *(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48);
    goto LABEL_6;
  }
  v5 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  v6 = sub_2141D8BF8(&qword_253F0FE98);
  v7 = *(int *)(v6 + 48);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423B70();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_2142C8AE4(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_2141DD370(a1, type metadata accessor for CalendarCache.Key);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = sub_214423C48();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = sub_2141D8BF8(qword_253F0FEA0);
      *(_QWORD *)(a1 + *(int *)(v13 + 48)) = *(_QWORD *)(a2 + *(int *)(v13 + 48));
      v14 = *(int *)(v13 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = sub_214423C48();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
        v6 = sub_2141D8BF8(&qword_253F0FE98);
        v7 = *(int *)(v6 + 48);
        v8 = a1 + v7;
        v9 = a2 + v7;
        v10 = sub_214423B70();
        v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
        v11(v8, v9, v10);
        v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v15 = sub_214423C48();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
      v14 = *(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48);
    }
    v16 = a1 + v14;
    v17 = a2 + v14;
    v18 = sub_214423B70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_2142C8C84()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v5;
  char v6;
  char v7;
  char *v8;
  char *v9;
  char *v10;

  v0 = sub_214423C48();
  if (v1 <= 0x3F)
  {
    v2 = sub_214423B70();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v8 = &v7;
      swift_getTupleTypeLayout3();
      v9 = &v6;
      swift_getTupleTypeLayout3();
      v10 = &v5;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_2142C8D70(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_214423C48();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_214423B70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_214423C54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  swift_retain();
  return a1;
}

uint64_t sub_2142C8E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = sub_214423B70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_release();
}

uint64_t sub_2142C8EF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423B70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  return a1;
}

uint64_t sub_2142C8FBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423B70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2142C9094(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423B70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_2142C9158(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423B70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t sub_2142C9224()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142C9230(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_214423C48();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_214423B70();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_214423C54();
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_2142C92FC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142C9308(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_214423C48();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_214423B70();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_214423C54();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CalendarBinningUnit(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15D68);
}

uint64_t sub_2142C93E4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_214423C48();
  if (v1 <= 0x3F)
  {
    result = sub_214423B70();
    if (v2 <= 0x3F)
    {
      result = sub_214423C54();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_2142C949C()
{
  return sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
}

uint64_t sub_2142C94C8(uint64_t a1)
{
  uint64_t result;

  result = sub_2141FED10(&qword_254D6A8B8, type metadata accessor for CalendarBinningUnit, (uint64_t)&unk_21442AC84);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2142C9504()
{
  return sub_2141FED10(qword_253F11098, type metadata accessor for CalendarCache.Key, (uint64_t)&unk_21442ACC8);
}

uint64_t sub_2142C9530(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int EnumCaseMultiPayload;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  void (*v99)(char *, uint64_t);
  char *v100;
  void (*v101)(char *, uint64_t);
  void (*v102)(uint64_t, uint64_t);
  char *v103;
  uint64_t v104;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;

  v116 = (char *)a1;
  v117 = (char *)a2;
  v115 = sub_214423B70();
  v119 = *(_QWORD *)(v115 - 8);
  v2 = MEMORY[0x24BDAC7A8](v115);
  v109 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v111 = (char *)&v106 - v5;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v110 = (char *)&v106 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v107 = (char *)&v106 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v112 = (char *)&v106 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v113 = (char *)&v106 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v106 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v106 - v17;
  v118 = sub_214423C48();
  v114 = *(_QWORD *)(v118 - 8);
  v19 = MEMORY[0x24BDAC7A8](v118);
  v106 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v108 = (char *)&v106 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v106 - v23;
  v25 = type metadata accessor for CalendarCache.Key(0);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v106 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v106 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v106 - v32;
  v34 = sub_2141D8BF8(&qword_253F11148);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v106 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = (uint64_t)&v37[*(int *)(v35 + 48)];
  sub_2141FDEA0((uint64_t)v116, (uint64_t)v37, type metadata accessor for CalendarCache.Key);
  sub_2141FDEA0((uint64_t)v117, v38, type metadata accessor for CalendarCache.Key);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v117 = v16;
    v66 = (uint64_t)v18;
    sub_2141FDEA0((uint64_t)v37, (uint64_t)v33, type metadata accessor for CalendarCache.Key);
    v67 = *(int *)(sub_2141D8BF8(&qword_253F10FF8) + 48);
    v68 = &v33[v67];
    if (!swift_getEnumCaseMultiPayload())
    {
      v89 = (char *)(v38 + v67);
      v90 = v114;
      v91 = v118;
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v24, v38, v118);
      v92 = v119;
      v93 = *(void (**)(uint64_t, char *, uint64_t))(v119 + 32);
      v94 = v66;
      v116 = (char *)v66;
      v95 = v115;
      v93(v94, v68, v115);
      v96 = (uint64_t)v117;
      v93((uint64_t)v117, v89, v95);
      LOBYTE(v89) = sub_214423C3C();
      v55 = *(void (**)(char *, uint64_t))(v90 + 8);
      v55(v33, v91);
      if ((v89 & 1) != 0)
      {
        v97 = (uint64_t)v116;
        v62 = sub_214423B40();
        v98 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
        v98(v96, v95);
        v98(v97, v95);
        v64 = v24;
        v65 = v91;
        goto LABEL_18;
      }
      v102 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
      v102(v96, v95);
      v102((uint64_t)v116, v95);
      v103 = v24;
      v104 = v91;
      goto LABEL_26;
    }
    (*(void (**)(char *, uint64_t))(v119 + 8))(&v33[v67], v115);
LABEL_15:
    (*(void (**)(char *, uint64_t))(v114 + 8))(v33, v118);
    sub_2141E0750((uint64_t)v37, &qword_253F11148);
LABEL_27:
    v62 = 0;
    return v62 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_2141FDEA0((uint64_t)v37, (uint64_t)v28, type metadata accessor for CalendarCache.Key);
    v69 = sub_2141D8BF8(qword_253F0FEA0);
    v70 = *(int *)(v69 + 48);
    v71 = *(_QWORD *)&v28[v70];
    v72 = *(int *)(v69 + 64);
    v73 = &v28[v72];
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v116 = *(char **)(v38 + v70);
      v117 = (char *)v71;
      v74 = (char *)(v38 + v72);
      v75 = v114;
      v76 = v106;
      v77 = v38;
      v78 = v118;
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v106, v77, v118);
      v79 = v119;
      v80 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
      v81 = v115;
      v80(v111, v73, v115);
      v82 = v109;
      v80(v109, v74, v81);
      v83 = v76;
      LOBYTE(v74) = sub_214423C3C();
      v55 = *(void (**)(char *, uint64_t))(v75 + 8);
      v55(v28, v78);
      if ((v74 & 1) != 0)
      {
        if (v117 == v116)
        {
          v84 = v111;
          v85 = v109;
          v62 = sub_214423B40();
          v86 = *(void (**)(char *, uint64_t))(v79 + 8);
          v86(v85, v81);
          v86(v84, v81);
          v64 = v83;
          v65 = v78;
          goto LABEL_18;
        }
        v101 = *(void (**)(char *, uint64_t))(v79 + 8);
        v101(v109, v81);
      }
      else
      {
        v101 = *(void (**)(char *, uint64_t))(v79 + 8);
        v101(v82, v81);
      }
      v101(v111, v81);
      v103 = v76;
      v104 = v78;
      goto LABEL_26;
    }
    (*(void (**)(char *, uint64_t))(v119 + 8))(&v28[v72], v115);
    v33 = v28;
    goto LABEL_15;
  }
  sub_2141FDEA0((uint64_t)v37, (uint64_t)v31, type metadata accessor for CalendarCache.Key);
  v40 = sub_2141D8BF8(&qword_253F0FE98);
  v41 = *(int *)(v40 + 48);
  v42 = &v31[v41];
  v43 = *(int *)(v40 + 64);
  v44 = &v31[v43];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v87 = *(void (**)(char *, uint64_t))(v119 + 8);
    v88 = v115;
    v87(&v31[v43], v115);
    v87(&v31[v41], v88);
    v33 = v31;
    goto LABEL_15;
  }
  v45 = (char *)(v38 + v41);
  v117 = (char *)(v38 + v43);
  v46 = v114;
  v47 = v108;
  v48 = v38;
  v49 = v118;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v108, v48, v118);
  v50 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
  v51 = v115;
  v50(v113, v42, v115);
  v50(v112, v44, v51);
  v52 = v107;
  v50(v107, v45, v51);
  v53 = v110;
  v50(v110, v117, v51);
  v54 = v47;
  LOBYTE(v45) = sub_214423C3C();
  v55 = *(void (**)(char *, uint64_t))(v46 + 8);
  v56 = v31;
  v57 = v49;
  v55(v56, v49);
  if ((v45 & 1) == 0)
  {
    v99 = *(void (**)(char *, uint64_t))(v119 + 8);
    v99(v53, v51);
    v99(v52, v51);
    v99(v112, v51);
    v100 = v113;
LABEL_23:
    v99(v100, v51);
    v103 = v54;
    v104 = v57;
LABEL_26:
    v55(v103, v104);
    sub_2141DD370((uint64_t)v37, type metadata accessor for CalendarCache.Key);
    goto LABEL_27;
  }
  v58 = v119;
  v59 = v113;
  if ((sub_214423B40() & 1) == 0)
  {
    v99 = *(void (**)(char *, uint64_t))(v58 + 8);
    v99(v110, v51);
    v99(v52, v51);
    v99(v112, v51);
    v100 = v59;
    goto LABEL_23;
  }
  v60 = v112;
  v61 = v110;
  v62 = sub_214423B40();
  v63 = *(void (**)(char *, uint64_t))(v58 + 8);
  v63(v61, v51);
  v63(v52, v51);
  v63(v60, v51);
  v63(v59, v51);
  v64 = v108;
  v65 = v118;
LABEL_18:
  v55(v64, v65);
  sub_2141DD370((uint64_t)v37, type metadata accessor for CalendarCache.Key);
  return v62 & 1;
}

uint64_t sub_2142C9CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142C9D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  char v29;
  char *v31;
  uint64_t v32;

  v32 = type metadata accessor for CalendarBinningUnit(0);
  v4 = MEMORY[0x24BDAC7A8](v32);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v31 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v31 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v31 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v31 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v31 - v19;
  v21 = sub_214423C3C();
  sub_2141FDEA0(a1, (uint64_t)v20, type metadata accessor for CalendarBinningUnit);
  sub_2141FDEA0(a2, (uint64_t)v18, type metadata accessor for CalendarBinningUnit);
  if ((v21 & 1) == 0)
  {
    sub_2141DD370((uint64_t)v18, type metadata accessor for CalendarBinningUnit);
    sub_2141DD370((uint64_t)v20, type metadata accessor for CalendarBinningUnit);
    sub_2141FDEA0(a1, (uint64_t)v15, type metadata accessor for CalendarBinningUnit);
    sub_2141FDEA0(a2, (uint64_t)v12, type metadata accessor for CalendarBinningUnit);
LABEL_7:
    sub_2141DD370((uint64_t)v12, type metadata accessor for CalendarBinningUnit);
    sub_2141DD370((uint64_t)v15, type metadata accessor for CalendarBinningUnit);
    sub_2141FDEA0(a1, (uint64_t)v9, type metadata accessor for CalendarBinningUnit);
    sub_2141FDEA0(a2, (uint64_t)v6, type metadata accessor for CalendarBinningUnit);
    goto LABEL_8;
  }
  v22 = v32;
  v23 = *(int *)(v32 + 20);
  v31 = v9;
  v24 = v6;
  v25 = *(_QWORD *)&v20[v23];
  sub_2141DD370((uint64_t)v20, type metadata accessor for CalendarBinningUnit);
  v26 = *(_QWORD *)&v18[*(int *)(v22 + 20)];
  sub_2141DD370((uint64_t)v18, type metadata accessor for CalendarBinningUnit);
  sub_2141FDEA0(a1, (uint64_t)v15, type metadata accessor for CalendarBinningUnit);
  sub_2141FDEA0(a2, (uint64_t)v12, type metadata accessor for CalendarBinningUnit);
  v27 = v25 == v26;
  v6 = v24;
  v9 = v31;
  if (!v27)
    goto LABEL_7;
  v28 = sub_214423B40();
  sub_2141DD370((uint64_t)v12, type metadata accessor for CalendarBinningUnit);
  sub_2141DD370((uint64_t)v15, type metadata accessor for CalendarBinningUnit);
  sub_2141FDEA0(a1, (uint64_t)v9, type metadata accessor for CalendarBinningUnit);
  sub_2141FDEA0(a2, (uint64_t)v6, type metadata accessor for CalendarBinningUnit);
  if ((v28 & 1) == 0)
  {
LABEL_8:
    v29 = 0;
    goto LABEL_9;
  }
  v29 = MEMORY[0x2199CB528](&v9[*(int *)(v22 + 28)], &v6[*(int *)(v22 + 28)]);
LABEL_9:
  sub_2141DD370((uint64_t)v6, type metadata accessor for CalendarBinningUnit);
  sub_2141DD370((uint64_t)v9, type metadata accessor for CalendarBinningUnit);
  return v29 & 1;
}

uint64_t sub_2142C9FE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_2142C6848(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2142C9FEC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_OWORD *sub_2142CA018(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_2142CA028()
{
  return sub_2142C5ED0();
}

uint64_t sub_2142CA034()
{
  return sub_2142C673C();
}

uint64_t sub_2142CA040@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_2142C63B8(v1[3], v1[4], v1[5], a1);
}

uint64_t sub_2142CA04C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD);
  void (*v29)(_QWORD, _QWORD);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  int v37;
  char *v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD, _QWORD);
  char *v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(_QWORD, _QWORD, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int *v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD);
  char *v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(_QWORD, _QWORD, _QWORD);
  uint64_t v77;
  char *v78;
  void (*v79)(_QWORD, _QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(_QWORD, _QWORD, _QWORD);
  void (*v94)(_QWORD, _QWORD, _QWORD);
  uint64_t v95;
  void (*v96)(_QWORD, _QWORD, _QWORD);
  unint64_t v97;
  unint64_t v98;
  char *v99;
  void (*v100)(_QWORD, _QWORD, _QWORD);
  void (*v101)(_QWORD, _QWORD, _QWORD);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  size_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void (*v119)(_QWORD, _QWORD, _QWORD);
  void (*v120)(_QWORD, _QWORD, _QWORD);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  void (*v126)(_QWORD, _QWORD, _QWORD);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(_QWORD, _QWORD, _QWORD);
  uint64_t v135;
  uint64_t v136;
  size_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  int *v145;
  unint64_t v146;
  char *v147;
  void (*v148)(_QWORD, _QWORD, _QWORD);
  void (*v149)(_QWORD, _QWORD, _QWORD);
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  unint64_t v154;
  char *v155;
  void (*v156)(_QWORD, _QWORD, _QWORD);
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  size_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  void (*v171)(_QWORD, _QWORD, _QWORD);
  uint64_t v172;
  void (*v173)(_QWORD, _QWORD, _QWORD);
  char *v174;
  void (*v175)(_QWORD, _QWORD, _QWORD);
  int *v176;
  uint64_t v177;
  void (*v178)(_QWORD, _QWORD, _QWORD);
  uint64_t v179;
  uint64_t v180;
  void (*v181)(_QWORD, _QWORD, _QWORD);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  size_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  int *v191;
  uint64_t v192;
  char *v193;
  void (*v194)(_QWORD, _QWORD, _QWORD);
  void (*v195)(_QWORD, _QWORD, _QWORD);
  char *v196;
  void (*v197)(_QWORD, _QWORD, _QWORD);
  uint64_t v198;
  char *v199;
  void (*v200)(_QWORD, _QWORD, _QWORD);
  uint64_t v201;
  char *v202;
  void (*v203)(_QWORD, _QWORD, _QWORD);
  uint64_t v204;
  uint64_t v205;
  size_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  int *v211;
  unint64_t v212;
  uint64_t v213;
  void (*v214)(_QWORD, _QWORD, _QWORD);
  void (*v215)(_QWORD, _QWORD, _QWORD);
  char *v216;
  uint64_t v217;
  void (*v218)(_QWORD, _QWORD, _QWORD);
  unint64_t v219;
  unint64_t v220;
  char *v221;
  void (*v222)(_QWORD, _QWORD, _QWORD);
  unint64_t v223;
  char *v224;
  void (*v225)(_QWORD, _QWORD, _QWORD);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  size_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  int *v237;
  unint64_t v238;
  char *v239;
  char *v240;
  void (*v241)(_QWORD, _QWORD, _QWORD);
  char *v242;
  void (*v243)(_QWORD, _QWORD, _QWORD);
  uint64_t v244;
  uint64_t v245;
  void (*v246)(_QWORD, _QWORD, _QWORD);
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  size_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  void (*v266)(_QWORD, _QWORD, _QWORD);
  char *v267;
  void (*v268)(_QWORD, _QWORD, _QWORD);
  char *v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(_QWORD, _QWORD, _QWORD);
  int *v273;
  uint64_t v274;
  uint64_t v275;
  void (*v276)(_QWORD, _QWORD, _QWORD);
  uint64_t v277;
  uint64_t v278;
  char *v279;
  void (*v280)(_QWORD, _QWORD, _QWORD);
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  size_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  int *v291;
  uint64_t v292;
  char *v293;
  void (*v294)(_QWORD, _QWORD, _QWORD);
  void (*v295)(_QWORD, _QWORD, _QWORD);
  char *v296;
  uint64_t v297;
  void (*v298)(_QWORD, _QWORD, _QWORD);
  uint64_t v299;
  uint64_t v300;
  void (*v301)(_QWORD, _QWORD, _QWORD);
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  size_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  void (*v311)(_QWORD, _QWORD, _QWORD);
  void (*v312)(_QWORD, _QWORD, _QWORD);
  void (*v313)(_QWORD, _QWORD, _QWORD);
  int *v314;
  int *v315;
  uint64_t v316;
  char *v317;
  void (*v318)(_QWORD, _QWORD, _QWORD);
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  size_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  char *v329;
  int *v330;
  uint64_t v331;
  void (*v332)(_QWORD, _QWORD, _QWORD);
  char *v333;
  uint64_t v334;
  void (*v335)(_QWORD, _QWORD, _QWORD);
  char *v336;
  uint64_t v337;
  uint64_t v338;
  void (*v339)(_QWORD, _QWORD, _QWORD);
  int *v340;
  uint64_t v341;
  char *v342;
  char *v343;
  void (*v344)(_QWORD, _QWORD, _QWORD);
  uint64_t v345;
  char *v346;
  uint64_t v347;
  size_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  void (*v355)(_QWORD, _QWORD, _QWORD);
  char *v356;
  uint64_t v357;
  void (*v358)(_QWORD, _QWORD, _QWORD);
  char *v359;
  uint64_t v360;
  uint64_t v361;
  void (*v362)(_QWORD, _QWORD, _QWORD);
  int *v363;
  int *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  void (*v369)(_QWORD, _QWORD, _QWORD);
  uint64_t v370;
  uint64_t v371;
  size_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  int *v377;
  uint64_t v378;
  uint64_t v379;
  void (*v380)(_QWORD, _QWORD, _QWORD);
  char *v381;
  uint64_t v382;
  void (*v383)(_QWORD, _QWORD, _QWORD);
  char *v384;
  uint64_t v385;
  uint64_t v386;
  void (*v387)(_QWORD, _QWORD, _QWORD);
  uint64_t v388;
  void (*v389)(_QWORD, _QWORD, _QWORD);
  char *v390;
  void (*v391)(_QWORD, _QWORD, _QWORD);
  uint64_t v392;
  uint64_t v393;
  char *v394;
  size_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  int *v401;
  unint64_t v402;
  char *v403;
  uint64_t v404;
  void (*v405)(_QWORD, _QWORD, _QWORD);
  uint64_t v406;
  void (*v407)(_QWORD, _QWORD, _QWORD);
  char *v408;
  char *v409;
  void (*v410)(_QWORD, _QWORD, _QWORD);
  unint64_t v411;
  unint64_t v412;
  char *v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  void (*v417)(_QWORD, _QWORD, _QWORD);
  uint64_t v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  size_t v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  char *v428;
  int *v429;
  unint64_t v430;
  void (*v431)(_QWORD, _QWORD, _QWORD);
  void (*v432)(_QWORD, _QWORD, _QWORD);
  uint64_t v433;
  void (*v434)(_QWORD, _QWORD, _QWORD);
  int *v435;
  unint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  char *v440;
  void (*v441)(_QWORD, _QWORD, _QWORD);
  uint64_t v442;
  uint64_t v443;
  char *v444;
  size_t v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  char *v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  char *v453;
  void (*v454)(_QWORD, _QWORD, _QWORD);
  void (*v455)(_QWORD, _QWORD, _QWORD);
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  void (*v459)(_QWORD, _QWORD, _QWORD);
  uint64_t v460;
  char *v461;
  void (*v462)(_QWORD, _QWORD, _QWORD);
  uint64_t v463;
  char *v464;
  uint64_t v465;
  void (*v466)(_QWORD, _QWORD, _QWORD);
  uint64_t v467;
  uint64_t v468;
  size_t v469;
  char *v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  char *v474;
  uint64_t v475;
  int *v476;
  uint64_t v477;
  char *v478;
  void (*v479)(_QWORD, _QWORD, _QWORD);
  uint64_t v480;
  void (*v481)(_QWORD, _QWORD, _QWORD);
  char *v482;
  char *v483;
  uint64_t v484;
  void (*v485)(_QWORD, _QWORD, _QWORD);
  uint64_t v486;
  int *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  char *v491;
  void (*v492)(_QWORD, _QWORD, _QWORD);
  uint64_t v493;
  uint64_t v494;
  char *v495;
  size_t v496;
  char *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  char *v501;
  uint64_t v502;
  int *v503;
  uint64_t v504;
  char *v505;
  uint64_t v506;
  void (*v507)(_QWORD, _QWORD, _QWORD);
  void (*v508)(_QWORD, _QWORD, _QWORD);
  char *v509;
  uint64_t v510;
  void (*v511)(_QWORD, _QWORD, _QWORD);
  uint64_t v512;
  int *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  void (*v517)(_QWORD, _QWORD, _QWORD);
  uint64_t v518;
  uint64_t v519;
  char *v520;
  void (*v521)(_QWORD, _QWORD, _QWORD);
  uint64_t v522;
  uint64_t v523;
  char *v524;
  uint64_t v525;
  size_t v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  uint64_t v530;
  char *v531;
  uint64_t v532;
  int *v533;
  unint64_t v534;
  void (*v535)(_QWORD, _QWORD, _QWORD);
  void (*v536)(_QWORD, _QWORD, _QWORD);
  char *v537;
  uint64_t v538;
  void (*v539)(_QWORD, _QWORD, _QWORD);
  unint64_t v540;
  unint64_t v541;
  char *v542;
  unint64_t v543;
  uint64_t v544;
  char *v545;
  void (*v546)(_QWORD, _QWORD, _QWORD);
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  size_t v550;
  char *v551;
  uint64_t v552;
  uint64_t v553;
  char *v554;
  unint64_t v555;
  void (*v556)(_QWORD, _QWORD, _QWORD);
  char *v557;
  void (*v558)(_QWORD, _QWORD, _QWORD);
  char *v559;
  uint64_t v560;
  void (*v561)(_QWORD, _QWORD, _QWORD);
  int *v562;
  int *v563;
  unint64_t v564;
  void (*v565)(_QWORD, _QWORD, _QWORD);
  char *v566;
  uint64_t v567;
  uint64_t v568;
  char *v569;
  char *v570;
  uint64_t v571;
  size_t v572;
  char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  char *v578;
  int *v579;
  unint64_t v580;
  void (*v581)(_QWORD, _QWORD, _QWORD);
  char *v582;
  char *v583;
  char *v584;
  uint64_t v585;
  void (*v586)(_QWORD, _QWORD, _QWORD);
  unint64_t v587;
  unint64_t v588;
  uint64_t v589;
  unint64_t v590;
  char *v591;
  uint64_t v592;
  void (*v593)(_QWORD, _QWORD, _QWORD);
  uint64_t v594;
  uint64_t v595;
  char *v596;
  size_t v597;
  uint64_t v598;
  char *v599;
  uint64_t v600;
  uint64_t v601;
  char *v602;
  unint64_t v603;
  char *v604;
  void (*v605)(_QWORD, _QWORD, _QWORD);
  char *v606;
  char *v607;
  uint64_t v608;
  void (*v609)(_QWORD, _QWORD, _QWORD);
  void (*v610)(_QWORD, _QWORD, _QWORD);
  int *v611;
  int *v612;
  unint64_t v613;
  char *v614;
  uint64_t v615;
  uint64_t v616;
  size_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  char *v621;
  uint64_t v622;
  int *v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  void (*v627)(_QWORD, _QWORD, _QWORD);
  char *v628;
  uint64_t v629;
  void (*v630)(_QWORD, _QWORD, _QWORD);
  char *v631;
  char *v632;
  void (*v633)(_QWORD, _QWORD, _QWORD);
  unint64_t v634;
  char *v635;
  uint64_t v636;
  void (*v637)(_QWORD, _QWORD, _QWORD);
  unint64_t v638;
  char *v639;
  uint64_t v640;
  uint64_t v641;
  char *v642;
  size_t v643;
  uint64_t v644;
  char *v645;
  uint64_t v646;
  uint64_t v647;
  char *v648;
  unint64_t v649;
  void (*v650)(_QWORD, _QWORD, _QWORD);
  char *v651;
  void (*v652)(_QWORD, _QWORD, _QWORD);
  void (*v653)(_QWORD, _QWORD, _QWORD);
  int *v654;
  int *v655;
  unint64_t v656;
  char *v657;
  void (*v658)(_QWORD, _QWORD, _QWORD);
  unint64_t v659;
  char *v660;
  uint64_t v661;
  void (*v662)(_QWORD, _QWORD, _QWORD);
  uint64_t v663;
  char *v664;
  uint64_t v665;
  size_t v666;
  uint64_t v667;
  char *v668;
  uint64_t v669;
  int *v670;
  unint64_t v671;
  void (*v672)(_QWORD, _QWORD, _QWORD);
  uint64_t v673;
  uint64_t v674;
  void (*v675)(_QWORD, _QWORD, _QWORD);
  char *v676;
  void (*v677)(_QWORD, _QWORD, _QWORD);
  int *v678;
  unint64_t v679;
  unint64_t v680;
  char *v681;
  void (*v682)(_QWORD, _QWORD, _QWORD);
  unint64_t v683;
  char *v684;
  uint64_t v685;
  uint64_t v686;
  void (*v687)(_QWORD, _QWORD, _QWORD);
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  size_t v691;
  uint64_t v692;
  char *v693;
  char *v694;
  uint64_t v695;
  int *v696;
  unint64_t v697;
  char *v698;
  void (*v699)(_QWORD, _QWORD, _QWORD);
  void (*v700)(_QWORD, _QWORD, _QWORD);
  char *v701;
  void (*v702)(_QWORD, _QWORD, _QWORD);
  unint64_t v703;
  char *v704;
  uint64_t v705;
  unint64_t v706;
  char *v707;
  void (*v708)(_QWORD, _QWORD, _QWORD);
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  size_t v712;
  uint64_t v713;
  char *v714;
  char *v715;
  char *v716;
  uint64_t v717;
  char *v718;
  uint64_t v719;
  int *v720;
  unint64_t v721;
  char *v722;
  uint64_t v723;
  void (*v724)(_QWORD, _QWORD, _QWORD);
  char *v725;
  char *v726;
  uint64_t v727;
  void (*v728)(_QWORD, _QWORD, _QWORD);
  uint64_t v729;
  void (*v730)(_QWORD, _QWORD, _QWORD);
  unint64_t v731;
  char *v732;
  unint64_t v733;
  uint64_t v734;
  void (*v735)(_QWORD, _QWORD, _QWORD);
  uint64_t v736;
  uint64_t v737;
  size_t v738;
  uint64_t v739;
  uint64_t v740;
  char *v741;
  int *v742;
  unint64_t v743;
  char *v744;
  uint64_t v745;
  void (*v746)(_QWORD, _QWORD, _QWORD);
  void (*v747)(_QWORD, _QWORD, _QWORD);
  char *v748;
  void (*v749)(_QWORD, _QWORD, _QWORD);
  unint64_t v750;
  char *v751;
  uint64_t v752;
  unint64_t v753;
  char *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  size_t v759;
  uint64_t v760;
  void (*v761)(_QWORD, _QWORD);
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  char *v768;
  unsigned int v769;
  uint64_t v770;
  uint64_t v771;
  char *v772;
  char *v773;
  uint64_t v774;
  uint64_t v775;
  void (*v776)(_QWORD, _QWORD, _QWORD);
  void (*v777)(_QWORD, _QWORD, _QWORD);
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t v781;
  void (*v782)(_QWORD, _QWORD, _QWORD);
  void (*v783)(_QWORD);
  void (*v784)(_QWORD, _QWORD);
  char *v785;
  uint64_t v786;
  char *v787;
  char *v788;
  int *v789;
  uint64_t v790;
  char *v791;

  v771 = sub_214423C54();
  v781 = *(_QWORD *)(v771 - 8);
  v4 = MEMORY[0x24BDAC7A8](v771);
  v788 = (char *)&v763 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v772 = (char *)&v763 - v6;
  v7 = sub_214423C48();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v787 = (char *)&v763 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v763 - v11;
  v13 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v763 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v763 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_214423B70();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v785 = (char *)&v763 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v773 = (char *)&v763 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v789 = (int *)((char *)&v763 - v26);
  MEMORY[0x24BDAC7A8](v25);
  v768 = (char *)&v763 - v27;
  v28 = *(void (**)(_QWORD))(v8 + 104);
  v769 = *MEMORY[0x24BDCF240];
  v783 = v28;
  v28(v12);
  v775 = a1;
  v786 = a2;
  sub_214423BB8();
  v780 = v8;
  v29 = *(void (**)(_QWORD, _QWORD))(v8 + 8);
  v791 = v12;
  v30 = v12;
  v31 = v7;
  v784 = v29;
  v29(v30, v7);
  v32 = sub_214423900();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v15, 1, v32) == 1)
  {
    sub_2141E0750((uint64_t)v15, &qword_253F10FC8);
    v34 = 1;
  }
  else
  {
    sub_2144238F4();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v32);
    v34 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, v34, 1, v19);
  v35 = v789;
  v36 = *(void (**)(_QWORD, _QWORD, _QWORD))(v20 + 16);
  v36(v789, v775, v19);
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  v38 = v768;
  v766 = v20;
  if (v37 == 1)
  {
    (*(void (**)(char *, int *, uint64_t))(v20 + 32))(v768, v35, v19);
    sub_2141E0750((uint64_t)v18, &qword_253F13340);
  }
  else
  {
    (*(void (**)(int *, uint64_t))(v20 + 8))(v35, v19);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v38, v18, v19);
  }
  sub_2141D8BF8((uint64_t *)&qword_253F10C60);
  v39 = (int *)type metadata accessor for CalendarBinningUnit(0);
  v40 = *((_QWORD *)v39 - 1);
  v774 = *(_QWORD *)(v40 + 72);
  v41 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v42 = swift_allocObject();
  v765 = v42;
  *(_OWORD *)(v42 + 16) = xmmword_21442ABD0;
  v43 = v42 + v41;
  LODWORD(v767) = *MEMORY[0x24BDCF260];
  v44 = v791;
  v45 = v31;
  v783(v791);
  v46 = v36;
  v36(v773, v775, v19);
  v776 = *(void (**)(_QWORD, _QWORD, _QWORD))(v781 + 16);
  v48 = v771;
  v47 = v772;
  v776(v772, v786, v771);
  v49 = *(void (**)(_QWORD, _QWORD, _QWORD))(v780 + 16);
  v790 = v45;
  v49(v43, v44, v45);
  v777 = v49;
  *(_QWORD *)(v43 + v39[5]) = 1;
  v50 = v39[6];
  v789 = v39;
  v779 = v43;
  v51 = v773;
  v46(v43 + v50, v773, v19);
  v782 = v46;
  v52 = v47;
  v53 = v776;
  v776(v43 + v39[7], v52, v48);
  v54 = (uint64_t)v787;
  v49(v787, v44, v45);
  v55 = (uint64_t)v785;
  v56 = v19;
  v46(v785, v51, v19);
  v57 = (size_t)v788;
  v58 = v772;
  v59 = v48;
  v53(v788, v772, v48);
  v778 = type metadata accessor for CalendarBinningImpl(0);
  swift_allocObject();
  v60 = sub_2142C6A38(v54, 1, v55, v57);
  v781 = *(_QWORD *)(v781 + 8);
  v61 = v58;
  ((void (*)(char *, uint64_t))v781)(v58, v48);
  v780 = *(_QWORD *)(v766 + 8);
  v62 = v773;
  v63 = v56;
  ((void (*)(char *, uint64_t))v780)(v773, v56);
  v65 = v790;
  v64 = v791;
  v784(v791, v790);
  v66 = v789;
  v67 = v779;
  *(_QWORD *)(v779 + v789[8]) = v60;
  v68 = v67 + v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v64, v767, v65);
  v782(v62, v775, v63);
  v69 = v776;
  v776(v61, v786, v48);
  v70 = v64;
  v71 = v65;
  v72 = v777;
  v777(v68, v64, v71);
  *(_QWORD *)(v68 + v66[5]) = 5;
  v73 = v68 + v66[6];
  v74 = v68;
  v766 = v68;
  v75 = v773;
  v76 = v782;
  v782(v73, v773, v63);
  v77 = v74 + v66[7];
  v78 = v772;
  v69(v77, v772, v59);
  v79 = v69;
  v80 = (uint64_t)v787;
  v72(v787, v70, v790);
  v81 = (uint64_t)v785;
  v76(v785, v75, v63);
  v82 = (size_t)v788;
  v83 = v78;
  v79(v788, v78, v59);
  swift_allocObject();
  v84 = sub_2142C6A38(v80, 5, v81, v82);
  ((void (*)(char *, uint64_t))v781)(v78, v59);
  v85 = v63;
  ((void (*)(char *, uint64_t))v780)(v75, v63);
  v87 = v790;
  v86 = v791;
  v784(v791, v790);
  v88 = v789;
  *(_QWORD *)(v766 + v789[8]) = v84;
  v766 = 2 * v774;
  v89 = v779 + 2 * v774;
  v90 = v87;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v86, v767, v87);
  v91 = v75;
  v92 = v85;
  v93 = v782;
  v782(v91, v775, v85);
  v94 = v776;
  v776(v83, v786, v59);
  v95 = v90;
  v96 = v777;
  v777(v89, v86, v95);
  *(_QWORD *)(v89 + v88[5]) = 15;
  v97 = v89 + v88[6];
  v98 = v89;
  v764 = v89;
  v99 = v773;
  v93(v97, v773, v92);
  v100 = v93;
  v94(v98 + v88[7], v83, v59);
  v101 = v94;
  v102 = (uint64_t)v787;
  v96(v787, v791, v790);
  v103 = (uint64_t)v785;
  v104 = v99;
  v105 = v92;
  v100(v785, v104, v92);
  v106 = (size_t)v788;
  v107 = v83;
  v101(v788, v83, v59);
  swift_allocObject();
  v108 = sub_2142C6A38(v102, 15, v103, v106);
  v109 = v59;
  ((void (*)(char *, uint64_t))v781)(v83, v59);
  v110 = v773;
  v111 = v105;
  ((void (*)(char *, uint64_t))v780)(v773, v105);
  v113 = v790;
  v112 = v791;
  v784(v791, v790);
  v114 = v789;
  *(_QWORD *)(v764 + v789[8]) = v108;
  v115 = v779 + v766 + v774;
  v116 = v112;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v112, v767, v113);
  v117 = v110;
  v118 = v111;
  v119 = v782;
  v782(v117, v775, v111);
  v120 = v776;
  v776(v107, v786, v109);
  v121 = v115;
  v122 = v115;
  v123 = v116;
  v124 = v116;
  v125 = v113;
  v126 = v777;
  v777(v122, v123, v113);
  *(_QWORD *)(v121 + v114[5]) = 30;
  v127 = v121 + v114[6];
  v128 = v121;
  v766 = v121;
  v129 = v773;
  v770 = v118;
  v119(v127, v773, v118);
  v130 = v128 + v114[7];
  v131 = v107;
  v132 = v107;
  v133 = v771;
  v120(v130, v132, v771);
  v134 = v120;
  v135 = (uint64_t)v787;
  v126(v787, v124, v125);
  v136 = (uint64_t)v785;
  v119(v785, v129, v118);
  v137 = (size_t)v788;
  v134(v788, v131, v133);
  swift_allocObject();
  v138 = sub_2142C6A38(v135, 30, v136, v137);
  v139 = v131;
  v140 = v133;
  ((void (*)(char *, uint64_t))v781)(v131, v133);
  v141 = v773;
  v142 = v770;
  ((void (*)(char *, uint64_t))v780)(v773, v770);
  v143 = v124;
  v144 = v790;
  v784(v124, v790);
  v145 = v789;
  *(_QWORD *)(v766 + v789[8]) = v138;
  v766 = 4 * v774;
  v146 = v779 + 4 * v774;
  LODWORD(v767) = *MEMORY[0x24BDCF258];
  v783(v143);
  v147 = v141;
  v148 = v782;
  v782(v147, v775, v142);
  v149 = v776;
  v776(v139, v786, v133);
  v150 = v143;
  v151 = v144;
  v152 = v144;
  v153 = v777;
  v777(v146, v150, v152);
  *(_QWORD *)(v146 + v145[5]) = 1;
  v154 = v146 + v145[6];
  v764 = v146;
  v155 = v773;
  v148(v154, v773, v142);
  v156 = v148;
  v149(v146 + v145[7], v139, v140);
  v157 = (uint64_t)v787;
  v158 = v791;
  v153(v787, v791, v151);
  v159 = (uint64_t)v785;
  v160 = v770;
  v156(v785, v155, v770);
  v161 = (size_t)v788;
  v149(v788, v139, v140);
  swift_allocObject();
  v162 = sub_2142C6A38(v157, 1, v159, v161);
  ((void (*)(char *, uint64_t))v781)(v139, v140);
  v163 = v160;
  ((void (*)(char *, uint64_t))v780)(v155, v160);
  v164 = v158;
  v165 = v790;
  v784(v158, v790);
  v166 = v789;
  *(_QWORD *)(v764 + v789[8]) = v162;
  v167 = v779 + v766 + v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v164, v767, v165);
  v168 = v155;
  v169 = v155;
  v170 = v163;
  v171 = v782;
  v782(v168, v775, v163);
  v172 = v771;
  v173 = v776;
  v776(v139, v786, v771);
  v174 = v164;
  v175 = v777;
  v777(v167, v174, v165);
  *(_QWORD *)(v167 + v166[5]) = 5;
  v176 = v166;
  v177 = v167 + v166[6];
  v766 = v167;
  v171(v177, v169, v170);
  v178 = v171;
  v179 = v167 + v176[7];
  v180 = v172;
  v181 = v173;
  v173(v179, v139, v172);
  v182 = (uint64_t)v787;
  v175(v787, v791, v790);
  v183 = (uint64_t)v785;
  v184 = v170;
  v178(v785, v169, v170);
  v185 = (size_t)v788;
  v186 = v139;
  v181(v788, v139, v180);
  swift_allocObject();
  v187 = sub_2142C6A38(v182, 5, v183, v185);
  ((void (*)(char *, uint64_t))v781)(v139, v180);
  v188 = v773;
  ((void (*)(char *, uint64_t))v780)(v773, v184);
  v190 = v790;
  v189 = v791;
  v784(v791, v790);
  v191 = v789;
  *(_QWORD *)(v766 + v789[8]) = v187;
  v192 = v779 + 6 * v774;
  v193 = v189;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v189, v767, v190);
  v194 = v782;
  v782(v188, v775, v184);
  v195 = v776;
  v776(v186, v786, v180);
  v196 = v193;
  v197 = v777;
  v777(v192, v196, v190);
  *(_QWORD *)(v192 + v191[5]) = 15;
  v198 = v192 + v191[6];
  v766 = v192;
  v199 = v188;
  v194(v198, v188, v184);
  v200 = v194;
  v201 = v192 + v191[7];
  v202 = v772;
  v195(v201, v772, v180);
  v203 = v195;
  v204 = (uint64_t)v787;
  v197(v787, v791, v790);
  v205 = (uint64_t)v785;
  v200(v785, v199, v184);
  v206 = (size_t)v788;
  v203(v788, v202, v180);
  swift_allocObject();
  v207 = sub_2142C6A38(v204, 15, v205, v206);
  v208 = v202;
  ((void (*)(char *, uint64_t))v781)(v202, v180);
  ((void (*)(char *, uint64_t))v780)(v199, v184);
  v210 = v790;
  v209 = v791;
  v784(v791, v790);
  v211 = v789;
  *(_QWORD *)(v766 + v789[8]) = v207;
  v766 = 8 * v774;
  v212 = v779 + 7 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v209, v767, v210);
  v213 = v184;
  v214 = v782;
  v782(v199, v775, v184);
  v215 = v776;
  v776(v208, v786, v180);
  v216 = v209;
  v217 = v210;
  v218 = v777;
  v777(v212, v209, v217);
  *(_QWORD *)(v212 + v211[5]) = 30;
  v219 = v212 + v211[6];
  v220 = v212;
  v764 = v212;
  v221 = v199;
  v214(v219, v199, v213);
  v222 = v214;
  v223 = v220 + v211[7];
  v224 = v772;
  v225 = v215;
  v215(v223, v772, v180);
  v226 = (uint64_t)v787;
  v218(v787, v216, v790);
  v227 = (uint64_t)v785;
  v228 = v213;
  v222(v785, v221, v213);
  v229 = (size_t)v788;
  v225(v788, v224, v180);
  swift_allocObject();
  v230 = sub_2142C6A38(v226, 30, v227, v229);
  v231 = v224;
  v232 = v180;
  ((void (*)(char *, uint64_t))v781)(v224, v180);
  v233 = v773;
  v234 = v228;
  ((void (*)(char *, uint64_t))v780)(v773, v228);
  v236 = v790;
  v235 = v791;
  v784(v791, v790);
  v237 = v789;
  *(_QWORD *)(v764 + v789[8]) = v230;
  v238 = v779 + v766;
  LODWORD(v767) = *MEMORY[0x24BDCF230];
  v239 = v235;
  v783(v235);
  v240 = v233;
  v241 = v782;
  v782(v233, v775, v234);
  v242 = v231;
  v243 = v776;
  v776(v242, v786, v232);
  v244 = v236;
  v245 = v236;
  v246 = v777;
  v777(v238, v239, v244);
  *(_QWORD *)(v238 + v237[5]) = 1;
  v247 = v240;
  v248 = v234;
  v241(v238 + v237[6], v247, v234);
  v249 = v772;
  v250 = v232;
  v243(v238 + v237[7], v772, v232);
  v251 = (uint64_t)v787;
  v252 = v791;
  v246(v787, v791, v245);
  v253 = (uint64_t)v785;
  v254 = v773;
  v241(v785, v773, v248);
  v255 = (size_t)v788;
  v256 = v250;
  v243(v788, v249, v250);
  swift_allocObject();
  v257 = sub_2142C6A38(v251, 1, v253, v255);
  v258 = v249;
  v259 = v256;
  ((void (*)(char *, uint64_t))v781)(v249, v256);
  v260 = v770;
  ((void (*)(char *, uint64_t))v780)(v254, v770);
  v261 = v790;
  v784(v252, v790);
  v262 = v789;
  *(_QWORD *)(v238 + v789[8]) = v257;
  v263 = v779 + v766 + v774;
  v264 = v252;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v252, v767, v261);
  v265 = v254;
  v266 = v782;
  v782(v254, v775, v260);
  v267 = v258;
  v268 = v776;
  v776(v267, v786, v259);
  v269 = v264;
  v270 = v261;
  v271 = v261;
  v272 = v777;
  v777(v263, v264, v270);
  *(_QWORD *)(v263 + v262[5]) = 3;
  v273 = v262;
  v274 = v263 + v262[6];
  v275 = v263;
  v766 = v263;
  v266(v274, v265, v260);
  v276 = v266;
  v277 = v275 + v273[7];
  v278 = v771;
  v279 = v772;
  v280 = v268;
  v268(v277, v772, v771);
  v281 = (uint64_t)v787;
  v272(v787, v269, v271);
  v282 = (uint64_t)v785;
  v283 = v773;
  v284 = v260;
  v276(v785, v773, v260);
  v285 = (size_t)v788;
  v286 = v278;
  v280(v788, v279, v278);
  swift_allocObject();
  v287 = sub_2142C6A38(v281, 3, v282, v285);
  v288 = v279;
  ((void (*)(char *, uint64_t))v781)(v279, v278);
  ((void (*)(char *, uint64_t))v780)(v283, v260);
  v290 = v790;
  v289 = v791;
  v784(v791, v790);
  v291 = v789;
  *(_QWORD *)(v766 + v789[8]) = v287;
  v292 = v779 + 10 * v774;
  v293 = v289;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v289, v767, v290);
  v294 = v782;
  v782(v283, v775, v284);
  v295 = v776;
  v776(v288, v786, v286);
  v296 = v293;
  v297 = v290;
  v298 = v777;
  v777(v292, v296, v290);
  *(_QWORD *)(v292 + v291[5]) = 6;
  v299 = v292 + v291[6];
  v766 = v292;
  v300 = v284;
  v294(v299, v283, v284);
  v301 = v294;
  v302 = v292 + v291[7];
  v303 = v771;
  v295(v302, v288, v771);
  v304 = (uint64_t)v787;
  v298(v787, v791, v297);
  v305 = (uint64_t)v785;
  v301(v785, v283, v300);
  v306 = (size_t)v788;
  v295(v788, v288, v303);
  swift_allocObject();
  v307 = sub_2142C6A38(v304, 6, v305, v306);
  ((void (*)(char *, uint64_t))v781)(v288, v303);
  ((void (*)(char *, uint64_t))v780)(v283, v300);
  v308 = v791;
  v309 = v297;
  v784(v791, v297);
  *(_QWORD *)(v766 + v789[8]) = v307;
  v310 = v779 + 11 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v308, v767, v309);
  v311 = v782;
  v782(v283, v775, v300);
  v312 = v776;
  v776(v288, v786, v303);
  v313 = v777;
  v777(v310, v308, v309);
  v314 = v789;
  *(_QWORD *)(v310 + v789[5]) = 12;
  v315 = v314;
  v316 = v310 + v314[6];
  v766 = v310;
  v317 = v283;
  v311(v316, v283, v300);
  v318 = v311;
  v319 = v771;
  v320 = v772;
  v312(v310 + v315[7], v772, v771);
  v321 = (uint64_t)v787;
  v313(v787, v791, v790);
  v322 = (uint64_t)v785;
  v323 = v317;
  v318(v785, v317, v300);
  v324 = (size_t)v788;
  v325 = v320;
  v312(v788, v320, v319);
  swift_allocObject();
  v326 = sub_2142C6A38(v321, 12, v322, v324);
  ((void (*)(char *, uint64_t))v781)(v320, v319);
  v327 = v323;
  ((void (*)(char *, uint64_t))v780)(v323, v300);
  v328 = v790;
  v329 = v791;
  v784(v791, v790);
  v330 = v789;
  *(_QWORD *)(v766 + v789[8]) = v326;
  v331 = v779 + 12 * v774;
  LODWORD(v767) = *MEMORY[0x24BDCF220];
  v783(v329);
  v332 = v782;
  v782(v327, v775, v300);
  v333 = v325;
  v334 = v319;
  v335 = v776;
  v776(v333, v786, v319);
  v336 = v329;
  v337 = v328;
  v338 = v328;
  v339 = v777;
  v777(v331, v336, v338);
  *(_QWORD *)(v331 + v330[5]) = 1;
  v340 = v330;
  v341 = v331 + v330[6];
  v766 = v331;
  v342 = v327;
  v332(v341, v327, v300);
  v343 = v772;
  v335(v331 + v340[7], v772, v334);
  v344 = v335;
  v345 = (uint64_t)v787;
  v346 = v791;
  v339(v787, v791, v337);
  v347 = (uint64_t)v785;
  v332(v785, v342, v300);
  v348 = (size_t)v788;
  v344(v788, v343, v334);
  swift_allocObject();
  v349 = sub_2142C6A38(v345, 1, v347, v348);
  v350 = v334;
  ((void (*)(char *, uint64_t))v781)(v343, v334);
  ((void (*)(char *, uint64_t))v780)(v342, v300);
  v351 = v790;
  v784(v346, v790);
  *(_QWORD *)(v766 + v789[8]) = v349;
  v352 = v779 + 13 * v774;
  v353 = v346;
  v354 = v351;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v346, v767, v351);
  v355 = v782;
  v782(v342, v775, v300);
  v356 = v772;
  v357 = v350;
  v358 = v776;
  v776(v772, v786, v350);
  v359 = v353;
  v360 = v354;
  v361 = v354;
  v362 = v777;
  v777(v352, v359, v361);
  v363 = v789;
  *(_QWORD *)(v352 + v789[5]) = 2;
  v364 = v363;
  v365 = v352 + v363[6];
  v766 = v352;
  v366 = v773;
  v355(v365, v773, v300);
  v367 = v352 + v364[7];
  v368 = v357;
  v358(v367, v356, v357);
  v369 = v358;
  v370 = (uint64_t)v787;
  v362(v787, v791, v360);
  v371 = (uint64_t)v785;
  v355(v785, v366, v300);
  v372 = (size_t)v788;
  v369(v788, v356, v357);
  swift_allocObject();
  v373 = sub_2142C6A38(v370, 2, v371, v372);
  ((void (*)(char *, uint64_t))v781)(v356, v357);
  v374 = v366;
  ((void (*)(char *, uint64_t))v780)(v366, v300);
  v375 = v790;
  v376 = v791;
  v784(v791, v790);
  v377 = v789;
  *(_QWORD *)(v766 + v789[8]) = v373;
  v378 = v779 + 14 * v774;
  LODWORD(v767) = *MEMORY[0x24BDCF1E8];
  v379 = v375;
  v783(v376);
  v380 = v782;
  v782(v374, v775, v300);
  v381 = v356;
  v382 = v368;
  v383 = v776;
  v776(v381, v786, v368);
  v384 = v376;
  v385 = v379;
  v386 = v379;
  v387 = v777;
  v777(v378, v384, v386);
  *(_QWORD *)(v378 + v377[5]) = 1;
  v388 = v378 + v377[6];
  v766 = v378;
  v380(v388, v374, v300);
  v389 = v380;
  v390 = v772;
  v383(v378 + v377[7], v772, v382);
  v391 = v383;
  v392 = (uint64_t)v787;
  v387(v787, v791, v385);
  v393 = (uint64_t)v785;
  v394 = v773;
  v389(v785, v773, v300);
  v395 = (size_t)v788;
  v391(v788, v390, v382);
  swift_allocObject();
  v396 = sub_2142C6A38(v392, 1, v393, v395);
  v397 = v382;
  ((void (*)(char *, uint64_t))v781)(v390, v382);
  v398 = v394;
  ((void (*)(char *, uint64_t))v780)(v394, v300);
  v399 = v790;
  v400 = v791;
  v784(v791, v790);
  v401 = v789;
  *(_QWORD *)(v766 + v789[8]) = v396;
  v766 = 16 * v774;
  v402 = v779 + 15 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v400, v767, v399);
  v403 = v398;
  v404 = v300;
  v405 = v782;
  v782(v403, v775, v300);
  v406 = v397;
  v407 = v776;
  v776(v390, v786, v406);
  v408 = v400;
  v409 = v400;
  v410 = v777;
  v777(v402, v409, v399);
  *(_QWORD *)(v402 + v401[5]) = 2;
  v411 = v402 + v401[6];
  v412 = v402;
  v764 = v402;
  v413 = v773;
  v414 = v404;
  v405(v411, v773, v404);
  v415 = v412 + v401[7];
  v416 = v771;
  v407(v415, v390, v771);
  v417 = v407;
  v418 = (uint64_t)v787;
  v410(v787, v408, v790);
  v419 = (uint64_t)v785;
  v420 = v413;
  v421 = v414;
  v405(v785, v420, v414);
  v422 = (size_t)v788;
  v423 = v390;
  v424 = v416;
  v417(v788, v390, v416);
  swift_allocObject();
  v425 = sub_2142C6A38(v418, 2, v419, v422);
  ((void (*)(char *, uint64_t))v781)(v390, v416);
  v426 = v773;
  ((void (*)(char *, uint64_t))v780)(v773, v421);
  v427 = v790;
  v428 = v791;
  v784(v791, v790);
  v429 = v789;
  *(_QWORD *)(v764 + v789[8]) = v425;
  v430 = v779 + v766;
  LODWORD(v767) = *MEMORY[0x24BDCF250];
  v783(v428);
  v431 = v782;
  v782(v426, v768, v421);
  v432 = v776;
  v776(v423, v786, v424);
  v433 = v427;
  v434 = v777;
  v777(v430, v428, v427);
  *(_QWORD *)(v430 + v429[5]) = 1;
  v435 = v429;
  v436 = v430 + v429[6];
  v764 = v430;
  v437 = v421;
  v431(v436, v426, v421);
  v438 = v430 + v435[7];
  v439 = v771;
  v440 = v772;
  v432(v438, v772, v771);
  v441 = v432;
  v442 = (uint64_t)v787;
  v434(v787, v791, v433);
  v443 = (uint64_t)v785;
  v444 = v426;
  v431(v785, v426, v437);
  v445 = (size_t)v788;
  v441(v788, v440, v439);
  swift_allocObject();
  v446 = sub_2142C6A38(v442, 1, v443, v445);
  ((void (*)(char *, uint64_t))v781)(v440, v439);
  v447 = v444;
  v448 = v437;
  ((void (*)(char *, uint64_t))v780)(v444, v437);
  v449 = v791;
  v450 = v433;
  v784(v791, v433);
  v451 = v789;
  *(_QWORD *)(v764 + v789[8]) = v446;
  v452 = v779 + v766 + v774;
  v453 = v449;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v449, v767, v450);
  v454 = v782;
  v782(v444, v768, v448);
  v455 = v776;
  v776(v772, v786, v439);
  v456 = v452;
  v457 = v452;
  v458 = v450;
  v459 = v777;
  v777(v456, v453, v450);
  *(_QWORD *)(v457 + v451[5]) = 2;
  v460 = v457 + v451[6];
  v766 = v457;
  v461 = v447;
  v454(v460, v447, v448);
  v462 = v454;
  v463 = v457 + v451[7];
  v465 = v771;
  v464 = v772;
  v455(v463, v772, v771);
  v466 = v455;
  v467 = (uint64_t)v787;
  v459(v787, v791, v458);
  v468 = (uint64_t)v785;
  v462(v785, v461, v448);
  v469 = (size_t)v788;
  v470 = v464;
  v466(v788, v464, v465);
  swift_allocObject();
  v471 = sub_2142C6A38(v467, 2, v468, v469);
  ((void (*)(char *, uint64_t))v781)(v470, v465);
  v472 = v461;
  v473 = v770;
  ((void (*)(char *, uint64_t))v780)(v461, v770);
  v475 = v790;
  v474 = v791;
  v784(v791, v790);
  v476 = v789;
  *(_QWORD *)(v766 + v789[8]) = v471;
  v477 = v779 + 18 * v774;
  v478 = v474;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v474, v767, v475);
  v479 = v782;
  v782(v472, v768, v473);
  v480 = v771;
  v481 = v776;
  v776(v470, v786, v771);
  v482 = v478;
  v483 = v478;
  v484 = v475;
  v485 = v777;
  v777(v477, v483, v475);
  v486 = v477;
  *(_QWORD *)(v477 + v476[5]) = 3;
  v487 = v476;
  v488 = v486 + v476[6];
  v489 = v486;
  v766 = v486;
  v490 = v770;
  v479(v488, v472, v770);
  v491 = v772;
  v481(v489 + v487[7], v772, v480);
  v492 = v481;
  v493 = (uint64_t)v787;
  v485(v787, v482, v484);
  v494 = (uint64_t)v785;
  v495 = v773;
  v479(v785, v773, v490);
  v496 = (size_t)v788;
  v497 = v491;
  v492(v788, v491, v480);
  swift_allocObject();
  v498 = sub_2142C6A38(v493, 3, v494, v496);
  v499 = v480;
  ((void (*)(char *, uint64_t))v781)(v491, v480);
  v500 = v495;
  ((void (*)(char *, uint64_t))v780)(v495, v770);
  v502 = v790;
  v501 = v791;
  v784(v791, v790);
  v503 = v789;
  *(_QWORD *)(v766 + v789[8]) = v498;
  v504 = v779 + 19 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v501, v767, v502);
  v505 = v495;
  v506 = v770;
  v507 = v782;
  v782(v505, v768, v770);
  v508 = v776;
  v776(v497, v786, v499);
  v509 = v791;
  v510 = v502;
  v511 = v777;
  v777(v504, v791, v502);
  v512 = v504;
  *(_QWORD *)(v504 + v503[5]) = 6;
  v513 = v503;
  v514 = v512 + v503[6];
  v515 = v512;
  v766 = v512;
  v516 = v506;
  v507(v514, v500, v506);
  v517 = v507;
  v518 = v515 + v513[7];
  v519 = v771;
  v520 = v772;
  v508(v518, v772, v771);
  v521 = v508;
  v522 = (uint64_t)v787;
  v511(v787, v509, v510);
  v523 = (uint64_t)v785;
  v524 = v773;
  v525 = v516;
  v517(v785, v773, v516);
  v526 = (size_t)v788;
  v527 = v519;
  v521(v788, v520, v519);
  swift_allocObject();
  v528 = sub_2142C6A38(v522, 6, v523, v526);
  ((void (*)(char *, uint64_t))v781)(v520, v527);
  v529 = v524;
  v530 = v525;
  ((void (*)(char *, uint64_t))v780)(v524, v525);
  v532 = v790;
  v531 = v791;
  v784(v791, v790);
  v533 = v789;
  *(_QWORD *)(v766 + v789[8]) = v528;
  v534 = v779 + 20 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v531, v769, v532);
  v535 = v782;
  v782(v529, v775, v525);
  v536 = v776;
  v776(v772, v786, v527);
  v537 = v791;
  v538 = v532;
  v539 = v777;
  v777(v534, v791, v532);
  *(_QWORD *)(v534 + v533[5]) = 1;
  v540 = v534 + v533[6];
  v541 = v534;
  v767 = v534;
  v542 = v529;
  v535(v540, v529, v530);
  v543 = v541 + v533[7];
  v544 = v771;
  v545 = v772;
  v536(v543, v772, v771);
  v546 = v536;
  v547 = (uint64_t)v787;
  v539(v787, v537, v538);
  v548 = (uint64_t)v785;
  v549 = v770;
  v535(v785, v542, v770);
  v550 = (size_t)v788;
  v551 = v545;
  v546(v788, v545, v544);
  swift_allocObject();
  v552 = sub_2142C6A38(v547, 1, v548, v550);
  ((void (*)(char *, uint64_t))v781)(v545, v544);
  ((void (*)(char *, uint64_t))v780)(v542, v549);
  v553 = v790;
  v554 = v791;
  v784(v791, v790);
  *(_QWORD *)(v767 + v789[8]) = v552;
  v555 = v779 + 21 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v554, v769, v553);
  v556 = v782;
  v782(v542, v775, v549);
  v557 = v551;
  v558 = v776;
  v776(v551, v786, v544);
  v559 = v554;
  v560 = v553;
  v561 = v777;
  v777(v555, v559, v553);
  v562 = v789;
  *(_QWORD *)(v555 + v789[5]) = 2;
  v563 = v562;
  v564 = v555 + v562[6];
  v767 = v555;
  v556(v564, v542, v549);
  v565 = v556;
  v566 = v557;
  v558(v555 + v563[7], v557, v544);
  v567 = (uint64_t)v787;
  v561(v787, v791, v560);
  v568 = (uint64_t)v785;
  v569 = v542;
  v570 = v542;
  v571 = v770;
  v565(v785, v570, v770);
  v572 = (size_t)v788;
  v573 = v566;
  v558(v788, v566, v544);
  swift_allocObject();
  v574 = sub_2142C6A38(v567, 2, v568, v572);
  v575 = v544;
  ((void (*)(char *, uint64_t))v781)(v573, v544);
  v576 = v571;
  ((void (*)(char *, uint64_t))v780)(v569, v571);
  v577 = v790;
  v578 = v791;
  v784(v791, v790);
  v579 = v789;
  *(_QWORD *)(v767 + v789[8]) = v574;
  v580 = v779 + 22 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v578, v769, v577);
  v581 = v782;
  v782(v569, v775, v576);
  v582 = v573;
  v558(v573, v786, v575);
  v583 = v578;
  v584 = v578;
  v585 = v577;
  v586 = v777;
  v777(v580, v583, v577);
  *(_QWORD *)(v580 + v579[5]) = 5;
  v587 = v580 + v579[6];
  v588 = v580;
  v767 = v580;
  v589 = v770;
  v581(v587, v569, v770);
  v590 = v588 + v579[7];
  v591 = v582;
  v592 = v771;
  v558(v590, v582, v771);
  v593 = v558;
  v594 = (uint64_t)v787;
  v586(v787, v584, v585);
  v595 = (uint64_t)v785;
  v596 = v773;
  v581(v785, v773, v589);
  v597 = (size_t)v788;
  v593(v788, v591, v592);
  swift_allocObject();
  v598 = sub_2142C6A38(v594, 5, v595, v597);
  ((void (*)(char *, uint64_t))v781)(v591, v592);
  v599 = v596;
  v600 = v589;
  ((void (*)(char *, uint64_t))v780)(v596, v589);
  v601 = v790;
  v602 = v791;
  v784(v791, v790);
  *(_QWORD *)(v767 + v789[8]) = v598;
  v603 = v779 + 23 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v602, v769, v601);
  v604 = v599;
  v605 = v782;
  v782(v604, v775, v600);
  v606 = v591;
  v607 = v591;
  v608 = v771;
  v609 = v776;
  v776(v607, v786, v771);
  v610 = v777;
  v777(v603, v602, v601);
  v611 = v789;
  *(_QWORD *)(v603 + v789[5]) = 10;
  v612 = v611;
  v613 = v603 + v611[6];
  v767 = v603;
  v614 = v773;
  v605(v613, v773, v600);
  v609(v603 + v612[7], v606, v608);
  v615 = (uint64_t)v787;
  v610(v787, v602, v790);
  v616 = (uint64_t)v785;
  v605(v785, v614, v600);
  v617 = (size_t)v788;
  v618 = v608;
  v609(v788, v606, v608);
  swift_allocObject();
  v619 = sub_2142C6A38(v615, 10, v616, v617);
  ((void (*)(char *, uint64_t))v781)(v606, v608);
  v620 = v600;
  ((void (*)(char *, uint64_t))v780)(v614, v600);
  v622 = v790;
  v621 = v791;
  v784(v791, v790);
  v623 = v789;
  *(_QWORD *)(v767 + v789[8]) = v619;
  v624 = v779 + 24 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v621, v769, v622);
  v625 = v620;
  v626 = v620;
  v627 = v782;
  v782(v614, v775, v625);
  v628 = v606;
  v629 = v618;
  v630 = v776;
  v776(v628, v786, v618);
  v631 = v621;
  v632 = v621;
  v633 = v777;
  v777(v624, v631, v622);
  *(_QWORD *)(v624 + v623[5]) = 20;
  v634 = v624 + v623[6];
  v767 = v624;
  v635 = v614;
  v636 = v626;
  v627(v634, v635, v626);
  v637 = v627;
  v638 = v624 + v623[7];
  v639 = v772;
  v630(v638, v772, v629);
  v640 = (uint64_t)v787;
  v633(v787, v632, v622);
  v641 = (uint64_t)v785;
  v642 = v773;
  v637(v785, v773, v636);
  v643 = (size_t)v788;
  v630(v788, v639, v629);
  swift_allocObject();
  v644 = sub_2142C6A38(v640, 20, v641, v643);
  v645 = v639;
  ((void (*)(char *, uint64_t))v781)(v639, v629);
  v646 = v636;
  ((void (*)(char *, uint64_t))v780)(v642, v636);
  v647 = v790;
  v648 = v791;
  v784(v791, v790);
  *(_QWORD *)(v767 + v789[8]) = v644;
  v649 = v779 + 25 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v648, v769, v647);
  v650 = v782;
  v782(v642, v775, v646);
  v651 = v645;
  v652 = v776;
  v776(v651, v786, v629);
  v653 = v777;
  v777(v649, v648, v647);
  v654 = v789;
  *(_QWORD *)(v649 + v789[5]) = 50;
  v655 = v654;
  v656 = v649 + v654[6];
  v767 = v649;
  v657 = v642;
  v650(v656, v642, v646);
  v658 = v650;
  v659 = v649 + v655[7];
  v660 = v772;
  v661 = v629;
  v662 = v652;
  v652(v659, v772, v629);
  v663 = (uint64_t)v787;
  v664 = v791;
  v653(v787, v791, v790);
  v665 = (uint64_t)v785;
  v658(v785, v657, v646);
  v666 = (size_t)v788;
  v662(v788, v660, v661);
  swift_allocObject();
  v667 = sub_2142C6A38(v663, 50, v665, v666);
  ((void (*)(char *, uint64_t))v781)(v660, v661);
  ((void (*)(char *, uint64_t))v780)(v657, v646);
  v668 = v664;
  v669 = v790;
  v784(v664, v790);
  v670 = v789;
  *(_QWORD *)(v767 + v789[8]) = v667;
  v671 = v779 + 26 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v668, v769, v669);
  v672 = v782;
  v782(v657, v775, v646);
  v673 = v661;
  v674 = v661;
  v675 = v776;
  v776(v660, v786, v674);
  v676 = v668;
  v677 = v777;
  v777(v671, v676, v669);
  *(_QWORD *)(v671 + v670[5]) = 100;
  v678 = v670;
  v679 = v671 + v670[6];
  v680 = v671;
  v767 = v671;
  v681 = v773;
  v672(v679, v773, v646);
  v682 = v672;
  v683 = v680 + v678[7];
  v684 = v660;
  v685 = v673;
  v686 = v673;
  v687 = v675;
  v675(v683, v660, v685);
  v688 = (uint64_t)v787;
  v677(v787, v791, v790);
  v689 = (uint64_t)v785;
  v690 = v770;
  v682(v785, v681, v770);
  v691 = (size_t)v788;
  v687(v788, v684, v686);
  swift_allocObject();
  v692 = sub_2142C6A38(v688, 100, v689, v691);
  ((void (*)(char *, uint64_t))v781)(v684, v686);
  v693 = v681;
  ((void (*)(char *, uint64_t))v780)(v681, v690);
  v695 = v790;
  v694 = v791;
  v784(v791, v790);
  v696 = v789;
  *(_QWORD *)(v767 + v789[8]) = v692;
  v697 = v779 + 27 * v774;
  v698 = v694;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v694, v769, v695);
  v699 = v782;
  v782(v693, v775, v690);
  v700 = v776;
  v776(v684, v786, v686);
  v701 = v698;
  v702 = v777;
  v777(v697, v701, v695);
  *(_QWORD *)(v697 + v696[5]) = 200;
  v703 = v697 + v696[6];
  v767 = v697;
  v704 = v693;
  v705 = v690;
  v699(v703, v693, v690);
  v706 = v697 + v696[7];
  v707 = v772;
  v700(v706, v772, v686);
  v708 = v700;
  v709 = (uint64_t)v787;
  v710 = v790;
  v702(v787, v791, v790);
  v711 = (uint64_t)v785;
  v699(v785, v704, v705);
  v712 = (size_t)v788;
  v708(v788, v707, v686);
  swift_allocObject();
  v713 = sub_2142C6A38(v709, 200, v711, v712);
  v714 = v707;
  ((void (*)(char *, uint64_t))v781)(v707, v686);
  v715 = v704;
  v716 = v704;
  v717 = v705;
  ((void (*)(char *, uint64_t))v780)(v716, v705);
  v718 = v791;
  v719 = v710;
  v784(v791, v710);
  v720 = v789;
  *(_QWORD *)(v767 + v789[8]) = v713;
  v721 = v779 + 28 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v718, v769, v719);
  v722 = v715;
  v723 = v717;
  v724 = v782;
  v782(v722, v775, v717);
  v725 = v714;
  v726 = v714;
  v727 = v686;
  v728 = v776;
  v776(v725, v786, v686);
  v729 = v719;
  v730 = v777;
  v777(v721, v718, v729);
  *(_QWORD *)(v721 + v720[5]) = 500;
  v731 = v721 + v720[6];
  v767 = v721;
  v732 = v773;
  v724(v731, v773, v723);
  v733 = v721 + v720[7];
  v734 = v727;
  v728(v733, v726, v727);
  v735 = v728;
  v736 = (uint64_t)v787;
  v730(v787, v718, v790);
  v737 = (uint64_t)v785;
  v724(v785, v732, v723);
  v738 = (size_t)v788;
  v735(v788, v726, v734);
  swift_allocObject();
  v739 = sub_2142C6A38(v736, 500, v737, v738);
  ((void (*)(char *, uint64_t))v781)(v726, v734);
  ((void (*)(char *, uint64_t))v780)(v732, v723);
  v740 = v790;
  v741 = v791;
  v784(v791, v790);
  v742 = v789;
  *(_QWORD *)(v767 + v789[8]) = v739;
  v743 = v779 + 29 * v774;
  ((void (*)(char *, _QWORD, uint64_t))v783)(v741, v769, v740);
  v744 = v732;
  v745 = v723;
  v746 = v782;
  v782(v744, v775, v723);
  v747 = v776;
  v776(v726, v786, v734);
  v748 = v741;
  v749 = v777;
  v777(v743, v741, v740);
  *(_QWORD *)(v743 + v742[5]) = 1000;
  v750 = v743 + v742[6];
  v779 = v743;
  v751 = v773;
  v752 = v745;
  v746(v750, v773, v745);
  v753 = v743 + v742[7];
  v755 = v771;
  v754 = v772;
  v747(v753, v772, v771);
  v756 = (uint64_t)v787;
  v757 = v790;
  v749(v787, v748, v790);
  v758 = (uint64_t)v785;
  v746(v785, v751, v752);
  v759 = (size_t)v788;
  v747(v788, v754, v755);
  swift_allocObject();
  v760 = sub_2142C6A38(v756, 1000, v758, v759);
  ((void (*)(char *, uint64_t))v781)(v754, v755);
  v761 = (void (*)(_QWORD, _QWORD))v780;
  ((void (*)(char *, uint64_t))v780)(v751, v752);
  v784(v791, v757);
  *(_QWORD *)(v779 + v789[8]) = v760;
  v761(v768, v752);
  return v765;
}

uint64_t sub_2142CD0F4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v1, 0);
    v2 = v12;
    v4 = *(_QWORD *)(sub_214423B70() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_2144239F0();
      v8 = v7;
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        sub_2141D3AA0((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2142CD1E4(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = *(_QWORD *)(v1 + 8 * v3 + 32);
    v8 = *(_QWORD *)(v1 + 8 * i);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_21434EB70(v1);
      v1 = result;
    }
    *(_QWORD *)(v1 + 8 * v3 + 32) = v8;
    *(_QWORD *)(v1 + 8 * i) = v7;
LABEL_5:
    if (v4 == ++v3)
      return v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_2142CD29C(uint64_t result)
{
  char *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;

  v1 = (char *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = 0;
  v5 = v2 >> 1;
  v6 = v2 - 1;
  v7 = 16 * v2 + 16;
  v15 = v2 >> 1;
  while (1)
  {
    if (v4 == v6)
      goto LABEL_4;
    v8 = *((_QWORD *)v1 + 2);
    if (v4 >= v8)
      break;
    if (v6 >= v8)
      goto LABEL_13;
    v10 = *(_QWORD *)&v1[v3 + 32];
    v9 = *(_QWORD *)&v1[v3 + 40];
    v12 = *(_QWORD *)&v1[v7];
    v11 = *(_QWORD *)&v1[v7 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_21434EB84((uint64_t)v1);
    v13 = &v1[v3];
    result = swift_bridgeObjectRelease();
    *((_QWORD *)v13 + 4) = v12;
    *((_QWORD *)v13 + 5) = v11;
    if (v6 >= *((_QWORD *)v1 + 2))
      goto LABEL_14;
    v14 = &v1[v7];
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v14 = v10;
    *((_QWORD *)v14 + 1) = v9;
    v5 = v15;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 16;
    v3 += 16;
    if (v5 == v4)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_2142CD3C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  BOOL v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  if (!*(_BYTE *)(v2 + 56))
  {
    v7 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v2 + 24);
    sub_21421CF8C(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
    v7(&v12, v3);
    result = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      v7(&v11, result);
      v9 = v11;
      v8 = v12;
      v10 = sub_214333564();
      swift_release();
      result = swift_release();
      if (!__OFSUB__(v10, 1))
      {
        v6 = v10 - 1 == v3;
        *(_QWORD *)a2 = v8;
        *(_QWORD *)(a2 + 8) = v9;
        goto LABEL_11;
      }
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(_BYTE *)(v2 + 56) == 1)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      if ((uint64_t)(v5 - 1) > result)
      {
        if (v5 > result)
        {
          if (result + 1 < v5)
          {
            v6 = v5 - 2 == result;
            *(_OWORD *)a2 = *(_OWORD *)(*(_QWORD *)v2 + 8 * result + 32);
LABEL_11:
            *(_BYTE *)(a2 + 16) = v6;
            return result;
          }
          goto LABEL_17;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2142CD4F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *);
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = (uint64_t (*)(uint64_t *))result;
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    while (v7 < *(_QWORD *)(a3 + 16))
    {
      v11 = *(_QWORD *)(a3 + 8 * v7 + 32);
      v12 = v11;
      result = v6(&v12);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if ((result & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v13 = v8;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_2141D3AA0(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v13;
        }
        v10 = *(_QWORD *)(v8 + 16);
        v9 = *(_QWORD *)(v8 + 24);
        if (v10 >= v9 >> 1)
        {
          result = (uint64_t)sub_2141D3AA0((char *)(v9 > 1), v10 + 1, 1);
          v8 = v13;
        }
        *(_QWORD *)(v8 + 16) = v10 + 1;
        *(_QWORD *)(v8 + 8 * v10 + 32) = v11;
      }
      if (v5 == ++v7)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t sub_2142CD63C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  v6 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_214423B70();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)&v26 - v14;
  v36 = MEMORY[0x24BEE4AF8];
  v32 = *(_QWORD *)(a3 + 16);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_2141D3ABC(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v36;
        }
        v24 = *(_QWORD *)(v21 + 16);
        v23 = *(_QWORD *)(v21 + 24);
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          sub_2141D3ABC(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        *(_QWORD *)(v21 + 16) = v25;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v21 + v16 + v24 * v17, v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease();
    sub_2141E0750((uint64_t)v8, &qword_253F13340);
    return v36;
  }
  return result;
}

void sub_2142CD908(double a1, double a2, double a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  BOOL v10;
  double v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  _BOOL4 v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;

  v6 = sub_2142D5204(a1, a2, a3);
  v21 = MEMORY[0x24BEE4AF8];
  sub_2141D3AA0(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
    goto LABEL_30;
  v7 = 0;
  v8 = 0;
  if (!v6)
  {
    v11 = a1;
    goto LABEL_16;
  }
  v9 = a1;
  do
  {
    v10 = v9 <= a2;
    if (a3 > 0.0)
      v10 = v9 >= a2;
    if (v10)
    {
      if (v7 & 1 | (v9 != a2))
        goto LABEL_28;
      v7 = 1;
      v11 = v9;
    }
    else
    {
      v12 = __OFADD__(v8++, 1);
      if (v12)
        goto LABEL_29;
      v11 = a1 + (double)v8 * a3;
    }
    v14 = *(_QWORD *)(v21 + 16);
    v13 = *(_QWORD *)(v21 + 24);
    if (v14 >= v13 >> 1)
      sub_2141D3AA0((char *)(v13 > 1), v14 + 1, 1);
    v15 = __exp10(v9);
    *(_QWORD *)(v21 + 16) = v14 + 1;
    *(double *)(v21 + 8 * v14 + 32) = v15;
    v9 = v11;
    --v6;
  }
  while (v6);
  while (1)
  {
LABEL_16:
    v16 = v11 <= a2;
    if (a3 > 0.0)
      v16 = v11 >= a2;
    if (!v16)
      break;
    if ((v11 != a2) | v7 & 1)
      return;
    v7 = 1;
    v17 = v11;
LABEL_23:
    v19 = *(_QWORD *)(v21 + 16);
    v18 = *(_QWORD *)(v21 + 24);
    if (v19 >= v18 >> 1)
      sub_2141D3AA0((char *)(v18 > 1), v19 + 1, 1);
    v20 = __exp10(v11);
    *(_QWORD *)(v21 + 16) = v19 + 1;
    *(double *)(v21 + 8 * v19 + 32) = v20;
    v11 = v17;
  }
  v12 = __OFADD__(v8++, 1);
  if (!v12)
  {
    v17 = a1 + (double)v8 * a3;
    goto LABEL_23;
  }
  __break(1u);
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_2142CDB00(double a1, double a2, double a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  BOOL v10;
  double v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  _BOOL4 v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;

  v6 = sub_2142D5204(a1, a2, a3);
  v21 = MEMORY[0x24BEE4AF8];
  sub_2141D3AA0(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
    goto LABEL_30;
  v7 = 0;
  v8 = 0;
  if (!v6)
  {
    v11 = a1;
    goto LABEL_16;
  }
  v9 = a1;
  do
  {
    v10 = v9 <= a2;
    if (a3 > 0.0)
      v10 = v9 >= a2;
    if (v10)
    {
      if (v7 & 1 | (v9 != a2))
        goto LABEL_28;
      v7 = 1;
      v11 = v9;
    }
    else
    {
      v12 = __OFADD__(v8++, 1);
      if (v12)
        goto LABEL_29;
      v11 = a1 + (double)v8 * a3;
    }
    v14 = *(_QWORD *)(v21 + 16);
    v13 = *(_QWORD *)(v21 + 24);
    if (v14 >= v13 >> 1)
      sub_2141D3AA0((char *)(v13 > 1), v14 + 1, 1);
    v15 = __exp10(v9);
    *(_QWORD *)(v21 + 16) = v14 + 1;
    *(double *)(v21 + 8 * v14 + 32) = -v15;
    v9 = v11;
    --v6;
  }
  while (v6);
  while (1)
  {
LABEL_16:
    v16 = v11 <= a2;
    if (a3 > 0.0)
      v16 = v11 >= a2;
    if (!v16)
      break;
    if ((v11 != a2) | v7 & 1)
      return;
    v7 = 1;
    v17 = v11;
LABEL_23:
    v19 = *(_QWORD *)(v21 + 16);
    v18 = *(_QWORD *)(v21 + 24);
    if (v19 >= v18 >> 1)
      sub_2141D3AA0((char *)(v18 > 1), v19 + 1, 1);
    v20 = __exp10(v11);
    *(_QWORD *)(v21 + 16) = v19 + 1;
    *(double *)(v21 + 8 * v19 + 32) = -v20;
    v11 = v17;
  }
  v12 = __OFADD__(v8++, 1);
  if (!v12)
  {
    v17 = a1 + (double)v8 * a3;
    goto LABEL_23;
  }
  __break(1u);
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_2142CDD00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  if (*(_BYTE *)(v0 + 56))
  {
    if (*(_BYTE *)(v0 + 56) == 1)
    {
      v2 = sub_2142085E4;
LABEL_19:
      sub_21421CF8C(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v2);
    }
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    if (v3)
    {
      if ((v3 & 0x8000000000000000) == 0)
      {
        v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v0 + 24);
        sub_21421CF8C(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
        sub_21421CF8C(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
        v5 = 0;
        v14 = v3 - 1;
        v6 = (char *)MEMORY[0x24BEE4AF8];
        v15 = v3;
        while (1)
        {
          v7 = v5 + 1;
          if (__OFADD__(v5, 1))
            break;
          sub_21421CF8C(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
          v4(&v17, v5);
          v4(&v16, v5 + 1);
          v8 = v16;
          v9 = v17;
          sub_21421CF8C(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
          swift_release_n();
          swift_release_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_214224AE0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
          v11 = *((_QWORD *)v6 + 2);
          v10 = *((_QWORD *)v6 + 3);
          if (v11 >= v10 >> 1)
            v6 = sub_214224AE0((char *)(v10 > 1), v11 + 1, 1, v6);
          *((_QWORD *)v6 + 2) = v11 + 1;
          *(_QWORD *)&v6[8 * v11 + 32] = v9;
          sub_21421CF8C(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
          swift_release();
          swift_release();
          if (v14 == v5)
          {
            v13 = *((_QWORD *)v6 + 2);
            v12 = *((_QWORD *)v6 + 3);
            if (v13 >= v12 >> 1)
              v6 = sub_214224AE0((char *)(v12 > 1), v13 + 1, 1, v6);
            *((_QWORD *)v6 + 2) = v13 + 1;
            *(_QWORD *)&v6[8 * v13 + 32] = v8;
          }
          ++v5;
          if (v7 == v15)
          {
            v2 = sub_214208738;
            sub_21421CF8C(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214208738);
            goto LABEL_19;
          }
        }
        __break(1u);
      }
      __break(1u);
    }
  }
}

void static AxisMarkPreset.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static AxisMarkPosition.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t static AxisMarkValues.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  v2 = type metadata accessor for AxisMarkValues.Storage(0);
  v3 = *(int *)(v2 + 24);
  *(_BYTE *)(a1 + *(int *)(v2 + 20)) = 2;
  *(_BYTE *)(a1 + v3) = 2;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t type metadata accessor for AxisMarkValues.Storage.Stride(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F146C0);
}

uint64_t type metadata accessor for AxisMarkValues.Storage(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F14768);
}

uint64_t AxisMarks.init(preset:position:values:content:)@<X0>(_BYTE *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[5];
  char v19;

  v14 = *a2;
  *a8 = *a1;
  a8[1] = v14;
  v15 = type metadata accessor for AxisMarks(0, a6, a7, a4);
  sub_2141E801C(a3, (uint64_t)&a8[*(int *)(v15 + 40)], &qword_253F147A8);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a4;
  v16[5] = a5;
  v18[0] = sub_2142CE0D8;
  v18[1] = v16;
  v19 = 1;
  return sub_21424CA58((uint64_t)v18, (uint64_t)&a8[*(int *)(v15 + 44)]);
}

uint64_t type metadata accessor for AxisMarks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AxisMarks);
}

uint64_t sub_2142CE0B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2142CE0D8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(__int128 *);
  char v4;
  __int128 v6;
  char v7;
  __int128 v8;

  v3 = *(uint64_t (**)(__int128 *))(v2 + 32);
  v4 = *((_BYTE *)a1 + 16);
  v6 = *a1;
  v7 = v4;
  v8 = *(__int128 *)((char *)a1 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 16);
  sub_2141D8DD8((uint64_t *)a2);
  return v3(&v6);
}

uint64_t AxisMarks.init<A>(preset:position:values:content:)@<X0>(_BYTE *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[5];
  char v24;

  v17 = *a2;
  *a9 = *a1;
  a9[1] = v17;
  v18 = type metadata accessor for AxisMarks(0, a6, a8, a4);
  v19 = (uint64_t)&a9[*(int *)(v18 + 40)];
  sub_2142CE244(a3, a7, a10, v19);
  v20 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a6;
  v21[3] = a7;
  v21[4] = a8;
  v21[5] = a10;
  v21[6] = a4;
  v21[7] = a5;
  v23[0] = sub_2142CE2DC;
  v23[1] = v21;
  v24 = 1;
  return sub_21424CA58((uint64_t)v23, (uint64_t)&a9[*(int *)(v18 + 44)]);
}

uint64_t sub_2142CE244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  v5 = sub_214400830(a1, a2, a3);
  v7 = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v5;
  *(_BYTE *)(a4 + 8) = v7;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for AxisMarkValues.Storage(0);
  v9 = *(int *)(result + 24);
  *(_BYTE *)(a4 + *(int *)(result + 20)) = 2;
  *(_BYTE *)(a4 + v9) = 2;
  return result;
}

uint64_t sub_2142CE2B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2142CE2DC@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(__int128 *);
  char v6;
  __int128 v8;
  char v9;
  __int128 v10;

  v3 = v2[2];
  v4 = v2[4];
  v5 = (uint64_t (*)(__int128 *))v2[6];
  v6 = *((_BYTE *)a1 + 16);
  v8 = *a1;
  v9 = v6;
  v10 = *(__int128 *)((char *)a1 + 24);
  a2[3] = v3;
  a2[4] = v4;
  sub_2141D8DD8(a2);
  return v5(&v8);
}

uint64_t AxisMarks.init(preset:position:values:content:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  _QWORD *v20;
  uint64_t v22;
  char v23;
  char v24;

  v16 = type metadata accessor for AxisMarkValues(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a2;
  v24 = *a1;
  v23 = v19;
  sub_2141FDEA0(a3, (uint64_t)v18, type metadata accessor for AxisMarkValues);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a6;
  v20[3] = a7;
  v20[4] = a4;
  v20[5] = a5;
  AxisMarks.init(preset:position:values:content:)(&v24, &v23, (uint64_t)v18, (uint64_t)sub_2142CE530, (uint64_t)v20, a6, a7, a8);
  return sub_2141DD370(a3, type metadata accessor for AxisMarkValues);
}

uint64_t type metadata accessor for AxisMarkValues(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F11CB0);
}

uint64_t sub_2142CE458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v15 - v10;
  v12(v9);
  sub_2142D7304((uint64_t)v8, a2, (uint64_t)v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  sub_2142D6BB0((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_2142CE530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2142CE458(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t AxisMarks.init<A>(preset:position:values:content:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  char v17;
  _QWORD *v18;
  char v20;
  char v21;

  v17 = *a2;
  v21 = *a1;
  v20 = v17;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a6;
  v18[3] = a7;
  v18[4] = a8;
  v18[5] = a10;
  v18[6] = a4;
  v18[7] = a5;
  return AxisMarks.init<A>(preset:position:values:content:)(&v21, &v20, a3, (uint64_t)sub_2142CE6CC, (uint64_t)v18, a6, a7, a8, a9, a10);
}

uint64_t sub_2142CE5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v15 - v10;
  v12(v9);
  sub_2142D7304((uint64_t)v8, a2, (uint64_t)v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  sub_2142D6BB0((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_2142CE6CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2142CE5F4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t AxisMarks.init<A>(format:preset:position:values:stroke:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  char v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[48];

  v16 = *a3;
  *a9 = *a2;
  a9[1] = v16;
  v17 = sub_2141D8BF8(&qword_254D6A8C0);
  sub_2141E070C(a4, (uint64_t)&a9[*(int *)(v17 + 40)], &qword_253F147A8);
  v20 = sub_2141D8BF8(&qword_254D698F8);
  v21 = sub_21424C95C();
  *(_QWORD *)&v19 = swift_allocObject();
  sub_2143C8C74(a1, a5, a6, a7, a8, v19 + 16);
  sub_21421C140(a5);
  sub_2141DD370(a4, type metadata accessor for AxisMarkValues);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  sub_2141D8DC0(&v19, (uint64_t)v22);
  v22[40] = 0;
  return sub_21424CA58((uint64_t)v22, (uint64_t)&a9[*(int *)(v17 + 44)]);
}

uint64_t sub_2142CE800()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21424CA0C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_BYTE *)(v0 + 304));
  return swift_deallocObject();
}

uint64_t AxisMarks.init<A, B>(format:preset:position:values:stroke:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE v25[48];

  v17 = *a3;
  *a9 = *a2;
  a9[1] = v17;
  v18 = sub_2141D8BF8(&qword_254D6A8C0);
  v19 = (uint64_t)&a9[*(int *)(v18 + 40)];
  sub_2142CE244(a4, a6, a8, v19);
  v20 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
  v23 = sub_2141D8BF8(&qword_254D698F8);
  v24 = sub_21424C95C();
  *(_QWORD *)&v22 = swift_allocObject();
  sub_2143C8C74(a1, a5, a7, a10, a8, v22 + 16);
  sub_21421C140(a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 8))(a1, a7);
  sub_2141D8DC0(&v22, (uint64_t)v25);
  v25[40] = 0;
  return sub_21424CA58((uint64_t)v25, (uint64_t)&a9[*(int *)(v18 + 44)]);
}

uint64_t AxisMarks.init<>(preset:position:values:stroke:)@<X0>(_BYTE *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  char v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[48];

  v8 = *a2;
  *a5 = *a1;
  a5[1] = v8;
  v9 = sub_2141D8BF8(&qword_254D6A8C0);
  sub_2141E070C(a3, (uint64_t)&a5[*(int *)(v9 + 40)], &qword_253F147A8);
  v12 = sub_2141D8BF8(&qword_254D698F8);
  v13 = sub_21424C95C();
  *(_QWORD *)&v11 = swift_allocObject();
  sub_2143C8E68(a4, v11 + 16);
  sub_21421C140(a4);
  sub_2141DD370(a3, type metadata accessor for AxisMarkValues);
  sub_2141D8DC0(&v11, (uint64_t)v14);
  v14[40] = 0;
  return sub_21424CA58((uint64_t)v14, (uint64_t)&a5[*(int *)(v9 + 44)]);
}

uint64_t AxisMarks.init<A>(preset:position:values:stroke:)@<X0>(_BYTE *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t result;

  v12 = *a2;
  *a7 = *a1;
  a7[1] = v12;
  v13 = sub_2141D8BF8(&qword_254D6A8C0);
  v14 = (uint64_t)&a7[*(int *)(v13 + 40)];
  sub_2142CE244(a3, a5, a6, v14);
  v15 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  v16 = &a7[*(int *)(v13 + 44)];
  *((_QWORD *)v16 + 3) = sub_2141D8BF8(&qword_254D698F8);
  *((_QWORD *)v16 + 4) = sub_21424C95C();
  v17 = swift_allocObject();
  *(_QWORD *)v16 = v17;
  sub_2143C8E68(a4, v17 + 16);
  result = sub_21421C140(a4);
  v16[40] = 0;
  return result;
}

uint64_t static AxisMarks._makeAxisContent(_:_:)@<X0>(__int16 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v8 = (int *)type metadata accessor for AxisMarksConfiguration();
  v9 = *((_QWORD *)v8 - 1);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (_WORD *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *a1;
  v14 = type metadata accessor for AxisMarks(0, a2, a3, v13);
  sub_2141E070C((uint64_t)a1 + *(int *)(v14 + 40), (uint64_t)v11 + v8[6], &qword_253F147A8);
  sub_2141DFD94((uint64_t)a1 + *(int *)(v14 + 44), (uint64_t)v11 + v8[7]);
  v15 = (char *)v11 + v8[8];
  *((_QWORD *)v15 + 4) = 0;
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *v11 = v12;
  sub_2141D8BF8(&qword_253F122A8);
  v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_214426EF0;
  result = sub_2141FE1E0((uint64_t)v11, v17 + v16, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
  *a4 = v17;
  return result;
}

uint64_t sub_2142CEC8C@<X0>(__int16 *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return static AxisMarks._makeAxisContent(_:_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

void static AxisMarkPreset.extended.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AxisMarkPreset.aligned.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AxisMarkPreset.inset.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t AxisMarkPreset.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2142CECE8 + 4 * byte_21442AD30[*v0]))(0x6465646E65747865, 0xE800000000000000);
}

uint64_t sub_2142CECE8()
{
  return 0x64656E67696C61;
}

uint64_t sub_2142CED00()
{
  return 0x7465736E69;
}

uint64_t sub_2142CED14()
{
  return 0x6974616D6F747561;
}

uint64_t sub_2142CED30()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2142CED64 + 4 * byte_21442AD34[*v0]))(0x6974616D6F747561, 0xE900000000000063);
}

uint64_t sub_2142CED64()
{
  return 0x6465646E65747865;
}

uint64_t sub_2142CED7C()
{
  return 0x7465736E69;
}

uint64_t sub_2142CED90()
{
  return 0x64656E67696C61;
}

uint64_t AxisMarkPosition.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2142CEDD8 + 4 * byte_21442AD38[*v0]))(0x676E696461656CLL, 0xE700000000000000);
}

uint64_t sub_2142CEDD8()
{
  return 7368564;
}

uint64_t sub_2142CEDE8()
{
  return 0x6D6F74746F62;
}

uint64_t sub_2142CEDFC()
{
  return 0x676E696C69617274;
}

uint64_t sub_2142CEE14()
{
  return 0x6974616D6F747561;
}

uint64_t sub_2142CEE30()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2142CEE64 + 4 * byte_21442AD3D[*v0]))(0x6974616D6F747561, 0xE900000000000063);
}

uint64_t sub_2142CEE64()
{
  return 7368564;
}

uint64_t sub_2142CEE74()
{
  return 0x6D6F74746F62;
}

uint64_t sub_2142CEE88()
{
  return 0x676E696461656CLL;
}

uint64_t sub_2142CEEA0()
{
  return 0x676E696C69617274;
}

uint64_t static AxisMarkValues.automatic(desiredCount:roundLowerBound:roundUpperBound:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a5 = a1;
  *(_BYTE *)(a5 + 8) = a2 & 1;
  *(_QWORD *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 24) = 1;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  v8 = type metadata accessor for AxisMarkValues.Storage(0);
  v9 = *(int *)(v8 + 24);
  *(_BYTE *)(a5 + *(int *)(v8 + 20)) = a3;
  *(_BYTE *)(a5 + v9) = a4;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a5, 0, 1, v8);
}

uint64_t static AxisMarkValues.automatic<A>(minimumStride:desiredCount:roundLowerBound:roundUpperBound:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v12 + 16))((char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2142B585C();
  sub_214424D10();
  v13 = v17[1];
  *(_QWORD *)a6 = a2;
  *(_BYTE *)(a6 + 8) = a3 & 1;
  *(_QWORD *)(a6 + 16) = v13;
  *(_BYTE *)(a6 + 24) = 0;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  v14 = type metadata accessor for AxisMarkValues.Storage(0);
  v15 = *(int *)(v14 + 24);
  *(_BYTE *)(a6 + *(int *)(v14 + 20)) = a4;
  *(_BYTE *)(a6 + v15) = a5;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a6, 0, 1, v14);
}

uint64_t static AxisMarkValues.stride(by:count:roundLowerBound:roundUpperBound:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = sub_2141D8BF8(&qword_253F11CA8);
  v13 = *(int *)(v12 + 48);
  v14 = a6 + *(int *)(v12 + 64);
  v15 = sub_214423C48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a6, a1, v15);
  *(_QWORD *)(a6 + v13) = a2;
  sub_2141E070C(a5, v14, &qword_253F13D88);
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  v16 = type metadata accessor for AxisMarkValues.Storage(0);
  v17 = *(int *)(v16 + 24);
  *(_BYTE *)(a6 + *(int *)(v16 + 20)) = a3;
  *(_BYTE *)(a6 + v17) = a4;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a6, 0, 1, v16);
}

uint64_t static AxisMarkValues.stride<A>(by:roundLowerBound:roundUpperBound:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v8 + 16))((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2142B585C();
  sub_214424D10();
  *a4 = v12[1];
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(int *)(v9 + 24);
  *((_BYTE *)a4 + *(int *)(v9 + 20)) = a2;
  *((_BYTE *)a4 + v10) = a3;
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a4, 0, 1, v9);
}

uint64_t AxisMarkValues.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[3];

  v1 = sub_214423B70();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_214423C48();
  v18[1] = *(_QWORD *)(v2 - 8);
  v18[2] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v18[0] = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2141D8BF8(&qword_253F147A8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AxisMarkValues.Storage(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v14;
  sub_2141E070C(v0, (uint64_t)v9, &qword_253F147A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v15) != 1)
  {
    sub_2141FE1E0((uint64_t)v9, (uint64_t)v13, type metadata accessor for AxisMarkValues.Storage);
    sub_2141FDEA0((uint64_t)v13, (uint64_t)v6, type metadata accessor for AxisMarkValues.Storage.Stride);
    v16 = (char *)&loc_2142CF434 + 4 * byte_21442AD42[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_2141E0750((uint64_t)v9, &qword_253F147A8);
  return 0x6974616D6F747561;
}

uint64_t sub_2142CFC58(uint64_t a1, char a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  v33 = a4;
  v31 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v7 = MEMORY[0x24BDAC7A8](v31);
  v34 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v35 = (uint64_t)&v31 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - v11;
  v13 = sub_214423B70();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v32 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v36 = (char *)&v31 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v31 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21((char *)&v31 - v19, a1, v13);
  sub_2141E070C(a3, (uint64_t)v12, (uint64_t *)&unk_253F15EB0);
  if ((a2 & 1) != 0)
  {
    v22 = 1;
  }
  else
  {
    sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v22 = sub_214424E78();
  }
  sub_2141E0750((uint64_t)v12, (uint64_t *)&unk_253F15EB0);
  v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v20, v13);
  v24 = v36;
  v21(v36, a1, v13);
  v25 = v35;
  sub_2141E070C(a3, v35, (uint64_t *)&unk_253F15EB0);
  if ((v22 & 1) != 0)
  {
    v26 = v24;
    v27 = v32;
    v21(v32, (uint64_t)v26, v13);
    v28 = v34;
    sub_2141E070C(v25, v34, (uint64_t *)&unk_253F15EB0);
    if ((v33 & 1) != 0)
    {
      v29 = 1;
    }
    else
    {
      sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      v29 = sub_214424E84();
    }
    sub_2141E0750(v28, (uint64_t *)&unk_253F15EB0);
    v23(v27, v13);
    v24 = v36;
  }
  else
  {
    v29 = 0;
  }
  sub_2141E0750(v25, (uint64_t *)&unk_253F15EB0);
  v23(v24, v13);
  return v29 & 1;
}

uint64_t sub_2142CFF30()
{
  char v0;
  uint64_t result;
  uint64_t v2;
  char v3;

  if (qword_254D68EB8 != -1)
    swift_once();
  swift_beginAccess();
  v0 = sub_21420FE74(&v3, 5);
  result = swift_endAccess();
  if ((v0 & 1) != 0)
  {
    sub_2141D8BF8(qword_254D6A8D0);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_214426EF0;
    *(_QWORD *)(v2 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v2 + 32) = 0xD000000000000038;
    *(_QWORD *)(v2 + 40) = 0x800000021445A5C0;
    sub_21442585C();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_2142D001C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x24BDAC7A8](v1);
  sub_2141FDEA0(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)&loc_2142D00C4 + dword_2142D056C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2142D00D4()
{
  char v0;
  char v1;
  uint64_t v2;
  char v3;
  double v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  char v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[16];
  char v35;
  uint64_t v36;
  char v37;

  v9 = *(double *)(v6 + 16);
  v10 = *(unsigned __int8 *)(v6 + 24);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    v11 = 4;
  }
  else
  {
    v11 = *(_QWORD *)v6;
    if (v11 < 1)
      return MEMORY[0x24BEE4AF8];
  }
  v12 = COERCE_DOUBLE(sub_2142E95B8(v7));
  if ((v14 & 1) != 0)
    v15 = 1.0;
  else
    v15 = v13;
  if ((v14 & 1) != 0)
    v16 = 0.0;
  else
    v16 = v12;
  if ((v3 & 1) != 0)
  {
    v17 = sub_2142D0708(v16, v15);
    *(double *)(v8 - 176) = v16;
    *(double *)(v8 - 168) = v15;
    v18 = type metadata accessor for AxisMarkValues.Storage(0);
    MEMORY[0x24BDAC7A8](v18);
    v35 = v19 & 1;
    v36 = v8 - 176;
    v37 = v20 & 1;
    swift_bridgeObjectRetain();
    v21 = sub_2142CD4F4((uint64_t)sub_2142D5A9C, (uint64_t)v34, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = v15;
    if ((v5 & 1) == 0)
    {
      v22 = v15;
      if (v4 > 0.0)
      {
        v22 = v16 + v4;
        if (v16 > v16 + v4)
        {
          __break(1u);
          JUMPOUT(0x2142D056CLL);
        }
      }
    }
    v23 = 0.0;
    if ((v1 & 1) != 0)
      v23 = 1.0;
    if (v10)
      v9 = v23;
    v24 = type metadata accessor for AxisMarkValues.Storage(0);
    v25 = *(unsigned __int8 *)(v2 + *(int *)(v24 + 20));
    if (v25 == 2)
      LOBYTE(v25) = v0;
    v26 = *(unsigned __int8 *)(v2 + *(int *)(v24 + 24));
    if (v26 == 2)
      LOBYTE(v26) = v0;
    v27 = v25 & 1;
    v28 = v26 & 1;
    v29 = sub_2143872F4(v11, v16, v22, v9, v25 & 1, v26 & 1);
    sub_2142D057C(v8 - 176, v29, v16, v15);
    sub_21421CF8C(v8 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
    sub_2142CDD00();
    v31 = v30;
    v32 = sub_21421CF8C(v8 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214208738);
    *(double *)(v8 - 192) = v16;
    *(double *)(v8 - 184) = v15;
    MEMORY[0x24BDAC7A8](v32);
    v35 = v27;
    v36 = v8 - 192;
    v37 = v28;
    swift_bridgeObjectRetain();
    v21 = sub_2142CD4F4((uint64_t)sub_2142D5A9C, (uint64_t)v34, v31);
    sub_21421CF8C(v8 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214208738);
    swift_bridgeObjectRelease();
  }
  return v21;
}

uint64_t sub_2142D057C@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  if (a2 <= 0.0)
  {
    __break(1u);
  }
  else
  {
    v6 = floor(a3 / a2);
    v7 = v6 * a2;
    sub_2142D1720((uint64_t)&v11, ceil((a4 - v6 * a2) / a2));
    if ((v12 & 1) == 0)
    {
      v8 = v11;
      v9 = swift_allocObject();
      *(double *)(v9 + 16) = a2;
      *(double *)(v9 + 24) = v7;
      result = swift_allocObject();
      *(double *)(result + 16) = v7;
      *(double *)(result + 24) = a2;
      *(double *)a1 = a2;
      *(double *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = sub_2142D5AFC;
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = sub_2142D5B24;
      *(_QWORD *)(a1 + 48) = result;
      *(_BYTE *)(a1 + 56) = 0;
      return result;
    }
  }
  v11 = 0;
  v12 = 0xE000000000000000;
  sub_2144254D8();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2142D0708(long double a1, long double a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 <= 0.0)
    goto LABEL_6;
  v4 = 1.0;
  if (a1 > 0.0)
    v4 = floor(log10(a1));
  v5 = log10(a2);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0 && (v6 = ceil(v5), (~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0))
  {
    sub_2142CD908(v4, v6, 1.0);
    v7 = v13;
    if (a1 >= 0.0)
      goto LABEL_14;
  }
  else
  {
LABEL_6:
    v7 = MEMORY[0x24BEE4AF8];
    if (a1 >= 0.0)
      goto LABEL_14;
  }
  v8 = 1.0;
  if (a2 < 0.0)
    v8 = floor(log10(-a2));
  v9 = log10(-a1);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
  {
    v10 = ceil(v9);
    if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) != 0)
    {
      sub_2142CDB00(v8, v10, 1.0);
      v12 = sub_2142CD1E4(v11);
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_17;
      goto LABEL_15;
    }
  }
LABEL_14:
  v12 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_17:
    v14 = MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
LABEL_15:
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_17;
  sub_2141D8BF8(&qword_253F15D48);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v14 + 32) = 0;
LABEL_18:
  swift_bridgeObjectRetain();
  sub_2143EAEC0(v14);
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  sub_2143EAEC0(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

void sub_2142D08C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  char *v39;
  _QWORD v40[6];
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;

  v51 = a4;
  v44 = a3;
  v40[2] = a2;
  v55 = a1;
  v41 = type metadata accessor for CalendarBinningUnit(0);
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_214423C54();
  v50 = *(_QWORD *)(v52 - 8);
  v6 = MEMORY[0x24BDAC7A8](v52);
  v40[5] = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)v40 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v47 = (char *)v40 - v10;
  v11 = type metadata accessor for DateBins(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v42 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)v40 - v14;
  v61 = sub_2141D8BF8(&qword_253F15D60);
  v15 = MEMORY[0x24BDAC7A8](v61);
  MEMORY[0x24BDAC7A8](v15);
  v60 = (char *)v40 - v16;
  v17 = sub_214423B70();
  v54 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v58 = (char *)v40 - v19;
  v59 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v20 = MEMORY[0x24BDAC7A8](v59);
  v40[4] = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v49 = (char *)v40 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v57 = (char *)v40 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v63 = (char *)v40 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v45 = (char *)v40 - v29;
  v30 = sub_2141D8BF8(&qword_253F13D88);
  v31 = MEMORY[0x24BDAC7A8](v30);
  MEMORY[0x24BDAC7A8](v31);
  v64 = sub_214423C48();
  v62 = *(_QWORD *)(v64 - 8);
  v32 = MEMORY[0x24BDAC7A8](v64);
  v40[3] = (char *)v40 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v56 = (char *)v40 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v36 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x24BDAC7A8](v36);
  v53 = v4;
  sub_2141FDEA0(v4, (uint64_t)v40 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0), v38);
  v39 = (char *)&loc_2142D0D18 + *((int *)qword_2142D1608 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_2142D0D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  _BYTE v47[24];
  uint64_t v48;
  char v49;

  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    v6 = 4;
    v7 = *(_QWORD *)(v5 - 184);
    goto LABEL_5;
  }
  v6 = *(_QWORD *)v1;
  v7 = *(_QWORD *)(v5 - 184);
  if (*(uint64_t *)v1 >= 1)
  {
LABEL_5:
    *(_QWORD *)(v5 - 192) = v6;
    *(_QWORD *)(v5 - 360) = v2;
    *(_QWORD *)(v5 - 184) = v0;
    sub_2142E95B8(*(_QWORD *)(v5 - 208));
    sub_2144239E4();
    sub_2144239E4();
    *(_QWORD *)(v5 - 200) = sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    if ((sub_214424E84() & 1) != 0)
    {
      v9 = *(_QWORD *)(v5 - 168);
      v10 = *(_QWORD *)(v5 - 160);
      v11 = v9 + *(int *)(v10 + 48);
      v12 = *(_QWORD **)(v5 - 216);
      v13 = (void (*)(uint64_t, uint64_t, uint64_t))v12[4];
      v13(v9, v7, v3);
      v13(v11, v4, v3);
      v14 = *(_QWORD *)(v5 - 184);
      v15 = v14 + *(int *)(v10 + 48);
      v16 = (void (*)(uint64_t, uint64_t, uint64_t))v12[2];
      v16(v14, v9, v3);
      *(_QWORD *)(v5 - 208) = v16;
      v16(v15, v11, v3);
      v17 = *(_QWORD *)(v5 - 144);
      v13(v17, v14, v3);
      v18 = (void (*)(uint64_t, uint64_t))v12[1];
      v18(v15, v3);
      v19 = v14 + *(int *)(v10 + 48);
      v13(v14, v9, v3);
      v13(v19, v11, v3);
      v13(v17 + *(int *)(*(_QWORD *)(v5 - 176) + 36), v19, v3);
      v18(v14, v3);
      v20 = v17;
      v21 = *(_QWORD *)(v5 - 256);
      sub_2141E801C(v20, v21, (uint64_t *)&unk_253F15EB0);
      v22 = *(_QWORD *)(v5 - 360);
      sub_2141E070C(v21, v22, (uint64_t *)&unk_253F15EB0);
      if ((*(_DWORD *)(v5 - 296) & 1) != 0 || *(double *)(v5 - 352) <= 0.0)
        goto LABEL_10;
      sub_214423B4C();
      if ((sub_214424E84() & 1) != 0)
      {
        v23 = v22;
        v24 = *(_QWORD *)(v5 - 168);
        v25 = *(_QWORD *)(v5 - 160);
        v26 = v24 + *(int *)(v25 + 48);
        v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 208);
        v27(v24, v23, v3);
        sub_2141E0750(v23, (uint64_t *)&unk_253F15EB0);
        v13(v26, v7, v3);
        v28 = *(_QWORD *)(v5 - 184);
        v29 = v28 + *(int *)(v25 + 48);
        v27(v28, v24, v3);
        v27(v29, v26, v3);
        v30 = *(_QWORD *)(v5 - 144);
        v13(v30, v28, v3);
        v18(v29, v3);
        v31 = v28 + *(int *)(v25 + 48);
        v13(v28, v24, v3);
        v13(v31, v26, v3);
        v13(v30 + *(int *)(*(_QWORD *)(v5 - 176) + 36), v31, v3);
        v18(v28, v3);
        sub_2141E801C(v30, v23, (uint64_t *)&unk_253F15EB0);
        v22 = v23;
LABEL_10:
        v32 = *(_QWORD *)(v5 - 336);
        sub_2141E070C(v22, v32, (uint64_t *)&unk_253F15EB0);
        type metadata accessor for AxisMarkValues.Storage(0);
        v33 = *(_QWORD *)(v5 - 240);
        v34 = sub_2142CA04C(v32, v33);
        v35 = *(_QWORD *)(v5 - 304);
        sub_2143325F8(v32, v34, *(_QWORD *)(v5 - 192), v35);
        swift_bridgeObjectRelease();
        sub_2141E0750(v32, (uint64_t *)&unk_253F15EB0);
        v36 = *(_QWORD *)(v5 - 344);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 152) + 16))(v36, v35, *(_QWORD *)(v5 - 136));
        v37 = *(_QWORD *)(v35 + *(int *)(*(_QWORD *)(v5 - 320) + 20));
        v38 = *(_QWORD *)(v5 - 256);
        v39 = *(_QWORD *)(v5 - 144);
        sub_2141E070C(v38, v39, (uint64_t *)&unk_253F15EB0);
        v40 = *(_QWORD *)(v5 - 328);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 248) + 16))(v40, v33, *(_QWORD *)(v5 - 232));
        v41 = *(_QWORD *)(v5 - 312);
        DateBins.init(unit:by:range:calendar:)(v36, v37, v39, v40, v41);
        v42 = DateBins.thresholds.getter();
        MEMORY[0x24BDAC7A8](v42);
        v47[16] = v43;
        v48 = v38;
        v49 = v44;
        swift_bridgeObjectRetain();
        v45 = sub_2142CD63C((uint64_t (*)(char *))sub_2142D5B30, (uint64_t)v47, v42);
        swift_bridgeObjectRelease();
        v8 = sub_2142CD0F4(v45);
        swift_bridgeObjectRelease();
        sub_2141DD370(v41, type metadata accessor for DateBins);
        sub_2141DD370(v35, type metadata accessor for CalendarBinningUnit);
        sub_2141E0750(*(_QWORD *)(v5 - 360), (uint64_t *)&unk_253F15EB0);
        sub_2141E0750(v38, (uint64_t *)&unk_253F15EB0);
        return v8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x2142D1608);
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_2142D1618(double a1, double a2, double a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  sub_2142D1720((uint64_t)&v4, floor((a1 - a2) / a3));
  if ((v5 & 1) == 0)
    return v4;
  v4 = 0;
  v5 = 0xE000000000000000;
  sub_2144254D8();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  result = sub_214425628();
  __break(1u);
  return result;
}

BOOL sub_2142D1720(uint64_t a1, double a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v6 = v4 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    v12 = 0;
    result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047)
    goto LABEL_28;
  v7 = sub_2144250F4();
  if (v7 > 63)
    goto LABEL_28;
  v8 = v7;
  v9 = sub_2144250DC();
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit64(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    v12 = 0;
    result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64)
      goto LABEL_11;
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0)
    goto LABEL_32;
  if ((unint64_t)v12 < 0x40)
  {
    v14 = v5 << v12;
    if (v8 != 63)
      goto LABEL_17;
LABEL_34:
    if (a2 < 0.0 && !v14)
      goto LABEL_36;
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63)
    goto LABEL_27;
  v13 = 0;
  v14 = 0;
  if (v8 < 0)
    goto LABEL_20;
LABEL_19:
  v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    v12 = v14 | v13;
    if (a2 >= 0.0)
      break;
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0)
      goto LABEL_11;
    v14 = v5 >> -(char)v12;
    if (v8 == 63)
      goto LABEL_34;
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_19;
    v13 = 0;
  }
  if (v12 < 0)
    goto LABEL_31;
  LOBYTE(v6) = 0;
LABEL_25:
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

void sub_2142D18A4()
{
  unint64_t v0;

  sub_21420E5A4(319, (unint64_t *)&qword_253F147B0, (void (*)(uint64_t))type metadata accessor for AxisMarkValues.Storage);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_2142D1938(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v31;
  _BYTE *v32;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  v7 = *(int *)(a3 + 40);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AxisMarkValues.Storage(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_14;
  }
  v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v22 = v9[8];
    *(_QWORD *)v8 = *(_QWORD *)v9;
    v8[8] = v22;
    swift_bridgeObjectRetain();
LABEL_12:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v16 = sub_214423C48();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v8, v9, v16);
    v17 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&v8[*(int *)(v17 + 48)] = *(_QWORD *)&v9[*(int *)(v17 + 48)];
    v18 = *(int *)(v17 + 64);
    v32 = &v8[v18];
    v19 = &v9[v18];
    v20 = sub_214423C54();
    v31 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48))(v19, 1, v20))
    {
      v21 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(v32, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 16))(v32, v19, v20);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v20);
    }
    goto LABEL_12;
  }
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_13:
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
  v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_14:
  v23 = *(int *)(a3 + 44);
  v24 = (char *)v4 + v23;
  v25 = (char *)a2 + v23;
  v26 = *((unsigned __int8 *)a2 + v23 + 40);
  if (v26 == 1)
  {
    v28 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v28;
    v24[40] = 1;
    swift_retain();
  }
  else if (v26)
  {
    v29 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v29;
    *(_OWORD *)(v24 + 25) = *(_OWORD *)(v25 + 25);
  }
  else
  {
    v27 = *(_OWORD *)(v25 + 24);
    *(_OWORD *)(v24 + 24) = v27;
    (**(void (***)(char *))(v27 - 8))(v24);
    v24[40] = 0;
  }
  return v4;
}

uint64_t sub_2142D1BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for AxisMarkValues.Storage(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    type metadata accessor for AxisMarkValues.Storage.Stride(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      swift_bridgeObjectRelease();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_214423C48();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4, v8);
      v9 = v4 + *(int *)(sub_2141D8BF8(&qword_253F11CA8) + 64);
      v10 = sub_214423C54();
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  result = a1 + *(int *)(a2 + 44);
  if (*(_BYTE *)(result + 40) == 1)
    return swift_release();
  if (!*(_BYTE *)(result + 40))
    return _s6Charts15AnyChartContentVwxx_0(result);
  return result;
}

_WORD *sub_2142D1D1C(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v29;
  _BYTE *v30;

  *a1 = *a2;
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_12;
  }
  v12 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v20 = v8[8];
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v7[8] = v20;
    swift_bridgeObjectRetain();
LABEL_10:
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v14 = sub_214423C48();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
    v15 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&v7[*(int *)(v15 + 48)] = *(_QWORD *)&v8[*(int *)(v15 + 48)];
    v16 = *(int *)(v15 + 64);
    v30 = &v7[v16];
    v17 = &v8[v16];
    v18 = sub_214423C54();
    v29 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v17, 1, v18))
    {
      v19 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(v30, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 16))(v30, v17, v18);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v18);
    }
    goto LABEL_10;
  }
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_11:
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_12:
  v21 = *(int *)(a3 + 44);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *((unsigned __int8 *)a2 + v21 + 40);
  if (v24 == 1)
  {
    v26 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v26;
    v22[40] = 1;
    swift_retain();
  }
  else if (v24)
  {
    v27 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v27;
    *(_OWORD *)(v22 + 25) = *(_OWORD *)(v23 + 25);
  }
  else
  {
    v25 = *(_OWORD *)(v23 + 24);
    *(_OWORD *)(v22 + 24) = v25;
    (**(void (***)(char *))(v25 - 8))(v22);
    v22[40] = 0;
  }
  return a1;
}

_BYTE *sub_2142D1F98(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v42;
  _BYTE *__dst;
  _BYTE *__dsta;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 40);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage);
LABEL_9:
      v22 = sub_2141D8BF8(&qword_253F147A8);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      if (a1 == a2)
        return a1;
      goto LABEL_27;
    }
    if (a1 != a2)
    {
      sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage.Stride);
      v23 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v33 = v8[8];
        *(_QWORD *)v7 = *(_QWORD *)v8;
        v7[8] = v33;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
          goto LABEL_26;
        }
        v25 = sub_214423C48();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v7, v8, v25);
        v26 = sub_2141D8BF8(&qword_253F11CA8);
        *(_QWORD *)&v7[*(int *)(v26 + 48)] = *(_QWORD *)&v8[*(int *)(v26 + 48)];
        v27 = *(int *)(v26 + 64);
        __dsta = &v7[v27];
        v28 = &v8[v27];
        v29 = sub_214423C54();
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          v31 = sub_2141D8BF8(&qword_253F13D88);
          memcpy(__dsta, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v30 + 16))(__dsta, v28, v29);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dsta, 0, 1, v29);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
LABEL_26:
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    if (a1 == a2)
      return a1;
    goto LABEL_27;
  }
  if (v13)
    goto LABEL_9;
  v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 3)
  {
    v32 = v8[8];
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v7[8] = v32;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v15 != 1)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      goto LABEL_20;
    }
    v16 = sub_214423C48();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v7, v8, v16);
    v17 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&v7[*(int *)(v17 + 48)] = *(_QWORD *)&v8[*(int *)(v17 + 48)];
    v18 = *(int *)(v17 + 64);
    __dst = &v7[v18];
    v19 = &v8[v18];
    v20 = sub_214423C54();
    v42 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v19, 1, v20))
    {
      v21 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 16))(__dst, v19, v20);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  if (a1 == a2)
    return a1;
LABEL_27:
  v34 = *(int *)(a3 + 44);
  v35 = &a1[v34];
  v36 = &a2[v34];
  sub_2141DE9E0((uint64_t)&a1[v34]);
  if (v36[40] == 1)
  {
    v38 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v38;
    v35[40] = 1;
    swift_retain();
  }
  else if (v36[40])
  {
    v39 = *(_OWORD *)v36;
    v40 = *((_OWORD *)v36 + 1);
    *(_OWORD *)(v35 + 25) = *(_OWORD *)(v36 + 25);
    *(_OWORD *)v35 = v39;
    *((_OWORD *)v35 + 1) = v40;
  }
  else
  {
    v37 = *((_QWORD *)v36 + 3);
    *((_QWORD *)v35 + 3) = v37;
    *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
    (**(void (***)(_BYTE *, _BYTE *))(v37 - 8))(v35, v36);
    v35[40] = 0;
  }
  return a1;
}

_WORD *sub_2142D23D8(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  char *__dst;

  *a1 = *a2;
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      v14 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&v7[*(int *)(v14 + 48)] = *(_QWORD *)&v8[*(int *)(v14 + 48)];
      v15 = *(int *)(v14 + 64);
      __dst = &v7[v15];
      v16 = &v8[v15];
      v17 = sub_214423C54();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v20 = *(int *)(a3 + 44);
  v21 = (_OWORD *)((char *)a1 + v20);
  v22 = (_OWORD *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  *(_OWORD *)((char *)v21 + 25) = *(_OWORD *)((char *)v22 + 25);
  return a1;
}

_WORD *sub_2142D25E0(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  char *__dst;
  char *__dsta;

  *a1 = *a2;
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 != a2)
      {
        sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage.Stride);
        v23 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v24 = sub_214423C48();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v7, v8, v24);
          v25 = sub_2141D8BF8(&qword_253F11CA8);
          *(_QWORD *)&v7[*(int *)(v25 + 48)] = *(_QWORD *)&v8[*(int *)(v25 + 48)];
          v26 = *(int *)(v25 + 64);
          __dsta = &v7[v26];
          v27 = &v8[v26];
          v28 = sub_214423C54();
          v29 = *(_QWORD *)(v28 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
          {
            v30 = sub_2141D8BF8(&qword_253F13D88);
            memcpy(__dsta, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v29 + 32))(__dsta, v27, v28);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dsta, 0, 1, v28);
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
      }
      v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      if (a1 != a2)
        goto LABEL_18;
      return a1;
    }
    sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage);
LABEL_8:
    v22 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_18;
  }
  if (v13)
    goto LABEL_8;
  v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = sub_214423C48();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v7, v8, v15);
    v16 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&v7[*(int *)(v16 + 48)] = *(_QWORD *)&v8[*(int *)(v16 + 48)];
    v17 = *(int *)(v16 + 64);
    __dst = &v7[v17];
    v18 = &v8[v17];
    v19 = sub_214423C54();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  if (a1 != a2)
  {
LABEL_18:
    v31 = *(int *)(a3 + 44);
    v32 = (_OWORD *)((char *)a2 + v31);
    v33 = (_OWORD *)((char *)a1 + v31);
    sub_2141DE9E0((uint64_t)a1 + v31);
    v34 = v32[1];
    *v33 = *v32;
    v33[1] = v34;
    *(_OWORD *)((char *)v33 + 25) = *(_OWORD *)((char *)v32 + 25);
  }
  return a1;
}

uint64_t sub_2142D2970()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142D297C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_2141D8BF8(&qword_253F147A8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 40), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44) + 40);
  if (v9 > 2)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_2142D2A00()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142D2A0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2141D8BF8(&qword_253F147A8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 40), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 44) + 40) = -(char)a2;
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPreset()
{
  return &type metadata for AxisMarkPreset;
}

uint64_t getEnumTagSinglePayload for AxisMarkPosition(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  if (*a1 <= 4u)
    v6 = 4;
  else
    v6 = *a1;
  v7 = v6 - 5;
  if (*a1 < 4u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisMarkPosition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2142D2B90 + 4 * byte_21442AD4B[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2142D2BC4 + 4 * byte_21442AD46[v4]))();
}

uint64_t sub_2142D2BC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142D2BCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2142D2BD4);
  return result;
}

uint64_t sub_2142D2BE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2142D2BE8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2142D2BEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142D2BF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPosition()
{
  return &type metadata for AxisMarkPosition;
}

char *initializeBufferWithCopyOfBuffer for AxisMarkValues(char *a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = *(_QWORD *)(sub_2141D8BF8(&qword_253F147A8) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  v6 = type metadata accessor for AxisMarkValues.Storage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v9 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v19 = a2[8];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_13:
        a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
        a1[*(int *)(v6 + 24)] = a2[*(int *)(v6 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        return a1;
      }
      v11 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
      v13 = *(int *)(v12 + 64);
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = sub_214423C54();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  memcpy(a1, a2, *(_QWORD *)(v4 + 64));
  return a1;
}

uint64_t destroy for AxisMarkValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for AxisMarkValues.Storage(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    type metadata accessor for AxisMarkValues.Storage.Stride(0);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 3)
    {
      return swift_bridgeObjectRelease();
    }
    else if ((_DWORD)result == 1)
    {
      v4 = sub_214423C48();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = a1 + *(int *)(sub_2141D8BF8(&qword_253F11CA8) + 64);
      v6 = sub_214423C54();
      v7 = *(_QWORD *)(v6 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    }
  }
  return result;
}

char *initializeWithCopy for AxisMarkValues(char *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = type metadata accessor for AxisMarkValues.Storage(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v7 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v17 = a2[8];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_11:
        a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
        a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
        return a1;
      }
      v9 = sub_214423C48();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
      v11 = *(int *)(v10 + 64);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_214423C54();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  v6 = sub_2141D8BF8(&qword_253F147A8);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  return a1;
}

_BYTE *assignWithCopy for AxisMarkValues(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_BYTE *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  v4 = type metadata accessor for AxisMarkValues.Storage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage);
      goto LABEL_9;
    }
    if (a1 != a2)
    {
      sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
      v20 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v31 = a2[8];
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = v31;
        swift_bridgeObjectRetain();
LABEL_23:
        swift_storeEnumTagMultiPayload();
        goto LABEL_24;
      }
      if (EnumCaseMultiPayload == 1)
      {
        v22 = sub_214423C48();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
        v23 = sub_2141D8BF8(&qword_253F11CA8);
        *(_QWORD *)&a1[*(int *)(v23 + 48)] = *(_QWORD *)&a2[*(int *)(v23 + 48)];
        v24 = *(int *)(v23 + 64);
        v25 = &a1[v24];
        v26 = &a2[v24];
        v27 = sub_214423C54();
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          v29 = sub_2141D8BF8(&qword_253F13D88);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        goto LABEL_23;
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
LABEL_24:
    a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
    a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
    return a1;
  }
  if (!v8)
  {
    v9 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    v10 = swift_getEnumCaseMultiPayload();
    if (v10 == 3)
    {
      v30 = a2[8];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = v30;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v10 != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_19:
        a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
        a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
        return a1;
      }
      v11 = sub_214423C48();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
      v13 = *(int *)(v12 + 64);
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = sub_214423C54();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
LABEL_9:
  v19 = sub_2141D8BF8(&qword_253F147A8);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  return a1;
}

char *initializeWithTake for AxisMarkValues(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for AxisMarkValues.Storage(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
      v10 = *(int *)(v9 + 64);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = sub_214423C54();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
    a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

char *assignWithTake for AxisMarkValues(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for AxisMarkValues.Storage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      v9 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v10 = sub_214423C48();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = sub_2141D8BF8(&qword_253F11CA8);
        *(_QWORD *)&a1[*(int *)(v11 + 48)] = *(_QWORD *)&a2[*(int *)(v11 + 48)];
        v12 = *(int *)(v11 + 64);
        v13 = &a1[v12];
        v14 = &a2[v12];
        v15 = sub_214423C54();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        {
          v17 = sub_2141D8BF8(&qword_253F13D88);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
      a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      return a1;
    }
LABEL_8:
    v18 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  if (v8)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    v19 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a1, a2, v20);
      v21 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v21 + 48)] = *(_QWORD *)&a2[*(int *)(v21 + 48)];
      v22 = *(int *)(v21 + 64);
      v23 = &a1[v22];
      v24 = &a2[v22];
      v25 = sub_214423C54();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
  a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisMarkValues()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142D3984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F147A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AxisMarkValues()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142D39D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F147A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_2142D3A14()
{
  unint64_t v0;

  sub_21420E5A4(319, (unint64_t *)&qword_253F147B0, (void (*)(uint64_t))type metadata accessor for AxisMarkValues.Storage);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t _s6Charts14AxisMarkPresetVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2142D3AD8 + 4 * byte_21442AD55[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2142D3B0C + 4 * byte_21442AD50[v4]))();
}

uint64_t sub_2142D3B0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142D3B14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2142D3B1CLL);
  return result;
}

uint64_t sub_2142D3B28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2142D3B30);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2142D3B34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142D3B3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPosition.Storage()
{
  return &type metadata for AxisMarkPosition.Storage;
}

uint64_t storeEnumTagSinglePayload for AxisMarkPreset.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2142D3BA4 + 4 * byte_21442AD5F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2142D3BD8 + 4 * byte_21442AD5A[v4]))();
}

uint64_t sub_2142D3BD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142D3BE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2142D3BE8);
  return result;
}

uint64_t sub_2142D3BF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2142D3BFCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2142D3C00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142D3C08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPreset.Storage()
{
  return &type metadata for AxisMarkPreset.Storage;
}

uint64_t destroy for AxisMarksContentStorage(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    return swift_release();
  if (!v1)
    return _s6Charts15AnyChartContentVwxx_0(result);
  return result;
}

uint64_t initializeWithCopy for AxisMarksContentStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 40) = 1;
    swift_retain();
  }
  else if (v3)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AxisMarksContentStorage(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 40) = 1;
      swift_retain();
    }
    else if (v5)
    {
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for AxisMarksContentStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisMarksContentStorage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AxisMarksContentStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisMarksContentStorage()
{
  return &type metadata for AxisMarksContentStorage;
}

char *sub_2142D3F04(char *a1, _BYTE *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v18 = a2[8];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = v18;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_11:
        v19 = *(int *)(a3 + 24);
        a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
        a1[v19] = a2[v19];
        return a1;
      }
      v9 = sub_214423C48();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
      v11 = *(int *)(v10 + 64);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_214423C54();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  v17 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t sub_2142D40B4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 3)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    v3 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = a1 + *(int *)(sub_2141D8BF8(&qword_253F11CA8) + 64);
    v5 = sub_214423C54();
    v6 = *(_QWORD *)(v5 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

char *sub_2142D4184(char *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v16 = a2[8];
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[8] = v16;
    swift_bridgeObjectRetain();
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v8 = sub_214423C48();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
    v10 = *(int *)(v9 + 64);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = sub_214423C54();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_9:
  v17 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v17] = a2[v17];
  return a1;
}

char *sub_2142D4308(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v16 = a2[8];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = v16;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
      v10 = *(int *)(v9 + 64);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = sub_214423C54();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_10:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_2142D44A8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_214423C48();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
    v9 = *(int *)(v8 + 64);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_214423C54();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v15 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v15] = a2[v15];
  return a1;
}

char *sub_2142D4600(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
      v9 = *(int *)(v8 + 64);
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_214423C54();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v15 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v15] = a2[v15];
  return a1;
}

uint64_t sub_2142D4770()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142D477C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_2142D4814()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142D4820(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t sub_2142D4898()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AxisMarkValues.Storage.Stride(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_2142D490C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v17 = a2[8];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = v17;
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
      v10 = *(int *)(v9 + 64);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = sub_214423C54();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_2142D4A90(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 3)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    v3 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = a1 + *(int *)(sub_2141D8BF8(&qword_253F11CA8) + 64);
    v5 = sub_214423C54();
    v6 = *(_QWORD *)(v5 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

char *sub_2142D4B50(char *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v15 = a2[8];
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[8] = v15;
    swift_bridgeObjectRetain();
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = sub_214423C48();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
    v9 = *(int *)(v8 + 64);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_214423C54();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_2142D4CAC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v15 = a2[8];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = v15;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
      v9 = *(int *)(v8 + 64);
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_214423C54();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_2142D4E20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_214423C48();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    v8 = *(int *)(v7 + 64);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_214423C54();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_2142D4F50(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      v8 = *(int *)(v7 + 64);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = sub_214423C54();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2142D5098()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[8];

  v6[4] = &unk_21442AED8;
  v0 = sub_214423C48();
  if (v1 <= 0x3F)
  {
    sub_21420E5A4(319, &qword_253F13D90, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = MEMORY[0x24BEE0178] + 64;
      swift_getTupleTypeLayout3();
      v6[5] = v6;
      v6[6] = v4;
      v6[7] = &unk_21442AEF0;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

unint64_t sub_2142D5178()
{
  unint64_t result;

  result = qword_254D6A8C8;
  if (!qword_254D6A8C8)
  {
    result = MEMORY[0x2199CD934](&unk_21442AF98, &type metadata for AxisMarkPreset.Storage);
    atomic_store(result, (unint64_t *)&qword_254D6A8C8);
  }
  return result;
}

unint64_t sub_2142D51C0()
{
  unint64_t result;

  result = qword_253F11E40;
  if (!qword_253F11E40)
  {
    result = MEMORY[0x2199CD934](&unk_21442B000, &type metadata for AxisMarkPosition.Storage);
    atomic_store(result, (unint64_t *)&qword_253F11E40);
  }
  return result;
}

uint64_t sub_2142D5204(double a1, double a2, double a3)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  _BOOL4 v8;

  result = 0;
  v4 = 0;
  v5 = 0;
  v6 = a1;
  do
  {
    v8 = v6 <= a2;
    if (a3 > 0.0)
      v8 = v6 >= a2;
    if (v8)
    {
      if ((v6 != a2) | v4 & 1)
        return result;
      v4 = 1;
    }
    else
    {
      v7 = __OFADD__(v5++, 1);
      if (v7)
        goto LABEL_12;
      v6 = a1 + (double)v5 * a3;
    }
    v7 = __OFADD__(result++, 1);
  }
  while (!v7);
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_2142D5278(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL4 v14;

  sub_2142D532C(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = type metadata accessor for AxisMarkValues.Storage(0);
  v6 = *(int *)(v5 + 20);
  v7 = *(unsigned __int8 *)(a1 + v6);
  v8 = *(unsigned __int8 *)(a2 + v6);
  if (v7 == 2)
  {
    if (v8 != 2)
      return 0;
LABEL_7:
    v11 = *(int *)(v5 + 24);
    v12 = *(unsigned __int8 *)(a1 + v11);
    v13 = *(unsigned __int8 *)(a2 + v11);
    if (v12 == 2)
    {
      if (v13 != 2)
        return 0;
    }
    else
    {
      v14 = (v12 & 1) == 0;
      if (v13 == 2 || ((v14 ^ v13) & 1) == 0)
        return 0;
    }
    return 1;
  }
  result = 0;
  v10 = (v7 & 1) == 0;
  if (v8 != 2 && ((v10 ^ v8) & 1) != 0)
    goto LABEL_7;
  return result;
}

void sub_2142D532C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v25 = sub_214423C54();
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v21[1] = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_2141D8BF8(&qword_253F13D98);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2141D8BF8(&qword_253F13D88);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v21[2] = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v28 = (char *)v21 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v26 = (char *)v21 - v10;
  v29 = sub_214423C48();
  MEMORY[0x24BDAC7A8](v29);
  v27 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_2141D8BF8(&qword_253F122F8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v21 + *(int *)(v17 + 48) - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141FDEA0(a1, (uint64_t)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AxisMarkValues.Storage.Stride);
  sub_2141FDEA0(v30, (uint64_t)v19, type metadata accessor for AxisMarkValues.Storage.Stride);
  v20 = (char *)sub_2142D55AC + 4 * byte_21442AD64[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2142D55AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  char v5;
  char v6;
  char v7;

  sub_2141FDEA0(v0, v2, type metadata accessor for AxisMarkValues.Storage.Stride);
  v3 = *(_QWORD *)v2;
  v4 = *(double *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 24);
  if (!swift_getEnumCaseMultiPayload())
  {
    v6 = *(_BYTE *)(v1 + 8);
    v7 = *(_BYTE *)(v1 + 24);
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      if (!*(_BYTE *)(v1 + 8))
        goto LABEL_11;
    }
    else
    {
      if (v3 != *(_QWORD *)v1)
        v6 = 1;
      if ((v6 & 1) != 0)
        goto LABEL_11;
    }
    if ((v5 & 1) != 0)
    {
      if (!*(_BYTE *)(v1 + 24))
      {
LABEL_11:
        sub_2141DD370(v0, type metadata accessor for AxisMarkValues.Storage.Stride);
        return 0;
      }
    }
    else
    {
      if (v4 != *(double *)(v1 + 16))
        v7 = 1;
      if ((v7 & 1) != 0)
        goto LABEL_11;
    }
    sub_2141DD370(v0, type metadata accessor for AxisMarkValues.Storage.Stride);
    return 1;
  }
  sub_2141E0750(v0, &qword_253F122F8);
  return 0;
}

uint64_t sub_2142D5A9C(double *a1)
{
  return sub_2142D5AB4(a1) & 1;
}

uint64_t sub_2142D5AB4(double *a1)
{
  uint64_t v1;
  double *v2;
  double v3;

  v2 = *(double **)(v1 + 24);
  v3 = *a1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0 && *v2 > v3)
    return 0;
  if (v3 <= v2[1])
    return 1;
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t sub_2142D5AEC()
{
  return swift_deallocObject();
}

double sub_2142D5AFC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double result;

  result = *(double *)(v2 + 16) * (double)a1 + *(double *)(v2 + 24);
  *a2 = result;
  return result;
}

uint64_t sub_2142D5B14()
{
  return swift_deallocObject();
}

uint64_t sub_2142D5B24(double *a1)
{
  uint64_t v1;

  return sub_2142D1618(*a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_2142D5B30(uint64_t a1)
{
  uint64_t v1;

  return sub_2142CFC58(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32)) & 1;
}

uint64_t sub_2142D5B6C(uint64_t a1)
{
  return sub_2142D5B30(a1) & 1;
}

void sub_2142D5B84()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2142D5B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x2199CD934](&unk_21442B084, a1, &v4);
}

void sub_2142D5BC8()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2142D5BD8()
{
  return sub_21442519C();
}

uint64_t sub_2142D5BE4()
{
  return sub_2144251FC();
}

uint64_t sub_2142D5BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t (*v7)(uint64_t *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a3, AssociatedTypeWitness);
  v7 = (uint64_t (*)(uint64_t *, _QWORD))sub_2144252A4();
  v9 = v8;
  v10 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, v9, v10);
  return v7(&v12, 0);
}

uint64_t sub_2142D5CC8()
{
  return sub_2144251B4();
}

uint64_t sub_2142D5CD4()
{
  return sub_2144251CC();
}

uint64_t sub_2142D5CE0()
{
  return sub_2144251C0();
}

uint64_t sub_2142D5CEC()
{
  return sub_2144251F0();
}

uint64_t sub_2142D5CF8()
{
  return sub_2144251D8();
}

void (*sub_2142D5D0C(uint64_t **a1, uint64_t a2))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  char *v9;
  void (*v10)(_QWORD *);
  uint64_t v11;
  uint64_t v12;

  v4 = (uint64_t *)malloc(0x40uLL);
  *a1 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4[4] = TupleTypeMetadata2;
  v8 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v4[5] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v4[6] = (uint64_t)v9;
  v10 = sub_2142D5E88(v4, a2);
  v12 = v11;
  v4[7] = (uint64_t)v10;
  (*(void (**)(char *))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v12, v6);
  return sub_2142D5E34;
}

void sub_2142D5E34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_2142D5E88(uint64_t *a1, uint64_t a2))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  void *v6;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v5 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v5;
  v6 = malloc(*(_QWORD *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  sub_2142D5BF0((uint64_t)v6, (uint64_t)v6 + *(int *)(TupleTypeMetadata2 + 48), a2);
  return sub_2142D5F70;
}

void sub_2142D5F70(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_2142D5FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = sub_214425388();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_2142D6020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142D66A4(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_2142D6044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142D66A4(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_2142D6070(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v7 - v4;
  sub_2142D5CC8();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
}

uint64_t sub_2142D6124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v12 - v7;
  v9 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v2, a1);
  sub_2142D5BD8();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, a1);
  MEMORY[0x2199CD934](&unk_21442B200, a1);
  v10 = sub_214425604();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2 + *(int *)(v10 + 36), v8, AssociatedTypeWitness);
}

uint64_t sub_2142D6214(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_21442B200, a1);
  return sub_214425220();
}

uint64_t sub_2142D6248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x2199CD934](&unk_21442B200, a1);
  v4 = sub_2142D6850(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

uint64_t sub_2142D62AC()
{
  return sub_214424F74();
}

uint64_t sub_2142D62CC()
{
  return sub_214424E0C();
}

uint64_t sub_2142D62D4()
{
  return sub_2142D62CC();
}

uint64_t sub_2142D62DC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v7 - v4;
  sub_2142D62CC();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
}

uint64_t sub_2142D63A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x2199CD934](&unk_21442B12C, a1, &v4);
}

uint64_t sub_2142D63DC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_2142D6400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2142D644C(a1, a2, a3, (uint64_t)&unk_21442B0D0, MEMORY[0x24BEE4230]);
}

uint64_t sub_2142D6414()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_2142D6438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2142D644C(a1, a2, a3, (uint64_t)&unk_21442B12C, MEMORY[0x24BEE4218]);
}

uint64_t sub_2142D644C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x2199CD934](a4, a2, &v9);
  return MEMORY[0x2199CD934](a5, a1, &v8);
}

void sub_2142D649C()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2142D64AC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_2142D64C8()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_2142D64E4()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2142D64F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_2144252BC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_214424E84();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_214424E84();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_2142D667C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142D66A4(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_2142D6690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142D66A4(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_2142D66A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_214424E84();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_2142D6854(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142D6904 + 4 * byte_21442B030[(v7 - 1)]))();
}

void sub_2142D6954(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for IndexedCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexedCollection);
}

_QWORD *initializeBufferWithCopyOfBuffer for SgNode.ViewContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *_s6Charts25ChartGestureConfigurationV7ClosureVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ChartGestureConfiguration.Closure(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for _OnDemandAXChildren(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _OnDemandAXChildren);
}

uint64_t sub_2142D6BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_2142D6BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(void);
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (*)(void))MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v15 - v10;
  v9();
  v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12(v11, v8, a2);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  v12(a3, v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_2142D6C90@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_2142D6BC8(*v2, *(_QWORD *)(a1 + 16), a2);
}

void sub_2142D6CA0()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2142D6CB0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2142D6CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_21442B4D8, a3);
  return sub_2144245B4();
}

uint64_t sub_2142D6D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_21442B4D8, a3);
  return sub_2144245C0();
}

uint64_t sub_2142D6D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2142D6F24(a1, a2, a3, (uint64_t)&unk_21442B4D8, MEMORY[0x24BDF0C18]);
}

uint64_t sub_2142D6DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2142D6DC4(a1, a2);
}

uint64_t sub_2142D6DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(v4 + 16);
  v7(v6);
  ((void (*)(uint64_t, char *, uint64_t))v7)(a2, v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_2142D6E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_21442B3B0, a3);
  return sub_214424494();
}

uint64_t sub_2142D6EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_21442B3B0, a3);
  return sub_2144244A0();
}

uint64_t sub_2142D6F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2142D6F24(a1, a2, a3, (uint64_t)&unk_21442B3B0, MEMORY[0x24BDF0120]);
}

uint64_t sub_2142D6F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = MEMORY[0x2199CD934](a4);
  return a5(a1, a2, v8);
}

uint64_t sub_2142D6F6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for EmptyInWidgetArchive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyInWidgetArchive);
}

uint64_t sub_2142D6FBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142D706C + 4 * byte_21442B310[(v7 - 1)]))();
}

void sub_2142D70BC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for EmptyInImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyInImage);
}

uint64_t sub_2142D7278(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_2142D7280()
{
  return MEMORY[0x24BDF5138];
}

uint64_t sub_2142D728C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2142D72C0()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2142D72D0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_2142D7320@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  char v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  char v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  __int128 v58;
  float64x2_t v59;
  __int128 v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  char v73;
  double result;
  __int128 v75;
  uint64_t v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  __int128 v84;
  double v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  double v95;
  double v96;
  unsigned int v97;
  double v98;
  double v99;
  char *v100;
  uint64_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  __int128 v107;
  __int128 v108;
  char v109;
  _OWORD v110[2];
  char v111;
  uint64_t v112;
  _QWORD v113[3];
  uint64_t v114;
  _OWORD v115[2];
  char v116;
  _OWORD v117[2];
  char v118;
  _BYTE v119[40];
  _BYTE v120[40];
  _BYTE v121[48];

  v98 = a5;
  v9 = sub_214424308();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214424770();
  v13 = sub_21434CEF4(a2);
  v14 = *((_QWORD *)v13 + 2);
  if (v14)
  {
    v91 = v13;
    v76 = a4;
    if (qword_253F105A0 != -1)
LABEL_55:
      swift_once();
    v15 = 0;
    v16 = v91;
    v100 = v91 + 32;
    v101 = v14 - 1;
    v97 = *MEMORY[0x24BDEEB68];
    v93 = &v114;
    v94 = v113;
    v99 = 3.14159265;
    v96 = -1.57079633;
    v95 = 0.0174532925;
    v78 = 0.631494;
    v77 = 0.0749114;
    v92 = v14;
    do
    {
      v17 = v15 - 1;
      if (v15 <= 0)
        v17 = v101;
      if (v15 < v101)
        v18 = v15 + 1;
      else
        v18 = 0;
      v19 = *((_QWORD *)v16 + 2);
      if (v17 >= (uint64_t)v19)
        goto LABEL_53;
      if (v18 >= v19)
        goto LABEL_54;
      v20 = *(float64x2_t *)&v100[16 * v15];
      v21 = *(float64x2_t *)&v100[16 * v17];
      v22 = *(float64x2_t *)&v100[16 * v18];
      v23 = *(double *)&v100[16 * v17 + 8];
      v24 = *(double *)&v100[16 * v15 + 8];
      v25 = v23 - v24;
      v105 = vsubq_f64(v21, v20);
      v106 = v20;
      v26 = v24 - v22.f64[1];
      v27 = vmulq_f64(v105, v105).f64[0] + v25 * v25;
      v103 = vsubq_f64(v20, v22);
      v104 = v22;
      v28 = vmulq_f64(v103, v103).f64[0] + v26 * v26;
      v102 = v21;
      v29 = vsubq_f64(v21, v22);
      v30 = sqrt(v27 * v28);
      v31 = acos((v27 + v28 - (vmulq_f64(v29, v29).f64[0] + (v23 - v22.f64[1]) * (v23 - v22.f64[1]))) / (v30 + v30));
      if (v31 >= v99 - *(double *)&qword_253F1C8B8)
      {
        v117[0] = v107;
        v117[1] = v108;
        v118 = v109;
        sub_2141FE3B0((uint64_t)v117, (uint64_t)v119);
        sub_2141FE404((uint64_t)v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
        v46 = sub_214424728();
        sub_2141FE404((uint64_t)v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
        if ((v46 & 1) != 0)
          sub_2144246F8();
        else
          sub_21442471C();
      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, v97, v9);
        v32 = sub_2144242FC();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        if (v31 + v96 >= v95 || (v32 & 1) == 0)
          goto LABEL_22;
        if (qword_253F10590 != -1)
          swift_once();
        if (*(double *)&qword_253F1C8B0 < v27 && *(double *)&qword_253F1C8B0 < v28)
        {
          v110[0] = v107;
          v110[1] = v108;
          v111 = v109;
          sub_2141FE3B0((uint64_t)v110, (uint64_t)v121);
          sub_2141FE404((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
          v47 = sub_214424728();
          sub_2141FE404((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
          if ((v47 & 1) != 0)
            sub_2144246F8();
          else
            sub_21442471C();
          v51 = sqrt(v27);
          v52 = sqrt(v28);
          v53 = sub_2143B044C(a3, v106.f64[0], v24, v98);
          if (v51 * 0.5 < v53)
            v53 = v51 * 0.5;
          if (v52 * 0.5 >= v53)
            v54 = v53;
          else
            v54 = v52 * 0.5;
          v55.f64[0] = v105.f64[0] / v51;
          v55.f64[1] = v25 / v51;
          v105 = v55;
          v56.f64[0] = (0.0 - v103.f64[0]) / v52;
          v56.f64[1] = (0.0 - v26) / v52;
          v104 = v56;
          sub_21436ED14();
          v102 = v57;
          v87 = v58;
          sub_21436ED14();
          v103 = v59;
          v84 = v60;
          v61 = sub_21436EDEC(v102.f64[0], 0.0, v106, v54, v105, v104);
          v89 = v62;
          v90 = v61;
          v102.f64[0] = sub_21436EDEC(v102.f64[1], 0.0, v106, v54, v105, v104);
          v88 = v63;
          v64 = sub_21436EDEC(*(double *)&v87, 0.0, v106, v54, v105, v104);
          v86 = v65;
          *(double *)&v87 = v64;
          v67 = v77;
          v66 = v78;
          v85 = sub_21436EDEC(v78, v77, v106, v54, v105, v104);
          v83 = v68;
          v69 = sub_21436EDEC(0.372824, 0.16906, v106, v54, v105, v104);
          v81 = v70;
          v82 = v69;
          v71 = sub_21436EDEC(0.16906, 0.372824, v106, v54, v105, v104);
          v79 = v72;
          v80 = v71;
          sub_21436EDEC(v67, v66, v106, v54, v105, v104);
          sub_21436EDEC(0.0, *(double *)&v84, v106, v54, v105, v104);
          sub_21436EDEC(0.0, v103.f64[1], v106, v54, v105, v104);
          sub_21436EDEC(0.0, v103.f64[0], v106, v54, v105, v104);
          sub_21442471C();
          sub_214424734();
          sub_214424734();
          sub_214424734();
        }
        else
        {
LABEL_22:
          tan(v31 * 0.5);
          v34 = *a3;
          v14 = *(_QWORD *)(*a3 + 16);
          if (v14)
          {
            v35 = v12;
            v36 = v10;
            v37 = v9;
            v38 = a1;
            v39 = a3;
            v40 = qword_253F11F50;
            swift_bridgeObjectRetain();
            if (v40 != -1)
              swift_once();
            v41 = 0;
            v42 = v34 + 48;
            a3 = v39;
            a1 = v38;
            v9 = v37;
            v10 = v36;
            v12 = v35;
            v16 = v91;
            while (1)
            {
              v43 = v41 + 1;
              if (__OFADD__(v41, 1))
                break;
              v44 = vabdd_f64(v24, *(double *)(v42 - 8));
              if (vabdd_f64(v106.f64[0], *(double *)(v42 - 16)) >= *(double *)&qword_253F1C988
                || v44 >= *(double *)&qword_253F1C988)
              {
                v42 += 24;
                ++v41;
                if (v43 != v14)
                  continue;
              }
              swift_bridgeObjectRelease();
              goto LABEL_38;
            }
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
LABEL_38:
          v115[0] = v107;
          v115[1] = v108;
          v116 = v109;
          sub_2141FE3B0((uint64_t)v115, (uint64_t)v120);
          sub_2141FE404((uint64_t)v120, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
          v48 = sub_214424728();
          sub_2141FE404((uint64_t)v115, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
          if ((v48 & 1) != 0)
            sub_2144246F8();
          else
            sub_21442471C();
          v49 = v94;
          *v94 = 0;
          v49[1] = 0;
          v112 = 0x3FF0000000000000;
          v113[2] = 0x3FF0000000000000;
          v14 = v92;
          v50 = v93;
          *v93 = 0;
          v50[1] = 0;
          sub_214424704();
        }
      }
      ++v15;
    }
    while (v15 != v14);
    swift_bridgeObjectRelease();
    a4 = v76;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_2144246E0();
  v73 = v109;
  result = *(double *)&v107;
  v75 = v108;
  *(_OWORD *)a4 = v107;
  *(_OWORD *)(a4 + 16) = v75;
  *(_BYTE *)(a4 + 32) = v73;
  return result;
}

uint64_t sub_2142D7B24(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v26 = MEMORY[0x24BEE4AF8];
  v24 = *(_QWORD *)(a1 + 16);
  sub_2141D41AC(0, v1, 0);
  v2 = v26;
  v4 = sub_21432468C(a1);
  v6 = v24;
  v5 = a1;
  v7 = 0;
  v8 = a1 + 64;
  v9 = *(_BYTE *)(a1 + 32);
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << v9)
  {
    v11 = (unint64_t)v4 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3)
      goto LABEL_28;
    v12 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v4 + 8);
    if (v12)
    {
      v13 = v3;
      swift_retain();
      swift_retain();
      sub_2143F8874();
      swift_beginAccess();
      v14 = *(_QWORD *)(v12 + 40);
      if (v14 == 1)
        goto LABEL_32;
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v6 = v24;
      v5 = a1;
      v3 = v13;
      v8 = a1 + 64;
    }
    else
    {
      v14 = 1;
    }
    v27 = v2;
    v16 = *(_QWORD *)(v2 + 16);
    v15 = *(_QWORD *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      v22 = v3;
      sub_2141D41AC((_QWORD *)(v15 > 1), v16 + 1, 1);
      v8 = a1 + 64;
      v6 = v24;
      v3 = v22;
      v5 = a1;
      v2 = v27;
    }
    *(_QWORD *)(v2 + 16) = v16 + 1;
    *(_QWORD *)(v2 + 8 * v16 + 32) = v14;
    v9 = *(_BYTE *)(v5 + 32);
    v10 = 1 << v9;
    if (v4 >= 1 << v9)
      goto LABEL_29;
    v17 = *(_QWORD *)(v8 + 8 * v11);
    if ((v17 & (1 << v4)) == 0)
      goto LABEL_30;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3)
      goto LABEL_31;
    v18 = v17 & (-2 << (v4 & 0x3F));
    if (v18)
    {
      v10 = __clz(__rbit64(v18)) | v4 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (v10 + 63) >> 6;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v8 + 8 * v19);
        if (v21)
        {
LABEL_24:
          v10 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_24;
            }
          }
        }
      }
    }
    ++v7;
    v4 = v10;
    if (v7 == v6)
      return v2;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  result = sub_214425628();
  __break(1u);
  return result;
}

void sub_2142D7DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v2 = v1;
  v4 = sub_2144240D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8((uint64_t *)&unk_253F13210);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2141D8BF8(&qword_253F13490);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v23 = a1;
  v17((char *)&v23 - v15, a1, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  v18 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 248);
  swift_beginAccess();
  v19 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_2141E070C((uint64_t)v16, (uint64_t)v10, &qword_253F13490);
  sub_2141E070C(v18, v19, &qword_253F13490);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v10, 1, v4) == 1)
  {
    sub_2141E0750((uint64_t)v16, &qword_253F13490);
    if (v20(v19, 1, v4) == 1)
    {
      sub_2141E0750((uint64_t)v10, &qword_253F13490);
      return;
    }
  }
  else
  {
    sub_2141E070C((uint64_t)v10, (uint64_t)v14, &qword_253F13490);
    if (v20(v19, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v19, v4);
      sub_2141FED10(&qword_253F15B48, (uint64_t (*)(uint64_t))MEMORY[0x24BDED130], MEMORY[0x24BDED158]);
      v21 = sub_214424ED8();
      v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v7, v4);
      sub_2141E0750((uint64_t)v16, &qword_253F13490);
      v22(v14, v4);
      sub_2141E0750((uint64_t)v10, &qword_253F13490);
      if ((v21 & 1) != 0)
        return;
      goto LABEL_8;
    }
    sub_2141E0750((uint64_t)v16, &qword_253F13490);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  sub_2141E0750((uint64_t)v10, (uint64_t *)&unk_253F13210);
LABEL_8:
  sub_2142D8690(v23, &qword_253F13490, (uint64_t (*)(_QWORD))MEMORY[0x24BDED130]);
}

void sub_2142D80C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v2 = v1;
  v4 = sub_214423B94();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F12E70);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2141D8BF8(&qword_253F13348);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v23 = a1;
  v17((char *)&v23 - v15, a1, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  v18 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 248);
  swift_beginAccess();
  v19 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_2141E070C((uint64_t)v16, (uint64_t)v10, &qword_253F13348);
  sub_2141E070C(v18, v19, &qword_253F13348);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v10, 1, v4) == 1)
  {
    sub_2141E0750((uint64_t)v16, &qword_253F13348);
    if (v20(v19, 1, v4) == 1)
    {
      sub_2141E0750((uint64_t)v10, &qword_253F13348);
      return;
    }
  }
  else
  {
    sub_2141E070C((uint64_t)v10, (uint64_t)v14, &qword_253F13348);
    if (v20(v19, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v19, v4);
      sub_2141FED10(&qword_253F13D78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE0]);
      v21 = sub_214424ED8();
      v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v7, v4);
      sub_2141E0750((uint64_t)v16, &qword_253F13348);
      v22(v14, v4);
      sub_2141E0750((uint64_t)v10, &qword_253F13348);
      if ((v21 & 1) != 0)
        return;
      goto LABEL_8;
    }
    sub_2141E0750((uint64_t)v16, &qword_253F13348);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  sub_2141E0750((uint64_t)v10, &qword_253F12E70);
LABEL_8:
  sub_2142D8690(v23, &qword_253F13348, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8]);
}

void sub_2142D83A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v2 = v1;
  v4 = sub_214423C54();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F13D98);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2141D8BF8(&qword_253F13D88);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v23 = a1;
  v17((char *)&v23 - v15, a1, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  v18 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 248);
  swift_beginAccess();
  v19 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_2141E070C((uint64_t)v16, (uint64_t)v10, &qword_253F13D88);
  sub_2141E070C(v18, v19, &qword_253F13D88);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v10, 1, v4) == 1)
  {
    sub_2141E0750((uint64_t)v16, &qword_253F13D88);
    if (v20(v19, 1, v4) == 1)
    {
      sub_2141E0750((uint64_t)v10, &qword_253F13D88);
      return;
    }
  }
  else
  {
    sub_2141E070C((uint64_t)v10, (uint64_t)v14, &qword_253F13D88);
    if (v20(v19, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v19, v4);
      sub_2141FED10(&qword_253F13D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF308]);
      v21 = sub_214424ED8();
      v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v7, v4);
      sub_2141E0750((uint64_t)v16, &qword_253F13D88);
      v22(v14, v4);
      sub_2141E0750((uint64_t)v10, &qword_253F13D88);
      if ((v21 & 1) != 0)
        return;
      goto LABEL_8;
    }
    sub_2141E0750((uint64_t)v16, &qword_253F13D88);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  sub_2141E0750((uint64_t)v10, &qword_253F13D98);
LABEL_8:
  sub_2142D8690(v23, &qword_253F13D88, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8]);
}

void sub_2142D8690(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  _BYTE v21[24];

  v7 = sub_2141D8BF8(a2);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v21[-v11 - 8];
  v13 = a3(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  sub_2141E801C((uint64_t)v12, (uint64_t)v10, a2);
  v15 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 248);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v10, v15, a2);
  swift_endAccess();
  sub_2143F87CC();
  *(_BYTE *)(v3 + 16) = 1;
  v16 = *(_QWORD *)(v3 + 32);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = v16 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_2141E070C(v18, (uint64_t)v21, &qword_253F13188);
      Strong = swift_weakLoadStrong();
      sub_2141E0750((uint64_t)v21, &qword_253F13188);
      if (Strong)
      {
        *(_BYTE *)(Strong + 17) = 1;
        swift_release();
      }
      v18 += 8;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2142D8828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  _BYTE v19[8];

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_21434CD38();
  if (v0)
  {
    v2 = v0;
    v3 = v1;
    do
    {
      if (v3 == 1)
        goto LABEL_5;
      swift_beginAccess();
      v5 = *(_QWORD *)(v2 + 40);
      if (v5 == 1)
      {
        swift_bridgeObjectRetain();
      }
      else if (v3)
      {
        if (v5)
        {
          v6 = *(_QWORD *)(v3 + 16);
          if (v6 == *(_QWORD *)(v5 + 16))
          {
            if (!v6 || v3 == v5)
              goto LABEL_25;
            if (*(double *)(v3 + 32) == *(double *)(v5 + 32))
            {
              v7 = (double *)(v3 + 40);
              v8 = (double *)(v5 + 40);
              v9 = v6 - 1;
              while (v9)
              {
                v10 = *v7++;
                v11 = v10;
                v12 = *v8++;
                --v9;
                if (v11 != v12)
                  goto LABEL_18;
              }
LABEL_25:
              sub_2141F9A40(v3);
              sub_2141F9A40(v3);
              goto LABEL_3;
            }
          }
        }
LABEL_18:
        sub_2141F9A40(v3);
        sub_2141F9A40(v3);
        swift_bridgeObjectRelease();
      }
      else if (!v5)
      {
        goto LABEL_5;
      }
      v13 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = v3;
      swift_bridgeObjectRetain();
      sub_2141F9A30(v13);
      sub_2143F87CC();
      *(_BYTE *)(v2 + 16) = 1;
      v14 = *(_QWORD *)(v2 + 32);
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
        goto LABEL_4;
      v16 = v14 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_2141E070C(v16, (uint64_t)v19, &qword_253F13188);
        Strong = swift_weakLoadStrong();
        sub_2141E0750((uint64_t)v19, &qword_253F13188);
        if (Strong)
        {
          *(_BYTE *)(Strong + 17) = 1;
          swift_release();
        }
        v16 += 8;
        --v15;
      }
      while (v15);
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      sub_2141F9A30(v3);
LABEL_5:
      swift_release();
      swift_release();
      sub_2141F9A30(v3);
      v2 = sub_21434CD38();
      v3 = v4;
    }
    while (v2);
  }
  sub_2141E9120();
  return swift_bridgeObjectRelease();
}

double sub_2142D8A8C@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _BYTE v8[136];

  sub_2143836AC(9);
  if (qword_253F154C8 != -1)
    swift_once();
  sub_2141E5E34((uint64_t)&qword_253F1CA98, a1 + 32);
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_BYTE *)(a1 + 856) = -1;
  sub_21421C37C((uint64_t)v8);
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_BYTE *)(a1 + 504) = -1;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = -1;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_BYTE *)(a1 + 720) = -1;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_QWORD *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 968) = -1;
  sub_2141E801C((uint64_t)v8, a1 + 976, &qword_253F149E8);
  v2 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v3 = a1 + v2[14];
  v4 = *MEMORY[0x24BDED100];
  v5 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v3, v4, v5);
  v6 = a1 + v2[17];
  *(_QWORD *)(v6 + 32) = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_BYTE *)(v6 + 40) = -1;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = -1;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_QWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 136) = -1;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_QWORD *)(v6 + 176) = 0;
  *(_BYTE *)(v6 + 184) = -1;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_QWORD *)(v6 + 224) = 0;
  *(_BYTE *)(v6 + 232) = -1;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_QWORD *)(v6 + 272) = 0;
  *(_WORD *)(v6 + 280) = 255;
  *(_BYTE *)(v6 + 282) = 0;
  result = 0.0;
  *(_OWORD *)a1 = xmmword_21442B540;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0xE000000000000000);
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_BYTE *)(a1 + 1144) = 1;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + v2[15]) = 0;
  *(_QWORD *)(a1 + v2[16]) = 0;
  return result;
}

uint64_t sub_2142D8C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t);
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, uint64_t);
  unsigned int v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;

  v1 = v0;
  v2 = sub_214423C54();
  MEMORY[0x24BDAC7A8](v2);
  v47 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_214423B94();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2144240D4();
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(&qword_253F15C28);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SgMeasurements();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_WORD *)(v0 + 96) = 0;
  v13 = swift_allocObject();
  v14 = v13 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements;
  v15 = sub_2144247D0();
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v46 = v16;
  v16((char *)v14, 1, 1, v15);
  v16(v12, 1, 1, v15);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v12, v14, &qword_253F15C28);
  swift_endAccess();
  v17 = v13 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
  v45 = *MEMORY[0x24BDECF10];
  v18 = v45;
  v19 = sub_214423F24();
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104);
  v43 = v19;
  v44 = v20;
  v20(v17, v18, v19);
  v21 = MEMORY[0x24BEE4AF8];
  v22 = sub_21436D174(MEMORY[0x24BEE4AF8]);
  v23 = (_QWORD *)(v13 + OBJC_IVAR____TtC6Charts14SgMeasurements__cache);
  *v23 = 50;
  v23[1] = v21;
  v23[2] = -1;
  v23[3] = -1;
  v23[4] = v22;
  *(_QWORD *)(v1 + 104) = v13;
  *(_QWORD *)(v1 + 112) = -1;
  type metadata accessor for ChartContentIDContext();
  v24 = swift_allocObject();
  type metadata accessor for IDGenerator();
  v25 = (_QWORD *)swift_allocObject();
  v26 = sub_21436864C(v21);
  v27 = MEMORY[0x24BEE4B08];
  v25[2] = v26;
  v25[3] = v27;
  v25[4] = 0;
  *(_QWORD *)(v24 + 16) = v25;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v1 + 120) = v24;
  *(_QWORD *)(v1 + 128) = nullsub_1;
  *(_QWORD *)(v1 + 136) = 0;
  sub_2141D8BF8(&qword_253F12F48);
  swift_allocObject();
  *(_QWORD *)(v1 + 144) = sub_2141F68DC(0.0, 0.0);
  swift_allocObject();
  *(_QWORD *)(v1 + 152) = sub_2141F68DC(0.0, 0.0);
  *(_QWORD *)(v1 + 160) = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v9, *MEMORY[0x24BDED100], v42);
  sub_2141D8BF8(&qword_253F12F30);
  swift_allocObject();
  v28 = sub_2141F63D8(v9);
  sub_214423B7C();
  sub_2141D8BF8(&qword_253F12F18);
  swift_allocObject();
  v29 = sub_2141F60A8(v6);
  v30 = v47;
  sub_214423C00();
  sub_2141D8BF8(&qword_253F12F20);
  swift_allocObject();
  v31 = sub_2141F5D78(v30);
  sub_2141D8BF8(&qword_253F12F28);
  swift_allocObject();
  v32 = sub_2141F5B90(1.0);
  sub_2141D8BF8(&qword_253F12F40);
  swift_allocObject();
  v33 = sub_2141F59B0(1);
  *(_QWORD *)(v1 + 168) = v28;
  *(_QWORD *)(v1 + 176) = v29;
  *(_QWORD *)(v1 + 184) = v31;
  *(_QWORD *)(v1 + 192) = v32;
  *(_QWORD *)(v1 + 200) = v33;
  v34 = swift_allocObject();
  v35 = v34 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements;
  v36 = v46;
  v46((char *)(v34 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements), 1, 1, v15);
  v36(v12, 1, 1, v15);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v12, v35, &qword_253F15C28);
  swift_endAccess();
  v44(v34 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize, v45, v43);
  v37 = sub_21436D174(v21);
  v38 = (_QWORD *)(v34 + OBJC_IVAR____TtC6Charts14SgMeasurements__cache);
  *v38 = 50;
  v38[1] = v21;
  v38[2] = -1;
  v38[3] = -1;
  v38[4] = v37;
  sub_2141D8BF8(&qword_253F12F38);
  swift_allocObject();
  v39 = sub_2141F6708(v34);
  *(_OWORD *)(v1 + 216) = 0u;
  *(_QWORD *)(v1 + 208) = v39;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_QWORD *)(v1 + 280) = sub_21436D248(v21);
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_QWORD *)(v1 + 336) = 0;
  if (qword_253F154D0 != -1)
    swift_once();
  return v1;
}

uint64_t *sub_2142D91A0()
{
  uint64_t *v0;

  if (qword_253F154D0 != -1)
    swift_once();
  sub_2142DFFF8(v0[2], v0[3], v0[4], v0[5], v0[6]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_2142D9308()
{
  sub_2142D91A0();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChartModel()
{
  return objc_opt_self();
}

uint64_t sub_2142D9348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v26 = a2;
  v8 = sub_2141D8BF8(&qword_253F15C28);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v26 - v12;
  v14 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v14 + 24) = 0;
  type metadata accessor for IDGenerator();
  v15 = (_QWORD *)swift_allocObject();
  v16 = sub_21436864C(MEMORY[0x24BEE4AF8]);
  v17 = MEMORY[0x24BEE4B08];
  v15[2] = v16;
  v15[3] = v17;
  v15[4] = 0;
  *(_QWORD *)(v14 + 16) = v15;
  swift_release();
  v18 = *(_QWORD *)(v4 + 104);
  v19 = sub_2144247D0();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v13, a4, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v19);
  sub_2141E801C((uint64_t)v13, (uint64_t)v11, &qword_253F15C28);
  v21 = v18 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements;
  swift_beginAccess();
  sub_2141FA160((uint64_t)v11, v21, &qword_253F15C28);
  swift_endAccess();
  v22 = a3 + *(int *)(type metadata accessor for ChartEnvironmentValues(0) + 32);
  v23 = v18 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
  swift_beginAccess();
  v24 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v23, v22, v24);
  swift_endAccess();
  return sub_2142DAD48(a1, v26, a3);
}

uint64_t sub_2142D9528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  int64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void (*v71)(char *, uint64_t, int64_t);
  char *v72;
  int *v73;
  uint64_t v74;
  uint64_t result;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int64_t v131;
  _BYTE v132[736];
  _QWORD v133[55];
  _BYTE v134[136];
  _BYTE v135[136];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  unint64_t v142;
  char v143;
  _BYTE v144[144];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unsigned __int8 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  unsigned __int8 v167;
  uint64_t v168[13];
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  _QWORD v197[30];
  char v198;
  uint64_t v199;

  v122 = a1;
  v124 = a2;
  v11 = sub_2141D8BF8(&qword_253F13490);
  MEMORY[0x24BDAC7A8](v11);
  v126 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = 0;
  v13 = sub_2144240D4();
  v125 = *(uint64_t **)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v123 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253F154D0 != -1)
LABEL_97:
    swift_once();
  v15 = v6[18];
  swift_beginAccess();
  v16 = *(_BYTE *)(v15 + 56);
  v129 = v6;
  if ((v16 & 1) != 0 || *(double *)(v15 + 40) != a3 || *(double *)(v15 + 48) != a4)
  {
    *(double *)(v15 + 40) = a3;
    *(double *)(v15 + 48) = a4;
    *(_BYTE *)(v15 + 56) = 0;
    swift_retain();
    sub_2143F87CC();
    *(_BYTE *)(v15 + 16) = 1;
    v17 = *(_QWORD *)(v15 + 32);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = v17 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_2141E070C(v19, (uint64_t)v168, &qword_253F13188);
        Strong = swift_weakLoadStrong();
        sub_2141E0750((uint64_t)v168, &qword_253F13188);
        if (Strong)
        {
          *(_BYTE *)(Strong + 17) = 1;
          swift_release();
        }
        v19 += 8;
        --v18;
      }
      while (v18);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    v6 = v129;
  }
  v21 = v6[19];
  v22 = (uint64_t *)(v21 + 40);
  swift_beginAccess();
  if ((*(_BYTE *)(v21 + 56) & 1) != 0 || *(double *)v22 != a5 || *(double *)(v21 + 48) != a6)
  {
    *(double *)(v21 + 40) = a5;
    *(double *)(v21 + 48) = a6;
    *(_BYTE *)(v21 + 56) = 0;
    swift_retain();
    sub_2143F87CC();
    *(_BYTE *)(v21 + 16) = 1;
    v23 = *(_QWORD *)(v21 + 32);
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v25 = v23 + 32;
      swift_bridgeObjectRetain();
      v22 = &qword_253F13188;
      do
      {
        sub_2141E070C(v25, (uint64_t)v168, &qword_253F13188);
        v26 = swift_weakLoadStrong();
        sub_2141E0750((uint64_t)v168, &qword_253F13188);
        if (v26)
        {
          *(_BYTE *)(v26 + 17) = 1;
          swift_release();
        }
        v25 += 8;
        --v24;
      }
      while (v24);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    v6 = v129;
  }
  v127 = v13;
  swift_beginAccess();
  v27 = v6[35];
  v28 = *(_QWORD *)(v27 + 64);
  v130 = v27 + 64;
  v29 = 1;
  v30 = 1 << *(_BYTE *)(v27 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v13 = v31 & v28;
  v131 = (unint64_t)(v30 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v32 = 0;
  v33 = (unint64_t)&qword_253F13188;
  while (v13)
  {
    v34 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v35 = v34 | (v32 << 6);
LABEL_45:
    v6 = *(_QWORD **)(*(_QWORD *)(v27 + 56) + 16 * v35);
    v22 = v6 + 5;
    swift_beginAccess();
    v39 = *((double *)v6 + 5);
    if (v39 != 0.0)
    {
      if (*(_QWORD *)&v39 == 1)
      {
        swift_bridgeObjectRelease();
        v39 = *(double *)v22;
      }
      v6[5] = 0;
      sub_2141F9A30(*(uint64_t *)&v39);
      sub_2143F87CC();
      *((_BYTE *)v6 + 16) = 1;
      v6 = (_QWORD *)v6[4];
      v40 = v6[2];
      if (v40)
      {
        v22 = v6 + 4;
        swift_bridgeObjectRetain();
        do
        {
          sub_2141E070C((uint64_t)v22, (uint64_t)v168, &qword_253F13188);
          v41 = swift_weakLoadStrong();
          sub_2141E0750((uint64_t)v168, &qword_253F13188);
          if (v41)
          {
            *(_BYTE *)(v41 + 17) = 1;
            swift_release();
          }
          ++v22;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
      }
    }
  }
  if (__OFADD__(v32++, 1))
  {
    __break(1u);
    goto LABEL_97;
  }
  if (v32 >= v131)
  {
LABEL_57:
    swift_release();
    swift_bridgeObjectRelease();
    v42 = v129;
    v43 = swift_bridgeObjectRetain();
    sub_2142D7B24(v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2142D8828();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42[29])
    {
      swift_retain();
      sub_21423618C((uint64_t)&v160);
      v112 = v160;
      v130 = v161;
      v131 = *((_QWORD *)&v160 + 1);
      v128 = *((_QWORD *)&v161 + 1);
      v120 = *((_QWORD *)&v162 + 1);
      v121 = v162;
      v118 = *((_QWORD *)&v163 + 1);
      v119 = v163;
      v116 = *((_QWORD *)&v164 + 1);
      v117 = v164;
      v114 = *((_QWORD *)&v165 + 1);
      v115 = v165;
      v113 = v166;
      v98 = v167;
      if (v42[30])
        goto LABEL_59;
    }
    else
    {
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v128 = 0;
      v130 = 0;
      v131 = 0;
      v112 = 0;
      v166 = 0;
      v165 = 0u;
      v164 = 0u;
      v163 = 0u;
      v162 = 0u;
      v161 = 0u;
      v160 = 0u;
      v98 = 255;
      v167 = -1;
      if (v42[30])
      {
LABEL_59:
        swift_retain();
        sub_21423618C((uint64_t)&v152);
        v110 = *((_QWORD *)&v152 + 1);
        v111 = v152;
        v108 = *((_QWORD *)&v153 + 1);
        v109 = v153;
        v106 = *((_QWORD *)&v154 + 1);
        v107 = v154;
        v104 = *((_QWORD *)&v155 + 1);
        v105 = v155;
        v102 = *((_QWORD *)&v156 + 1);
        v103 = v156;
        v100 = *((_QWORD *)&v157 + 1);
        v101 = v157;
        v99 = v158;
        v44 = v159;
        if (v42[31])
          goto LABEL_60;
        goto LABEL_65;
      }
    }
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v158 = 0;
    v157 = 0u;
    v156 = 0u;
    v155 = 0u;
    v154 = 0u;
    v153 = 0u;
    v152 = 0u;
    v44 = -1;
    v159 = -1;
    if (v42[31])
    {
LABEL_60:
      swift_retain();
      sub_2142363C0((uint64_t)&v145);
      v96 = *((_QWORD *)&v145 + 1);
      v97 = v145;
      v94 = *((_QWORD *)&v146 + 1);
      v95 = v146;
      v92 = *((_QWORD *)&v147 + 1);
      v93 = v147;
      v90 = *((_QWORD *)&v148 + 1);
      v91 = v148;
      v88 = *((_QWORD *)&v149 + 1);
      v89 = v149;
      v86 = *((_QWORD *)&v150 + 1);
      v87 = v150;
      v85 = v151;
      if (v42[32])
        goto LABEL_61;
      goto LABEL_66;
    }
LABEL_65:
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v150 = 0u;
    v149 = 0u;
    v148 = 0u;
    v147 = 0u;
    v146 = 0u;
    v145 = 0u;
    v85 = 255;
    v151 = -1;
    if (v42[32])
    {
LABEL_61:
      swift_retain();
      sub_214236874((uint64_t)v144);
      if (v42[33])
      {
LABEL_62:
        swift_retain();
        sub_21423618C((uint64_t)&v136);
        v83 = *((_QWORD *)&v136 + 1);
        v84 = v136;
        v81 = *((_QWORD *)&v137 + 1);
        v82 = v137;
        v79 = *((_QWORD *)&v138 + 1);
        v80 = v138;
        v32 = *((_QWORD *)&v139 + 1);
        v78 = v139;
        v27 = *((_QWORD *)&v140 + 1);
        v33 = v140;
        v13 = *((_QWORD *)&v141 + 1);
        v45 = v141;
        v29 = v142;
        v46 = v143;
        goto LABEL_68;
      }
LABEL_67:
      v29 = 0;
      v13 = 0;
      v45 = 0;
      v27 = 0;
      v33 = 0;
      v32 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v142 = 0;
      v141 = 0u;
      v140 = 0u;
      v139 = 0u;
      v138 = 0u;
      v137 = 0u;
      v136 = 0u;
      v46 = -1;
      v143 = -1;
LABEL_68:
      if (v129[34])
      {
        swift_retain();
        sub_2142365E8((uint64_t)v135);
      }
      else
      {
        sub_21421C37C((uint64_t)v168);
        sub_2141E801C((uint64_t)v168, (uint64_t)v135, &qword_253F149E8);
      }
      sub_2141E801C((uint64_t)v135, (uint64_t)v134, &qword_253F149E8);
      v168[0] = v112;
      v168[1] = v131;
      v168[2] = v130;
      v168[3] = v128;
      v168[4] = v121;
      v168[5] = v120;
      v168[6] = v119;
      v168[7] = v118;
      v168[8] = v117;
      v168[9] = v116;
      v168[10] = v115;
      v168[11] = v114;
      v168[12] = v113;
      v169 = v98;
      v170 = v111;
      v171 = v110;
      v172 = v109;
      v173 = v108;
      v174 = v107;
      v175 = v106;
      v176 = v105;
      v177 = v104;
      v178 = v103;
      v179 = v102;
      v180 = v101;
      v181 = v100;
      v182 = v99;
      v183 = v44;
      v184 = v97;
      v185 = v96;
      v186 = v95;
      v187 = v94;
      v188 = v93;
      v189 = v92;
      v190 = v91;
      v191 = v90;
      v192 = v89;
      v193 = v88;
      v194 = v87;
      v195 = v86;
      v22 = v168;
      v196 = v85;
      sub_2141E801C((uint64_t)v144, (uint64_t)v197, &qword_253F149F0);
      v197[17] = v84;
      v197[18] = v83;
      v197[19] = v82;
      v197[20] = v81;
      v197[21] = v80;
      v197[22] = v79;
      v197[23] = v78;
      v197[24] = v32;
      v197[25] = v33;
      v197[26] = v27;
      v197[27] = v45;
      v197[28] = v13;
      v197[29] = v29;
      v198 = v46;
      sub_2141E801C((uint64_t)v134, (uint64_t)&v199, &qword_253F149E8);
      v47 = v129;
      v48 = v129[14];
      v49 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
        goto LABEL_99;
      }
      v129[14] = v49;
      v50 = v47[36];
      if (v50)
      {
        swift_retain();
        sub_2143F8874();
        swift_beginAccess();
        v29 = *(_QWORD *)(v50 + 40);
        v13 = (uint64_t)v126;
        v32 = v127;
        v22 = v125;
        if ((~v29 & 0xF000000000000007) == 0)
          goto LABEL_106;
        sub_2142E009C(*(_QWORD *)(v50 + 40));
        swift_release();
        v51 = v47[37];
        if (v51)
          goto LABEL_75;
      }
      else
      {
        v29 = 0xE000000000000000;
        v13 = (uint64_t)v126;
        v32 = v127;
        v22 = v125;
        v51 = v47[37];
        if (v51)
        {
LABEL_75:
          swift_retain();
          sub_2143F8874();
          swift_beginAccess();
          v27 = *(_QWORD *)(v51 + 40);
          if ((~v27 & 0xF000000000000007) == 0)
            goto LABEL_106;
          sub_2142E009C(*(_QWORD *)(v51 + 40));
          swift_release();
          goto LABEL_79;
        }
      }
      v27 = 0xE000000000000000;
LABEL_79:
      v131 = v49;
      v52 = v47[38];
      if (v52)
      {
        swift_retain();
        sub_2143F8874();
        swift_beginAccess();
        v33 = *(_QWORD *)(v52 + 40);
        if ((~v33 & 0xF000000000000007) == 0)
          goto LABEL_106;
        sub_2142E009C(*(_QWORD *)(v52 + 40));
        swift_release();
      }
      else
      {
        v33 = 0xE000000000000000;
      }
      v53 = v129[39];
      if (!v53)
      {
        if (qword_253F154C8 != -1)
          goto LABEL_100;
        goto LABEL_87;
      }
      swift_retain();
      sub_2143F8874();
      swift_beginAccess();
      sub_2141E070C(v53 + 40, (uint64_t)v133, &qword_253F130F0);
      if (v133[36] != 1)
      {
        memcpy(v132, v133, 0x170uLL);
        swift_release();
        memcpy(v133, v132, 0x170uLL);
        goto LABEL_88;
      }
      v76 = &qword_253F130F0;
      v77 = v133;
      goto LABEL_105;
    }
LABEL_66:
    memset(v144, 0, 128);
    v144[128] = -1;
    if (v42[33])
      goto LABEL_62;
    goto LABEL_67;
  }
  v37 = *(_QWORD *)(v130 + 8 * v32);
  if (v37)
  {
LABEL_44:
    v13 = (v37 - 1) & v37;
    v35 = __clz(__rbit64(v37)) + (v32 << 6);
    goto LABEL_45;
  }
  v38 = v32 + 1;
  if (v32 + 1 >= v131)
    goto LABEL_57;
  v37 = *(_QWORD *)(v130 + 8 * v38);
  if (v37)
    goto LABEL_43;
  v38 = v32 + 2;
  if (v32 + 2 >= v131)
    goto LABEL_57;
  v37 = *(_QWORD *)(v130 + 8 * v38);
  if (v37)
    goto LABEL_43;
  v38 = v32 + 3;
  if (v32 + 3 >= v131)
    goto LABEL_57;
  v37 = *(_QWORD *)(v130 + 8 * v38);
  if (v37)
    goto LABEL_43;
  v38 = v32 + 4;
  if (v32 + 4 >= v131)
    goto LABEL_57;
  v37 = *(_QWORD *)(v130 + 8 * v38);
  if (v37)
    goto LABEL_43;
  v38 = v32 + 5;
  if (v32 + 5 >= v131)
    goto LABEL_57;
  v37 = *(_QWORD *)(v130 + 8 * v38);
  if (v37)
  {
LABEL_43:
    v32 = v38;
    goto LABEL_44;
  }
  while (1)
  {
    v32 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v32 >= v131)
      goto LABEL_57;
    v37 = *(_QWORD *)(v130 + 8 * v32);
    ++v38;
    if (v37)
      goto LABEL_44;
  }
LABEL_99:
  __break(1u);
LABEL_100:
  swift_once();
LABEL_87:
  sub_2141E5E34((uint64_t)&qword_253F1CA98, (uint64_t)v133);
LABEL_88:
  sub_2141FCAC0(v168, (uint64_t)v132);
  v54 = v129;
  v55 = v129[18];
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(v55 + 56) & 1) == 0)
  {
    v57 = *(_QWORD *)(v55 + 40);
    v56 = *(_QWORD *)(v55 + 48);
    swift_release();
    v58 = v54[19];
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    if ((*(_BYTE *)(v58 + 56) & 1) == 0)
    {
      v60 = *(_QWORD *)(v58 + 40);
      v59 = *(_QWORD *)(v58 + 48);
      swift_release();
      v61 = v54[20];
      if (v61)
      {
        swift_retain();
        sub_2143F8874();
        swift_beginAccess();
        v62 = *(unsigned __int8 *)(v61 + 40);
        if (v62 == 2)
          goto LABEL_106;
        swift_release();
        v63 = v129[28];
        if (v63)
        {
          swift_retain();
          sub_2143F8874();
          swift_beginAccess();
          if ((*(_BYTE *)(v63 + 72) & 1) != 0)
            goto LABEL_106;
          v65 = *(_QWORD *)(v63 + 56);
          v64 = *(_QWORD *)(v63 + 64);
          v67 = *(_QWORD *)(v63 + 40);
          v66 = *(_QWORD *)(v63 + 48);
          swift_release();
          v68 = v129[21];
          swift_retain();
          sub_2143F8874();
          v69 = v68 + *(_QWORD *)(*(_QWORD *)v68 + 248);
          swift_beginAccess();
          sub_2141E070C(v69, v13, &qword_253F13490);
          if (((unsigned int (*)(uint64_t, uint64_t, int64_t))v22[6])(v13, 1, v32) != 1)
          {
            v70 = v62 & 1;
            v71 = (void (*)(char *, uint64_t, int64_t))v22[4];
            v72 = v123;
            v71(v123, v13, v32);
            swift_release();
            sub_2141FD584((uint64_t)v168);
            v73 = (int *)type metadata accessor for ChartModel.Scenegraph();
            v74 = v124;
            sub_2142E00B4(v122, v124 + v73[17]);
            *(_QWORD *)v74 = v131;
            *(_QWORD *)(v74 + 8) = v29;
            *(_QWORD *)(v74 + 16) = v27;
            *(_QWORD *)(v74 + 24) = v33;
            memcpy((void *)(v74 + 32), v133, 0x170uLL);
            memcpy((void *)(v74 + 400), v132, 0x2C1uLL);
            *(_QWORD *)(v74 + 1112) = v57;
            *(_QWORD *)(v74 + 1120) = v56;
            *(_QWORD *)(v74 + 1128) = v60;
            *(_QWORD *)(v74 + 1136) = v59;
            *(_BYTE *)(v74 + 1144) = v70;
            *(_QWORD *)(v74 + 1152) = v65;
            *(_QWORD *)(v74 + 1160) = v67;
            *(_QWORD *)(v74 + 1168) = v64;
            *(_QWORD *)(v74 + 1176) = v66;
            result = ((uint64_t (*)(uint64_t, char *, int64_t))v71)(v74 + v73[14], v72, v32);
            *(_QWORD *)(v74 + v73[15]) = 0;
            *(_QWORD *)(v74 + v73[16]) = 0;
            return result;
          }
LABEL_103:
          v76 = &qword_253F13490;
          v77 = (_QWORD *)v13;
LABEL_105:
          sub_2141E0750((uint64_t)v77, v76);
          goto LABEL_106;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        __break(1u);
      }
      swift_release();
      swift_release();
      swift_release();
      __break(1u);
      goto LABEL_103;
    }
  }
LABEL_106:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2142DA49C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;

  v5 = sub_214424674();
  v6 = sub_214424674();
  v7 = 30;
  if (v5 == v6)
    v7 = 29;
  v8 = v3[v7];
  swift_retain();
  v9 = sub_214424674();
  result = v9 != sub_214424674();
  v11 = v3[6];
  if (!v11)
  {
LABEL_10:
    v20 = 0;
    if (!v8)
      return result;
    goto LABEL_11;
  }
  v40 = v8;
  v12 = v3[2];
  v13 = v3[3];
  v14 = v3[4];
  v15 = v3[5];
  v16 = v3[11];
  if (!*(_QWORD *)(v16 + 16) || (v17 = sub_214336B74(result), (v18 & 1) == 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_2142DFFF8(v12, v13, v14, v15, v11);
    v8 = v40;
    goto LABEL_10;
  }
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v16 + 56) + 72 * v17 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_2142DFFF8(v12, v13, v14, v15, v11);
  v8 = v40;
  if (v19 != 1)
    goto LABEL_10;
  v20 = 1;
  if (!v40)
    return result;
LABEL_11:
  sub_2141D8BF8(&qword_253F15800);
  v21 = swift_dynamicCastClass();
  if (v21)
  {
    v22 = (_QWORD *)v21;
    if (v20)
    {
      swift_retain();
      sub_2143F8874();
      swift_beginAccess();
      if (v22[5])
      {
        sub_2143F8874();
        v23 = v22[5];
        if (v23)
        {
LABEL_20:
          v25 = v22[6];
          v26 = v22[7];
          v28 = v22[8];
          v27 = v22[9];
          v30 = v22[10];
          v29 = v22[11];
          v31 = v22[13];
          v32 = v22[14];
          v33 = v22[15];
          v34 = v22[16];
          v35 = v22[17];
          v36 = v22[12];
          v38 = v31;
          v39 = v32;
          v37 = v33;
          sub_21424D150(v23, v25, v26, v28, v27, v30, v29, v36, v31, v32, v33, v34, v35, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
          swift_release_n();
          return sub_21424D200(v23, v25, v26, v28, v27, v30, v29, v36, v38, v39, v37, v34, v35, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
        }
      }
LABEL_30:
      result = sub_214425628();
      __break(1u);
      return result;
    }
    if ((a3 & 1) == 0)
    {
      swift_retain();
      sub_2143F8874();
      swift_beginAccess();
      if (v22[5])
      {
        sub_214331EB0(v22[11]);
        return swift_release_n();
      }
      goto LABEL_30;
    }
  }
  else
  {
    sub_2141D8BF8(&qword_253F10570);
    v24 = swift_dynamicCastClass();
    if (!v24)
      return swift_release();
    v22 = (_QWORD *)v24;
    if (v20)
    {
      swift_retain();
      sub_2143F8874();
      swift_beginAccess();
      if (v22[5])
      {
        sub_2143F8874();
        v23 = v22[5];
        if (v23)
          goto LABEL_20;
      }
      goto LABEL_30;
    }
    if ((a3 & 1) == 0)
    {
      swift_retain();
      sub_2143F8874();
      swift_beginAccess();
      if (v22[5])
        return swift_release_n();
      goto LABEL_30;
    }
  }
  return swift_release();
}

uint64_t sub_2142DA9CC@<X0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  _QWORD *v4;
  uint64_t v6;
  double *v7;
  uint64_t v9;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[8];
  uint64_t v48;
  _OWORD v49[8];
  uint64_t v50;
  _BYTE v51[136];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v6 = v4[18];
  v7 = (double *)(v6 + 40);
  if ((a1 & 1) != 0)
  {
    v9 = v4[30];
    swift_retain();
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    if ((*(_BYTE *)(v6 + 56) & 1) != 0)
      goto LABEL_17;
    v7 = (double *)(v6 + 48);
    a3 = a4;
  }
  else
  {
    v9 = v4[29];
    swift_retain();
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    if (*(_BYTE *)(v6 + 56) == 1)
      goto LABEL_17;
  }
  v11 = *v7;
  swift_release();
  if (!v9)
  {
LABEL_15:
    sub_2142E0078((uint64_t)v49);
    sub_2141E801C((uint64_t)v49, (uint64_t)v51, qword_254D6A960);
    return sub_2141E801C((uint64_t)v51, a2, qword_254D6A960);
  }
  sub_2141D8BF8(&qword_253F15800);
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = (_QWORD *)v12;
    v46 = a2;
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    v14 = v13[5];
    if (v14)
    {
      v16 = v13[16];
      v15 = v13[17];
      v18 = v13[14];
      v17 = v13[15];
      v19 = v13[13];
      v42 = v13[11];
      v44 = v13[12];
      v40 = v13[10];
      v21 = v13[8];
      v20 = v13[9];
      v24 = v13 + 6;
      v22 = v13[6];
      v23 = v24[1];
      v52 = v14;
      v53 = v22;
      v54 = v23;
      v55 = v21 & 1;
      v56 = v20;
      v57 = v40;
      v58 = v42;
      v59 = v44;
      v60 = v19;
      v61 = v18;
      v62 = v17;
      v63 = v16;
      v64 = v15;
      v65 = 0;
      sub_2143BCF14((uint64_t)&v52, (uint64_t)v47, v11, a3);
      sub_21424D150(v14, v22, v23, v21, v20, v40, v42, v44, v19, v18, v17, v16, v15, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
LABEL_13:
      swift_release_n();
      v49[6] = v47[6];
      v49[7] = v47[7];
      v50 = v48;
      v49[2] = v47[2];
      v49[3] = v47[3];
      v49[4] = v47[4];
      v49[5] = v47[5];
      v49[0] = v47[0];
      v49[1] = v47[1];
      nullsub_1(v49, v38);
      sub_2141E801C((uint64_t)v49, (uint64_t)v51, qword_254D6A960);
      a2 = v46;
      return sub_2141E801C((uint64_t)v51, a2, qword_254D6A960);
    }
    goto LABEL_17;
  }
  sub_2141D8BF8(&qword_253F10570);
  v25 = swift_dynamicCastClass();
  if (!v25)
  {
    swift_release();
    goto LABEL_15;
  }
  v26 = (_QWORD *)v25;
  v46 = a2;
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  v27 = v26[5];
  if (v27)
  {
    v29 = v26[16];
    v28 = v26[17];
    v31 = v26[14];
    v30 = v26[15];
    v32 = v26[13];
    v43 = v26[11];
    v45 = v26[12];
    v41 = v26[10];
    v34 = v26[8];
    v33 = v26[9];
    v37 = v26 + 6;
    v35 = v26[6];
    v36 = v37[1];
    v52 = v27;
    v53 = v35;
    v54 = v36;
    v55 = v34 & 1;
    v56 = v33;
    v57 = v41;
    v58 = v43;
    v59 = v45;
    v60 = v32;
    v61 = v31;
    v62 = v30;
    v63 = v29;
    v64 = v28;
    v65 = 1;
    sub_2143BCF14((uint64_t)&v52, (uint64_t)v47, v11, a3);
    sub_21424D150(v27, v35, v36, v34, v33, v41, v43, v45, v32, v31, v30, v29, v28, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
    goto LABEL_13;
  }
LABEL_17:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2142DAD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Strong;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v102[8];
  _BYTE v103[24];
  _BYTE v104[24];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int16 v126;
  __int128 v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  char v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  char v139;
  char v140;
  __int128 v141;
  uint64_t v142;
  _OWORD v143[2];
  uint64_t v144;

  v4 = v3;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 49);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 80);
  v18 = *(_BYTE *)(a1 + 81);
  v19 = v12 & 1 | ((unint64_t)(v13 & 1) << 8);
  v21 = *(_QWORD *)(v4 + 16);
  v20 = *(_QWORD *)(v4 + 24);
  v22 = *(_QWORD *)(v4 + 32);
  v23 = *(_QWORD *)(v4 + 40);
  v24 = *(_QWORD *)(v4 + 48);
  v25 = *(_QWORD *)(v4 + 56);
  v27 = *(_QWORD *)(v4 + 64);
  v26 = *(_QWORD *)(v4 + 72);
  v28 = *(_QWORD *)(v4 + 80);
  v29 = *(_QWORD *)(v4 + 88);
  v30 = *(_WORD *)(v4 + 96);
  v97 = v7;
  v98 = v6;
  v95 = v10;
  v96 = v8;
  v93 = v14;
  v94 = v11;
  v91 = v16;
  v92 = v15;
  v90 = v17 & 1 | ((v18 & 1) << 8);
  v88 = v9 & 1;
  v89 = v19;
  if (v24)
  {
    v105 = *(_QWORD *)(v4 + 16);
    v106 = v20;
    v107 = v22;
    LOBYTE(v108) = v23 & 1;
    v109 = v24;
    v110 = v25;
    LOWORD(v111) = v27 & 0x101;
    v112 = v26;
    v113 = v28;
    v114 = v29;
    v115 = v30 & 0x101;
    v85 = v24;
    v31 = v22;
    sub_2142DFEF4(a1);
    sub_2142E003C(v21, v20, v31, v23, v85);
    v32 = sub_214354EB4(a1, (uint64_t)&v105);
    sub_2142DFFF8(v21, v20, v31, v23, v85);
    sub_21424C35C(a1);
    v33 = a2;
    if ((v32 & 1) != 0)
      goto LABEL_32;
  }
  else
  {
    v105 = v6;
    v106 = v7;
    v107 = v8;
    v108 = v9 & 1;
    v109 = v10;
    v110 = v11;
    v111 = v19;
    v112 = v14;
    v113 = v15;
    v114 = v16;
    v115 = v17 & 1 | ((v18 & 1) << 8);
    v116 = v21;
    v117 = v20;
    v118 = v22;
    v119 = v23;
    v120 = 0;
    v121 = v25;
    v122 = v27;
    v123 = v26;
    v124 = v28;
    v125 = v29;
    v126 = v30;
    sub_2142DFEF4(a1);
    sub_2142DFF3C(&v105);
  }
  if (qword_253F154D0 != -1)
    swift_once();
  sub_2142DFEF4(a1);
  swift_retain();
  sub_2143E4144(a1, (uint64_t)&v127);
  v99 = *(_QWORD *)(v4 + 16);
  v34 = *(_QWORD *)(v4 + 40);
  v86 = *(_QWORD *)(v4 + 32);
  v87 = *(_QWORD *)(v4 + 24);
  v35 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 16) = v98;
  *(_QWORD *)(v4 + 24) = v97;
  *(_QWORD *)(v4 + 32) = v96;
  *(_QWORD *)(v4 + 40) = v88;
  *(_QWORD *)(v4 + 48) = v95;
  *(_QWORD *)(v4 + 56) = v94;
  *(_QWORD *)(v4 + 64) = v89;
  *(_QWORD *)(v4 + 72) = v93;
  *(_QWORD *)(v4 + 80) = v92;
  *(_QWORD *)(v4 + 88) = v91;
  *(_WORD *)(v4 + 96) = v90;
  sub_2142DFEF4(a1);
  sub_2142DFFF8(v99, v87, v86, v34, v35);
  v135 = v127;
  v136 = v128;
  v137 = v129 & 1;
  v138 = v130;
  v139 = v131 & 1;
  v140 = v132 & 1;
  v141 = v133;
  v142 = v134;
  type metadata accessor for SignalParametersContext();
  v36 = swift_allocObject();
  v37 = sub_21436C580(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v36 + 16) = a2;
  *(_QWORD *)(v36 + 24) = v37;
  v38 = *(_QWORD *)(v4 + 120);
  v40 = *(_QWORD *)(v4 + 144);
  v39 = *(_QWORD *)(v4 + 152);
  v41 = *(_OWORD *)(v4 + 184);
  v143[0] = *(_OWORD *)(v4 + 168);
  v143[1] = v41;
  v42 = *(_QWORD *)(v4 + 208);
  v144 = *(_QWORD *)(v4 + 200);
  swift_beginAccess();
  type metadata accessor for DataflowGraphBuilder();
  swift_initStackObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v43 = sub_214239258((uint64_t)&v135, v36, v38, v40, v39, v42, (uint64_t *)v143, (uint64_t *)(v4 + 280));
  swift_endAccess();
  *(_QWORD *)(v4 + 128) = sub_2142E0034;
  *(_QWORD *)(v4 + 136) = v36;
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(v4 + 200);
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 288) = v43[3];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 296) = v43[4];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 304) = v43[5];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 312) = v43[6];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 320) = v43[8];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 328) = v43[9];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 336) = v43[7];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 216) = v43[10];
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 224) = v43[11];
  swift_retain();
  swift_release();
  if (*(_QWORD *)(v43[2] + 16) && (sub_214336B74(0), (v44 & 1) != 0))
    v45 = swift_retain();
  else
    v45 = 0;
  v33 = a2;
  *(_QWORD *)(v4 + 232) = v45;
  swift_release();
  if (*(_QWORD *)(v43[2] + 16) && (sub_214336B74(1u), (v46 & 1) != 0))
    v47 = swift_retain();
  else
    v47 = 0;
  *(_QWORD *)(v4 + 240) = v47;
  swift_release();
  if (*(_QWORD *)(v43[2] + 16) && (sub_214336B74(4u), (v48 & 1) != 0))
    v49 = swift_retain();
  else
    v49 = 0;
  *(_QWORD *)(v4 + 248) = v49;
  swift_release();
  if (*(_QWORD *)(v43[2] + 16) && (sub_214336B74(5u), (v50 & 1) != 0))
    v51 = swift_retain();
  else
    v51 = 0;
  *(_QWORD *)(v4 + 256) = v51;
  swift_release();
  if (*(_QWORD *)(v43[2] + 16) && (sub_214336B74(6u), (v52 & 1) != 0))
    v53 = swift_retain();
  else
    v53 = 0;
  *(_QWORD *)(v4 + 264) = v53;
  swift_release();
  v54 = v43[2];
  if (*(_QWORD *)(v54 + 16) && (v55 = sub_214336B74(7u), (v56 & 1) != 0))
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v55);
    swift_retain();
  }
  else
  {
    v57 = 0;
  }
  swift_release();
  swift_release();
  *(_QWORD *)(v4 + 272) = v57;
  swift_release();
LABEL_32:
  v58 = *(void (**)(uint64_t))(v4 + 128);
  swift_retain();
  v58(v33);
  swift_release();
  v59 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  v60 = a3;
  v61 = a3 + v59[6];
  swift_retain();
  sub_2142D7DD8(v61);
  swift_release();
  swift_retain();
  sub_2142D80C0(a3);
  swift_release();
  v62 = a3 + v59[5];
  swift_retain();
  sub_2142D83A8(v62);
  swift_release();
  v63 = *(_QWORD *)(v4 + 192);
  v64 = *(double *)(a3 + v59[7]);
  swift_beginAccess();
  if ((*(_BYTE *)(v63 + 48) & 1) != 0 || v64 != *(double *)(v63 + 40))
  {
    *(double *)(v63 + 40) = v64;
    *(_BYTE *)(v63 + 48) = 0;
    swift_retain();
    sub_2143F87CC();
    *(_BYTE *)(v63 + 16) = 1;
    v65 = *(_QWORD *)(v63 + 32);
    v66 = *(_QWORD *)(v65 + 16);
    if (v66)
    {
      v67 = v65 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_2141E070C(v67, (uint64_t)v104, &qword_253F13188);
        Strong = swift_weakLoadStrong();
        sub_2141E0750((uint64_t)v104, &qword_253F13188);
        if (Strong)
        {
          *(_BYTE *)(Strong + 17) = 1;
          swift_release();
        }
        v67 += 8;
        --v66;
      }
      while (v66);
      swift_release();
      swift_bridgeObjectRelease();
      v60 = a3;
    }
    else
    {
      swift_release();
    }
  }
  v69 = *(_QWORD *)(v4 + 200);
  v70 = *(unsigned __int8 *)(v60 + v59[9]);
  swift_beginAccess();
  v71 = *(unsigned __int8 *)(v69 + 40);
  if (v71 == 2 || ((v71 & 1) == 0) == v70)
  {
    *(_BYTE *)(v69 + 40) = v70;
    swift_retain();
    sub_2143F87CC();
    *(_BYTE *)(v69 + 16) = 1;
    v72 = *(_QWORD *)(v69 + 32);
    v73 = *(_QWORD *)(v72 + 16);
    if (v73)
    {
      v74 = v72 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_2141E070C(v74, (uint64_t)v103, &qword_253F13188);
        v75 = swift_weakLoadStrong();
        sub_2141E0750((uint64_t)v103, &qword_253F13188);
        if (v75)
        {
          *(_BYTE *)(v75 + 17) = 1;
          swift_release();
        }
        v74 += 8;
        --v73;
      }
      while (v73);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  v76 = *(_QWORD *)(v4 + 208);
  v77 = *(_QWORD *)(v4 + 104);
  result = swift_beginAccess();
  v79 = *(_QWORD *)(v76 + 40);
  if (v79)
    v80 = v77 == v79;
  else
    v80 = 0;
  if (!v80)
  {
    *(_QWORD *)(v76 + 40) = v77;
    swift_retain_n();
    swift_retain();
    swift_release();
    sub_2143F87CC();
    *(_BYTE *)(v76 + 16) = 1;
    v81 = *(_QWORD *)(v76 + 32);
    v82 = *(_QWORD *)(v81 + 16);
    if (v82)
    {
      v83 = v81 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_2141E070C(v83, (uint64_t)v102, &qword_253F13188);
        v84 = swift_weakLoadStrong();
        sub_2141E0750((uint64_t)v102, &qword_253F13188);
        if (v84)
        {
          *(_BYTE *)(v84 + 17) = 1;
          swift_release();
        }
        v83 += 8;
        --v82;
      }
      while (v82);
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t destroy for DomainOverrideFeedback()
{
  swift_release();
  return swift_release();
}

_QWORD *_s6Charts22DomainOverrideFeedbackVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DomainOverrideFeedback(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for DomainOverrideFeedback(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DomainOverrideFeedback()
{
  return &type metadata for DomainOverrideFeedback;
}

_QWORD *sub_2142DB944(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  BOOL *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  char v11;
  _OWORD *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  int v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t *v103;
  int v104;
  char v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t *v109;
  int v110;
  char v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  int v147;
  __int128 v148;
  __int128 v149;
  _OWORD *v150;
  _OWORD *v151;
  int v152;
  __int128 v153;
  __int128 v154;
  _OWORD *v155;
  _OWORD *v156;
  int v157;
  __int128 v158;
  __int128 v159;
  _OWORD *v160;
  _OWORD *v161;
  int v162;
  __int128 v163;
  __int128 v164;
  _OWORD *v165;
  _OWORD *v166;
  int v167;
  __int128 v168;
  __int128 v169;
  _OWORD *v170;
  _OWORD *v171;
  int v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  BOOL *v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  int *v210;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  v7 = (BOOL *)(a1 + 33);
  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  v10 = a2 + 4;
  v11 = *((_BYTE *)a2 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v11 & 1) != 0)
  {
    v12 = v4 + 4;
    v13 = *((unsigned __int8 *)a2 + 72);
    if (v13 == 255)
    {
      v14 = *((_OWORD *)a2 + 3);
      *v12 = *v10;
      *((_OWORD *)v4 + 3) = v14;
      *(_OWORD *)((char *)v4 + 57) = *(_OWORD *)((char *)a2 + 57);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 7) = v16;
      (**(void (***)(_OWORD *, uint64_t))(v16 - 8))(v12, (uint64_t)(a2 + 4));
      *((_BYTE *)v4 + 72) = (v13 & 1) != 0;
    }
    v17 = v4 + 10;
    v18 = a2 + 10;
    v19 = *((unsigned __int8 *)a2 + 120);
    if (v19 == 255)
    {
      v20 = *((_OWORD *)a2 + 6);
      *v17 = *v18;
      *((_OWORD *)v4 + 6) = v20;
      *(_OWORD *)((char *)v4 + 105) = *(_OWORD *)((char *)a2 + 105);
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 13) = v21;
      (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v17, v18);
      *((_BYTE *)v4 + 120) = (v19 & 1) != 0;
    }
    v22 = v4 + 16;
    v23 = a2 + 16;
    v24 = *((unsigned __int8 *)a2 + 168);
    if (v24 == 255)
    {
      v25 = *((_OWORD *)a2 + 9);
      *v22 = *v23;
      *((_OWORD *)v4 + 9) = v25;
      *(_OWORD *)((char *)v4 + 153) = *(_OWORD *)((char *)a2 + 153);
    }
    else
    {
      v26 = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(v4 + 19) = v26;
      (**(void (***)(_OWORD *, _OWORD *))(v26 - 8))(v22, v23);
      *((_BYTE *)v4 + 168) = (v24 & 1) != 0;
    }
    v27 = v4 + 22;
    v28 = a2 + 22;
    v29 = *((unsigned __int8 *)a2 + 216);
    if (v29 == 255)
    {
      v30 = *((_OWORD *)a2 + 12);
      *v27 = *v28;
      *((_OWORD *)v4 + 12) = v30;
      *(_OWORD *)((char *)v4 + 201) = *(_OWORD *)((char *)a2 + 201);
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 25);
      *(_OWORD *)(v4 + 25) = v31;
      (**(void (***)(_OWORD *, _OWORD *))(v31 - 8))(v27, v28);
      *((_BYTE *)v4 + 216) = (v29 & 1) != 0;
    }
    v32 = v4 + 28;
    v33 = a2 + 28;
    v34 = *((unsigned __int8 *)a2 + 264);
    if (v34 == 255)
    {
      v35 = *((_OWORD *)a2 + 15);
      *v32 = *v33;
      *((_OWORD *)v4 + 15) = v35;
      *(_OWORD *)((char *)v4 + 249) = *(_OWORD *)((char *)a2 + 249);
    }
    else
    {
      v36 = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(v4 + 31) = v36;
      (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v32, v33);
      *v7 = (v34 & 1) != 0;
    }
    v37 = v4 + 34;
    v38 = a2 + 34;
    v39 = *((unsigned __int8 *)a2 + 312);
    if (v39 == 255)
    {
      v40 = *((_OWORD *)a2 + 18);
      *v37 = *v38;
      *((_OWORD *)v4 + 18) = v40;
      *(_OWORD *)((char *)v4 + 297) = *(_OWORD *)((char *)a2 + 297);
    }
    else
    {
      v41 = a2[37];
      v42 = a2[38];
      v4[37] = v41;
      v4[38] = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v41 - 8))(v37, v38);
      *((_BYTE *)v4 + 312) = (v39 & 1) != 0;
    }
    *(_WORD *)((char *)v4 + 313) = *(_WORD *)((char *)a2 + 313);
    *((_BYTE *)v4 + 315) = 1;
  }
  else
  {
    v4[4] = *(_QWORD *)v10;
    *((_BYTE *)v4 + 315) = 0;
    swift_retain();
  }
  *((_BYTE *)v4 + 316) = *((_BYTE *)a2 + 316);
  v43 = a2[40];
  if (v43)
  {
    v44 = a2[41];
    v4[40] = v43;
    v4[41] = v44;
    swift_retain();
    v45 = a2[42];
    if (v45)
      goto LABEL_38;
  }
  else
  {
    *((_OWORD *)v4 + 20) = *((_OWORD *)a2 + 20);
    v45 = a2[42];
    if (v45)
    {
LABEL_38:
      v46 = a2[43];
      v4[42] = v45;
      v4[43] = v46;
      swift_retain();
      v47 = a2[44];
      if (v47)
        goto LABEL_39;
      goto LABEL_44;
    }
  }
  *((_OWORD *)v4 + 21) = *((_OWORD *)a2 + 21);
  v47 = a2[44];
  if (v47)
  {
LABEL_39:
    v48 = a2[45];
    v4[44] = v47;
    v4[45] = v48;
    swift_retain();
    v49 = a2[46];
    if (v49)
      goto LABEL_40;
LABEL_45:
    *((_OWORD *)v4 + 23) = *((_OWORD *)a2 + 23);
    v51 = a2[48];
    if (v51)
      goto LABEL_41;
    goto LABEL_46;
  }
LABEL_44:
  *((_OWORD *)v4 + 22) = *((_OWORD *)a2 + 22);
  v49 = a2[46];
  if (!v49)
    goto LABEL_45;
LABEL_40:
  v50 = a2[47];
  v4[46] = v49;
  v4[47] = v50;
  swift_retain();
  v51 = a2[48];
  if (v51)
  {
LABEL_41:
    v52 = a2[49];
    v4[48] = v51;
    v4[49] = v52;
    swift_retain();
    goto LABEL_47;
  }
LABEL_46:
  *((_OWORD *)v4 + 24) = *((_OWORD *)a2 + 24);
LABEL_47:
  v53 = *((unsigned __int8 *)a2 + 504);
  v210 = a3;
  if (v53 == 255)
  {
    v54 = *((_OWORD *)a2 + 30);
    *((_OWORD *)v4 + 29) = *((_OWORD *)a2 + 29);
    *((_OWORD *)v4 + 30) = v54;
    *(_OWORD *)((char *)v4 + 489) = *(_OWORD *)((char *)a2 + 489);
    v55 = *((_OWORD *)a2 + 26);
    *((_OWORD *)v4 + 25) = *((_OWORD *)a2 + 25);
    *((_OWORD *)v4 + 26) = v55;
    v56 = *((_OWORD *)a2 + 28);
    *((_OWORD *)v4 + 27) = *((_OWORD *)a2 + 27);
    *((_OWORD *)v4 + 28) = v56;
  }
  else
  {
    v205 = v53 & 1;
    v57 = a2[50];
    v58 = a2[51];
    v59 = a2[52];
    v60 = a2[53];
    v61 = a2[54];
    v62 = a2[55];
    v64 = a2[56];
    v63 = a2[57];
    v181 = a2[58];
    v185 = a2[59];
    v190 = a2[60];
    v195 = a2[61];
    v200 = a2[62];
    sub_21421BAE4(v57, v58, v59, v60, v61, v62, v64, v63, v181);
    v4[50] = v57;
    v4[51] = v58;
    v4[52] = v59;
    v4[53] = v60;
    v4[54] = v61;
    v4[55] = v62;
    v7 = (BOOL *)(v4 + 33);
    v4[56] = v64;
    v4[57] = v63;
    v4[58] = v181;
    v4[59] = v185;
    v4[60] = v190;
    v4[61] = v195;
    v4[62] = v200;
    *((_BYTE *)v4 + 504) = v205;
  }
  v65 = *((unsigned __int8 *)a2 + 616);
  if (v65 == 255)
  {
    v66 = *((_OWORD *)a2 + 37);
    *((_OWORD *)v4 + 36) = *((_OWORD *)a2 + 36);
    *((_OWORD *)v4 + 37) = v66;
    *(_OWORD *)((char *)v4 + 601) = *(_OWORD *)((char *)a2 + 601);
    v67 = *((_OWORD *)a2 + 33);
    *((_OWORD *)v4 + 32) = *((_OWORD *)a2 + 32);
    *((_OWORD *)v4 + 33) = v67;
    v68 = *((_OWORD *)a2 + 35);
    *((_OWORD *)v4 + 34) = *((_OWORD *)a2 + 34);
    *((_OWORD *)v4 + 35) = v68;
  }
  else
  {
    v206 = v65 & 1;
    v69 = a2[64];
    v70 = a2[65];
    v71 = a2[66];
    v72 = a2[67];
    v73 = a2[68];
    v74 = a2[69];
    v75 = a2[70];
    v76 = a2[71];
    v182 = a2[72];
    v186 = a2[73];
    v191 = a2[74];
    v196 = a2[75];
    v201 = a2[76];
    sub_21421BAE4(v69, v70, v71, v72, v73, v74, v75, v76, v182);
    v4[64] = v69;
    v4[65] = v70;
    v4[66] = v71;
    v4[67] = v72;
    v4[68] = v73;
    v4[69] = v74;
    v4[70] = v75;
    v7 = (BOOL *)(v4 + 33);
    v4[71] = v76;
    v4[72] = v182;
    v4[73] = v186;
    v4[74] = v191;
    v4[75] = v196;
    v4[76] = v201;
    *((_BYTE *)v4 + 616) = v206;
  }
  v77 = *((unsigned __int8 *)a2 + 720);
  if (v77 == 255)
  {
    v78 = *((_OWORD *)a2 + 44);
    *((_OWORD *)v4 + 43) = *((_OWORD *)a2 + 43);
    *((_OWORD *)v4 + 44) = v78;
    *((_BYTE *)v4 + 720) = *((_BYTE *)a2 + 720);
    v79 = *((_OWORD *)a2 + 40);
    *((_OWORD *)v4 + 39) = *((_OWORD *)a2 + 39);
    *((_OWORD *)v4 + 40) = v79;
    v80 = *((_OWORD *)a2 + 42);
    *((_OWORD *)v4 + 41) = *((_OWORD *)a2 + 41);
    *((_OWORD *)v4 + 42) = v80;
  }
  else
  {
    v207 = v77 & 1;
    v81 = a2[78];
    v82 = a2[79];
    v83 = a2[80];
    v84 = a2[81];
    v85 = a2[82];
    v86 = a2[83];
    v87 = a2[84];
    v88 = a2[85];
    v187 = a2[86];
    v192 = a2[87];
    v197 = a2[88];
    v202 = a2[89];
    sub_21421B808(v81, v82, v83, v84, v85, v86, v87, v88);
    v4[78] = v81;
    v4[79] = v82;
    v4[80] = v83;
    v4[81] = v84;
    v4[82] = v85;
    v4[83] = v86;
    v4[84] = v87;
    v7 = (BOOL *)(v4 + 33);
    v4[85] = v88;
    v4[86] = v187;
    v4[87] = v192;
    v4[88] = v197;
    v4[89] = v202;
    *((_BYTE *)v4 + 720) = v207;
  }
  v89 = *((unsigned __int8 *)a2 + 856);
  if (v89 != 255)
  {
    v94 = a2[92];
    v4[91] = a2[91];
    v4[92] = v94;
    v95 = v4 + 93;
    v96 = a2 + 93;
    v97 = a2[96];
    swift_retain();
    if ((v89 & 1) == 0)
    {
      if (v97)
      {
        v4[96] = v97;
        v4[97] = a2[97];
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v97 - 8))((uint64_t)(v4 + 93), (uint64_t)(a2 + 93), v97);
        v98 = a2[98];
        if (v98)
        {
LABEL_61:
          v99 = a2[99];
          v4[98] = v98;
          v4[99] = v99;
          swift_retain();
LABEL_67:
          v4[100] = a2[100];
          v103 = a2 + 101;
          v104 = *((unsigned __int8 *)a2 + 816);
          swift_bridgeObjectRetain();
          if (v104 == 255)
          {
            v4[101] = *v103;
            *((_BYTE *)v4 + 816) = *((_BYTE *)a2 + 816);
          }
          else
          {
            v105 = v104 & 1;
            v106 = *v103;
            sub_2141E83F4(v106, v105);
            v4[101] = v106;
            v7[552] = v105;
          }
          v107 = *(_OWORD *)(a2 + 105);
          *(_OWORD *)(v4 + 103) = *(_OWORD *)(a2 + 103);
          *(_OWORD *)(v4 + 105) = v107;
          v7[592] = 0;
          goto LABEL_77;
        }
      }
      else
      {
        v102 = *(_OWORD *)(a2 + 95);
        *v95 = *v96;
        *(_OWORD *)(v4 + 95) = v102;
        v4[97] = a2[97];
        v98 = a2[98];
        if (v98)
          goto LABEL_61;
      }
      *((_OWORD *)v4 + 49) = *((_OWORD *)a2 + 49);
      goto LABEL_67;
    }
    if (v97)
    {
      v4[96] = v97;
      v4[97] = a2[97];
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v97 - 8))((uint64_t)(v4 + 93), (uint64_t)(a2 + 93), v97);
      v100 = a2[98];
      if (v100)
      {
LABEL_64:
        v101 = a2[99];
        v4[98] = v100;
        v4[99] = v101;
        swift_retain();
LABEL_73:
        v4[100] = a2[100];
        v109 = a2 + 101;
        v110 = *((unsigned __int8 *)a2 + 816);
        swift_bridgeObjectRetain();
        if (v110 == 255)
        {
          v4[101] = *v109;
          *((_BYTE *)v4 + 816) = *((_BYTE *)a2 + 816);
        }
        else
        {
          v111 = v110 & 1;
          v112 = *v109;
          sub_2141E83F4(v112, v111);
          v4[101] = v112;
          v7[552] = v111;
        }
        v113 = *(_OWORD *)(a2 + 105);
        *(_OWORD *)(v4 + 103) = *(_OWORD *)(a2 + 103);
        *(_OWORD *)(v4 + 105) = v113;
        v7[592] = 1;
        goto LABEL_77;
      }
    }
    else
    {
      v108 = *(_OWORD *)(a2 + 95);
      *v95 = *v96;
      *(_OWORD *)(v4 + 95) = v108;
      v4[97] = a2[97];
      v100 = a2[98];
      if (v100)
        goto LABEL_64;
    }
    *((_OWORD *)v4 + 49) = *((_OWORD *)a2 + 49);
    goto LABEL_73;
  }
  v90 = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(v4 + 103) = *(_OWORD *)(a2 + 103);
  *(_OWORD *)(v4 + 105) = v90;
  *((_BYTE *)v4 + 856) = *((_BYTE *)a2 + 856);
  v91 = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(v4 + 95) = *(_OWORD *)(a2 + 95);
  *(_OWORD *)(v4 + 97) = v91;
  v92 = *(_OWORD *)(a2 + 101);
  *(_OWORD *)(v4 + 99) = *(_OWORD *)(a2 + 99);
  *(_OWORD *)(v4 + 101) = v92;
  v93 = *(_OWORD *)(a2 + 93);
  *(_OWORD *)(v4 + 91) = *(_OWORD *)(a2 + 91);
  *(_OWORD *)(v4 + 93) = v93;
LABEL_77:
  v114 = *((unsigned __int8 *)a2 + 968);
  if (v114 == 255)
  {
    v115 = *((_OWORD *)a2 + 59);
    *((_OWORD *)v4 + 58) = *((_OWORD *)a2 + 58);
    *((_OWORD *)v4 + 59) = v115;
    *(_OWORD *)((char *)v4 + 953) = *(_OWORD *)((char *)a2 + 953);
    v116 = *((_OWORD *)a2 + 55);
    *((_OWORD *)v4 + 54) = *((_OWORD *)a2 + 54);
    *((_OWORD *)v4 + 55) = v116;
    v117 = *((_OWORD *)a2 + 57);
    *((_OWORD *)v4 + 56) = *((_OWORD *)a2 + 56);
    *((_OWORD *)v4 + 57) = v117;
  }
  else
  {
    v208 = v114 & 1;
    v118 = a2[108];
    v119 = a2[109];
    v120 = a2[110];
    v121 = a2[111];
    v122 = a2[112];
    v123 = a2[113];
    v124 = a2[114];
    v125 = a2[115];
    v183 = a2[116];
    v188 = a2[117];
    v193 = a2[118];
    v198 = a2[119];
    v203 = a2[120];
    sub_21421BAE4(v118, v119, v120, v121, v122, v123, v124, v125, v183);
    v4[108] = v118;
    v4[109] = v119;
    v4[110] = v120;
    v4[111] = v121;
    v4[112] = v122;
    v4[113] = v123;
    v4[114] = v124;
    v4[115] = v125;
    v4[116] = v183;
    v4[117] = v188;
    v4[118] = v193;
    v4[119] = v198;
    v4[120] = v203;
    *((_BYTE *)v4 + 968) = v208;
  }
  v126 = *((unsigned __int8 *)a2 + 1104);
  if (v126 == 255)
  {
    v127 = *((_OWORD *)a2 + 68);
    *((_OWORD *)v4 + 67) = *((_OWORD *)a2 + 67);
    *((_OWORD *)v4 + 68) = v127;
    *((_BYTE *)v4 + 1104) = *((_BYTE *)a2 + 1104);
    v128 = *((_OWORD *)a2 + 64);
    *((_OWORD *)v4 + 63) = *((_OWORD *)a2 + 63);
    *((_OWORD *)v4 + 64) = v128;
    v129 = *((_OWORD *)a2 + 66);
    *((_OWORD *)v4 + 65) = *((_OWORD *)a2 + 65);
    *((_OWORD *)v4 + 66) = v129;
    v130 = *((_OWORD *)a2 + 62);
    *((_OWORD *)v4 + 61) = *((_OWORD *)a2 + 61);
    *((_OWORD *)v4 + 62) = v130;
  }
  else
  {
    v209 = v126 & 1;
    v131 = a2[122];
    v132 = a2[123];
    v133 = a2[124];
    v134 = a2[125];
    v135 = a2[126];
    v136 = a2[127];
    v137 = a2[128];
    v138 = a2[129];
    v178 = a2[130];
    v179 = a2[131];
    v180 = a2[132];
    v184 = a2[133];
    v189 = a2[134];
    v194 = a2[135];
    v199 = a2[136];
    v204 = a2[137];
    sub_21421B980(v131, v132, v133, v134, v135, v136, v137, v138, v178, v179, v180, v184);
    v4[122] = v131;
    v4[123] = v132;
    v4[124] = v133;
    v4[125] = v134;
    v4[126] = v135;
    v4[127] = v136;
    v4[128] = v137;
    v4[129] = v138;
    v4[130] = v178;
    v4[131] = v179;
    v4[132] = v180;
    v4[133] = v184;
    v4[134] = v189;
    v4[135] = v194;
    v4[136] = v199;
    v4[137] = v204;
    *((_BYTE *)v4 + 1104) = v209;
  }
  *(_OWORD *)(v4 + 139) = *(_OWORD *)(a2 + 139);
  *(_OWORD *)(v4 + 141) = *(_OWORD *)(a2 + 141);
  *((_BYTE *)v4 + 1144) = *((_BYTE *)a2 + 1144);
  *((_OWORD *)v4 + 72) = *((_OWORD *)a2 + 72);
  *((_OWORD *)v4 + 73) = *((_OWORD *)a2 + 73);
  v139 = v210[14];
  v140 = (char *)v4 + v139;
  v141 = (uint64_t)a2 + v139;
  v142 = sub_2144240D4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v140, v141, v142);
  v143 = v210[16];
  *(_QWORD *)((char *)v4 + v210[15]) = *(uint64_t *)((char *)a2 + v210[15]);
  *(_QWORD *)((char *)v4 + v143) = *(uint64_t *)((char *)a2 + v143);
  v144 = v210[17];
  v145 = (char *)v4 + v144;
  v146 = (uint64_t)a2 + v144;
  v147 = *(unsigned __int8 *)(v146 + 40);
  swift_retain();
  swift_retain();
  if (v147 == 255)
  {
    v148 = *(_OWORD *)(v146 + 16);
    *(_OWORD *)v145 = *(_OWORD *)v146;
    *((_OWORD *)v145 + 1) = v148;
    *(_OWORD *)(v145 + 25) = *(_OWORD *)(v146 + 25);
  }
  else
  {
    v149 = *(_OWORD *)(v146 + 24);
    *(_OWORD *)(v145 + 24) = v149;
    (**(void (***)(char *, uint64_t))(v149 - 8))(v145, v146);
    v145[40] = (v147 & 1) != 0;
  }
  v150 = v145 + 48;
  v151 = (_OWORD *)(v146 + 48);
  v152 = *(unsigned __int8 *)(v146 + 88);
  if (v152 == 255)
  {
    v153 = *(_OWORD *)(v146 + 64);
    *v150 = *v151;
    *((_OWORD *)v145 + 4) = v153;
    *(_OWORD *)(v145 + 73) = *(_OWORD *)(v146 + 73);
  }
  else
  {
    v154 = *(_OWORD *)(v146 + 72);
    *(_OWORD *)(v145 + 72) = v154;
    (**(void (***)(_OWORD *, _OWORD *))(v154 - 8))(v150, v151);
    v145[88] = (v152 & 1) != 0;
  }
  v155 = v145 + 96;
  v156 = (_OWORD *)(v146 + 96);
  v157 = *(unsigned __int8 *)(v146 + 136);
  if (v157 == 255)
  {
    v158 = *(_OWORD *)(v146 + 112);
    *v155 = *v156;
    *((_OWORD *)v145 + 7) = v158;
    *(_OWORD *)(v145 + 121) = *(_OWORD *)(v146 + 121);
  }
  else
  {
    v159 = *(_OWORD *)(v146 + 120);
    *(_OWORD *)(v145 + 120) = v159;
    (**(void (***)(_OWORD *, _OWORD *))(v159 - 8))(v155, v156);
    v145[136] = (v157 & 1) != 0;
  }
  v160 = v145 + 144;
  v161 = (_OWORD *)(v146 + 144);
  v162 = *(unsigned __int8 *)(v146 + 184);
  if (v162 == 255)
  {
    v163 = *(_OWORD *)(v146 + 160);
    *v160 = *v161;
    *((_OWORD *)v145 + 10) = v163;
    *(_OWORD *)(v145 + 169) = *(_OWORD *)(v146 + 169);
  }
  else
  {
    v164 = *(_OWORD *)(v146 + 168);
    *(_OWORD *)(v145 + 168) = v164;
    (**(void (***)(_OWORD *, _OWORD *))(v164 - 8))(v160, v161);
    v145[184] = (v162 & 1) != 0;
  }
  v165 = v145 + 192;
  v166 = (_OWORD *)(v146 + 192);
  v167 = *(unsigned __int8 *)(v146 + 232);
  if (v167 == 255)
  {
    v168 = *(_OWORD *)(v146 + 208);
    *v165 = *v166;
    *((_OWORD *)v145 + 13) = v168;
    *(_OWORD *)(v145 + 217) = *(_OWORD *)(v146 + 217);
  }
  else
  {
    v169 = *(_OWORD *)(v146 + 216);
    *(_OWORD *)(v145 + 216) = v169;
    (**(void (***)(_OWORD *, _OWORD *))(v169 - 8))(v165, v166);
    v145[232] = (v167 & 1) != 0;
  }
  v170 = v145 + 240;
  v171 = (_OWORD *)(v146 + 240);
  v172 = *(unsigned __int8 *)(v146 + 280);
  if (v172 == 255)
  {
    v173 = *(_OWORD *)(v146 + 256);
    *v170 = *v171;
    *((_OWORD *)v145 + 16) = v173;
    *(_OWORD *)(v145 + 265) = *(_OWORD *)(v146 + 265);
  }
  else
  {
    v174 = *(_QWORD *)(v146 + 264);
    v175 = *(_QWORD *)(v146 + 272);
    *((_QWORD *)v145 + 33) = v174;
    *((_QWORD *)v145 + 34) = v175;
    (**(void (***)(_OWORD *, _OWORD *))(v174 - 8))(v170, v171);
    v176 = (BOOL *)(v145 + 280);
    *v176 = (v172 & 1) != 0;
  }
  *(_WORD *)(v145 + 281) = *(_WORD *)(v146 + 281);
  return v4;
}

uint64_t sub_2142DC6E8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned __int8 *v8;

  swift_release();
  swift_release();
  swift_release();
  if ((*(_BYTE *)(a1 + 315) & 1) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 72) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 32);
    if (*(unsigned __int8 *)(a1 + 120) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 80);
    if (*(unsigned __int8 *)(a1 + 168) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 128);
    if (*(unsigned __int8 *)(a1 + 216) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 176);
    if (*(unsigned __int8 *)(a1 + 264) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 224);
    if (*(unsigned __int8 *)(a1 + 312) != 255)
      _s6Charts15AnyChartContentVwxx_0(a1 + 272);
  }
  else
  {
    swift_release();
  }
  if (*(_QWORD *)(a1 + 320))
    swift_release();
  if (*(_QWORD *)(a1 + 336))
    swift_release();
  if (*(_QWORD *)(a1 + 352))
    swift_release();
  if (*(_QWORD *)(a1 + 368))
    swift_release();
  if (*(_QWORD *)(a1 + 384))
    swift_release();
  if (*(unsigned __int8 *)(a1 + 504) != 255)
    sub_21421BB6C(*(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), *(_QWORD *)(a1 + 416), *(_QWORD *)(a1 + 424), *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), *(_OWORD *)(a1 + 464));
  if (*(unsigned __int8 *)(a1 + 616) != 255)
    sub_21421BB6C(*(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520), *(_QWORD *)(a1 + 528), *(_QWORD *)(a1 + 536), *(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), *(_OWORD *)(a1 + 576));
  if (*(unsigned __int8 *)(a1 + 720) != 255)
    sub_21421B8A0(*(_QWORD *)(a1 + 624), *(_QWORD *)(a1 + 632), *(_QWORD *)(a1 + 640), *(_QWORD *)(a1 + 648), *(_QWORD *)(a1 + 656), *(_QWORD *)(a1 + 664), *(_QWORD *)(a1 + 672), *(_QWORD *)(a1 + 680));
  if (*(unsigned __int8 *)(a1 + 856) != 255)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 768))
      _s6Charts15AnyChartContentVwxx_0(a1 + 744);
    if (*(_QWORD *)(a1 + 784))
      swift_release();
    swift_bridgeObjectRelease();
    v4 = *(unsigned __int8 *)(a1 + 816);
    if (v4 != 255)
      sub_2141E833C(*(_QWORD *)(a1 + 808), v4 & 1);
  }
  if (*(unsigned __int8 *)(a1 + 968) != 255)
    sub_21421BB6C(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), *(_OWORD *)(a1 + 928));
  if (*(unsigned __int8 *)(a1 + 1104) != 255)
    sub_21421BA80(*(_QWORD *)(a1 + 976), *(_QWORD *)(a1 + 984), *(_QWORD *)(a1 + 992), *(_QWORD *)(a1 + 1000), *(_QWORD *)(a1 + 1008), *(_QWORD *)(a1 + 1016), *(_QWORD *)(a1 + 1024), *(_QWORD *)(a1 + 1032), *(_QWORD *)(a1 + 1040), *(_QWORD *)(a1 + 1048), *(_QWORD *)(a1 + 1056), *(_QWORD *)(a1 + 1064));
  v5 = a1 + *(int *)(a2 + 56);
  v6 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  result = swift_release();
  v8 = (unsigned __int8 *)(a1 + *(int *)(a2 + 68));
  if (v8[40] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)v8);
  if (v8[88] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v8 + 48));
  if (v8[136] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v8 + 96));
  if (v8[184] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v8 + 144));
  if (v8[232] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v8 + 192));
  if (v8[280] != 255)
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v8 + 240));
  return result;
}

uint64_t sub_2142DCAA4(uint64_t a1, uint64_t a2, int *a3)
{
  BOOL *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  char v11;
  _OWORD *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  _OWORD *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  _OWORD *v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t *v102;
  int v103;
  char v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t *v108;
  int v109;
  char v110;
  uint64_t v111;
  __int128 v112;
  int v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  _OWORD *v149;
  _OWORD *v150;
  int v151;
  __int128 v152;
  __int128 v153;
  _OWORD *v154;
  _OWORD *v155;
  int v156;
  __int128 v157;
  __int128 v158;
  _OWORD *v159;
  _OWORD *v160;
  int v161;
  __int128 v162;
  __int128 v163;
  _OWORD *v164;
  _OWORD *v165;
  int v166;
  __int128 v167;
  __int128 v168;
  _OWORD *v169;
  _OWORD *v170;
  int v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  BOOL *v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  int *v209;
  BOOL *v210;

  v6 = (BOOL *)(a1 + 264);
  v7 = (_WORD *)(a2 + 313);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  v10 = (_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v11 & 1) != 0)
  {
    v12 = (_OWORD *)(a1 + 32);
    v13 = *(unsigned __int8 *)(a2 + 72);
    if (v13 == 255)
    {
      v14 = v10[1];
      *v12 = *v10;
      *(_OWORD *)(a1 + 48) = v14;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)v10 + 25);
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 56) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v12, v10);
      *(_BYTE *)(a1 + 72) = (v13 & 1) != 0;
    }
    v16 = (_OWORD *)(a1 + 80);
    v17 = (_OWORD *)(a2 + 80);
    v18 = *(unsigned __int8 *)(a2 + 120);
    if (v18 == 255)
    {
      v19 = *(_OWORD *)(a2 + 96);
      *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v19;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
    }
    else
    {
      v20 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 104) = v20;
      (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v16, v17);
      *(_BYTE *)(a1 + 120) = (v18 & 1) != 0;
    }
    v21 = (_OWORD *)(a1 + 128);
    v22 = (_OWORD *)(a2 + 128);
    v23 = *(unsigned __int8 *)(a2 + 168);
    if (v23 == 255)
    {
      v24 = *(_OWORD *)(a2 + 144);
      *v21 = *v22;
      *(_OWORD *)(a1 + 144) = v24;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    }
    else
    {
      v25 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 152) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v21, v22);
      *(_BYTE *)(a1 + 168) = (v23 & 1) != 0;
    }
    v26 = (_OWORD *)(a1 + 176);
    v27 = (_OWORD *)(a2 + 176);
    v28 = *(unsigned __int8 *)(a2 + 216);
    if (v28 == 255)
    {
      v29 = *(_OWORD *)(a2 + 192);
      *v26 = *v27;
      *(_OWORD *)(a1 + 192) = v29;
      *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
    }
    else
    {
      v30 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 200) = v30;
      (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v26, v27);
      *(_BYTE *)(a1 + 216) = (v28 & 1) != 0;
    }
    v31 = (_OWORD *)(a1 + 224);
    v32 = (_OWORD *)(a2 + 224);
    v33 = *(unsigned __int8 *)(a2 + 264);
    if (v33 == 255)
    {
      v34 = *(_OWORD *)(a2 + 240);
      *v31 = *v32;
      *(_OWORD *)(a1 + 240) = v34;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
    }
    else
    {
      v35 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 248) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v35 - 8))(v31, v32);
      *v6 = (v33 & 1) != 0;
    }
    v36 = (_OWORD *)(a1 + 272);
    v37 = (_OWORD *)(a2 + 272);
    v38 = *(unsigned __int8 *)(a2 + 312);
    if (v38 == 255)
    {
      v39 = *(_OWORD *)(a2 + 288);
      *v36 = *v37;
      *(_OWORD *)(a1 + 288) = v39;
      *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
    }
    else
    {
      v40 = *(_QWORD *)(a2 + 296);
      v41 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v40;
      *(_QWORD *)(a1 + 304) = v41;
      (**(void (***)(_OWORD *, _OWORD *))(v40 - 8))(v36, v37);
      v6[48] = (v38 & 1) != 0;
    }
    *(_WORD *)(v6 + 49) = *v7;
    v6[51] = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v10;
    v6[51] = 0;
    swift_retain();
  }
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  v42 = *(_QWORD *)(a2 + 320);
  if (v42)
  {
    v43 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v42;
    *(_QWORD *)(a1 + 328) = v43;
    swift_retain();
    v44 = *(_QWORD *)(a2 + 336);
    if (v44)
      goto LABEL_36;
  }
  else
  {
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    v44 = *(_QWORD *)(a2 + 336);
    if (v44)
    {
LABEL_36:
      v45 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 336) = v44;
      *(_QWORD *)(a1 + 344) = v45;
      swift_retain();
      v46 = *(_QWORD *)(a2 + 352);
      if (v46)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  v46 = *(_QWORD *)(a2 + 352);
  if (v46)
  {
LABEL_37:
    v47 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = v46;
    *(_QWORD *)(a1 + 360) = v47;
    swift_retain();
    v48 = *(_QWORD *)(a2 + 368);
    if (v48)
      goto LABEL_38;
LABEL_43:
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    v50 = *(_QWORD *)(a2 + 384);
    if (v50)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_42:
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  v48 = *(_QWORD *)(a2 + 368);
  if (!v48)
    goto LABEL_43;
LABEL_38:
  v49 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v48;
  *(_QWORD *)(a1 + 376) = v49;
  swift_retain();
  v50 = *(_QWORD *)(a2 + 384);
  if (v50)
  {
LABEL_39:
    v51 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = v50;
    *(_QWORD *)(a1 + 392) = v51;
    swift_retain();
    goto LABEL_45;
  }
LABEL_44:
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_45:
  v52 = *(unsigned __int8 *)(a2 + 504);
  v209 = a3;
  v210 = v6;
  if (v52 == 255)
  {
    v53 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v53;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    v54 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v54;
    v55 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v55;
  }
  else
  {
    v204 = v52 & 1;
    v56 = *(_QWORD *)(a2 + 400);
    v57 = *(_QWORD *)(a2 + 408);
    v58 = *(_QWORD *)(a2 + 416);
    v59 = *(_QWORD *)(a2 + 424);
    v60 = *(_QWORD *)(a2 + 432);
    v61 = *(_QWORD *)(a2 + 440);
    v63 = *(_QWORD *)(a2 + 448);
    v62 = *(_QWORD *)(a2 + 456);
    v180 = *(_QWORD *)(a2 + 464);
    v184 = *(_QWORD *)(a2 + 472);
    v189 = *(_QWORD *)(a2 + 480);
    v194 = *(_QWORD *)(a2 + 488);
    v199 = *(_QWORD *)(a2 + 496);
    sub_21421BAE4(v56, v57, v58, v59, v60, v61, v63, v62, v180);
    *(_QWORD *)(a1 + 400) = v56;
    *(_QWORD *)(a1 + 408) = v57;
    *(_QWORD *)(a1 + 416) = v58;
    *(_QWORD *)(a1 + 424) = v59;
    *(_QWORD *)(a1 + 432) = v60;
    *(_QWORD *)(a1 + 440) = v61;
    v6 = v210;
    *(_QWORD *)(a1 + 448) = v63;
    *(_QWORD *)(a1 + 456) = v62;
    *(_QWORD *)(a1 + 464) = v180;
    *(_QWORD *)(a1 + 472) = v184;
    *(_QWORD *)(a1 + 480) = v189;
    *(_QWORD *)(a1 + 488) = v194;
    *(_QWORD *)(a1 + 496) = v199;
    v210[240] = v204;
  }
  v64 = *(unsigned __int8 *)(a2 + 616);
  if (v64 == 255)
  {
    v65 = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 592) = v65;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    v66 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v66;
    v67 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v67;
  }
  else
  {
    v205 = v64 & 1;
    v68 = *(_QWORD *)(a2 + 512);
    v69 = *(_QWORD *)(a2 + 520);
    v70 = *(_QWORD *)(a2 + 528);
    v71 = *(_QWORD *)(a2 + 536);
    v72 = *(_QWORD *)(a2 + 544);
    v73 = *(_QWORD *)(a2 + 552);
    v74 = *(_QWORD *)(a2 + 560);
    v75 = *(_QWORD *)(a2 + 568);
    v181 = *(_QWORD *)(a2 + 576);
    v185 = *(_QWORD *)(a2 + 584);
    v190 = *(_QWORD *)(a2 + 592);
    v195 = *(_QWORD *)(a2 + 600);
    v200 = *(_QWORD *)(a2 + 608);
    sub_21421BAE4(v68, v69, v70, v71, v72, v73, v74, v75, v181);
    *(_QWORD *)(a1 + 512) = v68;
    *(_QWORD *)(a1 + 520) = v69;
    *(_QWORD *)(a1 + 528) = v70;
    *(_QWORD *)(a1 + 536) = v71;
    *(_QWORD *)(a1 + 544) = v72;
    *(_QWORD *)(a1 + 552) = v73;
    *(_QWORD *)(a1 + 560) = v74;
    v6 = v210;
    *(_QWORD *)(a1 + 568) = v75;
    *(_QWORD *)(a1 + 576) = v181;
    *(_QWORD *)(a1 + 584) = v185;
    *(_QWORD *)(a1 + 592) = v190;
    *(_QWORD *)(a1 + 600) = v195;
    *(_QWORD *)(a1 + 608) = v200;
    v210[352] = v205;
  }
  v76 = *(unsigned __int8 *)(a2 + 720);
  if (v76 == 255)
  {
    v77 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v77;
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    v78 = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 640) = v78;
    v79 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v79;
  }
  else
  {
    v206 = v76 & 1;
    v80 = *(_QWORD *)(a2 + 624);
    v81 = *(_QWORD *)(a2 + 632);
    v82 = *(_QWORD *)(a2 + 640);
    v83 = *(_QWORD *)(a2 + 648);
    v84 = *(_QWORD *)(a2 + 656);
    v85 = *(_QWORD *)(a2 + 664);
    v86 = *(_QWORD *)(a2 + 672);
    v87 = *(_QWORD *)(a2 + 680);
    v186 = *(_QWORD *)(a2 + 688);
    v191 = *(_QWORD *)(a2 + 696);
    v196 = *(_QWORD *)(a2 + 704);
    v201 = *(_QWORD *)(a2 + 712);
    sub_21421B808(v80, v81, v82, v83, v84, v85, v86, v87);
    *(_QWORD *)(a1 + 624) = v80;
    *(_QWORD *)(a1 + 632) = v81;
    *(_QWORD *)(a1 + 640) = v82;
    *(_QWORD *)(a1 + 648) = v83;
    *(_QWORD *)(a1 + 656) = v84;
    *(_QWORD *)(a1 + 664) = v85;
    *(_QWORD *)(a1 + 672) = v86;
    v6 = v210;
    *(_QWORD *)(a1 + 680) = v87;
    *(_QWORD *)(a1 + 688) = v186;
    *(_QWORD *)(a1 + 696) = v191;
    *(_QWORD *)(a1 + 704) = v196;
    *(_QWORD *)(a1 + 712) = v201;
    v210[456] = v206;
  }
  v88 = *(unsigned __int8 *)(a2 + 856);
  if (v88 == 255)
  {
    v89 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v89;
    *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
    v90 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = v90;
    v91 = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 808) = v91;
    v92 = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 744) = v92;
    goto LABEL_75;
  }
  v93 = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = v93;
  v94 = (_OWORD *)(a1 + 744);
  v95 = (_OWORD *)(a2 + 744);
  v96 = *(_QWORD *)(a2 + 768);
  swift_retain();
  if ((v88 & 1) == 0)
  {
    if (v96)
    {
      *(_QWORD *)(a1 + 768) = v96;
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v96 - 8))(a1 + 744, a2 + 744, v96);
      v97 = *(_QWORD *)(a2 + 784);
      if (v97)
      {
LABEL_59:
        v98 = *(_QWORD *)(a2 + 792);
        *(_QWORD *)(a1 + 784) = v97;
        *(_QWORD *)(a1 + 792) = v98;
        swift_retain();
LABEL_65:
        *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
        v102 = (uint64_t *)(a2 + 808);
        v103 = *(unsigned __int8 *)(a2 + 816);
        swift_bridgeObjectRetain();
        if (v103 == 255)
        {
          *(_QWORD *)(a1 + 808) = *v102;
          *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
        }
        else
        {
          v104 = v103 & 1;
          v105 = *v102;
          sub_2141E83F4(v105, v104);
          *(_QWORD *)(a1 + 808) = v105;
          v6[552] = v104;
        }
        v106 = *(_OWORD *)(a2 + 840);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
        *(_OWORD *)(a1 + 840) = v106;
        v6[592] = 0;
        goto LABEL_75;
      }
    }
    else
    {
      v101 = *(_OWORD *)(a2 + 760);
      *v94 = *v95;
      *(_OWORD *)(a1 + 760) = v101;
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      v97 = *(_QWORD *)(a2 + 784);
      if (v97)
        goto LABEL_59;
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_65;
  }
  if (!v96)
  {
    v107 = *(_OWORD *)(a2 + 760);
    *v94 = *v95;
    *(_OWORD *)(a1 + 760) = v107;
    *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
    v99 = *(_QWORD *)(a2 + 784);
    if (v99)
      goto LABEL_62;
LABEL_70:
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_71;
  }
  *(_QWORD *)(a1 + 768) = v96;
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v96 - 8))(a1 + 744, a2 + 744, v96);
  v99 = *(_QWORD *)(a2 + 784);
  if (!v99)
    goto LABEL_70;
LABEL_62:
  v100 = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 784) = v99;
  *(_QWORD *)(a1 + 792) = v100;
  swift_retain();
LABEL_71:
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  v108 = (uint64_t *)(a2 + 808);
  v109 = *(unsigned __int8 *)(a2 + 816);
  swift_bridgeObjectRetain();
  if (v109 == 255)
  {
    *(_QWORD *)(a1 + 808) = *v108;
    *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  }
  else
  {
    v110 = v109 & 1;
    v111 = *v108;
    sub_2141E83F4(v111, v110);
    *(_QWORD *)(a1 + 808) = v111;
    v6[552] = v110;
  }
  v112 = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
  *(_OWORD *)(a1 + 840) = v112;
  v6[592] = 1;
LABEL_75:
  v113 = *(unsigned __int8 *)(a2 + 968);
  if (v113 == 255)
  {
    v114 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
    *(_OWORD *)(a1 + 944) = v114;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    v115 = *(_OWORD *)(a2 + 880);
    *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
    *(_OWORD *)(a1 + 880) = v115;
    v116 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
    *(_OWORD *)(a1 + 912) = v116;
  }
  else
  {
    v207 = v113 & 1;
    v117 = *(_QWORD *)(a2 + 864);
    v118 = *(_QWORD *)(a2 + 872);
    v119 = *(_QWORD *)(a2 + 880);
    v120 = *(_QWORD *)(a2 + 888);
    v121 = *(_QWORD *)(a2 + 896);
    v122 = *(_QWORD *)(a2 + 904);
    v123 = *(_QWORD *)(a2 + 912);
    v124 = *(_QWORD *)(a2 + 920);
    v182 = *(_QWORD *)(a2 + 928);
    v187 = *(_QWORD *)(a2 + 936);
    v192 = *(_QWORD *)(a2 + 944);
    v197 = *(_QWORD *)(a2 + 952);
    v202 = *(_QWORD *)(a2 + 960);
    sub_21421BAE4(v117, v118, v119, v120, v121, v122, v123, v124, v182);
    *(_QWORD *)(a1 + 864) = v117;
    *(_QWORD *)(a1 + 872) = v118;
    *(_QWORD *)(a1 + 880) = v119;
    *(_QWORD *)(a1 + 888) = v120;
    *(_QWORD *)(a1 + 896) = v121;
    *(_QWORD *)(a1 + 904) = v122;
    *(_QWORD *)(a1 + 912) = v123;
    *(_QWORD *)(a1 + 920) = v124;
    *(_QWORD *)(a1 + 928) = v182;
    *(_QWORD *)(a1 + 936) = v187;
    *(_QWORD *)(a1 + 944) = v192;
    *(_QWORD *)(a1 + 952) = v197;
    *(_QWORD *)(a1 + 960) = v202;
    v210[704] = v207;
  }
  v125 = *(unsigned __int8 *)(a2 + 1104);
  if (v125 == 255)
  {
    v126 = *(_OWORD *)(a2 + 1088);
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)(a1 + 1088) = v126;
    *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
    v127 = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = v127;
    v128 = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = v128;
    v129 = *(_OWORD *)(a2 + 992);
    *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 992) = v129;
  }
  else
  {
    v208 = v125 & 1;
    v130 = *(_QWORD *)(a2 + 976);
    v131 = *(_QWORD *)(a2 + 984);
    v132 = *(_QWORD *)(a2 + 992);
    v133 = *(_QWORD *)(a2 + 1000);
    v134 = *(_QWORD *)(a2 + 1008);
    v135 = *(_QWORD *)(a2 + 1016);
    v136 = *(_QWORD *)(a2 + 1024);
    v137 = *(_QWORD *)(a2 + 1032);
    v177 = *(_QWORD *)(a2 + 1040);
    v178 = *(_QWORD *)(a2 + 1048);
    v179 = *(_QWORD *)(a2 + 1056);
    v183 = *(_QWORD *)(a2 + 1064);
    v188 = *(_QWORD *)(a2 + 1072);
    v193 = *(_QWORD *)(a2 + 1080);
    v198 = *(_QWORD *)(a2 + 1088);
    v203 = *(_QWORD *)(a2 + 1096);
    sub_21421B980(v130, v131, v132, v133, v134, v135, v136, v137, v177, v178, v179, v183);
    *(_QWORD *)(a1 + 976) = v130;
    *(_QWORD *)(a1 + 984) = v131;
    *(_QWORD *)(a1 + 992) = v132;
    *(_QWORD *)(a1 + 1000) = v133;
    *(_QWORD *)(a1 + 1008) = v134;
    *(_QWORD *)(a1 + 1016) = v135;
    *(_QWORD *)(a1 + 1024) = v136;
    *(_QWORD *)(a1 + 1032) = v137;
    *(_QWORD *)(a1 + 1040) = v177;
    *(_QWORD *)(a1 + 1048) = v178;
    *(_QWORD *)(a1 + 1056) = v179;
    *(_QWORD *)(a1 + 1064) = v183;
    *(_QWORD *)(a1 + 1072) = v188;
    *(_QWORD *)(a1 + 1080) = v193;
    *(_QWORD *)(a1 + 1088) = v198;
    *(_QWORD *)(a1 + 1096) = v203;
    v210[840] = v208;
  }
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  v138 = v209[14];
  v139 = a1 + v138;
  v140 = a2 + v138;
  v141 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
  v142 = v209[16];
  *(_QWORD *)(a1 + v209[15]) = *(_QWORD *)(a2 + v209[15]);
  *(_QWORD *)(a1 + v142) = *(_QWORD *)(a2 + v142);
  v143 = v209[17];
  v144 = a1 + v143;
  v145 = a2 + v143;
  v146 = *(unsigned __int8 *)(v145 + 40);
  swift_retain();
  swift_retain();
  if (v146 == 255)
  {
    v147 = *(_OWORD *)(v145 + 16);
    *(_OWORD *)v144 = *(_OWORD *)v145;
    *(_OWORD *)(v144 + 16) = v147;
    *(_OWORD *)(v144 + 25) = *(_OWORD *)(v145 + 25);
  }
  else
  {
    v148 = *(_OWORD *)(v145 + 24);
    *(_OWORD *)(v144 + 24) = v148;
    (**(void (***)(uint64_t, uint64_t))(v148 - 8))(v144, v145);
    *(_BYTE *)(v144 + 40) = (v146 & 1) != 0;
  }
  v149 = (_OWORD *)(v144 + 48);
  v150 = (_OWORD *)(v145 + 48);
  v151 = *(unsigned __int8 *)(v145 + 88);
  if (v151 == 255)
  {
    v152 = *(_OWORD *)(v145 + 64);
    *v149 = *v150;
    *(_OWORD *)(v144 + 64) = v152;
    *(_OWORD *)(v144 + 73) = *(_OWORD *)(v145 + 73);
  }
  else
  {
    v153 = *(_OWORD *)(v145 + 72);
    *(_OWORD *)(v144 + 72) = v153;
    (**(void (***)(_OWORD *, _OWORD *))(v153 - 8))(v149, v150);
    *(_BYTE *)(v144 + 88) = (v151 & 1) != 0;
  }
  v154 = (_OWORD *)(v144 + 96);
  v155 = (_OWORD *)(v145 + 96);
  v156 = *(unsigned __int8 *)(v145 + 136);
  if (v156 == 255)
  {
    v157 = *(_OWORD *)(v145 + 112);
    *v154 = *v155;
    *(_OWORD *)(v144 + 112) = v157;
    *(_OWORD *)(v144 + 121) = *(_OWORD *)(v145 + 121);
  }
  else
  {
    v158 = *(_OWORD *)(v145 + 120);
    *(_OWORD *)(v144 + 120) = v158;
    (**(void (***)(_OWORD *, _OWORD *))(v158 - 8))(v154, v155);
    *(_BYTE *)(v144 + 136) = (v156 & 1) != 0;
  }
  v159 = (_OWORD *)(v144 + 144);
  v160 = (_OWORD *)(v145 + 144);
  v161 = *(unsigned __int8 *)(v145 + 184);
  if (v161 == 255)
  {
    v162 = *(_OWORD *)(v145 + 160);
    *v159 = *v160;
    *(_OWORD *)(v144 + 160) = v162;
    *(_OWORD *)(v144 + 169) = *(_OWORD *)(v145 + 169);
  }
  else
  {
    v163 = *(_OWORD *)(v145 + 168);
    *(_OWORD *)(v144 + 168) = v163;
    (**(void (***)(_OWORD *, _OWORD *))(v163 - 8))(v159, v160);
    *(_BYTE *)(v144 + 184) = (v161 & 1) != 0;
  }
  v164 = (_OWORD *)(v144 + 192);
  v165 = (_OWORD *)(v145 + 192);
  v166 = *(unsigned __int8 *)(v145 + 232);
  if (v166 == 255)
  {
    v167 = *(_OWORD *)(v145 + 208);
    *v164 = *v165;
    *(_OWORD *)(v144 + 208) = v167;
    *(_OWORD *)(v144 + 217) = *(_OWORD *)(v145 + 217);
  }
  else
  {
    v168 = *(_OWORD *)(v145 + 216);
    *(_OWORD *)(v144 + 216) = v168;
    (**(void (***)(_OWORD *, _OWORD *))(v168 - 8))(v164, v165);
    *(_BYTE *)(v144 + 232) = (v166 & 1) != 0;
  }
  v169 = (_OWORD *)(v144 + 240);
  v170 = (_OWORD *)(v145 + 240);
  v171 = *(unsigned __int8 *)(v145 + 280);
  if (v171 == 255)
  {
    v172 = *(_OWORD *)(v145 + 256);
    *v169 = *v170;
    *(_OWORD *)(v144 + 256) = v172;
    *(_OWORD *)(v144 + 265) = *(_OWORD *)(v145 + 265);
  }
  else
  {
    v173 = *(_QWORD *)(v145 + 264);
    v174 = *(_QWORD *)(v145 + 272);
    *(_QWORD *)(v144 + 264) = v173;
    *(_QWORD *)(v144 + 272) = v174;
    (**(void (***)(_OWORD *, _OWORD *))(v173 - 8))(v169, v170);
    v175 = (BOOL *)(v144 + 280);
    *v175 = (v171 & 1) != 0;
  }
  *(_WORD *)(v144 + 281) = *(_WORD *)(v145 + 281);
  return a1;
}

uint64_t sub_2142DD81C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  __int128 *v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  __int128 *v97;
  _BYTE *v98;
  int v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  __int128 *v136;
  _BYTE *v137;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD *v173;
  _OWORD *v174;
  _BYTE *v175;
  int v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  __int128 *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  uint64_t *v201;
  int v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t *v209;
  int v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  __int128 v214;
  __int128 *v215;
  __int128 *v216;
  _BYTE *v217;
  int v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _OWORD *v254;
  _OWORD *v255;
  _BYTE *v256;
  int v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  __int128 *v302;
  int v303;
  int v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  __int128 *v311;
  __int128 *v312;
  int v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  __int128 *v319;
  __int128 *v320;
  int v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  __int128 *v327;
  __int128 *v328;
  int v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  __int128 *v335;
  __int128 *v336;
  int v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  __int128 *v343;
  __int128 *v344;
  _BYTE *v345;
  int v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _BYTE *v358;
  uint64_t v359;
  _BYTE *v360;
  uint64_t v361;
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _BYTE *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  char v416;
  char v417;
  char v418;
  char v419;
  char v420;
  char v421;
  char v422;
  uint64_t v423;
  uint64_t v424;
  int *v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  char v429;

  v6 = a1 + 264;
  v7 = a2 + 313;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v8 = (__int128 *)(a2 + 32);
    sub_2141E0750(a1 + 32, &qword_253F15AE8);
    if ((*(_BYTE *)(v7 + 2) & 1) != 0)
    {
      v9 = *(unsigned __int8 *)(a2 + 72);
      if (v9 == 255)
      {
        v10 = *v8;
        v11 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)(a1 + 48) = v11;
      }
      else
      {
        v12 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v12;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 32, a2 + 32);
        *(_BYTE *)(a1 + 72) = (v9 & 1) != 0;
      }
      v13 = (_OWORD *)(a1 + 80);
      v14 = (__int128 *)(a2 + 80);
      v15 = *(unsigned __int8 *)(a2 + 120);
      if (v15 == 255)
      {
        v16 = *v14;
        v17 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
        *v13 = v16;
        *(_OWORD *)(a1 + 96) = v17;
      }
      else
      {
        v18 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v18;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        (**(void (***)(_OWORD *, __int128 *))(v18 - 8))(v13, v14);
        *(_BYTE *)(a1 + 120) = (v15 & 1) != 0;
      }
      v19 = (_OWORD *)(a1 + 128);
      v20 = (__int128 *)(a2 + 128);
      v21 = *(unsigned __int8 *)(a2 + 168);
      if (v21 == 255)
      {
        v22 = *v20;
        v23 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
        *v19 = v22;
        *(_OWORD *)(a1 + 144) = v23;
      }
      else
      {
        v24 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 152) = v24;
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        (**(void (***)(_OWORD *, __int128 *))(v24 - 8))(v19, v20);
        *(_BYTE *)(a1 + 168) = (v21 & 1) != 0;
      }
      v25 = (_OWORD *)(a1 + 176);
      v26 = (__int128 *)(a2 + 176);
      v27 = *(unsigned __int8 *)(a2 + 216);
      if (v27 == 255)
      {
        v28 = *v26;
        v29 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
        *v25 = v28;
        *(_OWORD *)(a1 + 192) = v29;
      }
      else
      {
        v30 = *(_QWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 200) = v30;
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        (**(void (***)(_OWORD *, __int128 *))(v30 - 8))(v25, v26);
        *(_BYTE *)(a1 + 216) = (v27 & 1) != 0;
      }
      v31 = (_OWORD *)(a1 + 224);
      v32 = (__int128 *)(a2 + 224);
      v33 = *(unsigned __int8 *)(a2 + 264);
      if (v33 == 255)
      {
        v34 = *v32;
        v35 = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
        *v31 = v34;
        *(_OWORD *)(a1 + 240) = v35;
      }
      else
      {
        v36 = *(_QWORD *)(a2 + 248);
        *(_QWORD *)(a1 + 248) = v36;
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        (**(void (***)(_OWORD *, __int128 *))(v36 - 8))(v31, v32);
        *(_BYTE *)v6 = (v33 & 1) != 0;
      }
      v37 = (_OWORD *)(a1 + 272);
      v38 = (__int128 *)(a2 + 272);
      v39 = *(unsigned __int8 *)(a2 + 312);
      if (v39 == 255)
      {
        v40 = *v38;
        v41 = *(_OWORD *)(a2 + 288);
        *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
        *v37 = v40;
        *(_OWORD *)(a1 + 288) = v41;
      }
      else
      {
        v42 = *(_QWORD *)(a2 + 296);
        *(_QWORD *)(a1 + 296) = v42;
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
        (**(void (***)(_OWORD *, __int128 *))(v42 - 8))(v37, v38);
        *(_BYTE *)(v6 + 48) = (v39 & 1) != 0;
      }
      *(_WORD *)(v6 + 49) = *(_WORD *)v7;
      *(_BYTE *)(v6 + 51) = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
      *(_BYTE *)(v6 + 51) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(v7 + 3);
  v43 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v43)
    {
      v44 = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 320) = v43;
      *(_QWORD *)(a1 + 328) = v44;
      swift_retain();
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v43)
  {
    v45 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v43;
    *(_QWORD *)(a1 + 328) = v45;
    swift_retain();
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
LABEL_42:
  v46 = *(_QWORD *)(a2 + 336);
  if (*(_QWORD *)(a1 + 336))
  {
    if (v46)
    {
      v47 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 336) = v46;
      *(_QWORD *)(a1 + 344) = v47;
      swift_retain();
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v46)
  {
    v48 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = v46;
    *(_QWORD *)(a1 + 344) = v48;
    swift_retain();
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_49:
  v49 = *(_QWORD *)(a2 + 352);
  if (*(_QWORD *)(a1 + 352))
  {
    if (v49)
    {
      v50 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = v49;
      *(_QWORD *)(a1 + 360) = v50;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    swift_release();
  }
  else if (v49)
  {
    v51 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = v49;
    *(_QWORD *)(a1 + 360) = v51;
    swift_retain();
    goto LABEL_56;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
LABEL_56:
  v52 = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 368))
  {
    if (v52)
    {
      v53 = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = v52;
      *(_QWORD *)(a1 + 376) = v53;
      swift_retain();
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  else if (v52)
  {
    v54 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = v52;
    *(_QWORD *)(a1 + 376) = v54;
    swift_retain();
    goto LABEL_63;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
LABEL_63:
  v55 = *(_QWORD *)(a2 + 384);
  if (*(_QWORD *)(a1 + 384))
  {
    if (v55)
    {
      v56 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = v55;
      *(_QWORD *)(a1 + 392) = v56;
      swift_retain();
      swift_release();
      goto LABEL_70;
    }
    swift_release();
  }
  else if (v55)
  {
    v57 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = v55;
    *(_QWORD *)(a1 + 392) = v57;
    swift_retain();
    goto LABEL_70;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_70:
  v58 = (__int128 *)(a1 + 400);
  v59 = (__int128 *)(a2 + 400);
  v60 = *(unsigned __int8 *)(a2 + 504);
  v426 = v7;
  v427 = v6;
  v425 = a3;
  if (*(unsigned __int8 *)(a1 + 504) == 255)
  {
    if (v60 == 255)
    {
      v66 = *v59;
      v67 = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 432) = v67;
      *v58 = v66;
      v68 = *(_OWORD *)(a2 + 448);
      v69 = *(_OWORD *)(a2 + 464);
      v70 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
      *(_OWORD *)(a1 + 464) = v69;
      *(_OWORD *)(a1 + 480) = v70;
      *(_OWORD *)(a1 + 448) = v68;
    }
    else
    {
      v416 = v60 & 1;
      v88 = *(_QWORD *)(a2 + 400);
      v89 = *(_QWORD *)(a2 + 408);
      v90 = *(_QWORD *)(a2 + 416);
      v91 = *(_QWORD *)(a2 + 424);
      v92 = *(_QWORD *)(a2 + 432);
      v93 = *(_QWORD *)(a2 + 440);
      v94 = *(_QWORD *)(a2 + 448);
      v95 = *(_QWORD *)(a2 + 456);
      v366 = *(_QWORD *)(a2 + 464);
      v376 = *(_QWORD *)(a2 + 472);
      v386 = *(_QWORD *)(a2 + 480);
      v396 = *(_QWORD *)(a2 + 488);
      v406 = *(_QWORD *)(a2 + 496);
      sub_21421BAE4(v88, v89, v90, v91, v92, v93, v94, v95, v366);
      *(_QWORD *)(a1 + 400) = v88;
      *(_QWORD *)(a1 + 408) = v89;
      *(_QWORD *)(a1 + 416) = v90;
      *(_QWORD *)(a1 + 424) = v91;
      *(_QWORD *)(a1 + 432) = v92;
      *(_QWORD *)(a1 + 440) = v93;
      *(_QWORD *)(a1 + 448) = v94;
      *(_QWORD *)(a1 + 456) = v95;
      v6 = v427;
      *(_QWORD *)(a1 + 464) = v366;
      *(_QWORD *)(a1 + 472) = v376;
      *(_QWORD *)(a1 + 480) = v386;
      *(_QWORD *)(a1 + 488) = v396;
      *(_QWORD *)(a1 + 496) = v406;
      *(_BYTE *)(v427 + 240) = v416;
    }
  }
  else if (v60 == 255)
  {
    sub_2141E0750(a1 + 400, &qword_253F13368);
    v62 = *(_OWORD *)(a2 + 416);
    v61 = *(_OWORD *)(a2 + 432);
    *v58 = *v59;
    *(_OWORD *)(a1 + 416) = v62;
    *(_OWORD *)(a1 + 432) = v61;
    v64 = *(_OWORD *)(a2 + 464);
    v63 = *(_OWORD *)(a2 + 480);
    v65 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    *(_OWORD *)(a1 + 464) = v64;
    *(_OWORD *)(a1 + 480) = v63;
    *(_OWORD *)(a1 + 448) = v65;
  }
  else
  {
    v415 = v60 & 1;
    v71 = *(_QWORD *)(a2 + 400);
    v72 = *(_QWORD *)(a2 + 408);
    v73 = *(_QWORD *)(a2 + 416);
    v74 = *(_QWORD *)(a2 + 424);
    v75 = *(_QWORD *)(a2 + 432);
    v76 = *(_QWORD *)(a2 + 440);
    v78 = *(_QWORD *)(a2 + 448);
    v77 = *(_QWORD *)(a2 + 456);
    v365 = *(_QWORD *)(a2 + 464);
    v375 = *(_QWORD *)(a2 + 472);
    v385 = *(_QWORD *)(a2 + 480);
    v395 = *(_QWORD *)(a2 + 488);
    v405 = *(_QWORD *)(a2 + 496);
    sub_21421BAE4(v71, v72, v73, v74, v75, v76, v78, v77, v365);
    v79 = *(_QWORD *)(a1 + 400);
    v80 = *(_QWORD *)(a1 + 408);
    v81 = *(_QWORD *)(a1 + 416);
    v82 = *(_QWORD *)(a1 + 424);
    v83 = *(_QWORD *)(a1 + 432);
    v84 = *(_QWORD *)(a1 + 440);
    v85 = *(_QWORD *)(a1 + 448);
    v86 = *(_QWORD *)(a1 + 456);
    v87 = *(_OWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 400) = v71;
    *(_QWORD *)(a1 + 408) = v72;
    *(_QWORD *)(a1 + 416) = v73;
    *(_QWORD *)(a1 + 424) = v74;
    *(_QWORD *)(a1 + 432) = v75;
    *(_QWORD *)(a1 + 440) = v76;
    v6 = v427;
    *(_QWORD *)(a1 + 448) = v78;
    *(_QWORD *)(a1 + 456) = v77;
    *(_QWORD *)(a1 + 464) = v365;
    *(_QWORD *)(a1 + 472) = v375;
    *(_QWORD *)(a1 + 480) = v385;
    *(_QWORD *)(a1 + 488) = v395;
    *(_QWORD *)(a1 + 496) = v405;
    *(_BYTE *)(v427 + 240) = v415;
    sub_21421BB6C(v79, v80, v81, v82, v83, v84, v85, v86, v87);
  }
  v96 = (__int128 *)(a1 + 512);
  v97 = (__int128 *)(a2 + 512);
  v98 = (_BYTE *)(v6 + 352);
  v99 = *(unsigned __int8 *)(a2 + 616);
  if (*(unsigned __int8 *)(a1 + 616) == 255)
  {
    if (v99 == 255)
    {
      v105 = *v97;
      v106 = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 544) = v106;
      *v96 = v105;
      v107 = *(_OWORD *)(a2 + 560);
      v108 = *(_OWORD *)(a2 + 576);
      v109 = *(_OWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
      *(_OWORD *)(a1 + 576) = v108;
      *(_OWORD *)(a1 + 592) = v109;
      *(_OWORD *)(a1 + 560) = v107;
    }
    else
    {
      v418 = v99 & 1;
      v127 = *(_QWORD *)(a2 + 512);
      v128 = *(_QWORD *)(a2 + 520);
      v129 = *(_QWORD *)(a2 + 528);
      v130 = *(_QWORD *)(a2 + 536);
      v131 = *(_QWORD *)(a2 + 544);
      v132 = *(_QWORD *)(a2 + 552);
      v133 = *(_QWORD *)(a2 + 560);
      v134 = *(_QWORD *)(a2 + 568);
      v368 = *(_QWORD *)(a2 + 576);
      v378 = *(_QWORD *)(a2 + 584);
      v388 = *(_QWORD *)(a2 + 592);
      v398 = *(_QWORD *)(a2 + 600);
      v408 = *(_QWORD *)(a2 + 608);
      v360 = v98;
      sub_21421BAE4(v127, v128, v129, v130, v131, v132, v133, v134, v368);
      *(_QWORD *)(a1 + 512) = v127;
      *(_QWORD *)(a1 + 520) = v128;
      *(_QWORD *)(a1 + 528) = v129;
      *(_QWORD *)(a1 + 536) = v130;
      *(_QWORD *)(a1 + 544) = v131;
      *(_QWORD *)(a1 + 552) = v132;
      *(_QWORD *)(a1 + 560) = v133;
      v6 = v427;
      *(_QWORD *)(a1 + 568) = v134;
      *(_QWORD *)(a1 + 576) = v368;
      *(_QWORD *)(a1 + 584) = v378;
      *(_QWORD *)(a1 + 592) = v388;
      *(_QWORD *)(a1 + 600) = v398;
      *(_QWORD *)(a1 + 608) = v408;
      *v360 = v418;
    }
  }
  else if (v99 == 255)
  {
    sub_2141E0750(a1 + 512, &qword_253F13368);
    v101 = *(_OWORD *)(a2 + 528);
    v100 = *(_OWORD *)(a2 + 544);
    *v96 = *v97;
    *(_OWORD *)(a1 + 528) = v101;
    *(_OWORD *)(a1 + 544) = v100;
    v103 = *(_OWORD *)(a2 + 576);
    v102 = *(_OWORD *)(a2 + 592);
    v104 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    *(_OWORD *)(a1 + 576) = v103;
    *(_OWORD *)(a1 + 592) = v102;
    *(_OWORD *)(a1 + 560) = v104;
  }
  else
  {
    v417 = v99 & 1;
    v110 = *(_QWORD *)(a2 + 520);
    v111 = *(_QWORD *)(a2 + 528);
    v112 = *(_QWORD *)(a2 + 536);
    v113 = *(_QWORD *)(a2 + 544);
    v114 = *(_QWORD *)(a2 + 552);
    v115 = *(_QWORD *)(a2 + 560);
    v116 = *(_QWORD *)(a2 + 568);
    v359 = *(_QWORD *)(a2 + 512);
    v367 = *(_QWORD *)(a2 + 576);
    v377 = *(_QWORD *)(a2 + 584);
    v387 = *(_QWORD *)(a2 + 592);
    v397 = *(_QWORD *)(a2 + 600);
    v407 = *(_QWORD *)(a2 + 608);
    v117 = v98;
    sub_21421BAE4(v359, v110, v111, v112, v113, v114, v115, v116, *(_OWORD *)(a2 + 576));
    v118 = *(_QWORD *)(a1 + 512);
    v119 = *(_QWORD *)(a1 + 520);
    v120 = *(_QWORD *)(a1 + 528);
    v121 = *(_QWORD *)(a1 + 536);
    v122 = *(_QWORD *)(a1 + 544);
    v123 = *(_QWORD *)(a1 + 552);
    v124 = *(_QWORD *)(a1 + 560);
    v125 = *(_QWORD *)(a1 + 568);
    v126 = *(_OWORD *)(a1 + 576);
    *(_QWORD *)(a1 + 512) = v359;
    *(_QWORD *)(a1 + 520) = v110;
    *(_QWORD *)(a1 + 528) = v111;
    *(_QWORD *)(a1 + 536) = v112;
    *(_QWORD *)(a1 + 544) = v113;
    *(_QWORD *)(a1 + 552) = v114;
    *(_QWORD *)(a1 + 560) = v115;
    v6 = v427;
    *(_QWORD *)(a1 + 568) = v116;
    *(_QWORD *)(a1 + 576) = v367;
    *(_QWORD *)(a1 + 584) = v377;
    *(_QWORD *)(a1 + 592) = v387;
    *(_QWORD *)(a1 + 600) = v397;
    *(_QWORD *)(a1 + 608) = v407;
    *v117 = v417;
    sub_21421BB6C(v118, v119, v120, v121, v122, v123, v124, v125, v126);
  }
  v135 = (__int128 *)(a1 + 624);
  v136 = (__int128 *)(a2 + 624);
  v137 = (_BYTE *)(v6 + 456);
  v138 = *(unsigned __int8 *)(a2 + 720);
  if (*(unsigned __int8 *)(a1 + 720) == 255)
  {
    if (v138 == 255)
    {
      v144 = *v136;
      v145 = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
      *(_OWORD *)(a1 + 656) = v145;
      *v135 = v144;
      v146 = *(_OWORD *)(a2 + 672);
      v147 = *(_OWORD *)(a2 + 688);
      v148 = *(_OWORD *)(a2 + 704);
      *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
      *(_OWORD *)(a1 + 688) = v147;
      *(_OWORD *)(a1 + 704) = v148;
      *(_OWORD *)(a1 + 672) = v146;
    }
    else
    {
      v420 = v138 & 1;
      v165 = *(_QWORD *)(a2 + 624);
      v166 = *(_QWORD *)(a2 + 632);
      v167 = *(_QWORD *)(a2 + 640);
      v168 = *(_QWORD *)(a2 + 648);
      v169 = *(_QWORD *)(a2 + 656);
      v170 = *(_QWORD *)(a2 + 664);
      v171 = *(_QWORD *)(a2 + 672);
      v172 = *(_QWORD *)(a2 + 680);
      v380 = *(_QWORD *)(a2 + 688);
      v390 = *(_QWORD *)(a2 + 696);
      v400 = *(_QWORD *)(a2 + 704);
      v410 = *(_QWORD *)(a2 + 712);
      v370 = v137;
      sub_21421B808(v165, v166, v167, v168, v169, v170, v171, v172);
      *(_QWORD *)(a1 + 624) = v165;
      *(_QWORD *)(a1 + 632) = v166;
      *(_QWORD *)(a1 + 640) = v167;
      *(_QWORD *)(a1 + 648) = v168;
      *(_QWORD *)(a1 + 656) = v169;
      *(_QWORD *)(a1 + 664) = v170;
      *(_QWORD *)(a1 + 672) = v171;
      v6 = v427;
      *(_QWORD *)(a1 + 680) = v172;
      *(_QWORD *)(a1 + 688) = v380;
      *(_QWORD *)(a1 + 696) = v390;
      *(_QWORD *)(a1 + 704) = v400;
      *(_QWORD *)(a1 + 712) = v410;
      *v370 = v420;
    }
  }
  else if (v138 == 255)
  {
    sub_2141E0750(a1 + 624, qword_253F10468);
    v140 = *(_OWORD *)(a2 + 640);
    v139 = *(_OWORD *)(a2 + 656);
    *v135 = *v136;
    *(_OWORD *)(a1 + 640) = v140;
    *(_OWORD *)(a1 + 656) = v139;
    v142 = *(_OWORD *)(a2 + 688);
    v141 = *(_OWORD *)(a2 + 704);
    v143 = *(_OWORD *)(a2 + 672);
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    *(_OWORD *)(a1 + 688) = v142;
    *(_OWORD *)(a1 + 704) = v141;
    *(_OWORD *)(a1 + 672) = v143;
  }
  else
  {
    v419 = v138 & 1;
    v149 = *(_QWORD *)(a2 + 632);
    v150 = *(_QWORD *)(a2 + 640);
    v151 = *(_QWORD *)(a2 + 648);
    v152 = *(_QWORD *)(a2 + 656);
    v153 = *(_QWORD *)(a2 + 664);
    v154 = *(_QWORD *)(a2 + 672);
    v155 = *(_QWORD *)(a2 + 680);
    v369 = *(_QWORD *)(a2 + 624);
    v379 = *(_QWORD *)(a2 + 688);
    v389 = *(_QWORD *)(a2 + 696);
    v399 = *(_QWORD *)(a2 + 704);
    v409 = *(_QWORD *)(a2 + 712);
    v156 = v137;
    sub_21421B808(v369, v149, v150, v151, v152, v153, v154, v155);
    v157 = *(_QWORD *)(a1 + 624);
    v158 = *(_QWORD *)(a1 + 632);
    v159 = *(_QWORD *)(a1 + 640);
    v160 = *(_QWORD *)(a1 + 648);
    v161 = *(_QWORD *)(a1 + 656);
    v162 = *(_QWORD *)(a1 + 664);
    v163 = *(_QWORD *)(a1 + 672);
    v164 = *(_QWORD *)(a1 + 680);
    *(_QWORD *)(a1 + 624) = v369;
    *(_QWORD *)(a1 + 632) = v149;
    *(_QWORD *)(a1 + 640) = v150;
    *(_QWORD *)(a1 + 648) = v151;
    *(_QWORD *)(a1 + 656) = v152;
    *(_QWORD *)(a1 + 664) = v153;
    *(_QWORD *)(a1 + 672) = v154;
    v6 = v427;
    *(_QWORD *)(a1 + 680) = v155;
    *(_QWORD *)(a1 + 688) = v379;
    *(_QWORD *)(a1 + 696) = v389;
    *(_QWORD *)(a1 + 704) = v399;
    *(_QWORD *)(a1 + 712) = v409;
    *v156 = v419;
    sub_21421B8A0(v157, v158, v159, v160, v161, v162, v163, v164);
  }
  v173 = (_OWORD *)(a1 + 728);
  v174 = (_OWORD *)(a2 + 728);
  v175 = (_BYTE *)(v6 + 592);
  v176 = *(unsigned __int8 *)(a2 + 856);
  if (*(unsigned __int8 *)(a1 + 856) == 255)
  {
    if (v176 == 255)
    {
      *v173 = *v174;
      v183 = *(_OWORD *)(a2 + 744);
      v184 = *(_OWORD *)(a2 + 760);
      v185 = *(_OWORD *)(a2 + 792);
      *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
      *(_OWORD *)(a1 + 792) = v185;
      *(_OWORD *)(a1 + 744) = v183;
      *(_OWORD *)(a1 + 760) = v184;
      v186 = *(_OWORD *)(a2 + 808);
      v187 = *(_OWORD *)(a2 + 824);
      v188 = *(_OWORD *)(a2 + 840);
      *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
      *(_OWORD *)(a1 + 824) = v187;
      *(_OWORD *)(a1 + 840) = v188;
      *(_OWORD *)(a1 + 808) = v186;
      goto LABEL_117;
    }
    v196 = *(_QWORD *)(a2 + 736);
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
    *(_QWORD *)(a1 + 736) = v196;
    v191 = a1 + 744;
    v192 = (__int128 *)(a2 + 744);
    v193 = *(_QWORD *)(a2 + 768);
    swift_retain();
    if ((v176 & 1) != 0)
    {
LABEL_98:
      if (v193)
      {
        *(_QWORD *)(a1 + 768) = v193;
        *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
        (**(void (***)(uint64_t, __int128 *, uint64_t))(v193 - 8))(v191, v192, v193);
        v194 = *(_QWORD *)(a2 + 784);
        if (v194)
        {
LABEL_100:
          v195 = *(_QWORD *)(a2 + 792);
          *(_QWORD *)(a1 + 784) = v194;
          *(_QWORD *)(a1 + 792) = v195;
          swift_retain();
LABEL_107:
          *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
          v201 = (uint64_t *)(a2 + 808);
          v202 = *(unsigned __int8 *)(a2 + 816);
          swift_bridgeObjectRetain();
          if (v202 == 255)
          {
            v203 = *v201;
            *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
            *(_QWORD *)(a1 + 808) = v203;
          }
          else
          {
            v204 = v202 & 1;
            v205 = *v201;
            sub_2141E83F4(v205, v204);
            *(_QWORD *)(a1 + 808) = v205;
            *(_BYTE *)(v6 + 552) = v204;
          }
          v206 = *(_OWORD *)(a2 + 840);
          *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
          *(_OWORD *)(a1 + 840) = v206;
          *v175 = 1;
          goto LABEL_117;
        }
      }
      else
      {
        v199 = *v192;
        v200 = v192[1];
        *(_QWORD *)(v191 + 32) = *((_QWORD *)v192 + 4);
        *(_OWORD *)v191 = v199;
        *(_OWORD *)(v191 + 16) = v200;
        v194 = *(_QWORD *)(a2 + 784);
        if (v194)
          goto LABEL_100;
      }
      *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
      goto LABEL_107;
    }
LABEL_102:
    if (v193)
    {
      *(_QWORD *)(a1 + 768) = v193;
      *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
      (**(void (***)(uint64_t, __int128 *, uint64_t))(v193 - 8))(v191, v192, v193);
      v197 = *(_QWORD *)(a2 + 784);
      if (v197)
      {
LABEL_104:
        v198 = *(_QWORD *)(a2 + 792);
        *(_QWORD *)(a1 + 784) = v197;
        *(_QWORD *)(a1 + 792) = v198;
        swift_retain();
LABEL_113:
        *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
        v209 = (uint64_t *)(a2 + 808);
        v210 = *(unsigned __int8 *)(a2 + 816);
        swift_bridgeObjectRetain();
        if (v210 == 255)
        {
          v211 = *v209;
          *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
          *(_QWORD *)(a1 + 808) = v211;
        }
        else
        {
          v212 = v210 & 1;
          v213 = *v209;
          sub_2141E83F4(v213, v212);
          *(_QWORD *)(a1 + 808) = v213;
          *(_BYTE *)(v6 + 552) = v212;
        }
        v214 = *(_OWORD *)(a2 + 840);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
        *(_OWORD *)(a1 + 840) = v214;
        *v175 = 0;
        goto LABEL_117;
      }
    }
    else
    {
      v207 = *v192;
      v208 = v192[1];
      *(_QWORD *)(v191 + 32) = *((_QWORD *)v192 + 4);
      *(_OWORD *)v191 = v207;
      *(_OWORD *)(v191 + 16) = v208;
      v197 = *(_QWORD *)(a2 + 784);
      if (v197)
        goto LABEL_104;
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_113;
  }
  if (v176 == 255)
  {
    sub_2141E0750(a1 + 728, &qword_254D695C8);
    *v173 = *v174;
    v177 = *(_OWORD *)(a2 + 792);
    v179 = *(_OWORD *)(a2 + 744);
    v178 = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 792) = v177;
    *(_OWORD *)(a1 + 744) = v179;
    *(_OWORD *)(a1 + 760) = v178;
    v181 = *(_OWORD *)(a2 + 824);
    v180 = *(_OWORD *)(a2 + 840);
    v182 = *(_OWORD *)(a2 + 808);
    *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
    *(_OWORD *)(a1 + 824) = v181;
    *(_OWORD *)(a1 + 840) = v180;
    *(_OWORD *)(a1 + 808) = v182;
    goto LABEL_117;
  }
  if (a1 != a2)
  {
    sub_2141E0750(a1 + 728, &qword_254D695C8);
    v189 = *(_BYTE *)(v426 + 543);
    v190 = *(_QWORD *)(a2 + 736);
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
    *(_QWORD *)(a1 + 736) = v190;
    v191 = a1 + 744;
    v192 = (__int128 *)(a2 + 744);
    v193 = *(_QWORD *)(a2 + 768);
    swift_retain();
    if ((v189 & 1) != 0)
      goto LABEL_98;
    goto LABEL_102;
  }
LABEL_117:
  v215 = (__int128 *)(a1 + 864);
  v216 = (__int128 *)(a2 + 864);
  v217 = (_BYTE *)(v6 + 704);
  v218 = *(unsigned __int8 *)(a2 + 968);
  if (*(unsigned __int8 *)(a1 + 968) == 255)
  {
    if (v218 == 255)
    {
      v224 = *v216;
      v225 = *(_OWORD *)(a2 + 896);
      *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 896) = v225;
      *v215 = v224;
      v226 = *(_OWORD *)(a2 + 912);
      v227 = *(_OWORD *)(a2 + 928);
      v228 = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
      *(_OWORD *)(a1 + 928) = v227;
      *(_OWORD *)(a1 + 944) = v228;
      *(_OWORD *)(a1 + 912) = v226;
    }
    else
    {
      v422 = v218 & 1;
      v246 = *(_QWORD *)(a2 + 864);
      v247 = *(_QWORD *)(a2 + 872);
      v248 = *(_QWORD *)(a2 + 880);
      v249 = *(_QWORD *)(a2 + 888);
      v250 = *(_QWORD *)(a2 + 896);
      v251 = *(_QWORD *)(a2 + 904);
      v252 = *(_QWORD *)(a2 + 912);
      v253 = *(_QWORD *)(a2 + 920);
      v372 = *(_QWORD *)(a2 + 928);
      v382 = *(_QWORD *)(a2 + 936);
      v392 = *(_QWORD *)(a2 + 944);
      v402 = *(_QWORD *)(a2 + 952);
      v412 = *(_QWORD *)(a2 + 960);
      v362 = v217;
      sub_21421BAE4(v246, v247, v248, v249, v250, v251, v252, v253, v372);
      *(_QWORD *)(a1 + 864) = v246;
      *(_QWORD *)(a1 + 872) = v247;
      *(_QWORD *)(a1 + 880) = v248;
      *(_QWORD *)(a1 + 888) = v249;
      *(_QWORD *)(a1 + 896) = v250;
      *(_QWORD *)(a1 + 904) = v251;
      *(_QWORD *)(a1 + 912) = v252;
      v6 = v427;
      *(_QWORD *)(a1 + 920) = v253;
      *(_QWORD *)(a1 + 928) = v372;
      *(_QWORD *)(a1 + 936) = v382;
      *(_QWORD *)(a1 + 944) = v392;
      *(_QWORD *)(a1 + 952) = v402;
      *(_QWORD *)(a1 + 960) = v412;
      *v362 = v422;
    }
  }
  else if (v218 == 255)
  {
    sub_2141E0750(a1 + 864, &qword_253F13368);
    v220 = *(_OWORD *)(a2 + 880);
    v219 = *(_OWORD *)(a2 + 896);
    *v215 = *v216;
    *(_OWORD *)(a1 + 880) = v220;
    *(_OWORD *)(a1 + 896) = v219;
    v222 = *(_OWORD *)(a2 + 928);
    v221 = *(_OWORD *)(a2 + 944);
    v223 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    *(_OWORD *)(a1 + 928) = v222;
    *(_OWORD *)(a1 + 944) = v221;
    *(_OWORD *)(a1 + 912) = v223;
  }
  else
  {
    v421 = v218 & 1;
    v229 = *(_QWORD *)(a2 + 872);
    v230 = *(_QWORD *)(a2 + 880);
    v231 = *(_QWORD *)(a2 + 888);
    v232 = *(_QWORD *)(a2 + 896);
    v233 = *(_QWORD *)(a2 + 904);
    v234 = *(_QWORD *)(a2 + 912);
    v235 = *(_QWORD *)(a2 + 920);
    v361 = *(_QWORD *)(a2 + 864);
    v371 = *(_QWORD *)(a2 + 928);
    v381 = *(_QWORD *)(a2 + 936);
    v391 = *(_QWORD *)(a2 + 944);
    v401 = *(_QWORD *)(a2 + 952);
    v411 = *(_QWORD *)(a2 + 960);
    v236 = v217;
    sub_21421BAE4(v361, v229, v230, v231, v232, v233, v234, v235, *(_OWORD *)(a2 + 928));
    v237 = *(_QWORD *)(a1 + 864);
    v238 = *(_QWORD *)(a1 + 872);
    v239 = *(_QWORD *)(a1 + 880);
    v240 = *(_QWORD *)(a1 + 888);
    v241 = *(_QWORD *)(a1 + 896);
    v242 = *(_QWORD *)(a1 + 904);
    v243 = *(_QWORD *)(a1 + 912);
    v244 = *(_QWORD *)(a1 + 920);
    v245 = *(_OWORD *)(a1 + 928);
    *(_QWORD *)(a1 + 864) = v361;
    *(_QWORD *)(a1 + 872) = v229;
    *(_QWORD *)(a1 + 880) = v230;
    *(_QWORD *)(a1 + 888) = v231;
    *(_QWORD *)(a1 + 896) = v232;
    *(_QWORD *)(a1 + 904) = v233;
    *(_QWORD *)(a1 + 912) = v234;
    v6 = v427;
    *(_QWORD *)(a1 + 920) = v235;
    *(_QWORD *)(a1 + 928) = v371;
    *(_QWORD *)(a1 + 936) = v381;
    *(_QWORD *)(a1 + 944) = v391;
    *(_QWORD *)(a1 + 952) = v401;
    *(_QWORD *)(a1 + 960) = v411;
    *v236 = v421;
    sub_21421BB6C(v237, v238, v239, v240, v241, v242, v243, v244, v245);
  }
  v254 = (_OWORD *)(a1 + 976);
  v255 = (_OWORD *)(a2 + 976);
  v256 = (_BYTE *)(v6 + 840);
  v257 = *(unsigned __int8 *)(a2 + 1104);
  if (*(unsigned __int8 *)(a1 + 1104) == 255)
  {
    if (v257 == 255)
    {
      *v254 = *v255;
      v264 = *(_OWORD *)(a2 + 992);
      v265 = *(_OWORD *)(a2 + 1008);
      v266 = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
      *(_OWORD *)(a1 + 1040) = v266;
      *(_OWORD *)(a1 + 992) = v264;
      *(_OWORD *)(a1 + 1008) = v265;
      v267 = *(_OWORD *)(a2 + 1056);
      v268 = *(_OWORD *)(a2 + 1072);
      v269 = *(_OWORD *)(a2 + 1088);
      *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
      *(_OWORD *)(a1 + 1072) = v268;
      *(_OWORD *)(a1 + 1088) = v269;
      *(_OWORD *)(a1 + 1056) = v267;
    }
    else
    {
      v429 = v257 & 1;
      v288 = *(_QWORD *)(a2 + 976);
      v289 = *(_QWORD *)(a2 + 984);
      v290 = *(_QWORD *)(a2 + 992);
      v291 = *(_QWORD *)(a2 + 1000);
      v292 = *(_QWORD *)(a2 + 1008);
      v293 = *(_QWORD *)(a2 + 1016);
      v294 = *(_QWORD *)(a2 + 1024);
      v295 = *(_QWORD *)(a2 + 1032);
      v356 = *(_QWORD *)(a2 + 1040);
      v364 = *(_QWORD *)(a2 + 1048);
      v374 = *(_QWORD *)(a2 + 1056);
      v384 = *(_QWORD *)(a2 + 1064);
      v394 = *(_QWORD *)(a2 + 1072);
      v404 = *(_QWORD *)(a2 + 1080);
      v414 = *(_QWORD *)(a2 + 1088);
      v424 = *(_QWORD *)(a2 + 1096);
      v358 = v256;
      sub_21421B980(v288, v289, v290, v291, v292, v293, v294, v295, v356, v364, v374, v384);
      *(_QWORD *)(a1 + 976) = v288;
      *(_QWORD *)(a1 + 984) = v289;
      *(_QWORD *)(a1 + 992) = v290;
      *(_QWORD *)(a1 + 1000) = v291;
      *(_QWORD *)(a1 + 1008) = v292;
      *(_QWORD *)(a1 + 1016) = v293;
      *(_QWORD *)(a1 + 1024) = v294;
      *(_QWORD *)(a1 + 1032) = v295;
      *(_QWORD *)(a1 + 1040) = v356;
      *(_QWORD *)(a1 + 1048) = v364;
      *(_QWORD *)(a1 + 1056) = v374;
      *(_QWORD *)(a1 + 1064) = v384;
      *(_QWORD *)(a1 + 1072) = v394;
      *(_QWORD *)(a1 + 1080) = v404;
      *(_QWORD *)(a1 + 1088) = v414;
      *(_QWORD *)(a1 + 1096) = v424;
      *v358 = v429;
    }
  }
  else if (v257 == 255)
  {
    sub_2141E0750(a1 + 976, &qword_254D695C0);
    *v254 = *v255;
    v258 = *(_OWORD *)(a2 + 1040);
    v260 = *(_OWORD *)(a2 + 992);
    v259 = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1040) = v258;
    *(_OWORD *)(a1 + 992) = v260;
    *(_OWORD *)(a1 + 1008) = v259;
    v262 = *(_OWORD *)(a2 + 1072);
    v261 = *(_OWORD *)(a2 + 1088);
    v263 = *(_OWORD *)(a2 + 1056);
    *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
    *(_OWORD *)(a1 + 1072) = v262;
    *(_OWORD *)(a1 + 1088) = v261;
    *(_OWORD *)(a1 + 1056) = v263;
  }
  else
  {
    v428 = v257 & 1;
    v270 = *(_QWORD *)(a2 + 976);
    v271 = *(_QWORD *)(a2 + 984);
    v272 = *(_QWORD *)(a2 + 992);
    v273 = *(_QWORD *)(a2 + 1000);
    v274 = *(_QWORD *)(a2 + 1008);
    v275 = *(_QWORD *)(a2 + 1016);
    v276 = *(_QWORD *)(a2 + 1024);
    v355 = *(_QWORD *)(a2 + 1032);
    v357 = *(_QWORD *)(a2 + 1040);
    v363 = *(_QWORD *)(a2 + 1048);
    v373 = *(_QWORD *)(a2 + 1056);
    v383 = *(_QWORD *)(a2 + 1064);
    v393 = *(_QWORD *)(a2 + 1072);
    v403 = *(_QWORD *)(a2 + 1080);
    v413 = *(_QWORD *)(a2 + 1088);
    v423 = *(_QWORD *)(a2 + 1096);
    v277 = v256;
    sub_21421B980(v270, v271, v272, v273, v274, v275, v276, v355, v357, v363, v373, v383);
    v278 = *(_QWORD *)(a1 + 976);
    v279 = *(_QWORD *)(a1 + 984);
    v280 = *(_QWORD *)(a1 + 992);
    v281 = *(_QWORD *)(a1 + 1000);
    v282 = *(_QWORD *)(a1 + 1008);
    v283 = *(_QWORD *)(a1 + 1016);
    v284 = *(_QWORD *)(a1 + 1024);
    v285 = *(_QWORD *)(a1 + 1032);
    v286 = *(_OWORD *)(a1 + 1040);
    v287 = *(_OWORD *)(a1 + 1056);
    *(_QWORD *)(a1 + 976) = v270;
    *(_QWORD *)(a1 + 984) = v271;
    *(_QWORD *)(a1 + 992) = v272;
    *(_QWORD *)(a1 + 1000) = v273;
    *(_QWORD *)(a1 + 1008) = v274;
    *(_QWORD *)(a1 + 1016) = v275;
    *(_QWORD *)(a1 + 1024) = v276;
    *(_QWORD *)(a1 + 1032) = v355;
    *(_QWORD *)(a1 + 1040) = v357;
    *(_QWORD *)(a1 + 1048) = v363;
    *(_QWORD *)(a1 + 1056) = v373;
    *(_QWORD *)(a1 + 1064) = v383;
    *(_QWORD *)(a1 + 1072) = v393;
    *(_QWORD *)(a1 + 1080) = v403;
    *(_QWORD *)(a1 + 1088) = v413;
    *(_QWORD *)(a1 + 1096) = v423;
    *v277 = v428;
    sub_21421BA80(v278, v279, v280, v281, v282, v283, v284, v285, v286, *((uint64_t *)&v286 + 1), v287, BYTE8(v287));
  }
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(v426 + 831);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a2 + 1160);
  *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(a2 + 1176);
  v296 = v425[14];
  v297 = a1 + v296;
  v298 = a2 + v296;
  v299 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v299 - 8) + 24))(v297, v298, v299);
  *(_QWORD *)(a1 + v425[15]) = *(_QWORD *)(a2 + v425[15]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v425[16]) = *(_QWORD *)(a2 + v425[16]);
  swift_retain();
  swift_release();
  v300 = v425[17];
  v301 = a1 + v300;
  v302 = (__int128 *)(a2 + v300);
  v303 = *(unsigned __int8 *)(a1 + v300 + 40);
  v304 = *(unsigned __int8 *)(a2 + v300 + 40);
  if (v303 == 255)
  {
    if (v304 == 255)
    {
      v307 = *v302;
      v308 = v302[1];
      *(_OWORD *)(v301 + 25) = *(__int128 *)((char *)v302 + 25);
      *(_OWORD *)v301 = v307;
      *(_OWORD *)(v301 + 16) = v308;
      goto LABEL_141;
    }
    if ((v304 & 1) != 0)
      goto LABEL_138;
LABEL_140:
    v310 = *((_QWORD *)v302 + 3);
    *(_QWORD *)(v301 + 24) = v310;
    *(_QWORD *)(v301 + 32) = *((_QWORD *)v302 + 4);
    (**(void (***)(uint64_t, __int128 *))(v310 - 8))(v301, v302);
    *(_BYTE *)(v301 + 40) = 0;
    goto LABEL_141;
  }
  if (v304 == 255)
  {
    sub_2141E61B0(v301);
    v305 = *(__int128 *)((char *)v302 + 25);
    v306 = v302[1];
    *(_OWORD *)v301 = *v302;
    *(_OWORD *)(v301 + 16) = v306;
    *(_OWORD *)(v301 + 25) = v305;
    goto LABEL_141;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(v301);
    if ((*((_BYTE *)v302 + 40) & 1) != 0)
    {
LABEL_138:
      v309 = *((_QWORD *)v302 + 3);
      *(_QWORD *)(v301 + 24) = v309;
      *(_QWORD *)(v301 + 32) = *((_QWORD *)v302 + 4);
      (**(void (***)(uint64_t, __int128 *))(v309 - 8))(v301, v302);
      *(_BYTE *)(v301 + 40) = 1;
      goto LABEL_141;
    }
    goto LABEL_140;
  }
LABEL_141:
  v311 = (__int128 *)(v301 + 48);
  v312 = v302 + 3;
  v313 = *((unsigned __int8 *)v302 + 88);
  if (*(unsigned __int8 *)(v301 + 88) == 255)
  {
    if (v313 == 255)
    {
      v316 = *v312;
      v317 = v302[4];
      *(_OWORD *)(v301 + 73) = *(__int128 *)((char *)v302 + 73);
      *v311 = v316;
      *(_OWORD *)(v301 + 64) = v317;
      goto LABEL_151;
    }
    goto LABEL_148;
  }
  if (v313 == 255)
  {
    sub_2141E625C(v301 + 48);
    v314 = *(__int128 *)((char *)v302 + 73);
    v315 = v302[4];
    *v311 = *v312;
    *(_OWORD *)(v301 + 64) = v315;
    *(_OWORD *)(v301 + 73) = v314;
    goto LABEL_151;
  }
  if (a1 != a2)
  {
    sub_2141E625C(v301 + 48);
    LOBYTE(v313) = *((_BYTE *)v302 + 88);
LABEL_148:
    v318 = *((_QWORD *)v302 + 9);
    *(_QWORD *)(v301 + 72) = v318;
    *(_QWORD *)(v301 + 80) = *((_QWORD *)v302 + 10);
    (**(void (***)(uint64_t, uint64_t))(v318 - 8))(v301 + 48, (uint64_t)(v302 + 3));
    *(_BYTE *)(v301 + 88) = (v313 & 1) != 0;
  }
LABEL_151:
  v319 = (__int128 *)(v301 + 96);
  v320 = v302 + 6;
  v321 = *((unsigned __int8 *)v302 + 136);
  if (*(unsigned __int8 *)(v301 + 136) == 255)
  {
    if (v321 == 255)
    {
      v324 = *v320;
      v325 = v302[7];
      *(_OWORD *)(v301 + 121) = *(__int128 *)((char *)v302 + 121);
      *v319 = v324;
      *(_OWORD *)(v301 + 112) = v325;
      goto LABEL_161;
    }
    goto LABEL_158;
  }
  if (v321 == 255)
  {
    sub_2141E61B0(v301 + 96);
    v322 = *(__int128 *)((char *)v302 + 121);
    v323 = v302[7];
    *v319 = *v320;
    *(_OWORD *)(v301 + 112) = v323;
    *(_OWORD *)(v301 + 121) = v322;
    goto LABEL_161;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(v301 + 96);
    LOBYTE(v321) = *((_BYTE *)v302 + 136);
LABEL_158:
    v326 = *((_QWORD *)v302 + 15);
    *(_QWORD *)(v301 + 120) = v326;
    *(_QWORD *)(v301 + 128) = *((_QWORD *)v302 + 16);
    (**(void (***)(uint64_t, uint64_t))(v326 - 8))(v301 + 96, (uint64_t)(v302 + 6));
    *(_BYTE *)(v301 + 136) = (v321 & 1) != 0;
  }
LABEL_161:
  v327 = (__int128 *)(v301 + 144);
  v328 = v302 + 9;
  v329 = *((unsigned __int8 *)v302 + 184);
  if (*(unsigned __int8 *)(v301 + 184) == 255)
  {
    if (v329 == 255)
    {
      v332 = *v328;
      v333 = v302[10];
      *(_OWORD *)(v301 + 169) = *(__int128 *)((char *)v302 + 169);
      *v327 = v332;
      *(_OWORD *)(v301 + 160) = v333;
      goto LABEL_171;
    }
    goto LABEL_168;
  }
  if (v329 == 255)
  {
    sub_2141E625C(v301 + 144);
    v330 = *(__int128 *)((char *)v302 + 169);
    v331 = v302[10];
    *v327 = *v328;
    *(_OWORD *)(v301 + 160) = v331;
    *(_OWORD *)(v301 + 169) = v330;
    goto LABEL_171;
  }
  if (a1 != a2)
  {
    sub_2141E625C(v301 + 144);
    LOBYTE(v329) = *((_BYTE *)v302 + 184);
LABEL_168:
    v334 = *((_QWORD *)v302 + 21);
    *(_QWORD *)(v301 + 168) = v334;
    *(_QWORD *)(v301 + 176) = *((_QWORD *)v302 + 22);
    (**(void (***)(uint64_t, uint64_t))(v334 - 8))(v301 + 144, (uint64_t)(v302 + 9));
    *(_BYTE *)(v301 + 184) = (v329 & 1) != 0;
  }
LABEL_171:
  v335 = (__int128 *)(v301 + 192);
  v336 = v302 + 12;
  v337 = *((unsigned __int8 *)v302 + 232);
  if (*(unsigned __int8 *)(v301 + 232) == 255)
  {
    if (v337 == 255)
    {
      v340 = *v336;
      v341 = v302[13];
      *(_OWORD *)(v301 + 217) = *(__int128 *)((char *)v302 + 217);
      *v335 = v340;
      *(_OWORD *)(v301 + 208) = v341;
      goto LABEL_181;
    }
    goto LABEL_178;
  }
  if (v337 == 255)
  {
    sub_2141E61B0(v301 + 192);
    v338 = *(__int128 *)((char *)v302 + 217);
    v339 = v302[13];
    *v335 = *v336;
    *(_OWORD *)(v301 + 208) = v339;
    *(_OWORD *)(v301 + 217) = v338;
    goto LABEL_181;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(v301 + 192);
    LOBYTE(v337) = *((_BYTE *)v302 + 232);
LABEL_178:
    v342 = *((_QWORD *)v302 + 27);
    *(_QWORD *)(v301 + 216) = v342;
    *(_QWORD *)(v301 + 224) = *((_QWORD *)v302 + 28);
    (**(void (***)(uint64_t, uint64_t))(v342 - 8))(v301 + 192, (uint64_t)(v302 + 12));
    *(_BYTE *)(v301 + 232) = (v337 & 1) != 0;
  }
LABEL_181:
  v343 = (__int128 *)(v301 + 240);
  v344 = v302 + 15;
  v345 = (_BYTE *)(v301 + 280);
  v346 = *((unsigned __int8 *)v302 + 280);
  if (*(unsigned __int8 *)(v301 + 280) == 255)
  {
    if (v346 == 255)
    {
      v349 = *v344;
      v350 = v302[16];
      *(_OWORD *)(v301 + 265) = *(__int128 *)((char *)v302 + 265);
      *v343 = v349;
      *(_OWORD *)(v301 + 256) = v350;
      goto LABEL_191;
    }
    v353 = *((_QWORD *)v302 + 33);
    *(_QWORD *)(v301 + 264) = v353;
    *(_QWORD *)(v301 + 272) = *((_QWORD *)v302 + 34);
    (**(void (***)(uint64_t, uint64_t))(v353 - 8))(v301 + 240, (uint64_t)(v302 + 15));
    if ((v346 & 1) != 0)
    {
LABEL_188:
      *v345 = 1;
      goto LABEL_191;
    }
LABEL_190:
    *v345 = 0;
    goto LABEL_191;
  }
  if (v346 != 255)
  {
    if (a1 == a2)
      goto LABEL_191;
    sub_2141E625C(v301 + 240);
    v351 = *((_BYTE *)v302 + 280);
    v352 = *((_QWORD *)v302 + 33);
    *(_QWORD *)(v301 + 264) = v352;
    *(_QWORD *)(v301 + 272) = *((_QWORD *)v302 + 34);
    (**(void (***)(uint64_t, uint64_t))(v352 - 8))(v301 + 240, (uint64_t)(v302 + 15));
    if ((v351 & 1) != 0)
      goto LABEL_188;
    goto LABEL_190;
  }
  sub_2141E625C(v301 + 240);
  v347 = *(__int128 *)((char *)v302 + 265);
  v348 = v302[16];
  *v343 = *v344;
  *(_OWORD *)(v301 + 256) = v348;
  *(_OWORD *)(v301 + 265) = v347;
LABEL_191:
  *(_BYTE *)(v301 + 281) = *((_BYTE *)v302 + 281);
  *(_BYTE *)(v301 + 282) = *((_BYTE *)v302 + 282);
  return a1;
}

uint64_t sub_2142DF104(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x170uLL);
  memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x2C1uLL);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  v7 = a3[14];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  memcpy((void *)(a1 + a3[17]), (const void *)(a2 + a3[17]), 0x11BuLL);
  return a1;
}

uint64_t sub_2142DF1E8(uint64_t a1, uint64_t a2, int *a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  v6 = (_BYTE *)(a2 + 316);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  if (a1 != a2)
  {
    sub_2141E0750(a1 + 32, &qword_253F15AE8);
    memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x11CuLL);
  }
  *(_BYTE *)(a1 + 316) = *v6;
  v7 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 320) = v7;
      *(_QWORD *)(a1 + 328) = v8;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v7;
    *(_QWORD *)(a1 + 328) = v9;
    goto LABEL_10;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
LABEL_10:
  v10 = *(_QWORD *)(a2 + 336);
  if (*(_QWORD *)(a1 + 336))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 336) = v10;
      *(_QWORD *)(a1 + 344) = v11;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = v10;
    *(_QWORD *)(a1 + 344) = v12;
    goto LABEL_17;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_17:
  v13 = *(_QWORD *)(a2 + 352);
  if (*(_QWORD *)(a1 + 352))
  {
    if (v13)
    {
      v14 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = v13;
      *(_QWORD *)(a1 + 360) = v14;
      swift_release();
      goto LABEL_24;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = v13;
    *(_QWORD *)(a1 + 360) = v15;
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
LABEL_24:
  v16 = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 368))
  {
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = v16;
      *(_QWORD *)(a1 + 376) = v17;
      swift_release();
      goto LABEL_31;
    }
    swift_release();
  }
  else if (v16)
  {
    v18 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = v16;
    *(_QWORD *)(a1 + 376) = v18;
    goto LABEL_31;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
LABEL_31:
  v19 = *(_QWORD *)(a2 + 384);
  if (*(_QWORD *)(a1 + 384))
  {
    if (v19)
    {
      v20 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = v19;
      *(_QWORD *)(a1 + 392) = v20;
      swift_release();
      goto LABEL_38;
    }
    swift_release();
  }
  else if (v19)
  {
    v21 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = v19;
    *(_QWORD *)(a1 + 392) = v21;
    goto LABEL_38;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_38:
  if (*(unsigned __int8 *)(a1 + 504) == 255)
  {
LABEL_41:
    v23 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v23;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    v24 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v24;
    v25 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v25;
    goto LABEL_43;
  }
  v22 = *(unsigned __int8 *)(a2 + 504);
  if (v22 == 255)
  {
    sub_2141E0750(a1 + 400, &qword_253F13368);
    goto LABEL_41;
  }
  v26 = *(_QWORD *)(a2 + 496);
  v27 = *(_QWORD *)(a1 + 400);
  v28 = *(_QWORD *)(a1 + 408);
  v29 = *(_QWORD *)(a1 + 416);
  v30 = *(_QWORD *)(a1 + 424);
  v31 = *(_QWORD *)(a1 + 432);
  v32 = *(_QWORD *)(a1 + 440);
  v33 = *(_QWORD *)(a1 + 448);
  v34 = *(_QWORD *)(a1 + 456);
  v35 = *(_OWORD *)(a1 + 464);
  v36 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v36;
  v37 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v37;
  v38 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v38;
  *(_QWORD *)(a1 + 496) = v26;
  *(_BYTE *)(a1 + 504) = v22 & 1;
  sub_21421BB6C(v27, v28, v29, v30, v31, v32, v33, v34, v35);
LABEL_43:
  if (*(unsigned __int8 *)(a1 + 616) == 255)
  {
LABEL_46:
    v40 = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 592) = v40;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    v41 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v41;
    v42 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v42;
    goto LABEL_48;
  }
  v39 = *(unsigned __int8 *)(a2 + 616);
  if (v39 == 255)
  {
    sub_2141E0750(a1 + 512, &qword_253F13368);
    goto LABEL_46;
  }
  v43 = *(_QWORD *)(a2 + 608);
  v44 = *(_QWORD *)(a1 + 512);
  v45 = *(_QWORD *)(a1 + 520);
  v46 = *(_QWORD *)(a1 + 528);
  v47 = *(_QWORD *)(a1 + 536);
  v48 = *(_QWORD *)(a1 + 544);
  v49 = *(_QWORD *)(a1 + 552);
  v50 = *(_QWORD *)(a1 + 560);
  v51 = *(_QWORD *)(a1 + 568);
  v52 = *(_OWORD *)(a1 + 576);
  v53 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v53;
  v54 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v54;
  v55 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v55;
  *(_QWORD *)(a1 + 608) = v43;
  *(_BYTE *)(a1 + 616) = v39 & 1;
  sub_21421BB6C(v44, v45, v46, v47, v48, v49, v50, v51, v52);
LABEL_48:
  if (*(unsigned __int8 *)(a1 + 720) == 255)
  {
LABEL_51:
    v57 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v57;
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    v58 = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 640) = v58;
    v59 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v59;
    goto LABEL_53;
  }
  v56 = *(unsigned __int8 *)(a2 + 720);
  if (v56 == 255)
  {
    sub_2141E0750(a1 + 624, qword_253F10468);
    goto LABEL_51;
  }
  v60 = *(_QWORD *)(a1 + 624);
  v61 = *(_QWORD *)(a1 + 632);
  v62 = *(_QWORD *)(a1 + 640);
  v63 = *(_QWORD *)(a1 + 648);
  v64 = *(_QWORD *)(a1 + 656);
  v65 = *(_QWORD *)(a1 + 664);
  v66 = *(_QWORD *)(a1 + 672);
  v67 = *(_QWORD *)(a1 + 680);
  v68 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v68;
  v69 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v69;
  v70 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = v70;
  *(_BYTE *)(a1 + 720) = v56 & 1;
  sub_21421B8A0(v60, v61, v62, v63, v64, v65, v66, v67);
LABEL_53:
  if (*(unsigned __int8 *)(a1 + 856) == 255)
  {
LABEL_57:
    v71 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v71;
    *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
    v72 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = v72;
    v73 = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 808) = v73;
    v74 = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 744) = v74;
    goto LABEL_58;
  }
  if (*(unsigned __int8 *)(a2 + 856) == 255 || a1 != a2)
  {
    sub_2141E0750(a1 + 728, &qword_254D695C8);
    goto LABEL_57;
  }
LABEL_58:
  if (*(unsigned __int8 *)(a1 + 968) == 255)
  {
LABEL_61:
    v76 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
    *(_OWORD *)(a1 + 944) = v76;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    v77 = *(_OWORD *)(a2 + 880);
    *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
    *(_OWORD *)(a1 + 880) = v77;
    v78 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
    *(_OWORD *)(a1 + 912) = v78;
    goto LABEL_63;
  }
  v75 = *(unsigned __int8 *)(a2 + 968);
  if (v75 == 255)
  {
    sub_2141E0750(a1 + 864, &qword_253F13368);
    goto LABEL_61;
  }
  v79 = *(_QWORD *)(a2 + 960);
  v80 = *(_QWORD *)(a1 + 864);
  v81 = *(_QWORD *)(a1 + 872);
  v82 = *(_QWORD *)(a1 + 880);
  v83 = *(_QWORD *)(a1 + 888);
  v84 = *(_QWORD *)(a1 + 896);
  v85 = *(_QWORD *)(a1 + 904);
  v86 = *(_QWORD *)(a1 + 912);
  v87 = *(_QWORD *)(a1 + 920);
  v88 = *(_OWORD *)(a1 + 928);
  v89 = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v89;
  v90 = *(_OWORD *)(a2 + 912);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 912) = v90;
  v91 = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
  *(_OWORD *)(a1 + 944) = v91;
  *(_QWORD *)(a1 + 960) = v79;
  *(_BYTE *)(a1 + 968) = v75 & 1;
  sub_21421BB6C(v80, v81, v82, v83, v84, v85, v86, v87, v88);
LABEL_63:
  if (*(unsigned __int8 *)(a1 + 1104) == 255)
  {
LABEL_66:
    v93 = *(_OWORD *)(a2 + 1088);
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)(a1 + 1088) = v93;
    *(_BYTE *)(a1 + 1104) = *(_BYTE *)(a2 + 1104);
    v94 = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = v94;
    v95 = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = v95;
    v96 = *(_OWORD *)(a2 + 992);
    *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 992) = v96;
    goto LABEL_68;
  }
  v92 = *(unsigned __int8 *)(a2 + 1104);
  if (v92 == 255)
  {
    sub_2141E0750(a1 + 976, &qword_254D695C0);
    goto LABEL_66;
  }
  v97 = *(_QWORD *)(a1 + 976);
  v98 = *(_QWORD *)(a1 + 984);
  v99 = *(_QWORD *)(a1 + 992);
  v100 = *(_QWORD *)(a1 + 1000);
  v101 = *(_QWORD *)(a1 + 1008);
  v102 = *(_QWORD *)(a1 + 1016);
  v103 = *(_QWORD *)(a1 + 1024);
  v104 = *(_QWORD *)(a1 + 1032);
  v105 = *(_OWORD *)(a1 + 1040);
  v106 = *(_OWORD *)(a1 + 1056);
  v107 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 992) = v107;
  v108 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v108;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_BYTE *)(a1 + 1104) = v92 & 1;
  sub_21421BA80(v97, v98, v99, v100, v101, v102, v103, v104, v105, *((uint64_t *)&v105 + 1), v106, BYTE8(v106));
LABEL_68:
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_BYTE *)(a1 + 1144) = v6[828];
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  v109 = a3[14];
  v110 = a1 + v109;
  v111 = a2 + v109;
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  v112 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 40))(v110, v111, v112);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  swift_release();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_release();
  v113 = a3[17];
  v114 = a1 + v113;
  v115 = a2 + v113;
  if (*(unsigned __int8 *)(a1 + v113 + 40) == 255)
  {
LABEL_72:
    v116 = *(_OWORD *)(v115 + 16);
    *(_OWORD *)v114 = *(_OWORD *)v115;
    *(_OWORD *)(v114 + 16) = v116;
    *(_OWORD *)(v114 + 25) = *(_OWORD *)(v115 + 25);
    goto LABEL_73;
  }
  if (*(unsigned __int8 *)(v115 + 40) == 255 || a1 != a2)
  {
    sub_2141E61B0(v114);
    goto LABEL_72;
  }
LABEL_73:
  if (*(unsigned __int8 *)(v114 + 88) == 255)
  {
LABEL_77:
    v117 = *(_OWORD *)(v115 + 64);
    *(_OWORD *)(v114 + 48) = *(_OWORD *)(v115 + 48);
    *(_OWORD *)(v114 + 64) = v117;
    *(_OWORD *)(v114 + 73) = *(_OWORD *)(v115 + 73);
    goto LABEL_78;
  }
  if (*(unsigned __int8 *)(v115 + 88) == 255 || a1 != a2)
  {
    sub_2141E625C(v114 + 48);
    goto LABEL_77;
  }
LABEL_78:
  if (*(unsigned __int8 *)(v114 + 136) == 255)
  {
LABEL_82:
    v118 = *(_OWORD *)(v115 + 112);
    *(_OWORD *)(v114 + 96) = *(_OWORD *)(v115 + 96);
    *(_OWORD *)(v114 + 112) = v118;
    *(_OWORD *)(v114 + 121) = *(_OWORD *)(v115 + 121);
    goto LABEL_83;
  }
  if (*(unsigned __int8 *)(v115 + 136) == 255 || a1 != a2)
  {
    sub_2141E61B0(v114 + 96);
    goto LABEL_82;
  }
LABEL_83:
  if (*(unsigned __int8 *)(v114 + 184) == 255)
  {
LABEL_87:
    v119 = *(_OWORD *)(v115 + 160);
    *(_OWORD *)(v114 + 144) = *(_OWORD *)(v115 + 144);
    *(_OWORD *)(v114 + 160) = v119;
    *(_OWORD *)(v114 + 169) = *(_OWORD *)(v115 + 169);
    goto LABEL_88;
  }
  if (*(unsigned __int8 *)(v115 + 184) == 255 || a1 != a2)
  {
    sub_2141E625C(v114 + 144);
    goto LABEL_87;
  }
LABEL_88:
  if (*(unsigned __int8 *)(v114 + 232) == 255)
  {
LABEL_92:
    v120 = *(_OWORD *)(v115 + 208);
    *(_OWORD *)(v114 + 192) = *(_OWORD *)(v115 + 192);
    *(_OWORD *)(v114 + 208) = v120;
    *(_OWORD *)(v114 + 217) = *(_OWORD *)(v115 + 217);
    goto LABEL_93;
  }
  if (*(unsigned __int8 *)(v115 + 232) == 255 || a1 != a2)
  {
    sub_2141E61B0(v114 + 192);
    goto LABEL_92;
  }
LABEL_93:
  if (*(unsigned __int8 *)(v114 + 280) == 255)
  {
LABEL_97:
    v121 = *(_OWORD *)(v115 + 256);
    *(_OWORD *)(v114 + 240) = *(_OWORD *)(v115 + 240);
    *(_OWORD *)(v114 + 256) = v121;
    *(_OWORD *)(v114 + 265) = *(_OWORD *)(v115 + 265);
    goto LABEL_98;
  }
  if (*(unsigned __int8 *)(v115 + 280) == 255 || a1 != a2)
  {
    sub_2141E625C(v114 + 240);
    goto LABEL_97;
  }
LABEL_98:
  *(_BYTE *)(v114 + 281) = *(_BYTE *)(v115 + 281);
  *(_BYTE *)(v114 + 282) = *(_BYTE *)(v115 + 282);
  return a1;
}

uint64_t sub_2142DFA58()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142DFA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 320);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_2144240D4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 56), a2, v9);
  }
}

uint64_t sub_2142DFAEC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142DFAF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 320) = a2;
  }
  else
  {
    v7 = sub_2144240D4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ChartModel.Scenegraph()
{
  uint64_t result;

  result = qword_253F13DA0;
  if (!qword_253F13DA0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2142DFBA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2144240D4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2142DFC74()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  sub_21422717C(v0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2142DFCC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v4 = type metadata accessor for ChartModel.Scenegraph();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v16 - v8;
  v10 = *a1;
  v11 = *a2;
  sub_2142DFE74((uint64_t)a1, (uint64_t)&v16 - v8);
  sub_2142DFE74((uint64_t)a2, (uint64_t)v7);
  if (v10 != v11)
  {
    sub_2142DFEB8((uint64_t)v7);
    sub_2142DFEB8((uint64_t)v9);
LABEL_6:
    v14 = 0;
    return v14 & 1;
  }
  v12 = *(int *)(v4 + 60);
  v13 = *(_QWORD *)&v7[v12];
  if (!*(_QWORD *)&v9[v12])
  {
    swift_retain();
    sub_2142DFEB8((uint64_t)v7);
    sub_2142DFEB8((uint64_t)v9);
    if (!v13)
    {
      v14 = 1;
      return v14 & 1;
    }
    swift_release();
    goto LABEL_6;
  }
  if (!v13)
  {
    swift_retain();
    sub_2142DFEB8((uint64_t)v7);
    sub_2142DFEB8((uint64_t)v9);
    swift_release();
    goto LABEL_6;
  }
  type metadata accessor for CGRect(0);
  sub_2141FED10(&qword_253F13B88, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x24BDBD830]);
  swift_retain();
  swift_retain();
  v14 = sub_214424AA0();
  swift_release();
  sub_2142DFEB8((uint64_t)v7);
  sub_2142DFEB8((uint64_t)v9);
  swift_release();
  return v14 & 1;
}

uint64_t sub_2142DFE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142DFEB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2142DFEF4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_2142DFF3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = a1[11];
  v2 = a1[13];
  v6 = a1[12];
  v3 = a1[14];
  v4 = a1[15];
  sub_2142DFFF8(*a1, a1[1], a1[2], a1[3], a1[4]);
  sub_2142DFFF8(v7, v6, v2, v3, v4);
  return a1;
}

uint64_t sub_2142DFFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2142E0034()
{
  return sub_2142DFC74();
}

uint64_t sub_2142E003C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

double sub_2142E0078(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 255;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_2142E009C(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_retain();
  return result;
}

uint64_t sub_2142E00B4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ChartSelectionConfiguration(a2, a1);
  return a2;
}

uint64_t sub_2142E00F0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214425388();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2142E0198(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v14;
  void *v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  _OWORD *v31;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  v11 = *a2;
  if (v7 > 7
    || v10 != 0
    || ((((((v8 + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
     + 32 > 0x18)
  {
    *a1 = v11;
    a1 = (_QWORD *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = a2[1];
    *a1 = v11;
    a1[1] = v14;
    v15 = (void *)(((unint64_t)a1 + v7 + 16) & ~v7);
    v16 = (const void *)(((unint64_t)a2 + v7 + 16) & ~v7);
    v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v17(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
    v18 = ((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v16 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v20 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_QWORD *)(v18 + 8) = v20;
      swift_retain();
    }
    v21 = (_QWORD *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v25 = *(unsigned __int8 *)(v24 + 8);
    swift_bridgeObjectRetain();
    if (v25 > 1)
    {
      v28 = *(_QWORD *)v24;
      *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
      *(_QWORD *)v23 = v28;
    }
    else
    {
      v26 = v25 != 0;
      v27 = *(_QWORD *)v24;
      sub_2141E83F4(v27, v26);
      *(_QWORD *)v23 = v27;
      *(_BYTE *)(v23 + 8) = v26;
    }
    v29 = (_OWORD *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8);
    v30 = v29[1];
    v31 = (_OWORD *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v29;
    v31[1] = v30;
  }
  return a1;
}

uint64_t sub_2142E0388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unsigned int v11;

  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84))
    ++v7;
  v8 = (_QWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v8 >= 0xFFFFFFFFuLL)
    swift_release();
  result = swift_bridgeObjectRelease();
  v10 = ((((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 8);
  if (v11 <= 1)
    return sub_2141E833C(*(_QWORD *)v10, v11 != 0);
  return result;
}

_QWORD *sub_2142E0468(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  _OWORD *v28;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)a1 + v7 + 16) & ~v7);
  v9 = (const void *)(((unint64_t)a2 + v7 + 16) & ~v7);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain();
  if (v10(v9, 1, v5))
  {
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v8, v9, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = ((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v16 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v17 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 8) = v17;
    swift_retain();
  }
  v18 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(unsigned __int8 *)(v21 + 8);
  swift_bridgeObjectRetain();
  if (v22 > 1)
  {
    v25 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    *(_QWORD *)v20 = v25;
  }
  else
  {
    v23 = v22 != 0;
    v24 = *(_QWORD *)v21;
    sub_2141E83F4(v24, v23);
    *(_QWORD *)v20 = v24;
    *(_BYTE *)(v20 + 8) = v23;
  }
  v26 = (_OWORD *)(((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8);
  v27 = v26[1];
  v28 = (_OWORD *)(((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v26;
  v28[1] = v27;
  return a1;
}

_QWORD *sub_2142E05FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  size_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  _OWORD *v36;

  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)a1 + v9 + 16) & ~v9);
  v11 = (void *)(((unint64_t)v4 + v9 + 16) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v4) = v12(v10, 1, v7);
  v13 = v12(v11, 1, v7);
  if ((_DWORD)v4)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v14);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  v16 = (_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (unint64_t *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v17;
  if (*v16 < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      v20 = v17[1];
      *v16 = v18;
      v16[1] = v20;
      swift_retain();
      goto LABEL_20;
    }
  }
  else
  {
    if (v18 >= 0xFFFFFFFF)
    {
      v19 = v17[1];
      *v16 = v18;
      v16[1] = v19;
      swift_retain();
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v16 = *(_OWORD *)v17;
LABEL_20:
  v21 = (_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(unsigned __int8 *)(v23 + 8);
  v26 = *(unsigned __int8 *)(v24 + 8);
  if (v25 > 1)
  {
    if (v26 <= 1)
    {
      v31 = v26 != 0;
      v32 = *(_QWORD *)v24;
      sub_2141E83F4(v32, v26 != 0);
      *(_QWORD *)v23 = v32;
      *(_BYTE *)(v23 + 8) = v31;
      goto LABEL_27;
    }
LABEL_26:
    v33 = *(_QWORD *)v24;
    *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
    *(_QWORD *)v23 = v33;
    goto LABEL_27;
  }
  if (v26 > 1)
  {
    sub_2141E833C(*(_QWORD *)v23, v25 & 1);
    goto LABEL_26;
  }
  v27 = v26 != 0;
  v28 = *(_QWORD *)v24;
  sub_2141E83F4(v28, v26 != 0);
  v29 = *(_QWORD *)v23;
  v30 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v28;
  *(_BYTE *)(v23 + 8) = v27;
  sub_2141E833C(v29, v30);
LABEL_27:
  v34 = (_OWORD *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  v35 = v34[1];
  v36 = (_OWORD *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v34;
  v36[1] = v35;
  return a1;
}

_OWORD *sub_2142E088C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = ((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v16 = (_QWORD *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_OWORD *)(((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  return a1;
}

_OWORD *sub_2142E09DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  _OWORD *v31;

  v4 = a2;
  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)a1 + v8 + 16) & ~v8);
  v10 = (void *)(((unint64_t)v4 + v8 + 16) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v4) = v11(v9, 1, v6);
  v12 = v11(v10, 1, v6);
  if ((_DWORD)v4)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v13);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  v15 = (_QWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = (unint64_t *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v16;
  if (*v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v19 = v16[1];
      *v15 = v17;
      v15[1] = v19;
      goto LABEL_20;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v18 = v16[1];
      *v15 = v17;
      v15[1] = v18;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
LABEL_20:
  v20 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  swift_bridgeObjectRelease();
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(unsigned __int8 *)(v22 + 8);
  if (v24 > 1)
  {
LABEL_24:
    v28 = *(_QWORD *)v23;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
    *(_QWORD *)v22 = v28;
    goto LABEL_25;
  }
  v25 = *(unsigned __int8 *)(v23 + 8);
  v26 = v24 & 1;
  if (v25 > 1)
  {
    sub_2141E833C(*(_QWORD *)v22, v26);
    goto LABEL_24;
  }
  v27 = *(_QWORD *)v22;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v25 != 0;
  sub_2141E833C(v27, v26);
LABEL_25:
  v29 = (_OWORD *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  v30 = v29[1];
  v31 = (_OWORD *)(((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v29;
  v31[1] = v30;
  return a1;
}

uint64_t sub_2142E0C14(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 31) & 0xFFFFFFFFFFFFFFF8)
         + 32) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v9 + 16) & ~v9);
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  else
  {
    v14 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
}

void sub_2142E0D6C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 31) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((((v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 31) & 0xFFFFFFFFFFFFFFF8)+ 32);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_2142E0E88@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t result;

  *((_BYTE *)v14 + v15) = 0;
  if (a1)
  {
    if ((v11 & 0x80000000) != 0)
    {
      v17 = (void *)(((unint64_t)v14 + v13 + 16) & v10);
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v18 = a2;
        else
          v18 = 4;
        bzero(v17, a2);
        __asm { BR              X10 }
      }
    }
    else
    {
      if ((a1 & 0x80000000) != 0)
      {
        v16 = a1 ^ 0x80000000;
        v14[1] = 0;
      }
      else
      {
        v16 = a1 - 1;
      }
      *v14 = v16;
    }
  }
  return result;
}

void sub_2142E0F7C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_2142E0F84()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_2142E0F94()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for ConcreteScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteScale);
}

uint64_t sub_2142E0FAC()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t sub_2142E0FCC(uint64_t a1)
{
  void (**v1)(_QWORD *);
  uint64_t v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD v6[4];

  MEMORY[0x24BDAC7A8](a1);
  v3 = *v1;
  (*(void (**)(char *))(v4 + 16))((char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_dynamicCast();
  v6[0] = v6[2];
  v6[1] = v6[3];
  v3(v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2142E107C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (**v4)(uint64_t *);
  uint64_t (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;
  uint64_t v10;

  v5 = *v4;
  v6 = sub_214400B9C(a1, a3, a4);
  if (v8 >= 2u)
  {
    result = sub_2141E60B8(v6, v7, 2);
    __break(1u);
  }
  else
  {
    v10 = v6;
    return v5(&v10);
  }
  return result;
}

uint64_t sub_2142E10E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v24, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v24 == 14)
  {
    MEMORY[0x24BDAC7A8](v14);
    v18 = *(_QWORD *)(a3 + 24);
    v19 = a4;
    v20 = a5;
    v21 = a6;
    v22 = v6;
    v23 = a2;
    return sub_2141D0320((void (*)(char *, char *))sub_2142E5760, (uint64_t)&v17, a4, v18, MEMORY[0x24BEE4078], *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8), MEMORY[0x24BEE40A8], v15);
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2142E125C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (**v7)(_QWORD *);
  void (*v8)(_QWORD *);
  uint64_t AssociatedTypeWitness;
  _QWORD v11[2];
  _QWORD v12[2];

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v11 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE0D00], (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v11[0] = v12[0];
  v11[1] = v12[1];
  v8(v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2142E1368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[13];
  uint64_t v22;

  v21[11] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v22, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v22 == 13)
  {
    MEMORY[0x24BDAC7A8](v17);
    v21[2] = *(_QWORD *)(a5 + 24);
    v21[3] = a6;
    v21[4] = a7;
    v21[5] = a8;
    v21[6] = a2;
    v21[7] = a3;
    v21[8] = a4;
    v21[9] = v21[10];
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return sub_2141D0320((void (*)(char *, char *))sub_2142E59A8, (uint64_t)v21, a6, TupleTypeMetadata2, MEMORY[0x24BEE4078], *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8), MEMORY[0x24BEE40A8], v19);
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2142E1508(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (**a5)(uint64_t *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *);
  uint64_t v23;
  uint64_t v24;

  v12 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v23 - v14;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_214400BB8((uint64_t)v15, a3, a4, AssociatedTypeWitness, v12, a8);
  v18 = v17;
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_getTupleTypeMetadata2();
  v21 = *a5;
  v24 = v18;
  v21(&v24);
  v24 = v20;
  return ((uint64_t (*)(uint64_t *))v21)(&v24);
}

void sub_2142E1650()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  __asm { BR              X10 }
}

uint64_t sub_2142E171C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v10 = *(_QWORD *)(v6 + 24);
  v11 = v1;
  v12 = v5;
  v13 = v2;
  v14 = v4;
  v15 = v3;
  return sub_2141D0320((void (*)(char *, char *))sub_2142E5954, (uint64_t)&v9, v1, v10, MEMORY[0x24BEE4078], *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), MEMORY[0x24BEE40A8], v7);
}

void sub_2142E1B14()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_2142E1B58(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (**v11)(uint64_t *);
  uint64_t (*v12)(uint64_t *);
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v7 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v17 - v9;
  v12 = *v11;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_214400994((uint64_t)v10, AssociatedTypeWitness, v7, a6);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = v15;
  return v12(&v18);
}

uint64_t sub_2142E1C4C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(uint64_t *);
  uint64_t (*v8)(uint64_t *);
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v11 = v12;
  return v8(&v11);
}

uint64_t sub_2142E1D50(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t AssociatedTypeWitness;
  double v11;
  char v12;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE3E50], (uint64_t)&v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v11 = (double)v12;
  return v8(&v11);
}

uint64_t sub_2142E1E58(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  double v12;
  unsigned __int16 v13;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE3F30], (uint64_t)&v13);
  v10 = ((__n128 (*)(char *, uint64_t))*(_QWORD *)(v4 + 8))(v6, v3);
  v10.n128_u16[0] = v13;
  v12 = (double)vmovl_s16((int16x4_t)v10.n128_u64[0]).i32[0];
  return v8(&v12);
}

uint64_t sub_2142E1F68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t AssociatedTypeWitness;
  double v11;
  int v12;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE3F88], (uint64_t)&v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v11 = (double)v12;
  return v8(&v11);
}

uint64_t sub_2142E2074(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (**v13)(double *);
  uint64_t (*v14)(double *);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  double v18;

  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v17 - v11;
  v14 = *v13;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v12, AssociatedTypeWitness, a9, (uint64_t)&v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v18 = (double)*(uint64_t *)&v18;
  return v14(&v18);
}

uint64_t sub_2142E2180(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  double v12;
  unsigned __int8 v13;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE4260], (uint64_t)&v13);
  v10 = ((__n128 (*)(char *, uint64_t))*(_QWORD *)(v4 + 8))(v6, v3);
  v10.n128_u8[0] = v13;
  v12 = (double)v10.n128_u64[0];
  return v8(&v12);
}

uint64_t sub_2142E2288(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  double v12;
  unsigned __int16 v13;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE4478], (uint64_t)&v13);
  v10 = ((__n128 (*)(char *, uint64_t))*(_QWORD *)(v4 + 8))(v6, v3);
  v10.n128_u16[0] = v13;
  v12 = (double)v10.n128_u64[0];
  return v8(&v12);
}

uint64_t sub_2142E2390(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  double v12;
  unsigned __int32 v13;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE44F0], (uint64_t)&v13);
  v10 = ((__n128 (*)(char *, uint64_t))*(_QWORD *)(v4 + 8))(v6, v3);
  v10.n128_u32[0] = v13;
  v12 = (double)v10.n128_u64[0];
  return v8(&v12);
}

uint64_t sub_2142E2498(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (**v13)(double *);
  uint64_t (*v14)(double *);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  double v18;

  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v17 - v11;
  v14 = *v13;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v12, AssociatedTypeWitness, a9, (uint64_t)&v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v18 = (double)*(unint64_t *)&v18;
  return v14(&v18);
}

uint64_t sub_2142E25A4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t AssociatedTypeWitness;
  double v11;
  float v12;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE14E8], (uint64_t)&v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v11 = v12;
  return v8(&v11);
}

uint64_t sub_2142E26AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (**v7)(uint64_t *);
  uint64_t (*v8)(uint64_t *);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  __int16 v18;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v17 - v5;
  v8 = *v7;
  swift_getAtKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404((uint64_t)v6, AssociatedTypeWitness, MEMORY[0x24BEE4678], (uint64_t)&v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _H0 = v18;
  __asm { FCVT            D0, H0 }
  v17 = _D0;
  return v8(&v17);
}

void sub_2142E27B4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t AssociatedConformanceWitness;
  void (*v86)(uint64_t *__return_ptr, uint64_t, uint64_t);
  _QWORD v87[43];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t AssociatedTypeWitness;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v97 = a7;
  v92 = a5;
  v87[21] = a1;
  v91 = a2;
  v8 = *a2;
  v100 = *(_QWORD *)(a3 + 24);
  v87[18] = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v87[17] = (char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v88 = sub_214425388();
  v87[26] = *(_QWORD *)(v88 - 8);
  v12 = MEMORY[0x24BDAC7A8](v88);
  v87[25] = (char *)v87 - v13;
  v101 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v87[16] = (char *)v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v90 = *(_QWORD *)(*(_QWORD *)(v8 + *MEMORY[0x24BEE46A8] + 8) - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v98 = *(_QWORD *)(*v18 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = sub_214425388();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v87[14] = (char *)v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v87[13] = (char *)v87 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v87[12] = (char *)v87 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v87[11] = (char *)v87 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v87[1] = (char *)v87 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v87[10] = (char *)v87 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v87[9] = (char *)v87 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v87[8] = (char *)v87 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v87[7] = (char *)v87 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v87[6] = (char *)v87 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v87[5] = (char *)v87 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v87[4] = (char *)v87 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v87[3] = (char *)v87 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v87[2] = (char *)v87 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v87[19] = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v87[20] = (char *)v87 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87[27] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v97 + 8) + 8) + 8);
  v93 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v87[24] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v50 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v87[42] = (char *)v87 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x24BDAC7A8](v50);
  v87[41] = (char *)v87 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v87[40] = (char *)v87 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v87[39] = (char *)v87 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v87[28] = (char *)v87 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v87[38] = (char *)v87 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v87[37] = (char *)v87 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v87[36] = (char *)v87 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v87[35] = (char *)v87 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v87[34] = (char *)v87 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v87[33] = (char *)v87 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v87[32] = (char *)v87 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  v87[31] = (char *)v87 - v75;
  v76 = MEMORY[0x24BDAC7A8](v74);
  v87[30] = (char *)v87 - v77;
  MEMORY[0x24BDAC7A8](v76);
  v87[29] = (char *)v87 - v78;
  v79 = swift_allocObject();
  *(_QWORD *)(v79 + 16) = sub_2143309C4();
  v87[23] = v79 + 16;
  v96 = v79;
  *(_QWORD *)(v79 + 24) = v80;
  v81 = swift_allocObject();
  v95 = v81;
  *(_QWORD *)(v81 + 16) = 1;
  v87[15] = v81 + 16;
  v94 = swift_allocBox();
  v82 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
  v87[22] = v83;
  v82(v83, 1, 1, v11);
  v84 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v86 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v89 = v84;
  v86(&v102, v84, AssociatedConformanceWitness);
  __asm { BR              X10 }
}

uint64_t sub_2142E2F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *);
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v6 - 488) + 16))(*(_QWORD *)(v6 - 480), *(_QWORD *)(v6 - 472), *(_QWORD *)(v6 - 256));
  sub_214424F38();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = *(_QWORD *)(v6 - 616);
  sub_214425394();
  v9 = *(_QWORD *)(v6 - 208);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  *(_QWORD *)(v6 - 320) = v10;
  if (v10(v8, 1, v5) == 1)
  {
    v11 = *(_QWORD *)(v6 - 392);
    v12 = *(_QWORD *)(v6 - 184);
    v13 = *(void (***)(char *))(v6 - 248);
  }
  else
  {
    *(_QWORD *)(v6 - 304) = *(_QWORD *)(v9 + 32);
    v13 = *(void (***)(char *))(v6 - 248);
    *(_QWORD *)(v6 - 312) = AssociatedConformanceWitness;
    v14 = v8;
    v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 - 320);
    do
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 304))(v3, v14, v5);
      swift_getAtKeyPath();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 208) + 8))(v3, v5);
      sub_2143FB404(v2, *(_QWORD *)(v6 - 288), MEMORY[0x24BEE3E50], v6 - 128);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 280) + 8))(v2, v1);
      *(double *)(v6 - 128) = (double)*(char *)(v6 - 128);
      swift_dynamicCast();
      sub_2142E5194(v4, *(_QWORD *)(v6 - 240), *(_QWORD *)(v6 - 232), *(_QWORD *)(v6 - 224), v13, v0, *(_QWORD *)(v6 - 192), v1, *(_QWORD *)(v6 - 256), *(_QWORD *)(v6 - 264));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 8))(v4, v0);
      sub_214425394();
      v13 = *(void (***)(char *))(v6 - 248);
    }
    while (v15(v14, 1, v5) != 1);
    v11 = *(_QWORD *)(v6 - 392);
    v12 = *(_QWORD *)(v6 - 184);
  }
  v16 = *(_QWORD *)(v6 - 296);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 448) + 8))(v11, *(_QWORD *)(v6 - 200));
  v17 = *(_QWORD *)(v6 - 464);
  swift_beginAccess();
  v18 = *(_QWORD *)(v6 - 432);
  v19 = *(_QWORD *)(v6 - 440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v19, v17, v16);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v19, 1, v0);
  v21 = *(_QWORD *)(v6 - 192);
  if (v20 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v16);
  }
  else
  {
    v23 = *(char **)(v6 - 512);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v23, v19, v0);
    v24 = *(_QWORD *)(v6 - 504);
    (*v13)(v23);
    v25 = *(uint64_t **)(v6 - 520);
    swift_beginAccess();
    v26 = *v25;
    swift_beginAccess();
    v29 = type metadata accessor for RepeatedValueCollection(0, v21, v27, v28);
    sub_2143309E8(v24, v26, v29);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 496) + 8))(v24, v21);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v0);
  }
  v22 = *(_QWORD *)(v6 - 224);
  swift_beginAccess();
  v30 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  swift_release();
  return v30;
}

uint64_t sub_2142E5158()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2142E5184()
{
  return swift_deallocObject();
}

uint64_t sub_2142E5194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  char v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[2];
  void (**v58)(char *);
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  void (*v66)(char *, _QWORD, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;

  v58 = a5;
  v57[1] = a4;
  v73 = a3;
  v62 = a7;
  v61 = *(_QWORD *)(a7 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v60 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD **)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v12);
  v59 = (char *)v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v57[0] = (char *)v57 - v18;
  v19 = sub_214425388();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v63 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v21 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v23 = (char *)v57 - v22;
  v24 = *(_QWORD *)(v19 - 8);
  v25 = MEMORY[0x24BDAC7A8](v21);
  v67 = (char *)v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v69 = (char *)v57 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v57 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)v57 - v32;
  v34 = swift_projectBox();
  v71 = (uint64_t *)(v73 + 16);
  v35 = (void (*)(char *, uint64_t, uint64_t))v15[2];
  v68 = a1;
  v65 = v35;
  v35(v33, a1, a6);
  v66 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v15[7];
  v66(v33, 0, 1, a6);
  swift_beginAccess();
  v64 = TupleTypeMetadata2;
  v36 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
  v37 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v37(v23, v33, v19);
  v73 = v34;
  v37(v36, (char *)v34, v19);
  v72 = v15;
  v38 = (unsigned int (*)(char *, uint64_t, uint64_t))v15[6];
  if (v38(v23, 1, a6) != 1)
  {
    v70 = v24;
    v37(v31, v23, v19);
    if (v38(v36, 1, a6) != 1)
    {
      v64 = a10;
      v41 = v57[0];
      ((void (*)(_QWORD, char *, uint64_t))v72[4])(v57[0], v36, a6);
      v42 = sub_214424ED8();
      v43 = (void (*)(uint64_t, uint64_t))v72[1];
      v43(v41, a6);
      v39 = *(void (**)(char *, uint64_t))(v70 + 8);
      v39(v33, v19);
      v43((uint64_t)v31, a6);
      v39(v23, v19);
      v40 = v71;
      v33 = v69;
      if ((v42 & 1) == 0)
        goto LABEL_12;
      goto LABEL_9;
    }
    v39 = *(void (**)(char *, uint64_t))(v70 + 8);
    v39(v33, v19);
    ((void (*)(char *, uint64_t))v72[1])(v31, a6);
LABEL_7:
    v40 = v71;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v23, v64);
    v33 = v69;
    goto LABEL_12;
  }
  v39 = *(void (**)(char *, uint64_t))(v24 + 8);
  v39(v33, v19);
  if (v38(v36, 1, a6) != 1)
  {
    v70 = v24;
    goto LABEL_7;
  }
  v39(v23, v19);
  v40 = v71;
LABEL_9:
  result = swift_beginAccess();
  v45 = *v40 + 1;
  if (!__OFADD__(*v40, 1))
    goto LABEL_16;
  __break(1u);
LABEL_12:
  v46 = v73;
  swift_beginAccess();
  v37(v33, (char *)v46, v19);
  if (v38(v33, 1, a6) == 1)
  {
    v39(v33, v19);
  }
  else
  {
    v47 = v72;
    v48 = v59;
    ((void (*)(char *, char *, uint64_t))v72[4])(v59, v33, a6);
    v49 = (uint64_t)v60;
    (*v58)(v48);
    swift_beginAccess();
    v50 = *v40;
    swift_beginAccess();
    v51 = v62;
    v54 = type metadata accessor for RepeatedValueCollection(0, v62, v52, v53);
    sub_2143309E8(v49, v50, v54);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v49, v51);
    ((void (*)(char *, uint64_t))v47[1])(v48, a6);
  }
  v55 = v67;
  v65(v67, v68, a6);
  v45 = 1;
  v66(v55, 0, 1, a6);
  v56 = v73;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v70 + 40))(v56, v55, v19);
  result = swift_beginAccess();
LABEL_16:
  *v40 = v45;
  return result;
}

uint64_t sub_2142E5760(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E125C);
}

uint64_t sub_2142E577C(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E26AC);
}

uint64_t sub_2142E5798(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;

  return a3(a1, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5], a2);
}

uint64_t sub_2142E57C0(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E25A4);
}

uint64_t sub_2142E57DC(uint64_t a1, uint64_t a2)
{
  return sub_2142E5808(a1, a2, MEMORY[0x24BEE1E88], (uint64_t)&protocol witness table for UInt, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_2142E2498);
}

uint64_t sub_2142E5808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v5;

  return a5(a1, v5[6], v5[7], v5[2], v5[3], v5[4], v5[5], a2, a3, a4);
}

uint64_t sub_2142E5844(uint64_t a1, uint64_t a2)
{
  return sub_2142E5808(a1, a2, MEMORY[0x24BEE4568], (uint64_t)&protocol witness table for UInt64, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_2142E2498);
}

uint64_t sub_2142E5870(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E2390);
}

uint64_t sub_2142E588C(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E2288);
}

uint64_t sub_2142E58A8(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E2180);
}

uint64_t sub_2142E58C4(uint64_t a1, uint64_t a2)
{
  return sub_2142E5808(a1, a2, MEMORY[0x24BEE1768], (uint64_t)&protocol witness table for Int, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_2142E2074);
}

uint64_t sub_2142E58F0(uint64_t a1, uint64_t a2)
{
  return sub_2142E5808(a1, a2, MEMORY[0x24BEE4008], (uint64_t)&protocol witness table for Int64, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_2142E2074);
}

uint64_t sub_2142E591C(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E1F68);
}

uint64_t sub_2142E5938(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E1E58);
}

uint64_t sub_2142E5954(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E1D50);
}

uint64_t sub_2142E5970(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E1C4C);
}

uint64_t sub_2142E598C(uint64_t a1, uint64_t a2)
{
  return sub_2142E5798(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2142E1B58);
}

uint64_t sub_2142E59A8(uint64_t a1)
{
  uint64_t v1;

  return sub_2142E1508(a1, *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void (***)(uint64_t *))(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_2142E59DC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_2142E59E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_2141E83F4(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_2142E5A2C(uint64_t a1)
{
  return sub_2141E833C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_2142E5A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_2141E83F4(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_2141E833C(v5, v6);
  return a1;
}

uint64_t sub_2142E5A8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_2141E833C(v5, v6);
  return a1;
}

uint64_t type metadata accessor for ConcreteScaleRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteScaleRange);
}

uint64_t sub_2142E5AD8@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  double v18;
  double v19;
  uint64_t result;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t *v22;
  uint64_t *v23;
  _QWORD v24[2];

  v6 = sub_2144239C0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_214423B94();
  MEMORY[0x24BDAC7A8](v10);
  v11 = sub_2141D8BF8(qword_253F13A80);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v24 - v16;
  if (a3 - a2 <= COERCE_DOUBLE(1))
  {
    sub_214423B7C();
    sub_2142B585C();
    sub_21442396C();
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = sub_2141D9054((unint64_t *)&qword_253F12438, qword_253F13A80, MEMORY[0x24BDCD4C0]);
    v23 = sub_2141D8DD8((uint64_t *)a1);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(v23, v17, v11);
    *(_BYTE *)(a1 + 40) = 0;
    v21 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
    return v21(v17, v11);
  }
  v18 = ceil(-log10((a3 - a2) / 100.0));
  if (v18 > 0.0)
    v19 = v18;
  else
    v19 = 0.0;
  sub_214423B7C();
  sub_2142B585C();
  result = sub_21442396C();
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v19 < 9.22337204e18)
  {
    v24[1] = (uint64_t)v19;
    sub_2141D8BF8(&qword_253F12698);
    sub_2141D9054(&qword_253F12690, &qword_253F12698, MEMORY[0x24BEE30C8]);
    sub_2144239B4();
    MEMORY[0x2199CB2A0](v9, v11);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v21 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
    v21(v15, v11);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = sub_2141D9054((unint64_t *)&qword_253F12438, qword_253F13A80, MEMORY[0x24BDCD4C0]);
    v22 = sub_2141D8DD8((uint64_t *)a1);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(v22, v17, v11);
    *(_BYTE *)(a1 + 40) = 0;
    return v21(v17, v11);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_2142E5DBC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, _QWORD, uint64_t);
  char *v72;
  uint64_t v73;
  char v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, _QWORD, uint64_t);
  char *v105;
  uint64_t v106;
  char v107;
  char v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char v121;
  char v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char v135;
  char v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  void (*v152)(char *, uint64_t);
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void (*v168)(uint64_t, _QWORD, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;

  v214 = a3;
  v212 = a2;
  *(_QWORD *)&v213 = a1;
  v207 = a4;
  v173 = sub_214423A68();
  v172 = *(_QWORD *)(v173 - 8);
  MEMORY[0x24BDAC7A8](v173);
  v171 = (char *)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_214423B10();
  v177 = *(_QWORD *)(v178 - 8);
  MEMORY[0x24BDAC7A8](v178);
  v176 = (char *)&v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_214423AF8();
  v181 = *(_QWORD *)(v182 - 8);
  MEMORY[0x24BDAC7A8](v182);
  v180 = (char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_214423AA4();
  v186 = *(_QWORD *)(v187 - 8);
  MEMORY[0x24BDAC7A8](v187);
  v185 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_214423AB0();
  v189 = *(_QWORD *)(v190 - 8);
  MEMORY[0x24BDAC7A8](v190);
  v188 = (char *)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_214423A80();
  v193 = *(_QWORD *)(v195 - 8);
  MEMORY[0x24BDAC7A8](v195);
  v194 = (char *)&v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_214423AE0();
  v197 = *(_QWORD *)(v199 - 8);
  MEMORY[0x24BDAC7A8](v199);
  v198 = (char *)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_214423AC8();
  v201 = *(_QWORD *)(v203 - 8);
  MEMORY[0x24BDAC7A8](v203);
  v202 = (char *)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_214423960();
  v211 = *(_QWORD *)(v209 - 8);
  v12 = MEMORY[0x24BDAC7A8](v209);
  v175 = (char *)&v167 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v183 = (char *)&v167 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v191 = (char *)&v167 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v196 = (char *)&v167 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v210 = (char *)&v167 - v20;
  v21 = sub_214423B70();
  v215 = *(_QWORD *)(v21 - 8);
  v216 = v21;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v218 = (char *)&v167 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v217 = (char *)&v167 - v24;
  v25 = sub_2144239D8();
  MEMORY[0x24BDAC7A8](v25);
  v26 = sub_214423C6C();
  MEMORY[0x24BDAC7A8](v26);
  v208 = sub_214423C54();
  v27 = *(_QWORD *)(v208 - 8);
  MEMORY[0x24BDAC7A8](v208);
  v29 = (char *)&v167 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_214423B94();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v167 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2141D8BF8(&qword_253F12180);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v167 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_2141D8BF8(&qword_253F12188);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v167 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_214423B34();
  v205 = *(_QWORD *)(v40 - 8);
  v206 = v40;
  v41 = MEMORY[0x24BDAC7A8](v40);
  v170 = (char *)&v167 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x24BDAC7A8](v41);
  v174 = (char *)&v167 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v179 = (char *)&v167 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v184 = (char *)&v167 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v192 = (char *)&v167 - v50;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v200 = (char *)&v167 - v52;
  v53 = MEMORY[0x24BDAC7A8](v51);
  v204 = (char *)&v167 - v54;
  MEMORY[0x24BDAC7A8](v53);
  v56 = (char *)&v167 - v55;
  v57 = sub_214423A08();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v39, 1, 1, v57);
  v58 = sub_2144239FC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v36, 1, 1, v58);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v33, v212, v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v214, v208);
  sub_214423C60();
  sub_2144239CC();
  v212 = v56;
  sub_214423A2C();
  v59 = v216;
  v60 = *(void (**)(char *, uint64_t, uint64_t))(v215 + 16);
  v61 = v213;
  v60(v217, v213, v216);
  v62 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v60(v218, v61 + *(int *)(v62 + 36), v59);
  v63 = sub_2141D8BF8(&qword_253F122A0);
  v64 = sub_214423C48();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(unsigned __int8 *)(v65 + 80);
  v67 = (v66 + 32) & ~v66;
  v68 = (char *)(v67 + *(_QWORD *)(v65 + 72));
  v69 = v66 | 7;
  v70 = swift_allocObject();
  v213 = xmmword_214426EF0;
  *(_OWORD *)(v70 + 16) = xmmword_214426EF0;
  v208 = v67;
  v71 = *(void (**)(uint64_t, _QWORD, uint64_t))(v65 + 104);
  v71(v70 + v67, *MEMORY[0x24BDCF240], v64);
  sub_2143F1544(v70);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v72 = v210;
  sub_214423BD0();
  swift_bridgeObjectRelease();
  v73 = sub_214423924();
  LOBYTE(v67) = v74;
  v75 = *(void (**)(char *, uint64_t))(v211 + 8);
  v76 = v72;
  v77 = v209;
  v75(v76, v209);
  if ((v67 & 1) != 0)
    goto LABEL_5;
  if (v73 >= 100)
  {
    v117 = v202;
    sub_214423ABC();
    v82 = v204;
    v80 = v212;
    sub_214423A44();
    (*(void (**)(char *, uint64_t))(v201 + 8))(v117, v203);
    v84 = v205;
    v83 = v206;
    v85 = *(void (**)(char *, uint64_t))(v205 + 8);
    goto LABEL_21;
  }
  if (v73 < 9)
  {
LABEL_5:
    v210 = v68;
    v211 = v63;
    v169 = v69;
    v86 = swift_allocObject();
    *(_OWORD *)(v86 + 16) = v213;
    v87 = v77;
    v88 = v208;
    v89 = *MEMORY[0x24BDCF250];
    v168 = v71;
    v71(v86 + v208, v89, v64);
    sub_2143F1544(v86);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v90 = v196;
    sub_214423BD0();
    swift_bridgeObjectRelease();
    v91 = sub_214423930();
    v93 = v92;
    v75(v90, v87);
    v94 = v88;
    if ((v93 & 1) == 0 && v91 >= 4)
    {
      v95 = v202;
      sub_214423ABC();
      v96 = v192;
      v80 = v212;
      sub_214423A44();
      (*(void (**)(char *, uint64_t))(v201 + 8))(v95, v203);
      v97 = v198;
      sub_214423AD4();
      v98 = v200;
      sub_214423A50();
      (*(void (**)(char *, uint64_t))(v197 + 8))(v97, v199);
      v84 = v205;
      v83 = v206;
      v85 = *(void (**)(char *, uint64_t))(v205 + 8);
      v85(v96, v206);
      v99 = v194;
      sub_214423A74();
      v82 = v204;
      sub_214423A20();
      (*(void (**)(char *, uint64_t))(v193 + 8))(v99, v195);
LABEL_8:
      v100 = v98;
LABEL_20:
      v85(v100, v83);
      goto LABEL_21;
    }
    v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = v213;
    v102 = v101 + v88;
    v103 = v64;
    v104 = v168;
    v168(v102, *MEMORY[0x24BDCF220], v64);
    sub_2143F1544(v101);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v105 = v191;
    sub_214423BD0();
    swift_bridgeObjectRelease();
    v106 = sub_21442390C();
    v108 = v107;
    v75(v105, v87);
    if ((v108 & 1) != 0 || v106 < 5)
    {
      v118 = swift_allocObject();
      *(_OWORD *)(v118 + 16) = v213;
      v104(v118 + v94, *MEMORY[0x24BDCF230], v103);
      sub_2143F1544(v118);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v119 = v183;
      sub_214423BD0();
      swift_bridgeObjectRelease();
      v120 = sub_214423918();
      v122 = v121;
      v75(v119, v87);
      if ((v122 & 1) != 0 || v120 < 2)
      {
        v132 = swift_allocObject();
        *(_OWORD *)(v132 + 16) = v213;
        v104(v132 + v94, *MEMORY[0x24BDCF258], v103);
        sub_2143F1544(v132);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v133 = v175;
        sub_214423BD0();
        swift_bridgeObjectRelease();
        v134 = sub_214423948();
        v136 = v135;
        v75(v133, v87);
        v137 = v202;
        sub_214423ABC();
        v84 = v205;
        if ((v136 & 1) != 0 || v134 < 2)
        {
          v154 = v170;
          v80 = v212;
          sub_214423A44();
          (*(void (**)(char *, uint64_t))(v201 + 8))(v137, v203);
          v155 = v198;
          sub_214423AD4();
          v156 = v174;
          sub_214423A50();
          (*(void (**)(char *, uint64_t))(v197 + 8))(v155, v199);
          v85 = *(void (**)(char *, uint64_t))(v84 + 8);
          v157 = v154;
          v83 = v206;
          v85(v157, v206);
          v158 = v194;
          sub_214423A74();
          v159 = v179;
          sub_214423A20();
          (*(void (**)(char *, uint64_t))(v193 + 8))(v158, v195);
          v85(v156, v83);
          v160 = v185;
          sub_214423A98();
          v161 = v188;
          sub_214423A8C();
          (*(void (**)(char *, uint64_t))(v186 + 8))(v160, v187);
          v162 = v184;
          sub_214423A38();
          (*(void (**)(char *, uint64_t))(v189 + 8))(v161, v190);
          v85(v159, v83);
          v163 = v180;
          sub_214423AEC();
          v164 = v192;
          sub_214423B1C();
          (*(void (**)(char *, uint64_t))(v181 + 8))(v163, v182);
          v85(v162, v83);
          v165 = v176;
          sub_214423AEC();
          v98 = v200;
          sub_214423B28();
          (*(void (**)(char *, uint64_t))(v177 + 8))(v165, v178);
          v85(v164, v83);
          v166 = v171;
          sub_214423A5C();
          v82 = v204;
          sub_214423A14();
          (*(void (**)(char *, uint64_t))(v172 + 8))(v166, v173);
          goto LABEL_8;
        }
        v138 = v174;
        v80 = v212;
        sub_214423A44();
        (*(void (**)(char *, uint64_t))(v201 + 8))(v137, v203);
        v139 = v198;
        sub_214423AD4();
        v140 = v179;
        sub_214423A50();
        (*(void (**)(char *, uint64_t))(v197 + 8))(v139, v199);
        v85 = *(void (**)(char *, uint64_t))(v84 + 8);
        v83 = v206;
        v85(v138, v206);
        v141 = v194;
        sub_214423A74();
        v142 = v184;
        sub_214423A20();
        (*(void (**)(char *, uint64_t))(v193 + 8))(v141, v195);
        v85(v140, v83);
        v143 = v185;
        sub_214423A98();
        v144 = v188;
        sub_214423A8C();
        (*(void (**)(char *, uint64_t))(v186 + 8))(v143, v187);
        v145 = v192;
        sub_214423A38();
        (*(void (**)(char *, uint64_t))(v189 + 8))(v144, v190);
        v85(v142, v83);
        v146 = v180;
        sub_214423AEC();
        v114 = v200;
        sub_214423B1C();
        (*(void (**)(char *, uint64_t))(v181 + 8))(v146, v182);
        v85(v145, v83);
        v147 = v176;
        sub_214423AEC();
        v82 = v204;
        sub_214423B28();
        (*(void (**)(char *, uint64_t))(v177 + 8))(v147, v178);
      }
      else
      {
        v123 = v202;
        sub_214423ABC();
        v124 = v179;
        v80 = v212;
        sub_214423A44();
        (*(void (**)(char *, uint64_t))(v201 + 8))(v123, v203);
        v125 = v198;
        sub_214423AD4();
        v126 = v184;
        sub_214423A50();
        (*(void (**)(char *, uint64_t))(v197 + 8))(v125, v199);
        v84 = v205;
        v83 = v206;
        v85 = *(void (**)(char *, uint64_t))(v205 + 8);
        v85(v124, v206);
        v127 = v194;
        sub_214423A74();
        v128 = v192;
        sub_214423A20();
        (*(void (**)(char *, uint64_t))(v193 + 8))(v127, v195);
        v85(v126, v83);
        v129 = v185;
        sub_214423A98();
        v130 = v188;
        sub_214423A8C();
        (*(void (**)(char *, uint64_t))(v186 + 8))(v129, v187);
        v114 = v200;
        sub_214423A38();
        (*(void (**)(char *, uint64_t))(v189 + 8))(v130, v190);
        v85(v128, v83);
        v131 = v180;
        sub_214423AEC();
        v82 = v204;
        sub_214423B1C();
        (*(void (**)(char *, uint64_t))(v181 + 8))(v131, v182);
      }
    }
    else
    {
      v109 = v202;
      sub_214423ABC();
      v110 = v184;
      v80 = v212;
      sub_214423A44();
      (*(void (**)(char *, uint64_t))(v201 + 8))(v109, v203);
      v111 = v198;
      sub_214423AD4();
      v112 = v192;
      sub_214423A50();
      (*(void (**)(char *, uint64_t))(v197 + 8))(v111, v199);
      v84 = v205;
      v83 = v206;
      v85 = *(void (**)(char *, uint64_t))(v205 + 8);
      v85(v110, v206);
      v113 = v194;
      sub_214423A74();
      v114 = v200;
      sub_214423A20();
      (*(void (**)(char *, uint64_t))(v193 + 8))(v113, v195);
      v85(v112, v83);
      v115 = v185;
      sub_214423A98();
      v116 = v188;
      sub_214423A8C();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v115, v187);
      v82 = v204;
      sub_214423A38();
      (*(void (**)(char *, uint64_t))(v189 + 8))(v116, v190);
    }
    v100 = v114;
    goto LABEL_20;
  }
  v78 = v202;
  sub_214423ABC();
  v79 = v200;
  v80 = v212;
  sub_214423A44();
  (*(void (**)(char *, uint64_t))(v201 + 8))(v78, v203);
  v81 = v198;
  sub_214423AD4();
  v82 = v204;
  sub_214423A50();
  (*(void (**)(char *, uint64_t))(v197 + 8))(v81, v199);
  v84 = v205;
  v83 = v206;
  v85 = *(void (**)(char *, uint64_t))(v205 + 8);
  v85(v79, v206);
LABEL_21:
  v148 = v207;
  v150 = v215;
  v149 = v216;
  v85(v80, v83);
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v80, v82, v83);
  *(_QWORD *)(v148 + 24) = v83;
  *(_QWORD *)(v148 + 32) = sub_2142E722C();
  v151 = sub_2141D8DD8((uint64_t *)v148);
  (*(void (**)(uint64_t *, char *, uint64_t))(v84 + 16))(v151, v80, v83);
  *(_BYTE *)(v148 + 40) = 1;
  v152 = *(void (**)(char *, uint64_t))(v150 + 8);
  v152(v218, v149);
  v152(v217, v149);
  return ((uint64_t (*)(char *, uint64_t))v85)(v80, v83);
}

unint64_t sub_2142E722C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253F12190;
  if (!qword_253F12190)
  {
    v1 = sub_214423B34();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDCE290], v1);
    atomic_store(result, (unint64_t *)&qword_253F12190);
  }
  return result;
}

uint64_t ChartContent.compositingLayer()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_214424440();
  v7 = MEMORY[0x2199CD934](MEMORY[0x24BDEFDC0], v6);
  return ChartContent.compositingLayer<A>(style:)((uint64_t)sub_2142E72F8, a1, v6, a2, v7, a3);
}

uint64_t sub_2142E72F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_214424440();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t ChartContent.compositingLayer<A>(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19[5];

  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v14);
  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a5;
  v19[3] = MEMORY[0x2199CD8C8](0, v19, MEMORY[0x24BDEFDA8], 0);
  v18[0] = a2;
  v18[1] = a3;
  v18[2] = a5;
  v19[4] = swift_getOpaqueTypeConformance2();
  sub_2141D8DD8(v19);
  sub_214424434();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a6, v13, a2);
  v16 = type metadata accessor for CompositingLayer(0, a2, a4, v15);
  return sub_2142E8050((uint64_t)v19, a6 + *(int *)(v16 + 36));
}

uint64_t ChartContent.compositingLayer<A>(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v24[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v14 + 16))(v16, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = a1;
  v18[7] = a2;
  v25 = type metadata accessor for ClosureBasedModifier(0, a4, a6, v19);
  v26 = MEMORY[0x2199CD934](&unk_21442B8C0, v25);
  v24[0] = sub_2142E7634;
  v24[1] = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a7, v16, a3);
  v21 = type metadata accessor for CompositingLayer(0, a3, a5, v20);
  sub_2142E8050((uint64_t)v24, a7 + *(int *)(v21 + 36));
  return swift_retain();
}

uint64_t sub_2142E75A8(uint64_t a1, void (*a2)(void))
{
  swift_retain();
  sub_214424B18();
  a2();
  return swift_release();
}

uint64_t sub_2142E7610()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2142E7634(uint64_t a1)
{
  uint64_t v1;

  return sub_2142E75A8(a1, *(void (**)(void))(v1 + 48));
}

uint64_t type metadata accessor for ClosureBasedModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClosureBasedModifier);
}

_UNKNOWN **sub_2142E7650()
{
  return &off_254D6A9E8;
}

_UNKNOWN **sub_2142E765C()
{
  return &off_254D6A9E8;
}

uint64_t sub_2142E7668()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2142E76DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 24);
    if (v12 < 0xFFFFFFFF)
    {
      v13 = *(_OWORD *)v11;
      v14 = *(_OWORD *)(v11 + 16);
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      *(_OWORD *)v10 = v13;
      *(_OWORD *)(v10 + 16) = v14;
    }
    else
    {
      *(_QWORD *)(v10 + 24) = v12;
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      (**(void (***)(void))(v12 - 8))();
    }
  }
  return v4;
}

unint64_t sub_2142E77C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  result = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
    return _s6Charts15AnyChartContentVwxx_0(result);
  return result;
}

uint64_t sub_2142E7818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 < 0xFFFFFFFF)
  {
    v10 = *(_OWORD *)v8;
    v11 = *(_OWORD *)(v8 + 16);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
    *(_OWORD *)v7 = v10;
    *(_OWORD *)(v7 + 16) = v11;
  }
  else
  {
    *(_QWORD *)(v7 + 24) = v9;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t sub_2142E78A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v7 + 24) = v9;
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
      (**(void (***)(unint64_t, unint64_t))(v9 - 8))(v7, v8);
      return a1;
    }
LABEL_7:
    v10 = *(_OWORD *)v8;
    v11 = *(_OWORD *)(v8 + 16);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
    *(_OWORD *)v7 = v10;
    *(_OWORD *)(v7 + 16) = v11;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    _s6Charts15AnyChartContentVwxx_0(v7);
    goto LABEL_7;
  }
  sub_2141DEA14((uint64_t *)v7, (uint64_t *)v8);
  return a1;
}

uint64_t sub_2142E7974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 32) = v9;
  return a1;
}

uint64_t sub_2142E79D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
    _s6Charts15AnyChartContentVwxx_0((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_OWORD *)v8;
  v10 = *(_OWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_OWORD *)v7 = v9;
  *(_OWORD *)(v7 + 16) = v10;
  return a1;
}

uint64_t sub_2142E7A54(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2142E7AD0 + 4 * byte_21442B800[v10]))();
  }
}

void sub_2142E7B5C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2142E7C50()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2142E7CDCLL);
}

void sub_2142E7C58(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2142E7C60);
  JUMPOUT(0x2142E7CDCLL);
}

void sub_2142E7CA8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2142E7CDCLL);
}

void sub_2142E7CB0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2142E7CDCLL);
}

uint64_t sub_2142E7CB8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x2142E7CC4);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = a2;
LABEL_6:
    JUMPOUT(0x2142E7CDCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for CompositingLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompositingLayer);
}

uint64_t sub_2142E7D00(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = type metadata accessor for ClosureBasedModifier(255, a4, a5, a4);
  MEMORY[0x2199CD934](&unk_21442B8C0, v7);
  v8 = sub_214424428();
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v12 - v10, a1, v8);
  MEMORY[0x2199CD934](MEMORY[0x24BDEFB78], v8);
  sub_214424B18();
  a2();
  return swift_release();
}

uint64_t sub_2142E7DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142E7D00(a1, *(void (**)(void))v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_2142E7DF4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;

  v5 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *))(a4 + 32))(a1, &v5);
}

uint64_t sub_2142E7E2C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 1);
  v11 = v10 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v12 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v13 = *(int *)(v12 + 64);
  v14 = *(_QWORD *)(v11 + v13);
  *(_QWORD *)(v11 + v13) = 0;
  LOBYTE(v23) = v9;
  *((_QWORD *)&v23 + 1) = v10;
  result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t))(a4 + 40))(&v26, a1, &v23, a3, a4);
  v16 = v26;
  *(_QWORD *)(v11 + *(int *)(v12 + 64)) = v14;
  if ((v9 & 1) == 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 24);
    sub_2141D8BF8(&qword_253F15D40);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_214426EF0;
    *(_QWORD *)(v18 + 32) = v16;
    v20 = type metadata accessor for CompositingLayer(0, a3, a4, v19);
    sub_2142E7FD4(a1 + *(int *)(v20 + 36), (uint64_t)v24);
    *(_QWORD *)&v23 = v17;
    *((_QWORD *)&v23 + 1) = v18;
    *((_QWORD *)&v25 + 1) = v14;
    result = swift_allocObject();
    v21 = v24[0];
    *(_OWORD *)(result + 16) = v23;
    *(_OWORD *)(result + 32) = v21;
    v22 = v25;
    *(_OWORD *)(result + 48) = v24[1];
    *(_OWORD *)(result + 64) = v22;
    v16 = result | 0x2000000000000000;
  }
  *a5 = v16;
  return result;
}

uint64_t sub_2142E7F88(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return sub_2142E7DF4(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2142E7F94@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_2142E7E2C(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_2142E7FA0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2142E7FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F15B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142E801C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_2142E8050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F15B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142E8098(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

ValueMetadata *type metadata accessor for SgPadding()
{
  return &type metadata for SgPadding;
}

ValueMetadata *type metadata accessor for SgRange()
{
  return &type metadata for SgRange;
}

void sub_2142E80C0()
{
  qword_253F1C880 = 0;
  *(_QWORD *)algn_253F1C888 = 0;
}

double sub_2142E80D0()
{
  double result;

  result = 0.0;
  xmmword_254D76020 = 0u;
  *(_OWORD *)&qword_254D76030 = 0u;
  return result;
}

BOOL sub_2142E80E4(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t sub_2142E8120(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2142E81E0(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_2142E82A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for SgPath(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for SgArea(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for SgLine(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for SgRule(0);
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for SgSector(0);
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for SgPoint(0);
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v9);
  __asm { BR              X10 }
}

double sub_2142E849C()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void sub_2142E8810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_projectBox();
  sub_2141FDEA0(v2, v0, type metadata accessor for SgPath);
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 - 208) = *(_OWORD *)(v0 + 8);
  *(_OWORD *)(v1 - 192) = v3;
  *(_BYTE *)(v1 - 176) = *(_BYTE *)(v0 + 40);
  if ((sub_214424728() & 1) == 0)
    sub_2144246D4();
  JUMPOUT(0x2142E87D4);
}

uint64_t sub_2142E8974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  char v29;
  uint64_t v30;

  sub_2141D7924(&qword_253F11FB0);
  v8 = sub_214424110();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = v28[2];
    v13 = v28[3];
    v27 = a1;
    v14 = v29;
    v25 = v30;
    sub_214424A04();
    v15 = sub_2144247DC();
    v26 = v16;
    v18 = v17;
    v20 = v19;
    swift_release();
    v21 = v18 & 1;
    sub_2141ED0BC(v12, v13, v14);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v27, a2);
    v23 = v26;
  }
  else
  {
    sub_214424A04();
    sub_214424890();
    swift_release();
    v24 = sub_2141D9054(&qword_253F11918, &qword_253F11FB0, MEMORY[0x24BDF1028]);
    v28[0] = a3;
    v28[1] = v24;
    MEMORY[0x2199CD934](MEMORY[0x24BDED308], v8, v28);
    v15 = sub_214424B18();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
    v23 = 0;
    v20 = 0;
    v21 = 0x8000000000000000;
  }
  *a4 = v15;
  a4[1] = v23;
  a4[2] = v21;
  a4[3] = v20;
  a4[4] = 0;
  return result;
}

void sub_2142E8B78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[3];
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;

  v28 = type metadata accessor for SgPath(0);
  MEMORY[0x24BDAC7A8](v28);
  v27 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SgArea(0);
  MEMORY[0x24BDAC7A8](v26);
  v25 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SgLine(0);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SgRule(0);
  MEMORY[0x24BDAC7A8](v22);
  v21 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SgSector(0);
  MEMORY[0x24BDAC7A8](v20);
  v19[2] = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SgVectorized(0);
  MEMORY[0x24BDAC7A8](v7);
  v19[1] = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v9);
  v19[0] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v12);
  v13 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x24BDAC7A8](v13);
  v14 = type metadata accessor for AnyVectorizedRenderer(0);
  MEMORY[0x24BDAC7A8](v14);
  v29 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v16);
  v17 = type metadata accessor for SgPoint(0);
  MEMORY[0x24BDAC7A8](v17);
  type metadata accessor for SgGroup(0);
  v18 = (char *)sub_2142E8EE8 + 4 * byte_21442B99F[(unint64_t)MEMORY[0x24BDAC7A8](a1) >> 60];
  __asm { BR              X10 }
}

double sub_2142E8EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;

  v2 = swift_projectBox();
  sub_2141FDEA0(v2, v1, type metadata accessor for SgGroup);
  v3 = *(double *)(v1 + *(int *)(v0 + 32));
  sub_2141DD370(v1, type metadata accessor for SgGroup);
  return v3;
}

void sub_2142E911C()
{
  JUMPOUT(0x2142E90F4);
}

void sub_2142E9124()
{
  JUMPOUT(0x2142E90F4);
}

void sub_2142E912C()
{
  JUMPOUT(0x2142E90F4);
}

void sub_2142E9134()
{
  uint64_t v0;
  uint64_t v1;

  sub_2141FE1E0(v1, v0, type metadata accessor for PointsRenderer);
  sub_2141DD370(v0, type metadata accessor for PointsRenderer);
  JUMPOUT(0x2142E91CCLL);
}

void sub_2142E9158()
{
  uint64_t v0;
  uint64_t v1;

  sub_2141FE1E0(v0, *(_QWORD *)(v1 - 272), type metadata accessor for RulesRenderer);
  JUMPOUT(0x2142E9180);
}

void sub_2142E918C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = swift_projectBox();
  v2 = *(_QWORD *)(v0 - 264);
  sub_2141FDEA0(v1, v2, type metadata accessor for SgVectorized);
  sub_2141DD370(v2, type metadata accessor for SgVectorized);
  swift_release();
  JUMPOUT(0x2142E91CCLL);
}

uint64_t sub_2142E91DC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[152];
  _BYTE v32[152];
  _QWORD v33[19];
  _BYTE v34[152];
  _QWORD v35[20];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v3 = a1 + 32;
  sub_2141E801C(a1 + 32, (uint64_t)v34, &qword_253F13428);
  sub_2141E801C((uint64_t)v34, (uint64_t)v35, &qword_253F13428);
  if (sub_21422C64C(v35) == 1)
  {
    v4 = 0;
    v5 = a1 + 184;
    v6 = (char *)MEMORY[0x24BEE4AF8];
    while (v1 - 1 != v4)
    {
      sub_2141E801C(v5, (uint64_t)v34, &qword_253F13428);
      sub_2141E801C((uint64_t)v34, (uint64_t)v35, &qword_253F13428);
      v5 += 152;
      ++v4;
      if (sub_21422C64C(v35) != 1)
        goto LABEL_10;
    }
    return (uint64_t)v6;
  }
  v4 = 0;
LABEL_10:
  v30 = a1;
  result = swift_bridgeObjectRetain();
  if (v4 >= v1)
  {
LABEL_41:
    __break(1u);
  }
  else
  {
    v8 = a1 + 184;
    v9 = (char *)MEMORY[0x24BEE4AF8];
    v6 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      sub_2141E801C(v3 + 152 * v4, (uint64_t)v34, &qword_253F13428);
      sub_2141E801C((uint64_t)v34, (uint64_t)v35, &qword_253F13428);
      result = sub_21422C64C(v35);
      if ((_DWORD)result == 1)
        break;
      v10 = v1;
      if (v4 + 1 != v1)
      {
        if ((uint64_t)(v4 + 1) >= (uint64_t)v1)
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        v11 = v8 + 152 * v4;
        v10 = v4 + 1;
        while (1)
        {
          sub_2141E801C(v11, (uint64_t)v32, &qword_253F13428);
          sub_2141E801C((uint64_t)v32, (uint64_t)v33, &qword_253F13428);
          result = sub_21422C64C(v33);
          if ((_DWORD)result != 1)
            break;
          v12 = v10 + 1;
          if (__OFADD__(v10, 1))
            goto LABEL_40;
          if (v12 == v1)
          {
            v10 = v1;
            break;
          }
          ++v10;
          v11 += 152;
          if (v12 >= (uint64_t)v1)
            goto LABEL_39;
        }
      }
      sub_2141E801C((uint64_t)v34, (uint64_t)v32, &qword_253F13428);
      sub_2141EF6B8((uint64_t)v32, (uint64_t)v33);
      v13 = sub_21421C2FC((uint64_t)v33);
      v14 = sub_21421C308((uint64_t)v33);
      if (v13 == 1 || (v15 = *(unsigned __int8 *)(v14 + 56), v15 >= 2))
      {
        sub_2141E801C((uint64_t)v34, (uint64_t)v31, &qword_253F13428);
        sub_214303C70((uint64_t)v31);
        sub_214303C70((uint64_t)v32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_214224028(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        v29 = *((_QWORD *)v6 + 2);
        v28 = *((_QWORD *)v6 + 3);
        if (v29 >= v28 >> 1)
          v6 = sub_214224028((char *)(v28 > 1), v29 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v29 + 1;
        v27 = &v6[152 * v29];
      }
      else
      {
        v16 = v3;
        v17 = v9;
        v19 = *(_QWORD *)(v14 + 40);
        v18 = *(_QWORD *)(v14 + 48);
        sub_21422F2B0((uint64_t)v34, (uint64_t (*)(void))sub_21420B7DC);
        sub_2141EF1B0(v19, v18, v15);
        sub_2141EF6B8((uint64_t)v32, (uint64_t)v31);
        v20 = sub_21421C308((uint64_t)v31);
        v21 = *(_QWORD *)(v20 + 40);
        v22 = *(_QWORD *)(v20 + 48);
        v23 = *(_BYTE *)(v20 + 56);
        sub_2141DD130(*(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 16), *(_BYTE *)(v20 + 24));
        swift_bridgeObjectRetain();
        v24 = v22;
        v9 = v17;
        sub_2141DD140(v21, v24, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_214224028(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
        v26 = *((_QWORD *)v9 + 2);
        v25 = *((_QWORD *)v9 + 3);
        v3 = v16;
        if (v26 >= v25 >> 1)
          v9 = sub_214224028((char *)(v25 > 1), v26 + 1, 1, v9);
        v8 = v30 + 184;
        *((_QWORD *)v9 + 2) = v26 + 1;
        v27 = &v9[152 * v26];
      }
      sub_2141EF6B8((uint64_t)v32, (uint64_t)(v27 + 32));
      result = sub_21422F2B0((uint64_t)v34, (uint64_t (*)(void))sub_2141EF5D4);
      if (v10 == v1)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v6;
      }
      v4 = v10;
      if (v10 >= v1)
        goto LABEL_41;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2142E95B8(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result + 32;
  v3 = *(double *)(result + 32);
  v4 = v3;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    v5 = 0;
    v6 = v1 - 1;
    while (v6 != v5)
    {
      v3 = *(double *)(result + 40 + 8 * v5);
      v4 = v3;
      ++v5;
      if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
      {
        v7 = v3;
        if (v6 == v5)
          goto LABEL_46;
        v8 = v5 + 1;
        goto LABEL_11;
      }
    }
    return 0;
  }
  v7 = *(double *)(result + 32);
  if (v1 == 1)
    goto LABEL_46;
  v8 = 1;
LABEL_11:
  if (v8 >= v1)
    goto LABEL_50;
  v9 = *(double *)(v2 + 8 * v8);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    while (v1 - 1 != v8)
    {
      v9 = *(double *)(result + 40 + 8 * v8++);
      if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
        goto LABEL_15;
    }
    v4 = v3;
    v7 = v3;
    goto LABEL_46;
  }
LABEL_15:
  v10 = v8 + 1;
  if (v9 >= v3)
    v11 = v9;
  else
    v11 = v3;
  if (v9 < v3)
    v3 = v9;
  if (v10 == v1)
  {
LABEL_21:
    v7 = v3;
    v4 = v11;
LABEL_46:
    if (v7 <= v4)
      return *(_QWORD *)&v7;
    __break(1u);
    goto LABEL_49;
  }
  v12 = result + 40;
  v13 = v1 - 1;
  v14 = v3;
  v15 = v11;
  while (v10 < v1)
  {
    v17 = *(double *)(v2 + 8 * v10);
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
    {
      while (v13 != v10)
      {
        v17 = *(double *)(v12 + 8 * v10++);
        if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) != 0)
          goto LABEL_38;
      }
      goto LABEL_21;
    }
LABEL_38:
    v18 = v10 + 1;
    v10 = *(_QWORD *)(result + 16);
    v19 = v17;
    if (v18 != v1)
    {
      if (v18 >= v1)
        goto LABEL_51;
      v19 = *(double *)(v2 + 8 * v18);
      if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) != 0)
      {
LABEL_23:
        v10 = v18 + 1;
      }
      else
      {
        while (v13 != v18)
        {
          v19 = *(double *)(v12 + 8 * v18++);
          if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) != 0)
            goto LABEL_23;
        }
        v10 = *(_QWORD *)(result + 16);
        v19 = v17;
      }
    }
    if (v19 >= v17)
      v16 = v19;
    else
      v16 = v17;
    if (v19 < v17)
      v17 = v19;
    if (v17 < v14)
    {
      v3 = v17;
      v14 = v17;
    }
    if (v16 >= v15)
    {
      v11 = v16;
      v15 = v16;
    }
    if (v10 == v1)
      goto LABEL_21;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_2142E979C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  __int128 v16[2];
  char v17;
  uint64_t v18;
  char v19;

  v6 = sub_21442402C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141FE4A4(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    sub_2141D8DC0(v16, (uint64_t)v14);
    sub_2141D7878((uint64_t)v14, (uint64_t)v11);
    sub_2141D8BF8(&qword_253F131F8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_214424014();
      swift_release();
    }
    else if ((*(_BYTE *)(a1 + 41) & 1) != 0 || (sub_2141E801C(a2, (uint64_t)&v18, &qword_253F15CD8), (v19 & 1) == 0))
    {
      sub_2141E88D0(v14, v15);
      v12 = sub_2144243D4();
      v13 = MEMORY[0x2199CD934](MEMORY[0x24BDEF330], v12);
      sub_2141D8DD8(v11);
      sub_214423D20();
      sub_214424020();
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v11);
    }
    else
    {
      sub_2141E88D0(v14, v15);
      sub_214424020();
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v14);
  }
  else
  {
    sub_214424014();
    return swift_release();
  }
}

uint64_t sub_2142E9A38(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *);

  v26 = a5;
  v27 = a4;
  v25 = a3;
  v7 = sub_21442402C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v24 - v12;
  v14 = sub_2141D8BF8(&qword_253F15C88);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SgShapeStyle();
  sub_2141E070C(a2 + *(int *)(v17 + 32), (uint64_t)v16, &qword_253F15C88);
  v18 = sub_214424C68();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) == 1)
  {
    sub_2141E0750((uint64_t)v16, &qword_253F15C88);
  }
  else
  {
    v20 = sub_2141FAB24();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    if ((v20 & 0x100000000) == 0)
    {
      sub_214424080();
      sub_21442408C();
      sub_2142E979C(a2, v25, (uint64_t)v13);
      sub_21442405C();
      v27(a1, v11);
      v21 = *(void (**)(char *, uint64_t))(v8 + 8);
      v21(v11, v7);
      v21(v13, v7);
      return sub_21442408C();
    }
  }
  sub_2142E979C(a2, v25, (uint64_t)v13);
  sub_21442405C();
  v27(a1, v11);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v11, v7);
  return ((uint64_t (*)(char *, uint64_t))v23)(v13, v7);
}

uint64_t sub_2142E9C70(unint64_t a1)
{
  return byte_21442C45A[a1 >> 60];
}

void sub_2142E9C84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[14];

  v2 = type metadata accessor for SgPath(0);
  MEMORY[0x24BDAC7A8](v2);
  v21[5] = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SgArea(0);
  MEMORY[0x24BDAC7A8](v4);
  v21[4] = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SgLine(0);
  MEMORY[0x24BDAC7A8](v6);
  v21[3] = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SgRule(0);
  MEMORY[0x24BDAC7A8](v8);
  v21[2] = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SgSector(0);
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for SgVectorized(0);
  MEMORY[0x24BDAC7A8](v11);
  v21[1] = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v13);
  v21[0] = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v15);
  v16 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v16);
  v17 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x24BDAC7A8](v17);
  v18 = type metadata accessor for AnyVectorizedRenderer(0);
  MEMORY[0x24BDAC7A8](v18);
  v19 = type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v19);
  v20 = type metadata accessor for SgPoint(0);
  MEMORY[0x24BDAC7A8](v20);
  type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](a1);
  __asm { BR              X10 }
}

uint64_t sub_2142E9FC0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_2142EA234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[28];

  v16[3] = a2;
  v5 = type metadata accessor for AnyVectorizedRenderer(0);
  MEMORY[0x24BDAC7A8](v5);
  v16[1] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v7);
  v16[0] = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SgSector(0);
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for SgPoint(0);
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for SgPath(0);
  MEMORY[0x24BDAC7A8](v12);
  v13 = type metadata accessor for SgArea(0);
  MEMORY[0x24BDAC7A8](v13);
  v14 = type metadata accessor for SgLine(0);
  MEMORY[0x24BDAC7A8](v14);
  v15 = type metadata accessor for SgRule(0);
  MEMORY[0x24BDAC7A8](v15);
  sub_2142E9C84(a3);
  sub_2142E9C84(a3);
  v16[2] = a1;
  sub_214423F30();
  __asm { BR              X10 }
}

uint64_t sub_2142EA490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = swift_projectBox();
  sub_2141FDEA0(v2, v0, type metadata accessor for SgGroup);
  sub_214300AB4(*(uint64_t **)(v1 - 288), *(_QWORD *)(v1 - 280));
  return sub_2141DD370(v0, type metadata accessor for SgGroup);
}

_QWORD *sub_2142EA7B8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  unint64_t v15;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v15 = sub_21436CF0C(MEMORY[0x24BEE4AF8]);
  sub_2143014A0(a1);
  swift_bridgeObjectRetain_n();
  v3 = sub_214398028(v15);
  swift_bridgeObjectRelease();
  v14 = v3;
  sub_214302350(&v14);
  swift_bridgeObjectRelease();
  v4 = v14;
  v5 = v14[2];
  if (v5)
  {
    v14 = v2;
    sub_2141D4008(0, v5, 0);
    v6 = 0;
    v2 = v14;
    v7 = v14[2];
    v8 = 2 * v7;
    do
    {
      v10 = v4[v6 + 4];
      v9 = v4[v6 + 5];
      v14 = v2;
      v11 = v2[3];
      swift_retain();
      if (v7 >= v11 >> 1)
      {
        sub_2141D4008((char *)(v11 > 1), v7 + 1, 1);
        v2 = v14;
      }
      v2[2] = v7 + 1;
      v12 = &v2[v8 + v6];
      v12[4] = v10;
      v12[5] = v9;
      v6 += 2;
      ++v7;
      --v5;
    }
    while (v5);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_2142EA930()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t ObjCClassFromMetadata;
  void *v8;
  id v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v1);
  sub_21421C19C(v0, (uint64_t)&v14);
  v2 = v19;
  if (v19 < 0)
  {
    v19 &= ~0x8000000000000000;
    v4 = v17;
    v5 = v2 & 1;
    v6 = v18;
    v12 = v15;
    v13 = v14;
    v11 = v16;
    sub_2141DD130(v14, v15, v16);
    swift_bridgeObjectRetain();
    sub_2141DD130(v4, v6, v5);
    swift_bridgeObjectRetain();
    sub_2144242B4();
    sub_2144242A8();
    sub_214424290();
    sub_2144242A8();
    sub_214424290();
    sub_2144242A8();
    sub_2144242D8();
    type metadata accessor for FindClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v8 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = objc_msgSend(v8, sel_bundleForClass_, ObjCClassFromMetadata);
    v3 = sub_21442480C();
    sub_2141ED0BC(v4, v6, v5);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v13, v12, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = v14;
    sub_2141DD130(v14, v15, v16);
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_2142EAB9C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t ObjCClassFromMetadata;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[128];

  v1 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v1);
  sub_2141EF6B8(v0, (uint64_t)v24);
  v2 = sub_21421C2FC((uint64_t)v24);
  v3 = sub_21421C308((uint64_t)v24);
  if (v2 == 1)
  {
    v23 = *(_QWORD *)(v3 + 8);
    v17 = *(_QWORD *)(v3 + 16);
    v4 = *(_QWORD *)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 48);
    v21 = v5;
    v22 = *(_QWORD *)(v3 + 80);
    v16 = *(_QWORD *)(v3 + 88);
    v6 = *(_QWORD *)(v3 + 112);
    v19 = v6;
    v7 = *(_QWORD *)(v3 + 120);
    v8 = *(_BYTE *)(v3 + 96) & 1;
    v9 = *(_BYTE *)(v3 + 56);
    v20 = v9;
    v10 = *(_BYTE *)(v3 + 128);
    v18 = *(_BYTE *)(v3 + 24) & 1;
    sub_2141DD130(v23, v17, v18);
    swift_bridgeObjectRetain();
    sub_2141DD140(v4, v5, v9);
    sub_2141DD130(v22, v16, v8);
    swift_bridgeObjectRetain();
    sub_2141DD140(v6, v7, v10);
    sub_2144242B4();
    sub_2144242A8();
    sub_214424290();
    sub_2144242A8();
    sub_214424290();
    sub_2144242A8();
    sub_2144242D8();
    type metadata accessor for FindClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v12 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = objc_msgSend(v12, sel_bundleForClass_, ObjCClassFromMetadata);
    v14 = sub_21442480C();
    sub_2141ED0BC(v22, v16, v8);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v19, v7, v10);
    sub_2141ED0BC(v23, v17, v18);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v4, v21, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)(v3 + 8);
    sub_2141DD130(v14, *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
    swift_bridgeObjectRetain();
  }
  return v14;
}

uint64_t sub_2142EAF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = v4;
  v40 = a3;
  v38 = a1;
  v39 = type metadata accessor for RectangleElementDrawer(0);
  MEMORY[0x24BDAC7A8](v39);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(qword_254D69B70);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141D8BF8(&qword_254D690C0);
  v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyVectorizedRenderer(0) - 8) + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_214426EF0;
  sub_2141FDEA0((uint64_t)v5, v19 + v18, type metadata accessor for RectanglesRenderer);
  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  swift_storeEnumTagMultiPayload();
  v41 = a4;
  swift_bridgeObjectRetain();
  sub_2143EAFA0(v19);
  v37 = v41;
  v20 = (int *)type metadata accessor for RectanglesRenderer(0);
  sub_2141E070C((uint64_t)v5 + v20[8], (uint64_t)v12, qword_254D69B70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_2141E0750((uint64_t)v12, qword_254D69B70);
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    sub_2141FE1E0((uint64_t)v12, (uint64_t)v16, type metadata accessor for ChartContentRenderContext.Environment);
    v22 = v5[3];
    v21 = v5[4];
    v36 = sub_2141E88D0(v5, v22);
    sub_2141FDEA0(a2, (uint64_t)v9, type metadata accessor for RenderParams);
    v23 = v20[10];
    v24 = (char *)v5 + v20[9];
    v34 = *(_OWORD *)v24;
    v35 = a2;
    v26 = *((_QWORD *)v24 + 2);
    v25 = *((_QWORD *)v24 + 3);
    v27 = v24[32];
    v28 = (char *)v5 + v23;
    v29 = v39;
    v30 = &v9[*(int *)(v39 + 24)];
    v31 = sub_214424308();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v30, v28, v31);
    v32 = &v9[*(int *)(v29 + 20)];
    *(_OWORD *)v32 = v34;
    *((_QWORD *)v32 + 2) = v26;
    *((_QWORD *)v32 + 3) = v25;
    v32[32] = v27;
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, char *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v21 + 24))(v38, v35, v16, v40, v37, v9, v29, &off_24D1851C0, v22, v21);
    swift_bridgeObjectRelease();
    sub_2141DD370((uint64_t)v9, type metadata accessor for RectangleElementDrawer);
    return sub_2141DD370((uint64_t)v16, type metadata accessor for ChartContentRenderContext.Environment);
  }
  return result;
}

uint64_t sub_2142EB260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _BYTE v72[40];
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  char v77;
  _BYTE v78[160];
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  _OWORD v83[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  unsigned __int8 v90;

  v5 = v4;
  v62 = a3;
  v68 = a1;
  v69 = a2;
  v67 = type metadata accessor for PointElementDrawer(0);
  MEMORY[0x24BDAC7A8](v67);
  v63 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(qword_254D69B70);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v55 - v18;
  v71 = v8;
  sub_2141E070C((uint64_t)v5 + *(int *)(v8 + 32), (uint64_t)v12, qword_254D69B70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_2141E0750((uint64_t)v12, qword_254D69B70);
    goto LABEL_27;
  }
  sub_2141FE1E0((uint64_t)v12, (uint64_t)v19, type metadata accessor for ChartContentRenderContext.Environment);
  v20 = v5[6];
  if (!v20)
  {
    while (1)
    {
LABEL_27:
      sub_214425628();
      __break(1u);
    }
  }
  sub_2141D8BF8(&qword_254D690C0);
  v21 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyVectorizedRenderer(0) - 8) + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject();
  v70 = xmmword_214426EF0;
  *(_OWORD *)(v23 + 16) = xmmword_214426EF0;
  sub_2141FDEA0((uint64_t)v5, v23 + v22, type metadata accessor for PointsRenderer);
  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)&v83[0] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2143EAFA0(v23);
  v24 = *(_QWORD *)&v83[0];
  v25 = v20 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale;
  swift_beginAccess();
  sub_2141E070C(v25, (uint64_t)v78, &qword_253F149F0);
  sub_2141E070C((uint64_t)v78, (uint64_t)v83, &qword_253F149F0);
  if (v90 == 255)
  {
    v61 = 0;
    v26 = 0;
  }
  else
  {
    sub_2141E801C((uint64_t)v83, (uint64_t)v79, &qword_254D695C8);
    sub_214301F04((uint64_t)v79, (uint64_t)v5, (uint64_t *)v75);
    sub_2141E0750((uint64_t)v79, &qword_254D695C8);
    v61 = *((_QWORD *)&v75[0] + 1);
    v26 = *(_QWORD *)&v75[0];
  }
  sub_2141E0750((uint64_t)v78, &qword_253F149F0);
  if (!v26)
  {
    sub_2141E070C((uint64_t)v5 + *(int *)(v71 + 36), (uint64_t)v79, &qword_253F12208);
    sub_2141FDEA0((uint64_t)v19, (uint64_t)v17, type metadata accessor for ChartContentRenderContext.Environment);
    if (v82 == 255)
    {
      sub_2141E070C((uint64_t)(v17 + 88), (uint64_t)v83, &qword_253F12208);
      sub_2141DD370((uint64_t)v17, type metadata accessor for ChartContentRenderContext.Environment);
      sub_2141E0750((uint64_t)v79, &qword_253F12208);
      if (BYTE8(v84) == 255)
      {
        sub_2141E0750((uint64_t)v83, &qword_253F12208);
        if (qword_253F10448 != -1)
          swift_once();
        sub_2141F9E40((uint64_t)&unk_253F1C8C8, (uint64_t)v75);
        sub_2141D8BF8(&qword_253F10278);
        v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v70;
        sub_2141F9E40((uint64_t)v75, v26 + 32);
        v54 = sub_21442504C();
        *(_QWORD *)(v54 + 16) = 1;
        v61 = v54;
        *(_QWORD *)(v54 + 32) = 0;
        v28 = v75;
        goto LABEL_12;
      }
    }
    else
    {
      sub_2141DD370((uint64_t)v17, type metadata accessor for ChartContentRenderContext.Environment);
      sub_2142AAEF0((uint64_t)v79, (uint64_t)v83);
    }
    sub_2142AAEF0((uint64_t)v83, (uint64_t)v75);
    if ((v77 & 1) == 0)
    {
      v73[0] = v75[0];
      v73[1] = v75[1];
      v74 = v76;
      sub_2141F9E40((uint64_t)v73, (uint64_t)v72);
      sub_2141D8BF8(&qword_253F10278);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v70;
      sub_2141F9E40((uint64_t)v72, v26 + 32);
      v27 = sub_21442504C();
      *(_QWORD *)(v27 + 16) = 1;
      v61 = v27;
      *(_QWORD *)(v27 + 32) = 0;
      sub_2143039E0((uint64_t)v72);
      v28 = v73;
LABEL_12:
      sub_2143039E0((uint64_t)v28);
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_13:
  v64 = v20;
  v29 = (__int128 *)(v20 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale);
  v30 = *(unsigned __int8 *)(v20 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104);
  v66 = v19;
  if (v30 == 255)
  {
    v31 = v65;
    sub_2141FDEA0((uint64_t)v5, v65, type metadata accessor for PointsRenderer);
  }
  else
  {
    v32 = *((_QWORD *)v29 + 12);
    v33 = v29[5];
    v59 = v29[4];
    v60 = v33;
    v34 = v29[3];
    v57 = v29[2];
    v58 = v34;
    v35 = v29[1];
    v55 = *v29;
    v56 = v35;
    sub_2141D7878((uint64_t)v5, (uint64_t)v79);
    v36 = v80;
    v37 = v81;
    sub_2141E88D0(v79, v80);
    v83[0] = v55;
    v83[1] = v56;
    v84 = v57;
    v85 = v58;
    v86 = v59;
    v87 = v60;
    v88 = v32;
    v89 = v30 & 1;
    KeyPath = swift_getKeyPath();
    v39 = (*(uint64_t (**)(_OWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 16))(v83, KeyPath, MEMORY[0x24BEE50B0], v36, v37);
    v41 = v40;
    swift_release();
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v79);
    v31 = v65;
    sub_2141FDEA0((uint64_t)v5, v65, type metadata accessor for PointsRenderer);
    if (v39)
    {
      v42 = v24;
      goto LABEL_22;
    }
  }
  v43 = (uint64_t *)(v31 + *(int *)(v71 + 40));
  if ((v43[2] & 1) != 0)
  {
    if (qword_253F10D28 != -1)
      swift_once();
    v43 = &qword_253F1C948;
  }
  v42 = v24;
  v44 = *v43;
  sub_2141D8BF8(&qword_253F13D68);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = v70;
  *(_QWORD *)(v39 + 32) = v44;
  v41 = sub_21442504C();
  *(_QWORD *)(v41 + 16) = 1;
  *(_QWORD *)(v41 + 32) = 0;
LABEL_22:
  sub_2141DD370(v31, type metadata accessor for PointsRenderer);
  v45 = v5[4];
  sub_2141E88D0(v5, v5[3]);
  v46 = v69;
  v47 = v63;
  sub_2141FDEA0(v69, v63, type metadata accessor for RenderParams);
  v48 = v67;
  v49 = (uint64_t *)(v47 + *(int *)(v67 + 20));
  v50 = v61;
  *v49 = v26;
  v49[1] = v50;
  v51 = (uint64_t *)(v47 + *(int *)(v48 + 24));
  *v51 = v39;
  v51[1] = v41;
  v52 = (uint64_t)v66;
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v45 + 24))(v68, v46, v66, v62, v42, v47);
  swift_release();
  swift_bridgeObjectRelease();
  sub_2141DD370(v47, type metadata accessor for PointElementDrawer);
  return sub_2141DD370(v52, type metadata accessor for ChartContentRenderContext.Environment);
}

uint64_t sub_2142EBAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t (*v25)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t result;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD v60[17];
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  _DWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[136];
  _BYTE v69[144];

  v5 = v4;
  v53 = a4;
  v54 = a1;
  v55 = type metadata accessor for RuleElementDrawer(0);
  MEMORY[0x24BDAC7A8](v55);
  v58 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2141D8BF8(qword_254D69B70);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v50 - v17;
  v19 = type metadata accessor for RulesRenderer(0);
  sub_2141E070C((uint64_t)v5 + *(int *)(v19 + 32), (uint64_t)v11, qword_254D69B70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_2141E0750((uint64_t)v11, qword_254D69B70);
  }
  else
  {
    sub_2141FE1E0((uint64_t)v11, (uint64_t)v18, type metadata accessor for ChartContentRenderContext.Environment);
    v20 = v5[6];
    if (v20)
    {
      v56 = a2;
      sub_2141E801C(v20 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale, (uint64_t)v68, &qword_253F149E8);
      sub_2141E801C((uint64_t)v68, (uint64_t)v69, &qword_253F149E8);
      v21 = sub_21421B90C((uint64_t)v69);
      v57 = a3;
      v59 = v18;
      v51 = v5;
      v52 = v20;
      if (v21 == 1)
      {
        swift_retain();
        sub_2141FDEA0((uint64_t)v18, (uint64_t)v16, type metadata accessor for ChartContentRenderContext.Environment);
      }
      else
      {
        sub_2141E801C((uint64_t)v68, (uint64_t)v64, &qword_253F149E8);
        sub_2141D7878((uint64_t)v5, (uint64_t)v61);
        v22 = v62;
        v23 = v63;
        sub_2141E88D0(v61, v62);
        sub_2141E801C((uint64_t)v64, (uint64_t)v60, &qword_254D695C0);
        KeyPath = swift_getKeyPath();
        v25 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 16);
        swift_retain();
        v26 = v25(v60, KeyPath, MEMORY[0x24BDEB7D0], v22, v23);
        v28 = v27;
        v29 = (uint64_t)v59;
        swift_release();
        _s6Charts15AnyChartContentVwxx_0((uint64_t)v61);
        sub_2141FDEA0(v29, (uint64_t)v16, type metadata accessor for ChartContentRenderContext.Environment);
        if (v26)
        {
          v30 = swift_getTypeByMangledNameInContext2;
LABEL_11:
          sub_2141DD370((uint64_t)v16, type metadata accessor for ChartContentRenderContext.Environment);
          v38 = v51;
          v39 = v51[4];
          v50 = sub_2141E88D0(v51, v51[3]);
          sub_2141D8BF8(&qword_254D690C0);
          v40 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyVectorizedRenderer(0) - 8) + 80);
          v41 = (v40 + 32) & ~v40;
          v42 = swift_allocObject();
          *(_OWORD *)(v42 + 16) = *((_OWORD *)v30 + 239);
          sub_2141FDEA0((uint64_t)v38, v42 + v41, type metadata accessor for RulesRenderer);
          type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
          swift_storeEnumTagMultiPayload();
          v60[0] = v53;
          swift_bridgeObjectRetain();
          sub_2143EAFA0(v42);
          v43 = v60[0];
          v44 = v56;
          v45 = v58;
          sub_2141FDEA0(v56, v58, type metadata accessor for RenderParams);
          v46 = (uint64_t *)(v45 + *(int *)(v55 + 20));
          *v46 = v26;
          v46[1] = v28;
          v47 = *(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v39 + 24);
          v48 = (uint64_t)v59;
          v47(v54, v44, v59, v57, v43, v45);
          swift_release();
          swift_bridgeObjectRelease();
          sub_2141DD370(v45, type metadata accessor for RuleElementDrawer);
          return sub_2141DD370(v48, type metadata accessor for ChartContentRenderContext.Environment);
        }
      }
      if (*((_QWORD *)v16 + 9))
      {
        v31 = (uint64_t *)(v16 + 48);
        v32 = *((_QWORD *)v16 + 10);
        v33 = *((_QWORD *)v16 + 8);
        v34 = *((_QWORD *)v16 + 9);
        v35 = *((_DWORD *)v16 + 14);
        v36 = *((_DWORD *)v16 + 15);
      }
      else
      {
        v31 = (uint64_t *)v64;
        sub_214423D80();
        v35 = v64[2];
        v36 = v64[3];
        v33 = v65;
        v34 = v66;
        v32 = v67;
      }
      v37 = *v31;
      sub_2141D8BF8(&qword_254D690D8);
      v26 = swift_allocObject();
      v30 = swift_getTypeByMangledNameInContext2;
      *(_OWORD *)(v26 + 16) = xmmword_214426EF0;
      *(_QWORD *)(v26 + 32) = v37;
      *(_DWORD *)(v26 + 40) = v35;
      *(_DWORD *)(v26 + 44) = v36;
      *(_QWORD *)(v26 + 48) = v33;
      *(_QWORD *)(v26 + 56) = v34;
      *(_QWORD *)(v26 + 64) = v32;
      swift_bridgeObjectRetain();
      v28 = sub_21442504C();
      *(_QWORD *)(v28 + 16) = 1;
      *(_QWORD *)(v28 + 32) = 0;
      goto LABEL_11;
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2142EC01C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  _OWORD v10[2];
  char v11;

  v3 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (double *)&v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for SgRule(0);
  sub_2141FDEA0(v1 + *(int *)(v6 + 36), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  v9 = v1;
  if (v5[11] == 1.0)
  {
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_2143036B8, (uint64_t)v8);
  }
  else
  {
    sub_214424038();
    sub_214424044();
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_2143036B8, (uint64_t)v8);
    sub_214424044();
  }
  return sub_2141DD370((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EC160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  _OWORD v10[2];
  char v11;

  v3 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (double *)&v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for SgArea(0);
  sub_2141FDEA0(v1 + *(int *)(v6 + 32), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  v9 = v1;
  if (v5[11] == 1.0)
  {
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303A70, (uint64_t)v8);
  }
  else
  {
    sub_214424038();
    sub_214424044();
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303A70, (uint64_t)v8);
    sub_214424044();
  }
  return sub_2141DD370((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EC2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  _OWORD v10[2];
  char v11;

  v3 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (double *)&v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for SgSector(0);
  sub_2141FDEA0(v1 + *(int *)(v6 + 48), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  v9 = v1;
  if (v5[11] == 1.0)
  {
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303AC4, (uint64_t)v8);
  }
  else
  {
    sub_214424038();
    sub_214424044();
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303AC4, (uint64_t)v8);
    sub_214424044();
  }
  return sub_2141DD370((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EC3E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  _OWORD v10[2];
  char v11;

  v3 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (double *)&v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for SgRectangle(0);
  sub_2141FDEA0(v1 + *(int *)(v6 + 44), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  v9 = v1;
  if (v5[11] == 1.0)
  {
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303ACC, (uint64_t)v8);
  }
  else
  {
    sub_214424038();
    sub_214424044();
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303ACC, (uint64_t)v8);
    sub_214424044();
  }
  return sub_2141DD370((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EC52C(uint64_t *a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[40];

  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for SgRectangle(0);
  sub_2141FDEA0((uint64_t)a3 + *(int *)(v8 + 44), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  if (*(_QWORD *)&v7[*(int *)(v5 + 36)])
  {
    v10 = *a1;
    swift_retain();
    swift_retain();
    sub_214424BA8();
    sub_214423F84();
    sub_2141FE404((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    sub_2142ECD10((uint64_t)&v10, a3);
    swift_release();
    swift_release();
  }
  else
  {
    sub_2142ECD10((uint64_t)a1, a3);
  }
  return sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EC68C(_QWORD *a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  _QWORD v28[2];
  _BYTE v29[40];
  _BYTE v30[40];

  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for SgSector(0);
  sub_2141FDEA0((uint64_t)a3 + v8[12], (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  sub_2142EE044();
  if (*(_QWORD *)&v7[*(int *)(v5 + 36)])
  {
    v28[1] = *a1;
    swift_retain();
    swift_retain();
    sub_214424BA8();
    sub_214423F84();
    sub_2141FE404((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    v9 = a3[3];
    v10 = a3[4];
    v11 = (a3[1] + 270.0) * 3.14159265 / 180.0;
    v12 = a3[5];
    v13 = (a3[2] + 270.0) * 3.14159265 / 180.0;
    sub_214424404();
    sub_21436E3B8((uint64_t)a3 + v8[11], *((_BYTE *)a3 + v8[14]), (uint64_t)v30, v9, v10, v11, v13, v12, v14, v15, v16, v17, *(_QWORD *)((char *)a3 + v8[13]), *(_QWORD *)((char *)a3 + v8[13] + 8));
    sub_214423FC0();
    sub_2141FE404((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    swift_release();
    swift_release();
  }
  else
  {
    v18 = a3[3];
    v19 = a3[4];
    v20 = (a3[1] + 270.0) * 3.14159265 / 180.0;
    v21 = a3[5];
    v22 = (a3[2] + 270.0) * 3.14159265 / 180.0;
    sub_214424404();
    sub_21436E3B8((uint64_t)a3 + v8[11], *((_BYTE *)a3 + v8[14]), (uint64_t)v30, v18, v19, v20, v22, v21, v23, v24, v25, v26, *(_QWORD *)((char *)a3 + v8[13]), *(_QWORD *)((char *)a3 + v8[13] + 8));
    sub_214423FC0();
    sub_2141FE404((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  }
  return sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EC988(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  _BYTE v11[40];
  _BYTE v12[40];

  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SgArea(0);
  sub_2141FDEA0(a3 + *(int *)(v8 + 32), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  sub_2142FF218();
  if (*(_QWORD *)&v7[*(int *)(v5 + 36)])
  {
    v10[1] = *a1;
    swift_retain();
    swift_retain();
    sub_214424BA8();
    sub_214423F84();
    sub_2141FE404((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    sub_2142FF078((uint64_t)v12);
    sub_214423FC0();
    sub_2141FE404((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    swift_release();
    swift_release();
  }
  else
  {
    sub_2142FF078((uint64_t)v12);
    sub_214423FC0();
    sub_2141FE404((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  }
  return sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142ECB48(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  _BYTE v11[40];
  _BYTE v12[40];

  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SgRule(0);
  sub_2141FDEA0(a3 + *(int *)(v8 + 36), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  if (*(_QWORD *)&v7[*(int *)(v5 + 36)])
  {
    v10[1] = *a1;
    swift_retain();
    swift_retain();
    sub_214424BA8();
    sub_214423F84();
    sub_2141FE404((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    sub_2142EE0E8((uint64_t)v12);
    sub_214423FC0();
    sub_2141FE404((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    swift_release();
    swift_release();
  }
  else
  {
    sub_2142EE0E8((uint64_t)v12);
    sub_214423FC0();
    sub_2141FE404((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  }
  return sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142ECD10(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v2 = a2[5];
  v3 = a2[6];
  v4 = a2[7];
  v5 = a2[8];
  sub_2141D8BF8(&qword_253F13D68);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21442C470;
  *(double *)(inited + 32) = v2;
  *(double *)(inited + 40) = v5;
  *(double *)(inited + 48) = v4;
  *(double *)(inited + 56) = v3;
  v7 = swift_bridgeObjectRelease();
  if (v2 < 2.22044605e-16 && v5 < 2.22044605e-16 && v4 < 2.22044605e-16 && v3 < 2.22044605e-16)
  {
    sub_21442477C();
  }
  else
  {
    MEMORY[0x24BDAC7A8](v7);
    sub_214424794();
  }
  sub_214423FC0();
  return sub_2141EEF3C(v12, v13, v14, v15, v16);
}

uint64_t sub_2142ECE80(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v3 = sub_2141D8BF8(&qword_253F134C8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_214424308();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v33 - v13;
  v37 = *a1;
  v15 = *((_QWORD *)a1 + 1);
  v16 = v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141FDEA0(v16, (uint64_t)v14, type metadata accessor for ChartContentRenderContext.Environment);
  v34 = type metadata accessor for RectanglesRenderer(0);
  v17 = v1 + *(int *)(v34 + 32);
  sub_2141E0750(v17, qword_254D69B70);
  sub_2141FDEA0((uint64_t)v14, v17, type metadata accessor for ChartContentRenderContext.Environment);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + 40) = v37;
  *(_QWORD *)(v1 + 48) = v15;
  sub_2141E070C((uint64_t)&v14[*(int *)(v9 + 44)], (uint64_t)v5, &qword_253F134C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v18 = v35;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v35, *MEMORY[0x24BDEEB68], v6);
    sub_2141E0750((uint64_t)v5, &qword_253F134C8);
  }
  else
  {
    v18 = v35;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v35, v5, v6);
  }
  v19 = (uint64_t)v36;
  v20 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v1 + *(int *)(v34 + 40), v18, v6);
  v21 = *((_QWORD *)v14 + 22);
  v22 = *((_QWORD *)v14 + 23);
  v23 = *((_QWORD *)v14 + 24);
  v24 = *((_QWORD *)v14 + 25);
  v25 = v14[208];
  sub_2141FDEA0((uint64_t)v14, v19, type metadata accessor for ChartContentRenderContext.Environment);
  if (v25 != 1)
    goto LABEL_8;
  if ((*(_BYTE *)(v19 + 168) & 1) == 0)
  {
    sub_214424404();
    v21 = v27;
    v22 = v28;
    v23 = v29;
    v24 = v30;
LABEL_8:
    v26 = 0;
    goto LABEL_9;
  }
  v26 = 1;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
LABEL_9:
  sub_2141DD370(v19, type metadata accessor for ChartContentRenderContext.Environment);
  result = sub_2141DD370((uint64_t)v14, type metadata accessor for ChartContentRenderContext.Environment);
  v32 = v1 + *(int *)(v20 + 36);
  *(_QWORD *)v32 = v21;
  *(_QWORD *)(v32 + 8) = v22;
  *(_QWORD *)(v32 + 16) = v23;
  *(_QWORD *)(v32 + 24) = v24;
  *(_BYTE *)(v32 + 32) = v26;
  return result;
}

uint64_t sub_2142ED198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  char v42;

  v34 = a4;
  v37 = a2;
  sub_2141D7924(&qword_253F11910);
  v8 = sub_214424110();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - v10;
  sub_2141D7924(&qword_253F10168);
  v12 = sub_214424110();
  v13 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  v35 = v15;
  v36 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v16 = v40;
    v17 = v41;
    v18 = v42;
    v34 = a5;
    swift_retain();
    v19 = sub_214424800();
    v21 = v20;
    v23 = v22;
    v25 = v24;
    swift_release();
    v26 = v23 & 1;
    sub_2141ED0BC(v16, v17, v18);
    swift_release();
    a5 = v34;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v36, a3);
    v28 = v37;
  }
  else
  {
    swift_retain();
    v29 = v34;
    sub_214424920();
    swift_release();
    v40 = v37;
    v30 = sub_2141D9054(&qword_253F10C38, &qword_253F11910, MEMORY[0x24BDF1028]);
    v39[0] = v29;
    v39[1] = v30;
    v31 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v8, v39);
    sub_21442489C();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v32 = sub_2141D9054(&qword_253F10160, &qword_253F10168, MEMORY[0x24BDF0710]);
    v38[0] = v31;
    v38[1] = v32;
    MEMORY[0x2199CD934](MEMORY[0x24BDED308], v12, v38);
    v19 = sub_214424B18();
    swift_release();
    swift_release();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v36, a3);
    v21 = 0;
    v25 = 0;
    v28 = 0;
    v26 = 0x8000000000000000;
  }
  *a5 = v19;
  a5[1] = v21;
  a5[2] = v26;
  a5[3] = v25;
  a5[4] = v28;
  return result;
}

uint64_t sub_2142ED48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[4];
  unsigned __int8 v46;
  uint64_t v47;

  v40 = a4;
  v43 = a2;
  sub_2141D7924(&qword_253F11910);
  v8 = sub_214424110();
  v41 = *(uint64_t **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v35 - v9;
  sub_2141D7924(&qword_253F11FB0);
  v11 = sub_214424110();
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v42 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v37 = v45[3];
    v38 = v45[2];
    v36 = v46;
    v40 = v47;
    swift_retain();
    v15 = sub_214424800();
    v17 = v16;
    v19 = v18;
    swift_release();
    v39 = a1;
    v41 = a5;
    v20 = v19 & 1;
    swift_retain();
    v35 = sub_2144247DC();
    v22 = v21;
    v24 = v23;
    v26 = v25;
    swift_release();
    v27 = v24 & 1;
    v28 = v20;
    a5 = v41;
    sub_2141ED0BC(v15, v17, v28);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v38, v37, v36);
    v29 = v35;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v39, a3);
  }
  else
  {
    v39 = v11;
    swift_retain();
    v31 = v40;
    sub_214424920();
    swift_release();
    v32 = sub_2141D9054(&qword_253F10C38, &qword_253F11910, MEMORY[0x24BDF1028]);
    v45[0] = v31;
    v45[1] = v32;
    swift_retain();
    v33 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v8, v45);
    sub_214424890();
    swift_release();
    ((void (*)(char *, uint64_t))v41[1])(v10, v8);
    v34 = sub_2141D9054(&qword_253F11918, &qword_253F11FB0, MEMORY[0x24BDF1028]);
    v44[0] = v33;
    v44[1] = v34;
    MEMORY[0x2199CD934](MEMORY[0x24BDED308], v39, v44);
    v29 = sub_214424B18();
    swift_release();
    swift_release();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(a1, a3);
    v22 = 0;
    v26 = 0;
    v27 = 0x8000000000000000;
  }
  *a5 = v29;
  a5[1] = v22;
  a5[2] = v27;
  a5[3] = v26;
  a5[4] = 0;
  return result;
}

double sub_2142ED800()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  char v13;

  sub_2142AAEB4(v0 + 48, (uint64_t)v11);
  if (v13 == 1)
  {
    v1 = *((double *)v11 + 1);
    swift_release();
  }
  else
  {
    v8 = v11[0];
    v9 = v11[1];
    v10 = v12;
    if (*(_BYTE *)(v0 + 40) != 1)
    {
      v3 = *(double *)(v0 + 8);
      v4 = *((_QWORD *)&v9 + 1);
      v5 = v10;
      v6 = sqrt(*(double *)(v0 + 24));
      sub_2141E88D0(&v8, *((uint64_t *)&v9 + 1));
      v2 = v3 + v6 * ((*(double (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5) + -0.5);
      sub_2143039E0((uint64_t)&v8);
      return v2;
    }
    v1 = *(double *)(v0 + 24);
    sub_2143039E0((uint64_t)&v8);
  }
  return *(double *)(v0 + 8) - v1 * 0.5;
}

uint64_t sub_2142ED920(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[40];

  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for SgPoint(0);
  sub_2141FDEA0((uint64_t)v2 + *(int *)(v8 + 36), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  sub_2142ED800();
  if (*(_QWORD *)&v7[*(int *)(v5 + 36)])
  {
    v10 = *a1;
    swift_retain();
    swift_retain();
    sub_214424BA8();
    sub_214423F84();
    sub_2141FE404((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    sub_2142EDA98((uint64_t)&v10, v2, a2);
    swift_release();
    swift_release();
  }
  else
  {
    sub_2142EDA98((uint64_t)a1, v2, a2);
  }
  return sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EDA98(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  char v30;
  _BYTE v31[40];
  _OWORD v32[2];
  char v33;
  CGRect v34;

  v24[1] = a3;
  v5 = sub_2141D8BF8(&qword_253F13488);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_214423F78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (double *)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_2144240D4();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a1;
  sub_2144240A4();
  sub_2142AAEB4((uint64_t)(a2 + 6), (uint64_t)v28);
  if ((v30 & 1) != 0)
  {
    swift_release();
    *(_QWORD *)&v25 = *a2;
    sub_214423F6C();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_2141E0750((uint64_t)v7, &qword_253F13488);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      type metadata accessor for RenderParams(0);
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BDED118], v15);
      v22 = sub_2144240C8();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if ((v22 & 1) != 0)
      {
        sub_214424068();
        sub_214423F48();
      }
      sub_214424CE0();
      sub_214423F9C();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  else
  {
    v25 = v28[0];
    v26 = v28[1];
    v27 = v29;
    sub_2142ED800();
    sub_2141E88D0(&v25, *((uint64_t *)&v26 + 1));
    sub_214424A10();
    type metadata accessor for RenderParams(0);
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BDED118], v15);
    v19 = sub_2144240C8();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v20 = v24[0];
    if ((v19 & 1) != 0)
    {
      sub_214424068();
      sub_2144246D4();
      CGRectGetMidX(v34);
      sub_214423F48();
    }
    v21 = type metadata accessor for SgPoint(0);
    sub_2141FDEA0((uint64_t)a2 + *(int *)(v21 + 36), (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
    memset(v32, 0, sizeof(v32));
    v33 = 1;
    if (v14[11] == 1.0)
    {
      sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
      sub_2141FD5CC(v20, (uint64_t)v14, (uint64_t)v32, (uint64_t)v31);
    }
    else
    {
      sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
      sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
      sub_214424038();
      sub_214424044();
      sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
      sub_2141FD5CC(v20, (uint64_t)v14, (uint64_t)v32, (uint64_t)v31);
      sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
      sub_214424044();
      sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    }
    sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    sub_2141DD370((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
    sub_2143039E0((uint64_t)&v25);
    sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  }
  return sub_2144240B0();
}

uint64_t sub_2142EDF9C()
{
  type metadata accessor for SgRectangle(0);
  return sub_2144246EC();
}

double sub_2142EE044()
{
  double *v0;
  double v1;
  double v2;

  v1 = v0[3] * 0.382 + v0[4] * 0.618;
  v2 = v1 * __sincos_stret(((v0[8] + v0[16]) * 0.5 + 270.0) * 3.14159265 / 180.0).__cosval;
  type metadata accessor for SgSector(0);
  return v2;
}

double sub_2142EE0E8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  char v32;
  _BYTE v33[40];

  sub_214424770();
  sub_2144246F8();
  sub_21442471C();
  v31[0] = v13;
  v31[1] = v14;
  v32 = v15;
  v3 = v1 + *(int *)(type metadata accessor for SgRule(0) + 36);
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 80);
    v6 = *(_QWORD *)(v3 + 64);
    v7 = *(_DWORD *)(v3 + 56);
    v8 = *(_DWORD *)(v3 + 60);
    v9 = *(_QWORD *)(v3 + 48);
    sub_2141FE3B0((uint64_t)v31, (uint64_t)&v16);
    sub_2141FE404((uint64_t)&v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    v10 = v4;
  }
  else
  {
    sub_2141FE3B0((uint64_t)v31, (uint64_t)v33);
    sub_2141FE404((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    sub_214423D80();
    v9 = v16;
    v7 = v17;
    v8 = v18;
    v6 = v19;
    v10 = v20;
    v5 = v21;
  }
  v25 = v9;
  v26 = v7;
  v27 = v8;
  v28 = v6;
  v29 = v10;
  v30 = v5;
  swift_bridgeObjectRetain();
  sub_2144246B0();
  sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  swift_bridgeObjectRelease();
  sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  result = *(double *)&v22;
  v12 = v23;
  *(_OWORD *)a1 = v22;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v24;
  return result;
}

uint64_t type metadata accessor for SgLine.Points()
{
  return objc_opt_self();
}

__n128 sub_2142EE288@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __n128 result;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[8];
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[40];
  __n128 v43;
  __int128 v44;
  char v45;

  v2 = v1;
  sub_214357DDC(*(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  v4 = *(_QWORD *)(v1 + 8);
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v27 = a1;
    v43.n128_u64[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2141D4150(0, v6, 0);
    v8 = v5 + 32;
    v7 = v43.n128_u64[0];
    do
    {
      sub_2143035C0(v8, (uint64_t)&v34);
      v9 = v35;
      v10 = v36;
      v11 = (~v35 & 0x7FF0000000000000) != 0;
      sub_2143035C0((uint64_t)&v34, (uint64_t)v28);
      if ((~v31 & 0x7FF0000000000000) == 0)
        v11 = 0;
      sub_2143035F4((uint64_t)v28);
      sub_2143035F4((uint64_t)&v34);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D4150(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v43.n128_u64[0];
      }
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2141D4150((char *)(v12 > 1), v13 + 1, 1);
        v7 = v43.n128_u64[0];
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      v14 = v7 + 24 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v10;
      *(_BYTE *)(v14 + 48) = v11;
      v8 += 96;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    a1 = v27;
  }
  v15 = v40;
  v16 = v41;
  sub_2142AB2FC((uint64_t)v39, v40);
  sub_214357FFC(v7, v15, v16, (uint64_t)v42);
  swift_bridgeObjectRelease();
  v17 = *(int *)(type metadata accessor for SgLine(0) + 32);
  v18 = v2 + v17;
  if (*(_QWORD *)(v2 + v17 + 72))
  {
    v19 = (uint64_t *)(v18 + 48);
    v20 = *(_QWORD *)(v18 + 80);
    v21 = *(_QWORD *)(v18 + 64);
    v22 = *(_QWORD *)(v2 + v17 + 72);
    v23 = *(_DWORD *)(v18 + 56);
    v24 = *(_DWORD *)(v18 + 60);
  }
  else
  {
    v19 = (uint64_t *)v28;
    sub_214423D80();
    v23 = v29;
    v24 = v30;
    v21 = v31;
    v22 = v32;
    v20 = v33;
  }
  v34 = *v19;
  v35 = __PAIR64__(v24, v23);
  v36 = v21;
  v37 = v22;
  v38 = v20;
  swift_bridgeObjectRetain();
  sub_2144246B0();
  sub_2141FE404((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  swift_bridgeObjectRelease();
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v39);
  result = v43;
  v26 = v44;
  *(__n128 *)a1 = v43;
  *(_OWORD *)(a1 + 16) = v26;
  *(_BYTE *)(a1 + 32) = v45;
  return result;
}

uint64_t sub_2142EE514(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  char v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[40];

  v3 = v2;
  v29 = a2;
  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_2142E8120(v8);
  swift_bridgeObjectRelease();
  v10 = COERCE_DOUBLE(sub_2142E95B8(v9));
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0
    || (v15 = swift_bridgeObjectRetain(),
        v16 = sub_2142E81E0(v15),
        swift_bridgeObjectRelease(),
        v17 = COERCE_DOUBLE(sub_2142E95B8(v16)),
        v19 = v18,
        v21 = v20,
        swift_bridgeObjectRelease(),
        (v21 & 1) != 0))
  {
    v22 = *MEMORY[0x24BDBF070];
    v23 = *(double *)(MEMORY[0x24BDBF070] + 8);
    v24 = *(double *)(MEMORY[0x24BDBF070] + 16);
    v25 = *(double *)(MEMORY[0x24BDBF070] + 24);
  }
  else
  {
    v22 = v10;
    v23 = v17;
    v24 = v12 - v10;
    v25 = v19 - v17;
  }
  v26 = type metadata accessor for SgLine(0);
  sub_2141FDEA0(v3 + *(int *)(v26 + 32), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  if (*(_QWORD *)&v7[*(int *)(v5 + 36)])
  {
    v30 = *a1;
    swift_retain();
    swift_retain();
    sub_214424BA8();
    sub_214423F84();
    sub_2141FE404((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    sub_2142EE764(&v30, v3, v29, v22, v23, v24, v25);
    swift_release();
    swift_release();
  }
  else
  {
    sub_2142EE764(a1, v3, v29, v22, v23, v24, v25);
  }
  return sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142EE764(uint64_t *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char *v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  _QWORD v52[2];
  double *v53;
  uint64_t *v54;
  double v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  char v75;

  v55 = a7;
  v13 = sub_2141D8BF8(&qword_253F13488);
  MEMORY[0x24BDAC7A8](v13);
  v60 = (__int128 *)((char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_214423F78();
  v58 = *(_QWORD *)(v15 - 8);
  v59 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v57 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (double *)((char *)v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(_QWORD *)(a2 + 8);
  swift_beginAccess();
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 16);
  if (v21)
  {
    v52[1] = a3;
    v53 = v19;
    v54 = a1;
    v52[0] = swift_bridgeObjectRetain();
    v22 = (unsigned __int8 *)(v52[0] + 120);
    v23 = (char *)MEMORY[0x24BEE4AF8];
    v56 = a2;
    while (1)
    {
      sub_2141E070C((uint64_t)(v22 - 64), (uint64_t)&v66, &qword_253F12208);
      if (v69 == 255)
      {
        sub_2141E0750((uint64_t)&v66, &qword_253F12208);
      }
      else
      {
        if ((v69 & 1) == 0)
        {
          v70 = v66;
          v71 = v67;
          v72 = v68;
          v24 = *v22;
          if (v24 != 255)
          {
            type metadata accessor for SgLine(0);
            sub_2141D7878((uint64_t)&v70, (uint64_t)v64);
            sub_2141D8BF8(&qword_253F0FF50);
            sub_2141D8BF8(&qword_253F0FF40);
            if (swift_dynamicCast())
            {
              sub_214303A58(&v61, &v66);
              v26 = *((_QWORD *)&v67 + 1);
              v27 = v68;
              v28 = v69;
              sub_2141E88D0(&v66, *((uint64_t *)&v67 + 1));
              *((_QWORD *)&v62 + 1) = type metadata accessor for StrokedSymbolShape(0, v26, v27, v28);
              *(_QWORD *)&v63 = MEMORY[0x2199CD934](&unk_214432B94, *((_QWORD *)&v62 + 1));
              v29 = sub_2141D8DD8((uint64_t *)&v61);
              ChartSymbolShape<>.strokeBorder(lineWidth:)(v26, v27, v28, (uint64_t)v29);
              _s6Charts15AnyChartContentVwxx_0((uint64_t)&v66);
            }
            else
            {
              v62 = 0u;
              v63 = 0u;
              v61 = 0u;
              sub_2141E0750((uint64_t)&v61, &qword_253F0FF48);
              sub_2141D7878((uint64_t)&v70, (uint64_t)&v66);
              if ((swift_dynamicCast() & 1) != 0)
              {
                v30 = v61;
                v31 = BYTE8(v61);
                if (BYTE8(v61) >= 5u)
                  __asm { BR              X8 }
                *((_QWORD *)&v62 + 1) = &type metadata for BasicChartSymbolShape;
                *(_QWORD *)&v63 = sub_214303A14();
                *(_QWORD *)&v61 = v30;
                BYTE8(v61) = v31;
              }
              else
              {
                v61 = 0u;
                v62 = 0u;
                *(_QWORD *)&v63 = 0;
              }
            }
            sub_2141F9E40((uint64_t)&v70, (uint64_t)v64);
            if (*((_QWORD *)&v62 + 1))
            {
              sub_2143039E0((uint64_t)v64);
              v66 = v61;
              v67 = v62;
              v68 = v63;
              if ((v24 & 1) == 0)
                goto LABEL_18;
            }
            else
            {
              v66 = v64[0];
              v67 = v64[1];
              v68 = v65;
              sub_2141E0750((uint64_t)&v61, (uint64_t *)&unk_253F0FF58);
              if ((v24 & 1) == 0)
              {
LABEL_18:
                v32 = *((_QWORD *)&v67 + 1);
                v33 = v68;
                sub_2141E88D0(&v66, *((uint64_t *)&v67 + 1));
                (*(void (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
              }
            }
            a2 = v56;
            sub_2141E88D0(&v66, *((uint64_t *)&v67 + 1));
            sub_214424A10();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v23 = sub_2142264AC(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
            v35 = *((_QWORD *)v23 + 2);
            v34 = *((_QWORD *)v23 + 3);
            if (v35 >= v34 >> 1)
              v23 = sub_2142264AC((char *)(v34 > 1), v35 + 1, 1, v23);
            *((_QWORD *)v23 + 2) = v35 + 1;
            v36 = &v23[40 * v35];
            v37 = v73;
            v38 = v74;
            v36[64] = v75;
            *((_OWORD *)v36 + 2) = v37;
            *((_OWORD *)v36 + 3) = v38;
            sub_2143039E0((uint64_t)&v66);
          }
          sub_2143039E0((uint64_t)&v70);
          goto LABEL_4;
        }
        sub_21420D730((uint64_t)&v66);
      }
LABEL_4:
      v22 += 96;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        v19 = v53;
        a1 = v54;
        goto LABEL_29;
      }
    }
  }
  v23 = (char *)MEMORY[0x24BEE4AF8];
LABEL_29:
  sub_2142EE288((uint64_t)v64);
  v39 = type metadata accessor for SgLine(0);
  sub_2141FDEA0(a2 + *(int *)(v39 + 32), (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  *(double *)&v70 = a4;
  *((double *)&v70 + 1) = a5;
  *(double *)&v71 = a6;
  *((double *)&v71 + 1) = v55;
  LOBYTE(v72) = 0;
  if (v19[11] == 1.0)
  {
    swift_bridgeObjectRetain();
    sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    sub_2141FD810(a1, (uint64_t)v19, (uint64_t)&v70, (uint64_t)v23, (uint64_t)v64);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    swift_bridgeObjectRetain();
    sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    sub_214424038();
    sub_214424044();
    swift_bridgeObjectRetain();
    sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    sub_2141FD810(a1, (uint64_t)v19, (uint64_t)&v70, (uint64_t)v23, (uint64_t)v64);
    sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    swift_bridgeObjectRelease();
    sub_214424044();
    swift_bridgeObjectRelease();
  }
  sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  swift_bridgeObjectRelease();
  sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  sub_2141DD370((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  swift_bridgeObjectRelease();
  v40 = *(_QWORD *)(a2 + 8);
  swift_beginAccess();
  v56 = *(_QWORD *)(v40 + 16);
  v41 = *(_QWORD *)(v56 + 16);
  if (v41)
  {
    v42 = v56 + 32;
    swift_bridgeObjectRetain();
    v43 = v59;
    v44 = v60;
    v45 = v58;
    while (1)
    {
      sub_2143035C0(v42, (uint64_t)&v66);
      sub_2141E070C((uint64_t)&v67 + 8, (uint64_t)&v61, &qword_253F12208);
      if (BYTE8(v63) == 255)
        break;
      if ((BYTE8(v63) & 1) != 0)
      {
        swift_release();
        *(_QWORD *)&v61 = v66;
        sub_214423F6C();
        if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v45 + 48))(v44, 1, v43) != 1)
        {
          v48 = a1;
          v49 = v57;
          (*(void (**)(char *, __int128 *, uint64_t))(v45 + 32))(v57, v44, v43);
          sub_214424CE0();
          sub_214423F9C();
          v50 = v49;
          a1 = v48;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v50, v43);
          sub_2143035F4((uint64_t)&v66);
          goto LABEL_35;
        }
        sub_2143035F4((uint64_t)&v66);
        v46 = v44;
        v47 = &qword_253F13488;
        goto LABEL_41;
      }
      sub_2143035F4((uint64_t)&v66);
      sub_21420D730((uint64_t)&v61);
LABEL_35:
      v42 += 96;
      if (!--v41)
      {
        swift_bridgeObjectRelease();
        return sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
      }
    }
    sub_2143035F4((uint64_t)&v66);
    v46 = &v61;
    v47 = &qword_253F12208;
LABEL_41:
    sub_2141E0750((uint64_t)v46, v47);
    goto LABEL_35;
  }
  return sub_2141FE404((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
}

uint64_t sub_2142EEFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[40];
  _OWORD v14[2];
  char v15;
  _BYTE v16[40];
  uint64_t v17;

  v4 = sub_21442402C();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v12 = v2;
    swift_bridgeObjectRetain();
    v10 = 32;
    do
    {
      v11 = *(_OWORD *)(v17 + v10 + 16);
      v14[0] = *(_OWORD *)(v17 + v10);
      v14[1] = v11;
      v15 = *(_BYTE *)(v17 + v10 + 32);
      sub_2141FE3B0((uint64_t)v14, (uint64_t)v16);
      sub_2141FE404((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
      sub_2143E817C((uint64_t)v13);
      sub_2144249BC();
      sub_214424014();
      swift_release();
      sub_214423FC0();
      sub_2141FE404((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
      sub_2141FE404((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
      v10 += 40;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2142EF134()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SgArea.Points()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SgArea.Points.Element()
{
  return &type metadata for SgArea.Points.Element;
}

uint64_t sub_2142EF188(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  char v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__dst;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v8 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v7 = *((_BYTE *)a2 + 88);
    if ((v7 & 1) != 0)
    {
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      swift_retain();
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 72) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 48, (uint64_t)(a2 + 6));
    }
    *(_BYTE *)(v4 + 88) = v7;
    v10 = *(int *)(a3 + 36);
    v11 = v4 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = *((_BYTE *)a2 + v10 + 40);
    v28 = a3;
    if ((v13 & 1) != 0)
    {
      v14 = *(_OWORD *)(v12 + 24);
      *(_OWORD *)(v11 + 24) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v11, v12);
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain();
    }
    *(_BYTE *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 41) = *(_BYTE *)(v12 + 41);
    *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
    v15 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v11 + 72) = v15;
    *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
    v16 = type metadata accessor for SgShapeStyle();
    v17 = *(int *)(v16 + 32);
    __dst = (void *)(v11 + v17);
    v18 = (const void *)(v12 + v17);
    v19 = sub_214424C68();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      v22 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(__dst, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    v23 = *(int *)(v16 + 36);
    v24 = v11 + v23;
    v25 = v12 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_WORD *)(v24 + 8) = *(_WORD *)(v25 + 8);
    *(_QWORD *)(v4 + *(int *)(v28 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(v28 + 40));
  }
  swift_retain();
  return v4;
}

uint64_t sub_2142EF3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + 48;
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    swift_release();
  else
    _s6Charts15AnyChartContentVwxx_0(v4);
  v5 = a1 + *(int *)(a2 + 36);
  if ((*(_BYTE *)(v5 + 40) & 1) != 0)
    _s6Charts15AnyChartContentVwxx_0(v5);
  else
    swift_release();
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for SgShapeStyle() + 32);
  v7 = sub_214424C68();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_release();
}

uint64_t sub_2142EF474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__dst;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 1) != 0)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
  }
  *(_BYTE *)(a1 + 88) = v6;
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(a2 + v8 + 40);
  v26 = a3;
  if ((v11 & 1) != 0)
  {
    v12 = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 24) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v9, v10);
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    swift_retain();
  }
  *(_BYTE *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 41) = *(_BYTE *)(v10 + 41);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
  v13 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v9 + 72) = v13;
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
  v14 = type metadata accessor for SgShapeStyle();
  v15 = *(int *)(v14 + 32);
  __dst = (void *)(v9 + v15);
  v16 = (const void *)(v10 + v15);
  v17 = sub_214424C68();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
  swift_bridgeObjectRetain();
  if (v19(v16, 1, v17))
  {
    v20 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(__dst, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  v21 = *(int *)(v14 + 36);
  v22 = v9 + v21;
  v23 = v10 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_WORD *)(v22 + 8) = *(_WORD *)(v23 + 8);
  *(_QWORD *)(a1 + *(int *)(v26 + 40)) = *(_QWORD *)(a2 + *(int *)(v26 + 40));
  swift_retain();
  return a1;
}

uint64_t sub_2142EF66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  if (a1 == a2)
  {
    v7 = *(int *)(a3 + 36);
    v8 = a1 + v7;
    v9 = a2 + v7;
  }
  else
  {
    sub_21420D730(a1 + 48);
    if ((*(_BYTE *)(a2 + 88) & 1) != 0)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 88) = 1;
      swift_retain();
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 48, a2 + 48);
      *(_BYTE *)(a1 + 88) = 0;
    }
    v11 = *(int *)(a3 + 36);
    v8 = a1 + v11;
    v9 = a2 + v11;
    sub_21420D6FC(a1 + v11);
    if ((*(_BYTE *)(v9 + 40) & 1) != 0)
    {
      v12 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 24) = v12;
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v8, v9);
      *(_BYTE *)(v8 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_BYTE *)(v8 + 40) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_DWORD *)(v8 + 56) = *(_DWORD *)(v9 + 56);
  *(_DWORD *)(v8 + 60) = *(_DWORD *)(v9 + 60);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
  v26 = type metadata accessor for SgShapeStyle();
  v13 = *(int *)(v26 + 32);
  v14 = (void *)(v8 + v13);
  v15 = (void *)(v9 + v13);
  v16 = sub_214424C68();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_15;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_14;
  }
  if (v20)
  {
LABEL_14:
    v21 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_15:
  v22 = *(int *)(v26 + 36);
  v23 = v8 + v22;
  v24 = v9 + v22;
  *(_QWORD *)(v8 + v22) = *(_QWORD *)v24;
  swift_retain();
  swift_release();
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_BYTE *)(v23 + 9) = *(_BYTE *)(v24 + 9);
  *(_QWORD *)(a1 + *(int *)(a3 + 40)) = *(_QWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_2142EF924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(v8 + 25) = *(_OWORD *)(a2 + v7 + 25);
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(a2 + v7 + 41);
  v11 = *(_OWORD *)(a2 + v7 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  v12 = *(_QWORD *)(a2 + v7 + 88);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 + v7 + 80);
  *(_QWORD *)(v8 + 88) = v12;
  v13 = type metadata accessor for SgShapeStyle();
  v14 = *(int *)(v13 + 32);
  v15 = (void *)(v8 + v14);
  v16 = (const void *)(v9 + v14);
  v17 = sub_214424C68();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = *(int *)(v13 + 36);
  v21 = v8 + v20;
  v22 = v9 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_WORD *)(v21 + 8) = *(_WORD *)(v22 + 8);
  *(_QWORD *)(a1 + *(int *)(a3 + 40)) = *(_QWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_2142EFA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (a1 == a2)
  {
    v11 = *(int *)(a3 + 36);
    v8 = a1 + v11;
    v9 = a2 + v11;
  }
  else
  {
    sub_21420D730(a1 + 48);
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    v7 = *(int *)(a3 + 36);
    v8 = a1 + v7;
    v9 = a2 + v7;
    sub_21420D6FC(a1 + v7);
    v10 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v10;
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
  }
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  v12 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = v12;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v9 + 80);
  v26 = type metadata accessor for SgShapeStyle();
  v13 = *(int *)(v26 + 32);
  v14 = (void *)(v8 + v13);
  v15 = (void *)(v9 + v13);
  v16 = sub_214424C68();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_9;
  }
  if (v20)
  {
LABEL_9:
    v21 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_10;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_10:
  v22 = *(int *)(v26 + 36);
  v23 = v8 + v22;
  v24 = v9 + v22;
  *(_QWORD *)v23 = *(_QWORD *)(v9 + v22);
  swift_release();
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_BYTE *)(v23 + 9) = *(_BYTE *)(v24 + 9);
  *(_QWORD *)(a1 + *(int *)(a3 + 40)) = *(_QWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_2142EFC94()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142EFCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for SgShapeStyle();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_2142EFD14()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142EFD20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 40) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for SgShapeStyle();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SgPoint(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15908);
}

uint64_t sub_2142EFDA4()
{
  return sub_2142F8D2C();
}

uint64_t sub_2142EFDB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(v4 + 48) = a2[6];
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    v8 = *(int *)(a3 + 32);
    v9 = (_OWORD *)(v4 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = *((unsigned __int8 *)v10 + 40);
      if (v16 == 255)
      {
        v17 = v10[1];
        *v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if ((v16 & 1) != 0)
      {
        v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((_BYTE *)v9 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_BYTE *)v9 + 40) = 0;
        swift_retain();
      }
      *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      v19 = *((_QWORD *)v10 + 9);
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v19;
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      if (v20 == 255)
      {
        v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if ((v20 & 1) != 0)
      {
        *((_QWORD *)v9 + 11) = *((_QWORD *)v10 + 11);
        v9[6] = v10[6];
        *((_BYTE *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((_BYTE *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
      *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
      *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
      v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
      v24 = v11[11];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = sub_214424308();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = v11[12];
      v31 = (char *)v9 + v30;
      v32 = (char *)v10 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
      v33 = v11[14];
      v34 = (char *)v9 + v33;
      v35 = (char *)v10 + v33;
      v36 = sub_214424C68();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v39 = v11[15];
      v40 = (char *)v9 + v39;
      v41 = (char *)v10 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
      *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
      v42 = v11[18];
      v43 = (char *)v9 + v42;
      v44 = (char *)v10 + v42;
      v45 = *(_QWORD *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        v46 = *(_QWORD *)v44;
        v47 = *((_QWORD *)v44 + 1);
        v48 = v44[16];
        sub_2141DD130(*(_QWORD *)v44, v47, v48);
        *(_QWORD *)v43 = v46;
        *((_QWORD *)v43 + 1) = v47;
        v43[16] = v48;
        v49 = *((_QWORD *)v44 + 4);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
        v50 = *((_QWORD *)v44 + 5);
        v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v49, v50, v51);
        *((_QWORD *)v43 + 4) = v49;
        *((_QWORD *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((_QWORD *)v43 + 8) = *((_QWORD *)v44 + 8);
        v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      v54 = v11[19];
      v55 = (char *)v9 + v54;
      v56 = (char *)v10 + v54;
      if (*(_QWORD *)((char *)v10 + v54 + 24))
      {
        v57 = *(_QWORD *)v56;
        v58 = *((_QWORD *)v56 + 1);
        v59 = v56[16];
        sub_2141DD130(*(_QWORD *)v56, v58, v59);
        *(_QWORD *)v55 = v57;
        *((_QWORD *)v55 + 1) = v58;
        v55[16] = v59;
        v60 = *((_QWORD *)v56 + 4);
        *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
        v61 = *((_QWORD *)v56 + 5);
        v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v60, v61, v62);
        *((_QWORD *)v55 + 4) = v60;
        *((_QWORD *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
        v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      v65 = v11[20];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      if (*(_QWORD *)((char *)v10 + v65 + 24))
      {
        v68 = *(_QWORD *)v67;
        v69 = *((_QWORD *)v67 + 1);
        v70 = v67[16];
        sub_2141DD130(*(_QWORD *)v67, v69, v70);
        *(_QWORD *)v66 = v68;
        *((_QWORD *)v66 + 1) = v69;
        v66[16] = v70;
        v71 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
        v72 = *((_QWORD *)v67 + 5);
        v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v71, v72, v73);
        *((_QWORD *)v66 + 4) = v71;
        *((_QWORD *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((_QWORD *)v66 + 8) = *((_QWORD *)v67 + 8);
        v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      v76 = v11[21];
      v77 = (char *)v9 + v76;
      v78 = (char *)v10 + v76;
      if (*(_QWORD *)((char *)v10 + v76 + 24))
      {
        v79 = *(_QWORD *)v78;
        v80 = *((_QWORD *)v78 + 1);
        v81 = v78[16];
        sub_2141DD130(*(_QWORD *)v78, v80, v81);
        *(_QWORD *)v77 = v79;
        *((_QWORD *)v77 + 1) = v80;
        v77[16] = v81;
        v82 = *((_QWORD *)v78 + 4);
        *((_QWORD *)v77 + 3) = *((_QWORD *)v78 + 3);
        v83 = *((_QWORD *)v78 + 5);
        v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v82, v83, v84);
        *((_QWORD *)v77 + 4) = v82;
        *((_QWORD *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((_QWORD *)v77 + 8) = *((_QWORD *)v78 + 8);
        v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      v87 = v11[22];
      v88 = (char *)v9 + v87;
      v89 = (char *)v10 + v87;
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
      v90 = v11[23];
      v91 = (char *)v9 + v90;
      v92 = (char *)v10 + v90;
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
      v93 = v11[24];
      v94 = (char *)v9 + v93;
      v95 = (char *)v10 + v93;
      if (*(_QWORD *)((char *)v10 + v93 + 24))
      {
        v96 = *(_QWORD *)v95;
        v97 = *((_QWORD *)v95 + 1);
        v98 = v95[16];
        sub_2141DD130(*(_QWORD *)v95, v97, v98);
        *(_QWORD *)v94 = v96;
        *((_QWORD *)v94 + 1) = v97;
        v94[16] = v98;
        *((_QWORD *)v94 + 3) = *((_QWORD *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      v100 = v11[25];
      v101 = (char *)v9 + v100;
      v102 = (char *)v10 + v100;
      if (*(_QWORD *)((char *)v10 + v100 + 24))
      {
        v103 = *(_QWORD *)v102;
        v104 = *((_QWORD *)v102 + 1);
        v105 = v102[16];
        sub_2141DD130(*(_QWORD *)v102, v104, v105);
        *(_QWORD *)v101 = v103;
        *((_QWORD *)v101 + 1) = v104;
        v101[16] = v105;
        *((_QWORD *)v101 + 3) = *((_QWORD *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      v107 = v11[26];
      v108 = (_QWORD *)((char *)v9 + v107);
      v109 = (_QWORD *)((char *)v10 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = v11[27];
      v112 = (char *)v9 + v111;
      v113 = (char *)v10 + v111;
      v114 = *((_QWORD *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((_QWORD *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t sub_2142F04A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = *(unsigned __int8 *)(v4 + 40);
    if (v7 != 255)
    {
      if ((v7 & 1) != 0)
        _s6Charts15AnyChartContentVwxx_0(v4);
      else
        swift_release();
    }
    swift_bridgeObjectRelease();
    v8 = *(unsigned __int8 *)(v4 + 128);
    if (v8 != 255)
    {
      if ((v8 & 1) != 0)
        swift_release();
      else
        _s6Charts15AnyChartContentVwxx_0(v4 + 88);
    }
    v9 = v4 + v5[11];
    v10 = sub_214424308();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v12 = v4 + v5[14];
    v13 = sub_214424C68();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    swift_release();
    v15 = v4 + v5[18];
    if (*(_QWORD *)(v15 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_BYTE *)(v15 + 48));
    }
    v16 = v4 + v5[19];
    if (*(_QWORD *)(v16 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_BYTE *)(v16 + 48));
    }
    v17 = v4 + v5[20];
    if (*(_QWORD *)(v17 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_BYTE *)(v17 + 48));
    }
    v18 = v4 + v5[21];
    if (*(_QWORD *)(v18 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v18 + 32), *(_QWORD *)(v18 + 40), *(_BYTE *)(v18 + 48));
    }
    v19 = v4 + v5[24];
    if (*(_QWORD *)(v19 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
      swift_bridgeObjectRelease();
    }
    v20 = v4 + v5[25];
    if (*(_QWORD *)(v20 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = v4 + v5[27];
    if (*(_QWORD *)(result + 24))
      return _s6Charts15AnyChartContentVwxx_0(result);
  }
  return result;
}

uint64_t sub_2142F0718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, uint64_t, int *);
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(int *)(a3 + 32);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48);
  swift_retain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *((unsigned __int8 *)v9 + 40);
    if (v14 == 255)
    {
      v15 = v9[1];
      *v8 = *v9;
      v8[1] = v15;
      *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v9 + 25);
    }
    else if ((v14 & 1) != 0)
    {
      v16 = *(_OWORD *)((char *)v9 + 24);
      *(_OWORD *)((char *)v8 + 24) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v8, v9);
      *((_BYTE *)v8 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_BYTE *)v8 + 40) = 0;
      swift_retain();
    }
    *((_BYTE *)v8 + 41) = *((_BYTE *)v9 + 41);
    *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    v17 = *((_QWORD *)v9 + 9);
    *((_QWORD *)v8 + 8) = *((_QWORD *)v9 + 8);
    *((_QWORD *)v8 + 9) = v17;
    *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
    v18 = *((unsigned __int8 *)v9 + 128);
    swift_bridgeObjectRetain();
    if (v18 == 255)
    {
      v19 = *(_OWORD *)((char *)v9 + 104);
      *(_OWORD *)((char *)v8 + 88) = *(_OWORD *)((char *)v9 + 88);
      *(_OWORD *)((char *)v8 + 104) = v19;
      *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)((char *)v9 + 113);
    }
    else if ((v18 & 1) != 0)
    {
      *((_QWORD *)v8 + 11) = *((_QWORD *)v9 + 11);
      v8[6] = v9[6];
      *((_BYTE *)v8 + 128) = 1;
      swift_retain();
    }
    else
    {
      v20 = v9[7];
      v8[7] = v20;
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)v8 + 88, (uint64_t)v9 + 88);
      *((_BYTE *)v8 + 128) = 0;
    }
    *(_OWORD *)((char *)v8 + 136) = *(_OWORD *)((char *)v9 + 136);
    *((_BYTE *)v8 + 152) = *((_BYTE *)v9 + 152);
    *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
    *((_BYTE *)v8 + 168) = *((_BYTE *)v9 + 168);
    v21 = v9[12];
    v8[11] = v9[11];
    v8[12] = v21;
    *((_BYTE *)v8 + 208) = *((_BYTE *)v9 + 208);
    v22 = v10[11];
    v23 = (char *)v8 + v22;
    v24 = (char *)v9 + v22;
    v25 = sub_214424308();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = v10[12];
    v29 = (char *)v8 + v28;
    v30 = (char *)v9 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    v31 = v10[14];
    v32 = (char *)v8 + v31;
    v33 = (char *)v9 + v31;
    v34 = sub_214424C68();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v10[15];
    v38 = (char *)v8 + v37;
    v39 = (char *)v9 + v37;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_WORD *)v38 + 4) = *((_WORD *)v39 + 4);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    *(_QWORD *)((char *)v8 + v10[17]) = *(_QWORD *)((char *)v9 + v10[17]);
    v40 = v10[18];
    v41 = (char *)v8 + v40;
    v42 = (char *)v9 + v40;
    v43 = *(_QWORD *)((char *)v9 + v40 + 24);
    swift_retain();
    if (v43)
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      v46 = v42[16];
      sub_2141DD130(*(_QWORD *)v42, v45, v46);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v46;
      v47 = *((_QWORD *)v42 + 4);
      *((_QWORD *)v41 + 3) = *((_QWORD *)v42 + 3);
      v48 = *((_QWORD *)v42 + 5);
      v49 = v42[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v47, v48, v49);
      *((_QWORD *)v41 + 4) = v47;
      *((_QWORD *)v41 + 5) = v48;
      v41[48] = v49;
      *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    }
    else
    {
      v50 = *((_OWORD *)v42 + 3);
      *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
      *((_OWORD *)v41 + 3) = v50;
      *((_QWORD *)v41 + 8) = *((_QWORD *)v42 + 8);
      v51 = *((_OWORD *)v42 + 1);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v51;
    }
    v52 = v10[19];
    v53 = (char *)v8 + v52;
    v54 = (char *)v9 + v52;
    if (*(_QWORD *)((char *)v9 + v52 + 24))
    {
      v55 = *(_QWORD *)v54;
      v56 = *((_QWORD *)v54 + 1);
      v57 = v54[16];
      sub_2141DD130(*(_QWORD *)v54, v56, v57);
      *(_QWORD *)v53 = v55;
      *((_QWORD *)v53 + 1) = v56;
      v53[16] = v57;
      v58 = *((_QWORD *)v54 + 4);
      *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
      v59 = *((_QWORD *)v54 + 5);
      v60 = v54[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v58, v59, v60);
      *((_QWORD *)v53 + 4) = v58;
      *((_QWORD *)v53 + 5) = v59;
      v53[48] = v60;
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
    }
    else
    {
      v61 = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = v61;
      *((_QWORD *)v53 + 8) = *((_QWORD *)v54 + 8);
      v62 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v62;
    }
    v63 = v10[20];
    v64 = (char *)v8 + v63;
    v65 = (char *)v9 + v63;
    if (*(_QWORD *)((char *)v9 + v63 + 24))
    {
      v66 = *(_QWORD *)v65;
      v67 = *((_QWORD *)v65 + 1);
      v68 = v65[16];
      sub_2141DD130(*(_QWORD *)v65, v67, v68);
      *(_QWORD *)v64 = v66;
      *((_QWORD *)v64 + 1) = v67;
      v64[16] = v68;
      v69 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
      v70 = *((_QWORD *)v65 + 5);
      v71 = v65[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v69, v70, v71);
      *((_QWORD *)v64 + 4) = v69;
      *((_QWORD *)v64 + 5) = v70;
      v64[48] = v71;
      *(_OWORD *)(v64 + 56) = *(_OWORD *)(v65 + 56);
    }
    else
    {
      v72 = *((_OWORD *)v65 + 3);
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
      *((_OWORD *)v64 + 3) = v72;
      *((_QWORD *)v64 + 8) = *((_QWORD *)v65 + 8);
      v73 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v73;
    }
    v74 = v10[21];
    v75 = (char *)v8 + v74;
    v76 = (char *)v9 + v74;
    if (*(_QWORD *)((char *)v9 + v74 + 24))
    {
      v77 = *(_QWORD *)v76;
      v78 = *((_QWORD *)v76 + 1);
      v79 = v76[16];
      sub_2141DD130(*(_QWORD *)v76, v78, v79);
      *(_QWORD *)v75 = v77;
      *((_QWORD *)v75 + 1) = v78;
      v75[16] = v79;
      v80 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v75 + 3) = *((_QWORD *)v76 + 3);
      v81 = *((_QWORD *)v76 + 5);
      v82 = v76[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v80, v81, v82);
      *((_QWORD *)v75 + 4) = v80;
      *((_QWORD *)v75 + 5) = v81;
      v75[48] = v82;
      *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
    }
    else
    {
      v83 = *((_OWORD *)v76 + 3);
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_OWORD *)v75 + 3) = v83;
      *((_QWORD *)v75 + 8) = *((_QWORD *)v76 + 8);
      v84 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v84;
    }
    v85 = v10[22];
    v86 = (char *)v8 + v85;
    v87 = (char *)v9 + v85;
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *((_QWORD *)v86 + 2) = *((_QWORD *)v87 + 2);
    v88 = v10[23];
    v89 = (char *)v8 + v88;
    v90 = (char *)v9 + v88;
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
    v91 = v10[24];
    v92 = (char *)v8 + v91;
    v93 = (char *)v9 + v91;
    if (*(_QWORD *)((char *)v9 + v91 + 24))
    {
      v94 = *(_QWORD *)v93;
      v95 = *((_QWORD *)v93 + 1);
      v96 = v93[16];
      sub_2141DD130(*(_QWORD *)v93, v95, v96);
      *(_QWORD *)v92 = v94;
      *((_QWORD *)v92 + 1) = v95;
      v92[16] = v96;
      *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v97;
    }
    v98 = v10[25];
    v99 = (char *)v8 + v98;
    v100 = (char *)v9 + v98;
    if (*(_QWORD *)((char *)v9 + v98 + 24))
    {
      v101 = *(_QWORD *)v100;
      v102 = *((_QWORD *)v100 + 1);
      v103 = v100[16];
      sub_2141DD130(*(_QWORD *)v100, v102, v103);
      *(_QWORD *)v99 = v101;
      *((_QWORD *)v99 + 1) = v102;
      v99[16] = v103;
      *((_QWORD *)v99 + 3) = *((_QWORD *)v100 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v104 = *((_OWORD *)v100 + 1);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *((_OWORD *)v99 + 1) = v104;
    }
    v105 = v10[26];
    v106 = (_QWORD *)((char *)v8 + v105);
    v107 = (_QWORD *)((char *)v9 + v105);
    v108 = v107[1];
    *v106 = *v107;
    v106[1] = v108;
    v109 = v10[27];
    v110 = (char *)v8 + v109;
    v111 = (char *)v9 + v109;
    v112 = *((_QWORD *)v111 + 3);
    swift_bridgeObjectRetain();
    if (v112)
    {
      *((_QWORD *)v110 + 3) = v112;
      (**(void (***)(char *, char *, uint64_t))(v112 - 8))(v110, v111, v112);
    }
    else
    {
      v113 = *((_OWORD *)v111 + 1);
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *((_OWORD *)v110 + 1) = v113;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_2142F0DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int128 *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 *v132;
  __int128 *v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)(void *, uint64_t, uint64_t);
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(void *, uint64_t, uint64_t);
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;

  sub_2141DEA14((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = *(unsigned __int8 *)(v8 + 40);
      if (v14 == 255)
      {
        v15 = *(_OWORD *)v8;
        v16 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
        *(_OWORD *)v7 = v15;
        *(_OWORD *)(v7 + 16) = v16;
      }
      else if ((v14 & 1) != 0)
      {
        v21 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v7 + 24) = v21;
        *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
        (**(void (***)(uint64_t, uint64_t))(v21 - 8))(v7, v8);
        *(_BYTE *)(v7 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *(_BYTE *)(v7 + 40) = 0;
        swift_retain();
      }
      *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
      *(_DWORD *)(v7 + 56) = *(_DWORD *)(v8 + 56);
      *(_DWORD *)(v7 + 60) = *(_DWORD *)(v8 + 60);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
      v22 = *(unsigned __int8 *)(v8 + 128);
      swift_bridgeObjectRetain();
      if (v22 == 255)
      {
        v23 = *(_OWORD *)(v8 + 88);
        v24 = *(_OWORD *)(v8 + 104);
        *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
        *(_OWORD *)(v7 + 88) = v23;
        *(_OWORD *)(v7 + 104) = v24;
      }
      else if ((v22 & 1) != 0)
      {
        *(_QWORD *)(v7 + 88) = *(_QWORD *)(v8 + 88);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
        *(_BYTE *)(v7 + 128) = 1;
        swift_retain();
      }
      else
      {
        v25 = *(_QWORD *)(v8 + 112);
        *(_QWORD *)(v7 + 112) = v25;
        *(_QWORD *)(v7 + 120) = *(_QWORD *)(v8 + 120);
        (**(void (***)(uint64_t, uint64_t))(v25 - 8))(v7 + 88, v8 + 88);
        *(_BYTE *)(v7 + 128) = 0;
      }
      v26 = *(_OWORD *)(v8 + 136);
      *(_BYTE *)(v7 + 152) = *(_BYTE *)(v8 + 152);
      *(_OWORD *)(v7 + 136) = v26;
      v27 = *(_QWORD *)(v8 + 160);
      *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
      *(_QWORD *)(v7 + 160) = v27;
      v28 = *(_OWORD *)(v8 + 176);
      v29 = *(_OWORD *)(v8 + 192);
      *(_BYTE *)(v7 + 208) = *(_BYTE *)(v8 + 208);
      *(_OWORD *)(v7 + 176) = v28;
      *(_OWORD *)(v7 + 192) = v29;
      v30 = v9[11];
      v31 = (void *)(v7 + v30);
      v32 = (const void *)(v8 + v30);
      v33 = sub_214424308();
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v36 = v9[12];
      v37 = v7 + v36;
      v38 = (uint64_t *)(v8 + v36);
      v39 = *v38;
      *(_BYTE *)(v37 + 8) = *((_BYTE *)v38 + 8);
      *(_QWORD *)v37 = v39;
      *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)(v8 + v9[13]);
      v40 = v9[14];
      v41 = (void *)(v7 + v40);
      v42 = (const void *)(v8 + v40);
      v43 = sub_214424C68();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v46 = v9[15];
      v47 = v7 + v46;
      v48 = v8 + v46;
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *(_WORD *)(v47 + 8) = *(_WORD *)(v48 + 8);
      *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)(v8 + v9[16]);
      *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)(v8 + v9[17]);
      v49 = v9[18];
      v50 = v7 + v49;
      v51 = v8 + v49;
      v52 = *(_QWORD *)(v8 + v49 + 24);
      swift_retain();
      if (v52)
      {
        v53 = *(_QWORD *)v51;
        v54 = *(_QWORD *)(v51 + 8);
        v55 = *(_BYTE *)(v51 + 16);
        sub_2141DD130(*(_QWORD *)v51, v54, v55);
        *(_QWORD *)v50 = v53;
        *(_QWORD *)(v50 + 8) = v54;
        *(_BYTE *)(v50 + 16) = v55;
        *(_QWORD *)(v50 + 24) = *(_QWORD *)(v51 + 24);
        v56 = *(_QWORD *)(v51 + 32);
        v57 = *(_QWORD *)(v51 + 40);
        v58 = *(_BYTE *)(v51 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v56, v57, v58);
        *(_QWORD *)(v50 + 32) = v56;
        *(_QWORD *)(v50 + 40) = v57;
        *(_BYTE *)(v50 + 48) = v58;
        *(_OWORD *)(v50 + 56) = *(_OWORD *)(v51 + 56);
      }
      else
      {
        *(_OWORD *)v50 = *(_OWORD *)v51;
        v59 = *(_OWORD *)(v51 + 16);
        v60 = *(_OWORD *)(v51 + 32);
        v61 = *(_OWORD *)(v51 + 48);
        *(_QWORD *)(v50 + 64) = *(_QWORD *)(v51 + 64);
        *(_OWORD *)(v50 + 32) = v60;
        *(_OWORD *)(v50 + 48) = v61;
        *(_OWORD *)(v50 + 16) = v59;
      }
      v62 = v9[19];
      v63 = v7 + v62;
      v64 = v8 + v62;
      if (*(_QWORD *)(v8 + v62 + 24))
      {
        v65 = *(_QWORD *)v64;
        v66 = *(_QWORD *)(v64 + 8);
        v67 = *(_BYTE *)(v64 + 16);
        sub_2141DD130(*(_QWORD *)v64, v66, v67);
        *(_QWORD *)v63 = v65;
        *(_QWORD *)(v63 + 8) = v66;
        *(_BYTE *)(v63 + 16) = v67;
        *(_QWORD *)(v63 + 24) = *(_QWORD *)(v64 + 24);
        v68 = *(_QWORD *)(v64 + 32);
        v69 = *(_QWORD *)(v64 + 40);
        v70 = *(_BYTE *)(v64 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v68, v69, v70);
        *(_QWORD *)(v63 + 32) = v68;
        *(_QWORD *)(v63 + 40) = v69;
        *(_BYTE *)(v63 + 48) = v70;
        *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
      }
      else
      {
        *(_OWORD *)v63 = *(_OWORD *)v64;
        v71 = *(_OWORD *)(v64 + 16);
        v72 = *(_OWORD *)(v64 + 32);
        v73 = *(_OWORD *)(v64 + 48);
        *(_QWORD *)(v63 + 64) = *(_QWORD *)(v64 + 64);
        *(_OWORD *)(v63 + 32) = v72;
        *(_OWORD *)(v63 + 48) = v73;
        *(_OWORD *)(v63 + 16) = v71;
      }
      v74 = v9[20];
      v75 = v7 + v74;
      v76 = v8 + v74;
      if (*(_QWORD *)(v8 + v74 + 24))
      {
        v77 = *(_QWORD *)v76;
        v78 = *(_QWORD *)(v76 + 8);
        v79 = *(_BYTE *)(v76 + 16);
        sub_2141DD130(*(_QWORD *)v76, v78, v79);
        *(_QWORD *)v75 = v77;
        *(_QWORD *)(v75 + 8) = v78;
        *(_BYTE *)(v75 + 16) = v79;
        *(_QWORD *)(v75 + 24) = *(_QWORD *)(v76 + 24);
        v80 = *(_QWORD *)(v76 + 32);
        v81 = *(_QWORD *)(v76 + 40);
        v82 = *(_BYTE *)(v76 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v80, v81, v82);
        *(_QWORD *)(v75 + 32) = v80;
        *(_QWORD *)(v75 + 40) = v81;
        *(_BYTE *)(v75 + 48) = v82;
        *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
      }
      else
      {
        *(_OWORD *)v75 = *(_OWORD *)v76;
        v83 = *(_OWORD *)(v76 + 16);
        v84 = *(_OWORD *)(v76 + 32);
        v85 = *(_OWORD *)(v76 + 48);
        *(_QWORD *)(v75 + 64) = *(_QWORD *)(v76 + 64);
        *(_OWORD *)(v75 + 32) = v84;
        *(_OWORD *)(v75 + 48) = v85;
        *(_OWORD *)(v75 + 16) = v83;
      }
      v86 = v9[21];
      v87 = v7 + v86;
      v88 = v8 + v86;
      if (*(_QWORD *)(v8 + v86 + 24))
      {
        v89 = *(_QWORD *)v88;
        v90 = *(_QWORD *)(v88 + 8);
        v91 = *(_BYTE *)(v88 + 16);
        sub_2141DD130(*(_QWORD *)v88, v90, v91);
        *(_QWORD *)v87 = v89;
        *(_QWORD *)(v87 + 8) = v90;
        *(_BYTE *)(v87 + 16) = v91;
        *(_QWORD *)(v87 + 24) = *(_QWORD *)(v88 + 24);
        v92 = *(_QWORD *)(v88 + 32);
        v93 = *(_QWORD *)(v88 + 40);
        v94 = *(_BYTE *)(v88 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v92, v93, v94);
        *(_QWORD *)(v87 + 32) = v92;
        *(_QWORD *)(v87 + 40) = v93;
        *(_BYTE *)(v87 + 48) = v94;
        *(_OWORD *)(v87 + 56) = *(_OWORD *)(v88 + 56);
      }
      else
      {
        *(_OWORD *)v87 = *(_OWORD *)v88;
        v95 = *(_OWORD *)(v88 + 16);
        v96 = *(_OWORD *)(v88 + 32);
        v97 = *(_OWORD *)(v88 + 48);
        *(_QWORD *)(v87 + 64) = *(_QWORD *)(v88 + 64);
        *(_OWORD *)(v87 + 32) = v96;
        *(_OWORD *)(v87 + 48) = v97;
        *(_OWORD *)(v87 + 16) = v95;
      }
      v98 = v9[22];
      v99 = v7 + v98;
      v100 = (__int128 *)(v8 + v98);
      v101 = *v100;
      *(_QWORD *)(v99 + 16) = *((_QWORD *)v100 + 2);
      *(_OWORD *)v99 = v101;
      v102 = v9[23];
      v103 = v7 + v102;
      v104 = (__int128 *)(v8 + v102);
      v105 = *v104;
      *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
      *(_OWORD *)v103 = v105;
      v106 = v9[24];
      v107 = v7 + v106;
      v108 = v8 + v106;
      if (*(_QWORD *)(v8 + v106 + 24))
      {
        v109 = *(_QWORD *)v108;
        v110 = *(_QWORD *)(v108 + 8);
        v111 = *(_BYTE *)(v108 + 16);
        sub_2141DD130(*(_QWORD *)v108, v110, v111);
        *(_QWORD *)v107 = v109;
        *(_QWORD *)(v107 + 8) = v110;
        *(_BYTE *)(v107 + 16) = v111;
        *(_QWORD *)(v107 + 24) = *(_QWORD *)(v108 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        v112 = *(_OWORD *)(v108 + 16);
        *(_OWORD *)v107 = *(_OWORD *)v108;
        *(_OWORD *)(v107 + 16) = v112;
      }
      v113 = v9[25];
      v114 = v7 + v113;
      v115 = v8 + v113;
      if (*(_QWORD *)(v8 + v113 + 24))
      {
        v116 = *(_QWORD *)v115;
        v117 = *(_QWORD *)(v115 + 8);
        v118 = *(_BYTE *)(v115 + 16);
        sub_2141DD130(*(_QWORD *)v115, v117, v118);
        *(_QWORD *)v114 = v116;
        *(_QWORD *)(v114 + 8) = v117;
        *(_BYTE *)(v114 + 16) = v118;
        *(_QWORD *)(v114 + 24) = *(_QWORD *)(v115 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        v119 = *(_OWORD *)(v115 + 16);
        *(_OWORD *)v114 = *(_OWORD *)v115;
        *(_OWORD *)(v114 + 16) = v119;
      }
      v120 = v9[26];
      v121 = (_QWORD *)(v7 + v120);
      v122 = (_QWORD *)(v8 + v120);
      *v121 = *v122;
      v121[1] = v122[1];
      v123 = v9[27];
      v124 = v7 + v123;
      v125 = v8 + v123;
      v126 = *(_QWORD *)(v125 + 24);
      swift_bridgeObjectRetain();
      if (v126)
      {
        *(_QWORD *)(v124 + 24) = v126;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v126 - 8))(v124, v125, v126);
      }
      else
      {
        v127 = *(_OWORD *)(v125 + 16);
        *(_OWORD *)v124 = *(_OWORD *)v125;
        *(_OWORD *)(v124 + 16) = v127;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      return a1;
    }
LABEL_7:
    v17 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  if (v13)
  {
    sub_2141DD370(v7, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  v18 = *(unsigned __int8 *)(v8 + 40);
  if (*(unsigned __int8 *)(v7 + 40) == 255)
  {
    if (v18 == 255)
    {
      v129 = *(_OWORD *)v8;
      v130 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
      *(_OWORD *)v7 = v129;
      *(_OWORD *)(v7 + 16) = v130;
      goto LABEL_55;
    }
    if ((v18 & 1) != 0)
      goto LABEL_52;
LABEL_54:
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_BYTE *)(v7 + 40) = 0;
    swift_retain();
    goto LABEL_55;
  }
  if (v18 == 255)
  {
    sub_21420D6FC(v7);
    v19 = *(_OWORD *)(v8 + 25);
    v20 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v20;
    *(_OWORD *)(v7 + 25) = v19;
    goto LABEL_55;
  }
  if (a1 != a2)
  {
    sub_21420D6FC(v7);
    if ((*(_BYTE *)(v8 + 40) & 1) != 0)
    {
LABEL_52:
      v131 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v7 + 24) = v131;
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
      (**(void (***)(uint64_t, uint64_t))(v131 - 8))(v7, v8);
      *(_BYTE *)(v7 + 40) = 1;
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_55:
  *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  *(_DWORD *)(v7 + 56) = *(_DWORD *)(v8 + 56);
  *(_DWORD *)(v7 + 60) = *(_DWORD *)(v8 + 60);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
  v132 = (__int128 *)(v7 + 88);
  v133 = (__int128 *)(v8 + 88);
  v134 = *(unsigned __int8 *)(v8 + 128);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
    if (v134 == 255)
    {
      v137 = *v133;
      v138 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *v132 = v137;
      *(_OWORD *)(v7 + 104) = v138;
      goto LABEL_65;
    }
    if ((v134 & 1) != 0)
      goto LABEL_62;
LABEL_64:
    v139 = *(_QWORD *)(v8 + 112);
    *(_QWORD *)(v7 + 112) = v139;
    *(_QWORD *)(v7 + 120) = *(_QWORD *)(v8 + 120);
    (**(void (***)(uint64_t, uint64_t))(v139 - 8))(v7 + 88, v8 + 88);
    *(_BYTE *)(v7 + 128) = 0;
    goto LABEL_65;
  }
  if (v134 == 255)
  {
    sub_21420D730(v7 + 88);
    v135 = *(_OWORD *)(v8 + 113);
    v136 = *(_OWORD *)(v8 + 104);
    *v132 = *v133;
    *(_OWORD *)(v7 + 104) = v136;
    *(_OWORD *)(v7 + 113) = v135;
    goto LABEL_65;
  }
  if (a1 != a2)
  {
    sub_21420D730(v7 + 88);
    if ((*(_BYTE *)(v8 + 128) & 1) != 0)
    {
LABEL_62:
      *(_QWORD *)(v7 + 88) = *(_QWORD *)(v8 + 88);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
      *(_BYTE *)(v7 + 128) = 1;
      swift_retain();
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  v140 = *(_OWORD *)(v8 + 136);
  *(_BYTE *)(v7 + 152) = *(_BYTE *)(v8 + 152);
  *(_OWORD *)(v7 + 136) = v140;
  v141 = *(_QWORD *)(v8 + 160);
  *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
  *(_QWORD *)(v7 + 160) = v141;
  v142 = *(_OWORD *)(v8 + 176);
  v143 = *(_OWORD *)(v8 + 192);
  *(_BYTE *)(v7 + 208) = *(_BYTE *)(v8 + 208);
  *(_OWORD *)(v7 + 176) = v142;
  *(_OWORD *)(v7 + 192) = v143;
  v144 = v9[11];
  v145 = (void *)(v7 + v144);
  v146 = (void *)(v8 + v144);
  v147 = sub_214424308();
  v148 = *(_QWORD *)(v147 - 8);
  v149 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v148 + 48);
  v150 = v149(v145, 1, v147);
  v151 = v149(v146, 1, v147);
  if (v150)
  {
    if (!v151)
    {
      (*(void (**)(void *, void *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v151)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v145, v147);
LABEL_70:
    v152 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(void *, void *, uint64_t))(v148 + 24))(v145, v146, v147);
LABEL_71:
  v153 = v9[12];
  v154 = v7 + v153;
  v155 = (uint64_t *)(v8 + v153);
  v156 = *v155;
  *(_BYTE *)(v154 + 8) = *((_BYTE *)v155 + 8);
  *(_QWORD *)v154 = v156;
  *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)(v8 + v9[13]);
  v157 = v9[14];
  v158 = (void *)(v7 + v157);
  v159 = (void *)(v8 + v157);
  v160 = sub_214424C68();
  v161 = *(_QWORD *)(v160 - 8);
  v162 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v161 + 48);
  v163 = v162(v158, 1, v160);
  v164 = v162(v159, 1, v160);
  if (v163)
  {
    if (!v164)
    {
      (*(void (**)(void *, void *, uint64_t))(v161 + 16))(v158, v159, v160);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if (v164)
  {
    (*(void (**)(void *, uint64_t))(v161 + 8))(v158, v160);
LABEL_76:
    v165 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    goto LABEL_77;
  }
  (*(void (**)(void *, void *, uint64_t))(v161 + 24))(v158, v159, v160);
LABEL_77:
  v166 = v9[15];
  v167 = v7 + v166;
  v168 = v8 + v166;
  *(_QWORD *)(v7 + v166) = *(_QWORD *)(v8 + v166);
  swift_retain();
  swift_release();
  *(_BYTE *)(v167 + 8) = *(_BYTE *)(v168 + 8);
  *(_BYTE *)(v167 + 9) = *(_BYTE *)(v168 + 9);
  *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)(v8 + v9[16]);
  *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)(v8 + v9[17]);
  v169 = v9[18];
  v170 = v7 + v169;
  v171 = v8 + v169;
  v172 = *(_QWORD *)(v7 + v169 + 24);
  v173 = *(_QWORD *)(v8 + v169 + 24);
  if (v172)
  {
    if (v173)
    {
      v174 = *(_QWORD *)v171;
      v175 = *(_QWORD *)(v171 + 8);
      v176 = *(_BYTE *)(v171 + 16);
      sub_2141DD130(*(_QWORD *)v171, v175, v176);
      v177 = *(_QWORD *)v170;
      v178 = *(_QWORD *)(v170 + 8);
      v179 = *(_BYTE *)(v170 + 16);
      *(_QWORD *)v170 = v174;
      *(_QWORD *)(v170 + 8) = v175;
      *(_BYTE *)(v170 + 16) = v176;
      sub_2141ED0BC(v177, v178, v179);
      *(_QWORD *)(v170 + 24) = *(_QWORD *)(v171 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v180 = *(_QWORD *)(v171 + 32);
      v181 = *(_QWORD *)(v171 + 40);
      v182 = *(_BYTE *)(v171 + 48);
      sub_2141DD140(v180, v181, v182);
      v183 = *(_QWORD *)(v170 + 32);
      v184 = *(_QWORD *)(v170 + 40);
      *(_QWORD *)(v170 + 32) = v180;
      *(_QWORD *)(v170 + 40) = v181;
      v185 = *(_BYTE *)(v170 + 48);
      *(_BYTE *)(v170 + 48) = v182;
      sub_2141EF1B0(v183, v184, v185);
LABEL_82:
      *(_OWORD *)(v170 + 56) = *(_OWORD *)(v171 + 56);
      goto LABEL_87;
    }
    sub_21420D764(v170);
    *(_OWORD *)v170 = *(_OWORD *)v171;
    v193 = *(_OWORD *)(v171 + 32);
    v192 = *(_OWORD *)(v171 + 48);
    v194 = *(_OWORD *)(v171 + 16);
    *(_QWORD *)(v170 + 64) = *(_QWORD *)(v171 + 64);
    *(_OWORD *)(v170 + 32) = v193;
    *(_OWORD *)(v170 + 48) = v192;
    *(_OWORD *)(v170 + 16) = v194;
  }
  else
  {
    if (v173)
    {
      v186 = *(_QWORD *)v171;
      v187 = *(_QWORD *)(v171 + 8);
      v188 = *(_BYTE *)(v171 + 16);
      sub_2141DD130(*(_QWORD *)v171, v187, v188);
      *(_QWORD *)v170 = v186;
      *(_QWORD *)(v170 + 8) = v187;
      *(_BYTE *)(v170 + 16) = v188;
      *(_QWORD *)(v170 + 24) = *(_QWORD *)(v171 + 24);
      v189 = *(_QWORD *)(v171 + 32);
      v190 = *(_QWORD *)(v171 + 40);
      v191 = *(_BYTE *)(v171 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v189, v190, v191);
      *(_QWORD *)(v170 + 32) = v189;
      *(_QWORD *)(v170 + 40) = v190;
      *(_BYTE *)(v170 + 48) = v191;
      goto LABEL_82;
    }
    *(_OWORD *)v170 = *(_OWORD *)v171;
    v195 = *(_OWORD *)(v171 + 16);
    v196 = *(_OWORD *)(v171 + 32);
    v197 = *(_OWORD *)(v171 + 48);
    *(_QWORD *)(v170 + 64) = *(_QWORD *)(v171 + 64);
    *(_OWORD *)(v170 + 32) = v196;
    *(_OWORD *)(v170 + 48) = v197;
    *(_OWORD *)(v170 + 16) = v195;
  }
LABEL_87:
  v198 = v9[19];
  v199 = v7 + v198;
  v200 = v8 + v198;
  v201 = *(_QWORD *)(v7 + v198 + 24);
  v202 = *(_QWORD *)(v8 + v198 + 24);
  if (v201)
  {
    if (v202)
    {
      v203 = *(_QWORD *)v200;
      v204 = *(_QWORD *)(v200 + 8);
      v205 = *(_BYTE *)(v200 + 16);
      sub_2141DD130(*(_QWORD *)v200, v204, v205);
      v206 = *(_QWORD *)v199;
      v207 = *(_QWORD *)(v199 + 8);
      v208 = *(_BYTE *)(v199 + 16);
      *(_QWORD *)v199 = v203;
      *(_QWORD *)(v199 + 8) = v204;
      *(_BYTE *)(v199 + 16) = v205;
      sub_2141ED0BC(v206, v207, v208);
      *(_QWORD *)(v199 + 24) = *(_QWORD *)(v200 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v209 = *(_QWORD *)(v200 + 32);
      v210 = *(_QWORD *)(v200 + 40);
      v211 = *(_BYTE *)(v200 + 48);
      sub_2141DD140(v209, v210, v211);
      v212 = *(_QWORD *)(v199 + 32);
      v213 = *(_QWORD *)(v199 + 40);
      *(_QWORD *)(v199 + 32) = v209;
      *(_QWORD *)(v199 + 40) = v210;
      v214 = *(_BYTE *)(v199 + 48);
      *(_BYTE *)(v199 + 48) = v211;
      sub_2141EF1B0(v212, v213, v214);
LABEL_92:
      *(_OWORD *)(v199 + 56) = *(_OWORD *)(v200 + 56);
      goto LABEL_95;
    }
    sub_21420D764(v199);
    *(_OWORD *)v199 = *(_OWORD *)v200;
    v222 = *(_OWORD *)(v200 + 32);
    v221 = *(_OWORD *)(v200 + 48);
    v223 = *(_OWORD *)(v200 + 16);
    *(_QWORD *)(v199 + 64) = *(_QWORD *)(v200 + 64);
    *(_OWORD *)(v199 + 32) = v222;
    *(_OWORD *)(v199 + 48) = v221;
    *(_OWORD *)(v199 + 16) = v223;
  }
  else
  {
    if (v202)
    {
      v215 = *(_QWORD *)v200;
      v216 = *(_QWORD *)(v200 + 8);
      v217 = *(_BYTE *)(v200 + 16);
      sub_2141DD130(*(_QWORD *)v200, v216, v217);
      *(_QWORD *)v199 = v215;
      *(_QWORD *)(v199 + 8) = v216;
      *(_BYTE *)(v199 + 16) = v217;
      *(_QWORD *)(v199 + 24) = *(_QWORD *)(v200 + 24);
      v218 = *(_QWORD *)(v200 + 32);
      v219 = *(_QWORD *)(v200 + 40);
      v220 = *(_BYTE *)(v200 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v218, v219, v220);
      *(_QWORD *)(v199 + 32) = v218;
      *(_QWORD *)(v199 + 40) = v219;
      *(_BYTE *)(v199 + 48) = v220;
      goto LABEL_92;
    }
    *(_OWORD *)v199 = *(_OWORD *)v200;
    v224 = *(_OWORD *)(v200 + 16);
    v225 = *(_OWORD *)(v200 + 32);
    v226 = *(_OWORD *)(v200 + 48);
    *(_QWORD *)(v199 + 64) = *(_QWORD *)(v200 + 64);
    *(_OWORD *)(v199 + 32) = v225;
    *(_OWORD *)(v199 + 48) = v226;
    *(_OWORD *)(v199 + 16) = v224;
  }
LABEL_95:
  v227 = v9[20];
  v228 = v7 + v227;
  v229 = v8 + v227;
  v230 = *(_QWORD *)(v7 + v227 + 24);
  v231 = *(_QWORD *)(v8 + v227 + 24);
  if (v230)
  {
    if (v231)
    {
      v232 = *(_QWORD *)v229;
      v233 = *(_QWORD *)(v229 + 8);
      v234 = *(_BYTE *)(v229 + 16);
      sub_2141DD130(*(_QWORD *)v229, v233, v234);
      v235 = *(_QWORD *)v228;
      v236 = *(_QWORD *)(v228 + 8);
      v237 = *(_BYTE *)(v228 + 16);
      *(_QWORD *)v228 = v232;
      *(_QWORD *)(v228 + 8) = v233;
      *(_BYTE *)(v228 + 16) = v234;
      sub_2141ED0BC(v235, v236, v237);
      *(_QWORD *)(v228 + 24) = *(_QWORD *)(v229 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v238 = *(_QWORD *)(v229 + 32);
      v239 = *(_QWORD *)(v229 + 40);
      v240 = *(_BYTE *)(v229 + 48);
      sub_2141DD140(v238, v239, v240);
      v241 = *(_QWORD *)(v228 + 32);
      v242 = *(_QWORD *)(v228 + 40);
      *(_QWORD *)(v228 + 32) = v238;
      *(_QWORD *)(v228 + 40) = v239;
      v243 = *(_BYTE *)(v228 + 48);
      *(_BYTE *)(v228 + 48) = v240;
      sub_2141EF1B0(v241, v242, v243);
LABEL_100:
      *(_OWORD *)(v228 + 56) = *(_OWORD *)(v229 + 56);
      goto LABEL_103;
    }
    sub_21420D764(v228);
    *(_OWORD *)v228 = *(_OWORD *)v229;
    v251 = *(_OWORD *)(v229 + 32);
    v250 = *(_OWORD *)(v229 + 48);
    v252 = *(_OWORD *)(v229 + 16);
    *(_QWORD *)(v228 + 64) = *(_QWORD *)(v229 + 64);
    *(_OWORD *)(v228 + 32) = v251;
    *(_OWORD *)(v228 + 48) = v250;
    *(_OWORD *)(v228 + 16) = v252;
  }
  else
  {
    if (v231)
    {
      v244 = *(_QWORD *)v229;
      v245 = *(_QWORD *)(v229 + 8);
      v246 = *(_BYTE *)(v229 + 16);
      sub_2141DD130(*(_QWORD *)v229, v245, v246);
      *(_QWORD *)v228 = v244;
      *(_QWORD *)(v228 + 8) = v245;
      *(_BYTE *)(v228 + 16) = v246;
      *(_QWORD *)(v228 + 24) = *(_QWORD *)(v229 + 24);
      v247 = *(_QWORD *)(v229 + 32);
      v248 = *(_QWORD *)(v229 + 40);
      v249 = *(_BYTE *)(v229 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v247, v248, v249);
      *(_QWORD *)(v228 + 32) = v247;
      *(_QWORD *)(v228 + 40) = v248;
      *(_BYTE *)(v228 + 48) = v249;
      goto LABEL_100;
    }
    *(_OWORD *)v228 = *(_OWORD *)v229;
    v253 = *(_OWORD *)(v229 + 16);
    v254 = *(_OWORD *)(v229 + 32);
    v255 = *(_OWORD *)(v229 + 48);
    *(_QWORD *)(v228 + 64) = *(_QWORD *)(v229 + 64);
    *(_OWORD *)(v228 + 32) = v254;
    *(_OWORD *)(v228 + 48) = v255;
    *(_OWORD *)(v228 + 16) = v253;
  }
LABEL_103:
  v256 = v9[21];
  v257 = v7 + v256;
  v258 = (uint64_t *)(v8 + v256);
  v259 = *(_QWORD *)(v7 + v256 + 24);
  v260 = *(_QWORD *)(v8 + v256 + 24);
  if (v259)
  {
    if (!v260)
    {
      sub_21420D764(v257);
      *(_OWORD *)v257 = *(_OWORD *)v258;
      v280 = *((_OWORD *)v258 + 2);
      v279 = *((_OWORD *)v258 + 3);
      v281 = *((_OWORD *)v258 + 1);
      *(_QWORD *)(v257 + 64) = v258[8];
      *(_OWORD *)(v257 + 32) = v280;
      *(_OWORD *)(v257 + 48) = v279;
      *(_OWORD *)(v257 + 16) = v281;
      goto LABEL_111;
    }
    v261 = *v258;
    v262 = v258[1];
    v263 = *((_BYTE *)v258 + 16);
    sub_2141DD130(*v258, v262, v263);
    v264 = *(_QWORD *)v257;
    v265 = *(_QWORD *)(v257 + 8);
    v266 = *(_BYTE *)(v257 + 16);
    *(_QWORD *)v257 = v261;
    *(_QWORD *)(v257 + 8) = v262;
    *(_BYTE *)(v257 + 16) = v263;
    sub_2141ED0BC(v264, v265, v266);
    *(_QWORD *)(v257 + 24) = v258[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v267 = v258[4];
    v268 = v258[5];
    v269 = *((_BYTE *)v258 + 48);
    sub_2141DD140(v267, v268, v269);
    v270 = *(_QWORD *)(v257 + 32);
    v271 = *(_QWORD *)(v257 + 40);
    *(_QWORD *)(v257 + 32) = v267;
    *(_QWORD *)(v257 + 40) = v268;
    v272 = *(_BYTE *)(v257 + 48);
    *(_BYTE *)(v257 + 48) = v269;
    sub_2141EF1B0(v270, v271, v272);
  }
  else
  {
    if (!v260)
    {
      *(_OWORD *)v257 = *(_OWORD *)v258;
      v282 = *((_OWORD *)v258 + 1);
      v283 = *((_OWORD *)v258 + 2);
      v284 = *((_OWORD *)v258 + 3);
      *(_QWORD *)(v257 + 64) = v258[8];
      *(_OWORD *)(v257 + 32) = v283;
      *(_OWORD *)(v257 + 48) = v284;
      *(_OWORD *)(v257 + 16) = v282;
      goto LABEL_111;
    }
    v273 = *v258;
    v274 = v258[1];
    v275 = *((_BYTE *)v258 + 16);
    sub_2141DD130(*v258, v274, v275);
    *(_QWORD *)v257 = v273;
    *(_QWORD *)(v257 + 8) = v274;
    *(_BYTE *)(v257 + 16) = v275;
    *(_QWORD *)(v257 + 24) = v258[3];
    v276 = v258[4];
    v277 = v258[5];
    v278 = *((_BYTE *)v258 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v276, v277, v278);
    *(_QWORD *)(v257 + 32) = v276;
    *(_QWORD *)(v257 + 40) = v277;
    *(_BYTE *)(v257 + 48) = v278;
  }
  *(_OWORD *)(v257 + 56) = *(_OWORD *)(v258 + 7);
LABEL_111:
  v285 = v9[22];
  v286 = (_QWORD *)(v7 + v285);
  v287 = (_QWORD *)(v8 + v285);
  *v286 = *v287;
  v286[1] = v287[1];
  v286[2] = v287[2];
  v288 = v9[23];
  v289 = (_QWORD *)(v7 + v288);
  v290 = (_QWORD *)(v8 + v288);
  *v289 = *v290;
  v289[1] = v290[1];
  v289[2] = v290[2];
  v291 = v9[24];
  v292 = v7 + v291;
  v293 = v8 + v291;
  v294 = *(_QWORD *)(v7 + v291 + 24);
  v295 = *(_QWORD *)(v8 + v291 + 24);
  if (v294)
  {
    if (v295)
    {
      v296 = *(_QWORD *)v293;
      v297 = *(_QWORD *)(v293 + 8);
      v298 = *(_BYTE *)(v293 + 16);
      sub_2141DD130(*(_QWORD *)v293, v297, v298);
      v299 = *(_QWORD *)v292;
      v300 = *(_QWORD *)(v292 + 8);
      v301 = *(_BYTE *)(v292 + 16);
      *(_QWORD *)v292 = v296;
      *(_QWORD *)(v292 + 8) = v297;
      *(_BYTE *)(v292 + 16) = v298;
      sub_2141ED0BC(v299, v300, v301);
      *(_QWORD *)(v292 + 24) = *(_QWORD *)(v293 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v292);
      v305 = *(_OWORD *)(v293 + 16);
      *(_OWORD *)v292 = *(_OWORD *)v293;
      *(_OWORD *)(v292 + 16) = v305;
    }
  }
  else if (v295)
  {
    v302 = *(_QWORD *)v293;
    v303 = *(_QWORD *)(v293 + 8);
    v304 = *(_BYTE *)(v293 + 16);
    sub_2141DD130(*(_QWORD *)v293, v303, v304);
    *(_QWORD *)v292 = v302;
    *(_QWORD *)(v292 + 8) = v303;
    *(_BYTE *)(v292 + 16) = v304;
    *(_QWORD *)(v292 + 24) = *(_QWORD *)(v293 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v306 = *(_OWORD *)(v293 + 16);
    *(_OWORD *)v292 = *(_OWORD *)v293;
    *(_OWORD *)(v292 + 16) = v306;
  }
  v307 = v9[25];
  v308 = v7 + v307;
  v309 = v8 + v307;
  v310 = *(_QWORD *)(v7 + v307 + 24);
  v311 = *(_QWORD *)(v8 + v307 + 24);
  if (v310)
  {
    if (v311)
    {
      v312 = *(_QWORD *)v309;
      v313 = *(_QWORD *)(v309 + 8);
      v314 = *(_BYTE *)(v309 + 16);
      sub_2141DD130(*(_QWORD *)v309, v313, v314);
      v315 = *(_QWORD *)v308;
      v316 = *(_QWORD *)(v308 + 8);
      v317 = *(_BYTE *)(v308 + 16);
      *(_QWORD *)v308 = v312;
      *(_QWORD *)(v308 + 8) = v313;
      *(_BYTE *)(v308 + 16) = v314;
      sub_2141ED0BC(v315, v316, v317);
      *(_QWORD *)(v308 + 24) = *(_QWORD *)(v309 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v308);
      v321 = *(_OWORD *)(v309 + 16);
      *(_OWORD *)v308 = *(_OWORD *)v309;
      *(_OWORD *)(v308 + 16) = v321;
    }
  }
  else if (v311)
  {
    v318 = *(_QWORD *)v309;
    v319 = *(_QWORD *)(v309 + 8);
    v320 = *(_BYTE *)(v309 + 16);
    sub_2141DD130(*(_QWORD *)v309, v319, v320);
    *(_QWORD *)v308 = v318;
    *(_QWORD *)(v308 + 8) = v319;
    *(_BYTE *)(v308 + 16) = v320;
    *(_QWORD *)(v308 + 24) = *(_QWORD *)(v309 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v322 = *(_OWORD *)(v309 + 16);
    *(_OWORD *)v308 = *(_OWORD *)v309;
    *(_OWORD *)(v308 + 16) = v322;
  }
  v323 = v9[26];
  v324 = (_QWORD *)(v7 + v323);
  v325 = (_QWORD *)(v8 + v323);
  *v324 = *v325;
  v324[1] = v325[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v326 = v9[27];
  v327 = v7 + v326;
  v328 = v8 + v326;
  v329 = *(_QWORD *)(v328 + 24);
  if (*(_QWORD *)(v327 + 24))
  {
    if (v329)
    {
      sub_21420D7CC((uint64_t *)v327, (uint64_t *)v328);
    }
    else
    {
      sub_21420D92C(v327);
      v330 = *(_OWORD *)(v328 + 16);
      *(_OWORD *)v327 = *(_OWORD *)v328;
      *(_OWORD *)(v327 + 16) = v330;
    }
  }
  else if (v329)
  {
    *(_QWORD *)(v327 + 24) = v329;
    (**(void (***)(uint64_t, uint64_t))(v329 - 8))(v327, v328);
  }
  else
  {
    v331 = *(_OWORD *)(v328 + 16);
    *(_OWORD *)v327 = *(_OWORD *)v328;
    *(_OWORD *)(v327 + 16) = v331;
  }
  return a1;
}

uint64_t sub_2142F1FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 32);
  v6 = (_OWORD *)(a1 + v5);
  v7 = (_OWORD *)(a2 + v5);
  v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = *((_QWORD *)v8 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = v7[1];
    *v6 = *v7;
    v6[1] = v11;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
    *((_BYTE *)v6 + 41) = *((_BYTE *)v7 + 41);
    v12 = v7[4];
    v6[3] = v7[3];
    v6[4] = v12;
    *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
    v13 = *(_OWORD *)((char *)v7 + 88);
    v14 = *(_OWORD *)((char *)v7 + 104);
    *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
    *(_OWORD *)((char *)v6 + 104) = v14;
    *(_OWORD *)((char *)v6 + 88) = v13;
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
    *((_BYTE *)v6 + 152) = *((_BYTE *)v7 + 152);
    *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
    *((_BYTE *)v6 + 168) = *((_BYTE *)v7 + 168);
    v15 = v7[12];
    v6[11] = v7[11];
    v6[12] = v15;
    *((_BYTE *)v6 + 208) = *((_BYTE *)v7 + 208);
    v16 = v8[11];
    v17 = (char *)v6 + v16;
    v18 = (char *)v7 + v16;
    v19 = sub_214424308();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v22 = v8[12];
    v23 = (char *)v6 + v22;
    v24 = (char *)v7 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *(_QWORD *)((char *)v6 + v8[13]) = *(_QWORD *)((char *)v7 + v8[13]);
    v25 = v8[14];
    v26 = (char *)v6 + v25;
    v27 = (char *)v7 + v25;
    v28 = sub_214424C68();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v31 = v8[15];
    v32 = (char *)v6 + v31;
    v33 = (char *)v7 + v31;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_WORD *)v32 + 4) = *((_WORD *)v33 + 4);
    *(_QWORD *)((char *)v6 + v8[16]) = *(_QWORD *)((char *)v7 + v8[16]);
    *(_QWORD *)((char *)v6 + v8[17]) = *(_QWORD *)((char *)v7 + v8[17]);
    v34 = v8[18];
    v35 = (char *)v6 + v34;
    v36 = (char *)v7 + v34;
    v37 = *((_OWORD *)v36 + 3);
    *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
    *((_OWORD *)v35 + 3) = v37;
    *((_QWORD *)v35 + 8) = *((_QWORD *)v36 + 8);
    v38 = *((_OWORD *)v36 + 1);
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v38;
    v39 = v8[19];
    v40 = (char *)v6 + v39;
    v41 = (char *)v7 + v39;
    *((_QWORD *)v40 + 8) = *((_QWORD *)v41 + 8);
    v42 = *((_OWORD *)v41 + 3);
    *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
    *((_OWORD *)v40 + 3) = v42;
    v43 = *((_OWORD *)v41 + 1);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v43;
    v44 = v8[20];
    v45 = (char *)v6 + v44;
    v46 = (char *)v7 + v44;
    v47 = *((_OWORD *)v46 + 3);
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    *((_OWORD *)v45 + 3) = v47;
    *((_QWORD *)v45 + 8) = *((_QWORD *)v46 + 8);
    v48 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v48;
    v49 = v8[21];
    v50 = (char *)v6 + v49;
    v51 = (char *)v7 + v49;
    *((_QWORD *)v50 + 8) = *((_QWORD *)v51 + 8);
    v52 = *((_OWORD *)v51 + 3);
    *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
    *((_OWORD *)v50 + 3) = v52;
    v53 = *((_OWORD *)v51 + 1);
    *(_OWORD *)v50 = *(_OWORD *)v51;
    *((_OWORD *)v50 + 1) = v53;
    v54 = v8[22];
    v55 = (char *)v6 + v54;
    v56 = (char *)v7 + v54;
    *(_OWORD *)v55 = *(_OWORD *)v56;
    *((_QWORD *)v55 + 2) = *((_QWORD *)v56 + 2);
    v57 = v8[23];
    v58 = (char *)v6 + v57;
    v59 = (char *)v7 + v57;
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *((_QWORD *)v58 + 2) = *((_QWORD *)v59 + 2);
    v60 = v8[24];
    v61 = (_OWORD *)((char *)v6 + v60);
    v62 = (_OWORD *)((char *)v7 + v60);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = v8[25];
    v65 = (_OWORD *)((char *)v6 + v64);
    v66 = (_OWORD *)((char *)v7 + v64);
    v67 = v66[1];
    *v65 = *v66;
    v65[1] = v67;
    *(_OWORD *)((char *)v6 + v8[26]) = *(_OWORD *)((char *)v7 + v8[26]);
    v68 = v8[27];
    v69 = (_OWORD *)((char *)v6 + v68);
    v70 = (_OWORD *)((char *)v7 + v68);
    v71 = v70[1];
    *v69 = *v70;
    v69[1] = v71;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_2142F23B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(void *, uint64_t, uint64_t);
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v15;
      *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
      *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
      v16 = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 64) = v16;
      *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
      v17 = *(_OWORD *)(v9 + 88);
      v18 = *(_OWORD *)(v9 + 104);
      *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
      *(_OWORD *)(v8 + 104) = v18;
      *(_OWORD *)(v8 + 88) = v17;
      *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
      *(_BYTE *)(v8 + 152) = *(_BYTE *)(v9 + 152);
      *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 + 160);
      *(_BYTE *)(v8 + 168) = *(_BYTE *)(v9 + 168);
      v19 = *(_OWORD *)(v9 + 192);
      *(_OWORD *)(v8 + 176) = *(_OWORD *)(v9 + 176);
      *(_OWORD *)(v8 + 192) = v19;
      *(_BYTE *)(v8 + 208) = *(_BYTE *)(v9 + 208);
      v20 = v10[11];
      v21 = (void *)(v8 + v20);
      v22 = (const void *)(v9 + v20);
      v23 = sub_214424308();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v40 = v10[12];
      v41 = v8 + v40;
      v42 = v9 + v40;
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
      v43 = v10[14];
      v44 = (void *)(v8 + v43);
      v45 = (const void *)(v9 + v43);
      v46 = sub_214424C68();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v47 + 32))(v44, v45, v46);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      v49 = v10[15];
      v50 = v8 + v49;
      v51 = v9 + v49;
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_WORD *)(v50 + 8) = *(_WORD *)(v51 + 8);
      *(_QWORD *)(v8 + v10[16]) = *(_QWORD *)(v9 + v10[16]);
      *(_QWORD *)(v8 + v10[17]) = *(_QWORD *)(v9 + v10[17]);
      v52 = v10[18];
      v53 = v8 + v52;
      v54 = v9 + v52;
      v55 = *(_OWORD *)(v54 + 48);
      *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
      *(_OWORD *)(v53 + 48) = v55;
      *(_QWORD *)(v53 + 64) = *(_QWORD *)(v54 + 64);
      v56 = *(_OWORD *)(v54 + 16);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *(_OWORD *)(v53 + 16) = v56;
      v57 = v10[19];
      v58 = v8 + v57;
      v59 = v9 + v57;
      *(_QWORD *)(v58 + 64) = *(_QWORD *)(v59 + 64);
      v60 = *(_OWORD *)(v59 + 48);
      *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
      *(_OWORD *)(v58 + 48) = v60;
      v61 = *(_OWORD *)(v59 + 16);
      *(_OWORD *)v58 = *(_OWORD *)v59;
      *(_OWORD *)(v58 + 16) = v61;
      v62 = v10[20];
      v63 = v8 + v62;
      v64 = v9 + v62;
      v65 = *(_OWORD *)(v64 + 48);
      *(_OWORD *)(v63 + 32) = *(_OWORD *)(v64 + 32);
      *(_OWORD *)(v63 + 48) = v65;
      *(_QWORD *)(v63 + 64) = *(_QWORD *)(v64 + 64);
      v66 = *(_OWORD *)(v64 + 16);
      *(_OWORD *)v63 = *(_OWORD *)v64;
      *(_OWORD *)(v63 + 16) = v66;
      v67 = v10[21];
      v68 = v8 + v67;
      v69 = v9 + v67;
      *(_QWORD *)(v68 + 64) = *(_QWORD *)(v69 + 64);
      v70 = *(_OWORD *)(v69 + 48);
      *(_OWORD *)(v68 + 32) = *(_OWORD *)(v69 + 32);
      *(_OWORD *)(v68 + 48) = v70;
      v71 = *(_OWORD *)(v69 + 16);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *(_OWORD *)(v68 + 16) = v71;
      v72 = v10[22];
      v73 = v8 + v72;
      v74 = v9 + v72;
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *(_QWORD *)(v73 + 16) = *(_QWORD *)(v74 + 16);
      v75 = v10[23];
      v76 = v8 + v75;
      v77 = v9 + v75;
      *(_OWORD *)v76 = *(_OWORD *)v77;
      *(_QWORD *)(v76 + 16) = *(_QWORD *)(v77 + 16);
      v78 = v10[24];
      v79 = (_OWORD *)(v8 + v78);
      v80 = (_OWORD *)(v9 + v78);
      v81 = v80[1];
      *v79 = *v80;
      v79[1] = v81;
      v82 = v10[25];
      v83 = (_OWORD *)(v8 + v82);
      v84 = (_OWORD *)(v9 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      *(_OWORD *)(v8 + v10[26]) = *(_OWORD *)(v9 + v10[26]);
      v86 = v10[27];
      v87 = (_OWORD *)(v8 + v86);
      v88 = (_OWORD *)(v9 + v86);
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      return a1;
    }
LABEL_7:
    v26 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  if (v14)
  {
    sub_2141DD370(v8, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v8 + 40) == 255)
    goto LABEL_14;
  if (*(unsigned __int8 *)(v9 + 40) == 255 || a1 != a2)
  {
    sub_21420D6FC(v8);
LABEL_14:
    v28 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v28;
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
  }
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  v29 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = v29;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  if (*(unsigned __int8 *)(v8 + 128) == 255)
  {
LABEL_19:
    v30 = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v8 + 104) = v30;
    *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v9 + 128) == 255 || a1 != a2)
  {
    sub_21420D730(v8 + 88);
    goto LABEL_19;
  }
LABEL_20:
  *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
  *(_BYTE *)(v8 + 152) = *(_BYTE *)(v9 + 152);
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 + 160);
  *(_BYTE *)(v8 + 168) = *(_BYTE *)(v9 + 168);
  v31 = *(_OWORD *)(v9 + 192);
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(v9 + 176);
  *(_OWORD *)(v8 + 192) = v31;
  *(_BYTE *)(v8 + 208) = *(_BYTE *)(v9 + 208);
  v32 = v10[11];
  v33 = (void *)(v8 + v32);
  v34 = (void *)(v9 + v32);
  v35 = sub_214424308();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
LABEL_30:
    v90 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v36 + 40))(v33, v34, v35);
LABEL_31:
  v91 = v10[12];
  v92 = v8 + v91;
  v93 = v9 + v91;
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
  v94 = v10[14];
  v95 = (void *)(v8 + v94);
  v96 = (void *)(v9 + v94);
  v97 = sub_214424C68();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
  v100 = v99(v95, 1, v97);
  v101 = v99(v96, 1, v97);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(void *, void *, uint64_t))(v98 + 32))(v95, v96, v97);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v101)
  {
    (*(void (**)(void *, uint64_t))(v98 + 8))(v95, v97);
LABEL_36:
    v102 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v98 + 40))(v95, v96, v97);
LABEL_37:
  v103 = v10[15];
  v104 = v8 + v103;
  v105 = v9 + v103;
  *(_QWORD *)(v8 + v103) = *(_QWORD *)(v9 + v103);
  swift_release();
  *(_BYTE *)(v104 + 8) = *(_BYTE *)(v105 + 8);
  *(_BYTE *)(v104 + 9) = *(_BYTE *)(v105 + 9);
  *(_QWORD *)(v8 + v10[16]) = *(_QWORD *)(v9 + v10[16]);
  *(_QWORD *)(v8 + v10[17]) = *(_QWORD *)(v9 + v10[17]);
  v106 = v10[18];
  v107 = v8 + v106;
  v108 = v9 + v106;
  if (*(_QWORD *)(v8 + v106 + 24))
  {
    if (*(_QWORD *)(v108 + 24))
    {
      v109 = *(_BYTE *)(v108 + 16);
      v110 = *(_QWORD *)v107;
      v111 = *(_QWORD *)(v107 + 8);
      v112 = *(_BYTE *)(v107 + 16);
      *(_OWORD *)v107 = *(_OWORD *)v108;
      *(_BYTE *)(v107 + 16) = v109;
      sub_2141ED0BC(v110, v111, v112);
      *(_QWORD *)(v107 + 24) = *(_QWORD *)(v108 + 24);
      swift_bridgeObjectRelease();
      v113 = *(_BYTE *)(v108 + 48);
      v114 = *(_QWORD *)(v107 + 32);
      v115 = *(_QWORD *)(v107 + 40);
      *(_OWORD *)(v107 + 32) = *(_OWORD *)(v108 + 32);
      v116 = *(_BYTE *)(v107 + 48);
      *(_BYTE *)(v107 + 48) = v113;
      sub_2141EF1B0(v114, v115, v116);
      *(_OWORD *)(v107 + 56) = *(_OWORD *)(v108 + 56);
      goto LABEL_42;
    }
    sub_21420D764(v107);
  }
  v117 = *(_OWORD *)(v108 + 48);
  *(_OWORD *)(v107 + 32) = *(_OWORD *)(v108 + 32);
  *(_OWORD *)(v107 + 48) = v117;
  *(_QWORD *)(v107 + 64) = *(_QWORD *)(v108 + 64);
  v118 = *(_OWORD *)(v108 + 16);
  *(_OWORD *)v107 = *(_OWORD *)v108;
  *(_OWORD *)(v107 + 16) = v118;
LABEL_42:
  v119 = v10[19];
  v120 = v8 + v119;
  v121 = v9 + v119;
  if (*(_QWORD *)(v8 + v119 + 24))
  {
    if (*(_QWORD *)(v121 + 24))
    {
      v122 = *(_BYTE *)(v121 + 16);
      v123 = *(_QWORD *)v120;
      v124 = *(_QWORD *)(v120 + 8);
      v125 = *(_BYTE *)(v120 + 16);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *(_BYTE *)(v120 + 16) = v122;
      sub_2141ED0BC(v123, v124, v125);
      *(_QWORD *)(v120 + 24) = *(_QWORD *)(v121 + 24);
      swift_bridgeObjectRelease();
      v126 = *(_BYTE *)(v121 + 48);
      v127 = *(_QWORD *)(v120 + 32);
      v128 = *(_QWORD *)(v120 + 40);
      *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
      v129 = *(_BYTE *)(v120 + 48);
      *(_BYTE *)(v120 + 48) = v126;
      sub_2141EF1B0(v127, v128, v129);
      *(_OWORD *)(v120 + 56) = *(_OWORD *)(v121 + 56);
      goto LABEL_47;
    }
    sub_21420D764(v120);
  }
  v130 = *(_OWORD *)(v121 + 48);
  *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
  *(_OWORD *)(v120 + 48) = v130;
  *(_QWORD *)(v120 + 64) = *(_QWORD *)(v121 + 64);
  v131 = *(_OWORD *)(v121 + 16);
  *(_OWORD *)v120 = *(_OWORD *)v121;
  *(_OWORD *)(v120 + 16) = v131;
LABEL_47:
  v132 = v10[20];
  v133 = v8 + v132;
  v134 = v9 + v132;
  if (*(_QWORD *)(v8 + v132 + 24))
  {
    if (*(_QWORD *)(v134 + 24))
    {
      v135 = *(_BYTE *)(v134 + 16);
      v136 = *(_QWORD *)v133;
      v137 = *(_QWORD *)(v133 + 8);
      v138 = *(_BYTE *)(v133 + 16);
      *(_OWORD *)v133 = *(_OWORD *)v134;
      *(_BYTE *)(v133 + 16) = v135;
      sub_2141ED0BC(v136, v137, v138);
      *(_QWORD *)(v133 + 24) = *(_QWORD *)(v134 + 24);
      swift_bridgeObjectRelease();
      v139 = *(_BYTE *)(v134 + 48);
      v140 = *(_QWORD *)(v133 + 32);
      v141 = *(_QWORD *)(v133 + 40);
      *(_OWORD *)(v133 + 32) = *(_OWORD *)(v134 + 32);
      v142 = *(_BYTE *)(v133 + 48);
      *(_BYTE *)(v133 + 48) = v139;
      sub_2141EF1B0(v140, v141, v142);
      *(_OWORD *)(v133 + 56) = *(_OWORD *)(v134 + 56);
      goto LABEL_52;
    }
    sub_21420D764(v133);
  }
  v143 = *(_OWORD *)(v134 + 48);
  *(_OWORD *)(v133 + 32) = *(_OWORD *)(v134 + 32);
  *(_OWORD *)(v133 + 48) = v143;
  *(_QWORD *)(v133 + 64) = *(_QWORD *)(v134 + 64);
  v144 = *(_OWORD *)(v134 + 16);
  *(_OWORD *)v133 = *(_OWORD *)v134;
  *(_OWORD *)(v133 + 16) = v144;
LABEL_52:
  v145 = v10[21];
  v146 = v8 + v145;
  v147 = v9 + v145;
  if (*(_QWORD *)(v8 + v145 + 24))
  {
    if (*(_QWORD *)(v147 + 24))
    {
      v148 = *(_BYTE *)(v147 + 16);
      v149 = *(_QWORD *)v146;
      v150 = *(_QWORD *)(v146 + 8);
      v151 = *(_BYTE *)(v146 + 16);
      *(_OWORD *)v146 = *(_OWORD *)v147;
      *(_BYTE *)(v146 + 16) = v148;
      sub_2141ED0BC(v149, v150, v151);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      swift_bridgeObjectRelease();
      v152 = *(_BYTE *)(v147 + 48);
      v153 = *(_QWORD *)(v146 + 32);
      v154 = *(_QWORD *)(v146 + 40);
      *(_OWORD *)(v146 + 32) = *(_OWORD *)(v147 + 32);
      v155 = *(_BYTE *)(v146 + 48);
      *(_BYTE *)(v146 + 48) = v152;
      sub_2141EF1B0(v153, v154, v155);
      *(_OWORD *)(v146 + 56) = *(_OWORD *)(v147 + 56);
      goto LABEL_57;
    }
    sub_21420D764(v146);
  }
  v156 = *(_OWORD *)(v147 + 48);
  *(_OWORD *)(v146 + 32) = *(_OWORD *)(v147 + 32);
  *(_OWORD *)(v146 + 48) = v156;
  *(_QWORD *)(v146 + 64) = *(_QWORD *)(v147 + 64);
  v157 = *(_OWORD *)(v147 + 16);
  *(_OWORD *)v146 = *(_OWORD *)v147;
  *(_OWORD *)(v146 + 16) = v157;
LABEL_57:
  v158 = v10[22];
  v159 = v8 + v158;
  v160 = v9 + v158;
  *(_OWORD *)v159 = *(_OWORD *)v160;
  *(_QWORD *)(v159 + 16) = *(_QWORD *)(v160 + 16);
  v161 = v10[23];
  v162 = v8 + v161;
  v163 = v9 + v161;
  *(_OWORD *)v162 = *(_OWORD *)v163;
  *(_QWORD *)(v162 + 16) = *(_QWORD *)(v163 + 16);
  v164 = v10[24];
  v165 = v8 + v164;
  v166 = v9 + v164;
  if (*(_QWORD *)(v8 + v164 + 24))
  {
    if (*(_QWORD *)(v166 + 24))
    {
      v167 = *(_BYTE *)(v166 + 16);
      v168 = *(_QWORD *)v165;
      v169 = *(_QWORD *)(v165 + 8);
      v170 = *(_BYTE *)(v165 + 16);
      *(_OWORD *)v165 = *(_OWORD *)v166;
      *(_BYTE *)(v165 + 16) = v167;
      sub_2141ED0BC(v168, v169, v170);
      *(_QWORD *)(v165 + 24) = *(_QWORD *)(v166 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
    sub_21420D798(v165);
  }
  v171 = *(_OWORD *)(v166 + 16);
  *(_OWORD *)v165 = *(_OWORD *)v166;
  *(_OWORD *)(v165 + 16) = v171;
LABEL_62:
  v172 = v10[25];
  v173 = v8 + v172;
  v174 = v9 + v172;
  if (!*(_QWORD *)(v8 + v172 + 24))
  {
LABEL_66:
    v179 = *(_OWORD *)(v174 + 16);
    *(_OWORD *)v173 = *(_OWORD *)v174;
    *(_OWORD *)(v173 + 16) = v179;
    goto LABEL_67;
  }
  if (!*(_QWORD *)(v174 + 24))
  {
    sub_21420D798(v173);
    goto LABEL_66;
  }
  v175 = *(_BYTE *)(v174 + 16);
  v176 = *(_QWORD *)v173;
  v177 = *(_QWORD *)(v173 + 8);
  v178 = *(_BYTE *)(v173 + 16);
  *(_OWORD *)v173 = *(_OWORD *)v174;
  *(_BYTE *)(v173 + 16) = v175;
  sub_2141ED0BC(v176, v177, v178);
  *(_QWORD *)(v173 + 24) = *(_QWORD *)(v174 + 24);
  swift_bridgeObjectRelease();
LABEL_67:
  v180 = v10[26];
  v181 = (_QWORD *)(v8 + v180);
  v182 = (uint64_t *)(v9 + v180);
  v184 = *v182;
  v183 = v182[1];
  *v181 = v184;
  v181[1] = v183;
  swift_bridgeObjectRelease();
  v185 = v10[27];
  v186 = v8 + v185;
  v187 = v9 + v185;
  if (*(_QWORD *)(v186 + 24))
  {
    if (*(_QWORD *)(v187 + 24))
      _s6Charts15AnyChartContentVwxx_0(v186);
    else
      sub_21420D92C(v186);
  }
  v188 = *(_OWORD *)(v187 + 16);
  *(_OWORD *)v186 = *(_OWORD *)v187;
  *(_OWORD *)(v186 + 16) = v188;
  return a1;
}

uint64_t sub_2142F2E0C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F2E1C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for RulesRenderer(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F137E0);
}

void sub_2142F2E40()
{
  unint64_t v0;

  sub_21420E5A4(319, &qword_253F13928, (void (*)(uint64_t))type metadata accessor for ChartContentRenderContext.Environment);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *sub_2142F2EDC(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *__dst;
  uint64_t v31;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    v8 = a3[10];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    v11 = sub_214424308();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[11];
    v13 = (char *)v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = *((_BYTE *)a2 + v12 + 40);
    if ((v15 & 1) != 0)
    {
      v16 = *(_OWORD *)(v14 + 24);
      *(_OWORD *)(v13 + 24) = v16;
      (**(void (***)(char *, uint64_t))(v16 - 8))(v13, v14);
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain();
    }
    v13[40] = v15;
    v13[41] = *(_BYTE *)(v14 + 41);
    *((_QWORD *)v13 + 6) = *(_QWORD *)(v14 + 48);
    *((_QWORD *)v13 + 7) = *(_QWORD *)(v14 + 56);
    v18 = *(_QWORD *)(v14 + 72);
    *((_QWORD *)v13 + 8) = *(_QWORD *)(v14 + 64);
    *((_QWORD *)v13 + 9) = v18;
    *((_OWORD *)v13 + 5) = *(_OWORD *)(v14 + 80);
    v19 = type metadata accessor for SgShapeStyle();
    v20 = *(int *)(v19 + 32);
    __dst = &v13[v20];
    v31 = v19;
    v21 = (const void *)(v14 + v20);
    v22 = sub_214424C68();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    if (v24(v21, 1, v22))
    {
      v25 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(__dst, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    v26 = *(int *)(v31 + 36);
    v27 = &v13[v26];
    v28 = v14 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_WORD *)v27 + 4) = *(_WORD *)(v28 + 8);
    *(_QWORD *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  }
  swift_retain();
  return v4;
}

uint64_t sub_2142F30DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 44);
  if ((*(_BYTE *)(v6 + 40) & 1) != 0)
    _s6Charts15AnyChartContentVwxx_0(v6);
  else
    swift_release();
  swift_bridgeObjectRelease();
  v7 = v6 + *(int *)(type metadata accessor for SgShapeStyle() + 32);
  v8 = sub_214424C68();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_release();
}

uint64_t sub_2142F31B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__dst;
  uint64_t v29;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 44);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(a2 + v11 + 40);
  v29 = a3;
  if ((v14 & 1) != 0)
  {
    v15 = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 24) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v12, v13);
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    swift_retain();
  }
  *(_BYTE *)(v12 + 40) = v14;
  *(_BYTE *)(v12 + 41) = *(_BYTE *)(v13 + 41);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
  v16 = *(_QWORD *)(v13 + 72);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v12 + 72) = v16;
  *(_OWORD *)(v12 + 80) = *(_OWORD *)(v13 + 80);
  v17 = type metadata accessor for SgShapeStyle();
  v18 = *(int *)(v17 + 32);
  __dst = (void *)(v12 + v18);
  v19 = (const void *)(v13 + v18);
  v20 = sub_214424C68();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  if (v22(v19, 1, v20))
  {
    v23 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  v24 = *(int *)(v17 + 36);
  v25 = v12 + v24;
  v26 = v13 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_WORD *)(v25 + 8) = *(_WORD *)(v26 + 8);
  *(_QWORD *)(a1 + *(int *)(v29 + 48)) = *(_QWORD *)(a2 + *(int *)(v29 + 48));
  swift_retain();
  return a1;
}

_QWORD *sub_2142F3390(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v28 = a3;
  v10 = *(int *)(a3 + 44);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  if (a1 != a2)
  {
    sub_21420D6FC((uint64_t)a1 + v10);
    if ((v12[40] & 1) != 0)
    {
      v13 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 3) = v13;
      *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
      (**(void (***)(char *, char *))(v13 - 8))(v11, v12);
      v11[40] = 1;
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v11[40] = 0;
      swift_retain();
    }
  }
  v11[41] = v12[41];
  *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
  *((_DWORD *)v11 + 14) = *((_DWORD *)v12 + 14);
  *((_DWORD *)v11 + 15) = *((_DWORD *)v12 + 15);
  *((_QWORD *)v11 + 8) = *((_QWORD *)v12 + 8);
  *((_QWORD *)v11 + 9) = *((_QWORD *)v12 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 10) = *((_QWORD *)v12 + 10);
  *((_QWORD *)v11 + 11) = *((_QWORD *)v12 + 11);
  v27 = type metadata accessor for SgShapeStyle();
  v14 = *(int *)(v27 + 32);
  v15 = &v11[v14];
  v16 = &v12[v14];
  v17 = sub_214424C68();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_10;
  }
  if (v21)
  {
LABEL_10:
    v22 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_11:
  v23 = *(int *)(v27 + 36);
  v24 = &v11[v23];
  v25 = &v12[v23];
  *(_QWORD *)&v11[v23] = *(_QWORD *)v25;
  swift_retain();
  swift_release();
  v24[8] = v25[8];
  v24[9] = v25[9];
  *(_QWORD *)((char *)a1 + *(int *)(v28 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v28 + 48));
  return a1;
}

uint64_t sub_2142F3628(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[11];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(a2 + v11 + 16);
  *(_OWORD *)v12 = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a2 + v11 + 25);
  *(_BYTE *)(v12 + 41) = *(_BYTE *)(a2 + v11 + 41);
  v15 = *(_OWORD *)(a2 + v11 + 64);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(a2 + v11 + 48);
  *(_OWORD *)(v12 + 64) = v15;
  v16 = *(_QWORD *)(a2 + v11 + 88);
  *(_QWORD *)(v12 + 80) = *(_QWORD *)(a2 + v11 + 80);
  *(_QWORD *)(v12 + 88) = v16;
  v17 = type metadata accessor for SgShapeStyle();
  v18 = *(int *)(v17 + 32);
  v19 = (void *)(v12 + v18);
  v20 = (const void *)(v13 + v18);
  v21 = sub_214424C68();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = *(int *)(v17 + 36);
  v25 = v12 + v24;
  v26 = v13 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_WORD *)(v25 + 8) = *(_WORD *)(v26 + 8);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_2142F37A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v29 = a3;
  v10 = *(int *)(a3 + 44);
  v11 = a1 + v10;
  v12 = a2 + v10;
  if (a1 != a2)
  {
    sub_21420D6FC(a1 + v10);
    v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v13;
    *(_OWORD *)(v11 + 25) = *(_OWORD *)(v12 + 25);
  }
  *(_BYTE *)(v11 + 41) = *(_BYTE *)(v12 + 41);
  v14 = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 56) = v14;
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
  v28 = type metadata accessor for SgShapeStyle();
  v15 = *(int *)(v28 + 32);
  v16 = (void *)(v11 + v15);
  v17 = (void *)(v12 + v15);
  v18 = sub_214424C68();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_8;
  }
  if (v22)
  {
LABEL_8:
    v23 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_9:
  v24 = *(int *)(v28 + 36);
  v25 = v11 + v24;
  v26 = v12 + v24;
  *(_QWORD *)v25 = *(_QWORD *)(v12 + v24);
  swift_release();
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(_BYTE *)(v25 + 9) = *(_BYTE *)(v26 + 9);
  *(_QWORD *)(a1 + *(int *)(v29 + 48)) = *(_QWORD *)(a2 + *(int *)(v29 + 48));
  return a1;
}

uint64_t sub_2142F39C0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F39CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_214424308();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 40);
  }
  else
  {
    v8 = type metadata accessor for SgShapeStyle();
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 44);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t sub_2142F3A3C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F3A48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = sub_214424308();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 40);
  }
  else
  {
    v10 = type metadata accessor for SgShapeStyle();
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 44);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for SgRectangle(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F143A8);
}

uint64_t sub_2142F3AD4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_214424308();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SgShapeStyle();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_2142F3B7C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  int v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  int *v127;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(v4 + 48) = a2[6];
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    v8 = v6[8];
    v9 = (_OWORD *)(v4 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = *((unsigned __int8 *)v10 + 40);
      v127 = v6;
      if (v16 == 255)
      {
        v17 = v10[1];
        *v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if ((v16 & 1) != 0)
      {
        v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((_BYTE *)v9 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_BYTE *)v9 + 40) = 0;
        swift_retain();
      }
      *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      v19 = *((_QWORD *)v10 + 9);
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v19;
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      v126 = v12;
      if (v20 == 255)
      {
        v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if ((v20 & 1) != 0)
      {
        *((_QWORD *)v9 + 11) = *((_QWORD *)v10 + 11);
        v9[6] = v10[6];
        *((_BYTE *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((_BYTE *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
      *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
      *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
      v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
      v24 = v11[11];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = sub_214424308();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = v11[12];
      v31 = (char *)v9 + v30;
      v32 = (char *)v10 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
      v33 = v11[14];
      v34 = (char *)v9 + v33;
      v35 = (char *)v10 + v33;
      v36 = sub_214424C68();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v39 = v11[15];
      v40 = (char *)v9 + v39;
      v41 = (char *)v10 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
      *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
      v42 = v11[18];
      v43 = (char *)v9 + v42;
      v44 = (char *)v10 + v42;
      v45 = *(_QWORD *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        v46 = *(_QWORD *)v44;
        v47 = *((_QWORD *)v44 + 1);
        v48 = v44[16];
        sub_2141DD130(*(_QWORD *)v44, v47, v48);
        *(_QWORD *)v43 = v46;
        *((_QWORD *)v43 + 1) = v47;
        v43[16] = v48;
        v49 = *((_QWORD *)v44 + 4);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
        v50 = *((_QWORD *)v44 + 5);
        v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v49, v50, v51);
        *((_QWORD *)v43 + 4) = v49;
        *((_QWORD *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((_QWORD *)v43 + 8) = *((_QWORD *)v44 + 8);
        v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      v54 = v11[19];
      v55 = (char *)v9 + v54;
      v56 = (char *)v10 + v54;
      if (*(_QWORD *)((char *)v10 + v54 + 24))
      {
        v57 = *(_QWORD *)v56;
        v58 = *((_QWORD *)v56 + 1);
        v59 = v56[16];
        sub_2141DD130(*(_QWORD *)v56, v58, v59);
        *(_QWORD *)v55 = v57;
        *((_QWORD *)v55 + 1) = v58;
        v55[16] = v59;
        v60 = *((_QWORD *)v56 + 4);
        *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
        v61 = *((_QWORD *)v56 + 5);
        v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v60, v61, v62);
        *((_QWORD *)v55 + 4) = v60;
        *((_QWORD *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
        v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      v65 = v11[20];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      if (*(_QWORD *)((char *)v10 + v65 + 24))
      {
        v68 = *(_QWORD *)v67;
        v69 = *((_QWORD *)v67 + 1);
        v70 = v67[16];
        sub_2141DD130(*(_QWORD *)v67, v69, v70);
        *(_QWORD *)v66 = v68;
        *((_QWORD *)v66 + 1) = v69;
        v66[16] = v70;
        v71 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
        v72 = *((_QWORD *)v67 + 5);
        v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v71, v72, v73);
        *((_QWORD *)v66 + 4) = v71;
        *((_QWORD *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((_QWORD *)v66 + 8) = *((_QWORD *)v67 + 8);
        v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      v76 = v11[21];
      v77 = (char *)v9 + v76;
      v78 = (char *)v10 + v76;
      if (*(_QWORD *)((char *)v10 + v76 + 24))
      {
        v79 = *(_QWORD *)v78;
        v80 = *((_QWORD *)v78 + 1);
        v81 = v78[16];
        sub_2141DD130(*(_QWORD *)v78, v80, v81);
        *(_QWORD *)v77 = v79;
        *((_QWORD *)v77 + 1) = v80;
        v77[16] = v81;
        v82 = *((_QWORD *)v78 + 4);
        *((_QWORD *)v77 + 3) = *((_QWORD *)v78 + 3);
        v83 = *((_QWORD *)v78 + 5);
        v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v82, v83, v84);
        *((_QWORD *)v77 + 4) = v82;
        *((_QWORD *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((_QWORD *)v77 + 8) = *((_QWORD *)v78 + 8);
        v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      v87 = v11[22];
      v88 = (char *)v9 + v87;
      v89 = (char *)v10 + v87;
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
      v90 = v11[23];
      v91 = (char *)v9 + v90;
      v92 = (char *)v10 + v90;
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
      v93 = v11[24];
      v94 = (char *)v9 + v93;
      v95 = (char *)v10 + v93;
      if (*(_QWORD *)((char *)v10 + v93 + 24))
      {
        v96 = *(_QWORD *)v95;
        v97 = *((_QWORD *)v95 + 1);
        v98 = v95[16];
        sub_2141DD130(*(_QWORD *)v95, v97, v98);
        *(_QWORD *)v94 = v96;
        *((_QWORD *)v94 + 1) = v97;
        v94[16] = v98;
        *((_QWORD *)v94 + 3) = *((_QWORD *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      v100 = v11[25];
      v101 = (char *)v9 + v100;
      v102 = (char *)v10 + v100;
      if (*(_QWORD *)((char *)v10 + v100 + 24))
      {
        v103 = *(_QWORD *)v102;
        v104 = *((_QWORD *)v102 + 1);
        v105 = v102[16];
        sub_2141DD130(*(_QWORD *)v102, v104, v105);
        *(_QWORD *)v101 = v103;
        *((_QWORD *)v101 + 1) = v104;
        v101[16] = v105;
        *((_QWORD *)v101 + 3) = *((_QWORD *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      v107 = v11[26];
      v108 = (_QWORD *)((char *)v9 + v107);
      v109 = (_QWORD *)((char *)v10 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = v11[27];
      v112 = (char *)v9 + v111;
      v113 = (char *)v10 + v111;
      v114 = *((_QWORD *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((_QWORD *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      v6 = v127;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v126 + 56))(v9, 0, 1, v11);
    }
    v116 = v6[9];
    v117 = v4 + v116;
    v118 = (_OWORD *)((char *)a2 + v116);
    v119 = *((unsigned __int8 *)a2 + v116 + 40);
    if (v119 == 255)
    {
      v120 = v118[1];
      *(_OWORD *)v117 = *v118;
      *(_OWORD *)(v117 + 16) = v120;
      *(_OWORD *)(v117 + 25) = *(_OWORD *)((char *)v118 + 25);
    }
    else if ((v119 & 1) != 0)
    {
      *(_QWORD *)v117 = *(_QWORD *)v118;
      *(_OWORD *)(v117 + 8) = *(_OWORD *)((char *)v118 + 8);
      *(_BYTE *)(v117 + 40) = 1;
      swift_retain();
    }
    else
    {
      v121 = *(_OWORD *)((char *)v118 + 24);
      *(_OWORD *)(v117 + 24) = v121;
      (**(void (***)(uint64_t))(v121 - 8))(v117);
      *(_BYTE *)(v117 + 40) = 0;
    }
    v122 = v6[10];
    v123 = v4 + v122;
    v124 = (uint64_t)a2 + v122;
    *(_OWORD *)v123 = *(_OWORD *)v124;
    *(_BYTE *)(v123 + 16) = *(_BYTE *)(v124 + 16);
  }
  return v4;
}

uint64_t sub_2142F430C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;

  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    v6 = *(unsigned __int8 *)(v4 + 40);
    if (v6 != 255)
    {
      if ((v6 & 1) != 0)
        _s6Charts15AnyChartContentVwxx_0(v4);
      else
        swift_release();
    }
    swift_bridgeObjectRelease();
    v7 = *(unsigned __int8 *)(v4 + 128);
    if (v7 != 255)
    {
      if ((v7 & 1) != 0)
        swift_release();
      else
        _s6Charts15AnyChartContentVwxx_0(v4 + 88);
    }
    v8 = v4 + v5[11];
    v9 = sub_214424308();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = v4 + v5[14];
    v12 = sub_214424C68();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_release();
    v14 = v4 + v5[18];
    if (*(_QWORD *)(v14 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_BYTE *)(v14 + 48));
    }
    v15 = v4 + v5[19];
    if (*(_QWORD *)(v15 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_BYTE *)(v15 + 48));
    }
    v16 = v4 + v5[20];
    if (*(_QWORD *)(v16 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_BYTE *)(v16 + 48));
    }
    v17 = v4 + v5[21];
    if (*(_QWORD *)(v17 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_BYTE *)(v17 + 48));
    }
    v18 = v4 + v5[24];
    if (*(_QWORD *)(v18 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    v19 = v4 + v5[25];
    if (*(_QWORD *)(v19 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v20 = v4 + v5[27];
    if (*(_QWORD *)(v20 + 24))
      _s6Charts15AnyChartContentVwxx_0(v20);
  }
  result = a1 + *(int *)(a2 + 36);
  v22 = *(unsigned __int8 *)(result + 40);
  if (v22 != 255)
  {
    if ((v22 & 1) != 0)
      return swift_release();
    else
      return _s6Charts15AnyChartContentVwxx_0(result);
  }
  return result;
}

uint64_t sub_2142F45C0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, uint64_t, int *);
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  int v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  int *v125;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[8];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48);
  swift_retain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *((unsigned __int8 *)v9 + 40);
    v124 = v11;
    if (v14 == 255)
    {
      v15 = v9[1];
      *v8 = *v9;
      v8[1] = v15;
      *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v9 + 25);
    }
    else if ((v14 & 1) != 0)
    {
      v16 = *(_OWORD *)((char *)v9 + 24);
      *(_OWORD *)((char *)v8 + 24) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v8, v9);
      *((_BYTE *)v8 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_BYTE *)v8 + 40) = 0;
      swift_retain();
    }
    *((_BYTE *)v8 + 41) = *((_BYTE *)v9 + 41);
    *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    v17 = *((_QWORD *)v9 + 9);
    *((_QWORD *)v8 + 8) = *((_QWORD *)v9 + 8);
    *((_QWORD *)v8 + 9) = v17;
    *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
    v18 = *((unsigned __int8 *)v9 + 128);
    swift_bridgeObjectRetain();
    if (v18 == 255)
    {
      v19 = *(_OWORD *)((char *)v9 + 104);
      *(_OWORD *)((char *)v8 + 88) = *(_OWORD *)((char *)v9 + 88);
      *(_OWORD *)((char *)v8 + 104) = v19;
      *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)((char *)v9 + 113);
    }
    else if ((v18 & 1) != 0)
    {
      *((_QWORD *)v8 + 11) = *((_QWORD *)v9 + 11);
      v8[6] = v9[6];
      *((_BYTE *)v8 + 128) = 1;
      swift_retain();
    }
    else
    {
      v20 = v9[7];
      v8[7] = v20;
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)v8 + 88, (uint64_t)v9 + 88);
      *((_BYTE *)v8 + 128) = 0;
    }
    *(_OWORD *)((char *)v8 + 136) = *(_OWORD *)((char *)v9 + 136);
    *((_BYTE *)v8 + 152) = *((_BYTE *)v9 + 152);
    *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
    *((_BYTE *)v8 + 168) = *((_BYTE *)v9 + 168);
    v21 = v9[12];
    v8[11] = v9[11];
    v8[12] = v21;
    *((_BYTE *)v8 + 208) = *((_BYTE *)v9 + 208);
    v22 = v10[11];
    v23 = (char *)v8 + v22;
    v24 = (char *)v9 + v22;
    v25 = sub_214424308();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = v10[12];
    v29 = (char *)v8 + v28;
    v30 = (char *)v9 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    v31 = v10[14];
    v32 = (char *)v8 + v31;
    v33 = (char *)v9 + v31;
    v34 = sub_214424C68();
    v35 = *(_QWORD *)(v34 - 8);
    v125 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v10[15];
    v38 = (char *)v8 + v37;
    v39 = (char *)v9 + v37;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_WORD *)v38 + 4) = *((_WORD *)v39 + 4);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    *(_QWORD *)((char *)v8 + v10[17]) = *(_QWORD *)((char *)v9 + v10[17]);
    v40 = v10[18];
    v41 = (char *)v8 + v40;
    v42 = (char *)v9 + v40;
    v43 = *(_QWORD *)((char *)v9 + v40 + 24);
    swift_retain();
    if (v43)
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      v46 = v42[16];
      sub_2141DD130(*(_QWORD *)v42, v45, v46);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v46;
      v47 = *((_QWORD *)v42 + 4);
      *((_QWORD *)v41 + 3) = *((_QWORD *)v42 + 3);
      v48 = *((_QWORD *)v42 + 5);
      v49 = v42[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v47, v48, v49);
      *((_QWORD *)v41 + 4) = v47;
      *((_QWORD *)v41 + 5) = v48;
      v41[48] = v49;
      *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    }
    else
    {
      v50 = *((_OWORD *)v42 + 3);
      *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
      *((_OWORD *)v41 + 3) = v50;
      *((_QWORD *)v41 + 8) = *((_QWORD *)v42 + 8);
      v51 = *((_OWORD *)v42 + 1);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v51;
    }
    v52 = v10[19];
    v53 = (char *)v8 + v52;
    v54 = (char *)v9 + v52;
    if (*(_QWORD *)((char *)v9 + v52 + 24))
    {
      v55 = *(_QWORD *)v54;
      v56 = *((_QWORD *)v54 + 1);
      v57 = v54[16];
      sub_2141DD130(*(_QWORD *)v54, v56, v57);
      *(_QWORD *)v53 = v55;
      *((_QWORD *)v53 + 1) = v56;
      v53[16] = v57;
      v58 = *((_QWORD *)v54 + 4);
      *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
      v59 = *((_QWORD *)v54 + 5);
      v60 = v54[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v58, v59, v60);
      *((_QWORD *)v53 + 4) = v58;
      *((_QWORD *)v53 + 5) = v59;
      v53[48] = v60;
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
    }
    else
    {
      v61 = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = v61;
      *((_QWORD *)v53 + 8) = *((_QWORD *)v54 + 8);
      v62 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v62;
    }
    v63 = v10[20];
    v64 = (char *)v8 + v63;
    v65 = (char *)v9 + v63;
    if (*(_QWORD *)((char *)v9 + v63 + 24))
    {
      v66 = *(_QWORD *)v65;
      v67 = *((_QWORD *)v65 + 1);
      v68 = v65[16];
      sub_2141DD130(*(_QWORD *)v65, v67, v68);
      *(_QWORD *)v64 = v66;
      *((_QWORD *)v64 + 1) = v67;
      v64[16] = v68;
      v69 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
      v70 = *((_QWORD *)v65 + 5);
      v71 = v65[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v69, v70, v71);
      *((_QWORD *)v64 + 4) = v69;
      *((_QWORD *)v64 + 5) = v70;
      v64[48] = v71;
      *(_OWORD *)(v64 + 56) = *(_OWORD *)(v65 + 56);
    }
    else
    {
      v72 = *((_OWORD *)v65 + 3);
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
      *((_OWORD *)v64 + 3) = v72;
      *((_QWORD *)v64 + 8) = *((_QWORD *)v65 + 8);
      v73 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v73;
    }
    v74 = v10[21];
    v75 = (char *)v8 + v74;
    v76 = (char *)v9 + v74;
    if (*(_QWORD *)((char *)v9 + v74 + 24))
    {
      v77 = *(_QWORD *)v76;
      v78 = *((_QWORD *)v76 + 1);
      v79 = v76[16];
      sub_2141DD130(*(_QWORD *)v76, v78, v79);
      *(_QWORD *)v75 = v77;
      *((_QWORD *)v75 + 1) = v78;
      v75[16] = v79;
      v80 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v75 + 3) = *((_QWORD *)v76 + 3);
      v81 = *((_QWORD *)v76 + 5);
      v82 = v76[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v80, v81, v82);
      *((_QWORD *)v75 + 4) = v80;
      *((_QWORD *)v75 + 5) = v81;
      v75[48] = v82;
      *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
    }
    else
    {
      v83 = *((_OWORD *)v76 + 3);
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_OWORD *)v75 + 3) = v83;
      *((_QWORD *)v75 + 8) = *((_QWORD *)v76 + 8);
      v84 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v84;
    }
    v85 = v10[22];
    v86 = (char *)v8 + v85;
    v87 = (char *)v9 + v85;
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *((_QWORD *)v86 + 2) = *((_QWORD *)v87 + 2);
    v88 = v10[23];
    v89 = (char *)v8 + v88;
    v90 = (char *)v9 + v88;
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
    v91 = v10[24];
    v92 = (char *)v8 + v91;
    v93 = (char *)v9 + v91;
    if (*(_QWORD *)((char *)v9 + v91 + 24))
    {
      v94 = *(_QWORD *)v93;
      v95 = *((_QWORD *)v93 + 1);
      v96 = v93[16];
      sub_2141DD130(*(_QWORD *)v93, v95, v96);
      *(_QWORD *)v92 = v94;
      *((_QWORD *)v92 + 1) = v95;
      v92[16] = v96;
      *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v97;
    }
    v98 = v10[25];
    v99 = (char *)v8 + v98;
    v100 = (char *)v9 + v98;
    if (*(_QWORD *)((char *)v9 + v98 + 24))
    {
      v101 = *(_QWORD *)v100;
      v102 = *((_QWORD *)v100 + 1);
      v103 = v100[16];
      sub_2141DD130(*(_QWORD *)v100, v102, v103);
      *(_QWORD *)v99 = v101;
      *((_QWORD *)v99 + 1) = v102;
      v99[16] = v103;
      *((_QWORD *)v99 + 3) = *((_QWORD *)v100 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v104 = *((_OWORD *)v100 + 1);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *((_OWORD *)v99 + 1) = v104;
    }
    a3 = v125;
    v105 = v10[26];
    v106 = (_QWORD *)((char *)v8 + v105);
    v107 = (_QWORD *)((char *)v9 + v105);
    v108 = v107[1];
    *v106 = *v107;
    v106[1] = v108;
    v109 = v10[27];
    v110 = (char *)v8 + v109;
    v111 = (char *)v9 + v109;
    v112 = *((_QWORD *)v111 + 3);
    swift_bridgeObjectRetain();
    if (v112)
    {
      *((_QWORD *)v110 + 3) = v112;
      (**(void (***)(char *, char *, uint64_t))(v112 - 8))(v110, v111, v112);
    }
    else
    {
      v113 = *((_OWORD *)v111 + 1);
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *((_OWORD *)v110 + 1) = v113;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v124 + 56))(v8, 0, 1, v10);
  }
  v114 = a3[9];
  v115 = a1 + v114;
  v116 = (_OWORD *)(a2 + v114);
  v117 = *(unsigned __int8 *)(a2 + v114 + 40);
  if (v117 == 255)
  {
    v118 = v116[1];
    *(_OWORD *)v115 = *v116;
    *(_OWORD *)(v115 + 16) = v118;
    *(_OWORD *)(v115 + 25) = *(_OWORD *)((char *)v116 + 25);
  }
  else if ((v117 & 1) != 0)
  {
    *(_QWORD *)v115 = *(_QWORD *)v116;
    *(_OWORD *)(v115 + 8) = *(_OWORD *)((char *)v116 + 8);
    *(_BYTE *)(v115 + 40) = 1;
    swift_retain();
  }
  else
  {
    v119 = *(_OWORD *)((char *)v116 + 24);
    *(_OWORD *)(v115 + 24) = v119;
    (**(void (***)(uint64_t))(v119 - 8))(v115);
    *(_BYTE *)(v115 + 40) = 0;
  }
  v120 = a3[10];
  v121 = a1 + v120;
  v122 = a2 + v120;
  *(_OWORD *)v121 = *(_OWORD *)v122;
  *(_BYTE *)(v121 + 16) = *(_BYTE *)(v122 + 16);
  return a1;
}

uint64_t sub_2142F4D1C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  __int128 v141;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  __int128 *v146;
  __int128 *v147;
  int v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  void *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(void *, uint64_t, uint64_t);
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(void *, uint64_t, uint64_t);
  int v177;
  size_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  _QWORD *v300;
  char *v301;
  uint64_t v302;
  _QWORD *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  char v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  _QWORD *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  uint64_t *v346;
  void *v347;
  void (**__src)(uint64_t, _QWORD, uint64_t, int *);
  int *v349;
  int *v350;

  v4 = a2;
  sub_2141DEA14((uint64_t *)a1, a2);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v4 + 40);
  *(_QWORD *)(a1 + 48) = v4[6];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = v4[7];
  *(_QWORD *)(a1 + 64) = v4[8];
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = (_QWORD *)*((_QWORD *)v9 - 1);
  v11 = (uint64_t (*)(uint64_t, uint64_t, int *))v10[6];
  v12 = v11(v7, 1, v9);
  v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = v8[40];
      v349 = a3;
      if (v14 == 255)
      {
        v15 = *(_OWORD *)v8;
        v16 = *((_OWORD *)v8 + 1);
        *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
        *(_OWORD *)v7 = v15;
        *(_OWORD *)(v7 + 16) = v16;
      }
      else if ((v14 & 1) != 0)
      {
        v21 = *((_QWORD *)v8 + 3);
        *(_QWORD *)(v7 + 24) = v21;
        *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
        (**(void (***)(uint64_t, char *))(v21 - 8))(v7, v8);
        *(_BYTE *)(v7 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *(_BYTE *)(v7 + 40) = 0;
        swift_retain();
      }
      *(_BYTE *)(v7 + 41) = v8[41];
      *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
      *(_DWORD *)(v7 + 56) = *((_DWORD *)v8 + 14);
      *(_DWORD *)(v7 + 60) = *((_DWORD *)v8 + 15);
      *(_QWORD *)(v7 + 64) = *((_QWORD *)v8 + 8);
      *(_QWORD *)(v7 + 72) = *((_QWORD *)v8 + 9);
      *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
      v22 = v8[128];
      swift_bridgeObjectRetain();
      __src = (void (**)(uint64_t, _QWORD, uint64_t, int *))v10;
      if (v22 == 255)
      {
        v23 = *(_OWORD *)(v8 + 88);
        v24 = *(_OWORD *)(v8 + 104);
        *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
        *(_OWORD *)(v7 + 88) = v23;
        *(_OWORD *)(v7 + 104) = v24;
      }
      else if ((v22 & 1) != 0)
      {
        *(_QWORD *)(v7 + 88) = *((_QWORD *)v8 + 11);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_BYTE *)(v7 + 128) = 1;
        swift_retain();
      }
      else
      {
        v25 = *((_QWORD *)v8 + 14);
        *(_QWORD *)(v7 + 112) = v25;
        *(_QWORD *)(v7 + 120) = *((_QWORD *)v8 + 15);
        (**(void (***)(uint64_t, uint64_t))(v25 - 8))(v7 + 88, (uint64_t)(v8 + 88));
        *(_BYTE *)(v7 + 128) = 0;
      }
      v26 = *(_OWORD *)(v8 + 136);
      *(_BYTE *)(v7 + 152) = v8[152];
      *(_OWORD *)(v7 + 136) = v26;
      v27 = *((_QWORD *)v8 + 20);
      *(_BYTE *)(v7 + 168) = v8[168];
      *(_QWORD *)(v7 + 160) = v27;
      v28 = *((_OWORD *)v8 + 11);
      v29 = *((_OWORD *)v8 + 12);
      *(_BYTE *)(v7 + 208) = v8[208];
      *(_OWORD *)(v7 + 176) = v28;
      *(_OWORD *)(v7 + 192) = v29;
      v30 = v9[11];
      v31 = (void *)(v7 + v30);
      v32 = &v8[v30];
      v33 = sub_214424308();
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v36 = v9[12];
      v37 = v7 + v36;
      v38 = &v8[v36];
      v39 = *(_QWORD *)v38;
      *(_BYTE *)(v37 + 8) = v38[8];
      *(_QWORD *)v37 = v39;
      *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)&v8[v9[13]];
      v40 = v9[14];
      v41 = (void *)(v7 + v40);
      v42 = &v8[v40];
      v43 = sub_214424C68();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v46 = v9[15];
      v47 = v7 + v46;
      v48 = &v8[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *(_WORD *)(v47 + 8) = *((_WORD *)v48 + 4);
      *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)&v8[v9[16]];
      *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)&v8[v9[17]];
      v49 = v9[18];
      v50 = v7 + v49;
      v51 = &v8[v49];
      v52 = *(_QWORD *)&v8[v49 + 24];
      swift_retain();
      if (v52)
      {
        v53 = *(_QWORD *)v51;
        v54 = *((_QWORD *)v51 + 1);
        v55 = v51[16];
        sub_2141DD130(*(_QWORD *)v51, v54, v55);
        *(_QWORD *)v50 = v53;
        *(_QWORD *)(v50 + 8) = v54;
        *(_BYTE *)(v50 + 16) = v55;
        *(_QWORD *)(v50 + 24) = *((_QWORD *)v51 + 3);
        v56 = *((_QWORD *)v51 + 4);
        v57 = *((_QWORD *)v51 + 5);
        v58 = v51[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v56, v57, v58);
        *(_QWORD *)(v50 + 32) = v56;
        *(_QWORD *)(v50 + 40) = v57;
        *(_BYTE *)(v50 + 48) = v58;
        *(_OWORD *)(v50 + 56) = *(_OWORD *)(v51 + 56);
      }
      else
      {
        *(_OWORD *)v50 = *(_OWORD *)v51;
        v59 = *((_OWORD *)v51 + 1);
        v60 = *((_OWORD *)v51 + 2);
        v61 = *((_OWORD *)v51 + 3);
        *(_QWORD *)(v50 + 64) = *((_QWORD *)v51 + 8);
        *(_OWORD *)(v50 + 32) = v60;
        *(_OWORD *)(v50 + 48) = v61;
        *(_OWORD *)(v50 + 16) = v59;
      }
      v62 = v9[19];
      v63 = v7 + v62;
      v64 = &v8[v62];
      if (*(_QWORD *)&v8[v62 + 24])
      {
        v65 = *(_QWORD *)v64;
        v66 = *((_QWORD *)v64 + 1);
        v67 = v64[16];
        sub_2141DD130(*(_QWORD *)v64, v66, v67);
        *(_QWORD *)v63 = v65;
        *(_QWORD *)(v63 + 8) = v66;
        *(_BYTE *)(v63 + 16) = v67;
        *(_QWORD *)(v63 + 24) = *((_QWORD *)v64 + 3);
        v68 = *((_QWORD *)v64 + 4);
        v69 = *((_QWORD *)v64 + 5);
        v70 = v64[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v68, v69, v70);
        *(_QWORD *)(v63 + 32) = v68;
        *(_QWORD *)(v63 + 40) = v69;
        *(_BYTE *)(v63 + 48) = v70;
        *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
      }
      else
      {
        *(_OWORD *)v63 = *(_OWORD *)v64;
        v71 = *((_OWORD *)v64 + 1);
        v72 = *((_OWORD *)v64 + 2);
        v73 = *((_OWORD *)v64 + 3);
        *(_QWORD *)(v63 + 64) = *((_QWORD *)v64 + 8);
        *(_OWORD *)(v63 + 32) = v72;
        *(_OWORD *)(v63 + 48) = v73;
        *(_OWORD *)(v63 + 16) = v71;
      }
      v74 = v9[20];
      v75 = v7 + v74;
      v76 = &v8[v74];
      if (*(_QWORD *)&v8[v74 + 24])
      {
        v77 = *(_QWORD *)v76;
        v78 = *((_QWORD *)v76 + 1);
        v79 = v76[16];
        sub_2141DD130(*(_QWORD *)v76, v78, v79);
        *(_QWORD *)v75 = v77;
        *(_QWORD *)(v75 + 8) = v78;
        *(_BYTE *)(v75 + 16) = v79;
        *(_QWORD *)(v75 + 24) = *((_QWORD *)v76 + 3);
        v80 = *((_QWORD *)v76 + 4);
        v81 = *((_QWORD *)v76 + 5);
        v82 = v76[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v80, v81, v82);
        *(_QWORD *)(v75 + 32) = v80;
        *(_QWORD *)(v75 + 40) = v81;
        *(_BYTE *)(v75 + 48) = v82;
        *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
      }
      else
      {
        *(_OWORD *)v75 = *(_OWORD *)v76;
        v83 = *((_OWORD *)v76 + 1);
        v84 = *((_OWORD *)v76 + 2);
        v85 = *((_OWORD *)v76 + 3);
        *(_QWORD *)(v75 + 64) = *((_QWORD *)v76 + 8);
        *(_OWORD *)(v75 + 32) = v84;
        *(_OWORD *)(v75 + 48) = v85;
        *(_OWORD *)(v75 + 16) = v83;
      }
      v86 = v9[21];
      v87 = v7 + v86;
      v88 = &v8[v86];
      if (*(_QWORD *)&v8[v86 + 24])
      {
        v89 = *(_QWORD *)v88;
        v90 = *((_QWORD *)v88 + 1);
        v91 = v88[16];
        sub_2141DD130(*(_QWORD *)v88, v90, v91);
        *(_QWORD *)v87 = v89;
        *(_QWORD *)(v87 + 8) = v90;
        *(_BYTE *)(v87 + 16) = v91;
        *(_QWORD *)(v87 + 24) = *((_QWORD *)v88 + 3);
        v92 = *((_QWORD *)v88 + 4);
        v93 = *((_QWORD *)v88 + 5);
        v94 = v88[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v92, v93, v94);
        *(_QWORD *)(v87 + 32) = v92;
        *(_QWORD *)(v87 + 40) = v93;
        *(_BYTE *)(v87 + 48) = v94;
        *(_OWORD *)(v87 + 56) = *(_OWORD *)(v88 + 56);
      }
      else
      {
        *(_OWORD *)v87 = *(_OWORD *)v88;
        v95 = *((_OWORD *)v88 + 1);
        v96 = *((_OWORD *)v88 + 2);
        v97 = *((_OWORD *)v88 + 3);
        *(_QWORD *)(v87 + 64) = *((_QWORD *)v88 + 8);
        *(_OWORD *)(v87 + 32) = v96;
        *(_OWORD *)(v87 + 48) = v97;
        *(_OWORD *)(v87 + 16) = v95;
      }
      v98 = v9[22];
      v99 = v7 + v98;
      v100 = &v8[v98];
      v101 = *(_OWORD *)v100;
      *(_QWORD *)(v99 + 16) = *((_QWORD *)v100 + 2);
      *(_OWORD *)v99 = v101;
      v102 = v9[23];
      v103 = v7 + v102;
      v104 = &v8[v102];
      v105 = *(_OWORD *)v104;
      *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
      *(_OWORD *)v103 = v105;
      v106 = v9[24];
      v107 = v7 + v106;
      v108 = &v8[v106];
      if (*(_QWORD *)&v8[v106 + 24])
      {
        v109 = *(_QWORD *)v108;
        v110 = *((_QWORD *)v108 + 1);
        v111 = v108[16];
        sub_2141DD130(*(_QWORD *)v108, v110, v111);
        *(_QWORD *)v107 = v109;
        *(_QWORD *)(v107 + 8) = v110;
        *(_BYTE *)(v107 + 16) = v111;
        *(_QWORD *)(v107 + 24) = *((_QWORD *)v108 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v112 = *((_OWORD *)v108 + 1);
        *(_OWORD *)v107 = *(_OWORD *)v108;
        *(_OWORD *)(v107 + 16) = v112;
      }
      v113 = v9[25];
      v114 = v7 + v113;
      v115 = &v8[v113];
      if (*(_QWORD *)&v8[v113 + 24])
      {
        v116 = *(_QWORD *)v115;
        v117 = *((_QWORD *)v115 + 1);
        v118 = v115[16];
        sub_2141DD130(*(_QWORD *)v115, v117, v118);
        *(_QWORD *)v114 = v116;
        *(_QWORD *)(v114 + 8) = v117;
        *(_BYTE *)(v114 + 16) = v118;
        *(_QWORD *)(v114 + 24) = *((_QWORD *)v115 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v119 = *((_OWORD *)v115 + 1);
        *(_OWORD *)v114 = *(_OWORD *)v115;
        *(_OWORD *)(v114 + 16) = v119;
      }
      v120 = v9[26];
      v121 = (_QWORD *)(v7 + v120);
      v122 = &v8[v120];
      *v121 = *(_QWORD *)v122;
      v121[1] = *((_QWORD *)v122 + 1);
      v123 = v9[27];
      v124 = v7 + v123;
      v125 = &v8[v123];
      v126 = *((_QWORD *)v125 + 3);
      swift_bridgeObjectRetain();
      if (v126)
      {
        *(_QWORD *)(v124 + 24) = v126;
        (**(void (***)(uint64_t, char *, uint64_t))(v126 - 8))(v124, v125, v126);
      }
      else
      {
        v127 = *((_OWORD *)v125 + 1);
        *(_OWORD *)v124 = *(_OWORD *)v125;
        *(_OWORD *)(v124 + 16) = v127;
      }
      a3 = v349;
      __src[7](v7, 0, 1, v9);
      goto LABEL_47;
    }
LABEL_7:
    v17 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_47;
  }
  if (v13)
  {
    sub_2141DD370(v7, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  v18 = v8[40];
  if (*(unsigned __int8 *)(v7 + 40) == 255)
  {
    if (v18 == 255)
    {
      v143 = *(_OWORD *)v8;
      v144 = *((_OWORD *)v8 + 1);
      *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
      *(_OWORD *)v7 = v143;
      *(_OWORD *)(v7 + 16) = v144;
      goto LABEL_65;
    }
    if ((v18 & 1) != 0)
      goto LABEL_62;
LABEL_64:
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_BYTE *)(v7 + 40) = 0;
    swift_retain();
    goto LABEL_65;
  }
  if (v18 == 255)
  {
    sub_21420D6FC(v7);
    v19 = *(_OWORD *)(v8 + 25);
    v20 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v20;
    *(_OWORD *)(v7 + 25) = v19;
    goto LABEL_65;
  }
  if ((uint64_t *)a1 != v4)
  {
    sub_21420D6FC(v7);
    if ((v8[40] & 1) != 0)
    {
LABEL_62:
      v145 = *((_QWORD *)v8 + 3);
      *(_QWORD *)(v7 + 24) = v145;
      *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
      (**(void (***)(uint64_t, char *))(v145 - 8))(v7, v8);
      *(_BYTE *)(v7 + 40) = 1;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  v350 = a3;
  *(_BYTE *)(v7 + 41) = v8[41];
  *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
  *(_DWORD *)(v7 + 56) = *((_DWORD *)v8 + 14);
  *(_DWORD *)(v7 + 60) = *((_DWORD *)v8 + 15);
  *(_QWORD *)(v7 + 64) = *((_QWORD *)v8 + 8);
  *(_QWORD *)(v7 + 72) = *((_QWORD *)v8 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
  v146 = (__int128 *)(v7 + 88);
  v147 = (__int128 *)(v8 + 88);
  v148 = v8[128];
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
    if (v148 == 255)
    {
      v151 = *v147;
      v152 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *v146 = v151;
      *(_OWORD *)(v7 + 104) = v152;
      goto LABEL_75;
    }
    if ((v148 & 1) != 0)
      goto LABEL_72;
LABEL_74:
    v153 = *((_QWORD *)v8 + 14);
    *(_QWORD *)(v7 + 112) = v153;
    *(_QWORD *)(v7 + 120) = *((_QWORD *)v8 + 15);
    (**(void (***)(uint64_t, uint64_t))(v153 - 8))(v7 + 88, (uint64_t)(v8 + 88));
    *(_BYTE *)(v7 + 128) = 0;
    goto LABEL_75;
  }
  if (v148 == 255)
  {
    sub_21420D730(v7 + 88);
    v149 = *(_OWORD *)(v8 + 113);
    v150 = *(_OWORD *)(v8 + 104);
    *v146 = *v147;
    *(_OWORD *)(v7 + 104) = v150;
    *(_OWORD *)(v7 + 113) = v149;
    goto LABEL_75;
  }
  if ((uint64_t *)a1 != v4)
  {
    sub_21420D730(v7 + 88);
    if ((v8[128] & 1) != 0)
    {
LABEL_72:
      *(_QWORD *)(v7 + 88) = *((_QWORD *)v8 + 11);
      *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
      *(_BYTE *)(v7 + 128) = 1;
      swift_retain();
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_75:
  v346 = v4;
  v154 = *(_OWORD *)(v8 + 136);
  *(_BYTE *)(v7 + 152) = v8[152];
  *(_OWORD *)(v7 + 136) = v154;
  v155 = *((_QWORD *)v8 + 20);
  *(_BYTE *)(v7 + 168) = v8[168];
  *(_QWORD *)(v7 + 160) = v155;
  v156 = *((_OWORD *)v8 + 11);
  v157 = *((_OWORD *)v8 + 12);
  *(_BYTE *)(v7 + 208) = v8[208];
  *(_OWORD *)(v7 + 176) = v156;
  *(_OWORD *)(v7 + 192) = v157;
  v158 = v9[11];
  v159 = (void *)(v7 + v158);
  v160 = &v8[v158];
  v161 = sub_214424308();
  v162 = *(_QWORD *)(v161 - 8);
  v163 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v162 + 48);
  v164 = v163(v159, 1, v161);
  v165 = v163(v160, 1, v161);
  if (v164)
  {
    if (!v165)
    {
      (*(void (**)(void *, char *, uint64_t))(v162 + 16))(v159, v160, v161);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if (v165)
  {
    (*(void (**)(void *, uint64_t))(v162 + 8))(v159, v161);
LABEL_80:
    v166 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(void *, char *, uint64_t))(v162 + 24))(v159, v160, v161);
LABEL_81:
  v4 = v346;
  v167 = v9[12];
  v168 = v7 + v167;
  v169 = &v8[v167];
  v170 = *(_QWORD *)v169;
  *(_BYTE *)(v168 + 8) = v169[8];
  *(_QWORD *)v168 = v170;
  *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)&v8[v9[13]];
  v171 = v9[14];
  v172 = (void *)(v7 + v171);
  v173 = &v8[v171];
  v174 = sub_214424C68();
  v175 = *(_QWORD *)(v174 - 8);
  v176 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v175 + 48);
  v347 = v172;
  LODWORD(v172) = v176(v172, 1, v174);
  v177 = v176(v173, 1, v174);
  if ((_DWORD)v172)
  {
    if (v177)
    {
      v178 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v179 = v347;
LABEL_86:
      memcpy(v179, v173, v178);
      goto LABEL_90;
    }
    (*(void (**)(void *, char *, uint64_t))(v175 + 16))(v347, v173, v174);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v347, 0, 1, v174);
  }
  else
  {
    if (v177)
    {
      (*(void (**)(void *, uint64_t))(v175 + 8))(v347, v174);
      v178 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v179 = v347;
      goto LABEL_86;
    }
    (*(void (**)(void *, char *, uint64_t))(v175 + 24))(v347, v173, v174);
  }
LABEL_90:
  v180 = v9[15];
  v181 = v7 + v180;
  v182 = &v8[v180];
  *(_QWORD *)(v7 + v180) = *(_QWORD *)&v8[v180];
  swift_retain();
  swift_release();
  *(_BYTE *)(v181 + 8) = v182[8];
  *(_BYTE *)(v181 + 9) = v182[9];
  *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)&v8[v9[16]];
  *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)&v8[v9[17]];
  v183 = v9[18];
  v184 = v7 + v183;
  v185 = &v8[v183];
  v186 = *(_QWORD *)(v7 + v183 + 24);
  v187 = *(_QWORD *)&v8[v183 + 24];
  if (v186)
  {
    if (v187)
    {
      v188 = *(_QWORD *)v185;
      v189 = *((_QWORD *)v185 + 1);
      v190 = v185[16];
      sub_2141DD130(*(_QWORD *)v185, v189, v190);
      v191 = *(_QWORD *)v184;
      v192 = *(_QWORD *)(v184 + 8);
      v193 = *(_BYTE *)(v184 + 16);
      *(_QWORD *)v184 = v188;
      *(_QWORD *)(v184 + 8) = v189;
      *(_BYTE *)(v184 + 16) = v190;
      sub_2141ED0BC(v191, v192, v193);
      *(_QWORD *)(v184 + 24) = *((_QWORD *)v185 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v194 = *((_QWORD *)v185 + 4);
      v195 = *((_QWORD *)v185 + 5);
      v196 = v185[48];
      sub_2141DD140(v194, v195, v196);
      v197 = *(_QWORD *)(v184 + 32);
      v198 = *(_QWORD *)(v184 + 40);
      *(_QWORD *)(v184 + 32) = v194;
      *(_QWORD *)(v184 + 40) = v195;
      v199 = *(_BYTE *)(v184 + 48);
      *(_BYTE *)(v184 + 48) = v196;
      sub_2141EF1B0(v197, v198, v199);
LABEL_95:
      *(_OWORD *)(v184 + 56) = *(_OWORD *)(v185 + 56);
      goto LABEL_98;
    }
    sub_21420D764(v184);
    *(_OWORD *)v184 = *(_OWORD *)v185;
    v207 = *((_OWORD *)v185 + 2);
    v206 = *((_OWORD *)v185 + 3);
    v208 = *((_OWORD *)v185 + 1);
    *(_QWORD *)(v184 + 64) = *((_QWORD *)v185 + 8);
    *(_OWORD *)(v184 + 32) = v207;
    *(_OWORD *)(v184 + 48) = v206;
    *(_OWORD *)(v184 + 16) = v208;
  }
  else
  {
    if (v187)
    {
      v200 = *(_QWORD *)v185;
      v201 = *((_QWORD *)v185 + 1);
      v202 = v185[16];
      sub_2141DD130(*(_QWORD *)v185, v201, v202);
      *(_QWORD *)v184 = v200;
      *(_QWORD *)(v184 + 8) = v201;
      *(_BYTE *)(v184 + 16) = v202;
      *(_QWORD *)(v184 + 24) = *((_QWORD *)v185 + 3);
      v203 = *((_QWORD *)v185 + 4);
      v204 = *((_QWORD *)v185 + 5);
      v205 = v185[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v203, v204, v205);
      *(_QWORD *)(v184 + 32) = v203;
      *(_QWORD *)(v184 + 40) = v204;
      *(_BYTE *)(v184 + 48) = v205;
      goto LABEL_95;
    }
    *(_OWORD *)v184 = *(_OWORD *)v185;
    v209 = *((_OWORD *)v185 + 1);
    v210 = *((_OWORD *)v185 + 2);
    v211 = *((_OWORD *)v185 + 3);
    *(_QWORD *)(v184 + 64) = *((_QWORD *)v185 + 8);
    *(_OWORD *)(v184 + 32) = v210;
    *(_OWORD *)(v184 + 48) = v211;
    *(_OWORD *)(v184 + 16) = v209;
  }
LABEL_98:
  v212 = v9[19];
  v213 = v7 + v212;
  v214 = &v8[v212];
  v215 = *(_QWORD *)(v7 + v212 + 24);
  v216 = *(_QWORD *)&v8[v212 + 24];
  if (v215)
  {
    if (v216)
    {
      v217 = *(_QWORD *)v214;
      v218 = *((_QWORD *)v214 + 1);
      v219 = v214[16];
      sub_2141DD130(*(_QWORD *)v214, v218, v219);
      v220 = *(_QWORD *)v213;
      v221 = *(_QWORD *)(v213 + 8);
      v222 = *(_BYTE *)(v213 + 16);
      *(_QWORD *)v213 = v217;
      *(_QWORD *)(v213 + 8) = v218;
      *(_BYTE *)(v213 + 16) = v219;
      sub_2141ED0BC(v220, v221, v222);
      *(_QWORD *)(v213 + 24) = *((_QWORD *)v214 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v223 = *((_QWORD *)v214 + 4);
      v224 = *((_QWORD *)v214 + 5);
      v225 = v214[48];
      sub_2141DD140(v223, v224, v225);
      v226 = *(_QWORD *)(v213 + 32);
      v227 = *(_QWORD *)(v213 + 40);
      *(_QWORD *)(v213 + 32) = v223;
      *(_QWORD *)(v213 + 40) = v224;
      v228 = *(_BYTE *)(v213 + 48);
      *(_BYTE *)(v213 + 48) = v225;
      sub_2141EF1B0(v226, v227, v228);
LABEL_103:
      *(_OWORD *)(v213 + 56) = *(_OWORD *)(v214 + 56);
      goto LABEL_106;
    }
    sub_21420D764(v213);
    *(_OWORD *)v213 = *(_OWORD *)v214;
    v236 = *((_OWORD *)v214 + 2);
    v235 = *((_OWORD *)v214 + 3);
    v237 = *((_OWORD *)v214 + 1);
    *(_QWORD *)(v213 + 64) = *((_QWORD *)v214 + 8);
    *(_OWORD *)(v213 + 32) = v236;
    *(_OWORD *)(v213 + 48) = v235;
    *(_OWORD *)(v213 + 16) = v237;
  }
  else
  {
    if (v216)
    {
      v229 = *(_QWORD *)v214;
      v230 = *((_QWORD *)v214 + 1);
      v231 = v214[16];
      sub_2141DD130(*(_QWORD *)v214, v230, v231);
      *(_QWORD *)v213 = v229;
      *(_QWORD *)(v213 + 8) = v230;
      *(_BYTE *)(v213 + 16) = v231;
      *(_QWORD *)(v213 + 24) = *((_QWORD *)v214 + 3);
      v232 = *((_QWORD *)v214 + 4);
      v233 = *((_QWORD *)v214 + 5);
      v234 = v214[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v232, v233, v234);
      *(_QWORD *)(v213 + 32) = v232;
      *(_QWORD *)(v213 + 40) = v233;
      *(_BYTE *)(v213 + 48) = v234;
      goto LABEL_103;
    }
    *(_OWORD *)v213 = *(_OWORD *)v214;
    v238 = *((_OWORD *)v214 + 1);
    v239 = *((_OWORD *)v214 + 2);
    v240 = *((_OWORD *)v214 + 3);
    *(_QWORD *)(v213 + 64) = *((_QWORD *)v214 + 8);
    *(_OWORD *)(v213 + 32) = v239;
    *(_OWORD *)(v213 + 48) = v240;
    *(_OWORD *)(v213 + 16) = v238;
  }
LABEL_106:
  v241 = v9[20];
  v242 = v7 + v241;
  v243 = &v8[v241];
  v244 = *(_QWORD *)(v7 + v241 + 24);
  v245 = *(_QWORD *)&v8[v241 + 24];
  if (v244)
  {
    if (v245)
    {
      v246 = *(_QWORD *)v243;
      v247 = *((_QWORD *)v243 + 1);
      v248 = v243[16];
      sub_2141DD130(*(_QWORD *)v243, v247, v248);
      v249 = *(_QWORD *)v242;
      v250 = *(_QWORD *)(v242 + 8);
      v251 = *(_BYTE *)(v242 + 16);
      *(_QWORD *)v242 = v246;
      *(_QWORD *)(v242 + 8) = v247;
      *(_BYTE *)(v242 + 16) = v248;
      sub_2141ED0BC(v249, v250, v251);
      *(_QWORD *)(v242 + 24) = *((_QWORD *)v243 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v252 = *((_QWORD *)v243 + 4);
      v253 = *((_QWORD *)v243 + 5);
      v254 = v243[48];
      sub_2141DD140(v252, v253, v254);
      v255 = *(_QWORD *)(v242 + 32);
      v256 = *(_QWORD *)(v242 + 40);
      *(_QWORD *)(v242 + 32) = v252;
      *(_QWORD *)(v242 + 40) = v253;
      v257 = *(_BYTE *)(v242 + 48);
      *(_BYTE *)(v242 + 48) = v254;
      sub_2141EF1B0(v255, v256, v257);
LABEL_111:
      *(_OWORD *)(v242 + 56) = *(_OWORD *)(v243 + 56);
      goto LABEL_114;
    }
    sub_21420D764(v242);
    *(_OWORD *)v242 = *(_OWORD *)v243;
    v265 = *((_OWORD *)v243 + 2);
    v264 = *((_OWORD *)v243 + 3);
    v266 = *((_OWORD *)v243 + 1);
    *(_QWORD *)(v242 + 64) = *((_QWORD *)v243 + 8);
    *(_OWORD *)(v242 + 32) = v265;
    *(_OWORD *)(v242 + 48) = v264;
    *(_OWORD *)(v242 + 16) = v266;
  }
  else
  {
    if (v245)
    {
      v258 = *(_QWORD *)v243;
      v259 = *((_QWORD *)v243 + 1);
      v260 = v243[16];
      sub_2141DD130(*(_QWORD *)v243, v259, v260);
      *(_QWORD *)v242 = v258;
      *(_QWORD *)(v242 + 8) = v259;
      *(_BYTE *)(v242 + 16) = v260;
      *(_QWORD *)(v242 + 24) = *((_QWORD *)v243 + 3);
      v261 = *((_QWORD *)v243 + 4);
      v262 = *((_QWORD *)v243 + 5);
      v263 = v243[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v261, v262, v263);
      *(_QWORD *)(v242 + 32) = v261;
      *(_QWORD *)(v242 + 40) = v262;
      *(_BYTE *)(v242 + 48) = v263;
      goto LABEL_111;
    }
    *(_OWORD *)v242 = *(_OWORD *)v243;
    v267 = *((_OWORD *)v243 + 1);
    v268 = *((_OWORD *)v243 + 2);
    v269 = *((_OWORD *)v243 + 3);
    *(_QWORD *)(v242 + 64) = *((_QWORD *)v243 + 8);
    *(_OWORD *)(v242 + 32) = v268;
    *(_OWORD *)(v242 + 48) = v269;
    *(_OWORD *)(v242 + 16) = v267;
  }
LABEL_114:
  v270 = v9[21];
  v271 = v7 + v270;
  v272 = &v8[v270];
  v273 = *(_QWORD *)(v7 + v270 + 24);
  v274 = *(_QWORD *)&v8[v270 + 24];
  if (v273)
  {
    if (!v274)
    {
      sub_21420D764(v271);
      *(_OWORD *)v271 = *(_OWORD *)v272;
      v294 = *((_OWORD *)v272 + 2);
      v293 = *((_OWORD *)v272 + 3);
      v295 = *((_OWORD *)v272 + 1);
      *(_QWORD *)(v271 + 64) = *((_QWORD *)v272 + 8);
      *(_OWORD *)(v271 + 32) = v294;
      *(_OWORD *)(v271 + 48) = v293;
      *(_OWORD *)(v271 + 16) = v295;
      goto LABEL_122;
    }
    v275 = *(_QWORD *)v272;
    v276 = *((_QWORD *)v272 + 1);
    v277 = v272[16];
    sub_2141DD130(*(_QWORD *)v272, v276, v277);
    v278 = *(_QWORD *)v271;
    v279 = *(_QWORD *)(v271 + 8);
    v280 = *(_BYTE *)(v271 + 16);
    *(_QWORD *)v271 = v275;
    *(_QWORD *)(v271 + 8) = v276;
    *(_BYTE *)(v271 + 16) = v277;
    sub_2141ED0BC(v278, v279, v280);
    *(_QWORD *)(v271 + 24) = *((_QWORD *)v272 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v281 = *((_QWORD *)v272 + 4);
    v282 = *((_QWORD *)v272 + 5);
    v283 = v272[48];
    sub_2141DD140(v281, v282, v283);
    v284 = *(_QWORD *)(v271 + 32);
    v285 = *(_QWORD *)(v271 + 40);
    *(_QWORD *)(v271 + 32) = v281;
    *(_QWORD *)(v271 + 40) = v282;
    v286 = *(_BYTE *)(v271 + 48);
    *(_BYTE *)(v271 + 48) = v283;
    sub_2141EF1B0(v284, v285, v286);
  }
  else
  {
    if (!v274)
    {
      *(_OWORD *)v271 = *(_OWORD *)v272;
      v296 = *((_OWORD *)v272 + 1);
      v297 = *((_OWORD *)v272 + 2);
      v298 = *((_OWORD *)v272 + 3);
      *(_QWORD *)(v271 + 64) = *((_QWORD *)v272 + 8);
      *(_OWORD *)(v271 + 32) = v297;
      *(_OWORD *)(v271 + 48) = v298;
      *(_OWORD *)(v271 + 16) = v296;
      goto LABEL_122;
    }
    v287 = *(_QWORD *)v272;
    v288 = *((_QWORD *)v272 + 1);
    v289 = v272[16];
    sub_2141DD130(*(_QWORD *)v272, v288, v289);
    *(_QWORD *)v271 = v287;
    *(_QWORD *)(v271 + 8) = v288;
    *(_BYTE *)(v271 + 16) = v289;
    *(_QWORD *)(v271 + 24) = *((_QWORD *)v272 + 3);
    v290 = *((_QWORD *)v272 + 4);
    v291 = *((_QWORD *)v272 + 5);
    v292 = v272[48];
    swift_bridgeObjectRetain();
    sub_2141DD140(v290, v291, v292);
    *(_QWORD *)(v271 + 32) = v290;
    *(_QWORD *)(v271 + 40) = v291;
    *(_BYTE *)(v271 + 48) = v292;
  }
  *(_OWORD *)(v271 + 56) = *(_OWORD *)(v272 + 56);
LABEL_122:
  v299 = v9[22];
  v300 = (_QWORD *)(v7 + v299);
  v301 = &v8[v299];
  *v300 = *(_QWORD *)v301;
  v300[1] = *((_QWORD *)v301 + 1);
  v300[2] = *((_QWORD *)v301 + 2);
  v302 = v9[23];
  v303 = (_QWORD *)(v7 + v302);
  v304 = &v8[v302];
  *v303 = *(_QWORD *)v304;
  v303[1] = *((_QWORD *)v304 + 1);
  v303[2] = *((_QWORD *)v304 + 2);
  v305 = v9[24];
  v306 = v7 + v305;
  v307 = &v8[v305];
  v308 = *(_QWORD *)(v7 + v305 + 24);
  v309 = *(_QWORD *)&v8[v305 + 24];
  if (v308)
  {
    if (v309)
    {
      v310 = *(_QWORD *)v307;
      v311 = *((_QWORD *)v307 + 1);
      v312 = v307[16];
      sub_2141DD130(*(_QWORD *)v307, v311, v312);
      v313 = *(_QWORD *)v306;
      v314 = *(_QWORD *)(v306 + 8);
      v315 = *(_BYTE *)(v306 + 16);
      *(_QWORD *)v306 = v310;
      *(_QWORD *)(v306 + 8) = v311;
      *(_BYTE *)(v306 + 16) = v312;
      sub_2141ED0BC(v313, v314, v315);
      *(_QWORD *)(v306 + 24) = *((_QWORD *)v307 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v306);
      v319 = *((_OWORD *)v307 + 1);
      *(_OWORD *)v306 = *(_OWORD *)v307;
      *(_OWORD *)(v306 + 16) = v319;
    }
  }
  else if (v309)
  {
    v316 = *(_QWORD *)v307;
    v317 = *((_QWORD *)v307 + 1);
    v318 = v307[16];
    sub_2141DD130(*(_QWORD *)v307, v317, v318);
    *(_QWORD *)v306 = v316;
    *(_QWORD *)(v306 + 8) = v317;
    *(_BYTE *)(v306 + 16) = v318;
    *(_QWORD *)(v306 + 24) = *((_QWORD *)v307 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v320 = *((_OWORD *)v307 + 1);
    *(_OWORD *)v306 = *(_OWORD *)v307;
    *(_OWORD *)(v306 + 16) = v320;
  }
  v321 = v9[25];
  v322 = v7 + v321;
  v323 = &v8[v321];
  v324 = *(_QWORD *)(v7 + v321 + 24);
  v325 = *(_QWORD *)&v8[v321 + 24];
  if (v324)
  {
    if (v325)
    {
      v326 = *(_QWORD *)v323;
      v327 = *((_QWORD *)v323 + 1);
      v328 = v323[16];
      sub_2141DD130(*(_QWORD *)v323, v327, v328);
      v329 = *(_QWORD *)v322;
      v330 = *(_QWORD *)(v322 + 8);
      v331 = *(_BYTE *)(v322 + 16);
      *(_QWORD *)v322 = v326;
      *(_QWORD *)(v322 + 8) = v327;
      *(_BYTE *)(v322 + 16) = v328;
      sub_2141ED0BC(v329, v330, v331);
      *(_QWORD *)(v322 + 24) = *((_QWORD *)v323 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v322);
      v335 = *((_OWORD *)v323 + 1);
      *(_OWORD *)v322 = *(_OWORD *)v323;
      *(_OWORD *)(v322 + 16) = v335;
    }
  }
  else if (v325)
  {
    v332 = *(_QWORD *)v323;
    v333 = *((_QWORD *)v323 + 1);
    v334 = v323[16];
    sub_2141DD130(*(_QWORD *)v323, v333, v334);
    *(_QWORD *)v322 = v332;
    *(_QWORD *)(v322 + 8) = v333;
    *(_BYTE *)(v322 + 16) = v334;
    *(_QWORD *)(v322 + 24) = *((_QWORD *)v323 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v336 = *((_OWORD *)v323 + 1);
    *(_OWORD *)v322 = *(_OWORD *)v323;
    *(_OWORD *)(v322 + 16) = v336;
  }
  a3 = v350;
  v337 = v9[26];
  v338 = (_QWORD *)(v7 + v337);
  v339 = &v8[v337];
  *v338 = *(_QWORD *)v339;
  v338[1] = *((_QWORD *)v339 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v340 = v9[27];
  v341 = v7 + v340;
  v342 = &v8[v340];
  v343 = *((_QWORD *)v342 + 3);
  if (*(_QWORD *)(v341 + 24))
  {
    if (v343)
    {
      sub_21420D7CC((uint64_t *)v341, (uint64_t *)v342);
    }
    else
    {
      sub_21420D92C(v341);
      v344 = *((_OWORD *)v342 + 1);
      *(_OWORD *)v341 = *(_OWORD *)v342;
      *(_OWORD *)(v341 + 16) = v344;
    }
  }
  else if (v343)
  {
    *(_QWORD *)(v341 + 24) = v343;
    (**(void (***)(uint64_t, char *))(v343 - 8))(v341, v342);
  }
  else
  {
    v345 = *((_OWORD *)v342 + 1);
    *(_OWORD *)v341 = *(_OWORD *)v342;
    *(_OWORD *)(v341 + 16) = v345;
  }
LABEL_47:
  v128 = a3[9];
  v129 = a1 + v128;
  v130 = (char *)v4 + v128;
  v131 = *(unsigned __int8 *)(a1 + v128 + 40);
  v132 = *((unsigned __int8 *)v4 + v128 + 40);
  if (v131 == 255)
  {
    if (v132 == 255)
    {
      v135 = *(_OWORD *)v130;
      v136 = *((_OWORD *)v130 + 1);
      *(_OWORD *)(v129 + 25) = *(_OWORD *)(v130 + 25);
      *(_OWORD *)v129 = v135;
      *(_OWORD *)(v129 + 16) = v136;
      goto LABEL_57;
    }
    if ((v132 & 1) != 0)
    {
LABEL_54:
      *(_QWORD *)v129 = *(_QWORD *)v130;
      *(_OWORD *)(v129 + 8) = *(_OWORD *)(v130 + 8);
      *(_BYTE *)(v129 + 40) = 1;
      swift_retain();
      goto LABEL_57;
    }
LABEL_56:
    v137 = *((_QWORD *)v130 + 3);
    *(_QWORD *)(v129 + 24) = v137;
    *(_QWORD *)(v129 + 32) = *((_QWORD *)v130 + 4);
    (**(void (***)(uint64_t, char *))(v137 - 8))(v129, v130);
    *(_BYTE *)(v129 + 40) = 0;
    goto LABEL_57;
  }
  if (v132 != 255)
  {
    if ((uint64_t *)a1 == v4)
      goto LABEL_57;
    sub_21420D730(v129);
    if ((v130[40] & 1) != 0)
      goto LABEL_54;
    goto LABEL_56;
  }
  sub_21420D730(v129);
  v133 = *(_OWORD *)(v130 + 25);
  v134 = *((_OWORD *)v130 + 1);
  *(_OWORD *)v129 = *(_OWORD *)v130;
  *(_OWORD *)(v129 + 16) = v134;
  *(_OWORD *)(v129 + 25) = v133;
LABEL_57:
  v138 = a3[10];
  v139 = a1 + v138;
  v140 = (char *)v4 + v138;
  v141 = *(_OWORD *)v140;
  *(_BYTE *)(v139 + 16) = v140[16];
  *(_OWORD *)v139 = v141;
  return a1;
}

uint64_t sub_2142F6074(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[8];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v82 = v11;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v9 + 25);
    *((_BYTE *)v8 + 41) = *((_BYTE *)v9 + 41);
    v14 = v9[4];
    v8[3] = v9[3];
    v8[4] = v14;
    *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
    v15 = *(_OWORD *)((char *)v9 + 88);
    v16 = *(_OWORD *)((char *)v9 + 104);
    *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)((char *)v9 + 113);
    *(_OWORD *)((char *)v8 + 104) = v16;
    *(_OWORD *)((char *)v8 + 88) = v15;
    *(_OWORD *)((char *)v8 + 136) = *(_OWORD *)((char *)v9 + 136);
    *((_BYTE *)v8 + 152) = *((_BYTE *)v9 + 152);
    *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
    *((_BYTE *)v8 + 168) = *((_BYTE *)v9 + 168);
    v17 = v9[12];
    v8[11] = v9[11];
    v8[12] = v17;
    *((_BYTE *)v8 + 208) = *((_BYTE *)v9 + 208);
    v18 = v10[11];
    v19 = (char *)v8 + v18;
    v20 = (char *)v9 + v18;
    v21 = sub_214424308();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = v10[12];
    v25 = (char *)v8 + v24;
    v26 = (char *)v9 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    v27 = v10[14];
    v28 = (char *)v8 + v27;
    v29 = (char *)v9 + v27;
    v30 = sub_214424C68();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v33 = v10[15];
    v34 = (char *)v8 + v33;
    v35 = (char *)v9 + v33;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_WORD *)v34 + 4) = *((_WORD *)v35 + 4);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    *(_QWORD *)((char *)v8 + v10[17]) = *(_QWORD *)((char *)v9 + v10[17]);
    v36 = v10[18];
    v37 = (char *)v8 + v36;
    v38 = (char *)v9 + v36;
    v39 = *((_OWORD *)v38 + 3);
    *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
    *((_OWORD *)v37 + 3) = v39;
    *((_QWORD *)v37 + 8) = *((_QWORD *)v38 + 8);
    v40 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v40;
    v41 = v10[19];
    v42 = (char *)v8 + v41;
    v43 = (char *)v9 + v41;
    *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
    v44 = *((_OWORD *)v43 + 3);
    *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
    *((_OWORD *)v42 + 3) = v44;
    v45 = *((_OWORD *)v43 + 1);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v45;
    v46 = v10[20];
    v47 = (char *)v8 + v46;
    v48 = (char *)v9 + v46;
    v49 = *((_OWORD *)v48 + 3);
    *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
    *((_OWORD *)v47 + 3) = v49;
    *((_QWORD *)v47 + 8) = *((_QWORD *)v48 + 8);
    v50 = *((_OWORD *)v48 + 1);
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *((_OWORD *)v47 + 1) = v50;
    v51 = v10[21];
    v52 = (char *)v8 + v51;
    v53 = (char *)v9 + v51;
    *((_QWORD *)v52 + 8) = *((_QWORD *)v53 + 8);
    v54 = *((_OWORD *)v53 + 3);
    *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
    *((_OWORD *)v52 + 3) = v54;
    v55 = *((_OWORD *)v53 + 1);
    *(_OWORD *)v52 = *(_OWORD *)v53;
    *((_OWORD *)v52 + 1) = v55;
    v56 = v10[22];
    v57 = (char *)v8 + v56;
    v58 = (char *)v9 + v56;
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *((_QWORD *)v57 + 2) = *((_QWORD *)v58 + 2);
    v59 = v10[23];
    v60 = (char *)v8 + v59;
    v61 = (char *)v9 + v59;
    *(_OWORD *)v60 = *(_OWORD *)v61;
    *((_QWORD *)v60 + 2) = *((_QWORD *)v61 + 2);
    v62 = v10[24];
    v63 = (_OWORD *)((char *)v8 + v62);
    v64 = (_OWORD *)((char *)v9 + v62);
    v65 = v64[1];
    *v63 = *v64;
    v63[1] = v65;
    v66 = v10[25];
    v67 = (_OWORD *)((char *)v8 + v66);
    v68 = (_OWORD *)((char *)v9 + v66);
    v69 = v68[1];
    *v67 = *v68;
    v67[1] = v69;
    *(_OWORD *)((char *)v8 + v10[26]) = *(_OWORD *)((char *)v9 + v10[26]);
    v70 = v10[27];
    v71 = (_OWORD *)((char *)v8 + v70);
    v72 = (_OWORD *)((char *)v9 + v70);
    v73 = v72[1];
    *v71 = *v72;
    v71[1] = v73;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v82 + 56))(v8, 0, 1, v10);
  }
  v74 = a3[9];
  v75 = a3[10];
  v76 = (_OWORD *)(a1 + v74);
  v77 = (_OWORD *)(a2 + v74);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  *(_OWORD *)((char *)v76 + 25) = *(_OWORD *)((char *)v77 + 25);
  v79 = a1 + v75;
  v80 = a2 + v75;
  *(_BYTE *)(v79 + 16) = *(_BYTE *)(v80 + 16);
  *(_OWORD *)v79 = *(_OWORD *)v80;
  return a1;
}

uint64_t sub_2142F6474(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  __int128 v82;
  uint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(void *, uint64_t, uint64_t);
  int v100;
  size_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  _OWORD *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v197;
  void *v198;
  int *v199;
  int *v200;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v199 = a3;
      v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v15;
      *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
      *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
      v16 = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 64) = v16;
      *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
      v17 = *(_OWORD *)(v9 + 88);
      v18 = *(_OWORD *)(v9 + 104);
      *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
      *(_OWORD *)(v8 + 104) = v18;
      *(_OWORD *)(v8 + 88) = v17;
      *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
      *(_BYTE *)(v8 + 152) = *(_BYTE *)(v9 + 152);
      *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 + 160);
      *(_BYTE *)(v8 + 168) = *(_BYTE *)(v9 + 168);
      v19 = *(_OWORD *)(v9 + 192);
      *(_OWORD *)(v8 + 176) = *(_OWORD *)(v9 + 176);
      *(_OWORD *)(v8 + 192) = v19;
      *(_BYTE *)(v8 + 208) = *(_BYTE *)(v9 + 208);
      v20 = v10[11];
      v21 = (void *)(v8 + v20);
      v22 = (const void *)(v9 + v20);
      v23 = sub_214424308();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v41 = v10[12];
      v42 = v8 + v41;
      v43 = v9 + v41;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
      *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
      v44 = v10[14];
      v45 = (void *)(v8 + v44);
      v46 = (const void *)(v9 + v44);
      v47 = sub_214424C68();
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v48 + 32))(v45, v46, v47);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      v50 = v10[15];
      v51 = v8 + v50;
      v52 = v9 + v50;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *(_WORD *)(v51 + 8) = *(_WORD *)(v52 + 8);
      *(_QWORD *)(v8 + v10[16]) = *(_QWORD *)(v9 + v10[16]);
      *(_QWORD *)(v8 + v10[17]) = *(_QWORD *)(v9 + v10[17]);
      v53 = v10[18];
      v54 = v8 + v53;
      v55 = v9 + v53;
      v56 = *(_OWORD *)(v55 + 48);
      *(_OWORD *)(v54 + 32) = *(_OWORD *)(v55 + 32);
      *(_OWORD *)(v54 + 48) = v56;
      *(_QWORD *)(v54 + 64) = *(_QWORD *)(v55 + 64);
      v57 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *(_OWORD *)(v54 + 16) = v57;
      v58 = v10[19];
      v59 = v8 + v58;
      v60 = v9 + v58;
      *(_QWORD *)(v59 + 64) = *(_QWORD *)(v60 + 64);
      v61 = *(_OWORD *)(v60 + 48);
      *(_OWORD *)(v59 + 32) = *(_OWORD *)(v60 + 32);
      *(_OWORD *)(v59 + 48) = v61;
      v62 = *(_OWORD *)(v60 + 16);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 16) = v62;
      v63 = v10[20];
      v64 = v8 + v63;
      v65 = v9 + v63;
      v66 = *(_OWORD *)(v65 + 48);
      *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
      *(_OWORD *)(v64 + 48) = v66;
      *(_QWORD *)(v64 + 64) = *(_QWORD *)(v65 + 64);
      v67 = *(_OWORD *)(v65 + 16);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *(_OWORD *)(v64 + 16) = v67;
      v68 = v10[21];
      v69 = v8 + v68;
      v70 = v9 + v68;
      *(_QWORD *)(v69 + 64) = *(_QWORD *)(v70 + 64);
      v71 = *(_OWORD *)(v70 + 48);
      *(_OWORD *)(v69 + 32) = *(_OWORD *)(v70 + 32);
      *(_OWORD *)(v69 + 48) = v71;
      v72 = *(_OWORD *)(v70 + 16);
      *(_OWORD *)v69 = *(_OWORD *)v70;
      *(_OWORD *)(v69 + 16) = v72;
      v73 = v10[22];
      v74 = v8 + v73;
      v75 = v9 + v73;
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
      v76 = v10[23];
      v77 = v8 + v76;
      v78 = v9 + v76;
      *(_OWORD *)v77 = *(_OWORD *)v78;
      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v78 + 16);
      v79 = v10[24];
      v80 = (_OWORD *)(v8 + v79);
      v81 = (_OWORD *)(v9 + v79);
      v82 = v81[1];
      *v80 = *v81;
      v80[1] = v82;
      v83 = v10[25];
      v84 = (_OWORD *)(v8 + v83);
      v85 = (_OWORD *)(v9 + v83);
      v86 = v85[1];
      *v84 = *v85;
      v84[1] = v86;
      *(_OWORD *)(v8 + v10[26]) = *(_OWORD *)(v9 + v10[26]);
      v87 = v10[27];
      v88 = (_OWORD *)(v8 + v87);
      v89 = (_OWORD *)(v9 + v87);
      v90 = v89[1];
      *v88 = *v89;
      v88[1] = v90;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      a3 = v199;
      goto LABEL_76;
    }
LABEL_7:
    v26 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_76;
  }
  if (v14)
  {
    sub_2141DD370(v8, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v8 + 40) == 255)
    goto LABEL_14;
  if (*(unsigned __int8 *)(v9 + 40) == 255 || a1 != a2)
  {
    sub_21420D6FC(v8);
LABEL_14:
    v28 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v28;
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
  }
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  v29 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = v29;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  if (*(unsigned __int8 *)(v8 + 128) == 255)
  {
LABEL_19:
    v30 = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v8 + 104) = v30;
    *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v9 + 128) == 255 || a1 != a2)
  {
    sub_21420D730(v8 + 88);
    goto LABEL_19;
  }
LABEL_20:
  v200 = a3;
  *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
  *(_BYTE *)(v8 + 152) = *(_BYTE *)(v9 + 152);
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 + 160);
  *(_BYTE *)(v8 + 168) = *(_BYTE *)(v9 + 168);
  v31 = *(_OWORD *)(v9 + 192);
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(v9 + 176);
  *(_OWORD *)(v8 + 192) = v31;
  *(_BYTE *)(v8 + 208) = *(_BYTE *)(v9 + 208);
  v32 = v10[11];
  v33 = (void *)(v8 + v32);
  v34 = (void *)(v9 + v32);
  v35 = sub_214424308();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  v197 = v33;
  LODWORD(v33) = v37(v33, 1, v35);
  v38 = v37(v34, 1, v35);
  if ((_DWORD)v33)
  {
    if (v38)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v40 = v197;
LABEL_30:
      memcpy(v40, v34, v39);
      goto LABEL_33;
    }
    (*(void (**)(void *, void *, uint64_t))(v36 + 32))(v197, v34, v35);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v197, 0, 1, v35);
  }
  else
  {
    if (v38)
    {
      (*(void (**)(void *, uint64_t))(v36 + 8))(v197, v35);
      v39 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v40 = v197;
      goto LABEL_30;
    }
    (*(void (**)(void *, void *, uint64_t))(v36 + 40))(v197, v34, v35);
  }
LABEL_33:
  v91 = v10[12];
  v92 = v8 + v91;
  v93 = v9 + v91;
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
  v94 = v10[14];
  v95 = (void *)(v8 + v94);
  v96 = (void *)(v9 + v94);
  v97 = sub_214424C68();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
  v198 = v95;
  LODWORD(v95) = v99(v95, 1, v97);
  v100 = v99(v96, 1, v97);
  if ((_DWORD)v95)
  {
    if (v100)
    {
      v101 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v102 = v198;
LABEL_38:
      memcpy(v102, v96, v101);
      goto LABEL_41;
    }
    (*(void (**)(void *, void *, uint64_t))(v98 + 32))(v198, v96, v97);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v198, 0, 1, v97);
  }
  else
  {
    if (v100)
    {
      (*(void (**)(void *, uint64_t))(v98 + 8))(v198, v97);
      v101 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v102 = v198;
      goto LABEL_38;
    }
    (*(void (**)(void *, void *, uint64_t))(v98 + 40))(v198, v96, v97);
  }
LABEL_41:
  v103 = v10[15];
  v104 = v8 + v103;
  v105 = v9 + v103;
  *(_QWORD *)(v8 + v103) = *(_QWORD *)(v9 + v103);
  swift_release();
  *(_BYTE *)(v104 + 8) = *(_BYTE *)(v105 + 8);
  *(_BYTE *)(v104 + 9) = *(_BYTE *)(v105 + 9);
  *(_QWORD *)(v8 + v10[16]) = *(_QWORD *)(v9 + v10[16]);
  *(_QWORD *)(v8 + v10[17]) = *(_QWORD *)(v9 + v10[17]);
  v106 = v10[18];
  v107 = v8 + v106;
  v108 = v9 + v106;
  if (*(_QWORD *)(v8 + v106 + 24))
  {
    if (*(_QWORD *)(v108 + 24))
    {
      v109 = *(_BYTE *)(v108 + 16);
      v110 = *(_QWORD *)v107;
      v111 = *(_QWORD *)(v107 + 8);
      v112 = *(_BYTE *)(v107 + 16);
      *(_OWORD *)v107 = *(_OWORD *)v108;
      *(_BYTE *)(v107 + 16) = v109;
      sub_2141ED0BC(v110, v111, v112);
      *(_QWORD *)(v107 + 24) = *(_QWORD *)(v108 + 24);
      swift_bridgeObjectRelease();
      v113 = *(_BYTE *)(v108 + 48);
      v114 = *(_QWORD *)(v107 + 32);
      v115 = *(_QWORD *)(v107 + 40);
      *(_OWORD *)(v107 + 32) = *(_OWORD *)(v108 + 32);
      v116 = *(_BYTE *)(v107 + 48);
      *(_BYTE *)(v107 + 48) = v113;
      sub_2141EF1B0(v114, v115, v116);
      *(_OWORD *)(v107 + 56) = *(_OWORD *)(v108 + 56);
      goto LABEL_46;
    }
    sub_21420D764(v107);
  }
  v117 = *(_OWORD *)(v108 + 48);
  *(_OWORD *)(v107 + 32) = *(_OWORD *)(v108 + 32);
  *(_OWORD *)(v107 + 48) = v117;
  *(_QWORD *)(v107 + 64) = *(_QWORD *)(v108 + 64);
  v118 = *(_OWORD *)(v108 + 16);
  *(_OWORD *)v107 = *(_OWORD *)v108;
  *(_OWORD *)(v107 + 16) = v118;
LABEL_46:
  v119 = v10[19];
  v120 = v8 + v119;
  v121 = v9 + v119;
  if (*(_QWORD *)(v8 + v119 + 24))
  {
    if (*(_QWORD *)(v121 + 24))
    {
      v122 = *(_BYTE *)(v121 + 16);
      v123 = *(_QWORD *)v120;
      v124 = *(_QWORD *)(v120 + 8);
      v125 = *(_BYTE *)(v120 + 16);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *(_BYTE *)(v120 + 16) = v122;
      sub_2141ED0BC(v123, v124, v125);
      *(_QWORD *)(v120 + 24) = *(_QWORD *)(v121 + 24);
      swift_bridgeObjectRelease();
      v126 = *(_BYTE *)(v121 + 48);
      v127 = *(_QWORD *)(v120 + 32);
      v128 = *(_QWORD *)(v120 + 40);
      *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
      v129 = *(_BYTE *)(v120 + 48);
      *(_BYTE *)(v120 + 48) = v126;
      sub_2141EF1B0(v127, v128, v129);
      *(_OWORD *)(v120 + 56) = *(_OWORD *)(v121 + 56);
      goto LABEL_51;
    }
    sub_21420D764(v120);
  }
  v130 = *(_OWORD *)(v121 + 48);
  *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
  *(_OWORD *)(v120 + 48) = v130;
  *(_QWORD *)(v120 + 64) = *(_QWORD *)(v121 + 64);
  v131 = *(_OWORD *)(v121 + 16);
  *(_OWORD *)v120 = *(_OWORD *)v121;
  *(_OWORD *)(v120 + 16) = v131;
LABEL_51:
  v132 = v10[20];
  v133 = v8 + v132;
  v134 = v9 + v132;
  if (*(_QWORD *)(v8 + v132 + 24))
  {
    if (*(_QWORD *)(v134 + 24))
    {
      v135 = *(_BYTE *)(v134 + 16);
      v136 = *(_QWORD *)v133;
      v137 = *(_QWORD *)(v133 + 8);
      v138 = *(_BYTE *)(v133 + 16);
      *(_OWORD *)v133 = *(_OWORD *)v134;
      *(_BYTE *)(v133 + 16) = v135;
      sub_2141ED0BC(v136, v137, v138);
      *(_QWORD *)(v133 + 24) = *(_QWORD *)(v134 + 24);
      swift_bridgeObjectRelease();
      v139 = *(_BYTE *)(v134 + 48);
      v140 = *(_QWORD *)(v133 + 32);
      v141 = *(_QWORD *)(v133 + 40);
      *(_OWORD *)(v133 + 32) = *(_OWORD *)(v134 + 32);
      v142 = *(_BYTE *)(v133 + 48);
      *(_BYTE *)(v133 + 48) = v139;
      sub_2141EF1B0(v140, v141, v142);
      *(_OWORD *)(v133 + 56) = *(_OWORD *)(v134 + 56);
      goto LABEL_56;
    }
    sub_21420D764(v133);
  }
  v143 = *(_OWORD *)(v134 + 48);
  *(_OWORD *)(v133 + 32) = *(_OWORD *)(v134 + 32);
  *(_OWORD *)(v133 + 48) = v143;
  *(_QWORD *)(v133 + 64) = *(_QWORD *)(v134 + 64);
  v144 = *(_OWORD *)(v134 + 16);
  *(_OWORD *)v133 = *(_OWORD *)v134;
  *(_OWORD *)(v133 + 16) = v144;
LABEL_56:
  v145 = v10[21];
  v146 = v8 + v145;
  v147 = v9 + v145;
  if (*(_QWORD *)(v8 + v145 + 24))
  {
    if (*(_QWORD *)(v147 + 24))
    {
      v148 = *(_BYTE *)(v147 + 16);
      v149 = *(_QWORD *)v146;
      v150 = *(_QWORD *)(v146 + 8);
      v151 = *(_BYTE *)(v146 + 16);
      *(_OWORD *)v146 = *(_OWORD *)v147;
      *(_BYTE *)(v146 + 16) = v148;
      sub_2141ED0BC(v149, v150, v151);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      swift_bridgeObjectRelease();
      v152 = *(_BYTE *)(v147 + 48);
      v153 = *(_QWORD *)(v146 + 32);
      v154 = *(_QWORD *)(v146 + 40);
      *(_OWORD *)(v146 + 32) = *(_OWORD *)(v147 + 32);
      v155 = *(_BYTE *)(v146 + 48);
      *(_BYTE *)(v146 + 48) = v152;
      sub_2141EF1B0(v153, v154, v155);
      *(_OWORD *)(v146 + 56) = *(_OWORD *)(v147 + 56);
      goto LABEL_61;
    }
    sub_21420D764(v146);
  }
  v156 = *(_OWORD *)(v147 + 48);
  *(_OWORD *)(v146 + 32) = *(_OWORD *)(v147 + 32);
  *(_OWORD *)(v146 + 48) = v156;
  *(_QWORD *)(v146 + 64) = *(_QWORD *)(v147 + 64);
  v157 = *(_OWORD *)(v147 + 16);
  *(_OWORD *)v146 = *(_OWORD *)v147;
  *(_OWORD *)(v146 + 16) = v157;
LABEL_61:
  v158 = v10[22];
  v159 = v8 + v158;
  v160 = v9 + v158;
  *(_OWORD *)v159 = *(_OWORD *)v160;
  *(_QWORD *)(v159 + 16) = *(_QWORD *)(v160 + 16);
  v161 = v10[23];
  v162 = v8 + v161;
  v163 = v9 + v161;
  *(_OWORD *)v162 = *(_OWORD *)v163;
  *(_QWORD *)(v162 + 16) = *(_QWORD *)(v163 + 16);
  v164 = v10[24];
  v165 = v8 + v164;
  v166 = v9 + v164;
  a3 = v200;
  if (*(_QWORD *)(v8 + v164 + 24))
  {
    if (*(_QWORD *)(v166 + 24))
    {
      v167 = *(_BYTE *)(v166 + 16);
      v168 = *(_QWORD *)v165;
      v169 = *(_QWORD *)(v165 + 8);
      v170 = *(_BYTE *)(v165 + 16);
      *(_OWORD *)v165 = *(_OWORD *)v166;
      *(_BYTE *)(v165 + 16) = v167;
      sub_2141ED0BC(v168, v169, v170);
      *(_QWORD *)(v165 + 24) = *(_QWORD *)(v166 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    sub_21420D798(v165);
  }
  v171 = *(_OWORD *)(v166 + 16);
  *(_OWORD *)v165 = *(_OWORD *)v166;
  *(_OWORD *)(v165 + 16) = v171;
LABEL_66:
  v172 = v10[25];
  v173 = v8 + v172;
  v174 = v9 + v172;
  if (!*(_QWORD *)(v8 + v172 + 24))
  {
LABEL_70:
    v179 = *(_OWORD *)(v174 + 16);
    *(_OWORD *)v173 = *(_OWORD *)v174;
    *(_OWORD *)(v173 + 16) = v179;
    goto LABEL_71;
  }
  if (!*(_QWORD *)(v174 + 24))
  {
    sub_21420D798(v173);
    goto LABEL_70;
  }
  v175 = *(_BYTE *)(v174 + 16);
  v176 = *(_QWORD *)v173;
  v177 = *(_QWORD *)(v173 + 8);
  v178 = *(_BYTE *)(v173 + 16);
  *(_OWORD *)v173 = *(_OWORD *)v174;
  *(_BYTE *)(v173 + 16) = v175;
  sub_2141ED0BC(v176, v177, v178);
  *(_QWORD *)(v173 + 24) = *(_QWORD *)(v174 + 24);
  swift_bridgeObjectRelease();
LABEL_71:
  v180 = v10[26];
  v181 = (_QWORD *)(v8 + v180);
  v182 = (uint64_t *)(v9 + v180);
  v184 = *v182;
  v183 = v182[1];
  *v181 = v184;
  v181[1] = v183;
  swift_bridgeObjectRelease();
  v185 = v10[27];
  v186 = v8 + v185;
  v187 = v9 + v185;
  if (*(_QWORD *)(v186 + 24))
  {
    if (*(_QWORD *)(v187 + 24))
      _s6Charts15AnyChartContentVwxx_0(v186);
    else
      sub_21420D92C(v186);
  }
  v188 = *(_OWORD *)(v187 + 16);
  *(_OWORD *)v186 = *(_OWORD *)v187;
  *(_OWORD *)(v186 + 16) = v188;
LABEL_76:
  v189 = a3[9];
  v190 = (_OWORD *)(a1 + v189);
  v191 = a2 + v189;
  if (*(unsigned __int8 *)(a1 + v189 + 40) == 255)
  {
LABEL_80:
    v192 = *(_OWORD *)(v191 + 16);
    *v190 = *(_OWORD *)v191;
    v190[1] = v192;
    *(_OWORD *)((char *)v190 + 25) = *(_OWORD *)(v191 + 25);
    goto LABEL_81;
  }
  if (*(unsigned __int8 *)(v191 + 40) == 255 || a1 != a2)
  {
    sub_21420D730((uint64_t)v190);
    goto LABEL_80;
  }
LABEL_81:
  v193 = a3[10];
  v194 = a1 + v193;
  v195 = a2 + v193;
  *(_OWORD *)v194 = *(_OWORD *)v195;
  *(_BYTE *)(v194 + 16) = *(_BYTE *)(v195 + 16);
  return a1;
}

uint64_t sub_2142F6F90()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F6FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2141D8BF8(qword_254D69B70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_2142F7020()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F7030(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_2141D8BF8(qword_254D69B70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PointsRenderer(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F137F0);
}

void sub_2142F70BC()
{
  unint64_t v0;

  sub_21420E5A4(319, &qword_253F13928, (void (*)(uint64_t))type metadata accessor for ChartContentRenderContext.Environment);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for SgLine.Points.Element(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(result + 64);
  if (v1 != 255)
  {
    v2 = result + 24;
    if ((v1 & 1) != 0)
      return swift_release();
    else
      return _s6Charts15AnyChartContentVwxx_0(v2);
  }
  return result;
}

uint64_t initializeWithCopy for SgLine.Points.Element(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 64);
  if (v6 == 255)
  {
    v7 = v5[1];
    *v4 = *v5;
    v4[1] = v7;
    *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)((char *)v5 + 25);
  }
  else if ((v6 & 1) != 0)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 64) = 1;
    swift_retain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v4, v5);
    *(_BYTE *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for SgLine.Points.Element(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (__int128 *)(a1 + 24);
  v5 = (__int128 *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v6 == 255)
    {
      v9 = *v5;
      v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
      *v4 = v9;
      *(_OWORD *)(a1 + 40) = v10;
      goto LABEL_11;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 64) = 1;
      swift_retain();
      goto LABEL_11;
    }
LABEL_10:
    v11 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(__int128 *, __int128 *))(v11 - 8))(v4, v5);
    *(_BYTE *)(a1 + 64) = 0;
    goto LABEL_11;
  }
  if (v6 != 255)
  {
    if (a1 == a2)
      goto LABEL_11;
    sub_21420D730(a1 + 24);
    if ((*(_BYTE *)(a2 + 64) & 1) != 0)
      goto LABEL_8;
    goto LABEL_10;
  }
  sub_21420D730(a1 + 24);
  v7 = *(__int128 *)((char *)v5 + 25);
  v8 = v5[1];
  *v4 = *v5;
  v4[1] = v8;
  *(__int128 *)((char *)v4 + 25) = v7;
LABEL_11:
  v12 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v12;
  return a1;
}

uint64_t assignWithTake for SgLine.Points.Element(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = (_OWORD *)(a1 + 24);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 64) == 255 || a1 != a2)
  {
    sub_21420D730(a1 + 24);
LABEL_7:
    v6 = *(_OWORD *)(a2 + 40);
    *v4 = *(_OWORD *)(a2 + 24);
    v4[1] = v6;
    *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)(a2 + 49);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgLine.Points.Element(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SgLine.Points.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgLine.Points.Element()
{
  return &type metadata for SgLine.Points.Element;
}

uint64_t sub_2142F74B4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F74C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21430E58C(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142F74CC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F74D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_21430E620(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t type metadata accessor for SgLine(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15608);
}

uint64_t getEnumTagSinglePayload for AnyPrimitivePlottableRange(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPrimitivePlottableRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_2142F7588(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SgSymbolSize()
{
  return &type metadata for SgSymbolSize;
}

uint64_t destroy for SgSymbol(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return swift_release();
  else
    return _s6Charts15AnyChartContentVwxx_0(a1);
}

uint64_t initializeWithCopy for SgSymbol(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    swift_retain();
    v4 = 1;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    v4 = 0;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for SgSymbol(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_release();
    else
      _s6Charts15AnyChartContentVwxx_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 40) = 1;
      swift_retain();
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for SgSymbol(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_release();
    else
      _s6Charts15AnyChartContentVwxx_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

ValueMetadata *type metadata accessor for SgSymbol()
{
  return &type metadata for SgSymbol;
}

uint64_t sub_2142F77D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst;
  uint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = *(int *)(a3 + 32);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = *((_BYTE *)a2 + v8 + 40);
    swift_retain();
    if ((v11 & 1) != 0)
    {
      v12 = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v9 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v9, v10);
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      swift_retain();
    }
    *(_BYTE *)(v9 + 40) = v11;
    *(_BYTE *)(v9 + 41) = *(_BYTE *)(v10 + 41);
    *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
    *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
    v14 = *(_QWORD *)(v10 + 72);
    *(_QWORD *)(v9 + 64) = *(_QWORD *)(v10 + 64);
    *(_QWORD *)(v9 + 72) = v14;
    *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
    v15 = type metadata accessor for SgShapeStyle();
    v16 = *(int *)(v15 + 32);
    __dst = (void *)(v9 + v16);
    v27 = v15;
    v17 = (const void *)(v10 + v16);
    v18 = sub_214424C68();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      v21 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    v22 = *(int *)(v27 + 36);
    v23 = v9 + v22;
    v24 = v10 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_WORD *)(v23 + 8) = *(_WORD *)(v24 + 8);
    *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
  }
  swift_retain();
  return a1;
}

uint64_t sub_2142F79A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  v4 = a1 + *(int *)(a2 + 32);
  if ((*(_BYTE *)(v4 + 40) & 1) != 0)
    _s6Charts15AnyChartContentVwxx_0(v4);
  else
    swift_release();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for SgShapeStyle() + 32);
  v6 = sub_214424C68();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_release();
}

uint64_t sub_2142F7A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__dst;
  uint64_t v25;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(a2 + v7 + 40);
  swift_retain();
  v25 = a3;
  if ((v10 & 1) != 0)
  {
    v11 = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 24) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v8, v9);
  }
  else
  {
    *(_QWORD *)v8 = *(_QWORD *)v9;
    swift_retain();
  }
  *(_BYTE *)(v8 + 40) = v10;
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
  v12 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = v12;
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v9 + 80);
  v13 = type metadata accessor for SgShapeStyle();
  v14 = *(int *)(v13 + 32);
  __dst = (void *)(v8 + v14);
  v15 = (const void *)(v9 + v14);
  v16 = sub_214424C68();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  if (v18(v15, 1, v16))
  {
    v19 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  v20 = *(int *)(v13 + 36);
  v21 = v8 + v20;
  v22 = v9 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_WORD *)(v21 + 8) = *(_WORD *)(v22 + 8);
  *(_QWORD *)(a1 + *(int *)(v25 + 36)) = *(_QWORD *)(a2 + *(int *)(v25 + 36));
  swift_retain();
  return a1;
}

uint64_t sub_2142F7C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  v25 = a3;
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  if (a1 != a2)
  {
    sub_21420D6FC(a1 + v7);
    if ((*(_BYTE *)(v9 + 40) & 1) != 0)
    {
      v10 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 24) = v10;
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v8, v9);
      *(_BYTE *)(v8 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_BYTE *)(v8 + 40) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_DWORD *)(v8 + 56) = *(_DWORD *)(v9 + 56);
  *(_DWORD *)(v8 + 60) = *(_DWORD *)(v9 + 60);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
  v24 = type metadata accessor for SgShapeStyle();
  v11 = *(int *)(v24 + 32);
  v12 = (void *)(v8 + v11);
  v13 = (void *)(v9 + v11);
  v14 = sub_214424C68();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_11;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_10;
  }
  if (v18)
  {
LABEL_10:
    v19 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_11:
  v20 = *(int *)(v24 + 36);
  v21 = v8 + v20;
  v22 = v9 + v20;
  *(_QWORD *)(v8 + v20) = *(_QWORD *)v22;
  swift_retain();
  swift_release();
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_BYTE *)(v21 + 9) = *(_BYTE *)(v22 + 9);
  *(_QWORD *)(a1 + *(int *)(v25 + 36)) = *(_QWORD *)(a2 + *(int *)(v25 + 36));
  return a1;
}

uint64_t sub_2142F7E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(v8 + 25) = *(_OWORD *)(a2 + v7 + 25);
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(a2 + v7 + 41);
  v11 = *(_OWORD *)(a2 + v7 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  v12 = *(_QWORD *)(a2 + v7 + 88);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 + v7 + 80);
  *(_QWORD *)(v8 + 88) = v12;
  v13 = type metadata accessor for SgShapeStyle();
  v14 = *(int *)(v13 + 32);
  v15 = (void *)(v8 + v14);
  v16 = (const void *)(v9 + v14);
  v17 = sub_214424C68();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = *(int *)(v13 + 36);
  v21 = v8 + v20;
  v22 = v9 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_WORD *)(v21 + 8) = *(_WORD *)(v22 + 8);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_2142F7FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v26 = a3;
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  if (a1 != a2)
  {
    sub_21420D6FC(a1 + v7);
    v10 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v10;
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
  }
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  v11 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = v11;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v9 + 80);
  v25 = type metadata accessor for SgShapeStyle();
  v12 = *(int *)(v25 + 32);
  v13 = (void *)(v8 + v12);
  v14 = (void *)(v9 + v12);
  v15 = sub_214424C68();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_8;
  }
  if (v19)
  {
LABEL_8:
    v20 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_9:
  v21 = *(int *)(v25 + 36);
  v22 = v8 + v21;
  v23 = v9 + v21;
  *(_QWORD *)v22 = *(_QWORD *)(v9 + v21);
  swift_release();
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_BYTE *)(v22 + 9) = *(_BYTE *)(v23 + 9);
  *(_QWORD *)(a1 + *(int *)(v26 + 36)) = *(_QWORD *)(a2 + *(int *)(v26 + 36));
  return a1;
}

uint64_t sub_2142F81B4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F81C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21430E58C(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142F81CC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F81D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_21430E620(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t type metadata accessor for SgArea(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15568);
}

uint64_t sub_2142F81F8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SgShapeStyle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2142F8290(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 60;
  if (v1 <= 0xD)
    return v1;
  else
    return (*a1 >> 3) + 14;
}

_QWORD *sub_2142F82AC(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_2142F82BC(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 0xE)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 60;
  }
  else
  {
    v2 = 8 * (a2 - 14);
    v3 = 0xE000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for SgNode()
{
  return &type metadata for SgNode;
}

_QWORD *sub_2142F82F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst;
  uint64_t v27;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = a2[4];
    v8 = *(int *)(a3 + 36);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = *((_BYTE *)a2 + v8 + 40);
    if ((v11 & 1) != 0)
    {
      v12 = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v9 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v9, v10);
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      swift_retain();
    }
    *(_BYTE *)(v9 + 40) = v11;
    *(_BYTE *)(v9 + 41) = *(_BYTE *)(v10 + 41);
    *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
    *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
    v14 = *(_QWORD *)(v10 + 72);
    *(_QWORD *)(v9 + 64) = *(_QWORD *)(v10 + 64);
    *(_QWORD *)(v9 + 72) = v14;
    *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
    v15 = type metadata accessor for SgShapeStyle();
    v16 = *(int *)(v15 + 32);
    __dst = (void *)(v9 + v16);
    v27 = v15;
    v17 = (const void *)(v10 + v16);
    v18 = sub_214424C68();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      v21 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    v22 = *(int *)(v27 + 36);
    v23 = v9 + v22;
    v24 = v10 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_WORD *)(v23 + 8) = *(_WORD *)(v24 + 8);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 40));
  }
  swift_retain();
  return v4;
}

uint64_t sub_2142F84BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 36);
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
    _s6Charts15AnyChartContentVwxx_0(a1 + *(int *)(a2 + 36));
  else
    swift_release();
  swift_bridgeObjectRelease();
  v3 = v2 + *(int *)(type metadata accessor for SgShapeStyle() + 32);
  v4 = sub_214424C68();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_release();
}

uint64_t sub_2142F8564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_BYTE *)(a2 + v6 + 40);
  if ((v9 & 1) != 0)
  {
    v10 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v7, v8);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)v8;
    swift_retain();
  }
  *(_BYTE *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
  v11 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 72) = v11;
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  v12 = type metadata accessor for SgShapeStyle();
  v13 = *(int *)(v12 + 32);
  __dst = (void *)(v7 + v13);
  v14 = (const void *)(v8 + v13);
  v15 = sub_214424C68();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    v18 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = *(int *)(v12 + 36);
  v20 = v7 + v19;
  v21 = v8 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_WORD *)(v20 + 8) = *(_WORD *)(v21 + 8);
  *(_QWORD *)(a1 + *(int *)(a3 + 40)) = *(_QWORD *)(a2 + *(int *)(a3 + 40));
  swift_retain();
  return a1;
}

_QWORD *sub_2142F8704(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v5 = *(int *)(a3 + 36);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  if (a1 != a2)
  {
    sub_21420D6FC((uint64_t)a1 + v5);
    if ((v7[40] & 1) != 0)
    {
      v8 = *((_QWORD *)v7 + 3);
      *((_QWORD *)v6 + 3) = v8;
      *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
      (**(void (***)(char *, char *))(v8 - 8))(v6, v7);
      v6[40] = 1;
    }
    else
    {
      *(_QWORD *)v6 = *(_QWORD *)v7;
      v6[40] = 0;
      swift_retain();
    }
  }
  v6[41] = v7[41];
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  *((_DWORD *)v6 + 14) = *((_DWORD *)v7 + 14);
  *((_DWORD *)v6 + 15) = *((_DWORD *)v7 + 15);
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
  *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
  v22 = type metadata accessor for SgShapeStyle();
  v9 = *(int *)(v22 + 32);
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_214424C68();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_10;
  }
  if (v16)
  {
LABEL_10:
    v17 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_11:
  v18 = *(int *)(v22 + 36);
  v19 = &v6[v18];
  v20 = &v7[v18];
  *(_QWORD *)&v6[v18] = *(_QWORD *)v20;
  swift_retain();
  swift_release();
  v19[8] = v20[8];
  v19[9] = v20[9];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_2142F894C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 25) = *(_OWORD *)(a2 + v7 + 25);
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(a2 + v7 + 41);
  v11 = *(_OWORD *)(a2 + v7 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  v12 = *(_QWORD *)(a2 + v7 + 88);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 + v7 + 80);
  *(_QWORD *)(v8 + 88) = v12;
  v13 = type metadata accessor for SgShapeStyle();
  v14 = *(int *)(v13 + 32);
  v15 = (void *)(v8 + v14);
  v16 = (const void *)(v9 + v14);
  v17 = sub_214424C68();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = *(int *)(v13 + 36);
  v21 = v8 + v20;
  v22 = v9 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_WORD *)(v21 + 8) = *(_WORD *)(v22 + 8);
  *(_QWORD *)(a1 + *(int *)(a3 + 40)) = *(_QWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_2142F8A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  if (a1 != a2)
  {
    sub_21420D6FC(a1 + v5);
    v8 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v8;
    *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
  }
  *(_BYTE *)(v6 + 41) = *(_BYTE *)(v7 + 41);
  v9 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(v6 + 56) = v9;
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v7 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v7 + 80);
  v23 = type metadata accessor for SgShapeStyle();
  v10 = *(int *)(v23 + 32);
  v11 = (void *)(v6 + v10);
  v12 = (void *)(v7 + v10);
  v13 = sub_214424C68();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_8;
  }
  if (v17)
  {
LABEL_8:
    v18 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_9:
  v19 = *(int *)(v23 + 36);
  v20 = v6 + v19;
  v21 = v7 + v19;
  *(_QWORD *)v20 = *(_QWORD *)(v7 + v19);
  swift_release();
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_BYTE *)(v20 + 9) = *(_BYTE *)(v21 + 9);
  *(_QWORD *)(a1 + *(int *)(a3 + 40)) = *(_QWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_2142F8C68()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F8C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 36);
  v5 = type metadata accessor for SgShapeStyle();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_2142F8CB4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142F8CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 36);
  v6 = type metadata accessor for SgShapeStyle();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for SgRule(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15750);
}

uint64_t sub_2142F8D18()
{
  return sub_2142F8D2C();
}

uint64_t sub_2142F8D2C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SgShapeStyle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for SgAnnotation.Content(uint64_t *a1)
{
  return sub_2141ED07C(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for SgAnnotation.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_2141ED014(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for SgAnnotation.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_2141ED014(*a2, v4, v5);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  sub_2141ED07C(v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for SgAnnotation.Content(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v7;
  a1[4] = v3;
  sub_2141ED07C(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgAnnotation.Content(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SgAnnotation.Content(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_2142F8F78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 63;
}

uint64_t sub_2142F8F84(uint64_t result)
{
  *(_QWORD *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_2142F8F94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for SgAnnotation.Content()
{
  return &type metadata for SgAnnotation.Content;
}

uint64_t sub_2142F8FB8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  int *v126;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(v4 + 48) = a2[6];
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    v8 = v6[8];
    v9 = (_OWORD *)(v4 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = *((unsigned __int8 *)v10 + 40);
      v126 = v6;
      if (v16 == 255)
      {
        v17 = v10[1];
        *v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if ((v16 & 1) != 0)
      {
        v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((_BYTE *)v9 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_BYTE *)v9 + 40) = 0;
        swift_retain();
      }
      *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      v19 = *((_QWORD *)v10 + 9);
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v19;
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      v125 = v12;
      if (v20 == 255)
      {
        v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if ((v20 & 1) != 0)
      {
        *((_QWORD *)v9 + 11) = *((_QWORD *)v10 + 11);
        v9[6] = v10[6];
        *((_BYTE *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((_BYTE *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
      *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
      *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
      v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
      v24 = v11[11];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = sub_214424308();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = v11[12];
      v31 = (char *)v9 + v30;
      v32 = (char *)v10 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
      v33 = v11[14];
      v34 = (char *)v9 + v33;
      v35 = (char *)v10 + v33;
      v36 = sub_214424C68();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v39 = v11[15];
      v40 = (char *)v9 + v39;
      v41 = (char *)v10 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
      *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
      v42 = v11[18];
      v43 = (char *)v9 + v42;
      v44 = (char *)v10 + v42;
      v45 = *(_QWORD *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        v46 = *(_QWORD *)v44;
        v47 = *((_QWORD *)v44 + 1);
        v48 = v44[16];
        sub_2141DD130(*(_QWORD *)v44, v47, v48);
        *(_QWORD *)v43 = v46;
        *((_QWORD *)v43 + 1) = v47;
        v43[16] = v48;
        v49 = *((_QWORD *)v44 + 4);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
        v50 = *((_QWORD *)v44 + 5);
        v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v49, v50, v51);
        *((_QWORD *)v43 + 4) = v49;
        *((_QWORD *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((_QWORD *)v43 + 8) = *((_QWORD *)v44 + 8);
        v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      v54 = v11[19];
      v55 = (char *)v9 + v54;
      v56 = (char *)v10 + v54;
      if (*(_QWORD *)((char *)v10 + v54 + 24))
      {
        v57 = *(_QWORD *)v56;
        v58 = *((_QWORD *)v56 + 1);
        v59 = v56[16];
        sub_2141DD130(*(_QWORD *)v56, v58, v59);
        *(_QWORD *)v55 = v57;
        *((_QWORD *)v55 + 1) = v58;
        v55[16] = v59;
        v60 = *((_QWORD *)v56 + 4);
        *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
        v61 = *((_QWORD *)v56 + 5);
        v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v60, v61, v62);
        *((_QWORD *)v55 + 4) = v60;
        *((_QWORD *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
        v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      v65 = v11[20];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      if (*(_QWORD *)((char *)v10 + v65 + 24))
      {
        v68 = *(_QWORD *)v67;
        v69 = *((_QWORD *)v67 + 1);
        v70 = v67[16];
        sub_2141DD130(*(_QWORD *)v67, v69, v70);
        *(_QWORD *)v66 = v68;
        *((_QWORD *)v66 + 1) = v69;
        v66[16] = v70;
        v71 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
        v72 = *((_QWORD *)v67 + 5);
        v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v71, v72, v73);
        *((_QWORD *)v66 + 4) = v71;
        *((_QWORD *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((_QWORD *)v66 + 8) = *((_QWORD *)v67 + 8);
        v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      v76 = v11[21];
      v77 = (char *)v9 + v76;
      v78 = (char *)v10 + v76;
      if (*(_QWORD *)((char *)v10 + v76 + 24))
      {
        v79 = *(_QWORD *)v78;
        v80 = *((_QWORD *)v78 + 1);
        v81 = v78[16];
        sub_2141DD130(*(_QWORD *)v78, v80, v81);
        *(_QWORD *)v77 = v79;
        *((_QWORD *)v77 + 1) = v80;
        v77[16] = v81;
        v82 = *((_QWORD *)v78 + 4);
        *((_QWORD *)v77 + 3) = *((_QWORD *)v78 + 3);
        v83 = *((_QWORD *)v78 + 5);
        v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v82, v83, v84);
        *((_QWORD *)v77 + 4) = v82;
        *((_QWORD *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((_QWORD *)v77 + 8) = *((_QWORD *)v78 + 8);
        v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      v87 = v11[22];
      v88 = (char *)v9 + v87;
      v89 = (char *)v10 + v87;
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
      v90 = v11[23];
      v91 = (char *)v9 + v90;
      v92 = (char *)v10 + v90;
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
      v93 = v11[24];
      v94 = (char *)v9 + v93;
      v95 = (char *)v10 + v93;
      if (*(_QWORD *)((char *)v10 + v93 + 24))
      {
        v96 = *(_QWORD *)v95;
        v97 = *((_QWORD *)v95 + 1);
        v98 = v95[16];
        sub_2141DD130(*(_QWORD *)v95, v97, v98);
        *(_QWORD *)v94 = v96;
        *((_QWORD *)v94 + 1) = v97;
        v94[16] = v98;
        *((_QWORD *)v94 + 3) = *((_QWORD *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      v100 = v11[25];
      v101 = (char *)v9 + v100;
      v102 = (char *)v10 + v100;
      if (*(_QWORD *)((char *)v10 + v100 + 24))
      {
        v103 = *(_QWORD *)v102;
        v104 = *((_QWORD *)v102 + 1);
        v105 = v102[16];
        sub_2141DD130(*(_QWORD *)v102, v104, v105);
        *(_QWORD *)v101 = v103;
        *((_QWORD *)v101 + 1) = v104;
        v101[16] = v105;
        *((_QWORD *)v101 + 3) = *((_QWORD *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      v107 = v11[26];
      v108 = (_QWORD *)((char *)v9 + v107);
      v109 = (_QWORD *)((char *)v10 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = v11[27];
      v112 = (char *)v9 + v111;
      v113 = (char *)v10 + v111;
      v114 = *((_QWORD *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((_QWORD *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      v6 = v126;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v125 + 56))(v9, 0, 1, v11);
    }
    v116 = v6[9];
    v117 = v6[10];
    v118 = v4 + v116;
    v119 = (uint64_t)a2 + v116;
    v120 = *(_OWORD *)(v119 + 16);
    *(_OWORD *)v118 = *(_OWORD *)v119;
    *(_OWORD *)(v118 + 16) = v120;
    *(_BYTE *)(v118 + 32) = *(_BYTE *)(v119 + 32);
    v121 = v4 + v117;
    v122 = (uint64_t)a2 + v117;
    v123 = sub_214424308();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
  }
  return v4;
}

uint64_t sub_2142F9700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    v6 = *(unsigned __int8 *)(v4 + 40);
    if (v6 != 255)
    {
      if ((v6 & 1) != 0)
        _s6Charts15AnyChartContentVwxx_0(v4);
      else
        swift_release();
    }
    swift_bridgeObjectRelease();
    v7 = *(unsigned __int8 *)(v4 + 128);
    if (v7 != 255)
    {
      if ((v7 & 1) != 0)
        swift_release();
      else
        _s6Charts15AnyChartContentVwxx_0(v4 + 88);
    }
    v8 = v4 + v5[11];
    v9 = sub_214424308();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = v4 + v5[14];
    v12 = sub_214424C68();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_release();
    v14 = v4 + v5[18];
    if (*(_QWORD *)(v14 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_BYTE *)(v14 + 48));
    }
    v15 = v4 + v5[19];
    if (*(_QWORD *)(v15 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_BYTE *)(v15 + 48));
    }
    v16 = v4 + v5[20];
    if (*(_QWORD *)(v16 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_BYTE *)(v16 + 48));
    }
    v17 = v4 + v5[21];
    if (*(_QWORD *)(v17 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_BYTE *)(v17 + 48));
    }
    v18 = v4 + v5[24];
    if (*(_QWORD *)(v18 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    v19 = v4 + v5[25];
    if (*(_QWORD *)(v19 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v20 = v4 + v5[27];
    if (*(_QWORD *)(v20 + 24))
      _s6Charts15AnyChartContentVwxx_0(v20);
  }
  v21 = a1 + *(int *)(a2 + 40);
  v22 = sub_214424308();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

uint64_t sub_2142F999C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, uint64_t, int *);
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  int *v124;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[8];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48);
  swift_retain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *((unsigned __int8 *)v9 + 40);
    v123 = v11;
    if (v14 == 255)
    {
      v15 = v9[1];
      *v8 = *v9;
      v8[1] = v15;
      *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v9 + 25);
    }
    else if ((v14 & 1) != 0)
    {
      v16 = *(_OWORD *)((char *)v9 + 24);
      *(_OWORD *)((char *)v8 + 24) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v8, v9);
      *((_BYTE *)v8 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_BYTE *)v8 + 40) = 0;
      swift_retain();
    }
    *((_BYTE *)v8 + 41) = *((_BYTE *)v9 + 41);
    *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    v17 = *((_QWORD *)v9 + 9);
    *((_QWORD *)v8 + 8) = *((_QWORD *)v9 + 8);
    *((_QWORD *)v8 + 9) = v17;
    *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
    v18 = *((unsigned __int8 *)v9 + 128);
    swift_bridgeObjectRetain();
    if (v18 == 255)
    {
      v19 = *(_OWORD *)((char *)v9 + 104);
      *(_OWORD *)((char *)v8 + 88) = *(_OWORD *)((char *)v9 + 88);
      *(_OWORD *)((char *)v8 + 104) = v19;
      *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)((char *)v9 + 113);
    }
    else if ((v18 & 1) != 0)
    {
      *((_QWORD *)v8 + 11) = *((_QWORD *)v9 + 11);
      v8[6] = v9[6];
      *((_BYTE *)v8 + 128) = 1;
      swift_retain();
    }
    else
    {
      v20 = v9[7];
      v8[7] = v20;
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)v8 + 88, (uint64_t)v9 + 88);
      *((_BYTE *)v8 + 128) = 0;
    }
    *(_OWORD *)((char *)v8 + 136) = *(_OWORD *)((char *)v9 + 136);
    *((_BYTE *)v8 + 152) = *((_BYTE *)v9 + 152);
    *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
    *((_BYTE *)v8 + 168) = *((_BYTE *)v9 + 168);
    v21 = v9[12];
    v8[11] = v9[11];
    v8[12] = v21;
    *((_BYTE *)v8 + 208) = *((_BYTE *)v9 + 208);
    v22 = v10[11];
    v23 = (char *)v8 + v22;
    v24 = (char *)v9 + v22;
    v25 = sub_214424308();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = v10[12];
    v29 = (char *)v8 + v28;
    v30 = (char *)v9 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    v31 = v10[14];
    v32 = (char *)v8 + v31;
    v33 = (char *)v9 + v31;
    v34 = sub_214424C68();
    v35 = *(_QWORD *)(v34 - 8);
    v124 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v10[15];
    v38 = (char *)v8 + v37;
    v39 = (char *)v9 + v37;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_WORD *)v38 + 4) = *((_WORD *)v39 + 4);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    *(_QWORD *)((char *)v8 + v10[17]) = *(_QWORD *)((char *)v9 + v10[17]);
    v40 = v10[18];
    v41 = (char *)v8 + v40;
    v42 = (char *)v9 + v40;
    v43 = *(_QWORD *)((char *)v9 + v40 + 24);
    swift_retain();
    if (v43)
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      v46 = v42[16];
      sub_2141DD130(*(_QWORD *)v42, v45, v46);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v46;
      v47 = *((_QWORD *)v42 + 4);
      *((_QWORD *)v41 + 3) = *((_QWORD *)v42 + 3);
      v48 = *((_QWORD *)v42 + 5);
      v49 = v42[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v47, v48, v49);
      *((_QWORD *)v41 + 4) = v47;
      *((_QWORD *)v41 + 5) = v48;
      v41[48] = v49;
      *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    }
    else
    {
      v50 = *((_OWORD *)v42 + 3);
      *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
      *((_OWORD *)v41 + 3) = v50;
      *((_QWORD *)v41 + 8) = *((_QWORD *)v42 + 8);
      v51 = *((_OWORD *)v42 + 1);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v51;
    }
    v52 = v10[19];
    v53 = (char *)v8 + v52;
    v54 = (char *)v9 + v52;
    if (*(_QWORD *)((char *)v9 + v52 + 24))
    {
      v55 = *(_QWORD *)v54;
      v56 = *((_QWORD *)v54 + 1);
      v57 = v54[16];
      sub_2141DD130(*(_QWORD *)v54, v56, v57);
      *(_QWORD *)v53 = v55;
      *((_QWORD *)v53 + 1) = v56;
      v53[16] = v57;
      v58 = *((_QWORD *)v54 + 4);
      *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
      v59 = *((_QWORD *)v54 + 5);
      v60 = v54[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v58, v59, v60);
      *((_QWORD *)v53 + 4) = v58;
      *((_QWORD *)v53 + 5) = v59;
      v53[48] = v60;
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
    }
    else
    {
      v61 = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = v61;
      *((_QWORD *)v53 + 8) = *((_QWORD *)v54 + 8);
      v62 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v62;
    }
    v63 = v10[20];
    v64 = (char *)v8 + v63;
    v65 = (char *)v9 + v63;
    if (*(_QWORD *)((char *)v9 + v63 + 24))
    {
      v66 = *(_QWORD *)v65;
      v67 = *((_QWORD *)v65 + 1);
      v68 = v65[16];
      sub_2141DD130(*(_QWORD *)v65, v67, v68);
      *(_QWORD *)v64 = v66;
      *((_QWORD *)v64 + 1) = v67;
      v64[16] = v68;
      v69 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
      v70 = *((_QWORD *)v65 + 5);
      v71 = v65[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v69, v70, v71);
      *((_QWORD *)v64 + 4) = v69;
      *((_QWORD *)v64 + 5) = v70;
      v64[48] = v71;
      *(_OWORD *)(v64 + 56) = *(_OWORD *)(v65 + 56);
    }
    else
    {
      v72 = *((_OWORD *)v65 + 3);
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
      *((_OWORD *)v64 + 3) = v72;
      *((_QWORD *)v64 + 8) = *((_QWORD *)v65 + 8);
      v73 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v73;
    }
    v74 = v10[21];
    v75 = (char *)v8 + v74;
    v76 = (char *)v9 + v74;
    if (*(_QWORD *)((char *)v9 + v74 + 24))
    {
      v77 = *(_QWORD *)v76;
      v78 = *((_QWORD *)v76 + 1);
      v79 = v76[16];
      sub_2141DD130(*(_QWORD *)v76, v78, v79);
      *(_QWORD *)v75 = v77;
      *((_QWORD *)v75 + 1) = v78;
      v75[16] = v79;
      v80 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v75 + 3) = *((_QWORD *)v76 + 3);
      v81 = *((_QWORD *)v76 + 5);
      v82 = v76[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v80, v81, v82);
      *((_QWORD *)v75 + 4) = v80;
      *((_QWORD *)v75 + 5) = v81;
      v75[48] = v82;
      *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
    }
    else
    {
      v83 = *((_OWORD *)v76 + 3);
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_OWORD *)v75 + 3) = v83;
      *((_QWORD *)v75 + 8) = *((_QWORD *)v76 + 8);
      v84 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v84;
    }
    v85 = v10[22];
    v86 = (char *)v8 + v85;
    v87 = (char *)v9 + v85;
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *((_QWORD *)v86 + 2) = *((_QWORD *)v87 + 2);
    v88 = v10[23];
    v89 = (char *)v8 + v88;
    v90 = (char *)v9 + v88;
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
    v91 = v10[24];
    v92 = (char *)v8 + v91;
    v93 = (char *)v9 + v91;
    if (*(_QWORD *)((char *)v9 + v91 + 24))
    {
      v94 = *(_QWORD *)v93;
      v95 = *((_QWORD *)v93 + 1);
      v96 = v93[16];
      sub_2141DD130(*(_QWORD *)v93, v95, v96);
      *(_QWORD *)v92 = v94;
      *((_QWORD *)v92 + 1) = v95;
      v92[16] = v96;
      *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v97;
    }
    v98 = v10[25];
    v99 = (char *)v8 + v98;
    v100 = (char *)v9 + v98;
    if (*(_QWORD *)((char *)v9 + v98 + 24))
    {
      v101 = *(_QWORD *)v100;
      v102 = *((_QWORD *)v100 + 1);
      v103 = v100[16];
      sub_2141DD130(*(_QWORD *)v100, v102, v103);
      *(_QWORD *)v99 = v101;
      *((_QWORD *)v99 + 1) = v102;
      v99[16] = v103;
      *((_QWORD *)v99 + 3) = *((_QWORD *)v100 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v104 = *((_OWORD *)v100 + 1);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *((_OWORD *)v99 + 1) = v104;
    }
    a3 = v124;
    v105 = v10[26];
    v106 = (_QWORD *)((char *)v8 + v105);
    v107 = (_QWORD *)((char *)v9 + v105);
    v108 = v107[1];
    *v106 = *v107;
    v106[1] = v108;
    v109 = v10[27];
    v110 = (char *)v8 + v109;
    v111 = (char *)v9 + v109;
    v112 = *((_QWORD *)v111 + 3);
    swift_bridgeObjectRetain();
    if (v112)
    {
      *((_QWORD *)v110 + 3) = v112;
      (**(void (***)(char *, char *, uint64_t))(v112 - 8))(v110, v111, v112);
    }
    else
    {
      v113 = *((_OWORD *)v111 + 1);
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *((_OWORD *)v110 + 1) = v113;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v123 + 56))(v8, 0, 1, v10);
  }
  v114 = a3[9];
  v115 = a3[10];
  v116 = a1 + v114;
  v117 = a2 + v114;
  v118 = *(_OWORD *)(v117 + 16);
  *(_OWORD *)v116 = *(_OWORD *)v117;
  *(_OWORD *)(v116 + 16) = v118;
  *(_BYTE *)(v116 + 32) = *(_BYTE *)(v117 + 32);
  v119 = a1 + v115;
  v120 = a2 + v115;
  v121 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
  return a1;
}

uint64_t sub_2142FA0B0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  __int128 *v141;
  __int128 *v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  void *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(void *, uint64_t, uint64_t);
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(void *, uint64_t, uint64_t);
  int v172;
  size_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  _QWORD *v295;
  char *v296;
  uint64_t v297;
  _QWORD *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  _QWORD *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  uint64_t *v341;
  void *v342;
  void (**__src)(uint64_t, _QWORD, uint64_t, int *);
  int *v344;
  int *v345;

  v4 = a2;
  sub_2141DEA14((uint64_t *)a1, a2);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v4 + 40);
  *(_QWORD *)(a1 + 48) = v4[6];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = v4[7];
  *(_QWORD *)(a1 + 64) = v4[8];
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = (_QWORD *)*((_QWORD *)v9 - 1);
  v11 = (uint64_t (*)(uint64_t, uint64_t, int *))v10[6];
  v12 = v11(v7, 1, v9);
  v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = v8[40];
      v344 = a3;
      if (v14 == 255)
      {
        v15 = *(_OWORD *)v8;
        v16 = *((_OWORD *)v8 + 1);
        *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
        *(_OWORD *)v7 = v15;
        *(_OWORD *)(v7 + 16) = v16;
      }
      else if ((v14 & 1) != 0)
      {
        v21 = *((_QWORD *)v8 + 3);
        *(_QWORD *)(v7 + 24) = v21;
        *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
        (**(void (***)(uint64_t, char *))(v21 - 8))(v7, v8);
        *(_BYTE *)(v7 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *(_BYTE *)(v7 + 40) = 0;
        swift_retain();
      }
      *(_BYTE *)(v7 + 41) = v8[41];
      *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
      *(_DWORD *)(v7 + 56) = *((_DWORD *)v8 + 14);
      *(_DWORD *)(v7 + 60) = *((_DWORD *)v8 + 15);
      *(_QWORD *)(v7 + 64) = *((_QWORD *)v8 + 8);
      *(_QWORD *)(v7 + 72) = *((_QWORD *)v8 + 9);
      *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
      v22 = v8[128];
      swift_bridgeObjectRetain();
      __src = (void (**)(uint64_t, _QWORD, uint64_t, int *))v10;
      if (v22 == 255)
      {
        v23 = *(_OWORD *)(v8 + 88);
        v24 = *(_OWORD *)(v8 + 104);
        *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
        *(_OWORD *)(v7 + 88) = v23;
        *(_OWORD *)(v7 + 104) = v24;
      }
      else if ((v22 & 1) != 0)
      {
        *(_QWORD *)(v7 + 88) = *((_QWORD *)v8 + 11);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_BYTE *)(v7 + 128) = 1;
        swift_retain();
      }
      else
      {
        v25 = *((_QWORD *)v8 + 14);
        *(_QWORD *)(v7 + 112) = v25;
        *(_QWORD *)(v7 + 120) = *((_QWORD *)v8 + 15);
        (**(void (***)(uint64_t, uint64_t))(v25 - 8))(v7 + 88, (uint64_t)(v8 + 88));
        *(_BYTE *)(v7 + 128) = 0;
      }
      v26 = *(_OWORD *)(v8 + 136);
      *(_BYTE *)(v7 + 152) = v8[152];
      *(_OWORD *)(v7 + 136) = v26;
      v27 = *((_QWORD *)v8 + 20);
      *(_BYTE *)(v7 + 168) = v8[168];
      *(_QWORD *)(v7 + 160) = v27;
      v28 = *((_OWORD *)v8 + 11);
      v29 = *((_OWORD *)v8 + 12);
      *(_BYTE *)(v7 + 208) = v8[208];
      *(_OWORD *)(v7 + 176) = v28;
      *(_OWORD *)(v7 + 192) = v29;
      v30 = v9[11];
      v31 = (void *)(v7 + v30);
      v32 = &v8[v30];
      v33 = sub_214424308();
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v36 = v9[12];
      v37 = v7 + v36;
      v38 = &v8[v36];
      v39 = *(_QWORD *)v38;
      *(_BYTE *)(v37 + 8) = v38[8];
      *(_QWORD *)v37 = v39;
      *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)&v8[v9[13]];
      v40 = v9[14];
      v41 = (void *)(v7 + v40);
      v42 = &v8[v40];
      v43 = sub_214424C68();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v46 = v9[15];
      v47 = v7 + v46;
      v48 = &v8[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *(_WORD *)(v47 + 8) = *((_WORD *)v48 + 4);
      *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)&v8[v9[16]];
      *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)&v8[v9[17]];
      v49 = v9[18];
      v50 = v7 + v49;
      v51 = &v8[v49];
      v52 = *(_QWORD *)&v8[v49 + 24];
      swift_retain();
      if (v52)
      {
        v53 = *(_QWORD *)v51;
        v54 = *((_QWORD *)v51 + 1);
        v55 = v51[16];
        sub_2141DD130(*(_QWORD *)v51, v54, v55);
        *(_QWORD *)v50 = v53;
        *(_QWORD *)(v50 + 8) = v54;
        *(_BYTE *)(v50 + 16) = v55;
        *(_QWORD *)(v50 + 24) = *((_QWORD *)v51 + 3);
        v56 = *((_QWORD *)v51 + 4);
        v57 = *((_QWORD *)v51 + 5);
        v58 = v51[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v56, v57, v58);
        *(_QWORD *)(v50 + 32) = v56;
        *(_QWORD *)(v50 + 40) = v57;
        *(_BYTE *)(v50 + 48) = v58;
        *(_OWORD *)(v50 + 56) = *(_OWORD *)(v51 + 56);
      }
      else
      {
        *(_OWORD *)v50 = *(_OWORD *)v51;
        v59 = *((_OWORD *)v51 + 1);
        v60 = *((_OWORD *)v51 + 2);
        v61 = *((_OWORD *)v51 + 3);
        *(_QWORD *)(v50 + 64) = *((_QWORD *)v51 + 8);
        *(_OWORD *)(v50 + 32) = v60;
        *(_OWORD *)(v50 + 48) = v61;
        *(_OWORD *)(v50 + 16) = v59;
      }
      v62 = v9[19];
      v63 = v7 + v62;
      v64 = &v8[v62];
      if (*(_QWORD *)&v8[v62 + 24])
      {
        v65 = *(_QWORD *)v64;
        v66 = *((_QWORD *)v64 + 1);
        v67 = v64[16];
        sub_2141DD130(*(_QWORD *)v64, v66, v67);
        *(_QWORD *)v63 = v65;
        *(_QWORD *)(v63 + 8) = v66;
        *(_BYTE *)(v63 + 16) = v67;
        *(_QWORD *)(v63 + 24) = *((_QWORD *)v64 + 3);
        v68 = *((_QWORD *)v64 + 4);
        v69 = *((_QWORD *)v64 + 5);
        v70 = v64[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v68, v69, v70);
        *(_QWORD *)(v63 + 32) = v68;
        *(_QWORD *)(v63 + 40) = v69;
        *(_BYTE *)(v63 + 48) = v70;
        *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
      }
      else
      {
        *(_OWORD *)v63 = *(_OWORD *)v64;
        v71 = *((_OWORD *)v64 + 1);
        v72 = *((_OWORD *)v64 + 2);
        v73 = *((_OWORD *)v64 + 3);
        *(_QWORD *)(v63 + 64) = *((_QWORD *)v64 + 8);
        *(_OWORD *)(v63 + 32) = v72;
        *(_OWORD *)(v63 + 48) = v73;
        *(_OWORD *)(v63 + 16) = v71;
      }
      v74 = v9[20];
      v75 = v7 + v74;
      v76 = &v8[v74];
      if (*(_QWORD *)&v8[v74 + 24])
      {
        v77 = *(_QWORD *)v76;
        v78 = *((_QWORD *)v76 + 1);
        v79 = v76[16];
        sub_2141DD130(*(_QWORD *)v76, v78, v79);
        *(_QWORD *)v75 = v77;
        *(_QWORD *)(v75 + 8) = v78;
        *(_BYTE *)(v75 + 16) = v79;
        *(_QWORD *)(v75 + 24) = *((_QWORD *)v76 + 3);
        v80 = *((_QWORD *)v76 + 4);
        v81 = *((_QWORD *)v76 + 5);
        v82 = v76[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v80, v81, v82);
        *(_QWORD *)(v75 + 32) = v80;
        *(_QWORD *)(v75 + 40) = v81;
        *(_BYTE *)(v75 + 48) = v82;
        *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
      }
      else
      {
        *(_OWORD *)v75 = *(_OWORD *)v76;
        v83 = *((_OWORD *)v76 + 1);
        v84 = *((_OWORD *)v76 + 2);
        v85 = *((_OWORD *)v76 + 3);
        *(_QWORD *)(v75 + 64) = *((_QWORD *)v76 + 8);
        *(_OWORD *)(v75 + 32) = v84;
        *(_OWORD *)(v75 + 48) = v85;
        *(_OWORD *)(v75 + 16) = v83;
      }
      v86 = v9[21];
      v87 = v7 + v86;
      v88 = &v8[v86];
      if (*(_QWORD *)&v8[v86 + 24])
      {
        v89 = *(_QWORD *)v88;
        v90 = *((_QWORD *)v88 + 1);
        v91 = v88[16];
        sub_2141DD130(*(_QWORD *)v88, v90, v91);
        *(_QWORD *)v87 = v89;
        *(_QWORD *)(v87 + 8) = v90;
        *(_BYTE *)(v87 + 16) = v91;
        *(_QWORD *)(v87 + 24) = *((_QWORD *)v88 + 3);
        v92 = *((_QWORD *)v88 + 4);
        v93 = *((_QWORD *)v88 + 5);
        v94 = v88[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v92, v93, v94);
        *(_QWORD *)(v87 + 32) = v92;
        *(_QWORD *)(v87 + 40) = v93;
        *(_BYTE *)(v87 + 48) = v94;
        *(_OWORD *)(v87 + 56) = *(_OWORD *)(v88 + 56);
      }
      else
      {
        *(_OWORD *)v87 = *(_OWORD *)v88;
        v95 = *((_OWORD *)v88 + 1);
        v96 = *((_OWORD *)v88 + 2);
        v97 = *((_OWORD *)v88 + 3);
        *(_QWORD *)(v87 + 64) = *((_QWORD *)v88 + 8);
        *(_OWORD *)(v87 + 32) = v96;
        *(_OWORD *)(v87 + 48) = v97;
        *(_OWORD *)(v87 + 16) = v95;
      }
      v98 = v9[22];
      v99 = v7 + v98;
      v100 = &v8[v98];
      v101 = *(_OWORD *)v100;
      *(_QWORD *)(v99 + 16) = *((_QWORD *)v100 + 2);
      *(_OWORD *)v99 = v101;
      v102 = v9[23];
      v103 = v7 + v102;
      v104 = &v8[v102];
      v105 = *(_OWORD *)v104;
      *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
      *(_OWORD *)v103 = v105;
      v106 = v9[24];
      v107 = v7 + v106;
      v108 = &v8[v106];
      if (*(_QWORD *)&v8[v106 + 24])
      {
        v109 = *(_QWORD *)v108;
        v110 = *((_QWORD *)v108 + 1);
        v111 = v108[16];
        sub_2141DD130(*(_QWORD *)v108, v110, v111);
        *(_QWORD *)v107 = v109;
        *(_QWORD *)(v107 + 8) = v110;
        *(_BYTE *)(v107 + 16) = v111;
        *(_QWORD *)(v107 + 24) = *((_QWORD *)v108 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v112 = *((_OWORD *)v108 + 1);
        *(_OWORD *)v107 = *(_OWORD *)v108;
        *(_OWORD *)(v107 + 16) = v112;
      }
      v113 = v9[25];
      v114 = v7 + v113;
      v115 = &v8[v113];
      if (*(_QWORD *)&v8[v113 + 24])
      {
        v116 = *(_QWORD *)v115;
        v117 = *((_QWORD *)v115 + 1);
        v118 = v115[16];
        sub_2141DD130(*(_QWORD *)v115, v117, v118);
        *(_QWORD *)v114 = v116;
        *(_QWORD *)(v114 + 8) = v117;
        *(_BYTE *)(v114 + 16) = v118;
        *(_QWORD *)(v114 + 24) = *((_QWORD *)v115 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v119 = *((_OWORD *)v115 + 1);
        *(_OWORD *)v114 = *(_OWORD *)v115;
        *(_OWORD *)(v114 + 16) = v119;
      }
      v120 = v9[26];
      v121 = (_QWORD *)(v7 + v120);
      v122 = &v8[v120];
      *v121 = *(_QWORD *)v122;
      v121[1] = *((_QWORD *)v122 + 1);
      v123 = v9[27];
      v124 = v7 + v123;
      v125 = &v8[v123];
      v126 = *((_QWORD *)v125 + 3);
      swift_bridgeObjectRetain();
      if (v126)
      {
        *(_QWORD *)(v124 + 24) = v126;
        (**(void (***)(uint64_t, char *, uint64_t))(v126 - 8))(v124, v125, v126);
      }
      else
      {
        v127 = *((_OWORD *)v125 + 1);
        *(_OWORD *)v124 = *(_OWORD *)v125;
        *(_OWORD *)(v124 + 16) = v127;
      }
      a3 = v344;
      __src[7](v7, 0, 1, v9);
      goto LABEL_47;
    }
LABEL_7:
    v17 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_47;
  }
  if (v13)
  {
    sub_2141DD370(v7, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  v18 = v8[40];
  if (*(unsigned __int8 *)(v7 + 40) == 255)
  {
    if (v18 == 255)
    {
      v138 = *(_OWORD *)v8;
      v139 = *((_OWORD *)v8 + 1);
      *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
      *(_OWORD *)v7 = v138;
      *(_OWORD *)(v7 + 16) = v139;
      goto LABEL_55;
    }
    if ((v18 & 1) != 0)
      goto LABEL_52;
LABEL_54:
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_BYTE *)(v7 + 40) = 0;
    swift_retain();
    goto LABEL_55;
  }
  if (v18 == 255)
  {
    sub_21420D6FC(v7);
    v19 = *(_OWORD *)(v8 + 25);
    v20 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v20;
    *(_OWORD *)(v7 + 25) = v19;
    goto LABEL_55;
  }
  if ((uint64_t *)a1 != v4)
  {
    sub_21420D6FC(v7);
    if ((v8[40] & 1) != 0)
    {
LABEL_52:
      v140 = *((_QWORD *)v8 + 3);
      *(_QWORD *)(v7 + 24) = v140;
      *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
      (**(void (***)(uint64_t, char *))(v140 - 8))(v7, v8);
      *(_BYTE *)(v7 + 40) = 1;
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_55:
  v345 = a3;
  *(_BYTE *)(v7 + 41) = v8[41];
  *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
  *(_DWORD *)(v7 + 56) = *((_DWORD *)v8 + 14);
  *(_DWORD *)(v7 + 60) = *((_DWORD *)v8 + 15);
  *(_QWORD *)(v7 + 64) = *((_QWORD *)v8 + 8);
  *(_QWORD *)(v7 + 72) = *((_QWORD *)v8 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
  v141 = (__int128 *)(v7 + 88);
  v142 = (__int128 *)(v8 + 88);
  v143 = v8[128];
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
    if (v143 == 255)
    {
      v146 = *v142;
      v147 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *v141 = v146;
      *(_OWORD *)(v7 + 104) = v147;
      goto LABEL_65;
    }
    if ((v143 & 1) != 0)
      goto LABEL_62;
LABEL_64:
    v148 = *((_QWORD *)v8 + 14);
    *(_QWORD *)(v7 + 112) = v148;
    *(_QWORD *)(v7 + 120) = *((_QWORD *)v8 + 15);
    (**(void (***)(uint64_t, uint64_t))(v148 - 8))(v7 + 88, (uint64_t)(v8 + 88));
    *(_BYTE *)(v7 + 128) = 0;
    goto LABEL_65;
  }
  if (v143 == 255)
  {
    sub_21420D730(v7 + 88);
    v144 = *(_OWORD *)(v8 + 113);
    v145 = *(_OWORD *)(v8 + 104);
    *v141 = *v142;
    *(_OWORD *)(v7 + 104) = v145;
    *(_OWORD *)(v7 + 113) = v144;
    goto LABEL_65;
  }
  if ((uint64_t *)a1 != v4)
  {
    sub_21420D730(v7 + 88);
    if ((v8[128] & 1) != 0)
    {
LABEL_62:
      *(_QWORD *)(v7 + 88) = *((_QWORD *)v8 + 11);
      *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
      *(_BYTE *)(v7 + 128) = 1;
      swift_retain();
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  v341 = v4;
  v149 = *(_OWORD *)(v8 + 136);
  *(_BYTE *)(v7 + 152) = v8[152];
  *(_OWORD *)(v7 + 136) = v149;
  v150 = *((_QWORD *)v8 + 20);
  *(_BYTE *)(v7 + 168) = v8[168];
  *(_QWORD *)(v7 + 160) = v150;
  v151 = *((_OWORD *)v8 + 11);
  v152 = *((_OWORD *)v8 + 12);
  *(_BYTE *)(v7 + 208) = v8[208];
  *(_OWORD *)(v7 + 176) = v151;
  *(_OWORD *)(v7 + 192) = v152;
  v153 = v9[11];
  v154 = (void *)(v7 + v153);
  v155 = &v8[v153];
  v156 = sub_214424308();
  v157 = *(_QWORD *)(v156 - 8);
  v158 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v157 + 48);
  v159 = v158(v154, 1, v156);
  v160 = v158(v155, 1, v156);
  if (v159)
  {
    if (!v160)
    {
      (*(void (**)(void *, char *, uint64_t))(v157 + 16))(v154, v155, v156);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v160)
  {
    (*(void (**)(void *, uint64_t))(v157 + 8))(v154, v156);
LABEL_70:
    v161 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(void *, char *, uint64_t))(v157 + 24))(v154, v155, v156);
LABEL_71:
  v4 = v341;
  v162 = v9[12];
  v163 = v7 + v162;
  v164 = &v8[v162];
  v165 = *(_QWORD *)v164;
  *(_BYTE *)(v163 + 8) = v164[8];
  *(_QWORD *)v163 = v165;
  *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)&v8[v9[13]];
  v166 = v9[14];
  v167 = (void *)(v7 + v166);
  v168 = &v8[v166];
  v169 = sub_214424C68();
  v170 = *(_QWORD *)(v169 - 8);
  v171 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v170 + 48);
  v342 = v167;
  LODWORD(v167) = v171(v167, 1, v169);
  v172 = v171(v168, 1, v169);
  if ((_DWORD)v167)
  {
    if (v172)
    {
      v173 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v174 = v342;
LABEL_76:
      memcpy(v174, v168, v173);
      goto LABEL_80;
    }
    (*(void (**)(void *, char *, uint64_t))(v170 + 16))(v342, v168, v169);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v342, 0, 1, v169);
  }
  else
  {
    if (v172)
    {
      (*(void (**)(void *, uint64_t))(v170 + 8))(v342, v169);
      v173 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v174 = v342;
      goto LABEL_76;
    }
    (*(void (**)(void *, char *, uint64_t))(v170 + 24))(v342, v168, v169);
  }
LABEL_80:
  v175 = v9[15];
  v176 = v7 + v175;
  v177 = &v8[v175];
  *(_QWORD *)(v7 + v175) = *(_QWORD *)&v8[v175];
  swift_retain();
  swift_release();
  *(_BYTE *)(v176 + 8) = v177[8];
  *(_BYTE *)(v176 + 9) = v177[9];
  *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)&v8[v9[16]];
  *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)&v8[v9[17]];
  v178 = v9[18];
  v179 = v7 + v178;
  v180 = &v8[v178];
  v181 = *(_QWORD *)(v7 + v178 + 24);
  v182 = *(_QWORD *)&v8[v178 + 24];
  if (v181)
  {
    if (v182)
    {
      v183 = *(_QWORD *)v180;
      v184 = *((_QWORD *)v180 + 1);
      v185 = v180[16];
      sub_2141DD130(*(_QWORD *)v180, v184, v185);
      v186 = *(_QWORD *)v179;
      v187 = *(_QWORD *)(v179 + 8);
      v188 = *(_BYTE *)(v179 + 16);
      *(_QWORD *)v179 = v183;
      *(_QWORD *)(v179 + 8) = v184;
      *(_BYTE *)(v179 + 16) = v185;
      sub_2141ED0BC(v186, v187, v188);
      *(_QWORD *)(v179 + 24) = *((_QWORD *)v180 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v189 = *((_QWORD *)v180 + 4);
      v190 = *((_QWORD *)v180 + 5);
      v191 = v180[48];
      sub_2141DD140(v189, v190, v191);
      v192 = *(_QWORD *)(v179 + 32);
      v193 = *(_QWORD *)(v179 + 40);
      *(_QWORD *)(v179 + 32) = v189;
      *(_QWORD *)(v179 + 40) = v190;
      v194 = *(_BYTE *)(v179 + 48);
      *(_BYTE *)(v179 + 48) = v191;
      sub_2141EF1B0(v192, v193, v194);
LABEL_85:
      *(_OWORD *)(v179 + 56) = *(_OWORD *)(v180 + 56);
      goto LABEL_88;
    }
    sub_21420D764(v179);
    *(_OWORD *)v179 = *(_OWORD *)v180;
    v202 = *((_OWORD *)v180 + 2);
    v201 = *((_OWORD *)v180 + 3);
    v203 = *((_OWORD *)v180 + 1);
    *(_QWORD *)(v179 + 64) = *((_QWORD *)v180 + 8);
    *(_OWORD *)(v179 + 32) = v202;
    *(_OWORD *)(v179 + 48) = v201;
    *(_OWORD *)(v179 + 16) = v203;
  }
  else
  {
    if (v182)
    {
      v195 = *(_QWORD *)v180;
      v196 = *((_QWORD *)v180 + 1);
      v197 = v180[16];
      sub_2141DD130(*(_QWORD *)v180, v196, v197);
      *(_QWORD *)v179 = v195;
      *(_QWORD *)(v179 + 8) = v196;
      *(_BYTE *)(v179 + 16) = v197;
      *(_QWORD *)(v179 + 24) = *((_QWORD *)v180 + 3);
      v198 = *((_QWORD *)v180 + 4);
      v199 = *((_QWORD *)v180 + 5);
      v200 = v180[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v198, v199, v200);
      *(_QWORD *)(v179 + 32) = v198;
      *(_QWORD *)(v179 + 40) = v199;
      *(_BYTE *)(v179 + 48) = v200;
      goto LABEL_85;
    }
    *(_OWORD *)v179 = *(_OWORD *)v180;
    v204 = *((_OWORD *)v180 + 1);
    v205 = *((_OWORD *)v180 + 2);
    v206 = *((_OWORD *)v180 + 3);
    *(_QWORD *)(v179 + 64) = *((_QWORD *)v180 + 8);
    *(_OWORD *)(v179 + 32) = v205;
    *(_OWORD *)(v179 + 48) = v206;
    *(_OWORD *)(v179 + 16) = v204;
  }
LABEL_88:
  v207 = v9[19];
  v208 = v7 + v207;
  v209 = &v8[v207];
  v210 = *(_QWORD *)(v7 + v207 + 24);
  v211 = *(_QWORD *)&v8[v207 + 24];
  if (v210)
  {
    if (v211)
    {
      v212 = *(_QWORD *)v209;
      v213 = *((_QWORD *)v209 + 1);
      v214 = v209[16];
      sub_2141DD130(*(_QWORD *)v209, v213, v214);
      v215 = *(_QWORD *)v208;
      v216 = *(_QWORD *)(v208 + 8);
      v217 = *(_BYTE *)(v208 + 16);
      *(_QWORD *)v208 = v212;
      *(_QWORD *)(v208 + 8) = v213;
      *(_BYTE *)(v208 + 16) = v214;
      sub_2141ED0BC(v215, v216, v217);
      *(_QWORD *)(v208 + 24) = *((_QWORD *)v209 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v218 = *((_QWORD *)v209 + 4);
      v219 = *((_QWORD *)v209 + 5);
      v220 = v209[48];
      sub_2141DD140(v218, v219, v220);
      v221 = *(_QWORD *)(v208 + 32);
      v222 = *(_QWORD *)(v208 + 40);
      *(_QWORD *)(v208 + 32) = v218;
      *(_QWORD *)(v208 + 40) = v219;
      v223 = *(_BYTE *)(v208 + 48);
      *(_BYTE *)(v208 + 48) = v220;
      sub_2141EF1B0(v221, v222, v223);
LABEL_93:
      *(_OWORD *)(v208 + 56) = *(_OWORD *)(v209 + 56);
      goto LABEL_96;
    }
    sub_21420D764(v208);
    *(_OWORD *)v208 = *(_OWORD *)v209;
    v231 = *((_OWORD *)v209 + 2);
    v230 = *((_OWORD *)v209 + 3);
    v232 = *((_OWORD *)v209 + 1);
    *(_QWORD *)(v208 + 64) = *((_QWORD *)v209 + 8);
    *(_OWORD *)(v208 + 32) = v231;
    *(_OWORD *)(v208 + 48) = v230;
    *(_OWORD *)(v208 + 16) = v232;
  }
  else
  {
    if (v211)
    {
      v224 = *(_QWORD *)v209;
      v225 = *((_QWORD *)v209 + 1);
      v226 = v209[16];
      sub_2141DD130(*(_QWORD *)v209, v225, v226);
      *(_QWORD *)v208 = v224;
      *(_QWORD *)(v208 + 8) = v225;
      *(_BYTE *)(v208 + 16) = v226;
      *(_QWORD *)(v208 + 24) = *((_QWORD *)v209 + 3);
      v227 = *((_QWORD *)v209 + 4);
      v228 = *((_QWORD *)v209 + 5);
      v229 = v209[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v227, v228, v229);
      *(_QWORD *)(v208 + 32) = v227;
      *(_QWORD *)(v208 + 40) = v228;
      *(_BYTE *)(v208 + 48) = v229;
      goto LABEL_93;
    }
    *(_OWORD *)v208 = *(_OWORD *)v209;
    v233 = *((_OWORD *)v209 + 1);
    v234 = *((_OWORD *)v209 + 2);
    v235 = *((_OWORD *)v209 + 3);
    *(_QWORD *)(v208 + 64) = *((_QWORD *)v209 + 8);
    *(_OWORD *)(v208 + 32) = v234;
    *(_OWORD *)(v208 + 48) = v235;
    *(_OWORD *)(v208 + 16) = v233;
  }
LABEL_96:
  v236 = v9[20];
  v237 = v7 + v236;
  v238 = &v8[v236];
  v239 = *(_QWORD *)(v7 + v236 + 24);
  v240 = *(_QWORD *)&v8[v236 + 24];
  if (v239)
  {
    if (v240)
    {
      v241 = *(_QWORD *)v238;
      v242 = *((_QWORD *)v238 + 1);
      v243 = v238[16];
      sub_2141DD130(*(_QWORD *)v238, v242, v243);
      v244 = *(_QWORD *)v237;
      v245 = *(_QWORD *)(v237 + 8);
      v246 = *(_BYTE *)(v237 + 16);
      *(_QWORD *)v237 = v241;
      *(_QWORD *)(v237 + 8) = v242;
      *(_BYTE *)(v237 + 16) = v243;
      sub_2141ED0BC(v244, v245, v246);
      *(_QWORD *)(v237 + 24) = *((_QWORD *)v238 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v247 = *((_QWORD *)v238 + 4);
      v248 = *((_QWORD *)v238 + 5);
      v249 = v238[48];
      sub_2141DD140(v247, v248, v249);
      v250 = *(_QWORD *)(v237 + 32);
      v251 = *(_QWORD *)(v237 + 40);
      *(_QWORD *)(v237 + 32) = v247;
      *(_QWORD *)(v237 + 40) = v248;
      v252 = *(_BYTE *)(v237 + 48);
      *(_BYTE *)(v237 + 48) = v249;
      sub_2141EF1B0(v250, v251, v252);
LABEL_101:
      *(_OWORD *)(v237 + 56) = *(_OWORD *)(v238 + 56);
      goto LABEL_104;
    }
    sub_21420D764(v237);
    *(_OWORD *)v237 = *(_OWORD *)v238;
    v260 = *((_OWORD *)v238 + 2);
    v259 = *((_OWORD *)v238 + 3);
    v261 = *((_OWORD *)v238 + 1);
    *(_QWORD *)(v237 + 64) = *((_QWORD *)v238 + 8);
    *(_OWORD *)(v237 + 32) = v260;
    *(_OWORD *)(v237 + 48) = v259;
    *(_OWORD *)(v237 + 16) = v261;
  }
  else
  {
    if (v240)
    {
      v253 = *(_QWORD *)v238;
      v254 = *((_QWORD *)v238 + 1);
      v255 = v238[16];
      sub_2141DD130(*(_QWORD *)v238, v254, v255);
      *(_QWORD *)v237 = v253;
      *(_QWORD *)(v237 + 8) = v254;
      *(_BYTE *)(v237 + 16) = v255;
      *(_QWORD *)(v237 + 24) = *((_QWORD *)v238 + 3);
      v256 = *((_QWORD *)v238 + 4);
      v257 = *((_QWORD *)v238 + 5);
      v258 = v238[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v256, v257, v258);
      *(_QWORD *)(v237 + 32) = v256;
      *(_QWORD *)(v237 + 40) = v257;
      *(_BYTE *)(v237 + 48) = v258;
      goto LABEL_101;
    }
    *(_OWORD *)v237 = *(_OWORD *)v238;
    v262 = *((_OWORD *)v238 + 1);
    v263 = *((_OWORD *)v238 + 2);
    v264 = *((_OWORD *)v238 + 3);
    *(_QWORD *)(v237 + 64) = *((_QWORD *)v238 + 8);
    *(_OWORD *)(v237 + 32) = v263;
    *(_OWORD *)(v237 + 48) = v264;
    *(_OWORD *)(v237 + 16) = v262;
  }
LABEL_104:
  v265 = v9[21];
  v266 = v7 + v265;
  v267 = &v8[v265];
  v268 = *(_QWORD *)(v7 + v265 + 24);
  v269 = *(_QWORD *)&v8[v265 + 24];
  if (v268)
  {
    if (!v269)
    {
      sub_21420D764(v266);
      *(_OWORD *)v266 = *(_OWORD *)v267;
      v289 = *((_OWORD *)v267 + 2);
      v288 = *((_OWORD *)v267 + 3);
      v290 = *((_OWORD *)v267 + 1);
      *(_QWORD *)(v266 + 64) = *((_QWORD *)v267 + 8);
      *(_OWORD *)(v266 + 32) = v289;
      *(_OWORD *)(v266 + 48) = v288;
      *(_OWORD *)(v266 + 16) = v290;
      goto LABEL_112;
    }
    v270 = *(_QWORD *)v267;
    v271 = *((_QWORD *)v267 + 1);
    v272 = v267[16];
    sub_2141DD130(*(_QWORD *)v267, v271, v272);
    v273 = *(_QWORD *)v266;
    v274 = *(_QWORD *)(v266 + 8);
    v275 = *(_BYTE *)(v266 + 16);
    *(_QWORD *)v266 = v270;
    *(_QWORD *)(v266 + 8) = v271;
    *(_BYTE *)(v266 + 16) = v272;
    sub_2141ED0BC(v273, v274, v275);
    *(_QWORD *)(v266 + 24) = *((_QWORD *)v267 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v276 = *((_QWORD *)v267 + 4);
    v277 = *((_QWORD *)v267 + 5);
    v278 = v267[48];
    sub_2141DD140(v276, v277, v278);
    v279 = *(_QWORD *)(v266 + 32);
    v280 = *(_QWORD *)(v266 + 40);
    *(_QWORD *)(v266 + 32) = v276;
    *(_QWORD *)(v266 + 40) = v277;
    v281 = *(_BYTE *)(v266 + 48);
    *(_BYTE *)(v266 + 48) = v278;
    sub_2141EF1B0(v279, v280, v281);
  }
  else
  {
    if (!v269)
    {
      *(_OWORD *)v266 = *(_OWORD *)v267;
      v291 = *((_OWORD *)v267 + 1);
      v292 = *((_OWORD *)v267 + 2);
      v293 = *((_OWORD *)v267 + 3);
      *(_QWORD *)(v266 + 64) = *((_QWORD *)v267 + 8);
      *(_OWORD *)(v266 + 32) = v292;
      *(_OWORD *)(v266 + 48) = v293;
      *(_OWORD *)(v266 + 16) = v291;
      goto LABEL_112;
    }
    v282 = *(_QWORD *)v267;
    v283 = *((_QWORD *)v267 + 1);
    v284 = v267[16];
    sub_2141DD130(*(_QWORD *)v267, v283, v284);
    *(_QWORD *)v266 = v282;
    *(_QWORD *)(v266 + 8) = v283;
    *(_BYTE *)(v266 + 16) = v284;
    *(_QWORD *)(v266 + 24) = *((_QWORD *)v267 + 3);
    v285 = *((_QWORD *)v267 + 4);
    v286 = *((_QWORD *)v267 + 5);
    v287 = v267[48];
    swift_bridgeObjectRetain();
    sub_2141DD140(v285, v286, v287);
    *(_QWORD *)(v266 + 32) = v285;
    *(_QWORD *)(v266 + 40) = v286;
    *(_BYTE *)(v266 + 48) = v287;
  }
  *(_OWORD *)(v266 + 56) = *(_OWORD *)(v267 + 56);
LABEL_112:
  v294 = v9[22];
  v295 = (_QWORD *)(v7 + v294);
  v296 = &v8[v294];
  *v295 = *(_QWORD *)v296;
  v295[1] = *((_QWORD *)v296 + 1);
  v295[2] = *((_QWORD *)v296 + 2);
  v297 = v9[23];
  v298 = (_QWORD *)(v7 + v297);
  v299 = &v8[v297];
  *v298 = *(_QWORD *)v299;
  v298[1] = *((_QWORD *)v299 + 1);
  v298[2] = *((_QWORD *)v299 + 2);
  v300 = v9[24];
  v301 = v7 + v300;
  v302 = &v8[v300];
  v303 = *(_QWORD *)(v7 + v300 + 24);
  v304 = *(_QWORD *)&v8[v300 + 24];
  if (v303)
  {
    if (v304)
    {
      v305 = *(_QWORD *)v302;
      v306 = *((_QWORD *)v302 + 1);
      v307 = v302[16];
      sub_2141DD130(*(_QWORD *)v302, v306, v307);
      v308 = *(_QWORD *)v301;
      v309 = *(_QWORD *)(v301 + 8);
      v310 = *(_BYTE *)(v301 + 16);
      *(_QWORD *)v301 = v305;
      *(_QWORD *)(v301 + 8) = v306;
      *(_BYTE *)(v301 + 16) = v307;
      sub_2141ED0BC(v308, v309, v310);
      *(_QWORD *)(v301 + 24) = *((_QWORD *)v302 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v301);
      v314 = *((_OWORD *)v302 + 1);
      *(_OWORD *)v301 = *(_OWORD *)v302;
      *(_OWORD *)(v301 + 16) = v314;
    }
  }
  else if (v304)
  {
    v311 = *(_QWORD *)v302;
    v312 = *((_QWORD *)v302 + 1);
    v313 = v302[16];
    sub_2141DD130(*(_QWORD *)v302, v312, v313);
    *(_QWORD *)v301 = v311;
    *(_QWORD *)(v301 + 8) = v312;
    *(_BYTE *)(v301 + 16) = v313;
    *(_QWORD *)(v301 + 24) = *((_QWORD *)v302 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v315 = *((_OWORD *)v302 + 1);
    *(_OWORD *)v301 = *(_OWORD *)v302;
    *(_OWORD *)(v301 + 16) = v315;
  }
  v316 = v9[25];
  v317 = v7 + v316;
  v318 = &v8[v316];
  v319 = *(_QWORD *)(v7 + v316 + 24);
  v320 = *(_QWORD *)&v8[v316 + 24];
  if (v319)
  {
    if (v320)
    {
      v321 = *(_QWORD *)v318;
      v322 = *((_QWORD *)v318 + 1);
      v323 = v318[16];
      sub_2141DD130(*(_QWORD *)v318, v322, v323);
      v324 = *(_QWORD *)v317;
      v325 = *(_QWORD *)(v317 + 8);
      v326 = *(_BYTE *)(v317 + 16);
      *(_QWORD *)v317 = v321;
      *(_QWORD *)(v317 + 8) = v322;
      *(_BYTE *)(v317 + 16) = v323;
      sub_2141ED0BC(v324, v325, v326);
      *(_QWORD *)(v317 + 24) = *((_QWORD *)v318 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v317);
      v330 = *((_OWORD *)v318 + 1);
      *(_OWORD *)v317 = *(_OWORD *)v318;
      *(_OWORD *)(v317 + 16) = v330;
    }
  }
  else if (v320)
  {
    v327 = *(_QWORD *)v318;
    v328 = *((_QWORD *)v318 + 1);
    v329 = v318[16];
    sub_2141DD130(*(_QWORD *)v318, v328, v329);
    *(_QWORD *)v317 = v327;
    *(_QWORD *)(v317 + 8) = v328;
    *(_BYTE *)(v317 + 16) = v329;
    *(_QWORD *)(v317 + 24) = *((_QWORD *)v318 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v331 = *((_OWORD *)v318 + 1);
    *(_OWORD *)v317 = *(_OWORD *)v318;
    *(_OWORD *)(v317 + 16) = v331;
  }
  a3 = v345;
  v332 = v9[26];
  v333 = (_QWORD *)(v7 + v332);
  v334 = &v8[v332];
  *v333 = *(_QWORD *)v334;
  v333[1] = *((_QWORD *)v334 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v335 = v9[27];
  v336 = v7 + v335;
  v337 = &v8[v335];
  v338 = *((_QWORD *)v337 + 3);
  if (*(_QWORD *)(v336 + 24))
  {
    if (v338)
    {
      sub_21420D7CC((uint64_t *)v336, (uint64_t *)v337);
    }
    else
    {
      sub_21420D92C(v336);
      v339 = *((_OWORD *)v337 + 1);
      *(_OWORD *)v336 = *(_OWORD *)v337;
      *(_OWORD *)(v336 + 16) = v339;
    }
  }
  else if (v338)
  {
    *(_QWORD *)(v336 + 24) = v338;
    (**(void (***)(uint64_t, char *))(v338 - 8))(v336, v337);
  }
  else
  {
    v340 = *((_OWORD *)v337 + 1);
    *(_OWORD *)v336 = *(_OWORD *)v337;
    *(_OWORD *)(v336 + 16) = v340;
  }
LABEL_47:
  v128 = a3[9];
  v129 = a1 + v128;
  v130 = (char *)v4 + v128;
  v131 = *(_OWORD *)v130;
  v132 = *((_OWORD *)v130 + 1);
  *(_BYTE *)(v129 + 32) = v130[32];
  *(_OWORD *)v129 = v131;
  *(_OWORD *)(v129 + 16) = v132;
  v133 = a3[10];
  v134 = a1 + v133;
  v135 = (char *)v4 + v133;
  v136 = sub_214424308();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 24))(v134, v135, v136);
  return a1;
}

uint64_t sub_2142FB374(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[8];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v83 = v11;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v9 + 25);
    *((_BYTE *)v8 + 41) = *((_BYTE *)v9 + 41);
    v14 = v9[4];
    v8[3] = v9[3];
    v8[4] = v14;
    *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
    v15 = *(_OWORD *)((char *)v9 + 88);
    v16 = *(_OWORD *)((char *)v9 + 104);
    *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)((char *)v9 + 113);
    *(_OWORD *)((char *)v8 + 104) = v16;
    *(_OWORD *)((char *)v8 + 88) = v15;
    *(_OWORD *)((char *)v8 + 136) = *(_OWORD *)((char *)v9 + 136);
    *((_BYTE *)v8 + 152) = *((_BYTE *)v9 + 152);
    *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
    *((_BYTE *)v8 + 168) = *((_BYTE *)v9 + 168);
    v17 = v9[12];
    v8[11] = v9[11];
    v8[12] = v17;
    *((_BYTE *)v8 + 208) = *((_BYTE *)v9 + 208);
    v18 = v10[11];
    v19 = (char *)v8 + v18;
    v20 = (char *)v9 + v18;
    v21 = sub_214424308();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = v10[12];
    v25 = (char *)v8 + v24;
    v26 = (char *)v9 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    v27 = v10[14];
    v28 = (char *)v8 + v27;
    v29 = (char *)v9 + v27;
    v30 = sub_214424C68();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v33 = v10[15];
    v34 = (char *)v8 + v33;
    v35 = (char *)v9 + v33;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_WORD *)v34 + 4) = *((_WORD *)v35 + 4);
    *(_QWORD *)((char *)v8 + v10[16]) = *(_QWORD *)((char *)v9 + v10[16]);
    *(_QWORD *)((char *)v8 + v10[17]) = *(_QWORD *)((char *)v9 + v10[17]);
    v36 = v10[18];
    v37 = (char *)v8 + v36;
    v38 = (char *)v9 + v36;
    v39 = *((_OWORD *)v38 + 3);
    *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
    *((_OWORD *)v37 + 3) = v39;
    *((_QWORD *)v37 + 8) = *((_QWORD *)v38 + 8);
    v40 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v40;
    v41 = v10[19];
    v42 = (char *)v8 + v41;
    v43 = (char *)v9 + v41;
    *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
    v44 = *((_OWORD *)v43 + 3);
    *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
    *((_OWORD *)v42 + 3) = v44;
    v45 = *((_OWORD *)v43 + 1);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v45;
    v46 = v10[20];
    v47 = (char *)v8 + v46;
    v48 = (char *)v9 + v46;
    v49 = *((_OWORD *)v48 + 3);
    *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
    *((_OWORD *)v47 + 3) = v49;
    *((_QWORD *)v47 + 8) = *((_QWORD *)v48 + 8);
    v50 = *((_OWORD *)v48 + 1);
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *((_OWORD *)v47 + 1) = v50;
    v51 = v10[21];
    v52 = (char *)v8 + v51;
    v53 = (char *)v9 + v51;
    *((_QWORD *)v52 + 8) = *((_QWORD *)v53 + 8);
    v54 = *((_OWORD *)v53 + 3);
    *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
    *((_OWORD *)v52 + 3) = v54;
    v55 = *((_OWORD *)v53 + 1);
    *(_OWORD *)v52 = *(_OWORD *)v53;
    *((_OWORD *)v52 + 1) = v55;
    v56 = v10[22];
    v57 = (char *)v8 + v56;
    v58 = (char *)v9 + v56;
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *((_QWORD *)v57 + 2) = *((_QWORD *)v58 + 2);
    v59 = v10[23];
    v60 = (char *)v8 + v59;
    v61 = (char *)v9 + v59;
    *(_OWORD *)v60 = *(_OWORD *)v61;
    *((_QWORD *)v60 + 2) = *((_QWORD *)v61 + 2);
    v62 = v10[24];
    v63 = (_OWORD *)((char *)v8 + v62);
    v64 = (_OWORD *)((char *)v9 + v62);
    v65 = v64[1];
    *v63 = *v64;
    v63[1] = v65;
    v66 = v10[25];
    v67 = (_OWORD *)((char *)v8 + v66);
    v68 = (_OWORD *)((char *)v9 + v66);
    v69 = v68[1];
    *v67 = *v68;
    v67[1] = v69;
    *(_OWORD *)((char *)v8 + v10[26]) = *(_OWORD *)((char *)v9 + v10[26]);
    v70 = v10[27];
    v71 = (_OWORD *)((char *)v8 + v70);
    v72 = (_OWORD *)((char *)v9 + v70);
    v73 = v72[1];
    *v71 = *v72;
    v71[1] = v73;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v83 + 56))(v8, 0, 1, v10);
  }
  v74 = a3[9];
  v75 = a3[10];
  v76 = a1 + v74;
  v77 = a2 + v74;
  v78 = *(_OWORD *)(v77 + 16);
  *(_OWORD *)v76 = *(_OWORD *)v77;
  *(_OWORD *)(v76 + 16) = v78;
  *(_BYTE *)(v76 + 32) = *(_BYTE *)(v77 + 32);
  v79 = a1 + v75;
  v80 = a2 + v75;
  v81 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
  return a1;
}

uint64_t sub_2142FB784(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  __int128 v82;
  uint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(void *, uint64_t, uint64_t);
  int v100;
  size_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v198;
  void *v199;
  int *v200;
  int *v201;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v200 = a3;
      v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v15;
      *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
      *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
      v16 = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 64) = v16;
      *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
      v17 = *(_OWORD *)(v9 + 88);
      v18 = *(_OWORD *)(v9 + 104);
      *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
      *(_OWORD *)(v8 + 104) = v18;
      *(_OWORD *)(v8 + 88) = v17;
      *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
      *(_BYTE *)(v8 + 152) = *(_BYTE *)(v9 + 152);
      *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 + 160);
      *(_BYTE *)(v8 + 168) = *(_BYTE *)(v9 + 168);
      v19 = *(_OWORD *)(v9 + 192);
      *(_OWORD *)(v8 + 176) = *(_OWORD *)(v9 + 176);
      *(_OWORD *)(v8 + 192) = v19;
      *(_BYTE *)(v8 + 208) = *(_BYTE *)(v9 + 208);
      v20 = v10[11];
      v21 = (void *)(v8 + v20);
      v22 = (const void *)(v9 + v20);
      v23 = sub_214424308();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v41 = v10[12];
      v42 = v8 + v41;
      v43 = v9 + v41;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
      *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
      v44 = v10[14];
      v45 = (void *)(v8 + v44);
      v46 = (const void *)(v9 + v44);
      v47 = sub_214424C68();
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v48 + 32))(v45, v46, v47);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      v50 = v10[15];
      v51 = v8 + v50;
      v52 = v9 + v50;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *(_WORD *)(v51 + 8) = *(_WORD *)(v52 + 8);
      *(_QWORD *)(v8 + v10[16]) = *(_QWORD *)(v9 + v10[16]);
      *(_QWORD *)(v8 + v10[17]) = *(_QWORD *)(v9 + v10[17]);
      v53 = v10[18];
      v54 = v8 + v53;
      v55 = v9 + v53;
      v56 = *(_OWORD *)(v55 + 48);
      *(_OWORD *)(v54 + 32) = *(_OWORD *)(v55 + 32);
      *(_OWORD *)(v54 + 48) = v56;
      *(_QWORD *)(v54 + 64) = *(_QWORD *)(v55 + 64);
      v57 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *(_OWORD *)(v54 + 16) = v57;
      v58 = v10[19];
      v59 = v8 + v58;
      v60 = v9 + v58;
      *(_QWORD *)(v59 + 64) = *(_QWORD *)(v60 + 64);
      v61 = *(_OWORD *)(v60 + 48);
      *(_OWORD *)(v59 + 32) = *(_OWORD *)(v60 + 32);
      *(_OWORD *)(v59 + 48) = v61;
      v62 = *(_OWORD *)(v60 + 16);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 16) = v62;
      v63 = v10[20];
      v64 = v8 + v63;
      v65 = v9 + v63;
      v66 = *(_OWORD *)(v65 + 48);
      *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
      *(_OWORD *)(v64 + 48) = v66;
      *(_QWORD *)(v64 + 64) = *(_QWORD *)(v65 + 64);
      v67 = *(_OWORD *)(v65 + 16);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *(_OWORD *)(v64 + 16) = v67;
      v68 = v10[21];
      v69 = v8 + v68;
      v70 = v9 + v68;
      *(_QWORD *)(v69 + 64) = *(_QWORD *)(v70 + 64);
      v71 = *(_OWORD *)(v70 + 48);
      *(_OWORD *)(v69 + 32) = *(_OWORD *)(v70 + 32);
      *(_OWORD *)(v69 + 48) = v71;
      v72 = *(_OWORD *)(v70 + 16);
      *(_OWORD *)v69 = *(_OWORD *)v70;
      *(_OWORD *)(v69 + 16) = v72;
      v73 = v10[22];
      v74 = v8 + v73;
      v75 = v9 + v73;
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
      v76 = v10[23];
      v77 = v8 + v76;
      v78 = v9 + v76;
      *(_OWORD *)v77 = *(_OWORD *)v78;
      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v78 + 16);
      v79 = v10[24];
      v80 = (_OWORD *)(v8 + v79);
      v81 = (_OWORD *)(v9 + v79);
      v82 = v81[1];
      *v80 = *v81;
      v80[1] = v82;
      v83 = v10[25];
      v84 = (_OWORD *)(v8 + v83);
      v85 = (_OWORD *)(v9 + v83);
      v86 = v85[1];
      *v84 = *v85;
      v84[1] = v86;
      *(_OWORD *)(v8 + v10[26]) = *(_OWORD *)(v9 + v10[26]);
      v87 = v10[27];
      v88 = (_OWORD *)(v8 + v87);
      v89 = (_OWORD *)(v9 + v87);
      v90 = v89[1];
      *v88 = *v89;
      v88[1] = v90;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      a3 = v200;
      goto LABEL_76;
    }
LABEL_7:
    v26 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_76;
  }
  if (v14)
  {
    sub_2141DD370(v8, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v8 + 40) == 255)
    goto LABEL_14;
  if (*(unsigned __int8 *)(v9 + 40) == 255 || a1 != a2)
  {
    sub_21420D6FC(v8);
LABEL_14:
    v28 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v28;
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
  }
  *(_BYTE *)(v8 + 41) = *(_BYTE *)(v9 + 41);
  v29 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = v29;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  if (*(unsigned __int8 *)(v8 + 128) == 255)
  {
LABEL_19:
    v30 = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v8 + 104) = v30;
    *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v9 + 128) == 255 || a1 != a2)
  {
    sub_21420D730(v8 + 88);
    goto LABEL_19;
  }
LABEL_20:
  v201 = a3;
  *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
  *(_BYTE *)(v8 + 152) = *(_BYTE *)(v9 + 152);
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 + 160);
  *(_BYTE *)(v8 + 168) = *(_BYTE *)(v9 + 168);
  v31 = *(_OWORD *)(v9 + 192);
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(v9 + 176);
  *(_OWORD *)(v8 + 192) = v31;
  *(_BYTE *)(v8 + 208) = *(_BYTE *)(v9 + 208);
  v32 = v10[11];
  v33 = (void *)(v8 + v32);
  v34 = (void *)(v9 + v32);
  v35 = sub_214424308();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  v198 = v33;
  LODWORD(v33) = v37(v33, 1, v35);
  v38 = v37(v34, 1, v35);
  if ((_DWORD)v33)
  {
    if (v38)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v40 = v198;
LABEL_30:
      memcpy(v40, v34, v39);
      goto LABEL_33;
    }
    (*(void (**)(void *, void *, uint64_t))(v36 + 32))(v198, v34, v35);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v198, 0, 1, v35);
  }
  else
  {
    if (v38)
    {
      (*(void (**)(void *, uint64_t))(v36 + 8))(v198, v35);
      v39 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v40 = v198;
      goto LABEL_30;
    }
    (*(void (**)(void *, void *, uint64_t))(v36 + 40))(v198, v34, v35);
  }
LABEL_33:
  v91 = v10[12];
  v92 = v8 + v91;
  v93 = v9 + v91;
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
  v94 = v10[14];
  v95 = (void *)(v8 + v94);
  v96 = (void *)(v9 + v94);
  v97 = sub_214424C68();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
  v199 = v95;
  LODWORD(v95) = v99(v95, 1, v97);
  v100 = v99(v96, 1, v97);
  if ((_DWORD)v95)
  {
    if (v100)
    {
      v101 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v102 = v199;
LABEL_38:
      memcpy(v102, v96, v101);
      goto LABEL_41;
    }
    (*(void (**)(void *, void *, uint64_t))(v98 + 32))(v199, v96, v97);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v199, 0, 1, v97);
  }
  else
  {
    if (v100)
    {
      (*(void (**)(void *, uint64_t))(v98 + 8))(v199, v97);
      v101 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v102 = v199;
      goto LABEL_38;
    }
    (*(void (**)(void *, void *, uint64_t))(v98 + 40))(v199, v96, v97);
  }
LABEL_41:
  v103 = v10[15];
  v104 = v8 + v103;
  v105 = v9 + v103;
  *(_QWORD *)(v8 + v103) = *(_QWORD *)(v9 + v103);
  swift_release();
  *(_BYTE *)(v104 + 8) = *(_BYTE *)(v105 + 8);
  *(_BYTE *)(v104 + 9) = *(_BYTE *)(v105 + 9);
  *(_QWORD *)(v8 + v10[16]) = *(_QWORD *)(v9 + v10[16]);
  *(_QWORD *)(v8 + v10[17]) = *(_QWORD *)(v9 + v10[17]);
  v106 = v10[18];
  v107 = v8 + v106;
  v108 = v9 + v106;
  if (*(_QWORD *)(v8 + v106 + 24))
  {
    if (*(_QWORD *)(v108 + 24))
    {
      v109 = *(_BYTE *)(v108 + 16);
      v110 = *(_QWORD *)v107;
      v111 = *(_QWORD *)(v107 + 8);
      v112 = *(_BYTE *)(v107 + 16);
      *(_OWORD *)v107 = *(_OWORD *)v108;
      *(_BYTE *)(v107 + 16) = v109;
      sub_2141ED0BC(v110, v111, v112);
      *(_QWORD *)(v107 + 24) = *(_QWORD *)(v108 + 24);
      swift_bridgeObjectRelease();
      v113 = *(_BYTE *)(v108 + 48);
      v114 = *(_QWORD *)(v107 + 32);
      v115 = *(_QWORD *)(v107 + 40);
      *(_OWORD *)(v107 + 32) = *(_OWORD *)(v108 + 32);
      v116 = *(_BYTE *)(v107 + 48);
      *(_BYTE *)(v107 + 48) = v113;
      sub_2141EF1B0(v114, v115, v116);
      *(_OWORD *)(v107 + 56) = *(_OWORD *)(v108 + 56);
      goto LABEL_46;
    }
    sub_21420D764(v107);
  }
  v117 = *(_OWORD *)(v108 + 48);
  *(_OWORD *)(v107 + 32) = *(_OWORD *)(v108 + 32);
  *(_OWORD *)(v107 + 48) = v117;
  *(_QWORD *)(v107 + 64) = *(_QWORD *)(v108 + 64);
  v118 = *(_OWORD *)(v108 + 16);
  *(_OWORD *)v107 = *(_OWORD *)v108;
  *(_OWORD *)(v107 + 16) = v118;
LABEL_46:
  v119 = v10[19];
  v120 = v8 + v119;
  v121 = v9 + v119;
  if (*(_QWORD *)(v8 + v119 + 24))
  {
    if (*(_QWORD *)(v121 + 24))
    {
      v122 = *(_BYTE *)(v121 + 16);
      v123 = *(_QWORD *)v120;
      v124 = *(_QWORD *)(v120 + 8);
      v125 = *(_BYTE *)(v120 + 16);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *(_BYTE *)(v120 + 16) = v122;
      sub_2141ED0BC(v123, v124, v125);
      *(_QWORD *)(v120 + 24) = *(_QWORD *)(v121 + 24);
      swift_bridgeObjectRelease();
      v126 = *(_BYTE *)(v121 + 48);
      v127 = *(_QWORD *)(v120 + 32);
      v128 = *(_QWORD *)(v120 + 40);
      *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
      v129 = *(_BYTE *)(v120 + 48);
      *(_BYTE *)(v120 + 48) = v126;
      sub_2141EF1B0(v127, v128, v129);
      *(_OWORD *)(v120 + 56) = *(_OWORD *)(v121 + 56);
      goto LABEL_51;
    }
    sub_21420D764(v120);
  }
  v130 = *(_OWORD *)(v121 + 48);
  *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
  *(_OWORD *)(v120 + 48) = v130;
  *(_QWORD *)(v120 + 64) = *(_QWORD *)(v121 + 64);
  v131 = *(_OWORD *)(v121 + 16);
  *(_OWORD *)v120 = *(_OWORD *)v121;
  *(_OWORD *)(v120 + 16) = v131;
LABEL_51:
  v132 = v10[20];
  v133 = v8 + v132;
  v134 = v9 + v132;
  if (*(_QWORD *)(v8 + v132 + 24))
  {
    if (*(_QWORD *)(v134 + 24))
    {
      v135 = *(_BYTE *)(v134 + 16);
      v136 = *(_QWORD *)v133;
      v137 = *(_QWORD *)(v133 + 8);
      v138 = *(_BYTE *)(v133 + 16);
      *(_OWORD *)v133 = *(_OWORD *)v134;
      *(_BYTE *)(v133 + 16) = v135;
      sub_2141ED0BC(v136, v137, v138);
      *(_QWORD *)(v133 + 24) = *(_QWORD *)(v134 + 24);
      swift_bridgeObjectRelease();
      v139 = *(_BYTE *)(v134 + 48);
      v140 = *(_QWORD *)(v133 + 32);
      v141 = *(_QWORD *)(v133 + 40);
      *(_OWORD *)(v133 + 32) = *(_OWORD *)(v134 + 32);
      v142 = *(_BYTE *)(v133 + 48);
      *(_BYTE *)(v133 + 48) = v139;
      sub_2141EF1B0(v140, v141, v142);
      *(_OWORD *)(v133 + 56) = *(_OWORD *)(v134 + 56);
      goto LABEL_56;
    }
    sub_21420D764(v133);
  }
  v143 = *(_OWORD *)(v134 + 48);
  *(_OWORD *)(v133 + 32) = *(_OWORD *)(v134 + 32);
  *(_OWORD *)(v133 + 48) = v143;
  *(_QWORD *)(v133 + 64) = *(_QWORD *)(v134 + 64);
  v144 = *(_OWORD *)(v134 + 16);
  *(_OWORD *)v133 = *(_OWORD *)v134;
  *(_OWORD *)(v133 + 16) = v144;
LABEL_56:
  v145 = v10[21];
  v146 = v8 + v145;
  v147 = v9 + v145;
  if (*(_QWORD *)(v8 + v145 + 24))
  {
    if (*(_QWORD *)(v147 + 24))
    {
      v148 = *(_BYTE *)(v147 + 16);
      v149 = *(_QWORD *)v146;
      v150 = *(_QWORD *)(v146 + 8);
      v151 = *(_BYTE *)(v146 + 16);
      *(_OWORD *)v146 = *(_OWORD *)v147;
      *(_BYTE *)(v146 + 16) = v148;
      sub_2141ED0BC(v149, v150, v151);
      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
      swift_bridgeObjectRelease();
      v152 = *(_BYTE *)(v147 + 48);
      v153 = *(_QWORD *)(v146 + 32);
      v154 = *(_QWORD *)(v146 + 40);
      *(_OWORD *)(v146 + 32) = *(_OWORD *)(v147 + 32);
      v155 = *(_BYTE *)(v146 + 48);
      *(_BYTE *)(v146 + 48) = v152;
      sub_2141EF1B0(v153, v154, v155);
      *(_OWORD *)(v146 + 56) = *(_OWORD *)(v147 + 56);
      goto LABEL_61;
    }
    sub_21420D764(v146);
  }
  v156 = *(_OWORD *)(v147 + 48);
  *(_OWORD *)(v146 + 32) = *(_OWORD *)(v147 + 32);
  *(_OWORD *)(v146 + 48) = v156;
  *(_QWORD *)(v146 + 64) = *(_QWORD *)(v147 + 64);
  v157 = *(_OWORD *)(v147 + 16);
  *(_OWORD *)v146 = *(_OWORD *)v147;
  *(_OWORD *)(v146 + 16) = v157;
LABEL_61:
  v158 = v10[22];
  v159 = v8 + v158;
  v160 = v9 + v158;
  *(_OWORD *)v159 = *(_OWORD *)v160;
  *(_QWORD *)(v159 + 16) = *(_QWORD *)(v160 + 16);
  v161 = v10[23];
  v162 = v8 + v161;
  v163 = v9 + v161;
  *(_OWORD *)v162 = *(_OWORD *)v163;
  *(_QWORD *)(v162 + 16) = *(_QWORD *)(v163 + 16);
  v164 = v10[24];
  v165 = v8 + v164;
  v166 = v9 + v164;
  a3 = v201;
  if (*(_QWORD *)(v8 + v164 + 24))
  {
    if (*(_QWORD *)(v166 + 24))
    {
      v167 = *(_BYTE *)(v166 + 16);
      v168 = *(_QWORD *)v165;
      v169 = *(_QWORD *)(v165 + 8);
      v170 = *(_BYTE *)(v165 + 16);
      *(_OWORD *)v165 = *(_OWORD *)v166;
      *(_BYTE *)(v165 + 16) = v167;
      sub_2141ED0BC(v168, v169, v170);
      *(_QWORD *)(v165 + 24) = *(_QWORD *)(v166 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    sub_21420D798(v165);
  }
  v171 = *(_OWORD *)(v166 + 16);
  *(_OWORD *)v165 = *(_OWORD *)v166;
  *(_OWORD *)(v165 + 16) = v171;
LABEL_66:
  v172 = v10[25];
  v173 = v8 + v172;
  v174 = v9 + v172;
  if (!*(_QWORD *)(v8 + v172 + 24))
  {
LABEL_70:
    v179 = *(_OWORD *)(v174 + 16);
    *(_OWORD *)v173 = *(_OWORD *)v174;
    *(_OWORD *)(v173 + 16) = v179;
    goto LABEL_71;
  }
  if (!*(_QWORD *)(v174 + 24))
  {
    sub_21420D798(v173);
    goto LABEL_70;
  }
  v175 = *(_BYTE *)(v174 + 16);
  v176 = *(_QWORD *)v173;
  v177 = *(_QWORD *)(v173 + 8);
  v178 = *(_BYTE *)(v173 + 16);
  *(_OWORD *)v173 = *(_OWORD *)v174;
  *(_BYTE *)(v173 + 16) = v175;
  sub_2141ED0BC(v176, v177, v178);
  *(_QWORD *)(v173 + 24) = *(_QWORD *)(v174 + 24);
  swift_bridgeObjectRelease();
LABEL_71:
  v180 = v10[26];
  v181 = (_QWORD *)(v8 + v180);
  v182 = (uint64_t *)(v9 + v180);
  v184 = *v182;
  v183 = v182[1];
  *v181 = v184;
  v181[1] = v183;
  swift_bridgeObjectRelease();
  v185 = v10[27];
  v186 = v8 + v185;
  v187 = v9 + v185;
  if (*(_QWORD *)(v186 + 24))
  {
    if (*(_QWORD *)(v187 + 24))
      _s6Charts15AnyChartContentVwxx_0(v186);
    else
      sub_21420D92C(v186);
  }
  v188 = *(_OWORD *)(v187 + 16);
  *(_OWORD *)v186 = *(_OWORD *)v187;
  *(_OWORD *)(v186 + 16) = v188;
LABEL_76:
  v189 = a3[9];
  v190 = a3[10];
  v191 = a1 + v189;
  v192 = a2 + v189;
  v193 = *(_OWORD *)(v192 + 16);
  *(_OWORD *)v191 = *(_OWORD *)v192;
  *(_OWORD *)(v191 + 16) = v193;
  *(_BYTE *)(v191 + 32) = *(_BYTE *)(v192 + 32);
  v194 = a1 + v190;
  v195 = a2 + v190;
  v196 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v196 - 8) + 40))(v194, v195, v196);
  return a1;
}

uint64_t sub_2142FC284()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FC290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2141D8BF8(qword_254D69B70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_214424308();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_2142FC334()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FC340(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = sub_2141D8BF8(qword_254D69B70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_214424308();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for RectanglesRenderer(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F13038);
}

void sub_2142FC3F4()
{
  unint64_t v0;
  unint64_t v1;

  sub_21420E5A4(319, &qword_253F13928, (void (*)(uint64_t))type metadata accessor for ChartContentRenderContext.Environment);
  if (v0 <= 0x3F)
  {
    sub_214424308();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *sub_2142FC4B4(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *__dst;
  uint64_t v32;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    v11 = *((_BYTE *)a2 + 40);
    sub_2141FE3EC(v7, v8, v9, v10, v11);
    v4[1] = v7;
    v4[2] = v8;
    v4[3] = v9;
    v4[4] = v10;
    *((_BYTE *)v4 + 40) = v11;
    v12 = a3[6];
    v13 = (char *)v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = *((_BYTE *)a2 + v12 + 40);
    if ((v15 & 1) != 0)
    {
      v16 = *(_OWORD *)(v14 + 24);
      *(_OWORD *)(v13 + 24) = v16;
      (**(void (***)(char *, uint64_t))(v16 - 8))(v13, v14);
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain();
    }
    v13[40] = v15;
    v13[41] = *(_BYTE *)(v14 + 41);
    *((_QWORD *)v13 + 6) = *(_QWORD *)(v14 + 48);
    *((_QWORD *)v13 + 7) = *(_QWORD *)(v14 + 56);
    v18 = *(_QWORD *)(v14 + 72);
    *((_QWORD *)v13 + 8) = *(_QWORD *)(v14 + 64);
    *((_QWORD *)v13 + 9) = v18;
    *((_OWORD *)v13 + 5) = *(_OWORD *)(v14 + 80);
    v19 = type metadata accessor for SgShapeStyle();
    v20 = *(int *)(v19 + 32);
    __dst = &v13[v20];
    v32 = v19;
    v21 = (const void *)(v14 + v20);
    v22 = sub_214424C68();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    if (v24(v21, 1, v22))
    {
      v25 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(__dst, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    v26 = *(int *)(v32 + 36);
    v27 = &v13[v26];
    v28 = v14 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_WORD *)v27 + 4) = *(_WORD *)(v28 + 8);
    v29 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)v4 + v29) = *(uint64_t *)((char *)a2 + v29);
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  swift_retain();
  return v4;
}

uint64_t sub_2142FC6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_2141EEF3C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 24);
  if ((*(_BYTE *)(v4 + 40) & 1) != 0)
    _s6Charts15AnyChartContentVwxx_0(v4);
  else
    swift_release();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for SgShapeStyle() + 32);
  v6 = sub_214424C68();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_release();
}

uint64_t sub_2142FC778(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__dst;
  int *v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  sub_2141FE3EC(v6, v7, v8, v9, v10);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(a2 + v11 + 40);
  v30 = a3;
  if ((v14 & 1) != 0)
  {
    v15 = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 24) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v12, v13);
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    swift_retain();
  }
  *(_BYTE *)(v12 + 40) = v14;
  *(_BYTE *)(v12 + 41) = *(_BYTE *)(v13 + 41);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
  v16 = *(_QWORD *)(v13 + 72);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v12 + 72) = v16;
  *(_OWORD *)(v12 + 80) = *(_OWORD *)(v13 + 80);
  v17 = type metadata accessor for SgShapeStyle();
  v18 = *(int *)(v17 + 32);
  __dst = (void *)(v12 + v18);
  v19 = (const void *)(v13 + v18);
  v20 = sub_214424C68();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  if (v22(v19, 1, v20))
  {
    v23 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  v24 = *(int *)(v17 + 36);
  v25 = v12 + v24;
  v26 = v13 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_WORD *)(v25 + 8) = *(_WORD *)(v26 + 8);
  v27 = v30[8];
  *(_QWORD *)(a1 + v30[7]) = *(_QWORD *)(a2 + v30[7]);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  *(_BYTE *)(a1 + v30[9]) = *(_BYTE *)(a2 + v30[9]);
  swift_retain();
  return a1;
}

uint64_t sub_2142FC958(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int *v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  sub_2141FE3EC(v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  sub_2141EEF3C(v11, v12, v13, v14, v15);
  v34 = a3;
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  if (a1 != a2)
  {
    sub_21420D6FC(a1 + v16);
    if ((*(_BYTE *)(v18 + 40) & 1) != 0)
    {
      v19 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v17 + 24) = v19;
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))(v17, v18);
      *(_BYTE *)(v17 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_BYTE *)(v17 + 40) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(v17 + 41) = *(_BYTE *)(v18 + 41);
  *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
  *(_DWORD *)(v17 + 56) = *(_DWORD *)(v18 + 56);
  *(_DWORD *)(v17 + 60) = *(_DWORD *)(v18 + 60);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(v18 + 80);
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v18 + 88);
  v33 = type metadata accessor for SgShapeStyle();
  v20 = *(int *)(v33 + 32);
  v21 = (void *)(v17 + v20);
  v22 = (void *)(v18 + v20);
  v23 = sub_214424C68();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      goto LABEL_11;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_10;
  }
  if (v27)
  {
LABEL_10:
    v28 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_11:
  v29 = *(int *)(v33 + 36);
  v30 = v17 + v29;
  v31 = v18 + v29;
  *(_QWORD *)(v17 + v29) = *(_QWORD *)v31;
  swift_retain();
  swift_release();
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_BYTE *)(v30 + 9) = *(_BYTE *)(v31 + 9);
  *(_QWORD *)(a1 + v34[7]) = *(_QWORD *)(a2 + v34[7]);
  *(_QWORD *)(a1 + v34[8]) = *(_QWORD *)(a2 + v34[8]);
  *(_BYTE *)(a1 + v34[9]) = *(_BYTE *)(a2 + v34[9]);
  return a1;
}

uint64_t sub_2142FCBDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 25) = *(_OWORD *)(a2 + v6 + 25);
  *(_BYTE *)(v7 + 41) = *(_BYTE *)(a2 + v6 + 41);
  v10 = *(_OWORD *)(a2 + v6 + 64);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
  *(_OWORD *)(v7 + 64) = v10;
  v11 = *(_QWORD *)(a2 + v6 + 88);
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(a2 + v6 + 80);
  *(_QWORD *)(v7 + 88) = v11;
  v12 = type metadata accessor for SgShapeStyle();
  v13 = *(int *)(v12 + 32);
  v14 = (void *)(v7 + v13);
  v15 = (const void *)(v8 + v13);
  v16 = sub_214424C68();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = *(int *)(v12 + 36);
  v20 = v7 + v19;
  v21 = v8 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_WORD *)(v20 + 8) = *(_WORD *)(v21 + 8);
  v22 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_2142FCD44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int *v34;

  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v6;
  v13 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v7;
  sub_2141EEF3C(v8, v9, v10, v11, v13);
  v34 = a3;
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  if (a1 != a2)
  {
    sub_21420D6FC(a1 + v14);
    v17 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_OWORD *)(v15 + 25) = *(_OWORD *)(v16 + 25);
  }
  *(_BYTE *)(v15 + 41) = *(_BYTE *)(v16 + 41);
  v18 = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
  *(_QWORD *)(v15 + 56) = v18;
  *(_QWORD *)(v15 + 64) = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(v16 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(v16 + 80);
  v33 = type metadata accessor for SgShapeStyle();
  v19 = *(int *)(v33 + 32);
  v20 = (void *)(v15 + v19);
  v21 = (void *)(v16 + v19);
  v22 = sub_214424C68();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_8;
  }
  if (v26)
  {
LABEL_8:
    v27 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_9:
  v28 = *(int *)(v33 + 36);
  v29 = v15 + v28;
  v30 = v16 + v28;
  *(_QWORD *)v29 = *(_QWORD *)(v16 + v28);
  swift_release();
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_BYTE *)(v29 + 9) = *(_BYTE *)(v30 + 9);
  v31 = v34[8];
  *(_QWORD *)(a1 + v34[7]) = *(_QWORD *)(a2 + v34[7]);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  *(_BYTE *)(a1 + v34[9]) = *(_BYTE *)(a2 + v34[9]);
  return a1;
}

uint64_t sub_2142FCF48()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FCF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for SgShapeStyle();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t sub_2142FCFD0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FCFDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SgShapeStyle();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for SgPath(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F156B0);
}

uint64_t sub_2142FD06C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SgShapeStyle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2142FD0F8(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    v6 = *((_OWORD *)a2 + 3);
    a1[2] = *((_OWORD *)a2 + 2);
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_214424308();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_2142FD188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_214424308();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *sub_2142FD1C0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  return a1;
}

_QWORD *sub_2142FD224(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_2142FD2B8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_OWORD *sub_2142FD31C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_2142FD380()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FD38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_214424308();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_2142FD3CC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FD3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_214424308();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for SgClipRect(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F14240);
}

uint64_t sub_2142FD430()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214424308();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2142FD4A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[6];
    v9 = (_OWORD *)((char *)a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for SgClipRect(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_2141D8BF8(&qword_253F14280);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v10[1];
      *v9 = *v10;
      v9[1] = v16;
      v17 = v10[3];
      v9[2] = v10[2];
      v9[3] = v17;
      v18 = *(int *)(v11 + 24);
      v19 = (char *)v9 + v18;
      v20 = (char *)v10 + v18;
      v21 = sub_214424308();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v22 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)v4 + v22) = *(_QWORD *)((char *)a2 + v22);
    v23 = a3[10];
    *(_QWORD *)((char *)v4 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_2142FD600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for SgClipRect(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = v4 + *(int *)(v5 + 24);
    v7 = sub_214424308();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_2142FD68C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, uint64_t, uint64_t);
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for SgClipRect(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_2141D8BF8(&qword_253F14280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v9[1];
    *v8 = *v9;
    v8[1] = v14;
    v15 = v9[3];
    v8[2] = v9[2];
    v8[3] = v15;
    v16 = *(int *)(v10 + 24);
    v17 = (char *)v8 + v16;
    v18 = (char *)v9 + v16;
    v19 = sub_214424308();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v20 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  v21 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_2142FD7BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for SgClipRect(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      v7[2] = v8[2];
      v7[3] = v8[3];
      v7[4] = v8[4];
      v7[5] = v8[5];
      v7[6] = v8[6];
      v7[7] = v8[7];
      v22 = *(int *)(v9 + 24);
      v23 = (char *)v7 + v22;
      v24 = (char *)v8 + v22;
      v25 = sub_214424308();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
      goto LABEL_7;
    }
    sub_2141DD370((uint64_t)v7, type metadata accessor for SgClipRect);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v20 = sub_2141D8BF8(&qword_253F14280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v14 = *((_OWORD *)v8 + 1);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *((_OWORD *)v7 + 1) = v14;
  v15 = *((_OWORD *)v8 + 3);
  *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
  *((_OWORD *)v7 + 3) = v15;
  v16 = *(int *)(v9 + 24);
  v17 = (char *)v7 + v16;
  v18 = (char *)v8 + v16;
  v19 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *sub_2142FD9AC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for SgClipRect(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_2141D8BF8(&qword_253F14280);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v13 = v8[3];
    v7[2] = v8[2];
    v7[3] = v13;
    v14 = *(int *)(v9 + 24);
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = sub_214424308();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v18 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v19 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
  return a1;
}

_QWORD *sub_2142FDAC8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_OWORD *, uint64_t, uint64_t);
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for SgClipRect(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      v24 = v9[1];
      *v8 = *v9;
      v8[1] = v24;
      v25 = v9[3];
      v8[2] = v9[2];
      v8[3] = v25;
      v26 = *(int *)(v10 + 24);
      v27 = (char *)v8 + v26;
      v28 = (char *)v9 + v26;
      v29 = sub_214424308();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
      goto LABEL_7;
    }
    sub_2141DD370((uint64_t)v8, type metadata accessor for SgClipRect);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v21 = sub_2141D8BF8(&qword_253F14280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v15 = v9[1];
  *v8 = *v9;
  v8[1] = v15;
  v16 = v9[3];
  v8[2] = v9[2];
  v8[3] = v16;
  v17 = *(int *)(v10 + 24);
  v18 = (char *)v8 + v17;
  v19 = (char *)v9 + v17;
  v20 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v22 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v22) = *(_QWORD *)((char *)a2 + v22);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t sub_2142FDC6C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FDC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2141D8BF8(&qword_253F14280);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_2142FDCF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FDD04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_2141D8BF8(&qword_253F14280);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SgGroup(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15860);
}

void sub_2142FDD90()
{
  unint64_t v0;

  sub_21420E5A4(319, qword_253F14288, (void (*)(uint64_t))type metadata accessor for SgClipRect);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for SgAccessibilityDataField(uint64_t a1)
{
  return sub_2141EF5D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_OWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
}

uint64_t *initializeWithCopy for SgAccessibilityDataField(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  sub_21420B7DC(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  return a1;
}

uint64_t assignWithCopy for SgAccessibilityDataField(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v27 = a2[9];
  v28 = a2[10];
  v29 = a2[11];
  v30 = a2[12];
  v31 = a2[13];
  v32 = a2[14];
  v33 = a2[15];
  v34 = a2[16];
  v35 = a2[17];
  v36 = a2[18];
  sub_21420B7DC(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v28;
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v34;
  *(_QWORD *)(a1 + 136) = v35;
  *(_QWORD *)(a1 + 144) = v36;
  sub_2141EF5D4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  return a1;
}

__n128 initializeWithTake for SgAccessibilityDataField(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for SgAccessibilityDataField(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = v3;
  sub_2141EF5D4(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgAccessibilityDataField(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)a1 >> 3;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SgAccessibilityDataField(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 8 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

int8x16_t sub_2142FE2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t result;

  v2 = *(_QWORD *)(a1 + 24) & 1;
  v3 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(a1 + 96) & 1;
  v5 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *(_QWORD *)a1 &= 7uLL;
  *(_QWORD *)(a1 + 24) = v2;
  *(int8x16_t *)(a1 + 56) = vandq_s8(*(int8x16_t *)(a1 + 56), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 96) = v4;
  result = vandq_s8(*(int8x16_t *)(a1 + 128), (int8x16_t)xmmword_214427820);
  *(int8x16_t *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = v5;
  return result;
}

ValueMetadata *type metadata accessor for SgAccessibilityDataField()
{
  return &type metadata for SgAccessibilityDataField;
}

_QWORD *sub_2142FE31C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *__dst;
  uint64_t v32;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_QWORD *)(a1 + 48) = a2[6];
    v8 = a3[11];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_214424308();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[12];
    v13 = (char *)v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = *((_BYTE *)a2 + v12 + 40);
    if ((v15 & 1) != 0)
    {
      v16 = *(_OWORD *)(v14 + 24);
      *(_OWORD *)(v13 + 24) = v16;
      (**(void (***)(char *, uint64_t))(v16 - 8))(v13, v14);
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain();
    }
    v13[40] = v15;
    v13[41] = *(_BYTE *)(v14 + 41);
    *((_QWORD *)v13 + 6) = *(_QWORD *)(v14 + 48);
    *((_QWORD *)v13 + 7) = *(_QWORD *)(v14 + 56);
    v18 = *(_QWORD *)(v14 + 72);
    *((_QWORD *)v13 + 8) = *(_QWORD *)(v14 + 64);
    *((_QWORD *)v13 + 9) = v18;
    *((_OWORD *)v13 + 5) = *(_OWORD *)(v14 + 80);
    v19 = type metadata accessor for SgShapeStyle();
    v20 = *(int *)(v19 + 32);
    __dst = &v13[v20];
    v32 = v19;
    v21 = (const void *)(v14 + v20);
    v22 = sub_214424C68();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    if (v24(v21, 1, v22))
    {
      v25 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(__dst, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    v26 = *(int *)(v32 + 36);
    v27 = &v13[v26];
    v28 = v14 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_WORD *)v27 + 4) = *(_WORD *)(v28 + 8);
    v29 = a3[14];
    *(_OWORD *)((char *)v4 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
    *((_BYTE *)v4 + v29) = *((_BYTE *)a2 + v29);
    *(_QWORD *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
  }
  swift_retain();
  return v4;
}

uint64_t sub_2142FE528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + *(int *)(a2 + 44);
  v5 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 48);
  if ((*(_BYTE *)(v6 + 40) & 1) != 0)
    _s6Charts15AnyChartContentVwxx_0(v6);
  else
    swift_release();
  swift_bridgeObjectRelease();
  v7 = v6 + *(int *)(type metadata accessor for SgShapeStyle() + 32);
  v8 = sub_214424C68();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_release();
}

uint64_t sub_2142FE5FC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__dst;
  uint64_t v30;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[11];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[12];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(a2 + v11 + 40);
  if ((v14 & 1) != 0)
  {
    v15 = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 24) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v12, v13);
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    swift_retain();
  }
  *(_BYTE *)(v12 + 40) = v14;
  *(_BYTE *)(v12 + 41) = *(_BYTE *)(v13 + 41);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
  v16 = *(_QWORD *)(v13 + 72);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v12 + 72) = v16;
  *(_OWORD *)(v12 + 80) = *(_OWORD *)(v13 + 80);
  v17 = type metadata accessor for SgShapeStyle();
  v18 = *(int *)(v17 + 32);
  __dst = (void *)(v12 + v18);
  v30 = v17;
  v19 = (const void *)(v13 + v18);
  v20 = sub_214424C68();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  if (v22(v19, 1, v20))
  {
    v23 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  v24 = *(int *)(v30 + 36);
  v25 = v12 + v24;
  v26 = v13 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_WORD *)(v25 + 8) = *(_WORD *)(v26 + 8);
  v27 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  swift_retain();
  return a1;
}

_QWORD *sub_2142FE7E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v30;
  int *v31;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  v6 = a3[11];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v31 = a3;
  v10 = a3[12];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  if (a1 != a2)
  {
    sub_21420D6FC((uint64_t)a1 + v10);
    if ((v12[40] & 1) != 0)
    {
      v13 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 3) = v13;
      *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
      (**(void (***)(char *, char *))(v13 - 8))(v11, v12);
      v11[40] = 1;
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v11[40] = 0;
      swift_retain();
    }
  }
  v11[41] = v12[41];
  *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
  *((_DWORD *)v11 + 14) = *((_DWORD *)v12 + 14);
  *((_DWORD *)v11 + 15) = *((_DWORD *)v12 + 15);
  *((_QWORD *)v11 + 8) = *((_QWORD *)v12 + 8);
  *((_QWORD *)v11 + 9) = *((_QWORD *)v12 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 10) = *((_QWORD *)v12 + 10);
  *((_QWORD *)v11 + 11) = *((_QWORD *)v12 + 11);
  v30 = type metadata accessor for SgShapeStyle();
  v14 = *(int *)(v30 + 32);
  v15 = &v11[v14];
  v16 = &v12[v14];
  v17 = sub_214424C68();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_10;
  }
  if (v21)
  {
LABEL_10:
    v22 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_11:
  v23 = *(int *)(v30 + 36);
  v24 = &v11[v23];
  v25 = &v12[v23];
  *(_QWORD *)&v11[v23] = *(_QWORD *)v25;
  swift_retain();
  swift_release();
  v24[8] = v25[8];
  v24[9] = v25[9];
  v26 = v31[13];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  *((_BYTE *)a1 + v31[14]) = *((_BYTE *)a2 + v31[14]);
  *(_QWORD *)((char *)a1 + v31[15]) = *(_QWORD *)((char *)a2 + v31[15]);
  return a1;
}

uint64_t sub_2142FEA90(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[11];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[12];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(a2 + v11 + 16);
  *(_OWORD *)v12 = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a2 + v11 + 25);
  *(_BYTE *)(v12 + 41) = *(_BYTE *)(a2 + v11 + 41);
  v15 = *(_OWORD *)(a2 + v11 + 64);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(a2 + v11 + 48);
  *(_OWORD *)(v12 + 64) = v15;
  v16 = *(_QWORD *)(a2 + v11 + 88);
  *(_QWORD *)(v12 + 80) = *(_QWORD *)(a2 + v11 + 80);
  *(_QWORD *)(v12 + 88) = v16;
  v17 = type metadata accessor for SgShapeStyle();
  v18 = *(int *)(v17 + 32);
  v19 = (void *)(v12 + v18);
  v20 = (const void *)(v13 + v18);
  v21 = sub_214424C68();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = *(int *)(v17 + 36);
  v25 = v12 + v24;
  v26 = v13 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_WORD *)(v25 + 8) = *(_WORD *)(v26 + 8);
  v27 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_2142FEC1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int *v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = a3[11];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v30 = a3;
  v10 = a3[12];
  v11 = a1 + v10;
  v12 = a2 + v10;
  if (a1 != a2)
  {
    sub_21420D6FC(a1 + v10);
    v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v13;
    *(_OWORD *)(v11 + 25) = *(_OWORD *)(v12 + 25);
  }
  *(_BYTE *)(v11 + 41) = *(_BYTE *)(v12 + 41);
  v14 = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 56) = v14;
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
  v29 = type metadata accessor for SgShapeStyle();
  v15 = *(int *)(v29 + 32);
  v16 = (void *)(v11 + v15);
  v17 = (void *)(v12 + v15);
  v18 = sub_214424C68();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_8;
  }
  if (v22)
  {
LABEL_8:
    v23 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_9:
  v24 = *(int *)(v29 + 36);
  v25 = v11 + v24;
  v26 = v12 + v24;
  *(_QWORD *)v25 = *(_QWORD *)(v12 + v24);
  swift_release();
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(_BYTE *)(v25 + 9) = *(_BYTE *)(v26 + 9);
  v27 = v30[14];
  *(_OWORD *)(a1 + v30[13]) = *(_OWORD *)(a2 + v30[13]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  *(_QWORD *)(a1 + v30[15]) = *(_QWORD *)(a2 + v30[15]);
  return a1;
}

uint64_t sub_2142FEE40()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FEE4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  v6 = sub_214424308();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for SgShapeStyle();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(unsigned __int8 *)(a1 + a3[14]);
  if (v12 >= 2)
    return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_2142FEF00()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142FEF0C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_214424308();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for SgShapeStyle();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[14]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for SgSector(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15A18);
}

uint64_t sub_2142FEFC0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_214424308();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SgShapeStyle();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

double sub_2142FF078@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  char v26;

  sub_214357DDC(*(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v21 = a1;
    *(_QWORD *)&v25[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2141D412C(0, v4, 0);
    v5 = *(_QWORD *)&v25[0];
    v6 = (uint64_t *)(v3 + 64);
    do
    {
      v7 = *(v6 - 3);
      v8 = *(v6 - 2);
      v9 = *(v6 - 1);
      v10 = *v6;
      v11 = (~v9 & 0x7FF0000000000000) != 0 && (~*v6 & 0x7FF0000000000000) != 0;
      v12 = (~*(v6 - 2) & 0x7FF0000000000000) != 0 && v11;
      v13 = (~*(v6 - 3) & 0x7FF0000000000000) != 0 && v12;
      *(_QWORD *)&v25[0] = v5;
      v15 = *(_QWORD *)(v5 + 16);
      v14 = *(_QWORD *)(v5 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_2141D412C((char *)(v14 > 1), v15 + 1, 1);
        v5 = *(_QWORD *)&v25[0];
      }
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v16 = v5 + 40 * v15;
      *(_QWORD *)(v16 + 32) = v7;
      *(_QWORD *)(v16 + 40) = v8;
      *(_QWORD *)(v16 + 48) = v9;
      *(_QWORD *)(v16 + 56) = v10;
      *(_BYTE *)(v16 + 64) = v13;
      v6 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a1 = v21;
  }
  v17 = v23;
  v18 = v24;
  sub_2142AB2FC((uint64_t)v22, v23);
  sub_214358180(v5, v17, v18, (uint64_t)v25);
  swift_bridgeObjectRelease();
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v22);
  result = *(double *)v25;
  v20 = v25[1];
  *(_OWORD *)a1 = v25[0];
  *(_OWORD *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 32) = v26;
  return result;
}

uint64_t sub_2142FF218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    result = swift_bridgeObjectRetain();
    v5 = (uint64_t *)(v2 + 56);
    v6 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 16);
      v8 = v7 + 2;
      if (__OFADD__(v7, 2))
        break;
      v9 = *(v5 - 2);
      v10 = *v5;
      result = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)result || (v11 = *(_QWORD *)(v6 + 24), v12 = v11 >> 1, (uint64_t)(v11 >> 1) < v8))
      {
        if (v7 <= v8)
          v13 = v7 + 2;
        else
          v13 = v7;
        result = (uint64_t)sub_214223E10((char *)result, v13, 1, (char *)v6);
        v6 = result;
        v11 = *(_QWORD *)(result + 24);
        v12 = v11 >> 1;
      }
      v14 = *(_QWORD *)(v6 + 16);
      v15 = v14 + 1;
      if (v12 <= v14)
      {
        result = (uint64_t)sub_214223E10((char *)(v11 > 1), v14 + 1, 1, (char *)v6);
        v6 = result;
        v11 = *(_QWORD *)(result + 24);
        v12 = v11 >> 1;
      }
      *(_QWORD *)(v6 + 16) = v15;
      *(_QWORD *)(v6 + 8 * v14 + 32) = v9;
      v16 = v14 + 2;
      if ((uint64_t)v12 < v16)
      {
        result = (uint64_t)sub_214223E10((char *)(v11 > 1), v16, 1, (char *)v6);
        v6 = result;
      }
      *(_QWORD *)(v6 + 16) = v16;
      *(_QWORD *)(v6 + 8 * v15 + 32) = v10;
      v5 += 5;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_37;
  }
  v6 = MEMORY[0x24BEE4AF8];
LABEL_17:
  sub_2142E95B8(v6);
  v18 = v17;
  result = swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    v19 = *(_QWORD *)(v1 + 16);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      result = swift_bridgeObjectRetain();
      v21 = (uint64_t *)(v19 + 64);
      v22 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v23 = *(_QWORD *)(v22 + 16);
        v24 = v23 + 2;
        if (__OFADD__(v23, 2))
          break;
        v25 = *(v21 - 2);
        v26 = *v21;
        result = swift_isUniquelyReferenced_nonNull_native();
        if (!(_DWORD)result || (v27 = *(_QWORD *)(v22 + 24), v28 = v27 >> 1, (uint64_t)(v27 >> 1) < v24))
        {
          if (v23 <= v24)
            v29 = v23 + 2;
          else
            v29 = v23;
          result = (uint64_t)sub_214223E10((char *)result, v29, 1, (char *)v22);
          v22 = result;
          v27 = *(_QWORD *)(result + 24);
          v28 = v27 >> 1;
        }
        v30 = *(_QWORD *)(v22 + 16);
        v31 = v30 + 1;
        if (v28 <= v30)
        {
          result = (uint64_t)sub_214223E10((char *)(v27 > 1), v30 + 1, 1, (char *)v22);
          v22 = result;
          v27 = *(_QWORD *)(result + 24);
          v28 = v27 >> 1;
        }
        *(_QWORD *)(v22 + 16) = v31;
        *(_QWORD *)(v22 + 8 * v30 + 32) = v25;
        v32 = v30 + 2;
        if ((uint64_t)v28 < v32)
        {
          result = (uint64_t)sub_214223E10((char *)(v27 > 1), v32, 1, (char *)v22);
          v22 = result;
        }
        *(_QWORD *)(v22 + 16) = v32;
        *(_QWORD *)(v22 + 8 * v31 + 32) = v26;
        v21 += 5;
        if (!--v20)
        {
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
      }
LABEL_37:
      __break(1u);
      return result;
    }
    v22 = MEMORY[0x24BEE4AF8];
LABEL_34:
    sub_2142E95B8(v22);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2142FF4E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  _OWORD v10[2];
  char v11;

  v3 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (double *)&v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for SgPath(0);
  sub_2141FDEA0(v1 + *(int *)(v6 + 24), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  v9 = v1;
  if (v5[11] == 1.0)
  {
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303A78, (uint64_t)v8);
  }
  else
  {
    sub_214424038();
    sub_214424044();
    sub_2142E9A38(a1, (uint64_t)v5, (uint64_t)v10, (void (*)(uint64_t, char *))sub_214303A78, (uint64_t)v8);
    sub_214424044();
  }
  return sub_2141DD370((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142FF62C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  _BYTE v12[40];
  __int128 v13;
  __int128 v14;
  char v15;

  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for SgPath(0);
  sub_2141FDEA0(a3 + *(int *)(v8 + 24), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  v9 = *(_OWORD *)(a3 + 24);
  v13 = *(_OWORD *)(a3 + 8);
  v14 = v9;
  v15 = *(_BYTE *)(a3 + 40);
  if ((sub_214424728() & 1) == 0)
    sub_2144246D4();
  if (*(_QWORD *)&v7[*(int *)(v5 + 36)])
  {
    v11 = *a1;
    swift_retain();
    swift_retain();
    sub_214424BA8();
    sub_214423F84();
    sub_2141FE404((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    sub_2142FF7D4((uint64_t)&v11, a3);
    swift_release();
    swift_release();
  }
  else
  {
    sub_2142FF7D4((uint64_t)a1, a3);
  }
  return sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
}

uint64_t sub_2142FF7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v15[40];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  char v20;

  v3 = type metadata accessor for SgPath(0);
  v4 = (_OWORD *)(a2 + 8);
  if ((*(_BYTE *)(a2 + *(int *)(v3 + 36)) & 1) != 0)
  {
    v20 = *(_BYTE *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v19[0] = *v4;
    v19[1] = v5;
    sub_2144246BC();
    v6 = a2 + *(int *)(v3 + 24);
    if (*(_QWORD *)(v6 + 72))
    {
      v7 = *(_QWORD *)(v6 + 80);
      v8 = *(_QWORD *)(v6 + 64);
      v9 = *(_DWORD *)(v6 + 56);
      v10 = *(_DWORD *)(v6 + 60);
      v11 = *(_QWORD *)(v6 + 72);
      v12 = *(_QWORD *)(v6 + 48);
    }
    else
    {
      if (qword_253F13350 != -1)
        swift_once();
      v12 = xmmword_253F1C9E0;
      v9 = DWORD2(xmmword_253F1C9E0);
      v10 = HIDWORD(xmmword_253F1C9E0);
      v8 = qword_253F1C9F0;
      v11 = qword_253F1C9F8;
      v7 = qword_253F1CA00;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)&v16 = v12;
    *((_QWORD *)&v16 + 1) = __PAIR64__(v10, v9);
    *(_QWORD *)&v17 = v8;
    *((_QWORD *)&v17 + 1) = v11;
    v18 = v7;
    swift_bridgeObjectRetain();
    sub_214423FFC();
    sub_2141FE404((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v18) = *(_BYTE *)(a2 + 40);
    v13 = *(_OWORD *)(a2 + 24);
    v16 = *v4;
    v17 = v13;
    sub_2144246BC();
    sub_214423FC0();
    return sub_2141FE404((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  }
}

uint64_t sub_2142FF974()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = sub_2141D8BF8(&qword_253F13488);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_214423F78();
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21442402C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_214423F60();
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2144240D4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2144240A4();
  type metadata accessor for RenderParams(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BDED118], v11);
  v15 = sub_2144240C8();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    sub_214424068();
    sub_214423F48();
  }
  sub_214423F48();
  sub_214423FF0();
  v16 = v1[7];
  if (v16 < 0)
  {
    v28 = *v1;
    sub_214423F6C();
    v20 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v25) == 1)
    {
      sub_2141E0750((uint64_t)v4, &qword_253F13488);
    }
    else
    {
      v21 = v24;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v24, v4, v20);
      sub_214423FB4();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v20);
    }
  }
  else
  {
    v17 = v1[5];
    v18 = v1[6];
    v19 = v1[9];
    swift_bridgeObjectRetain();
    sub_2141DD130(v17, v18, v16 & 1);
    swift_retain();
    LOBYTE(v28) = v16 & 1;
    sub_214424050();
    if (v19)
    {
      v28 = v19;
      swift_retain();
      sub_214424020();
      sub_214423F54();
      swift_release();
    }
    sub_214423FA8();
    sub_2141ED0BC(v17, v18, v16 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  }
  return sub_2144240B0();
}

uint64_t sub_2142FFD88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  int v35;
  uint64_t v36;
  _BYTE v37[160];

  v2 = v1;
  sub_2141EF6B8(v2, (uint64_t)v37);
  v4 = sub_21421C2FC((uint64_t)v37);
  v5 = sub_21421C308((uint64_t)v37);
  if (v4 == 1)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 16);
    v8 = *(_BYTE *)(v5 + 24);
    v9 = *(_QWORD *)(v5 + 48);
    v10 = *(char *)(v5 + 56);
    v11 = *(_QWORD *)(v5 + 88);
    v31 = *(_QWORD *)(v5 + 80);
    v32 = *(_QWORD *)(v5 + 40);
    v12 = *(_BYTE *)(v5 + 96);
    v30 = *(_QWORD *)(v5 + 112);
    v29 = *(_QWORD *)(v5 + 120);
    v35 = *(char *)(v5 + 128);
    sub_214425880();
    sub_214425880();
    v36 = v6;
    v33 = v12;
    v34 = v8;
    if (v10 < 0)
    {
      v28 = v12 & 1;
      sub_214425880();
      v17 = v32;
      sub_2143FD828();
      sub_2141DD130(v7, v6, v8 & 1);
      swift_bridgeObjectRetain();
      v13 = v31;
      sub_2141DD130(v31, v11, v28);
      swift_bridgeObjectRetain();
      v14 = v30;
      v15 = v29;
      v16 = v35;
      sub_2141DD140(v30, v29, v35);
    }
    else
    {
      sub_214425880();
      sub_2141DD130(v7, v6, v8 & 1);
      swift_bridgeObjectRetain();
      v13 = v31;
      sub_2141DD130(v31, v11, v12 & 1);
      swift_bridgeObjectRetain();
      v14 = v30;
      v15 = v29;
      v16 = v35;
      sub_2141DD140(v30, v29, v35);
      v17 = v32;
      sub_2141DD140(v32, v9, v10);
      sub_2143FD1BC(a1, v32, v9, v10);
    }
    sub_214425880();
    if (v16 < 0)
      sub_2143FD828();
    else
      sub_2143FD1BC(a1, v14, v15, v16);
    sub_2141ED0BC(v7, v36, v34 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v17, v9, v10);
    sub_2141ED0BC(v13, v11, v33 & 1);
    swift_bridgeObjectRelease();
    v24 = v14;
    v25 = v15;
    v26 = v16;
  }
  else
  {
    v18 = *(_QWORD *)(v5 + 8);
    v19 = *(_QWORD *)(v5 + 16);
    v20 = *(_BYTE *)(v5 + 24);
    v21 = *(_QWORD *)(v5 + 40);
    v22 = *(_QWORD *)(v5 + 48);
    v23 = *(char *)(v5 + 56);
    sub_214425880();
    sub_214425880();
    sub_214425880();
    if (v23 < 0)
    {
      sub_2143FD828();
      sub_2141DD130(v18, v19, v20);
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_2141DD130(v18, v19, v20);
      swift_bridgeObjectRetain();
      sub_2141DD140(v21, v22, v23);
      sub_2143FD1BC(a1, v21, v22, v23);
    }
    sub_214425880();
    sub_2141ED0BC(v18, v19, v20);
    swift_bridgeObjectRelease();
    v24 = v21;
    v25 = v22;
    v26 = v23;
  }
  return sub_2141EF1B0(v24, v25, v26);
}

uint64_t sub_2143000F0()
{
  sub_214425874();
  return sub_2144258B0();
}

uint64_t sub_214300124()
{
  sub_214425874();
  return sub_2144258B0();
}

uint64_t sub_214300154(uint64_t a1, uint64_t a2)
{
  _QWORD v4[8];
  _QWORD v5[8];

  sub_21421C19C(a1, (uint64_t)v4);
  sub_21421C19C(a2, (uint64_t)v5);
  return sub_214302C50(v4, v5) & 1;
}

uint64_t sub_21430019C()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[152];

  sub_2141EF6B8(v0, (uint64_t)v3);
  sub_214425874();
  sub_2142FFD88((uint64_t)&v2);
  return sub_2144258B0();
}

uint64_t sub_2143001E8(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[152];

  sub_2141EF6B8(v1, (uint64_t)v4);
  return sub_2142FFD88(a1);
}

uint64_t sub_214300224()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[152];

  sub_2141EF6B8(v0, (uint64_t)v3);
  sub_214425874();
  sub_2142FFD88((uint64_t)&v2);
  return sub_2144258B0();
}

BOOL sub_21430027C(uint64_t a1, uint64_t a2)
{
  _BYTE v4[152];
  _BYTE v5[152];

  sub_2141EF6B8(a1, (uint64_t)v4);
  sub_2141EF6B8(a2, (uint64_t)v5);
  return sub_214302F90((uint64_t)v4, (uint64_t)v5);
}

unint64_t sub_2143002C8()
{
  unint64_t result;

  result = qword_253F121F0;
  if (!qword_253F121F0)
  {
    result = MEMORY[0x2199CD934](&unk_21442BCEC, &type metadata for SgAccessibilityDataField);
    atomic_store(result, (unint64_t *)&qword_253F121F0);
  }
  return result;
}

uint64_t type metadata accessor for SgVectorized(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F12E88);
}

uint64_t sub_214300320()
{
  type metadata accessor for SgClipRect(0);
  return sub_2144246EC();
}

void sub_2143003C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for SgPath(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for SgArea(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for SgLine(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for SgRule(0);
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for SgSector(0);
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for SgPoint(0);
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v9);
  __asm { BR              X10 }
}

double sub_2143005BC()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void sub_21430091C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_projectBox();
  sub_2141FDEA0(v2, v0, type metadata accessor for SgPath);
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 - 208) = *(_OWORD *)(v0 + 8);
  *(_OWORD *)(v1 - 192) = v3;
  *(_BYTE *)(v1 - 176) = *(_BYTE *)(v0 + 40);
  if ((sub_214424728() & 1) == 0)
    sub_2144246D4();
  JUMPOUT(0x2143008E0);
}

uint64_t sub_214300AB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47[40];

  v3 = v2;
  v44 = a2;
  v5 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_214423FE4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2141D8BF8(&qword_253F15B40);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *a1;
  v14 = type metadata accessor for SgGroup(0);
  swift_retain();
  sub_214424038();
  sub_214424044();
  v15 = *(int *)(v14 + 36);
  v43 = v3;
  v16 = *(_QWORD *)(v3 + v15);
  v17 = *(_QWORD *)(v16 + 16);
  v40 = v16;
  v41 = v14;
  if (v17)
  {
    v18 = v16 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v19 = *(_QWORD *)(v8 + 72);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v20(v13, v18, v7);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v21(v13, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
      sub_214424074();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v18 += v19;
      if (!--v17)
        goto LABEL_7;
    }
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v21(v13, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  v23 = v41;
  v22 = v42;
  v24 = v43;
  sub_2141E070C(v43 + *(int *)(v41 + 24), v42, &qword_253F14280);
  v25 = type metadata accessor for SgClipRect(0);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v22, 1, v25);
  if ((_DWORD)v26 == 1)
  {
    v27 = sub_2141E0750(v22, &qword_253F14280);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v26);
    *(&v40 - 2) = v22;
    sub_214424794();
    sub_2141DD370(v22, type metadata accessor for SgClipRect);
    sub_214423F84();
    v27 = sub_2141FE404((uint64_t)v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  }
  v28 = v44;
  if (*(_BYTE *)(v24 + *(int *)(v23 + 40)) == 1)
  {
    MEMORY[0x24BDAC7A8](v27);
    *(&v40 - 2) = v24;
    *(&v40 - 1) = v28;
    swift_retain();
    sub_214424098();
    swift_release();
    return swift_release();
  }
  v29 = *(_QWORD *)(v24 + 8);
  sub_2141FA7A8(v29);
  v30 = *(_QWORD *)(v29 + 16);
  v31 = swift_bridgeObjectRetain();
  v32 = (char *)sub_2141DBCE8(v31, 0, v30);
  swift_bridgeObjectRelease();
  v45 = v32;
  sub_2141FCAFC(&v45);
  swift_bridgeObjectRelease();
  v33 = v45;
  v34 = *((_QWORD *)v45 + 2);
  if (!v34)
  {
LABEL_19:
    swift_release();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  v35 = (unint64_t *)(v33 + 40);
  while (1)
  {
    v37 = *v35;
    v35 += 2;
    v36 = v37;
    if ((v37 & 0x8000000000000000) != 0)
      break;
    if (v36 >= *(_QWORD *)(v29 + 16))
      goto LABEL_22;
    v38 = *(_QWORD *)(v29 + 32 + 8 * v36);
    swift_retain();
    sub_2142EA234(&v46, v28, v38);
    swift_release();
    if (!--v34)
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_214300EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;

  v6 = *(_QWORD *)(a2 + 8);
  sub_2141FA7A8(v6);
  v7 = v3;
  v8 = *(_QWORD *)(v6 + 16);
  v9 = swift_bridgeObjectRetain();
  v10 = (char *)sub_2141DBCE8(v9, 0, v8);
  swift_bridgeObjectRelease();
  v18 = v10;
  sub_2141FCAFC(&v18);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = *((_QWORD *)v18 + 2);
    if (!v12)
      return swift_release();
    swift_bridgeObjectRetain();
    v13 = (unint64_t *)(v11 + 40);
    while (1)
    {
      v15 = *v13;
      v13 += 2;
      v14 = v15;
      if ((v15 & 0x8000000000000000) != 0)
        break;
      if (v14 >= *(_QWORD *)(v6 + 16))
        goto LABEL_10;
      v16 = *(_QWORD *)(v6 + 32 + 8 * v14);
      swift_retain();
      sub_2142EA234(a1, a3, v16);
      swift_release();
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_214301004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *v16;

  v5 = *(_QWORD *)(v2 + 8);
  sub_2141FA7A8(v5);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = swift_bridgeObjectRetain();
  v8 = (char *)sub_2141DBCE8(v7, 0, v6);
  swift_bridgeObjectRelease();
  v16 = v8;
  sub_2141FCAFC(&v16);
  swift_bridgeObjectRelease();
  v9 = v16;
  v10 = *((_QWORD *)v16 + 2);
  if (!v10)
    return swift_release();
  swift_bridgeObjectRetain();
  v11 = (unint64_t *)(v9 + 40);
  while (1)
  {
    v13 = *v11;
    v11 += 2;
    v12 = v13;
    if ((v13 & 0x8000000000000000) != 0)
      break;
    if (v12 >= *(_QWORD *)(v5 + 16))
      goto LABEL_9;
    v14 = *(_QWORD *)(v5 + 32 + 8 * v12);
    swift_retain();
    sub_2142EA234(a1, a2, v14);
    swift_release();
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

double sub_214301120(uint64_t a1, uint64_t a2, uint64_t a3, double (*a4)(uint64_t))
{
  uint64_t v5;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  sub_2143EA984(v5);
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a2 + 8 * v11++ + 32);
      swift_retain();
      v20.origin.x = a4(v12);
      v20.origin.y = v13;
      v20.size.width = v14;
      v20.size.height = v15;
      v18.origin.x = x;
      v18.origin.y = y;
      v18.size.width = width;
      v18.size.height = height;
      v19 = CGRectUnion(v18, v20);
      x = v19.origin.x;
      y = v19.origin.y;
      width = v19.size.width;
      height = v19.size.height;
      swift_release();
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return x;
}

uint64_t sub_214301230(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *v16;
  uint64_t v17;

  v17 = *a1;
  swift_retain();
  sub_214423F3C();
  sub_2141FA7A8(a4);
  v6 = *(_QWORD *)(a4 + 16);
  v7 = swift_bridgeObjectRetain();
  v8 = (char *)sub_2141DBCE8(v7, 0, v6);
  swift_bridgeObjectRelease();
  v16 = v8;
  sub_2141FCAFC(&v16);
  swift_bridgeObjectRelease();
  v9 = v16;
  v10 = *((_QWORD *)v16 + 2);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = (unint64_t *)(v9 + 40);
    while (1)
    {
      v13 = *v11;
      v11 += 2;
      v12 = v13;
      if (v13 >= v6)
        break;
      v14 = *(_QWORD *)(a4 + 32 + 8 * v12);
      swift_retain();
      sub_2142EA234(&v17, a2, v14);
      swift_release();
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_21430137C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  char *v19;

  sub_2141FA7A8(a4);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = swift_bridgeObjectRetain();
  v11 = (char *)sub_2141DBCE8(v10, 0, v9);
  swift_bridgeObjectRelease();
  v19 = v11;
  sub_2141FCAFC(&v19);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v12 = v19;
    v13 = *((_QWORD *)v19 + 2);
    if (!v13)
      return swift_release();
    swift_bridgeObjectRetain();
    v14 = (unint64_t *)(v12 + 40);
    while (1)
    {
      v16 = *v14;
      v14 += 2;
      v15 = v16;
      if (v16 >= v9)
        break;
      v17 = *(_QWORD *)(a4 + 32 + 8 * v15);
      swift_retain();
      sub_2142EA234(a1, a5, v17);
      swift_release();
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
    }
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

void sub_2143014A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for SgLine(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for SgPoint(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X10 }
}

uint64_t sub_21430158C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_projectBox();
  sub_2141FDEA0(v1, v0, type metadata accessor for SgGroup);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4++ + 32);
      swift_retain();
      sub_2143014A0(v5);
      swift_release();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  return sub_2141DD370(v0, type metadata accessor for SgGroup);
}

void sub_214301C4C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_214301C58(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  unsigned __int8 v24;
  _BYTE v25[48];

  v3 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = *((_QWORD *)a1 + 1);
  v9 = v8 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141FDEA0(v9, (uint64_t)v6, type metadata accessor for ChartContentRenderContext.Environment);
  v10 = (int *)type metadata accessor for PointsRenderer(0);
  v11 = v1 + v10[8];
  sub_2141E0750(v11, qword_254D69B70);
  sub_2141FDEA0((uint64_t)v6, v11, type metadata accessor for ChartContentRenderContext.Environment);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v11, 0, 1, v3);
  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 48) = v8;
  v12 = v1 + v10[9];
  sub_2141E070C(v12, (uint64_t)v25, &qword_253F12208);
  LODWORD(v8) = v25[40];
  sub_2141E0750((uint64_t)v25, &qword_253F12208);
  if ((_DWORD)v8 == 255)
  {
    sub_2141E070C((uint64_t)(v6 + 88), (uint64_t)v22, &qword_253F12208);
    if (v24 == 255)
    {
      sub_2141E0750((uint64_t)v22, &qword_253F12208);
    }
    else
    {
      sub_2142AAEF0((uint64_t)v22, (uint64_t)v25);
      sub_2142AAEB4((uint64_t)v25, (uint64_t)v22);
      if ((v24 & 1) != 0)
      {
        result = sub_214425628();
        __break(1u);
        return result;
      }
      sub_21420D730((uint64_t)v25);
      sub_2141E0750(v12, &qword_253F12208);
      v13 = v22[1];
      *(_OWORD *)v12 = v22[0];
      *(_OWORD *)(v12 + 16) = v13;
      *(_QWORD *)(v12 + 32) = v23;
      *(_BYTE *)(v12 + 40) = 0;
    }
  }
  v14 = v6[152];
  if (v14 == 255)
  {
    if (qword_253F10D28 != -1)
      swift_once();
    v15 = 0;
    v16 = 0;
    v17 = &qword_253F1C948;
  }
  else
  {
    v17 = (uint64_t *)(v6 + 136);
    v15 = *((_QWORD *)v6 + 18);
    v16 = v14 & 1;
  }
  v18 = *v17;
  result = sub_2141DD370((uint64_t)v6, type metadata accessor for ChartContentRenderContext.Environment);
  v20 = v1 + v10[10];
  *(_QWORD *)v20 = v18;
  *(_QWORD *)(v20 + 8) = v15;
  *(_BYTE *)(v20 + 16) = v16;
  return result;
}

uint64_t sub_214301F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  sub_2141D7878(a2, (uint64_t)v12);
  v5 = v13;
  v6 = v14;
  sub_2141E88D0(v12, v13);
  KeyPath = swift_getKeyPath();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t))(v6 + 16))(a1, KeyPath, &type metadata for AnyChartSymbolShape, v5, v6);
  v10 = v9;
  swift_release();
  *a3 = v8;
  a3[1] = v10;
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)v12);
}

uint64_t sub_214301FC0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[56];

  sub_2141E070C(a1, (uint64_t)v5, &qword_254D69D00);
  v3 = *a2 + 128;
  swift_beginAccess();
  sub_214303B50((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t sub_214302024(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[56];

  sub_2141E070C(a1, (uint64_t)v5, &qword_254D69D00);
  v3 = *a2 + 184;
  swift_beginAccess();
  sub_214303B50((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t sub_214302088(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21430E860(a1, a2, a3, a4);
}

uint64_t sub_214302090(double a1, double a2, double a3, double a4)
{
  return sub_21430ECE4(a1, a2, a3, a4);
}

uint64_t sub_21430209C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[56];

  sub_2141E070C(a1, (uint64_t)v5, &qword_254D69D00);
  v3 = *a2 + 72;
  swift_beginAccess();
  sub_214303B50((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t sub_214302100(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t (*v19)(_QWORD);
  _BYTE *v20;
  char v21;
  void (*v22)(_BYTE *, uint64_t);
  double v23;
  double v24;
  double v25;
  uint64_t result;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[16];
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  char v43[40];
  _OWORD v44[2];
  uint64_t v45;

  v12 = sub_2144240D4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v37[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for RenderParams(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v37[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2141FDEA0(v6, (uint64_t)v18, v19);
  v20 = &v18[*(int *)(v16 + 20)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDED100], v12);
  v21 = sub_2144240C8();
  v22 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  v22(v15, v12);
  v22(v20, v12);
  if (a2 >= a1)
    v23 = a1;
  else
    v23 = a2;
  if (a1 > a2)
    v24 = a1;
  else
    v24 = a2;
  if ((v21 & 1) != 0)
    v25 = v23;
  else
    v25 = v24;
  sub_214424044();
  v38 = v25;
  v39 = a3;
  v40 = a2;
  v41 = a1;
  v42 = a4;
  sub_214424794();
  result = type metadata accessor for RuleElementDrawer(0);
  v27 = (uint64_t *)(v6 + *(int *)(result + 20));
  v28 = v27[1];
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
    __break(1u);
    goto LABEL_18;
  }
  v30 = a6 % v29;
  if (v30 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v31 = *v27;
  v32 = *(_QWORD *)(v28 + 8 * v30 + 32);
  if ((v32 & 0x8000000000000000) == 0)
    goto LABEL_15;
  v33 = __OFSUB__(0, v32);
  v32 = -(uint64_t)v32;
  if (!v33)
  {
    if ((v32 & 0x8000000000000000) == 0)
    {
LABEL_15:
      if (v32 < *(_QWORD *)(v31 + 16))
      {
        v34 = v31 + 40 * v32;
        v35 = *(_OWORD *)(v34 + 32);
        v36 = *(_OWORD *)(v34 + 48);
        v45 = *(_QWORD *)(v34 + 64);
        v44[0] = v35;
        v44[1] = v36;
        swift_bridgeObjectRetain();
        sub_214423FFC();
        sub_2141FE404((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
        return sub_21421C140((uint64_t)v44);
      }
      goto LABEL_20;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_214302350(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_214350198(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_2143023B8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2143023B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v83 = 0;
      v84 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v86 = *(_QWORD *)(v84 + 16 * i);
        v87 = v83;
        do
        {
          if (v86 >= *(_QWORD *)(v84 + v87))
            break;
          if (!v84)
            goto LABEL_141;
          v88 = (unint64_t *)(v84 + v87);
          v89 = *(_QWORD *)(v84 + v87 + 24);
          *(_OWORD *)(v84 + v87 + 16) = *(_OWORD *)(v84 + v87);
          *v88 = v86;
          v88[1] = v89;
          v87 -= 16;
        }
        while (v87 != -16);
        v83 += 16;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_136;
    v6 = result;
    v98 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      sub_2141D8BF8(qword_253F126C0);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v7;
      v100 = result;
      v104 = (char *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v99 = *a1 + 32;
      v97 = *a1 - 16;
      v11 = MEMORY[0x24BEE4AF8];
      v101 = v6;
      v102 = v3;
      v103 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(_QWORD *)(v10 + 16 * v9);
          v15 = 16 * v13;
          v16 = *(_QWORD *)(v10 + 16 * v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v17 = (unint64_t *)(v99 + 16 * v13);
            v18 = v14;
            while (1)
            {
              v20 = *v17;
              v17 += 2;
              v19 = v20;
              if (v14 < v16 == v20 >= v18)
                break;
              ++v9;
              v18 = v19;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v16)
          {
            if (v9 < v13)
              goto LABEL_138;
            if (v13 < v9)
            {
              v21 = 16 * v9;
              v22 = v9;
              v23 = v13;
              do
              {
                if (v23 != --v22)
                {
                  if (!v10)
                    goto LABEL_144;
                  v24 = v10 + v21;
                  v25 = *(_QWORD *)(v10 + v15);
                  v26 = *(_QWORD *)(v10 + v15 + 8);
                  *(_OWORD *)(v10 + v15) = *(_OWORD *)(v10 + v21 - 16);
                  *(_QWORD *)(v24 - 16) = v25;
                  *(_QWORD *)(v24 - 8) = v26;
                }
                ++v23;
                v21 -= 16;
                v15 += 16;
              }
              while (v23 < v22);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_135;
          if (v9 - v13 < v6)
          {
            v27 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_139;
            if (v27 >= v3)
              v27 = v3;
            if (v27 < v13)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v9 != v27)
            {
              v28 = v97 + 16 * v9;
              do
              {
                v29 = *(_QWORD *)(v10 + 16 * v9);
                v30 = v13;
                v31 = v28;
                do
                {
                  if (v29 >= *(_QWORD *)v31)
                    break;
                  if (!v10)
                    goto LABEL_142;
                  v32 = *(_QWORD *)(v31 + 24);
                  *(_OWORD *)(v31 + 16) = *(_OWORD *)v31;
                  *(_QWORD *)v31 = v29;
                  *(_QWORD *)(v31 + 8) = v32;
                  v31 -= 16;
                  ++v30;
                }
                while (v9 != v30);
                ++v9;
                v28 += 16;
              }
              while (v9 != v27);
              v9 = v27;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_130;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v34 = *(_QWORD *)(v11 + 16);
        v33 = *(_QWORD *)(v11 + 24);
        v12 = v34 + 1;
        v10 = v103;
        if (v34 >= v33 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v33 > 1), v34 + 1, 1, (char *)v11);
          v10 = v103;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v35 = v11 + 32;
        v36 = (uint64_t *)(v11 + 32 + 16 * v34);
        *v36 = v13;
        v36[1] = v9;
        if (v34)
        {
          while (1)
          {
            v37 = v12 - 1;
            if (v12 >= 4)
            {
              v42 = v35 + 16 * v12;
              v43 = *(_QWORD *)(v42 - 64);
              v44 = *(_QWORD *)(v42 - 56);
              v48 = __OFSUB__(v44, v43);
              v45 = v44 - v43;
              if (v48)
                goto LABEL_119;
              v47 = *(_QWORD *)(v42 - 48);
              v46 = *(_QWORD *)(v42 - 40);
              v48 = __OFSUB__(v46, v47);
              v40 = v46 - v47;
              v41 = v48;
              if (v48)
                goto LABEL_120;
              v49 = v12 - 2;
              v50 = (uint64_t *)(v35 + 16 * (v12 - 2));
              v52 = *v50;
              v51 = v50[1];
              v48 = __OFSUB__(v51, v52);
              v53 = v51 - v52;
              if (v48)
                goto LABEL_121;
              v48 = __OFADD__(v40, v53);
              v54 = v40 + v53;
              if (v48)
                goto LABEL_123;
              if (v54 >= v45)
              {
                v72 = (uint64_t *)(v35 + 16 * v37);
                v74 = *v72;
                v73 = v72[1];
                v48 = __OFSUB__(v73, v74);
                v75 = v73 - v74;
                if (v48)
                  goto LABEL_129;
                v65 = v40 < v75;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v66 = *(_QWORD *)(v11 + 32);
                v67 = *(_QWORD *)(v11 + 40);
                v48 = __OFSUB__(v67, v66);
                v59 = v67 - v66;
                v60 = v48;
                goto LABEL_77;
              }
              v39 = *(_QWORD *)(v11 + 32);
              v38 = *(_QWORD *)(v11 + 40);
              v48 = __OFSUB__(v38, v39);
              v40 = v38 - v39;
              v41 = v48;
            }
            if ((v41 & 1) != 0)
              goto LABEL_122;
            v49 = v12 - 2;
            v55 = (uint64_t *)(v35 + 16 * (v12 - 2));
            v57 = *v55;
            v56 = v55[1];
            v58 = __OFSUB__(v56, v57);
            v59 = v56 - v57;
            v60 = v58;
            if (v58)
              goto LABEL_124;
            v61 = (uint64_t *)(v35 + 16 * v37);
            v63 = *v61;
            v62 = v61[1];
            v48 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v48)
              goto LABEL_126;
            if (__OFADD__(v59, v64))
              goto LABEL_128;
            if (v59 + v64 >= v40)
            {
              v65 = v40 < v64;
LABEL_83:
              if (v65)
                v37 = v49;
              goto LABEL_85;
            }
LABEL_77:
            if ((v60 & 1) != 0)
              goto LABEL_125;
            v68 = (uint64_t *)(v35 + 16 * v37);
            v70 = *v68;
            v69 = v68[1];
            v48 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v48)
              goto LABEL_127;
            if (v71 < v59)
              goto LABEL_15;
LABEL_85:
            v76 = v37 - 1;
            if (v37 - 1 >= v12)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v10)
              goto LABEL_143;
            v77 = v11;
            v78 = (uint64_t *)(v35 + 16 * v76);
            v79 = *v78;
            v80 = (_QWORD *)(v35 + 16 * v37);
            v81 = v80[1];
            result = sub_214302A44((char *)(v10 + 16 * *v78), (char *)(v10 + 16 * *v80), v10 + 16 * v81, v104);
            if (v1)
              goto LABEL_93;
            if (v81 < v79)
              goto LABEL_116;
            if (v37 > *(_QWORD *)(v77 + 16))
              goto LABEL_117;
            *v78 = v79;
            *(_QWORD *)(v35 + 16 * v76 + 8) = v81;
            v82 = *(_QWORD *)(v77 + 16);
            if (v37 >= v82)
              goto LABEL_118;
            v11 = v77;
            v12 = v82 - 1;
            result = (uint64_t)memmove((void *)(v35 + 16 * v37), v80 + 2, 16 * (v82 - 1 - v37));
            *(_QWORD *)(v77 + 16) = v82 - 1;
            v10 = v103;
            if (v82 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v101;
        v3 = v102;
        if (v9 >= v102)
        {
          v8 = v100;
          goto LABEL_102;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v104 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v100 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_102:
    result = v11;
    v100 = v8;
    if (v12 >= 2)
    {
      v90 = *v98;
      do
      {
        v91 = v12 - 2;
        if (v12 < 2)
          goto LABEL_131;
        if (!v90)
          goto LABEL_145;
        v92 = result;
        v93 = *(_QWORD *)(result + 32 + 16 * v91);
        v94 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_214302A44((char *)(v90 + 16 * v93), (char *)(v90 + 16 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v90 + 16 * v94, v104);
        if (v1)
          break;
        if (v94 < v93)
          goto LABEL_132;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v92);
          v92 = result;
        }
        if (v91 >= *(_QWORD *)(v92 + 16))
          goto LABEL_133;
        v95 = (_QWORD *)(v92 + 32 + 16 * v91);
        *v95 = v93;
        v95[1] = v94;
        v96 = *(_QWORD *)(v92 + 16);
        if (v12 > v96)
          goto LABEL_134;
        memmove((void *)(v92 + 32 + 16 * (v12 - 1)), (const void *)(v92 + 32 + 16 * v12), 16 * (v96 - v12));
        result = v92;
        *(_QWORD *)(v92 + 16) = v96 - 1;
        v12 = v96 - 1;
      }
      while (v96 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v100 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_214302A44(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  int64_t v21;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 15;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[16 * v13] <= a4)
      memmove(a4, __src, 16 * v13);
    v14 = &v4[16 * v13];
    if (v7 >= v6 || v11 < 16)
      goto LABEL_40;
    v17 = (char *)(a3 - 16);
    while (1)
    {
      v18 = v17 + 16;
      v19 = v6 - 16;
      if (*((_QWORD *)v14 - 2) >= *((_QWORD *)v6 - 2))
      {
        v19 = v14 - 16;
        if (v18 != v14)
        {
          v14 -= 16;
          goto LABEL_37;
        }
        v20 = v17 >= v14;
        v14 -= 16;
        if (v20)
          goto LABEL_37;
      }
      else
      {
        if (v18 != v6)
        {
          v6 -= 16;
LABEL_37:
          *(_OWORD *)v17 = *(_OWORD *)v19;
          goto LABEL_38;
        }
        v20 = v17 >= v6;
        v6 -= 16;
        if (v20)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v17 -= 16;
        if (v14 > v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  if (a4 != __dst || &__dst[16 * v10] <= a4)
    memmove(a4, __dst, 16 * v10);
  v14 = &v4[16 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (*(_QWORD *)v6 < *(_QWORD *)v4)
    {
      v15 = v6;
      v16 = v7 == v6;
      v6 += 16;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 16;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = v4;
    v16 = v7 == v4;
    v4 += 16;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_40:
  v21 = v14 - v4 + (v14 - v4 < 0 ? 0xFuLL : 0);
  if (v6 != v4 || v6 >= &v4[v21 & 0xFFFFFFFFFFFFFFF0])
    memmove(v6, v4, 16 * (v21 >> 4));
  return 1;
}

uint64_t sub_214302C50(_QWORD *a1, _QWORD *a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_21421C19C((uint64_t)a1, (uint64_t)v31);
  v4 = v35;
  if (v35 < 0)
  {
    v35 &= ~0x8000000000000000;
    v7 = v31[0];
    v6 = v31[1];
    v8 = v32;
    v9 = v33;
    v10 = v34;
    sub_21421C19C((uint64_t)a2, (uint64_t)v26);
    v11 = v30;
    if (v30 < 0)
    {
      v30 &= ~0x8000000000000000;
      v12 = v26[1];
      v22 = v26[0];
      v13 = v10;
      v14 = v27;
      v23 = v27;
      v24 = v6;
      v15 = v6;
      v16 = v7;
      v20 = v28;
      v25 = v8;
      v17 = v13;
      v18 = v29;
      sub_2141DD130(v16, v15, v25);
      swift_bridgeObjectRetain();
      sub_2141DD130(v22, v12, v14);
      swift_bridgeObjectRetain();
      sub_2141DD130(v9, v17, v4 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD130(v20, v18, v11 & 1);
      swift_bridgeObjectRetain();
      v21 = v16;
      if ((sub_2144247F4() & 1) != 0)
      {
        v5 = sub_2144247F4();
        sub_2141ED0BC(v20, v18, v11 & 1);
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v9, v17, v4 & 1);
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v22, v12, v23);
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v21, v24, v25);
        swift_bridgeObjectRelease();
        return v5 & 1;
      }
      sub_2141ED0BC(v20, v18, v11 & 1);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v9, v17, v4 & 1);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v22, v12, v23);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v16, v24, v25);
      swift_bridgeObjectRelease();
    }
LABEL_8:
    v5 = 0;
    return v5 & 1;
  }
  sub_21421C19C((uint64_t)a2, (uint64_t)v26);
  if (v30 < 0)
    goto LABEL_8;
  sub_21421C2C0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C1D8);
  sub_21421C2C0(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C1D8);
  v5 = sub_2144247F4();
  sub_21421C2C0(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C24C);
  sub_21421C2C0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C24C);
  return v5 & 1;
}

BOOL sub_214302F90(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  unsigned __int8 v79;
  unsigned int v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  _BYTE v93[152];
  _BYTE v94[160];

  sub_2141EF6B8(a1, (uint64_t)v94);
  v3 = sub_21421C2FC((uint64_t)v94);
  v4 = (unsigned __int8 *)sub_21421C308((uint64_t)v94);
  v5 = *v4;
  if (v3 != 1)
  {
    v40 = *((_QWORD *)v4 + 1);
    v41 = *((_QWORD *)v4 + 2);
    v42 = v4[24];
    v44 = *((_QWORD *)v4 + 4);
    v43 = *((_QWORD *)v4 + 5);
    v45 = *((_QWORD *)v4 + 6);
    v46 = v4[56];
    v47 = v4[80];
    sub_2141EF6B8(a2, (uint64_t)v93);
    v48 = sub_21421C2FC((uint64_t)v93);
    v49 = (unsigned __int8 *)sub_21421C308((uint64_t)v93);
    if (v48 != 1 && v5 == *v49)
    {
      v86 = v49[80];
      v90 = *((_QWORD *)v49 + 5);
      v92 = *((_QWORD *)v49 + 6);
      v88 = *((_QWORD *)v49 + 4);
      v76 = v49[24];
      v84 = v47;
      v50 = *((_QWORD *)v49 + 1);
      v51 = *((_QWORD *)v49 + 2);
      v52 = v49[56];
      sub_2141DD130(v40, v41, v42);
      swift_bridgeObjectRetain();
      sub_2141DD140(v43, v45, v46);
      sub_2141DD130(v50, v51, v76);
      swift_bridgeObjectRetain();
      sub_2141DD140(v90, v92, v52);
      LOBYTE(v62) = v76;
      v82 = sub_2143D8A9C(v40, v41, v42, v44, v43, v45, v46, v50, v53, v54, v55, v56, v57, v58, v59, v60, v51, v62, v88,
              *(double *)&v90,
              *(double *)&v92,
              v52);
      sub_2141ED0BC(v50, v51, v76);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v90, v92, v52);
      sub_2141ED0BC(v40, v41, v42);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v43, v45, v46);
      return v82 && v84 == v86;
    }
    return 0;
  }
  v85 = *((_QWORD *)v4 + 1);
  v87 = *((_QWORD *)v4 + 2);
  v79 = v4[24];
  v81 = *((_QWORD *)v4 + 4);
  v83 = *((_QWORD *)v4 + 5);
  v89 = *((_QWORD *)v4 + 6);
  v91 = v4[56];
  v6 = *((_QWORD *)v4 + 10);
  v7 = *((_QWORD *)v4 + 11);
  v8 = v4[96];
  v10 = *((_QWORD *)v4 + 13);
  v9 = *((_QWORD *)v4 + 14);
  v11 = *((_QWORD *)v4 + 15);
  v12 = v4[128];
  sub_2141EF6B8(a2, (uint64_t)v93);
  v13 = sub_21421C2FC((uint64_t)v93);
  v14 = (unsigned __int8 *)sub_21421C308((uint64_t)v93);
  if (v13 != 1)
    return 0;
  v15 = v79;
  v75 = v6;
  v77 = v7;
  v74 = v9;
  v78 = v12;
  if (v5 != *v14)
    return 0;
  v16 = v8;
  v18 = *((_QWORD *)v14 + 1);
  v17 = *((_QWORD *)v14 + 2);
  v20 = *((_QWORD *)v14 + 4);
  v19 = *((_QWORD *)v14 + 5);
  v73 = *((_QWORD *)v14 + 6);
  v71 = v14[56];
  v67 = *((_QWORD *)v14 + 10);
  v66 = *((_QWORD *)v14 + 11);
  v68 = *((_QWORD *)v14 + 13);
  v72 = *((_QWORD *)v14 + 14);
  v65 = v14[96] & 1;
  v70 = *((_QWORD *)v14 + 15);
  v21 = v14[24] & 1;
  v22 = v16 & 1;
  v64 = v16 & 1;
  v80 = v79 & 1;
  v69 = v14[128];
  sub_2141DD130(v85, v87, v15 & 1);
  swift_bridgeObjectRetain();
  sub_2141DD140(v83, v89, v91);
  sub_2141DD130(v75, v77, v22);
  swift_bridgeObjectRetain();
  sub_2141DD140(v74, v11, v78);
  sub_2141DD130(v18, v17, v21);
  swift_bridgeObjectRetain();
  sub_2141DD140(v19, v73, v71);
  sub_2141DD130(v67, v66, v65);
  swift_bridgeObjectRetain();
  sub_2141DD140(v72, v70, v69);
  LOBYTE(v62) = v21;
  if (!sub_2143D8A9C(v85, v87, v80, v81, v83, v89, v91, v18, v23, v24, v25, v26, v27, v28, v29, v30, v17, v62, v20,
          *(double *)&v19,
          *(double *)&v73,
          v71))
  {
    sub_2141ED0BC(v67, v66, v65);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v72, v70, v69);
    sub_2141ED0BC(v18, v17, v21);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v19, v73, v71);
    sub_2141ED0BC(v75, v77, v64);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v74, v11, v78);
    sub_2141ED0BC(v85, v87, v80);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v83, v89, v91);
    return 0;
  }
  LOBYTE(v63) = v65;
  v39 = sub_2143D8A9C(v75, v77, v64, v10, v74, v11, v78, v67, v31, v32, v33, v34, v35, v36, v37, v38, v66, v63, v68,
          *(double *)&v72,
          *(double *)&v70,
          v69);
  sub_2141ED0BC(v67, v66, v65);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v72, v70, v69);
  sub_2141ED0BC(v18, v17, v21);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v19, v73, v71);
  sub_2141ED0BC(v75, v77, v64);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v74, v11, v78);
  sub_2141ED0BC(v85, v87, v80);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v83, v89, v91);
  return v39;
}

uint64_t sub_21430352C(unsigned __int8 *a1)
{
  return ((uint64_t (*)())((char *)sub_21430354C + 4 * byte_21442B9EB[*a1]))();
}

uint64_t sub_21430354C()
{
  int v0;

  if (v0 == 3 || v0 == 5)
    v0 = 3;
  return (v0 << 8) | 3u;
}

uint64_t sub_2143035C0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SgLine.Points.Element(a2, a1);
  return a2;
}

uint64_t sub_2143035F4(uint64_t a1)
{
  destroy for SgLine.Points.Element(a1);
  return a1;
}

_QWORD *sub_214303620(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(a1[5], a1[6], a1[7], a1[8], a1[9]);
  return a1;
}

unint64_t sub_214303654()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F11F80;
  if (!qword_253F11F80)
  {
    v1 = sub_2141D7924(&qword_253F11F88);
    v2[0] = MEMORY[0x24BDF4760];
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F11F80);
  }
  return result;
}

uint64_t sub_2143036B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142ECB48(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_2143036C0(uint64_t a1, uint64_t a2)
{
  char *v2;
  _BYTE v3[304];

  sub_2141EDFD8(a2, (uint64_t)v3);
  v2 = (char *)sub_21430371C + 4 * byte_21442B9F1[sub_2141EF1D0((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_21430371C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  _BYTE v25[152];
  uint64_t v26;

  v3 = sub_2141EF754((uint64_t)&v26);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v13 = *(_OWORD *)(v3 + 56);
  v10 = *(_BYTE *)(v3 + 48);
  sub_2141DD130(*(_QWORD *)v3, v5, v6);
  swift_bridgeObjectRetain();
  sub_2141DD140(v8, v9, v10);
  sub_2142742C8(v1);
  v15 = v0;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = v13;
  v24 = 3;
  sub_2141EF6F4((uint64_t)&v15);
  sub_2141EF6B8((uint64_t)&v15, (uint64_t)v25);
  nullsub_1(v25, v11);
  sub_2141E801C((uint64_t)v25, v2 - 240, &qword_253F13428);
  return sub_2141E801C(v2 - 240, v14, &qword_253F13428);
}

uint64_t sub_2143039E0(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

unint64_t sub_214303A14()
{
  unint64_t result;

  result = qword_253F10850;
  if (!qword_253F10850)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for BasicChartSymbolShape, &type metadata for BasicChartSymbolShape);
    atomic_store(result, (unint64_t *)&qword_253F10850);
  }
  return result;
}

_OWORD *sub_214303A58(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_214303A70(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142EC988(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_214303A78(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142FF62C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_214303A80(uint64_t a1)
{
  uint64_t *v1;

  return sub_21430137C(a1, v1[2], v1[3], v1[4], v1[6]);
}

uint64_t sub_214303AA4(uint64_t a1)
{
  uint64_t v1;

  return sub_214300EDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_214303ABC()
{
  return sub_214300320();
}

uint64_t sub_214303AC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142EC68C(a1, a2, *(double **)(v2 + 16));
}

uint64_t sub_214303ACC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142EC52C(a1, a2, *(double **)(v2 + 16));
}

uint64_t sub_214303AD4()
{
  return sub_2142EDF9C();
}

uint64_t type metadata accessor for PointElementDrawer(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6ABA8);
}

uint64_t sub_214303AF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 184;
  swift_beginAccess();
  return sub_2141E070C(v3, a2, &qword_254D69D00);
}

uint64_t sub_214303B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_254D69D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_214303B98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 128;
  swift_beginAccess();
  return sub_2141E070C(v3, a2, &qword_254D69D00);
}

uint64_t type metadata accessor for RectangleElementDrawer(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6AB10);
}

uint64_t type metadata accessor for RuleElementDrawer(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6AA80);
}

uint64_t sub_214303C18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 72;
  swift_beginAccess();
  return sub_2141E070C(v3, a2, &qword_254D69D00);
}

uint64_t sub_214303C70(uint64_t a1)
{
  sub_21420B7DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_OWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
  return a1;
}

uint64_t destroy for SgAccessibilityDataField.LabelKey(uint64_t *a1)
{
  return sub_21421C24C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
}

uint64_t *initializeWithCopy for SgAccessibilityDataField.LabelKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  sub_21421C1D8(*a2, v4, v5, v6, v7, v8, v9);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  return a1;
}

uint64_t *assignWithCopy for SgAccessibilityDataField.LabelKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  sub_21421C1D8(*a2, v4, v5, v6, v7, v8, v9);
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  v15 = a1[4];
  v16 = a1[5];
  v17 = a1[6];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  sub_21421C24C(v11, v12, v13, v14, v15, v16, v17);
  return a1;
}

__n128 initializeWithTake for SgCompositingLayer(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for SgAccessibilityDataField.LabelKey(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v10;
  v11 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v11;
  sub_21421C24C(v3, v5, v4, v6, v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgAccessibilityDataField.LabelKey(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SgAccessibilityDataField.LabelKey(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_214303F1C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) >> 63;
}

uint64_t sub_214303F28(uint64_t result)
{
  *(_QWORD *)(result + 48) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_214303F38(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48) & 1 | (a2 << 63);
  *(_QWORD *)(result + 16) &= 1uLL;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SgAccessibilityDataField.LabelKey()
{
  return &type metadata for SgAccessibilityDataField.LabelKey;
}

uint64_t *sub_214303F68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(type metadata accessor for RenderParams(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_2144240D4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 20);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_214304028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for RenderParams(0) + 20);
  v2 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_OWORD *sub_214304090(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_214304124(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (_QWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + v10) = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 1) = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_2143041DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *sub_21430425C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (_QWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + v10) = *v12;
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 1) = v12[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2143042FC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21430430C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21430431C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RenderParams(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21430438C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(type metadata accessor for RenderParams(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_2144240D4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)v4 + v11;
    v14 = (char *)a2 + v11;
    v15 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v15;
    v13[32] = v14[32];
    v16 = (char *)v4 + v12;
    v17 = (char *)a2 + v12;
    v18 = sub_214424308();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v4;
}

uint64_t sub_214304470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(type metadata accessor for RenderParams(0) + 20);
  v5 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_214424308();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_OWORD *sub_2143044E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  v12[32] = v13[32];
  v15 = (char *)a1 + v11;
  v16 = (char *)a2 + v11;
  v17 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

_QWORD *sub_21430459C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_OWORD *)v12;
  v14 = *((_OWORD *)v12 + 1);
  v11[32] = v12[32];
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

_OWORD *sub_214304660(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  v12[32] = v13[32];
  v15 = (char *)a1 + v11;
  v16 = (char *)a2 + v11;
  v17 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_OWORD *sub_214304718(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  v12[32] = v13[32];
  v15 = (char *)a1 + v11;
  v16 = (char *)a2 + v11;
  v17 = sub_214424308();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_2143047D0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143047DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for RenderParams(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_214424308();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_214304850()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21430485C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for RenderParams(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_214424308();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_2143048D8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for RenderParams(319);
  if (v1 <= 0x3F)
  {
    result = sub_214424308();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_214304964(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(type metadata accessor for RenderParams(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_2144240D4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)v4 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_214304A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for RenderParams(0) + 20);
  v2 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_OWORD *sub_214304AC4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v10);
  v13 = (_QWORD *)((char *)a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = (_QWORD *)((char *)a1 + v11);
  v16 = (_QWORD *)((char *)a2 + v11);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_214304B78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = *v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v14 + 1) = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_214304C6C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

_OWORD *sub_214304CF4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RenderParams(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  swift_bridgeObjectRelease();
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = *v15;
  swift_bridgeObjectRelease();
  *((_QWORD *)v14 + 1) = v15[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_214304DC0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_214304DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for RenderParams(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_214304E4C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_214304E5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for RenderParams(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_214304ED4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RenderParams(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *assignWithCopy for SgNode.ViewContent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for SgNode.ViewContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SgNode.ViewContent()
{
  return &type metadata for SgNode.ViewContent;
}

ValueMetadata *type metadata accessor for SgAccessibilitySummaryKind()
{
  return &type metadata for SgAccessibilitySummaryKind;
}

uint64_t storeEnumTagSinglePayload for SgAnnotation.OverflowResolution(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65285 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65285 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_214305028 + 4 * byte_21442BA02[v4]))();
  *a1 = a2 - 251;
  return ((uint64_t (*)(void))((char *)sub_21430505C + 4 * byte_21442B9FD[v4]))();
}

uint64_t sub_21430505C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_214305064(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21430506CLL);
  return result;
}

uint64_t sub_214305078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x214305080);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_214305084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21430508C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SgAnnotation.OverflowResolution()
{
  return &type metadata for SgAnnotation.OverflowResolution;
}

uint64_t getEnumTagSinglePayload for SgAnnotation.CollisionResolution(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[56])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SgAnnotation.CollisionResolution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgAnnotation.CollisionResolution()
{
  return &type metadata for SgAnnotation.CollisionResolution;
}

ValueMetadata *type metadata accessor for SgAnnotation.Orientation()
{
  return &type metadata for SgAnnotation.Orientation;
}

uint64_t destroy for SgAccessibilityIndividual(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 80))
  {
    sub_2141ED0BC(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 112))
  {
    sub_2141ED0BC(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 224);
  v8 = *(_QWORD *)(a1 + 256);
  v9 = *(_QWORD *)(a1 + 272);
  if (v7 > 1
    || (v2 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v3 > 1
    || (v6 | v5) & 0xF000000000000007 | v4 & 0xFFFFFFFFFFFFFF7CLL
    || (v9 | *(_QWORD *)(a1 + 264)) & 0xF000000000000007 | v8 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v2, *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), v3, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v4, v5, v6, *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), v7, *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248), v8, *(_QWORD *)(a1 + 264), v9);
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a1 + 288);
  v11 = *(_QWORD *)(a1 + 312);
  v12 = *(_QWORD *)(a1 + 344);
  v13 = *(_QWORD *)(a1 + 352);
  v14 = *(_QWORD *)(a1 + 360);
  v15 = *(_QWORD *)(a1 + 384);
  v16 = *(_QWORD *)(a1 + 416);
  v17 = *(_QWORD *)(a1 + 432);
  if (v15 > 1
    || (v10 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v11 > 1
    || (v14 | v13) & 0xF000000000000007 | v12 & 0xFFFFFFFFFFFFFF7CLL
    || (v17 | *(_QWORD *)(a1 + 424)) & 0xF000000000000007 | v16 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v10, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 304), v11, *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 336), v12, v13, v14, *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), v15, *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), v16, *(_QWORD *)(a1 + 424), v17);
  }
  result = *(_QWORD *)(a1 + 440);
  v19 = *(_QWORD *)(a1 + 464);
  v20 = *(_QWORD *)(a1 + 496);
  v21 = *(_QWORD *)(a1 + 504);
  v22 = *(_QWORD *)(a1 + 512);
  v23 = *(_QWORD *)(a1 + 536);
  v24 = *(_QWORD *)(a1 + 568);
  v25 = *(_QWORD *)(a1 + 584);
  if (v23 > 1
    || (result & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v19 > 1
    || (v22 | v21) & 0xF000000000000007 | v20 & 0xFFFFFFFFFFFFFF7CLL
    || (v25 | *(_QWORD *)(a1 + 576)) & 0xF000000000000007 | v24 & 0xFFFFFFFFFFFFFF7CLL)
  {
    return sub_2141EF5D4(result, *(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), v19, *(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488), v20, v21, v22, *(_QWORD *)(a1 + 520), *(_QWORD *)(a1 + 528), v23, *(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 560), v24, *(_QWORD *)(a1 + 576), v25);
  }
  return result;
}

uint64_t initializeWithCopy for SgAccessibilityIndividual(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  if (!v5)
  {
    v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    if (*(_QWORD *)(a2 + 112))
      goto LABEL_3;
LABEL_5:
    v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 72);
  sub_2141DD130(v6, v7, v8);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(a2 + 112))
    goto LABEL_5;
LABEL_3:
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_BYTE *)(a2 + 104);
  sub_2141DD130(v9, v10, v11);
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
LABEL_6:
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 152);
  v16 = *(_QWORD *)(a2 + 200);
  v95 = *(_QWORD *)(a2 + 184);
  v98 = *(_QWORD *)(a2 + 192);
  v17 = *(_QWORD *)(a2 + 224);
  v18 = *(_QWORD *)(a2 + 256);
  v19 = *(_QWORD *)(a2 + 264);
  v20 = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  if (v17 > 1
    || (v14 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v15 > 1
    || (v16 | v98) & 0xF000000000000007 | v95 & 0xFFFFFFFFFFFFFF7CLL
    || (v20 | v19) & 0xF000000000000007 | v18 & 0xFFFFFFFFFFFFFF7CLL)
  {
    v67 = *(_QWORD *)(a2 + 176);
    v68 = *(_QWORD *)(a2 + 144);
    v73 = *(_QWORD *)(a2 + 208);
    v76 = *(_QWORD *)(a2 + 216);
    v79 = *(_QWORD *)(a2 + 232);
    v82 = *(_QWORD *)(a2 + 240);
    v85 = *(_QWORD *)(a2 + 248);
    v92 = v20;
    v65 = v20;
    v90 = v19;
    v64 = v19;
    v62 = v17;
    v25 = *(_QWORD *)(a2 + 136);
    v70 = v17;
    v26 = *(_QWORD *)(a2 + 160);
    v27 = *(_QWORD *)(a2 + 168);
    sub_21420B7DC(v14, v25, v68, v15, v26, v27, v67, v95, v98, v16, v73, v76, v62, v79, v82, v85, v18, v64, v65);
    *(_QWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 136) = v25;
    *(_QWORD *)(a1 + 144) = v68;
    *(_QWORD *)(a1 + 152) = v15;
    *(_QWORD *)(a1 + 160) = v26;
    *(_QWORD *)(a1 + 168) = v27;
    *(_QWORD *)(a1 + 176) = v67;
    *(_QWORD *)(a1 + 184) = v95;
    *(_QWORD *)(a1 + 192) = v98;
    *(_QWORD *)(a1 + 200) = v16;
    *(_QWORD *)(a1 + 208) = v73;
    *(_QWORD *)(a1 + 216) = v76;
    *(_QWORD *)(a1 + 224) = v70;
    *(_QWORD *)(a1 + 232) = v79;
    *(_QWORD *)(a1 + 240) = v82;
    *(_QWORD *)(a1 + 248) = v85;
    *(_QWORD *)(a1 + 256) = v18;
    *(_QWORD *)(a1 + 264) = v90;
    *(_QWORD *)(a1 + 272) = v92;
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v21;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    v22 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v22;
    v23 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v23;
    v24 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v24;
  }
  v28 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v29 = *(_QWORD *)(a2 + 312);
  v30 = *(_QWORD *)(a2 + 352);
  v99 = *(_QWORD *)(a2 + 344);
  v31 = *(_QWORD *)(a2 + 360);
  v32 = *(_QWORD *)(a2 + 384);
  v33 = *(_QWORD *)(a2 + 416);
  v34 = *(_QWORD *)(a2 + 424);
  v35 = *(_QWORD *)(a2 + 432);
  swift_bridgeObjectRetain();
  if (v32 > 1
    || (v28 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v29 > 1
    || (v31 | v30) & 0xF000000000000007 | v99 & 0xFFFFFFFFFFFFFF7CLL
    || (v35 | v34) & 0xF000000000000007 | v33 & 0xFFFFFFFFFFFFFF7CLL)
  {
    v40 = v34;
    v96 = v34;
    v41 = *(_QWORD *)(a2 + 304);
    v69 = *(_QWORD *)(a2 + 320);
    v71 = *(_QWORD *)(a2 + 336);
    v77 = *(_QWORD *)(a2 + 368);
    v80 = *(_QWORD *)(a2 + 376);
    v83 = *(_QWORD *)(a2 + 392);
    v86 = *(_QWORD *)(a2 + 400);
    v88 = *(_QWORD *)(a2 + 408);
    v93 = v35;
    v66 = v35;
    v63 = v32;
    v42 = *(_QWORD *)(a2 + 296);
    v74 = v32;
    v43 = *(_QWORD *)(a2 + 328);
    sub_21420B7DC(v28, v42, v41, v29, v69, v43, v71, v99, v30, v31, v77, v80, v63, v83, v86, v88, v33, v40, v66);
    *(_QWORD *)(a1 + 288) = v28;
    *(_QWORD *)(a1 + 296) = v42;
    *(_QWORD *)(a1 + 304) = v41;
    *(_QWORD *)(a1 + 312) = v29;
    *(_QWORD *)(a1 + 320) = v69;
    *(_QWORD *)(a1 + 328) = v43;
    *(_QWORD *)(a1 + 336) = v71;
    *(_QWORD *)(a1 + 344) = v99;
    *(_QWORD *)(a1 + 352) = v30;
    *(_QWORD *)(a1 + 360) = v31;
    *(_QWORD *)(a1 + 368) = v77;
    *(_QWORD *)(a1 + 376) = v80;
    *(_QWORD *)(a1 + 384) = v74;
    *(_QWORD *)(a1 + 392) = v83;
    *(_QWORD *)(a1 + 400) = v86;
    *(_QWORD *)(a1 + 408) = v88;
    *(_QWORD *)(a1 + 416) = v33;
    *(_QWORD *)(a1 + 424) = v96;
    *(_QWORD *)(a1 + 432) = v93;
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v36;
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    v37 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v37;
    v38 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v38;
    v39 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v39;
  }
  v44 = *(_QWORD *)(a2 + 440);
  v45 = *(_QWORD *)(a2 + 464);
  v46 = *(_QWORD *)(a2 + 496);
  v47 = *(_QWORD *)(a2 + 504);
  v48 = *(_QWORD *)(a2 + 512);
  v49 = *(_QWORD *)(a2 + 536);
  v50 = *(_QWORD *)(a2 + 568);
  v51 = *(_QWORD *)(a2 + 576);
  v52 = *(_QWORD *)(a2 + 584);
  if (v49 > 1
    || (v44 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v45 > 1
    || (v48 | v47) & 0xF000000000000007 | v46 & 0xFFFFFFFFFFFFFF7CLL
    || (v52 | v51) & 0xF000000000000007 | v50 & 0xFFFFFFFFFFFFFF7CLL)
  {
    v57 = *(_QWORD *)(a2 + 448);
    v72 = *(_QWORD *)(a2 + 456);
    v58 = *(_QWORD *)(a2 + 472);
    v59 = *(_QWORD *)(a2 + 480);
    v60 = *(_QWORD *)(a2 + 488);
    v89 = *(_QWORD *)(a2 + 520);
    v91 = *(_QWORD *)(a2 + 528);
    v94 = *(_QWORD *)(a2 + 544);
    v97 = *(_QWORD *)(a2 + 552);
    v100 = *(_QWORD *)(a2 + 560);
    v87 = *(_QWORD *)(a2 + 536);
    v78 = *(_QWORD *)(a2 + 568);
    v81 = *(_QWORD *)(a2 + 576);
    v84 = *(_QWORD *)(a2 + 584);
    v75 = *(_QWORD *)(a2 + 512);
    sub_21420B7DC(v44, v57, v72, v45, v58, v59, v60, v46, v47, v48, v89, v91, v49, v94, v97, v100, v50, v51, v52);
    *(_QWORD *)(a1 + 440) = v44;
    *(_QWORD *)(a1 + 448) = v57;
    *(_QWORD *)(a1 + 456) = v72;
    *(_QWORD *)(a1 + 464) = v45;
    *(_QWORD *)(a1 + 472) = v58;
    *(_QWORD *)(a1 + 480) = v59;
    *(_QWORD *)(a1 + 488) = v60;
    *(_QWORD *)(a1 + 496) = v46;
    *(_QWORD *)(a1 + 504) = v47;
    *(_QWORD *)(a1 + 512) = v75;
    *(_QWORD *)(a1 + 520) = v89;
    *(_QWORD *)(a1 + 528) = v91;
    *(_QWORD *)(a1 + 536) = v87;
    *(_QWORD *)(a1 + 544) = v94;
    *(_QWORD *)(a1 + 552) = v97;
    *(_QWORD *)(a1 + 560) = v100;
    *(_QWORD *)(a1 + 568) = v78;
    *(_QWORD *)(a1 + 576) = v81;
    *(_QWORD *)(a1 + 584) = v84;
  }
  else
  {
    v53 = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 552) = v53;
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    v54 = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 488) = v54;
    v55 = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 520) = v55;
    v56 = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(a1 + 456) = v56;
  }
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_BYTE *)(a1 + 593) = *(_BYTE *)(a2 + 593);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  return a1;
}

uint64_t assignWithCopy for SgAccessibilityIndividual(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  _BYTE *v128;
  _OWORD *v129;
  _OWORD *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 56);
  v5 = (_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 56);
      v8 = *(_QWORD *)(a2 + 64);
      v9 = *(_BYTE *)(a2 + 72);
      sub_2141DD130(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(a1 + 56) = v7;
      *(_QWORD *)(a1 + 64) = v8;
      *(_BYTE *)(a1 + 72) = v9;
      sub_2141ED0BC(v10, v11, v12);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 56);
      v16 = *(_OWORD *)(a2 + 72);
      *v4 = *v5;
      *(_OWORD *)(a1 + 72) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 56);
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_BYTE *)(a2 + 72);
    sub_2141DD130(v13, v14, v15);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v14;
    *(_BYTE *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 72);
    *v4 = *v5;
    *(_OWORD *)(a1 + 72) = v17;
  }
  v18 = (_OWORD *)(a1 + 88);
  v19 = (_OWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v20)
    {
      v21 = *(_QWORD *)(a2 + 88);
      v22 = *(_QWORD *)(a2 + 96);
      v23 = *(_BYTE *)(a2 + 104);
      sub_2141DD130(v21, v22, v23);
      v24 = *(_QWORD *)(a1 + 88);
      v25 = *(_QWORD *)(a1 + 96);
      v26 = *(_BYTE *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = v21;
      *(_QWORD *)(a1 + 96) = v22;
      *(_BYTE *)(a1 + 104) = v23;
      sub_2141ED0BC(v24, v25, v26);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 88);
      v30 = *(_OWORD *)(a2 + 104);
      *v18 = *v19;
      *(_OWORD *)(a1 + 104) = v30;
    }
  }
  else if (v20)
  {
    v27 = *(_QWORD *)(a2 + 88);
    v28 = *(_QWORD *)(a2 + 96);
    v29 = *(_BYTE *)(a2 + 104);
    sub_2141DD130(v27, v28, v29);
    *(_QWORD *)(a1 + 88) = v27;
    *(_QWORD *)(a1 + 96) = v28;
    *(_BYTE *)(a1 + 104) = v29;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 104);
    *v18 = *v19;
    *(_OWORD *)(a1 + 104) = v31;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = (_OWORD *)(a1 + 128);
  v33 = (_OWORD *)(a2 + 128);
  v34 = *(_QWORD *)(a2 + 128);
  v35 = *(_QWORD *)(a2 + 152);
  v36 = *(_QWORD *)(a2 + 184);
  v37 = *(_QWORD *)(a2 + 192);
  v38 = *(_QWORD *)(a2 + 200);
  v39 = *(_QWORD *)(a2 + 224);
  v40 = *(_QWORD *)(a2 + 256);
  v41 = *(_QWORD *)(a2 + 264);
  v42 = *(_QWORD *)(a2 + 272);
  v47 = v34 >> 3 == 0xFFFFFFFF
     && v35 < 2
     && ((v38 | v37) & 0xF000000000000007 | v36 & 0xFFFFFFFFFFFFFF7CLL) == 0
     && v39 < 2
     && ((v42 | v41) & 0xF000000000000007 | v40 & 0xFFFFFFFFFFFFFF7CLL) == 0;
  if (*(_QWORD *)(a1 + 224) > 1uLL
    || (*(_QWORD *)(a1 + 128) & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || *(_QWORD *)(a1 + 152) > 1uLL
    || (*(_QWORD *)(a1 + 200) | *(_QWORD *)(a1 + 192)) & 0xF000000000000007 | *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFF7CLL
    || (*(_QWORD *)(a1 + 272) | *(_QWORD *)(a1 + 264)) & 0xF000000000000007 | *(_QWORD *)(a1 + 256) & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v47)
    {
      sub_2143064F4(a1 + 128);
      v55 = *(_OWORD *)(a2 + 144);
      *v32 = *v33;
      *(_OWORD *)(a1 + 144) = v55;
      v56 = *(_OWORD *)(a2 + 208);
      v58 = *(_OWORD *)(a2 + 160);
      v57 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v56;
      *(_OWORD *)(a1 + 160) = v58;
      *(_OWORD *)(a1 + 176) = v57;
      v60 = *(_OWORD *)(a2 + 240);
      v59 = *(_OWORD *)(a2 + 256);
      v61 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v60;
      *(_OWORD *)(a1 + 256) = v59;
      *(_OWORD *)(a1 + 224) = v61;
    }
    else
    {
      v180 = *(_QWORD *)(a2 + 144);
      v186 = *(_QWORD *)(a2 + 136);
      v64 = *(_QWORD *)(a2 + 160);
      v65 = *(_QWORD *)(a2 + 168);
      v192 = *(_QWORD *)(a2 + 176);
      v198 = *(_QWORD *)(a2 + 208);
      v204 = *(_QWORD *)(a2 + 216);
      v210 = *(_QWORD *)(a2 + 232);
      v216 = *(_QWORD *)(a2 + 240);
      v220 = *(_QWORD *)(a2 + 248);
      v226 = *(_QWORD *)(a2 + 256);
      v232 = *(_QWORD *)(a2 + 264);
      v238 = *(_QWORD *)(a2 + 272);
      sub_21420B7DC(v34, v186, v180, v35, v64, v65, v192, v36, v37, v38, v198, v204, v39, v210, v216, v220, v40, v41, v42);
      v66 = *(_QWORD *)(a1 + 128);
      v67 = *(_QWORD *)(a1 + 136);
      v68 = *(_QWORD *)(a1 + 144);
      v69 = *(_QWORD *)(a1 + 152);
      v70 = *(_QWORD *)(a1 + 160);
      v71 = *(_QWORD *)(a1 + 168);
      v72 = *(_QWORD *)(a1 + 176);
      v73 = *(_QWORD *)(a1 + 184);
      v74 = *(_OWORD *)(a1 + 192);
      v75 = *(_OWORD *)(a1 + 208);
      v76 = *(_OWORD *)(a1 + 224);
      v77 = *(_OWORD *)(a1 + 240);
      v78 = *(_OWORD *)(a1 + 256);
      v79 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)(a1 + 128) = v34;
      *(_QWORD *)(a1 + 136) = v186;
      *(_QWORD *)(a1 + 144) = v180;
      *(_QWORD *)(a1 + 152) = v35;
      *(_QWORD *)(a1 + 160) = v64;
      *(_QWORD *)(a1 + 168) = v65;
      *(_QWORD *)(a1 + 176) = v192;
      *(_QWORD *)(a1 + 184) = v36;
      *(_QWORD *)(a1 + 192) = v37;
      *(_QWORD *)(a1 + 200) = v38;
      *(_QWORD *)(a1 + 208) = v198;
      *(_QWORD *)(a1 + 216) = v204;
      *(_QWORD *)(a1 + 224) = v39;
      *(_QWORD *)(a1 + 232) = v210;
      *(_QWORD *)(a1 + 240) = v216;
      *(_QWORD *)(a1 + 248) = v220;
      *(_QWORD *)(a1 + 256) = v226;
      *(_QWORD *)(a1 + 264) = v232;
      *(_QWORD *)(a1 + 272) = v238;
      sub_2141EF5D4(v66, v67, v68, v69, v70, v71, v72, v73, v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76, *((uint64_t *)&v76 + 1), v77, *((uint64_t *)&v77 + 1), v78, *((uint64_t *)&v78 + 1), v79);
    }
  }
  else if (v47)
  {
    v48 = *(_OWORD *)(a2 + 144);
    *v32 = *v33;
    *(_OWORD *)(a1 + 144) = v48;
    v49 = *(_OWORD *)(a2 + 160);
    v50 = *(_OWORD *)(a2 + 176);
    v51 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v51;
    *(_OWORD *)(a1 + 160) = v49;
    *(_OWORD *)(a1 + 176) = v50;
    v52 = *(_OWORD *)(a2 + 224);
    v53 = *(_OWORD *)(a2 + 240);
    v54 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v53;
    *(_OWORD *)(a1 + 256) = v54;
    *(_OWORD *)(a1 + 224) = v52;
  }
  else
  {
    v179 = *(_QWORD *)(a2 + 144);
    v185 = *(_QWORD *)(a2 + 136);
    v62 = *(_QWORD *)(a2 + 160);
    v63 = *(_QWORD *)(a2 + 168);
    v191 = *(_QWORD *)(a2 + 176);
    v197 = *(_QWORD *)(a2 + 208);
    v203 = *(_QWORD *)(a2 + 216);
    v209 = *(_QWORD *)(a2 + 232);
    v215 = *(_QWORD *)(a2 + 240);
    v219 = *(_QWORD *)(a2 + 248);
    v225 = *(_QWORD *)(a2 + 256);
    v231 = *(_QWORD *)(a2 + 264);
    v237 = *(_QWORD *)(a2 + 272);
    sub_21420B7DC(v34, v185, v179, v35, v62, v63, v191, v36, v37, v38, v197, v203, v39, v209, v215, v219, v40, v41, v42);
    *(_QWORD *)(a1 + 128) = v34;
    *(_QWORD *)(a1 + 136) = v185;
    *(_QWORD *)(a1 + 144) = v179;
    *(_QWORD *)(a1 + 152) = v35;
    *(_QWORD *)(a1 + 160) = v62;
    *(_QWORD *)(a1 + 168) = v63;
    *(_QWORD *)(a1 + 176) = v191;
    *(_QWORD *)(a1 + 184) = v36;
    *(_QWORD *)(a1 + 192) = v37;
    *(_QWORD *)(a1 + 200) = v38;
    *(_QWORD *)(a1 + 208) = v197;
    *(_QWORD *)(a1 + 216) = v203;
    *(_QWORD *)(a1 + 224) = v39;
    *(_QWORD *)(a1 + 232) = v209;
    *(_QWORD *)(a1 + 240) = v215;
    *(_QWORD *)(a1 + 248) = v219;
    *(_QWORD *)(a1 + 256) = v225;
    *(_QWORD *)(a1 + 264) = v231;
    *(_QWORD *)(a1 + 272) = v237;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80 = (_OWORD *)(a1 + 288);
  v81 = (_OWORD *)(a2 + 288);
  v82 = *(_QWORD *)(a2 + 288);
  v83 = *(_QWORD *)(a2 + 312);
  v84 = *(_QWORD *)(a2 + 344);
  v85 = *(_QWORD *)(a2 + 352);
  v86 = *(_QWORD *)(a2 + 360);
  v87 = *(_QWORD *)(a2 + 384);
  v88 = *(_QWORD *)(a2 + 416);
  v89 = *(_QWORD *)(a2 + 424);
  v90 = *(_QWORD *)(a2 + 432);
  v95 = v82 >> 3 == 0xFFFFFFFF
     && v83 < 2
     && ((v86 | v85) & 0xF000000000000007 | v84 & 0xFFFFFFFFFFFFFF7CLL) == 0
     && v87 < 2
     && ((v90 | v89) & 0xF000000000000007 | v88 & 0xFFFFFFFFFFFFFF7CLL) == 0;
  if (*(_QWORD *)(a1 + 384) > 1uLL
    || (*(_QWORD *)(a1 + 288) & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || *(_QWORD *)(a1 + 312) > 1uLL
    || (*(_QWORD *)(a1 + 360) | *(_QWORD *)(a1 + 352)) & 0xF000000000000007 | *(_QWORD *)(a1 + 344) & 0xFFFFFFFFFFFFFF7CLL
    || (*(_QWORD *)(a1 + 432) | *(_QWORD *)(a1 + 424)) & 0xF000000000000007 | *(_QWORD *)(a1 + 416) & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v95)
    {
      sub_2143064F4(a1 + 288);
      v103 = *(_OWORD *)(a2 + 304);
      *v80 = *v81;
      *(_OWORD *)(a1 + 304) = v103;
      v104 = *(_OWORD *)(a2 + 368);
      v106 = *(_OWORD *)(a2 + 320);
      v105 = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = v104;
      *(_OWORD *)(a1 + 320) = v106;
      *(_OWORD *)(a1 + 336) = v105;
      v108 = *(_OWORD *)(a2 + 400);
      v107 = *(_OWORD *)(a2 + 416);
      v109 = *(_OWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 400) = v108;
      *(_OWORD *)(a1 + 416) = v107;
      *(_OWORD *)(a1 + 384) = v109;
    }
    else
    {
      v182 = *(_QWORD *)(a2 + 304);
      v188 = *(_QWORD *)(a2 + 296);
      v112 = *(_QWORD *)(a2 + 320);
      v113 = *(_QWORD *)(a2 + 328);
      v194 = *(_QWORD *)(a2 + 336);
      v200 = *(_QWORD *)(a2 + 368);
      v206 = *(_QWORD *)(a2 + 376);
      v212 = *(_QWORD *)(a2 + 392);
      v218 = *(_QWORD *)(a2 + 400);
      v222 = *(_QWORD *)(a2 + 408);
      v228 = *(_QWORD *)(a2 + 416);
      v234 = *(_QWORD *)(a2 + 424);
      v240 = *(_QWORD *)(a2 + 432);
      sub_21420B7DC(v82, v188, v182, v83, v112, v113, v194, v84, v85, v86, v200, v206, v87, v212, v218, v222, v88, v89, v90);
      v114 = *(_QWORD *)(a1 + 288);
      v115 = *(_QWORD *)(a1 + 296);
      v116 = *(_QWORD *)(a1 + 304);
      v117 = *(_QWORD *)(a1 + 312);
      v118 = *(_QWORD *)(a1 + 320);
      v119 = *(_QWORD *)(a1 + 328);
      v120 = *(_QWORD *)(a1 + 336);
      v121 = *(_QWORD *)(a1 + 344);
      v122 = *(_OWORD *)(a1 + 352);
      v123 = *(_OWORD *)(a1 + 368);
      v124 = *(_OWORD *)(a1 + 384);
      v125 = *(_OWORD *)(a1 + 400);
      v126 = *(_OWORD *)(a1 + 416);
      v127 = *(_QWORD *)(a1 + 432);
      *(_QWORD *)(a1 + 288) = v82;
      *(_QWORD *)(a1 + 296) = v188;
      *(_QWORD *)(a1 + 304) = v182;
      *(_QWORD *)(a1 + 312) = v83;
      *(_QWORD *)(a1 + 320) = v112;
      *(_QWORD *)(a1 + 328) = v113;
      *(_QWORD *)(a1 + 336) = v194;
      *(_QWORD *)(a1 + 344) = v84;
      *(_QWORD *)(a1 + 352) = v85;
      *(_QWORD *)(a1 + 360) = v86;
      *(_QWORD *)(a1 + 368) = v200;
      *(_QWORD *)(a1 + 376) = v206;
      *(_QWORD *)(a1 + 384) = v87;
      *(_QWORD *)(a1 + 392) = v212;
      *(_QWORD *)(a1 + 400) = v218;
      *(_QWORD *)(a1 + 408) = v222;
      *(_QWORD *)(a1 + 416) = v228;
      *(_QWORD *)(a1 + 424) = v234;
      *(_QWORD *)(a1 + 432) = v240;
      sub_2141EF5D4(v114, v115, v116, v117, v118, v119, v120, v121, v122, *((uint64_t *)&v122 + 1), v123, *((uint64_t *)&v123 + 1), v124, *((uint64_t *)&v124 + 1), v125, *((uint64_t *)&v125 + 1), v126, *((uint64_t *)&v126 + 1), v127);
    }
  }
  else if (v95)
  {
    v96 = *(_OWORD *)(a2 + 304);
    *v80 = *v81;
    *(_OWORD *)(a1 + 304) = v96;
    v97 = *(_OWORD *)(a2 + 320);
    v98 = *(_OWORD *)(a2 + 336);
    v99 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v99;
    *(_OWORD *)(a1 + 320) = v97;
    *(_OWORD *)(a1 + 336) = v98;
    v100 = *(_OWORD *)(a2 + 384);
    v101 = *(_OWORD *)(a2 + 400);
    v102 = *(_OWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 400) = v101;
    *(_OWORD *)(a1 + 416) = v102;
    *(_OWORD *)(a1 + 384) = v100;
  }
  else
  {
    v181 = *(_QWORD *)(a2 + 304);
    v187 = *(_QWORD *)(a2 + 296);
    v110 = *(_QWORD *)(a2 + 320);
    v111 = *(_QWORD *)(a2 + 328);
    v193 = *(_QWORD *)(a2 + 336);
    v199 = *(_QWORD *)(a2 + 368);
    v205 = *(_QWORD *)(a2 + 376);
    v211 = *(_QWORD *)(a2 + 392);
    v217 = *(_QWORD *)(a2 + 400);
    v221 = *(_QWORD *)(a2 + 408);
    v227 = *(_QWORD *)(a2 + 416);
    v233 = *(_QWORD *)(a2 + 424);
    v239 = *(_QWORD *)(a2 + 432);
    sub_21420B7DC(v82, v187, v181, v83, v110, v111, v193, v84, v85, v86, v199, v205, v87, v211, v217, v221, v88, v89, v90);
    *(_QWORD *)(a1 + 288) = v82;
    *(_QWORD *)(a1 + 296) = v187;
    *(_QWORD *)(a1 + 304) = v181;
    *(_QWORD *)(a1 + 312) = v83;
    *(_QWORD *)(a1 + 320) = v110;
    *(_QWORD *)(a1 + 328) = v111;
    *(_QWORD *)(a1 + 336) = v193;
    *(_QWORD *)(a1 + 344) = v84;
    *(_QWORD *)(a1 + 352) = v85;
    *(_QWORD *)(a1 + 360) = v86;
    *(_QWORD *)(a1 + 368) = v199;
    *(_QWORD *)(a1 + 376) = v205;
    *(_QWORD *)(a1 + 384) = v87;
    *(_QWORD *)(a1 + 392) = v211;
    *(_QWORD *)(a1 + 400) = v217;
    *(_QWORD *)(a1 + 408) = v221;
    *(_QWORD *)(a1 + 416) = v227;
    *(_QWORD *)(a1 + 424) = v233;
    *(_QWORD *)(a1 + 432) = v239;
  }
  v128 = (_BYTE *)(a2 + 592);
  v129 = (_OWORD *)(a1 + 440);
  v130 = (_OWORD *)(a2 + 440);
  v131 = *(_QWORD *)(a2 + 440);
  v132 = *(_QWORD *)(a2 + 464);
  v133 = *(_QWORD *)(a2 + 496);
  v134 = *(_QWORD *)(a2 + 504);
  v135 = *(_QWORD *)(a2 + 512);
  v136 = *(_QWORD *)(a2 + 536);
  v137 = *(_QWORD *)(a2 + 568);
  v138 = *(_QWORD *)(a2 + 576);
  v139 = *(_QWORD *)(a2 + 584);
  v144 = v131 >> 3 == 0xFFFFFFFF
      && v132 < 2
      && ((v135 | v134) & 0xF000000000000007 | v133 & 0xFFFFFFFFFFFFFF7CLL) == 0
      && v136 < 2
      && ((v139 | v138) & 0xF000000000000007 | v137 & 0xFFFFFFFFFFFFFF7CLL) == 0;
  if (*(_QWORD *)(a1 + 536) > 1uLL
    || (*(_QWORD *)(a1 + 440) & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || *(_QWORD *)(a1 + 464) > 1uLL
    || (*(_QWORD *)(a1 + 512) | *(_QWORD *)(a1 + 504)) & 0xF000000000000007 | *(_QWORD *)(a1 + 496) & 0xFFFFFFFFFFFFFF7CLL
    || (*(_QWORD *)(a1 + 584) | *(_QWORD *)(a1 + 576)) & 0xF000000000000007 | *(_QWORD *)(a1 + 568) & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v144)
    {
      sub_2143064F4(a1 + 440);
      v152 = *(_OWORD *)(a2 + 456);
      *v129 = *v130;
      *(_OWORD *)(a1 + 456) = v152;
      v153 = *(_OWORD *)(a2 + 520);
      v155 = *(_OWORD *)(a2 + 472);
      v154 = *(_OWORD *)(a2 + 488);
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 520) = v153;
      *(_OWORD *)(a1 + 472) = v155;
      *(_OWORD *)(a1 + 488) = v154;
      v157 = *(_OWORD *)(a2 + 552);
      v156 = *(_OWORD *)(a2 + 568);
      v158 = *(_OWORD *)(a2 + 536);
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 552) = v157;
      *(_OWORD *)(a1 + 568) = v156;
      *(_OWORD *)(a1 + 536) = v158;
    }
    else
    {
      v160 = *(_QWORD *)(a2 + 448);
      v161 = *(_QWORD *)(a2 + 472);
      v178 = *(_QWORD *)(a2 + 456);
      v184 = *(_QWORD *)(a2 + 488);
      v190 = *(_QWORD *)(a2 + 480);
      v196 = *(_QWORD *)(a2 + 520);
      v202 = *(_QWORD *)(a2 + 528);
      v208 = *(_QWORD *)(a2 + 544);
      v214 = *(_OWORD *)(a2 + 552);
      v224 = *(_QWORD *)(a2 + 568);
      v230 = *(_QWORD *)(a2 + 576);
      v236 = *(_QWORD *)(a2 + 584);
      sub_21420B7DC(v131, v160, v178, v132, v161, v190, v184, v133, v134, v135, v196, v202, v136, v208, *(_QWORD *)(a2 + 552), *(_QWORD *)(a2 + 560), v137, v138, v139);
      v162 = *(_QWORD *)(a1 + 440);
      v163 = *(_QWORD *)(a1 + 448);
      v164 = *(_QWORD *)(a1 + 456);
      v165 = *(_QWORD *)(a1 + 464);
      v166 = *(_QWORD *)(a1 + 472);
      v167 = *(_QWORD *)(a1 + 480);
      v168 = *(_QWORD *)(a1 + 488);
      v169 = *(_QWORD *)(a1 + 496);
      v170 = *(_OWORD *)(a1 + 504);
      v171 = *(_OWORD *)(a1 + 520);
      v172 = *(_OWORD *)(a1 + 536);
      v173 = *(_OWORD *)(a1 + 552);
      v174 = *(_OWORD *)(a1 + 568);
      v175 = *(_QWORD *)(a1 + 584);
      *(_QWORD *)(a1 + 440) = v131;
      *(_QWORD *)(a1 + 448) = v160;
      *(_QWORD *)(a1 + 456) = v178;
      *(_QWORD *)(a1 + 464) = v132;
      *(_QWORD *)(a1 + 472) = v161;
      *(_QWORD *)(a1 + 480) = v190;
      *(_QWORD *)(a1 + 488) = v184;
      *(_QWORD *)(a1 + 496) = v133;
      *(_QWORD *)(a1 + 504) = v134;
      *(_QWORD *)(a1 + 512) = v135;
      *(_QWORD *)(a1 + 520) = v196;
      *(_QWORD *)(a1 + 528) = v202;
      *(_QWORD *)(a1 + 536) = v136;
      *(_QWORD *)(a1 + 544) = v208;
      *(_OWORD *)(a1 + 552) = v214;
      *(_QWORD *)(a1 + 568) = v224;
      *(_QWORD *)(a1 + 576) = v230;
      *(_QWORD *)(a1 + 584) = v236;
      sub_2141EF5D4(v162, v163, v164, v165, v166, v167, v168, v169, v170, *((uint64_t *)&v170 + 1), v171, *((uint64_t *)&v171 + 1), v172, *((uint64_t *)&v172 + 1), v173, *((uint64_t *)&v173 + 1), v174, *((uint64_t *)&v174 + 1), v175);
    }
    v128 = (_BYTE *)(a2 + 592);
  }
  else if (v144)
  {
    v145 = *(_OWORD *)(a2 + 456);
    *v129 = *v130;
    *(_OWORD *)(a1 + 456) = v145;
    v146 = *(_OWORD *)(a2 + 472);
    v147 = *(_OWORD *)(a2 + 488);
    v148 = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 520) = v148;
    *(_OWORD *)(a1 + 472) = v146;
    *(_OWORD *)(a1 + 488) = v147;
    v149 = *(_OWORD *)(a2 + 536);
    v150 = *(_OWORD *)(a2 + 552);
    v151 = *(_OWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 552) = v150;
    *(_OWORD *)(a1 + 568) = v151;
    *(_OWORD *)(a1 + 536) = v149;
  }
  else
  {
    v177 = *(_QWORD *)(a2 + 456);
    v183 = *(_QWORD *)(a2 + 448);
    v159 = *(_QWORD *)(a2 + 472);
    v189 = *(_QWORD *)(a2 + 488);
    v195 = *(_QWORD *)(a2 + 480);
    v201 = *(_QWORD *)(a2 + 520);
    v207 = *(_QWORD *)(a2 + 528);
    v213 = *(_OWORD *)(a2 + 544);
    v241 = *(_QWORD *)(a2 + 560);
    v223 = *(_QWORD *)(a2 + 568);
    v229 = *(_QWORD *)(a2 + 576);
    v235 = *(_QWORD *)(a2 + 584);
    sub_21420B7DC(v131, v183, v177, v132, v159, v195, v189, v133, v134, v135, v201, v207, v136, v213, *((uint64_t *)&v213 + 1), v241, v137, v138, v139);
    v128 = (_BYTE *)(a2 + 592);
    *(_QWORD *)(a1 + 440) = v131;
    *(_QWORD *)(a1 + 448) = v183;
    *(_QWORD *)(a1 + 456) = v177;
    *(_QWORD *)(a1 + 464) = v132;
    *(_QWORD *)(a1 + 472) = v159;
    *(_QWORD *)(a1 + 480) = v195;
    *(_QWORD *)(a1 + 488) = v189;
    *(_QWORD *)(a1 + 496) = v133;
    *(_QWORD *)(a1 + 504) = v134;
    *(_QWORD *)(a1 + 512) = v135;
    *(_QWORD *)(a1 + 520) = v201;
    *(_QWORD *)(a1 + 528) = v207;
    *(_QWORD *)(a1 + 536) = v136;
    *(_OWORD *)(a1 + 544) = v213;
    *(_QWORD *)(a1 + 560) = v241;
    *(_QWORD *)(a1 + 568) = v223;
    *(_QWORD *)(a1 + 576) = v229;
    *(_QWORD *)(a1 + 584) = v235;
  }
  *(_BYTE *)(a1 + 592) = *v128;
  *(_BYTE *)(a1 + 593) = v128[1];
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  return a1;
}

uint64_t sub_2143064F4(uint64_t a1)
{
  destroy for SgAccessibilityDataField(a1);
  return a1;
}

void *initializeWithTake for SgAccessibilityIndividual(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x260uLL);
}

uint64_t assignWithTake for SgAccessibilityIndividual(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_QWORD *)(a2 + 80))
    {
      v5 = *(_BYTE *)(a2 + 72);
      v6 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = *(_BYTE *)(a1 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 72) = v5;
      sub_2141ED0BC(v6, v7, v8);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_21420D798(a1 + 56);
  }
  v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v9;
LABEL_6:
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_10:
    v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v14;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a2 + 112))
  {
    sub_21420D798(a1 + 88);
    goto LABEL_10;
  }
  v10 = *(_BYTE *)(a2 + 104);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = v10;
  sub_2141ED0BC(v11, v12, v13);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
LABEL_11:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 224);
  v22 = *(_QWORD *)(a1 + 256);
  v23 = *(_QWORD *)(a1 + 264);
  v24 = *(_QWORD *)(a1 + 272);
  v25 = *(_QWORD *)(a2 + 152);
  v26 = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a2 + 224);
  v30 = *(_QWORD *)(a2 + 256);
  v31 = *(_QWORD *)(a2 + 264);
  v32 = *(_QWORD *)(a2 + 272);
  if (v21 > 1
    || (v15 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v17 > 1
    || (v20 | v19) & 0xF000000000000007 | v18 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | v23) & 0xF000000000000007 | v22 & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v29 > 1
      || (v16 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
      || v25 > 1
      || (v28 | v27) & 0xF000000000000007 | v26 & 0xFFFFFFFFFFFFFF7CLL
      || (v32 | v31) & 0xF000000000000007 | v30 & 0xFFFFFFFFFFFFFF7CLL)
    {
      v37 = *(_QWORD *)(a2 + 176);
      v38 = *(_QWORD *)(a2 + 248);
      v40 = *(_QWORD *)(a1 + 136);
      v39 = *(_QWORD *)(a1 + 144);
      v41 = *(_QWORD *)(a1 + 168);
      v112 = *(_QWORD *)(a1 + 160);
      v42 = *(_QWORD *)(a1 + 176);
      v43 = *(_QWORD *)(a1 + 208);
      v44 = *(_QWORD *)(a1 + 216);
      v45 = *(_OWORD *)(a1 + 232);
      v46 = *(_QWORD *)(a1 + 248);
      *(_QWORD *)(a1 + 128) = v16;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 152) = v25;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = v37;
      *(_QWORD *)(a1 + 184) = v26;
      *(_QWORD *)(a1 + 192) = v27;
      *(_QWORD *)(a1 + 200) = v28;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 224) = v29;
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 248) = v38;
      *(_QWORD *)(a1 + 256) = v30;
      *(_QWORD *)(a1 + 264) = v31;
      *(_QWORD *)(a1 + 272) = v32;
      sub_2141EF5D4(v15, v40, v39, v17, v112, v41, v42, v18, v19, v20, v43, v44, v21, v45, *((uint64_t *)&v45 + 1), v46, v22, v23, v24);
      goto LABEL_24;
    }
    sub_2143064F4(a1 + 128);
  }
  v33 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v33;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v34 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v34;
  v35 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v35;
  v36 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v36;
LABEL_24:
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRelease();
  v47 = *(_QWORD *)(a1 + 288);
  v48 = *(_QWORD *)(a1 + 312);
  v49 = *(_QWORD *)(a1 + 344);
  v50 = *(_QWORD *)(a1 + 352);
  v51 = *(_QWORD *)(a1 + 360);
  v52 = *(_QWORD *)(a1 + 384);
  v53 = *(_QWORD *)(a1 + 416);
  v54 = *(_QWORD *)(a1 + 424);
  v55 = *(_QWORD *)(a1 + 432);
  v56 = *(_QWORD *)(a2 + 288);
  v57 = *(_QWORD *)(a2 + 312);
  v58 = *(_QWORD *)(a2 + 344);
  v59 = *(_QWORD *)(a2 + 352);
  v60 = *(_QWORD *)(a2 + 360);
  v61 = *(_QWORD *)(a2 + 384);
  v62 = *(_QWORD *)(a2 + 416);
  v63 = *(_QWORD *)(a2 + 424);
  v64 = *(_QWORD *)(a2 + 432);
  if (v52 > 1
    || (v47 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v48 > 1
    || (v51 | v50) & 0xF000000000000007 | v49 & 0xFFFFFFFFFFFFFF7CLL
    || (v55 | v54) & 0xF000000000000007 | v53 & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v61 > 1
      || (v56 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
      || v57 > 1
      || (v60 | v59) & 0xF000000000000007 | v58 & 0xFFFFFFFFFFFFFF7CLL
      || (v64 | v63) & 0xF000000000000007 | v62 & 0xFFFFFFFFFFFFFF7CLL)
    {
      v69 = *(_QWORD *)(a2 + 336);
      v70 = *(_QWORD *)(a2 + 408);
      v71 = *(_QWORD *)(a1 + 296);
      v72 = *(_QWORD *)(a1 + 304);
      v113 = *(_QWORD *)(a1 + 320);
      v108 = *(_QWORD *)(a1 + 336);
      v110 = *(_QWORD *)(a1 + 328);
      v74 = *(_QWORD *)(a1 + 368);
      v73 = *(_QWORD *)(a1 + 376);
      v75 = *(_OWORD *)(a1 + 392);
      v76 = *(_QWORD *)(a1 + 408);
      *(_QWORD *)(a1 + 288) = v56;
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 312) = v57;
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 336) = v69;
      *(_QWORD *)(a1 + 344) = v58;
      *(_QWORD *)(a1 + 352) = v59;
      *(_QWORD *)(a1 + 360) = v60;
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 384) = v61;
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 408) = v70;
      *(_QWORD *)(a1 + 416) = v62;
      *(_QWORD *)(a1 + 424) = v63;
      *(_QWORD *)(a1 + 432) = v64;
      sub_2141EF5D4(v47, v71, v72, v48, v113, v110, v108, v49, v50, v51, v74, v73, v52, v75, *((uint64_t *)&v75 + 1), v76, v53, v54, v55);
      goto LABEL_37;
    }
    sub_2143064F4(a1 + 288);
  }
  v65 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v65;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  v66 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v66;
  v67 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v67;
  v68 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v68;
LABEL_37:
  v77 = *(_QWORD *)(a1 + 440);
  v78 = *(_QWORD *)(a1 + 464);
  v79 = *(_QWORD *)(a1 + 496);
  v80 = *(_QWORD *)(a1 + 504);
  v81 = *(_QWORD *)(a1 + 512);
  v82 = *(_QWORD *)(a1 + 536);
  v83 = *(_QWORD *)(a1 + 568);
  v84 = *(_QWORD *)(a1 + 576);
  v85 = *(_QWORD *)(a1 + 584);
  v86 = *(_QWORD *)(a2 + 440);
  v87 = *(_QWORD *)(a2 + 464);
  v88 = *(_QWORD *)(a2 + 496);
  v89 = *(_QWORD *)(a2 + 504);
  v90 = *(_QWORD *)(a2 + 512);
  v91 = *(_QWORD *)(a2 + 536);
  v92 = *(_QWORD *)(a2 + 568);
  v93 = *(_QWORD *)(a2 + 576);
  v94 = *(_QWORD *)(a2 + 584);
  if (v82 > 1
    || (v77 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v78 > 1
    || (v81 | v80) & 0xF000000000000007 | v79 & 0xFFFFFFFFFFFFFF7CLL
    || (v85 | v84) & 0xF000000000000007 | v83 & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v91 > 1
      || (v86 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
      || v87 > 1
      || (v90 | v89) & 0xF000000000000007 | v88 & 0xFFFFFFFFFFFFFF7CLL
      || (v94 | v93) & 0xF000000000000007 | v92 & 0xFFFFFFFFFFFFFF7CLL)
    {
      v99 = *(_QWORD *)(a2 + 488);
      v100 = *(_QWORD *)(a2 + 560);
      v102 = *(_QWORD *)(a1 + 448);
      v101 = *(_QWORD *)(a1 + 456);
      v114 = *(_QWORD *)(a1 + 472);
      v109 = *(_QWORD *)(a1 + 488);
      v111 = *(_QWORD *)(a1 + 480);
      v103 = *(_QWORD *)(a1 + 520);
      v104 = *(_QWORD *)(a1 + 528);
      v105 = *(_OWORD *)(a1 + 544);
      v106 = *(_QWORD *)(a1 + 560);
      *(_QWORD *)(a1 + 440) = v86;
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 464) = v87;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
      *(_QWORD *)(a1 + 488) = v99;
      *(_QWORD *)(a1 + 496) = v88;
      *(_QWORD *)(a1 + 504) = v89;
      *(_QWORD *)(a1 + 512) = v90;
      *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
      *(_QWORD *)(a1 + 536) = v91;
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 560) = v100;
      *(_QWORD *)(a1 + 568) = v92;
      *(_QWORD *)(a1 + 576) = v93;
      *(_QWORD *)(a1 + 584) = v94;
      sub_2141EF5D4(v77, v102, v101, v78, v114, v111, v109, v79, v80, v81, v103, v104, v82, v105, *((uint64_t *)&v105 + 1), v106, v83, v84, v85);
      goto LABEL_50;
    }
    sub_2143064F4(a1 + 440);
  }
  v95 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 552) = v95;
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  v96 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v96;
  v97 = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = v97;
  v98 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v98;
LABEL_50:
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_BYTE *)(a1 + 593) = *(_BYTE *)(a2 + 593);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgAccessibilityIndividual(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 608))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SgAccessibilityIndividual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 600) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 608) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 120) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 608) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgAccessibilityIndividual()
{
  return &type metadata for SgAccessibilityIndividual;
}

uint64_t destroy for SgAccessibilityGroup(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 80))
  {
    sub_2141ED0BC(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 112))
  {
    sub_2141ED0BC(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
    swift_bridgeObjectRelease();
  }
  v2 = *(_QWORD *)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 192);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(_QWORD *)(a1 + 248);
  v9 = *(_QWORD *)(a1 + 264);
  if (v7 > 1
    || (v2 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v3 > 1
    || (v6 | v5) & 0xF000000000000007 | v4 & 0xFFFFFFFFFFFFFF7CLL
    || (v9 | *(_QWORD *)(a1 + 256)) & 0xF000000000000007 | v8 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v2, *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v3, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), v4, v5, v6, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), v7, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), v8, *(_QWORD *)(a1 + 256), v9);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SgAccessibilityGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  if (!v5)
  {
    v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v13;
    v9 = *(_QWORD *)(a2 + 112);
    if (v9)
      goto LABEL_3;
LABEL_5:
    v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v14;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 72);
  sub_2141DD130(v6, v7, v8);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRetain();
  v9 = *(_QWORD *)(a2 + 112);
  if (!v9)
    goto LABEL_5;
LABEL_3:
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_BYTE *)(a2 + 104);
  sub_2141DD130(v10, v11, v12);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRetain();
LABEL_6:
  v15 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a2 + 144);
  v17 = *(_QWORD *)(a2 + 176);
  v18 = *(_QWORD *)(a2 + 184);
  v19 = *(_QWORD *)(a2 + 192);
  v20 = *(_QWORD *)(a2 + 216);
  v21 = *(_QWORD *)(a2 + 248);
  v22 = *(_QWORD *)(a2 + 256);
  v23 = *(_QWORD *)(a2 + 264);
  if (v20 > 1
    || (v15 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v16 > 1
    || (v19 | v18) & 0xF000000000000007 | v17 & 0xFFFFFFFFFFFFFF7CLL
    || (v23 | v22) & 0xF000000000000007 | v21 & 0xFFFFFFFFFFFFFF7CLL)
  {
    v28 = *(_QWORD *)(a2 + 128);
    v34 = *(_QWORD *)(a2 + 136);
    v29 = *(_QWORD *)(a2 + 152);
    v30 = *(_QWORD *)(a2 + 160);
    v31 = *(_QWORD *)(a2 + 168);
    v40 = *(_QWORD *)(a2 + 200);
    v41 = *(_QWORD *)(a2 + 208);
    v42 = *(_QWORD *)(a2 + 224);
    v43 = *(_QWORD *)(a2 + 232);
    v44 = *(_QWORD *)(a2 + 240);
    v38 = *(_QWORD *)(a2 + 264);
    v39 = *(_QWORD *)(a2 + 216);
    v36 = *(_QWORD *)(a2 + 248);
    v37 = *(_QWORD *)(a2 + 256);
    v35 = *(_QWORD *)(a2 + 192);
    sub_21420B7DC(v15, v28, v34, v16, v29, v30, v31, v17, v18, v19, v40, v41, v20, v42, v43, v44, v21, v22, v23);
    *(_QWORD *)(a1 + 120) = v15;
    *(_QWORD *)(a1 + 128) = v28;
    *(_QWORD *)(a1 + 136) = v34;
    *(_QWORD *)(a1 + 144) = v16;
    *(_QWORD *)(a1 + 152) = v29;
    *(_QWORD *)(a1 + 160) = v30;
    *(_QWORD *)(a1 + 168) = v31;
    *(_QWORD *)(a1 + 176) = v17;
    *(_QWORD *)(a1 + 184) = v18;
    *(_QWORD *)(a1 + 192) = v35;
    *(_QWORD *)(a1 + 200) = v40;
    *(_QWORD *)(a1 + 208) = v41;
    *(_QWORD *)(a1 + 216) = v39;
    *(_QWORD *)(a1 + 224) = v42;
    *(_QWORD *)(a1 + 232) = v43;
    *(_QWORD *)(a1 + 240) = v44;
    *(_QWORD *)(a1 + 248) = v36;
    *(_QWORD *)(a1 + 256) = v37;
    *(_QWORD *)(a1 + 264) = v38;
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v24;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v25 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v25;
    v26 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v26;
    v27 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v27;
  }
  v32 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v32;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SgAccessibilityGroup(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 56);
  v5 = (_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 56);
      v8 = *(_QWORD *)(a2 + 64);
      v9 = *(_BYTE *)(a2 + 72);
      sub_2141DD130(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(a1 + 56) = v7;
      *(_QWORD *)(a1 + 64) = v8;
      *(_BYTE *)(a1 + 72) = v9;
      sub_2141ED0BC(v10, v11, v12);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 56);
      v16 = *(_OWORD *)(a2 + 72);
      *v4 = *v5;
      *(_OWORD *)(a1 + 72) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 56);
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_BYTE *)(a2 + 72);
    sub_2141DD130(v13, v14, v15);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v14;
    *(_BYTE *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 72);
    *v4 = *v5;
    *(_OWORD *)(a1 + 72) = v17;
  }
  v18 = (_OWORD *)(a1 + 88);
  v19 = (_OWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v20)
    {
      v21 = *(_QWORD *)(a2 + 88);
      v22 = *(_QWORD *)(a2 + 96);
      v23 = *(_BYTE *)(a2 + 104);
      sub_2141DD130(v21, v22, v23);
      v24 = *(_QWORD *)(a1 + 88);
      v25 = *(_QWORD *)(a1 + 96);
      v26 = *(_BYTE *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = v21;
      *(_QWORD *)(a1 + 96) = v22;
      *(_BYTE *)(a1 + 104) = v23;
      sub_2141ED0BC(v24, v25, v26);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 88);
      v30 = *(_OWORD *)(a2 + 104);
      *v18 = *v19;
      *(_OWORD *)(a1 + 104) = v30;
    }
  }
  else if (v20)
  {
    v27 = *(_QWORD *)(a2 + 88);
    v28 = *(_QWORD *)(a2 + 96);
    v29 = *(_BYTE *)(a2 + 104);
    sub_2141DD130(v27, v28, v29);
    *(_QWORD *)(a1 + 88) = v27;
    *(_QWORD *)(a1 + 96) = v28;
    *(_BYTE *)(a1 + 104) = v29;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 104);
    *v18 = *v19;
    *(_OWORD *)(a1 + 104) = v31;
  }
  v32 = (_OWORD *)(a1 + 120);
  v33 = (_OWORD *)(a2 + 120);
  v34 = *(_QWORD *)(a2 + 120);
  v35 = *(_QWORD *)(a2 + 144);
  v36 = *(_QWORD *)(a2 + 176);
  v37 = *(_QWORD *)(a2 + 184);
  v38 = *(_QWORD *)(a2 + 192);
  v39 = *(_QWORD *)(a2 + 216);
  v40 = *(_QWORD *)(a2 + 248);
  v41 = *(_QWORD *)(a2 + 256);
  v42 = *(_QWORD *)(a2 + 264);
  v47 = v34 >> 3 == 0xFFFFFFFF
     && v35 < 2
     && ((v38 | v37) & 0xF000000000000007 | v36 & 0xFFFFFFFFFFFFFF7CLL) == 0
     && v39 < 2
     && ((v42 | v41) & 0xF000000000000007 | v40 & 0xFFFFFFFFFFFFFF7CLL) == 0;
  if (*(_QWORD *)(a1 + 216) > 1uLL
    || (*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || *(_QWORD *)(a1 + 144) > 1uLL
    || (*(_QWORD *)(a1 + 192) | *(_QWORD *)(a1 + 184)) & 0xF000000000000007 | *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFF7CLL
    || (*(_QWORD *)(a1 + 264) | *(_QWORD *)(a1 + 256)) & 0xF000000000000007 | *(_QWORD *)(a1 + 248) & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v47)
    {
      sub_2143064F4(a1 + 120);
      v55 = *(_OWORD *)(a2 + 136);
      *v32 = *v33;
      *(_OWORD *)(a1 + 136) = v55;
      v56 = *(_OWORD *)(a2 + 200);
      v58 = *(_OWORD *)(a2 + 152);
      v57 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v56;
      *(_OWORD *)(a1 + 152) = v58;
      *(_OWORD *)(a1 + 168) = v57;
      v60 = *(_OWORD *)(a2 + 232);
      v59 = *(_OWORD *)(a2 + 248);
      v61 = *(_OWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 232) = v60;
      *(_OWORD *)(a1 + 248) = v59;
      *(_OWORD *)(a1 + 216) = v61;
    }
    else
    {
      v82 = *(_QWORD *)(a2 + 136);
      v84 = *(_QWORD *)(a2 + 128);
      v64 = *(_QWORD *)(a2 + 152);
      v65 = *(_QWORD *)(a2 + 160);
      v86 = *(_QWORD *)(a2 + 168);
      v88 = *(_QWORD *)(a2 + 200);
      v90 = *(_QWORD *)(a2 + 208);
      v92 = *(_QWORD *)(a2 + 224);
      v94 = *(_QWORD *)(a2 + 232);
      v96 = *(_QWORD *)(a2 + 240);
      v98 = *(_QWORD *)(a2 + 248);
      v100 = *(_QWORD *)(a2 + 256);
      v102 = *(_QWORD *)(a2 + 264);
      sub_21420B7DC(v34, v84, v82, v35, v64, v65, v86, v36, v37, v38, v88, v90, v39, v92, v94, v96, v40, v41, v42);
      v66 = *(_QWORD *)(a1 + 120);
      v67 = *(_QWORD *)(a1 + 128);
      v68 = *(_QWORD *)(a1 + 136);
      v69 = *(_QWORD *)(a1 + 144);
      v70 = *(_QWORD *)(a1 + 152);
      v71 = *(_QWORD *)(a1 + 160);
      v72 = *(_QWORD *)(a1 + 168);
      v73 = *(_QWORD *)(a1 + 176);
      v74 = *(_OWORD *)(a1 + 184);
      v75 = *(_OWORD *)(a1 + 200);
      v76 = *(_OWORD *)(a1 + 216);
      v77 = *(_OWORD *)(a1 + 232);
      v78 = *(_OWORD *)(a1 + 248);
      v79 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(a1 + 120) = v34;
      *(_QWORD *)(a1 + 128) = v84;
      *(_QWORD *)(a1 + 136) = v82;
      *(_QWORD *)(a1 + 144) = v35;
      *(_QWORD *)(a1 + 152) = v64;
      *(_QWORD *)(a1 + 160) = v65;
      *(_QWORD *)(a1 + 168) = v86;
      *(_QWORD *)(a1 + 176) = v36;
      *(_QWORD *)(a1 + 184) = v37;
      *(_QWORD *)(a1 + 192) = v38;
      *(_QWORD *)(a1 + 200) = v88;
      *(_QWORD *)(a1 + 208) = v90;
      *(_QWORD *)(a1 + 216) = v39;
      *(_QWORD *)(a1 + 224) = v92;
      *(_QWORD *)(a1 + 232) = v94;
      *(_QWORD *)(a1 + 240) = v96;
      *(_QWORD *)(a1 + 248) = v98;
      *(_QWORD *)(a1 + 256) = v100;
      *(_QWORD *)(a1 + 264) = v102;
      sub_2141EF5D4(v66, v67, v68, v69, v70, v71, v72, v73, v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76, *((uint64_t *)&v76 + 1), v77, *((uint64_t *)&v77 + 1), v78, *((uint64_t *)&v78 + 1), v79);
    }
  }
  else if (v47)
  {
    v48 = *(_OWORD *)(a2 + 136);
    *v32 = *v33;
    *(_OWORD *)(a1 + 136) = v48;
    v49 = *(_OWORD *)(a2 + 152);
    v50 = *(_OWORD *)(a2 + 168);
    v51 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v51;
    *(_OWORD *)(a1 + 152) = v49;
    *(_OWORD *)(a1 + 168) = v50;
    v52 = *(_OWORD *)(a2 + 216);
    v53 = *(_OWORD *)(a2 + 232);
    v54 = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 232) = v53;
    *(_OWORD *)(a1 + 248) = v54;
    *(_OWORD *)(a1 + 216) = v52;
  }
  else
  {
    v81 = *(_QWORD *)(a2 + 136);
    v83 = *(_QWORD *)(a2 + 128);
    v62 = *(_QWORD *)(a2 + 152);
    v63 = *(_QWORD *)(a2 + 160);
    v85 = *(_QWORD *)(a2 + 168);
    v87 = *(_QWORD *)(a2 + 200);
    v89 = *(_QWORD *)(a2 + 208);
    v91 = *(_QWORD *)(a2 + 224);
    v93 = *(_QWORD *)(a2 + 232);
    v95 = *(_QWORD *)(a2 + 240);
    v97 = *(_QWORD *)(a2 + 248);
    v99 = *(_QWORD *)(a2 + 256);
    v101 = *(_QWORD *)(a2 + 264);
    sub_21420B7DC(v34, v83, v81, v35, v62, v63, v85, v36, v37, v38, v87, v89, v39, v91, v93, v95, v40, v41, v42);
    *(_QWORD *)(a1 + 120) = v34;
    *(_QWORD *)(a1 + 128) = v83;
    *(_QWORD *)(a1 + 136) = v81;
    *(_QWORD *)(a1 + 144) = v35;
    *(_QWORD *)(a1 + 152) = v62;
    *(_QWORD *)(a1 + 160) = v63;
    *(_QWORD *)(a1 + 168) = v85;
    *(_QWORD *)(a1 + 176) = v36;
    *(_QWORD *)(a1 + 184) = v37;
    *(_QWORD *)(a1 + 192) = v38;
    *(_QWORD *)(a1 + 200) = v87;
    *(_QWORD *)(a1 + 208) = v89;
    *(_QWORD *)(a1 + 216) = v39;
    *(_QWORD *)(a1 + 224) = v91;
    *(_QWORD *)(a1 + 232) = v93;
    *(_QWORD *)(a1 + 240) = v95;
    *(_QWORD *)(a1 + 248) = v97;
    *(_QWORD *)(a1 + 256) = v99;
    *(_QWORD *)(a1 + 264) = v101;
  }
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  return a1;
}

void *initializeWithTake for SgAccessibilityGroup(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for SgAccessibilityGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_QWORD *)(a2 + 80))
    {
      v5 = *(_BYTE *)(a2 + 72);
      v6 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = *(_BYTE *)(a1 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 72) = v5;
      sub_2141ED0BC(v6, v7, v8);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_21420D798(a1 + 56);
  }
  v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v9;
LABEL_6:
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_10:
    v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v14;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a2 + 112))
  {
    sub_21420D798(a1 + 88);
    goto LABEL_10;
  }
  v10 = *(_BYTE *)(a2 + 104);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = v10;
  sub_2141ED0BC(v11, v12, v13);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
LABEL_11:
  v15 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 144);
  v18 = *(_QWORD *)(a1 + 176);
  v19 = *(_QWORD *)(a1 + 184);
  v20 = *(_QWORD *)(a1 + 192);
  v21 = *(_QWORD *)(a1 + 216);
  v22 = *(_QWORD *)(a1 + 248);
  v23 = *(_QWORD *)(a1 + 256);
  v24 = *(_QWORD *)(a1 + 264);
  v25 = *(_QWORD *)(a2 + 144);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 216);
  v30 = *(_QWORD *)(a2 + 248);
  v31 = *(_QWORD *)(a2 + 256);
  v32 = *(_QWORD *)(a2 + 264);
  if (v21 > 1
    || (v15 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v17 > 1
    || (v20 | v19) & 0xF000000000000007 | v18 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | v23) & 0xF000000000000007 | v22 & 0xFFFFFFFFFFFFFF7CLL)
  {
    if (v29 > 1
      || (v16 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
      || v25 > 1
      || (v28 | v27) & 0xF000000000000007 | v26 & 0xFFFFFFFFFFFFFF7CLL
      || (v32 | v31) & 0xF000000000000007 | v30 & 0xFFFFFFFFFFFFFF7CLL)
    {
      v37 = *(_QWORD *)(a2 + 168);
      v38 = *(_QWORD *)(a2 + 240);
      v40 = *(_QWORD *)(a1 + 128);
      v39 = *(_QWORD *)(a1 + 136);
      v41 = *(_QWORD *)(a1 + 160);
      v48 = *(_QWORD *)(a1 + 152);
      v42 = *(_QWORD *)(a1 + 168);
      v43 = *(_QWORD *)(a1 + 200);
      v44 = *(_QWORD *)(a1 + 208);
      v45 = *(_OWORD *)(a1 + 224);
      v46 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(a1 + 120) = v16;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = v25;
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = v37;
      *(_QWORD *)(a1 + 176) = v26;
      *(_QWORD *)(a1 + 184) = v27;
      *(_QWORD *)(a1 + 192) = v28;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = v29;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 240) = v38;
      *(_QWORD *)(a1 + 248) = v30;
      *(_QWORD *)(a1 + 256) = v31;
      *(_QWORD *)(a1 + 264) = v32;
      sub_2141EF5D4(v15, v40, v39, v17, v48, v41, v42, v18, v19, v20, v43, v44, v21, v45, *((uint64_t *)&v45 + 1), v46, v22, v23, v24);
      goto LABEL_24;
    }
    sub_2143064F4(a1 + 120);
  }
  v33 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v33;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v34 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v34;
  v35 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v35;
  v36 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v36;
LABEL_24:
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgAccessibilityGroup(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 272);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SgAccessibilityGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 272) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgAccessibilityGroup()
{
  return &type metadata for SgAccessibilityGroup;
}

uint64_t destroy for SgAnnotation(uint64_t *a1)
{
  return sub_2141ED07C(a1[5], a1[6], a1[7]);
}

uint64_t initializeWithCopy for SgAnnotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  sub_2141ED014(v4, v5, v6);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

uint64_t assignWithCopy for SgAnnotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  sub_2141ED014(v4, v5, v6);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  sub_2141ED07C(v9, v10, v11);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 120);
  v14 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v14;
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

__n128 initializeWithTake for SgAnnotation(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for SgAnnotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = v4;
  sub_2141ED07C(v5, v6, v7);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgAnnotation(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SgAnnotation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 56) = 2 * -a2;
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgAnnotation()
{
  return &type metadata for SgAnnotation;
}

uint64_t destroy for SgCompositingLayer(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
    return _s6Charts15AnyChartContentVwxx_0(a1 + 16);
  return result;
}

uint64_t initializeWithCopy for SgCompositingLayer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 2;
  v6 = a2[5];
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 16, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 48) = v5[4];
  }
  *(_QWORD *)(a1 + 56) = a2[7];
  return a1;
}

uint64_t assignWithCopy for SgCompositingLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 40) = v4;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    _s6Charts15AnyChartContentVwxx_0(a1 + 16);
    goto LABEL_7;
  }
  sub_2141DEA14((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for SgCompositingLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
    _s6Charts15AnyChartContentVwxx_0(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgCompositingLayer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SgCompositingLayer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgCompositingLayer()
{
  return &type metadata for SgCompositingLayer;
}

_QWORD *initializeWithCopy for SgMask(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SgMask(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for SgMask(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgMask(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SgMask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgMask()
{
  return &type metadata for SgMask;
}

uint64_t sub_21430809C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = (char *)&loc_214308138 + 4 * byte_21442BA07[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v8 = *a2;
  *a1 = *a2;
  v9 = v8 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v9;
}

uint64_t sub_214309738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      _s6Charts15AnyChartContentVwxx_0(v4);
      swift_release();
      v5 = type metadata accessor for RectanglesRenderer(0);
      v6 = v4 + *(int *)(v5 + 32);
      v7 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
      {
        v8 = *(unsigned __int8 *)(v6 + 40);
        if (v8 != 255)
        {
          if ((v8 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v6);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v16 = *(unsigned __int8 *)(v6 + 128);
        if (v16 != 255)
        {
          if ((v16 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v6 + 88);
        }
        v19 = v6 + v7[11];
        v20 = sub_214424308();
        v21 = *(_QWORD *)(v20 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
        v22 = v6 + v7[14];
        v23 = sub_214424C68();
        v24 = *(_QWORD *)(v23 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
        swift_release();
        v25 = v6 + v7[18];
        if (*(_QWORD *)(v25 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v25, *(_QWORD *)(v25 + 8), *(_BYTE *)(v25 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v25 + 32), *(_QWORD *)(v25 + 40), *(_BYTE *)(v25 + 48));
        }
        v26 = v6 + v7[19];
        if (*(_QWORD *)(v26 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v26 + 32), *(_QWORD *)(v26 + 40), *(_BYTE *)(v26 + 48));
        }
        v27 = v6 + v7[20];
        if (*(_QWORD *)(v27 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v27 + 32), *(_QWORD *)(v27 + 40), *(_BYTE *)(v27 + 48));
        }
        v28 = v6 + v7[21];
        if (*(_QWORD *)(v28 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v28, *(_QWORD *)(v28 + 8), *(_BYTE *)(v28 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v28 + 32), *(_QWORD *)(v28 + 40), *(_BYTE *)(v28 + 48));
        }
        v29 = v6 + v7[24];
        if (*(_QWORD *)(v29 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v29, *(_QWORD *)(v29 + 8), *(_BYTE *)(v29 + 16));
          swift_bridgeObjectRelease();
        }
        v30 = v6 + v7[25];
        if (*(_QWORD *)(v30 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v30, *(_QWORD *)(v30 + 8), *(_BYTE *)(v30 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v31 = v6 + v7[27];
        if (*(_QWORD *)(v31 + 24))
          _s6Charts15AnyChartContentVwxx_0(v31);
      }
      v32 = v4 + *(int *)(v5 + 40);
      v33 = sub_214424308();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      break;
    case 1u:
      _s6Charts15AnyChartContentVwxx_0(v4);
      swift_release();
      v9 = type metadata accessor for PointsRenderer(0);
      v10 = v4 + *(int *)(v9 + 32);
      v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v10, 1, v11))
      {
        v12 = *(unsigned __int8 *)(v10 + 40);
        if (v12 != 255)
        {
          if ((v12 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v10);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v17 = *(unsigned __int8 *)(v10 + 128);
        if (v17 != 255)
        {
          if ((v17 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v10 + 88);
        }
        v34 = v10 + v11[11];
        v35 = sub_214424308();
        v36 = *(_QWORD *)(v35 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
        v37 = v10 + v11[14];
        v38 = sub_214424C68();
        v39 = *(_QWORD *)(v38 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
        swift_release();
        v40 = v10 + v11[18];
        if (*(_QWORD *)(v40 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_BYTE *)(v40 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v40 + 32), *(_QWORD *)(v40 + 40), *(_BYTE *)(v40 + 48));
        }
        v41 = v10 + v11[19];
        if (*(_QWORD *)(v41 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v41, *(_QWORD *)(v41 + 8), *(_BYTE *)(v41 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v41 + 32), *(_QWORD *)(v41 + 40), *(_BYTE *)(v41 + 48));
        }
        v42 = v10 + v11[20];
        if (*(_QWORD *)(v42 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v42, *(_QWORD *)(v42 + 8), *(_BYTE *)(v42 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v42 + 32), *(_QWORD *)(v42 + 40), *(_BYTE *)(v42 + 48));
        }
        v43 = v10 + v11[21];
        if (*(_QWORD *)(v43 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v43, *(_QWORD *)(v43 + 8), *(_BYTE *)(v43 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v43 + 32), *(_QWORD *)(v43 + 40), *(_BYTE *)(v43 + 48));
        }
        v44 = v10 + v11[24];
        if (*(_QWORD *)(v44 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v44, *(_QWORD *)(v44 + 8), *(_BYTE *)(v44 + 16));
          swift_bridgeObjectRelease();
        }
        v45 = v10 + v11[25];
        if (*(_QWORD *)(v45 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v45, *(_QWORD *)(v45 + 8), *(_BYTE *)(v45 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v46 = v10 + v11[27];
        if (*(_QWORD *)(v46 + 24))
          _s6Charts15AnyChartContentVwxx_0(v46);
      }
      v47 = v4 + *(int *)(v9 + 36);
      v48 = *(unsigned __int8 *)(v47 + 40);
      if (v48 != 255)
      {
        if ((v48 & 1) == 0)
          goto LABEL_87;
        goto LABEL_14;
      }
      break;
    case 2u:
      _s6Charts15AnyChartContentVwxx_0(v4);
      swift_release();
      v13 = v4 + *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      v14 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v14 - 1) + 48))(v13, 1, v14))
      {
        v15 = *(unsigned __int8 *)(v13 + 40);
        if (v15 != 255)
        {
          if ((v15 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v13);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v18 = *(unsigned __int8 *)(v13 + 128);
        if (v18 != 255)
        {
          if ((v18 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v13 + 88);
        }
        v49 = v13 + v14[11];
        v50 = sub_214424308();
        v51 = *(_QWORD *)(v50 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
        v52 = v13 + v14[14];
        v53 = sub_214424C68();
        v54 = *(_QWORD *)(v53 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
        swift_release();
        v55 = v13 + v14[18];
        if (*(_QWORD *)(v55 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v55, *(_QWORD *)(v55 + 8), *(_BYTE *)(v55 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v55 + 32), *(_QWORD *)(v55 + 40), *(_BYTE *)(v55 + 48));
        }
        v56 = v13 + v14[19];
        if (*(_QWORD *)(v56 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), *(_BYTE *)(v56 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v56 + 32), *(_QWORD *)(v56 + 40), *(_BYTE *)(v56 + 48));
        }
        v57 = v13 + v14[20];
        if (*(_QWORD *)(v57 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v57, *(_QWORD *)(v57 + 8), *(_BYTE *)(v57 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v57 + 32), *(_QWORD *)(v57 + 40), *(_BYTE *)(v57 + 48));
        }
        v58 = v13 + v14[21];
        if (*(_QWORD *)(v58 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v58, *(_QWORD *)(v58 + 8), *(_BYTE *)(v58 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v58 + 32), *(_QWORD *)(v58 + 40), *(_BYTE *)(v58 + 48));
        }
        v59 = v13 + v14[24];
        if (*(_QWORD *)(v59 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v59, *(_QWORD *)(v59 + 8), *(_BYTE *)(v59 + 16));
          swift_bridgeObjectRelease();
        }
        v60 = v13 + v14[25];
        if (*(_QWORD *)(v60 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v60, *(_QWORD *)(v60 + 8), *(_BYTE *)(v60 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v47 = v13 + v14[27];
        if (*(_QWORD *)(v47 + 24))
LABEL_87:
          _s6Charts15AnyChartContentVwxx_0(v47);
      }
      break;
    case 3u:
LABEL_14:
      swift_release();
      break;
    default:
      return swift_release();
  }
  return swift_release();
}

void sub_214309F20(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = (char *)sub_214309FB0 + 4 * byte_21442BA0F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_214309FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_OWORD *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v132 = v0;
  v5 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v4 + 24) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(v4, v3);
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(v3 + 40);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(v3 + 56);
  v128 = type metadata accessor for RectanglesRenderer(0);
  v6 = *(int *)(v128 + 32);
  v7 = (_OWORD *)(v4 + v6);
  v8 = (_OWORD *)(v3 + v6);
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    v12 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    v13 = v132;
    v14 = v128;
  }
  else
  {
    v127 = v10;
    v15 = *((unsigned __int8 *)v8 + 40);
    v129 = v2;
    if (v15 == 255)
    {
      v16 = v8[1];
      *v7 = *v8;
      v7[1] = v16;
      *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
      v13 = v132;
    }
    else
    {
      v13 = v132;
      if ((v15 & 1) != 0)
      {
        v17 = *(_OWORD *)((char *)v8 + 24);
        *(_OWORD *)((char *)v7 + 24) = v17;
        (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v7, v8);
        *((_BYTE *)v7 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *((_BYTE *)v7 + 40) = 0;
        swift_retain();
      }
    }
    *((_BYTE *)v7 + 41) = *((_BYTE *)v8 + 41);
    *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    v18 = *((_QWORD *)v8 + 9);
    *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
    *((_QWORD *)v7 + 9) = v18;
    *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
    v19 = *((unsigned __int8 *)v8 + 128);
    swift_bridgeObjectRetain();
    v131 = v4;
    if (v19 == 255)
    {
      v20 = *(_OWORD *)((char *)v8 + 104);
      *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
      *(_OWORD *)((char *)v7 + 104) = v20;
      *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    }
    else if ((v19 & 1) != 0)
    {
      *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
      v7[6] = v8[6];
      *((_BYTE *)v7 + 128) = 1;
      swift_retain();
    }
    else
    {
      v21 = v8[7];
      v7[7] = v21;
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))((uint64_t)v7 + 88, (uint64_t)v8 + 88);
      *((_BYTE *)v7 + 128) = 0;
    }
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((_BYTE *)v7 + 152) = *((_BYTE *)v8 + 152);
    *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    *((_BYTE *)v7 + 168) = *((_BYTE *)v8 + 168);
    v22 = v8[12];
    v7[11] = v8[11];
    v7[12] = v22;
    *((_BYTE *)v7 + 208) = *((_BYTE *)v8 + 208);
    v23 = v9[11];
    v24 = (char *)v7 + v23;
    v25 = (char *)v8 + v23;
    v26 = sub_214424308();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = v9[12];
    v30 = (char *)v7 + v29;
    v31 = (char *)v8 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    *(_QWORD *)((char *)v7 + v9[13]) = *(_QWORD *)((char *)v8 + v9[13]);
    v32 = v9[14];
    v33 = (char *)v7 + v32;
    v34 = (char *)v8 + v32;
    v35 = sub_214424C68();
    v36 = *(_QWORD *)(v35 - 8);
    v130 = v1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v38 = v9[15];
    v39 = (char *)v7 + v38;
    v40 = (char *)v8 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_WORD *)v39 + 4) = *((_WORD *)v40 + 4);
    *(_QWORD *)((char *)v7 + v9[16]) = *(_QWORD *)((char *)v8 + v9[16]);
    *(_QWORD *)((char *)v7 + v9[17]) = *(_QWORD *)((char *)v8 + v9[17]);
    v41 = v9[18];
    v42 = (char *)v7 + v41;
    v43 = (char *)v8 + v41;
    v44 = *(_QWORD *)((char *)v8 + v41 + 24);
    swift_retain();
    if (v44)
    {
      v45 = *(_QWORD *)v43;
      v46 = *((_QWORD *)v43 + 1);
      v47 = v43[16];
      sub_2141DD130(*(_QWORD *)v43, v46, v47);
      *(_QWORD *)v42 = v45;
      *((_QWORD *)v42 + 1) = v46;
      v42[16] = v47;
      v48 = *((_QWORD *)v43 + 4);
      *((_QWORD *)v42 + 3) = *((_QWORD *)v43 + 3);
      v49 = *((_QWORD *)v43 + 5);
      v50 = v43[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v48, v49, v50);
      *((_QWORD *)v42 + 4) = v48;
      *((_QWORD *)v42 + 5) = v49;
      v42[48] = v50;
      *(_OWORD *)(v42 + 56) = *(_OWORD *)(v43 + 56);
    }
    else
    {
      v51 = *((_OWORD *)v43 + 3);
      *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 3) = v51;
      *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
      v52 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v52;
    }
    v53 = v9[19];
    v54 = (char *)v7 + v53;
    v55 = (char *)v8 + v53;
    if (*(_QWORD *)((char *)v8 + v53 + 24))
    {
      v56 = *(_QWORD *)v55;
      v57 = *((_QWORD *)v55 + 1);
      v58 = v55[16];
      sub_2141DD130(*(_QWORD *)v55, v57, v58);
      *(_QWORD *)v54 = v56;
      *((_QWORD *)v54 + 1) = v57;
      v54[16] = v58;
      v59 = *((_QWORD *)v55 + 4);
      *((_QWORD *)v54 + 3) = *((_QWORD *)v55 + 3);
      v60 = *((_QWORD *)v55 + 5);
      v61 = v55[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v59, v60, v61);
      *((_QWORD *)v54 + 4) = v59;
      *((_QWORD *)v54 + 5) = v60;
      v54[48] = v61;
      *(_OWORD *)(v54 + 56) = *(_OWORD *)(v55 + 56);
    }
    else
    {
      v62 = *((_OWORD *)v55 + 3);
      *((_OWORD *)v54 + 2) = *((_OWORD *)v55 + 2);
      *((_OWORD *)v54 + 3) = v62;
      *((_QWORD *)v54 + 8) = *((_QWORD *)v55 + 8);
      v63 = *((_OWORD *)v55 + 1);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v63;
    }
    v64 = v9[20];
    v65 = (char *)v7 + v64;
    v66 = (char *)v8 + v64;
    if (*(_QWORD *)((char *)v8 + v64 + 24))
    {
      v67 = *(_QWORD *)v66;
      v68 = *((_QWORD *)v66 + 1);
      v69 = v66[16];
      sub_2141DD130(*(_QWORD *)v66, v68, v69);
      *(_QWORD *)v65 = v67;
      *((_QWORD *)v65 + 1) = v68;
      v65[16] = v69;
      v70 = *((_QWORD *)v66 + 4);
      *((_QWORD *)v65 + 3) = *((_QWORD *)v66 + 3);
      v71 = *((_QWORD *)v66 + 5);
      v72 = v66[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v70, v71, v72);
      *((_QWORD *)v65 + 4) = v70;
      *((_QWORD *)v65 + 5) = v71;
      v65[48] = v72;
      *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
    }
    else
    {
      v73 = *((_OWORD *)v66 + 3);
      *((_OWORD *)v65 + 2) = *((_OWORD *)v66 + 2);
      *((_OWORD *)v65 + 3) = v73;
      *((_QWORD *)v65 + 8) = *((_QWORD *)v66 + 8);
      v74 = *((_OWORD *)v66 + 1);
      *(_OWORD *)v65 = *(_OWORD *)v66;
      *((_OWORD *)v65 + 1) = v74;
    }
    v75 = v9[21];
    v76 = (char *)v7 + v75;
    v77 = (char *)v8 + v75;
    if (*(_QWORD *)((char *)v8 + v75 + 24))
    {
      v78 = *(_QWORD *)v77;
      v79 = *((_QWORD *)v77 + 1);
      v80 = v77[16];
      sub_2141DD130(*(_QWORD *)v77, v79, v80);
      *(_QWORD *)v76 = v78;
      *((_QWORD *)v76 + 1) = v79;
      v76[16] = v80;
      v81 = *((_QWORD *)v77 + 4);
      *((_QWORD *)v76 + 3) = *((_QWORD *)v77 + 3);
      v82 = *((_QWORD *)v77 + 5);
      v83 = v77[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v81, v82, v83);
      *((_QWORD *)v76 + 4) = v81;
      *((_QWORD *)v76 + 5) = v82;
      v76[48] = v83;
      *(_OWORD *)(v76 + 56) = *(_OWORD *)(v77 + 56);
    }
    else
    {
      v84 = *((_OWORD *)v77 + 3);
      *((_OWORD *)v76 + 2) = *((_OWORD *)v77 + 2);
      *((_OWORD *)v76 + 3) = v84;
      *((_QWORD *)v76 + 8) = *((_QWORD *)v77 + 8);
      v85 = *((_OWORD *)v77 + 1);
      *(_OWORD *)v76 = *(_OWORD *)v77;
      *((_OWORD *)v76 + 1) = v85;
    }
    v86 = v9[22];
    v87 = (char *)v7 + v86;
    v88 = (char *)v8 + v86;
    *(_OWORD *)v87 = *(_OWORD *)v88;
    *((_QWORD *)v87 + 2) = *((_QWORD *)v88 + 2);
    v89 = v9[23];
    v90 = (char *)v7 + v89;
    v91 = (char *)v8 + v89;
    *(_OWORD *)v90 = *(_OWORD *)v91;
    *((_QWORD *)v90 + 2) = *((_QWORD *)v91 + 2);
    v92 = v9[24];
    v93 = (char *)v7 + v92;
    v94 = (char *)v8 + v92;
    if (*(_QWORD *)((char *)v8 + v92 + 24))
    {
      v95 = *(_QWORD *)v94;
      v96 = *((_QWORD *)v94 + 1);
      v97 = v94[16];
      sub_2141DD130(*(_QWORD *)v94, v96, v97);
      *(_QWORD *)v93 = v95;
      *((_QWORD *)v93 + 1) = v96;
      v93[16] = v97;
      *((_QWORD *)v93 + 3) = *((_QWORD *)v94 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v98 = *((_OWORD *)v94 + 1);
      *(_OWORD *)v93 = *(_OWORD *)v94;
      *((_OWORD *)v93 + 1) = v98;
    }
    v99 = v9[25];
    v100 = (char *)v7 + v99;
    v101 = (char *)v8 + v99;
    if (*(_QWORD *)((char *)v8 + v99 + 24))
    {
      v102 = *(_QWORD *)v101;
      v103 = *((_QWORD *)v101 + 1);
      v104 = v101[16];
      sub_2141DD130(*(_QWORD *)v101, v103, v104);
      *(_QWORD *)v100 = v102;
      *((_QWORD *)v100 + 1) = v103;
      v100[16] = v104;
      *((_QWORD *)v100 + 3) = *((_QWORD *)v101 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v105 = *((_OWORD *)v101 + 1);
      *(_OWORD *)v100 = *(_OWORD *)v101;
      *((_OWORD *)v100 + 1) = v105;
    }
    v1 = v130;
    v4 = v131;
    v106 = v9[26];
    v107 = (_QWORD *)((char *)v7 + v106);
    v108 = (_QWORD *)((char *)v8 + v106);
    v109 = v108[1];
    *v107 = *v108;
    v107[1] = v109;
    v110 = v9[27];
    v111 = (char *)v7 + v110;
    v112 = (char *)v8 + v110;
    v113 = *((_QWORD *)v112 + 3);
    swift_bridgeObjectRetain();
    if (v113)
    {
      *((_QWORD *)v111 + 3) = v113;
      (**(void (***)(char *, char *, uint64_t))(v113 - 8))(v111, v112, v113);
    }
    else
    {
      v114 = *((_OWORD *)v112 + 1);
      *(_OWORD *)v111 = *(_OWORD *)v112;
      *((_OWORD *)v111 + 1) = v114;
    }
    v14 = v128;
    v2 = v129;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v127 + 56))(v7, 0, 1, v9);
  }
  v115 = *(int *)(v14 + 36);
  v116 = v4 + v115;
  v117 = v3 + v115;
  v118 = *(_OWORD *)(v117 + 16);
  *(_OWORD *)v116 = *(_OWORD *)v117;
  *(_OWORD *)(v116 + 16) = v118;
  *(_BYTE *)(v116 + 32) = *(_BYTE *)(v117 + 32);
  v119 = *(int *)(v14 + 40);
  v120 = v4 + v119;
  v121 = v3 + v119;
  v122 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
  swift_storeEnumTagMultiPayload();
  v123 = *(int *)(v2 + 36);
  v124 = v13 + v123;
  v125 = v1 + v123;
  *(_BYTE *)v124 = *(_BYTE *)v125;
  *(_QWORD *)(v124 + 8) = *(_QWORD *)(v125 + 8);
  swift_retain();
  return v13;
}

_QWORD *sub_21430B530(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1 + *(int *)(a3 + 32), type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    v6 = (char *)&loc_21430B5F8 + 4 * byte_21442BA13[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *v9;
  *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_21430CCB4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  unsigned int (**v25)(_OWORD *, uint64_t, int *);
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  __int128 v124;
  uint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  char *v135;
  __int128 v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  char *v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  char *v160;
  char *v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  __int128 v173;
  uint64_t v174;
  char *v175;
  char *v176;
  __int128 v177;
  uint64_t v178;
  char *v179;
  char *v180;
  __int128 v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  char *v191;
  char *v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  char *v201;
  char *v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  __int128 v214;
  uint64_t v215;
  char *v216;
  char *v217;
  __int128 v218;
  uint64_t v219;
  char *v220;
  char *v221;
  __int128 v222;
  uint64_t v223;
  char *v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v231;
  uint64_t v232;
  int *v233;
  int *v234;
  _OWORD *__dst;
  char *__dsta;
  void (**__dstb)(char *, _QWORD, uint64_t, int *);
  char *__dstc;
  char *__dstd;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;

  v3 = a3;
  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v20 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v20;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
    v21 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
    v22 = &v8[v21];
    v23 = &v9[v21];
    v24 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v25 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v24 - 1);
    if (((unsigned int (**)(char *, uint64_t, int *))v25)[6](v23, 1, v24))
    {
      v26 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      __dstb = (void (**)(char *, _QWORD, uint64_t, int *))v25;
      v241 = v3;
      v45 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v45;
      *(_OWORD *)(v22 + 25) = *(_OWORD *)(v23 + 25);
      v22[41] = v23[41];
      v46 = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 3) = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 4) = v46;
      *((_QWORD *)v22 + 10) = *((_QWORD *)v23 + 10);
      v47 = *(_OWORD *)(v23 + 88);
      v48 = *(_OWORD *)(v23 + 104);
      *(_OWORD *)(v22 + 113) = *(_OWORD *)(v23 + 113);
      *(_OWORD *)(v22 + 104) = v48;
      *(_OWORD *)(v22 + 88) = v47;
      *(_OWORD *)(v22 + 136) = *(_OWORD *)(v23 + 136);
      v22[152] = v23[152];
      *((_QWORD *)v22 + 20) = *((_QWORD *)v23 + 20);
      v22[168] = v23[168];
      v49 = *((_OWORD *)v23 + 12);
      *((_OWORD *)v22 + 11) = *((_OWORD *)v23 + 11);
      *((_OWORD *)v22 + 12) = v49;
      v22[208] = v23[208];
      v50 = v24[11];
      v51 = &v22[v50];
      v52 = &v23[v50];
      v53 = sub_214424308();
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
      v75 = v24[12];
      v76 = &v22[v75];
      v77 = &v23[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      v76[8] = v77[8];
      *(_QWORD *)&v22[v24[13]] = *(_QWORD *)&v23[v24[13]];
      v78 = v24[14];
      v79 = &v22[v78];
      v80 = &v23[v78];
      v81 = sub_214424C68();
      v82 = *(_QWORD *)(v81 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
      {
        v83 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v79, v80, v81);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
      }
      v141 = v24[15];
      v142 = &v22[v141];
      v143 = &v23[v141];
      *(_QWORD *)v142 = *(_QWORD *)v143;
      *((_WORD *)v142 + 4) = *((_WORD *)v143 + 4);
      *(_QWORD *)&v22[v24[16]] = *(_QWORD *)&v23[v24[16]];
      *(_QWORD *)&v22[v24[17]] = *(_QWORD *)&v23[v24[17]];
      v144 = v24[18];
      v145 = &v22[v144];
      v146 = &v23[v144];
      v147 = *((_OWORD *)v146 + 3);
      *((_OWORD *)v145 + 2) = *((_OWORD *)v146 + 2);
      *((_OWORD *)v145 + 3) = v147;
      *((_QWORD *)v145 + 8) = *((_QWORD *)v146 + 8);
      v148 = *((_OWORD *)v146 + 1);
      *(_OWORD *)v145 = *(_OWORD *)v146;
      *((_OWORD *)v145 + 1) = v148;
      v149 = v24[19];
      v150 = &v22[v149];
      v151 = &v23[v149];
      *((_QWORD *)v150 + 8) = *((_QWORD *)v151 + 8);
      v152 = *((_OWORD *)v151 + 3);
      *((_OWORD *)v150 + 2) = *((_OWORD *)v151 + 2);
      *((_OWORD *)v150 + 3) = v152;
      v153 = *((_OWORD *)v151 + 1);
      *(_OWORD *)v150 = *(_OWORD *)v151;
      *((_OWORD *)v150 + 1) = v153;
      v154 = v24[20];
      v155 = &v22[v154];
      v156 = &v23[v154];
      v157 = *((_OWORD *)v156 + 3);
      *((_OWORD *)v155 + 2) = *((_OWORD *)v156 + 2);
      *((_OWORD *)v155 + 3) = v157;
      *((_QWORD *)v155 + 8) = *((_QWORD *)v156 + 8);
      v158 = *((_OWORD *)v156 + 1);
      *(_OWORD *)v155 = *(_OWORD *)v156;
      *((_OWORD *)v155 + 1) = v158;
      v159 = v24[21];
      v160 = &v22[v159];
      v161 = &v23[v159];
      *((_QWORD *)v160 + 8) = *((_QWORD *)v161 + 8);
      v162 = *((_OWORD *)v161 + 3);
      *((_OWORD *)v160 + 2) = *((_OWORD *)v161 + 2);
      *((_OWORD *)v160 + 3) = v162;
      v163 = *((_OWORD *)v161 + 1);
      *(_OWORD *)v160 = *(_OWORD *)v161;
      *((_OWORD *)v160 + 1) = v163;
      v164 = v24[22];
      v165 = &v22[v164];
      v166 = &v23[v164];
      *(_OWORD *)v165 = *(_OWORD *)v166;
      *((_QWORD *)v165 + 2) = *((_QWORD *)v166 + 2);
      v167 = v24[23];
      v168 = &v22[v167];
      v169 = &v23[v167];
      *(_OWORD *)v168 = *(_OWORD *)v169;
      *((_QWORD *)v168 + 2) = *((_QWORD *)v169 + 2);
      v170 = v24[24];
      v171 = &v22[v170];
      v172 = &v23[v170];
      v173 = *((_OWORD *)v172 + 1);
      *(_OWORD *)v171 = *(_OWORD *)v172;
      *((_OWORD *)v171 + 1) = v173;
      v174 = v24[25];
      v175 = &v22[v174];
      v176 = &v23[v174];
      v177 = *((_OWORD *)v176 + 1);
      *(_OWORD *)v175 = *(_OWORD *)v176;
      *((_OWORD *)v175 + 1) = v177;
      *(_OWORD *)&v22[v24[26]] = *(_OWORD *)&v23[v24[26]];
      v178 = v24[27];
      v179 = &v22[v178];
      v180 = &v23[v178];
      v181 = *((_OWORD *)v180 + 1);
      *(_OWORD *)v179 = *(_OWORD *)v180;
      *((_OWORD *)v179 + 1) = v181;
      __dstb[7](v22, 0, 1, v24);
      v3 = v241;
    }
LABEL_35:
    swift_storeEnumTagMultiPayload();
    goto LABEL_36;
  }
  if (EnumCaseMultiPayload == 1)
  {
    __dst = v4;
    v27 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v27;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
    v28 = (int *)type metadata accessor for PointsRenderer(0);
    v29 = v28[8];
    v30 = &v8[v29];
    v31 = &v9[v29];
    v32 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v33 = *((_QWORD *)v32 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      v4 = __dst;
    }
    else
    {
      v232 = v33;
      v234 = v28;
      v242 = v3;
      v56 = *((_OWORD *)v31 + 1);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v56;
      *(_OWORD *)(v30 + 25) = *(_OWORD *)(v31 + 25);
      v30[41] = v31[41];
      v57 = *((_OWORD *)v31 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v31 + 3);
      *((_OWORD *)v30 + 4) = v57;
      *((_QWORD *)v30 + 10) = *((_QWORD *)v31 + 10);
      v58 = *(_OWORD *)(v31 + 88);
      v59 = *(_OWORD *)(v31 + 104);
      *(_OWORD *)(v30 + 113) = *(_OWORD *)(v31 + 113);
      *(_OWORD *)(v30 + 104) = v59;
      *(_OWORD *)(v30 + 88) = v58;
      *(_OWORD *)(v30 + 136) = *(_OWORD *)(v31 + 136);
      v30[152] = v31[152];
      *((_QWORD *)v30 + 20) = *((_QWORD *)v31 + 20);
      v30[168] = v31[168];
      v60 = *((_OWORD *)v31 + 12);
      *((_OWORD *)v30 + 11) = *((_OWORD *)v31 + 11);
      *((_OWORD *)v30 + 12) = v60;
      v30[208] = v31[208];
      v61 = v32[11];
      v62 = &v30[v61];
      v63 = &v31[v61];
      v64 = sub_214424308();
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        v66 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      }
      v4 = __dst;
      v84 = v32[12];
      v85 = &v30[v84];
      v86 = &v31[v84];
      *(_QWORD *)v85 = *(_QWORD *)v86;
      v85[8] = v86[8];
      *(_QWORD *)&v30[v32[13]] = *(_QWORD *)&v31[v32[13]];
      v87 = v32[14];
      __dstd = &v30[v87];
      v88 = &v31[v87];
      v89 = sub_214424C68();
      v90 = *(_QWORD *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        v91 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(__dstd, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(__dstd, v88, v89);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dstd, 0, 1, v89);
      }
      v3 = v242;
      v28 = v234;
      v182 = v32[15];
      v183 = &v30[v182];
      v184 = &v31[v182];
      *(_QWORD *)v183 = *(_QWORD *)v184;
      *((_WORD *)v183 + 4) = *((_WORD *)v184 + 4);
      *(_QWORD *)&v30[v32[16]] = *(_QWORD *)&v31[v32[16]];
      *(_QWORD *)&v30[v32[17]] = *(_QWORD *)&v31[v32[17]];
      v185 = v32[18];
      v186 = &v30[v185];
      v187 = &v31[v185];
      v188 = *((_OWORD *)v187 + 3);
      *((_OWORD *)v186 + 2) = *((_OWORD *)v187 + 2);
      *((_OWORD *)v186 + 3) = v188;
      *((_QWORD *)v186 + 8) = *((_QWORD *)v187 + 8);
      v189 = *((_OWORD *)v187 + 1);
      *(_OWORD *)v186 = *(_OWORD *)v187;
      *((_OWORD *)v186 + 1) = v189;
      v190 = v32[19];
      v191 = &v30[v190];
      v192 = &v31[v190];
      *((_QWORD *)v191 + 8) = *((_QWORD *)v192 + 8);
      v193 = *((_OWORD *)v192 + 3);
      *((_OWORD *)v191 + 2) = *((_OWORD *)v192 + 2);
      *((_OWORD *)v191 + 3) = v193;
      v194 = *((_OWORD *)v192 + 1);
      *(_OWORD *)v191 = *(_OWORD *)v192;
      *((_OWORD *)v191 + 1) = v194;
      v195 = v32[20];
      v196 = &v30[v195];
      v197 = &v31[v195];
      v198 = *((_OWORD *)v197 + 3);
      *((_OWORD *)v196 + 2) = *((_OWORD *)v197 + 2);
      *((_OWORD *)v196 + 3) = v198;
      *((_QWORD *)v196 + 8) = *((_QWORD *)v197 + 8);
      v199 = *((_OWORD *)v197 + 1);
      *(_OWORD *)v196 = *(_OWORD *)v197;
      *((_OWORD *)v196 + 1) = v199;
      v200 = v32[21];
      v201 = &v30[v200];
      v202 = &v31[v200];
      *((_QWORD *)v201 + 8) = *((_QWORD *)v202 + 8);
      v203 = *((_OWORD *)v202 + 3);
      *((_OWORD *)v201 + 2) = *((_OWORD *)v202 + 2);
      *((_OWORD *)v201 + 3) = v203;
      v204 = *((_OWORD *)v202 + 1);
      *(_OWORD *)v201 = *(_OWORD *)v202;
      *((_OWORD *)v201 + 1) = v204;
      v205 = v32[22];
      v206 = &v30[v205];
      v207 = &v31[v205];
      *(_OWORD *)v206 = *(_OWORD *)v207;
      *((_QWORD *)v206 + 2) = *((_QWORD *)v207 + 2);
      v208 = v32[23];
      v209 = &v30[v208];
      v210 = &v31[v208];
      *(_OWORD *)v209 = *(_OWORD *)v210;
      *((_QWORD *)v209 + 2) = *((_QWORD *)v210 + 2);
      v211 = v32[24];
      v212 = &v30[v211];
      v213 = &v31[v211];
      v214 = *((_OWORD *)v213 + 1);
      *(_OWORD *)v212 = *(_OWORD *)v213;
      *((_OWORD *)v212 + 1) = v214;
      v215 = v32[25];
      v216 = &v30[v215];
      v217 = &v31[v215];
      v218 = *((_OWORD *)v217 + 1);
      *(_OWORD *)v216 = *(_OWORD *)v217;
      *((_OWORD *)v216 + 1) = v218;
      *(_OWORD *)&v30[v32[26]] = *(_OWORD *)&v31[v32[26]];
      v219 = v32[27];
      v220 = &v30[v219];
      v221 = &v31[v219];
      v222 = *((_OWORD *)v221 + 1);
      *(_OWORD *)v220 = *(_OWORD *)v221;
      *((_OWORD *)v220 + 1) = v222;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v232 + 56))(v30, 0, 1, v32);
    }
    v223 = v28[9];
    v224 = &v8[v223];
    v225 = &v9[v223];
    v226 = *((_OWORD *)v225 + 1);
    *(_OWORD *)v224 = *(_OWORD *)v225;
    *((_OWORD *)v224 + 1) = v226;
    *(_OWORD *)(v224 + 25) = *(_OWORD *)(v225 + 25);
    v227 = v28[10];
    v228 = &v8[v227];
    v229 = &v9[v227];
    v228[16] = v229[16];
    *(_OWORD *)v228 = *(_OWORD *)v229;
    goto LABEL_35;
  }
  if (EnumCaseMultiPayload)
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v240 = v3;
    v12 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v12;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
    v13 = (int *)type metadata accessor for RectanglesRenderer(0);
    v14 = v13[8];
    v15 = &v8[v14];
    v16 = &v9[v14];
    v17 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v18 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v231 = v18;
      v233 = v13;
      v35 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v35;
      *(_OWORD *)(v15 + 25) = *(_OWORD *)(v16 + 25);
      v15[41] = v16[41];
      v36 = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      *((_OWORD *)v15 + 4) = v36;
      *((_QWORD *)v15 + 10) = *((_QWORD *)v16 + 10);
      v37 = *(_OWORD *)(v16 + 88);
      v38 = *(_OWORD *)(v16 + 104);
      *(_OWORD *)(v15 + 113) = *(_OWORD *)(v16 + 113);
      *(_OWORD *)(v15 + 104) = v38;
      *(_OWORD *)(v15 + 88) = v37;
      *(_OWORD *)(v15 + 136) = *(_OWORD *)(v16 + 136);
      v15[152] = v16[152];
      *((_QWORD *)v15 + 20) = *((_QWORD *)v16 + 20);
      v15[168] = v16[168];
      v39 = *((_OWORD *)v16 + 12);
      *((_OWORD *)v15 + 11) = *((_OWORD *)v16 + 11);
      *((_OWORD *)v15 + 12) = v39;
      v15[208] = v16[208];
      v40 = v17[11];
      __dsta = &v15[v40];
      v41 = &v16[v40];
      v42 = sub_214424308();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(__dsta, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(__dsta, v41, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dsta, 0, 1, v42);
      }
      v67 = v17[12];
      v68 = &v15[v67];
      v69 = &v16[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      *(_QWORD *)&v15[v17[13]] = *(_QWORD *)&v16[v17[13]];
      v70 = v17[14];
      __dstc = &v15[v70];
      v71 = &v16[v70];
      v72 = sub_214424C68();
      v73 = *(_QWORD *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
      {
        v74 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(__dstc, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(__dstc, v71, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__dstc, 0, 1, v72);
      }
      v13 = v233;
      v92 = v17[15];
      v93 = &v15[v92];
      v94 = &v16[v92];
      *(_QWORD *)v93 = *(_QWORD *)v94;
      *((_WORD *)v93 + 4) = *((_WORD *)v94 + 4);
      *(_QWORD *)&v15[v17[16]] = *(_QWORD *)&v16[v17[16]];
      *(_QWORD *)&v15[v17[17]] = *(_QWORD *)&v16[v17[17]];
      v95 = v17[18];
      v96 = &v15[v95];
      v97 = &v16[v95];
      v98 = *((_OWORD *)v97 + 3);
      *((_OWORD *)v96 + 2) = *((_OWORD *)v97 + 2);
      *((_OWORD *)v96 + 3) = v98;
      *((_QWORD *)v96 + 8) = *((_QWORD *)v97 + 8);
      v99 = *((_OWORD *)v97 + 1);
      *(_OWORD *)v96 = *(_OWORD *)v97;
      *((_OWORD *)v96 + 1) = v99;
      v100 = v17[19];
      v101 = &v15[v100];
      v102 = &v16[v100];
      *((_QWORD *)v101 + 8) = *((_QWORD *)v102 + 8);
      v103 = *((_OWORD *)v102 + 3);
      *((_OWORD *)v101 + 2) = *((_OWORD *)v102 + 2);
      *((_OWORD *)v101 + 3) = v103;
      v104 = *((_OWORD *)v102 + 1);
      *(_OWORD *)v101 = *(_OWORD *)v102;
      *((_OWORD *)v101 + 1) = v104;
      v105 = v17[20];
      v106 = &v15[v105];
      v107 = &v16[v105];
      v108 = *((_OWORD *)v107 + 3);
      *((_OWORD *)v106 + 2) = *((_OWORD *)v107 + 2);
      *((_OWORD *)v106 + 3) = v108;
      *((_QWORD *)v106 + 8) = *((_QWORD *)v107 + 8);
      v109 = *((_OWORD *)v107 + 1);
      *(_OWORD *)v106 = *(_OWORD *)v107;
      *((_OWORD *)v106 + 1) = v109;
      v110 = v17[21];
      v111 = &v15[v110];
      v112 = &v16[v110];
      *((_QWORD *)v111 + 8) = *((_QWORD *)v112 + 8);
      v113 = *((_OWORD *)v112 + 3);
      *((_OWORD *)v111 + 2) = *((_OWORD *)v112 + 2);
      *((_OWORD *)v111 + 3) = v113;
      v114 = *((_OWORD *)v112 + 1);
      *(_OWORD *)v111 = *(_OWORD *)v112;
      *((_OWORD *)v111 + 1) = v114;
      v115 = v17[22];
      v116 = &v15[v115];
      v117 = &v16[v115];
      *(_OWORD *)v116 = *(_OWORD *)v117;
      *((_QWORD *)v116 + 2) = *((_QWORD *)v117 + 2);
      v118 = v17[23];
      v119 = &v15[v118];
      v120 = &v16[v118];
      *(_OWORD *)v119 = *(_OWORD *)v120;
      *((_QWORD *)v119 + 2) = *((_QWORD *)v120 + 2);
      v121 = v17[24];
      v122 = &v15[v121];
      v123 = &v16[v121];
      v124 = *((_OWORD *)v123 + 1);
      *(_OWORD *)v122 = *(_OWORD *)v123;
      *((_OWORD *)v122 + 1) = v124;
      v125 = v17[25];
      v126 = &v15[v125];
      v127 = &v16[v125];
      v128 = *((_OWORD *)v127 + 1);
      *(_OWORD *)v126 = *(_OWORD *)v127;
      *((_OWORD *)v126 + 1) = v128;
      *(_OWORD *)&v15[v17[26]] = *(_OWORD *)&v16[v17[26]];
      v129 = v17[27];
      v130 = &v15[v129];
      v131 = &v16[v129];
      v132 = *((_OWORD *)v131 + 1);
      *(_OWORD *)v130 = *(_OWORD *)v131;
      *((_OWORD *)v130 + 1) = v132;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v231 + 56))(v15, 0, 1, v17);
    }
    v133 = v13[9];
    v134 = &v8[v133];
    v135 = &v9[v133];
    v136 = *((_OWORD *)v135 + 1);
    *(_OWORD *)v134 = *(_OWORD *)v135;
    *((_OWORD *)v134 + 1) = v136;
    v134[32] = v135[32];
    v137 = v13[10];
    v138 = &v8[v137];
    v139 = &v9[v137];
    v140 = sub_214424308();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v138, v139, v140);
    swift_storeEnumTagMultiPayload();
    v3 = v240;
  }
LABEL_36:
  *(_OWORD *)((char *)a1 + *(int *)(v3 + 36)) = *(_OWORD *)((char *)v4 + *(int *)(v3 + 36));
  return a1;
}

_QWORD *sub_21430D8EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  __int128 v12;
  int *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  int *v24;
  unsigned int (**v25)(_OWORD *, uint64_t, int *);
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  _OWORD *v121;
  _OWORD *v122;
  __int128 v123;
  uint64_t v124;
  _OWORD *v125;
  _OWORD *v126;
  __int128 v127;
  uint64_t v128;
  _OWORD *v129;
  _OWORD *v130;
  __int128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char *v149;
  char *v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  char *v154;
  char *v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  _OWORD *v170;
  _OWORD *v171;
  __int128 v172;
  uint64_t v173;
  _OWORD *v174;
  _OWORD *v175;
  __int128 v176;
  uint64_t v177;
  _OWORD *v178;
  _OWORD *v179;
  __int128 v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  char *v190;
  char *v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  char *v195;
  char *v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char *v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  _OWORD *v211;
  _OWORD *v212;
  __int128 v213;
  uint64_t v214;
  _OWORD *v215;
  _OWORD *v216;
  __int128 v217;
  uint64_t v218;
  _OWORD *v219;
  _OWORD *v220;
  __int128 v221;
  uint64_t v222;
  _OWORD *v223;
  _OWORD *v224;
  __int128 v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v233;
  uint64_t v234;
  int *v235;
  int *v236;
  char *__dst;
  void *__dsta;
  char *__dstb;
  char *__dstc;
  char *__dstd;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 32);
    v8 = (_OWORD *)((char *)a1 + v7);
    v9 = (_OWORD *)((char *)a2 + v7);
    sub_2141DD370((uint64_t)a1 + v7, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    v10 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v20 = v9[1];
        *v8 = *v9;
        v8[1] = v20;
        *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
        *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)((char *)v9 + 40);
        *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)((char *)v9 + 56);
        v21 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        v22 = (_OWORD *)((char *)v8 + v21);
        v23 = (_OWORD *)((char *)v9 + v21);
        v24 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v25 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v24 - 1);
        if (v25[6](v23, 1, v24))
        {
          v26 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          __dsta = v25;
          v244 = a3;
          v45 = v23[1];
          *v22 = *v23;
          v22[1] = v45;
          *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)((char *)v23 + 25);
          *((_BYTE *)v22 + 41) = *((_BYTE *)v23 + 41);
          v46 = v23[4];
          v22[3] = v23[3];
          v22[4] = v46;
          *((_QWORD *)v22 + 10) = *((_QWORD *)v23 + 10);
          v47 = *(_OWORD *)((char *)v23 + 88);
          v48 = *(_OWORD *)((char *)v23 + 104);
          *(_OWORD *)((char *)v22 + 113) = *(_OWORD *)((char *)v23 + 113);
          *(_OWORD *)((char *)v22 + 104) = v48;
          *(_OWORD *)((char *)v22 + 88) = v47;
          *(_OWORD *)((char *)v22 + 136) = *(_OWORD *)((char *)v23 + 136);
          *((_BYTE *)v22 + 152) = *((_BYTE *)v23 + 152);
          *((_QWORD *)v22 + 20) = *((_QWORD *)v23 + 20);
          *((_BYTE *)v22 + 168) = *((_BYTE *)v23 + 168);
          v49 = v23[12];
          v22[11] = v23[11];
          v22[12] = v49;
          *((_BYTE *)v22 + 208) = *((_BYTE *)v23 + 208);
          v50 = v24[11];
          v51 = (char *)v22 + v50;
          v52 = (char *)v23 + v50;
          v53 = sub_214424308();
          v54 = *(_QWORD *)(v53 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
          {
            v55 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
          }
          v74 = v24[12];
          v75 = (char *)v22 + v74;
          v76 = (char *)v23 + v74;
          *(_QWORD *)v75 = *(_QWORD *)v76;
          v75[8] = v76[8];
          *(_QWORD *)((char *)v22 + v24[13]) = *(_QWORD *)((char *)v23 + v24[13]);
          v77 = v24[14];
          v78 = (char *)v22 + v77;
          v79 = (char *)v23 + v77;
          v80 = sub_214424C68();
          v81 = *(_QWORD *)(v80 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
          {
            v82 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v78, v79, v80);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
          }
          a3 = v244;
          v140 = v24[15];
          v141 = (char *)v22 + v140;
          v142 = (char *)v23 + v140;
          *(_QWORD *)v141 = *(_QWORD *)v142;
          *((_WORD *)v141 + 4) = *((_WORD *)v142 + 4);
          *(_QWORD *)((char *)v22 + v24[16]) = *(_QWORD *)((char *)v23 + v24[16]);
          *(_QWORD *)((char *)v22 + v24[17]) = *(_QWORD *)((char *)v23 + v24[17]);
          v143 = v24[18];
          v144 = (char *)v22 + v143;
          v145 = (char *)v23 + v143;
          v146 = *((_OWORD *)v145 + 3);
          *((_OWORD *)v144 + 2) = *((_OWORD *)v145 + 2);
          *((_OWORD *)v144 + 3) = v146;
          *((_QWORD *)v144 + 8) = *((_QWORD *)v145 + 8);
          v147 = *((_OWORD *)v145 + 1);
          *(_OWORD *)v144 = *(_OWORD *)v145;
          *((_OWORD *)v144 + 1) = v147;
          v148 = v24[19];
          v149 = (char *)v22 + v148;
          v150 = (char *)v23 + v148;
          *((_QWORD *)v149 + 8) = *((_QWORD *)v150 + 8);
          v151 = *((_OWORD *)v150 + 3);
          *((_OWORD *)v149 + 2) = *((_OWORD *)v150 + 2);
          *((_OWORD *)v149 + 3) = v151;
          v152 = *((_OWORD *)v150 + 1);
          *(_OWORD *)v149 = *(_OWORD *)v150;
          *((_OWORD *)v149 + 1) = v152;
          v153 = v24[20];
          v154 = (char *)v22 + v153;
          v155 = (char *)v23 + v153;
          v156 = *((_OWORD *)v155 + 3);
          *((_OWORD *)v154 + 2) = *((_OWORD *)v155 + 2);
          *((_OWORD *)v154 + 3) = v156;
          *((_QWORD *)v154 + 8) = *((_QWORD *)v155 + 8);
          v157 = *((_OWORD *)v155 + 1);
          *(_OWORD *)v154 = *(_OWORD *)v155;
          *((_OWORD *)v154 + 1) = v157;
          v158 = v24[21];
          v159 = (char *)v22 + v158;
          v160 = (char *)v23 + v158;
          *((_QWORD *)v159 + 8) = *((_QWORD *)v160 + 8);
          v161 = *((_OWORD *)v160 + 3);
          *((_OWORD *)v159 + 2) = *((_OWORD *)v160 + 2);
          *((_OWORD *)v159 + 3) = v161;
          v162 = *((_OWORD *)v160 + 1);
          *(_OWORD *)v159 = *(_OWORD *)v160;
          *((_OWORD *)v159 + 1) = v162;
          v163 = v24[22];
          v164 = (char *)v22 + v163;
          v165 = (char *)v23 + v163;
          *(_OWORD *)v164 = *(_OWORD *)v165;
          *((_QWORD *)v164 + 2) = *((_QWORD *)v165 + 2);
          v166 = v24[23];
          v167 = (char *)v22 + v166;
          v168 = (char *)v23 + v166;
          *(_OWORD *)v167 = *(_OWORD *)v168;
          *((_QWORD *)v167 + 2) = *((_QWORD *)v168 + 2);
          v169 = v24[24];
          v170 = (_OWORD *)((char *)v22 + v169);
          v171 = (_OWORD *)((char *)v23 + v169);
          v172 = v171[1];
          *v170 = *v171;
          v170[1] = v172;
          v173 = v24[25];
          v174 = (_OWORD *)((char *)v22 + v173);
          v175 = (_OWORD *)((char *)v23 + v173);
          v176 = v175[1];
          *v174 = *v175;
          v174[1] = v176;
          *(_OWORD *)((char *)v22 + v24[26]) = *(_OWORD *)((char *)v23 + v24[26]);
          v177 = v24[27];
          v178 = (_OWORD *)((char *)v22 + v177);
          v179 = (_OWORD *)((char *)v23 + v177);
          v180 = v179[1];
          *v178 = *v179;
          v178[1] = v180;
          (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v22, 0, 1, v24);
        }
LABEL_36:
        swift_storeEnumTagMultiPayload();
        goto LABEL_37;
      case 1:
        v242 = a3;
        v27 = v9[1];
        *v8 = *v9;
        v8[1] = v27;
        *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
        *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)((char *)v9 + 40);
        *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)((char *)v9 + 56);
        v28 = (int *)type metadata accessor for PointsRenderer(0);
        v29 = v28[8];
        v30 = (_OWORD *)((char *)v8 + v29);
        v31 = (_OWORD *)((char *)v9 + v29);
        v32 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v33 = *((_QWORD *)v32 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
        {
          v34 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          a3 = v242;
        }
        else
        {
          v234 = v33;
          v236 = v28;
          v56 = v31[1];
          *v30 = *v31;
          v30[1] = v56;
          *(_OWORD *)((char *)v30 + 25) = *(_OWORD *)((char *)v31 + 25);
          *((_BYTE *)v30 + 41) = *((_BYTE *)v31 + 41);
          v57 = v31[4];
          v30[3] = v31[3];
          v30[4] = v57;
          *((_QWORD *)v30 + 10) = *((_QWORD *)v31 + 10);
          v58 = *(_OWORD *)((char *)v31 + 88);
          v59 = *(_OWORD *)((char *)v31 + 104);
          *(_OWORD *)((char *)v30 + 113) = *(_OWORD *)((char *)v31 + 113);
          *(_OWORD *)((char *)v30 + 104) = v59;
          *(_OWORD *)((char *)v30 + 88) = v58;
          *(_OWORD *)((char *)v30 + 136) = *(_OWORD *)((char *)v31 + 136);
          *((_BYTE *)v30 + 152) = *((_BYTE *)v31 + 152);
          *((_QWORD *)v30 + 20) = *((_QWORD *)v31 + 20);
          *((_BYTE *)v30 + 168) = *((_BYTE *)v31 + 168);
          v60 = v31[12];
          v30[11] = v31[11];
          v30[12] = v60;
          *((_BYTE *)v30 + 208) = *((_BYTE *)v31 + 208);
          v61 = v32[11];
          __dstb = (char *)v30 + v61;
          v62 = (char *)v31 + v61;
          v63 = sub_214424308();
          v64 = *(_QWORD *)(v63 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
          {
            v65 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(__dstb, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v64 + 32))(__dstb, v62, v63);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dstb, 0, 1, v63);
          }
          v83 = v32[12];
          v84 = (char *)v30 + v83;
          v85 = (char *)v31 + v83;
          *(_QWORD *)v84 = *(_QWORD *)v85;
          v84[8] = v85[8];
          *(_QWORD *)((char *)v30 + v32[13]) = *(_QWORD *)((char *)v31 + v32[13]);
          v86 = v32[14];
          __dstd = (char *)v30 + v86;
          v87 = (char *)v31 + v86;
          v88 = sub_214424C68();
          v89 = *(_QWORD *)(v88 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
          {
            v90 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(__dstd, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v89 + 32))(__dstd, v87, v88);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(__dstd, 0, 1, v88);
          }
          a3 = v242;
          v181 = v32[15];
          v182 = (char *)v30 + v181;
          v183 = (char *)v31 + v181;
          *(_QWORD *)v182 = *(_QWORD *)v183;
          *((_WORD *)v182 + 4) = *((_WORD *)v183 + 4);
          *(_QWORD *)((char *)v30 + v32[16]) = *(_QWORD *)((char *)v31 + v32[16]);
          *(_QWORD *)((char *)v30 + v32[17]) = *(_QWORD *)((char *)v31 + v32[17]);
          v184 = v32[18];
          v185 = (char *)v30 + v184;
          v186 = (char *)v31 + v184;
          v187 = *((_OWORD *)v186 + 3);
          *((_OWORD *)v185 + 2) = *((_OWORD *)v186 + 2);
          *((_OWORD *)v185 + 3) = v187;
          *((_QWORD *)v185 + 8) = *((_QWORD *)v186 + 8);
          v188 = *((_OWORD *)v186 + 1);
          *(_OWORD *)v185 = *(_OWORD *)v186;
          *((_OWORD *)v185 + 1) = v188;
          v189 = v32[19];
          v190 = (char *)v30 + v189;
          v191 = (char *)v31 + v189;
          *((_QWORD *)v190 + 8) = *((_QWORD *)v191 + 8);
          v192 = *((_OWORD *)v191 + 3);
          *((_OWORD *)v190 + 2) = *((_OWORD *)v191 + 2);
          *((_OWORD *)v190 + 3) = v192;
          v193 = *((_OWORD *)v191 + 1);
          *(_OWORD *)v190 = *(_OWORD *)v191;
          *((_OWORD *)v190 + 1) = v193;
          v194 = v32[20];
          v195 = (char *)v30 + v194;
          v196 = (char *)v31 + v194;
          v197 = *((_OWORD *)v196 + 3);
          *((_OWORD *)v195 + 2) = *((_OWORD *)v196 + 2);
          *((_OWORD *)v195 + 3) = v197;
          *((_QWORD *)v195 + 8) = *((_QWORD *)v196 + 8);
          v198 = *((_OWORD *)v196 + 1);
          *(_OWORD *)v195 = *(_OWORD *)v196;
          *((_OWORD *)v195 + 1) = v198;
          v199 = v32[21];
          v200 = (char *)v30 + v199;
          v201 = (char *)v31 + v199;
          *((_QWORD *)v200 + 8) = *((_QWORD *)v201 + 8);
          v202 = *((_OWORD *)v201 + 3);
          *((_OWORD *)v200 + 2) = *((_OWORD *)v201 + 2);
          *((_OWORD *)v200 + 3) = v202;
          v203 = *((_OWORD *)v201 + 1);
          *(_OWORD *)v200 = *(_OWORD *)v201;
          *((_OWORD *)v200 + 1) = v203;
          v204 = v32[22];
          v205 = (char *)v30 + v204;
          v206 = (char *)v31 + v204;
          *(_OWORD *)v205 = *(_OWORD *)v206;
          *((_QWORD *)v205 + 2) = *((_QWORD *)v206 + 2);
          v207 = v32[23];
          v208 = (char *)v30 + v207;
          v209 = (char *)v31 + v207;
          *(_OWORD *)v208 = *(_OWORD *)v209;
          *((_QWORD *)v208 + 2) = *((_QWORD *)v209 + 2);
          v210 = v32[24];
          v211 = (_OWORD *)((char *)v30 + v210);
          v212 = (_OWORD *)((char *)v31 + v210);
          v213 = v212[1];
          *v211 = *v212;
          v211[1] = v213;
          v214 = v32[25];
          v215 = (_OWORD *)((char *)v30 + v214);
          v216 = (_OWORD *)((char *)v31 + v214);
          v217 = v216[1];
          *v215 = *v216;
          v215[1] = v217;
          *(_OWORD *)((char *)v30 + v32[26]) = *(_OWORD *)((char *)v31 + v32[26]);
          v218 = v32[27];
          v219 = (_OWORD *)((char *)v30 + v218);
          v220 = (_OWORD *)((char *)v31 + v218);
          v221 = v220[1];
          *v219 = *v220;
          v219[1] = v221;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v234 + 56))(v30, 0, 1, v32);
          v28 = v236;
        }
        v222 = v28[9];
        v223 = (_OWORD *)((char *)v8 + v222);
        v224 = (_OWORD *)((char *)v9 + v222);
        v225 = v224[1];
        *v223 = *v224;
        v223[1] = v225;
        *(_OWORD *)((char *)v223 + 25) = *(_OWORD *)((char *)v224 + 25);
        v226 = v28[10];
        v227 = (char *)v8 + v226;
        v228 = (char *)v9 + v226;
        v227[16] = v228[16];
        *(_OWORD *)v227 = *(_OWORD *)v228;
        goto LABEL_36;
      case 0:
        v12 = v9[1];
        *v8 = *v9;
        v8[1] = v12;
        *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
        *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)((char *)v9 + 40);
        *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)((char *)v9 + 56);
        v13 = (int *)type metadata accessor for RectanglesRenderer(0);
        v14 = v13[8];
        v15 = (_OWORD *)((char *)v8 + v14);
        v16 = (_OWORD *)((char *)v9 + v14);
        v17 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v18 = *((_QWORD *)v17 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
        {
          v19 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          v233 = v18;
          v235 = v13;
          v243 = a3;
          v35 = v16[1];
          *v15 = *v16;
          v15[1] = v35;
          *(_OWORD *)((char *)v15 + 25) = *(_OWORD *)((char *)v16 + 25);
          *((_BYTE *)v15 + 41) = *((_BYTE *)v16 + 41);
          v36 = v16[4];
          v15[3] = v16[3];
          v15[4] = v36;
          *((_QWORD *)v15 + 10) = *((_QWORD *)v16 + 10);
          v37 = *(_OWORD *)((char *)v16 + 88);
          v38 = *(_OWORD *)((char *)v16 + 104);
          *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
          *(_OWORD *)((char *)v15 + 104) = v38;
          *(_OWORD *)((char *)v15 + 88) = v37;
          *(_OWORD *)((char *)v15 + 136) = *(_OWORD *)((char *)v16 + 136);
          *((_BYTE *)v15 + 152) = *((_BYTE *)v16 + 152);
          *((_QWORD *)v15 + 20) = *((_QWORD *)v16 + 20);
          *((_BYTE *)v15 + 168) = *((_BYTE *)v16 + 168);
          v39 = v16[12];
          v15[11] = v16[11];
          v15[12] = v39;
          *((_BYTE *)v15 + 208) = *((_BYTE *)v16 + 208);
          v40 = v17[11];
          __dst = (char *)v15 + v40;
          v41 = (char *)v16 + v40;
          v42 = sub_214424308();
          v43 = *(_QWORD *)(v42 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
          {
            v44 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(__dst, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v43 + 32))(__dst, v41, v42);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v42);
          }
          v66 = v17[12];
          v67 = (char *)v15 + v66;
          v68 = (char *)v16 + v66;
          *(_QWORD *)v67 = *(_QWORD *)v68;
          v67[8] = v68[8];
          *(_QWORD *)((char *)v15 + v17[13]) = *(_QWORD *)((char *)v16 + v17[13]);
          v69 = v17[14];
          __dstc = (char *)v15 + v69;
          v70 = (char *)v16 + v69;
          v71 = sub_214424C68();
          v72 = *(_QWORD *)(v71 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
          {
            v73 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(__dstc, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v72 + 32))(__dstc, v70, v71);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dstc, 0, 1, v71);
          }
          a3 = v243;
          v13 = v235;
          v91 = v17[15];
          v92 = (char *)v15 + v91;
          v93 = (char *)v16 + v91;
          *(_QWORD *)v92 = *(_QWORD *)v93;
          *((_WORD *)v92 + 4) = *((_WORD *)v93 + 4);
          *(_QWORD *)((char *)v15 + v17[16]) = *(_QWORD *)((char *)v16 + v17[16]);
          *(_QWORD *)((char *)v15 + v17[17]) = *(_QWORD *)((char *)v16 + v17[17]);
          v94 = v17[18];
          v95 = (char *)v15 + v94;
          v96 = (char *)v16 + v94;
          v97 = *((_OWORD *)v96 + 3);
          *((_OWORD *)v95 + 2) = *((_OWORD *)v96 + 2);
          *((_OWORD *)v95 + 3) = v97;
          *((_QWORD *)v95 + 8) = *((_QWORD *)v96 + 8);
          v98 = *((_OWORD *)v96 + 1);
          *(_OWORD *)v95 = *(_OWORD *)v96;
          *((_OWORD *)v95 + 1) = v98;
          v99 = v17[19];
          v100 = (char *)v15 + v99;
          v101 = (char *)v16 + v99;
          *((_QWORD *)v100 + 8) = *((_QWORD *)v101 + 8);
          v102 = *((_OWORD *)v101 + 3);
          *((_OWORD *)v100 + 2) = *((_OWORD *)v101 + 2);
          *((_OWORD *)v100 + 3) = v102;
          v103 = *((_OWORD *)v101 + 1);
          *(_OWORD *)v100 = *(_OWORD *)v101;
          *((_OWORD *)v100 + 1) = v103;
          v104 = v17[20];
          v105 = (char *)v15 + v104;
          v106 = (char *)v16 + v104;
          v107 = *((_OWORD *)v106 + 3);
          *((_OWORD *)v105 + 2) = *((_OWORD *)v106 + 2);
          *((_OWORD *)v105 + 3) = v107;
          *((_QWORD *)v105 + 8) = *((_QWORD *)v106 + 8);
          v108 = *((_OWORD *)v106 + 1);
          *(_OWORD *)v105 = *(_OWORD *)v106;
          *((_OWORD *)v105 + 1) = v108;
          v109 = v17[21];
          v110 = (char *)v15 + v109;
          v111 = (char *)v16 + v109;
          *((_QWORD *)v110 + 8) = *((_QWORD *)v111 + 8);
          v112 = *((_OWORD *)v111 + 3);
          *((_OWORD *)v110 + 2) = *((_OWORD *)v111 + 2);
          *((_OWORD *)v110 + 3) = v112;
          v113 = *((_OWORD *)v111 + 1);
          *(_OWORD *)v110 = *(_OWORD *)v111;
          *((_OWORD *)v110 + 1) = v113;
          v114 = v17[22];
          v115 = (char *)v15 + v114;
          v116 = (char *)v16 + v114;
          *(_OWORD *)v115 = *(_OWORD *)v116;
          *((_QWORD *)v115 + 2) = *((_QWORD *)v116 + 2);
          v117 = v17[23];
          v118 = (char *)v15 + v117;
          v119 = (char *)v16 + v117;
          *(_OWORD *)v118 = *(_OWORD *)v119;
          *((_QWORD *)v118 + 2) = *((_QWORD *)v119 + 2);
          v120 = v17[24];
          v121 = (_OWORD *)((char *)v15 + v120);
          v122 = (_OWORD *)((char *)v16 + v120);
          v123 = v122[1];
          *v121 = *v122;
          v121[1] = v123;
          v124 = v17[25];
          v125 = (_OWORD *)((char *)v15 + v124);
          v126 = (_OWORD *)((char *)v16 + v124);
          v127 = v126[1];
          *v125 = *v126;
          v125[1] = v127;
          *(_OWORD *)((char *)v15 + v17[26]) = *(_OWORD *)((char *)v16 + v17[26]);
          v128 = v17[27];
          v129 = (_OWORD *)((char *)v15 + v128);
          v130 = (_OWORD *)((char *)v16 + v128);
          v131 = v130[1];
          *v129 = *v130;
          v129[1] = v131;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v233 + 56))(v15, 0, 1, v17);
        }
        v132 = v13[9];
        v133 = (char *)v8 + v132;
        v134 = (char *)v9 + v132;
        v135 = *((_OWORD *)v134 + 1);
        *(_OWORD *)v133 = *(_OWORD *)v134;
        *((_OWORD *)v133 + 1) = v135;
        v133[32] = v134[32];
        v136 = v13[10];
        v137 = (char *)v8 + v136;
        v138 = (char *)v9 + v136;
        v139 = sub_214424308();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 32))(v137, v138, v139);
        goto LABEL_36;
    }
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
LABEL_37:
  v229 = *(int *)(a3 + 36);
  v230 = (char *)a1 + v229;
  v231 = (char *)a2 + v229;
  *v230 = *v231;
  *((_QWORD *)v230 + 1) = *((_QWORD *)v231 + 1);
  swift_release();
  return a1;
}

uint64_t sub_21430E574()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21430E580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21430E58C(a1, a2, a3, type metadata accessor for AnyVectorizedRenderer);
}

uint64_t sub_21430E58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v5;
  uint64_t v9;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = a4(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v9);
  }
}

uint64_t sub_21430E608()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21430E614(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_21430E620(a1, a2, a3, a4, type metadata accessor for AnyVectorizedRenderer);
}

uint64_t sub_21430E620(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  uint64_t v8;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = a5(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6 + *(int *)(a4 + 32), a2, a2, v8);
  }
  return result;
}

uint64_t sub_21430E694()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgPath.DrawStyle()
{
  return &type metadata for SgPath.DrawStyle;
}

unint64_t sub_21430E738()
{
  unint64_t result;

  result = qword_254D6ABE8;
  if (!qword_254D6ABE8)
  {
    result = MEMORY[0x2199CD934](&unk_21442C0D4, &type metadata for SgPath.DrawStyle);
    atomic_store(result, (unint64_t *)&qword_254D6ABE8);
  }
  return result;
}

unint64_t sub_21430E780()
{
  unint64_t result;

  result = qword_254D6ABF0;
  if (!qword_254D6ABF0)
  {
    result = MEMORY[0x2199CD934](&unk_21442C1DC, &type metadata for SgAnnotation.Orientation);
    atomic_store(result, (unint64_t *)&qword_254D6ABF0);
  }
  return result;
}

unint64_t sub_21430E7C8()
{
  unint64_t result;

  result = qword_254D6ABF8;
  if (!qword_254D6ABF8)
  {
    result = MEMORY[0x2199CD934](&unk_21442C244, &type metadata for SgAccessibilitySummaryKind);
    atomic_store(result, (unint64_t *)&qword_254D6ABF8);
  }
  return result;
}

unint64_t sub_21430E810()
{
  unint64_t result;

  result = qword_253F11E68;
  if (!qword_253F11E68)
  {
    result = MEMORY[0x2199CD934](&unk_21442C29C, &type metadata for SgAccessibilityDataField.LabelKey);
    atomic_store(result, (unint64_t *)&qword_253F11E68);
  }
  return result;
}

uint64_t sub_21430E854()
{
  return MEMORY[0x24BEE4578];
}

uint64_t sub_21430E860(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t result;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  _BYTE v60[48];
  _QWORD v61[4];
  unsigned __int8 v62;
  _QWORD v63[4];
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  CGRect v70;

  v5 = v4;
  v9 = sub_2144240D4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for RenderParams(0);
  MEMORY[0x24BDAC7A8](v52);
  v51 = (uint64_t)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PointElementDrawer(0);
  v15 = (uint64_t *)(v5 + *(int *)(v14 + 20));
  v16 = v15[1];
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    __break(1u);
    goto LABEL_22;
  }
  v18 = a2 % v17;
  if (v18 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v19 = v14;
  v20 = *v15;
  v21 = *(_QWORD *)(v16 + 8 * v18 + 32);
  if ((v21 & 0x8000000000000000) != 0)
  {
    v22 = __OFSUB__(0, v21);
    v21 = -(uint64_t)v21;
    if (v22)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if ((v21 & 0x8000000000000000) != 0)
      goto LABEL_23;
  }
  if (v21 >= *(_QWORD *)(v20 + 16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_2141F9E40(v20 + 40 * v21 + 32, (uint64_t)v60);
  v60[40] = 0;
  v23 = (uint64_t *)(v5 + *(int *)(v19 + 24));
  v24 = v23[1];
  v25 = *(_QWORD *)(v24 + 16);
  if (!v25)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v26 = a2 % v25;
  if (v26 < 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v27 = *v23;
  v28 = *(_QWORD *)(v24 + 8 * v26 + 32);
  if ((v28 & 0x8000000000000000) != 0)
  {
    v22 = __OFSUB__(0, v28);
    v28 = -(uint64_t)v28;
    if (v22)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      result = sub_214425628();
      __break(1u);
      return result;
    }
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_27;
  }
  if (v28 >= *(_QWORD *)(v27 + 16))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v49 = v12;
  v47 = v10;
  sub_2142AAEB4((uint64_t)v60, (uint64_t)&v56);
  v48 = v9;
  if (v59 == 1)
  {
    swift_release();
  }
  else
  {
    v53 = v56;
    v54 = v57;
    v29 = v58;
    v55 = v58;
    v30 = *((_QWORD *)&v57 + 1);
    sub_2141E88D0(&v53, *((uint64_t *)&v57 + 1));
    (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v30, v29);
    sub_2143039E0((uint64_t)&v53);
  }
  v31 = a1;
  v32 = v5;
  v50 = a4;
  sub_2142AAEB4((uint64_t)v60, (uint64_t)&v56);
  if ((v59 & 1) != 0)
    goto LABEL_31;
  v53 = v56;
  v54 = v57;
  v55 = v58;
  sub_2141E88D0(&v53, *((uint64_t *)&v57 + 1));
  sub_214424A10();
  v33 = v61[1];
  v46[0] = v61[0];
  v35 = v61[2];
  v34 = v61[3];
  v36 = v62;
  sub_214424044();
  v46[1] = *v31;
  v37 = v51;
  sub_2141FDEA0(v32, v51, type metadata accessor for RenderParams);
  v38 = v37 + *(int *)(v52 + 20);
  v39 = v47;
  v40 = v48;
  v41 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v49, *MEMORY[0x24BDED100], v48);
  v42 = sub_2144240C8();
  v43 = *(void (**)(char *, uint64_t))(v39 + 8);
  v43(v41, v40);
  v43((char *)v38, v40);
  if ((v42 & 1) != 0)
  {
    sub_2141FE3B0((uint64_t)v61, (uint64_t)v63);
    sub_2141FE404((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
    v44 = v46[0];
  }
  else
  {
    sub_2144246D4();
    CGRectGetMidX(v70);
    sub_214424758();
    v44 = v63[0];
    v33 = v63[1];
    v35 = v63[2];
    v34 = v63[3];
    v36 = v64;
  }
  v65 = v44;
  v66 = v33;
  v67 = v35;
  v68 = v34;
  v69 = v36;
  sub_214423FC0();
  sub_2141EEF3C(v44, v33, v35, v34, v36);
  sub_2141FE404((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  sub_2143039E0((uint64_t)&v53);
  return sub_21420D730((uint64_t)v60);
}

uint64_t sub_21430ECE4(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t (*v16)(_QWORD);
  _BYTE *v17;
  char v18;
  void (*v19)(_BYTE *, uint64_t);
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t inited;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  double v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;

  v9 = sub_2144240D4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RenderParams(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141FDEA0(v4, (uint64_t)v15, v16);
  v17 = &v15[*(int *)(v13 + 20)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDED100], v9);
  v18 = sub_2144240C8();
  v19 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v19(v12, v9);
  v19(v17, v9);
  if (a2 >= a1)
    v20 = a1;
  else
    v20 = a2;
  if (a1 > a2)
    v21 = a1;
  else
    v21 = a2;
  if ((v18 & 1) != 0)
    v22 = v20;
  else
    v22 = v21;
  if (a4 >= a3)
    v23 = a3;
  else
    v23 = a4;
  v24 = vabdd_f64(a2, a1);
  v25 = vabdd_f64(a4, a3);
  v26 = v4 + *(int *)(type metadata accessor for RectangleElementDrawer(0) + 20);
  if ((*(_BYTE *)(v26 + 32) & 1) != 0)
    goto LABEL_26;
  v28 = *(double *)(v26 + 16);
  v27 = *(double *)(v26 + 24);
  v30 = *(double *)v26;
  v29 = *(double *)(v26 + 8);
  sub_2141D8BF8(&qword_253F13D68);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21442C470;
  *(double *)(inited + 32) = v30;
  *(double *)(inited + 40) = v27;
  *(double *)(inited + 48) = v28;
  *(double *)(inited + 56) = v29;
  if (v30 < 2.22044605e-16 && v27 < 2.22044605e-16 && v28 < 2.22044605e-16 && v29 < 2.22044605e-16)
  {
    swift_setDeallocating();
LABEL_26:
    sub_21442477C();
    v36 = v43;
    v37 = v44;
    v38 = v45;
    v39 = v46;
    v40 = v47;
    goto LABEL_27;
  }
  v35 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v35);
  v42[-10] = v22;
  v42[-9] = v23;
  v42[-8] = v24;
  v42[-7] = v25;
  v42[-6] = v30;
  v42[-5] = v29;
  v42[-4] = v28;
  v42[-3] = v27;
  *(_QWORD *)&v42[-2] = v4;
  sub_214424794();
  v36 = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
LABEL_27:
  v48 = v36;
  v49 = v37;
  v50 = v38;
  v51 = v39;
  v52 = v40;
  sub_214424044();
  sub_214423FC0();
  return sub_2141EEF3C(v36, v37, v38, v39, v40);
}

uint64_t sub_21430EF88()
{
  type metadata accessor for RectangleElementDrawer(0);
  return sub_2144246EC();
}

uint64_t sub_21430F02C()
{
  sub_2144246F8();
  return sub_21442471C();
}

uint64_t getEnumTagSinglePayload for SgAnnotation.OverflowResolution.Strategy(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    if (v6 >= 3)
      v7 = v6 - 2;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21430F0D4 + 4 * byte_21442BA17[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SgAnnotation.OverflowResolution.Strategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21430F180 + 4 * byte_21442BA21[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21430F1B4 + 4 * byte_21442BA1C[v5]))();
}

uint64_t sub_21430F1B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21430F1BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21430F1C4);
  return result;
}

uint64_t sub_21430F1D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21430F1D8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21430F1DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21430F1E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SgAnnotation.OverflowResolution.Strategy()
{
  return &type metadata for SgAnnotation.OverflowResolution.Strategy;
}

uint64_t _s6Charts6SgPathV9DrawStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21430F24C + 4 * byte_21442BA2B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21430F280 + 4 * byte_21442BA26[v4]))();
}

uint64_t sub_21430F280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21430F288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21430F290);
  return result;
}

uint64_t sub_21430F29C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21430F2A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21430F2A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21430F2B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SgAnnotation.CollisionResolution.Method()
{
  return &type metadata for SgAnnotation.CollisionResolution.Method;
}

unint64_t sub_21430F2D0()
{
  unint64_t result;

  result = qword_254D6AC00;
  if (!qword_254D6AC00)
  {
    result = MEMORY[0x2199CD934](&unk_21442C3BC, &type metadata for SgAnnotation.CollisionResolution.Method);
    atomic_store(result, (unint64_t *)&qword_254D6AC00);
  }
  return result;
}

uint64_t _s6Charts12SgAnnotationV11OrientationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21430F360 + 4 * byte_21442BA35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21430F394 + 4 * byte_21442BA30[v4]))();
}

uint64_t sub_21430F394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21430F39C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21430F3A4);
  return result;
}

uint64_t sub_21430F3B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21430F3B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21430F3BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21430F3C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SgAnnotation.OverflowResolution.Boundary()
{
  return &type metadata for SgAnnotation.OverflowResolution.Boundary;
}

unint64_t sub_21430F3E4()
{
  unint64_t result;

  result = qword_254D6AC08;
  if (!qword_254D6AC08)
  {
    result = MEMORY[0x2199CD934](&unk_21442C430, &type metadata for SgAnnotation.OverflowResolution.Boundary);
    atomic_store(result, (unint64_t *)&qword_254D6AC08);
  }
  return result;
}

uint64_t sub_21430F428(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for SgClipRect(0) - 8);
    v5 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = *v5;
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_2141D39D4((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      v5 = (uint64_t *)((char *)v5 + v6);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430F518(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2141D3C74(0, v1, 0);
    v2 = v16;
    v4 = *(_QWORD *)(type metadata accessor for SgClipRect(0) - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (__int128 *)(a1
                    + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                    + 32);
    do
    {
      v7 = *v6;
      v8 = v6[1];
      v10 = *(_QWORD *)(v16 + 16);
      v9 = *(_QWORD *)(v16 + 24);
      if (v10 >= v9 >> 1)
      {
        v14 = v6[1];
        v15 = *v6;
        sub_2141D3C74((char *)(v9 > 1), v10 + 1, 1);
        v8 = v14;
        v7 = v15;
      }
      *((_QWORD *)&v11 + 1) = *((_QWORD *)&v7 + 1);
      *((_QWORD *)&v7 + 1) = *((_QWORD *)&v8 + 1);
      *(_QWORD *)&v11 = v8;
      *(_QWORD *)(v16 + 16) = v10 + 1;
      v12 = v16 + 32 * v10;
      *(_OWORD *)(v12 + 32) = v7;
      *(_OWORD *)(v12 + 48) = v11;
      v6 = (__int128 *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430F618(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = sub_214326600(a1, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21430F678(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v10[48];
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D3CD8(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for SgShapeStyle() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_2141FE4A4(v5, (uint64_t)v10);
      v11 = v2;
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D3CD8((char *)(v7 > 1), v8 + 1, 1);
        v2 = v11;
      }
      *(_QWORD *)(v2 + 16) = v8 + 1;
      sub_21421D060((uint64_t)v10, v2 + 48 * v8 + 32);
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430F774(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2141D3CBC(0, v1, 0);
    v2 = v16;
    v4 = *(_QWORD *)(type metadata accessor for SgShapeStyle() - 8);
    v14 = *(_QWORD *)(v4 + 72);
    v5 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + a1
                   + 80);
    do
    {
      v6 = *(v5 - 4);
      v15 = *(v5 - 3);
      v8 = *(v5 - 2);
      v7 = *(v5 - 1);
      v9 = *v5;
      v10 = *(_QWORD *)(v16 + 16);
      v11 = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v11 >> 1)
        sub_2141D3CBC((_QWORD *)(v11 > 1), v10 + 1, 1);
      v5 = (uint64_t *)((char *)v5 + v14);
      *(_QWORD *)(v16 + 16) = v10 + 1;
      v12 = (_QWORD *)(v16 + 40 * v10);
      v12[4] = v6;
      v12[5] = v15;
      v12[6] = v8;
      v12[7] = v7;
      v12[8] = v9;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430F890(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for SgShapeStyle() - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (uint64_t *)(a1
                   + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + 88);
    do
    {
      v7 = *v6;
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_2141D39D4((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      v6 = (uint64_t *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430F984(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2141D3C74(0, v1, 0);
    v2 = v16;
    v4 = *(_QWORD *)(type metadata accessor for SgRectangle(0) - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (__int128 *)(a1
                    + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                    + 40);
    do
    {
      v7 = *v6;
      v8 = v6[1];
      v10 = *(_QWORD *)(v16 + 16);
      v9 = *(_QWORD *)(v16 + 24);
      if (v10 >= v9 >> 1)
      {
        v14 = v6[1];
        v15 = *v6;
        sub_2141D3C74((char *)(v9 > 1), v10 + 1, 1);
        v8 = v14;
        v7 = v15;
      }
      *((_QWORD *)&v11 + 1) = *((_QWORD *)&v7 + 1);
      *((_QWORD *)&v7 + 1) = *((_QWORD *)&v8 + 1);
      *(_QWORD *)&v11 = v8;
      *(_QWORD *)(v16 + 16) = v10 + 1;
      v12 = v16 + 32 * v10;
      *(_OWORD *)(v12 + 32) = v7;
      *(_OWORD *)(v12 + 48) = v11;
      v6 = (__int128 *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430FA84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for SgShapeStyle();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v15 = v1;
    v17 = MEMORY[0x24BEE4AF8];
    sub_2141D3CF4(0, v7, 0);
    v8 = v17;
    v16 = type metadata accessor for SgRectangle(0);
    v9 = *(_QWORD *)(v16 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_2141FDEA0(v10 + *(int *)(v16 + 44), (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v17 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2141D3CF4(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      sub_2141FE1E0((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v10 += v11;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_21430FBEC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v12;
    v4 = type metadata accessor for SgSector(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      v8 = *(_QWORD *)(v6 + *(int *)(v4 + 52));
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        sub_2141D39D4((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8;
      v6 += v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430FCDC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v12;
    v4 = type metadata accessor for SgSector(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(_QWORD *)(v5 + 72);
    v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + a1 + 8;
    do
    {
      v8 = *(_QWORD *)(v7 + *(int *)(v4 + 52));
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        sub_2141D39D4((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8;
      v7 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430FDD0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for SgSector(0) - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (uint64_t *)(a1
                   + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + 40);
    do
    {
      v7 = *v6;
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_2141D39D4((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      v6 = (uint64_t *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430FEC4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for SgSector(0) - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (uint64_t *)(a1
                   + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + 48);
    do
    {
      v7 = *v6;
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_2141D39D4((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      v6 = (uint64_t *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21430FFB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for SgShapeStyle();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v15 = v1;
    v17 = MEMORY[0x24BEE4AF8];
    sub_2141D3CF4(0, v7, 0);
    v8 = v17;
    v16 = type metadata accessor for SgSector(0);
    v9 = *(_QWORD *)(v16 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_2141FDEA0(v10 + *(int *)(v16 + 48), (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v17 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2141D3CF4(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      sub_2141FE1E0((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v10 += v11;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_214310120(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  __int128 v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D3D3C(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(type metadata accessor for SgPoint(0) - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (_BYTE *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + a1 + 40);
    do
    {
      v7 = *((_OWORD *)v6 - 1);
      v8 = *v6;
      v10 = *(_QWORD *)(v14 + 16);
      v9 = *(_QWORD *)(v14 + 24);
      if (v10 >= v9 >> 1)
      {
        v13 = *((_OWORD *)v6 - 1);
        sub_2141D3D3C((char *)(v9 > 1), v10 + 1, 1);
        v7 = v13;
      }
      *(_QWORD *)(v14 + 16) = v10 + 1;
      v11 = v14 + 24 * v10;
      *(_OWORD *)(v11 + 32) = v7;
      *(_BYTE *)(v11 + 48) = v8;
      v6 += v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214310228(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v3, 0);
    v4 = v14;
    v7 = *(_QWORD *)(a3(0) - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v9 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 8);
    do
    {
      v10 = *v9;
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        sub_2141D39D4((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      *(_QWORD *)(v14 + 8 * v12 + 32) = v10;
      v9 = (uint64_t *)((char *)v9 + v8);
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_214310320(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v3, 0);
    v4 = v14;
    v7 = *(_QWORD *)(a3(0) - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v9 = (uint64_t *)(a1
                   + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                   + 24);
    do
    {
      v10 = *v9;
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        sub_2141D39D4((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      *(_QWORD *)(v14 + 8 * v12 + 32) = v10;
      v9 = (uint64_t *)((char *)v9 + v8);
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_214310418(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v3, 0);
    v4 = v14;
    v7 = *(_QWORD *)(a3(0) - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v9 = (uint64_t *)(a1
                   + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                   + 16);
    do
    {
      v10 = *v9;
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        sub_2141D39D4((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      *(_QWORD *)(v14 + 8 * v12 + 32) = v10;
      v9 = (uint64_t *)((char *)v9 + v8);
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_214310510(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v3, 0);
    v4 = v14;
    v7 = *(_QWORD *)(a3(0) - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v9 = (uint64_t *)(a1
                   + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                   + 32);
    do
    {
      v10 = *v9;
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        sub_2141D39D4((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      *(_QWORD *)(v14 + 8 * v12 + 32) = v10;
      v9 = (uint64_t *)((char *)v9 + v8);
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_214310608(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for SgShapeStyle();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v18 = v3;
    v20 = MEMORY[0x24BEE4AF8];
    sub_2141D3CF4(0, v10, 0);
    v11 = v20;
    v19 = a3(0);
    v12 = *(_QWORD *)(v19 - 8);
    v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    do
    {
      sub_2141FDEA0(v13 + *(int *)(v19 + 36), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v20 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_2141D3CF4(v15 > 1, v16 + 1, 1);
        v11 = v20;
      }
      *(_QWORD *)(v11 + 16) = v16 + 1;
      sub_2141FE1E0((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v13 += v14;
      --v10;
    }
    while (v10);
  }
  return v11;
}

uint64_t sub_214310774(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D3D60(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v6 = *v4;
      v4 += 4;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D3D60((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_214310830(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  _BYTE *v4;
  __int128 v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D3D3C(0, v2, 0);
    result = v11;
    v4 = (_BYTE *)(a1 + 48);
    do
    {
      v5 = *((_OWORD *)v4 - 1);
      v6 = *v4;
      v12 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        v10 = *((_OWORD *)v4 - 1);
        sub_2141D3D3C((char *)(v7 > 1), v8 + 1, 1);
        v5 = v10;
        result = v12;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      v9 = result + 24 * v8;
      *(_OWORD *)(v9 + 32) = v5;
      *(_BYTE *)(v9 + 48) = v6;
      v4 += 32;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21431090C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for SgShapeStyle();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v18 = v3;
    v20 = MEMORY[0x24BEE4AF8];
    sub_2141D3CF4(0, v10, 0);
    v11 = v20;
    v19 = a3(0);
    v12 = *(_QWORD *)(v19 - 8);
    v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    do
    {
      sub_2141FDEA0(v13 + *(int *)(v19 + 32), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v20 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_2141D3CF4(v15 > 1, v16 + 1, 1);
        v11 = v20;
      }
      *(_QWORD *)(v11 + 16) = v16 + 1;
      sub_2141FE1E0((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v13 += v14;
      --v10;
    }
    while (v10);
  }
  return v11;
}

uint64_t sub_214310A78(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 22;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_214310B38(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 22;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_214310BF8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v1, 0);
    v2 = v12;
    v4 = type metadata accessor for SgPath(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      v8 = *(_QWORD *)(v6 + *(int *)(v4 + 32));
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        sub_2141D3AA0((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8;
      v6 += v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214310CE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for SgShapeStyle();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v15 = v1;
    v17 = MEMORY[0x24BEE4AF8];
    sub_2141D3CF4(0, v7, 0);
    v8 = v17;
    v16 = type metadata accessor for SgPath(0);
    v9 = *(_QWORD *)(v16 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_2141FDEA0(v10 + *(int *)(v16 + 24), (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v17 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2141D3CF4(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      sub_2141FE1E0((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      v10 += v11;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_214310E50(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v12;
    v4 = type metadata accessor for SgGroup(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      v8 = *(_QWORD *)(v6 + *(int *)(v4 + 28));
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        sub_2141D39D4((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8;
      v6 += v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214310F40(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10[98];
  uint64_t v11;
  _BYTE v12[784];
  _BYTE __src[720];
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D3FEC(0, v1, 0);
    v4 = a1 + 40;
    do
    {
      v11 = *(_QWORD *)(v4 - 8);
      v5 = v11;
      sub_2142AAF2C(v4, (uint64_t)v12);
      v9 = v5;
      memcpy(v10, v12, 0x309uLL);
      sub_2141FCAC0(&v10[9], (uint64_t)__src);
      sub_2141E0750((uint64_t)&v9, &qword_253F13338);
      v2 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3FEC(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v14;
      }
      v7 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D3FEC((char *)(v6 > 1), v7 + 1, 1);
        v2 = v14;
      }
      v4 += 792;
      *(_QWORD *)(v2 + 16) = v7 + 1;
      memcpy((void *)(v2 + 712 * v7 + 32), __src, 0x2C1uLL);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2143110A0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _QWORD v11[98];
  uint64_t v12;
  _BYTE v13[784];
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v1, 0);
    v4 = a1 + 40;
    do
    {
      v12 = *(_QWORD *)(v4 - 8);
      v5 = v12;
      sub_2142AAF2C(v4, (uint64_t)v13);
      v10 = v5;
      memcpy(v11, v13, 0x309uLL);
      v6 = v11[1];
      sub_2141E0750((uint64_t)&v10, &qword_253F13338);
      v2 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3AA0(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v14;
      }
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D3AA0((char *)(v7 > 1), v8 + 1, 1);
        v2 = v14;
      }
      v4 += 792;
      *(_QWORD *)(v2 + 16) = v8 + 1;
      *(_QWORD *)(v2 + 8 * v8 + 32) = v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2143111EC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _QWORD v11[98];
  uint64_t v12;
  _BYTE v13[792];
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v1, 0);
    v4 = a1 + 40;
    do
    {
      v12 = *(_QWORD *)(v4 - 8);
      v5 = v12;
      sub_2142AAF2C(v4, (uint64_t)v13);
      v10 = v5;
      memcpy(v11, v13, 0x309uLL);
      v6 = v11[2];
      swift_retain();
      sub_2141E0750((uint64_t)&v10, &qword_253F13338);
      v2 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3A14(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v14;
      }
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D3A14((char *)(v7 > 1), v8 + 1, 1);
        v2 = v14;
      }
      v4 += 792;
      *(_QWORD *)(v2 + 16) = v8 + 1;
      *(_QWORD *)(v2 + 8 * v8 + 32) = v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214311338(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[98];
  uint64_t v12;
  _BYTE v13[792];
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D3D20(0, v1, 0);
    v4 = a1 + 40;
    do
    {
      v12 = *(_QWORD *)(v4 - 8);
      v5 = v12;
      sub_2142AAF2C(v4, (uint64_t)v13);
      v10 = v5;
      memcpy(v11, v13, 0x309uLL);
      v9 = *(_OWORD *)&v11[3];
      sub_2141E0750((uint64_t)&v10, &qword_253F13338);
      v2 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3D20(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v14;
      }
      v7 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D3D20((char *)(v6 > 1), v7 + 1, 1);
        v2 = v14;
      }
      v4 += 792;
      *(_QWORD *)(v2 + 16) = v7 + 1;
      *(_OWORD *)(v2 + 16 * v7 + 32) = v9;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214311484(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[98];
  uint64_t v14;
  _BYTE v15[792];
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2141D3C74(0, v1, 0);
    v4 = a1 + 40;
    do
    {
      v14 = *(_QWORD *)(v4 - 8);
      v5 = v14;
      sub_2142AAF2C(v4, (uint64_t)v15);
      v12 = v5;
      memcpy(v13, v15, 0x309uLL);
      v10 = *(_OWORD *)&v13[7];
      v11 = *(_OWORD *)&v13[5];
      sub_2141E0750((uint64_t)&v12, &qword_253F13338);
      v2 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3C74(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v16;
      }
      v7 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D3C74((char *)(v6 > 1), v7 + 1, 1);
        v2 = v16;
      }
      v4 += 792;
      *(_QWORD *)(v2 + 16) = v7 + 1;
      v8 = v2 + 32 * v7;
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2143115E0(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D3D60(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 5;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D3D60((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21431169C(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21431175C(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21431181C(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2143118DC(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 64);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_21431199C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  _BYTE v8[784];

  v4 = sub_214324690(a1);
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  if (v4 == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 254;
    *(_OWORD *)a2 = 0u;
    bzero((void *)(a2 + 192), 0x251uLL);
  }
  else
  {
    v7 = sub_214324718((uint64_t)v8, v4, v5, 0, a1);
    *(_QWORD *)a2 = v7;
    sub_2142AAF2C((uint64_t)v8, a2 + 8);
    sub_2141E0750((uint64_t)&v7, &qword_253F13338);
  }
}

uint64_t sub_214311A88@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  float64x2_t v30;
  _OWORD v31[50];
  _QWORD __dst[98];

  if (*(_QWORD *)(a1 + 16) <= 1uLL)
  {
    v29 = swift_bridgeObjectRetain();
    sub_21431199C(v29, (uint64_t)v31);
    swift_bridgeObjectRelease();
    if (BYTE8(v31[11]) == 254)
    {
      result = sub_2141E0750((uint64_t)v31, &qword_253F10BE8);
      v18 = 0;
      v11 = 0xE000000000000000;
      v19 = 0;
      v21 = 0.0;
      v23 = 0;
      v25 = 0;
      v27 = 0;
    }
    else
    {
      memcpy(__dst, (char *)v31 + 8, 0x309uLL);
      v11 = __dst[2];
      v18 = __dst[3];
      v19 = __dst[4];
      v21 = *(double *)&__dst[5];
      v23 = __dst[6];
      v25 = __dst[7];
      v27 = __dst[8];
      swift_retain();
      result = sub_2143195C0((uint64_t)__dst);
    }
  }
  else
  {
    v3 = swift_bridgeObjectRetain();
    *(_QWORD *)&v31[0] = sub_214397F2C(v3);
    sub_21431EEE8((uint64_t *)v31, (uint64_t (*)(uint64_t))sub_214350184, sub_21432203C);
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)&v31[0];
    v5 = sub_214310F40(*(uint64_t *)&v31[0]);
    v6 = sub_2143110A0(v4);
    type metadata accessor for SgMerger.Context();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    v8 = sub_2143110A0(v4);
    v9 = sub_214397E68(0, *(_QWORD *)(v4 + 16));
    v10 = sub_2143111EC(v4);
    v11 = sub_214313280(v10, v8, (uint64_t)v9, v7);
    swift_bridgeObjectRelease();
    v12 = sub_214311338(v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = sub_214312A34(v12, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v13 + 16);
    v15 = 0uLL;
    if (v14)
    {
      v16 = (float64x2_t *)(v13 + 32);
      do
      {
        v17 = *v16++;
        v15 = vaddq_f64(v15, v17);
        --v14;
      }
      while (v14);
    }
    v30 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    v31[0] = v30;
    swift_getAtKeyPath();
    swift_release();
    v18 = __dst[0];
    swift_getKeyPath();
    v31[0] = v30;
    swift_getAtKeyPath();
    swift_release();
    v19 = __dst[0];
    v20 = sub_214311484(v4);
    swift_release();
    memset(v31, 0, 32);
    LOBYTE(v31[2]) = 1;
    sub_214314A4C(v20, v8, (uint64_t)v31);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = sub_2143B1AFC();
    v23 = v22;
    v25 = v24;
    v27 = v26;
    result = swift_release();
  }
  *(_QWORD *)a2 = v11;
  *((_QWORD *)a2 + 1) = v18;
  *((_QWORD *)a2 + 2) = v19;
  a2[3] = v21;
  *((_QWORD *)a2 + 4) = v23;
  *((_QWORD *)a2 + 5) = v25;
  *((_QWORD *)a2 + 6) = v27;
  return result;
}

char *sub_214311DB4(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x24BEE4AF8];
  v2 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
  v3 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    if (*v2 == 1)
    {
      v7 = *((_OWORD *)v2 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_214225250(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v5 = *((_QWORD *)v3 + 2);
      v4 = *((_QWORD *)v3 + 3);
      if (v5 >= v4 >> 1)
        v3 = sub_214225250((char *)(v4 > 1), v5 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v5 + 1;
      *(_OWORD *)&v3[16 * v5 + 32] = v7;
    }
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_214311EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SgClipRect(0);
  v6 = *(_QWORD *)(v27 - 8);
  v7 = MEMORY[0x24BDAC7A8](v27);
  v26 = (uint64_t)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v25 = (uint64_t)v23 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v23[2] = v1;
  v11 = type metadata accessor for SgGroup(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v23[1] = a1;
  swift_bridgeObjectRetain();
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v16 = &qword_253F14280;
  v24 = v14;
  do
  {
    sub_2141E070C(v13 + *(int *)(v11 + 24), (uint64_t)v5, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v27) == 1)
    {
      sub_2141E0750((uint64_t)v5, v16);
    }
    else
    {
      v17 = v11;
      v18 = v16;
      v19 = v25;
      sub_2141FE1E0((uint64_t)v5, v25, type metadata accessor for SgClipRect);
      sub_2141FE1E0(v19, v26, type metadata accessor for SgClipRect);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = (_QWORD *)sub_21422566C(0, v15[2] + 1, 1, v15);
      v21 = v15[2];
      v20 = v15[3];
      if (v21 >= v20 >> 1)
        v15 = (_QWORD *)sub_21422566C(v20 > 1, v21 + 1, 1, v15);
      v15[2] = v21 + 1;
      sub_2141FE1E0(v26, (uint64_t)v15+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v21, type metadata accessor for SgClipRect);
      v16 = v18;
      v11 = v17;
      v14 = v24;
    }
    v13 += v14;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t (*sub_214312120(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_214323780(v4, a2);
  return sub_21431216C;
}

uint64_t (*sub_214312170(_QWORD *a1, unsigned __int8 a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_214323800(v4, a2);
  return sub_21431216C;
}

uint64_t (*sub_2143121BC(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_21432387C(v4, a2);
  return sub_21431216C;
}

void sub_214312208(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_214312238(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v48 = MEMORY[0x24BEE4AF8];
  sub_2141D3A14(0, v6, 0);
  v7 = v48;
  v38 = v5;
  v39 = a2;
  v40 = a1;
  v41 = v4;
  v37 = v6;
  if (v6)
  {
    v8 = v6;
    v9 = (uint64_t *)(a1 + 32);
    v10 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v45 = v8;
      v47 = v7;
      v12 = *v9;
      v13 = *v10;
      v14 = (int *)type metadata accessor for SgGroup(0);
      v43 = swift_allocBox();
      v16 = v15;
      sub_2141D8BF8(&qword_253F15D40);
      v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_214426EF0;
      *(_QWORD *)(v17 + 32) = v12;
      v18 = (char *)v16 + v14[6];
      v19 = type metadata accessor for SgClipRect(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
      *v16 = 0;
      v16[1] = v17;
      *(_QWORD *)((char *)v16 + v14[7]) = v13;
      *(_QWORD *)((char *)v16 + v14[8]) = 0;
      *(_QWORD *)((char *)v16 + v14[9]) = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v16 + v14[10]) = 0;
      v7 = v47;
      v20 = *(_QWORD *)(v47 + 16);
      v21 = *(_QWORD *)(v47 + 24);
      result = swift_retain();
      if (v20 >= v21 >> 1)
      {
        result = (uint64_t)sub_2141D3A14((char *)(v21 > 1), v20 + 1, 1);
        v7 = v47;
      }
      --v5;
      *(_QWORD *)(v7 + 16) = v20 + 1;
      *(_QWORD *)(v7 + 8 * v20 + 32) = v43;
      --v4;
      ++v10;
      ++v9;
      v8 = v45 - 1;
      if (v45 == 1)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_13:
    if (v41 <= v38)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    v22 = 0;
    if (v37 <= v38)
      v23 = v38;
    else
      v23 = v37;
    v46 = v23 - v37;
    v24 = v41 - v37;
    v25 = 8 * v37 + 32;
    v44 = v40 + v25;
    v42 = v39 + v25;
    while (v24 != v22)
    {
      if (v38 - v37 == v22)
        goto LABEL_24;
      if (v46 == v22)
        goto LABEL_28;
      v26 = *(_QWORD *)(v44 + 8 * v22);
      v27 = *(_QWORD *)(v42 + 8 * v22);
      v28 = (int *)type metadata accessor for SgGroup(0);
      v29 = swift_allocBox();
      v31 = v30;
      sub_2141D8BF8(&qword_253F15D40);
      v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_214426EF0;
      *(_QWORD *)(v32 + 32) = v26;
      v33 = (char *)v31 + v28[6];
      v34 = type metadata accessor for SgClipRect(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
      *v31 = 0;
      v31[1] = v32;
      *(_QWORD *)((char *)v31 + v28[7]) = v27;
      *(_QWORD *)((char *)v31 + v28[8]) = 0;
      *(_QWORD *)((char *)v31 + v28[9]) = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v31 + v28[10]) = 0;
      v35 = *(_QWORD *)(v7 + 16);
      v36 = *(_QWORD *)(v7 + 24);
      result = swift_retain();
      if (v35 >= v36 >> 1)
        result = (uint64_t)sub_2141D3A14((char *)(v36 > 1), v35 + 1, 1);
      *(_QWORD *)(v7 + 16) = v35 + 1;
      *(_QWORD *)(v7 + 8 * v35 + 32) = v29;
      if (v24 == ++v22)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2143125D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  double *v7;
  double *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  sub_2141D39D4(0, v6, 0);
  v30 = v5;
  v31 = v4;
  v32 = a1;
  if (v6)
  {
    v7 = (double *)(a1 + 32);
    v8 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v33 + 16);
      v14 = *(_QWORD *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v11;
        result = (uint64_t)sub_2141D39D4((char *)(v14 > 1), v15 + 1, 1);
        v11 = v28;
      }
      --v5;
      *(_QWORD *)(v33 + 16) = v15 + 1;
      *(double *)(v33 + 8 * v15 + 32) = v12 * v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    v16 = 0;
    if (v6 <= v30)
      v17 = v30;
    else
      v17 = v6;
    v18 = v17 - v6;
    v19 = v31 - v6;
    v20 = v30 - v6;
    v21 = 8 * v6 + 32;
    v22 = v32 + v21;
    v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16)
        goto LABEL_24;
      if (v18 == v16)
        goto LABEL_28;
      v24 = *(double *)(v22 + 8 * v16);
      v25 = *(double *)(v23 + 8 * v16);
      v27 = *(_QWORD *)(v33 + 16);
      v26 = *(_QWORD *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v11;
        result = (uint64_t)sub_2141D39D4((char *)(v26 > 1), v27 + 1, 1);
        v11 = v29;
      }
      *(_QWORD *)(v33 + 16) = v27 + 1;
      *(double *)(v33 + 8 * v27 + 32) = v24 * v25;
      if (v19 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2143127F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  float64x2_t *v7;
  double *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  float64x2_t *v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  float64x2_t *v22;
  float64_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  unint64_t v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  uint64_t v33;
  float64x2_t v34;
  unint64_t v35;
  float64x2_t v36;
  int64_t v37;
  float64x2_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v40 = MEMORY[0x24BEE4AF8];
  sub_2141D3C74(0, v6, 0);
  v39 = a1;
  v37 = v5;
  v35 = v4;
  if (v6)
  {
    v7 = (float64x2_t *)(a1 + 32);
    v8 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v8;
      v14 = *v7;
      v13 = v7[1];
      v16 = *(_QWORD *)(v40 + 16);
      v15 = *(_QWORD *)(v40 + 24);
      if (v16 >= v15 >> 1)
      {
        v33 = v11;
        v31 = *v7;
        v32 = *v8;
        v30 = v7[1];
        result = (uint64_t)sub_2141D3C74((char *)(v15 > 1), v16 + 1, 1);
        v13 = v30;
        v14 = v31;
        v12 = v32;
        v11 = v33;
      }
      *(_QWORD *)(v40 + 16) = v16 + 1;
      v17 = (float64x2_t *)(v40 + 32 * v16);
      --v5;
      v17[2] = vmulq_n_f64(v14, v12);
      v17[3] = vmulq_n_f64(v13, v12);
      --v4;
      ++v8;
      v7 += 2;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v35 <= v37)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v40;
    }
    if (v6 <= v37)
      v18 = v37;
    else
      v18 = v6;
    v19 = v18 - v6;
    v20 = v35 - v6;
    v21 = v37 - v6;
    v22 = (float64x2_t *)(v39 + 32 * v6 + 32);
    v23 = (float64_t *)(v11 + 8 * v6 + 32);
    while (v20)
    {
      if (!v21)
        goto LABEL_24;
      if (!v19)
        goto LABEL_28;
      v25 = *v22;
      v24 = v22[1];
      v14.f64[0] = *v23;
      v27 = *(_QWORD *)(v40 + 16);
      v26 = *(_QWORD *)(v40 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v11;
        v36 = v22[1];
        v38 = *v22;
        v34 = v14;
        result = (uint64_t)sub_2141D3C74((char *)(v26 > 1), v27 + 1, 1);
        v14 = v34;
        v24 = v36;
        v25 = v38;
        v11 = v29;
      }
      *(_QWORD *)(v40 + 16) = v27 + 1;
      v28 = (float64x2_t *)(v40 + 32 * v27);
      --v19;
      v28[2] = vmulq_n_f64(v25, v14.f64[0]);
      v28[3] = vmulq_n_f64(v24, v14.f64[0]);
      --v21;
      v22 += 2;
      ++v23;
      if (!--v20)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_214312A34(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  float64x2_t *v7;
  double *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  double v12;
  float64x2_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  float64x2_t *v20;
  float64_t *v21;
  float64x2_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  float64x2_t v30;
  int64_t v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v34 = MEMORY[0x24BEE4AF8];
  sub_2141D3D20(0, v6, 0);
  v29 = v4;
  v33 = a1;
  v31 = v5;
  if (v6)
  {
    v7 = (float64x2_t *)(a1 + 32);
    v8 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v8;
      v13 = *v7;
      v15 = *(_QWORD *)(v34 + 16);
      v14 = *(_QWORD *)(v34 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v11;
        v26 = *v7;
        v27 = *v8;
        result = (uint64_t)sub_2141D3D20((char *)(v14 > 1), v15 + 1, 1);
        v13 = v26;
        v12 = v27;
        v11 = v28;
      }
      --v5;
      *(_QWORD *)(v34 + 16) = v15 + 1;
      *(float64x2_t *)(v34 + 16 * v15 + 32) = vmulq_n_f64(v13, v12);
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v29 <= v31)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v34;
    }
    if (v6 <= v31)
      v16 = v31;
    else
      v16 = v6;
    v17 = v16 - v6;
    v18 = v29 - v6;
    v19 = v31 - v6;
    v20 = (float64x2_t *)(v33 + 16 * v6 + 32);
    v21 = (float64_t *)(v11 + 8 * v6 + 32);
    while (v18)
    {
      if (!v19)
        goto LABEL_24;
      if (!v17)
        goto LABEL_28;
      v22 = *v20;
      v13.f64[0] = *v21;
      v24 = *(_QWORD *)(v34 + 16);
      v23 = *(_QWORD *)(v34 + 24);
      if (v24 >= v23 >> 1)
      {
        v25 = v11;
        v30 = v13;
        v32 = *v20;
        result = (uint64_t)sub_2141D3D20((char *)(v23 > 1), v24 + 1, 1);
        v13 = v30;
        v22 = v32;
        v11 = v25;
      }
      --v17;
      *(_QWORD *)(v34 + 16) = v24 + 1;
      *(float64x2_t *)(v34 + 16 * v24 + 32) = vmulq_n_f64(v22, v13.f64[0]);
      --v19;
      ++v20;
      ++v21;
      if (!--v18)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_214312C5C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  double *v7;
  double *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  sub_2141D3AA0(0, v6, 0);
  v30 = v5;
  v31 = v4;
  v32 = a1;
  if (v6)
  {
    v7 = (double *)(a1 + 32);
    v8 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v33 + 16);
      v14 = *(_QWORD *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v11;
        result = (uint64_t)sub_2141D3AA0((char *)(v14 > 1), v15 + 1, 1);
        v11 = v28;
      }
      --v5;
      *(_QWORD *)(v33 + 16) = v15 + 1;
      *(double *)(v33 + 8 * v15 + 32) = v12 * v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    v16 = 0;
    if (v6 <= v30)
      v17 = v30;
    else
      v17 = v6;
    v18 = v17 - v6;
    v19 = v31 - v6;
    v20 = v30 - v6;
    v21 = 8 * v6 + 32;
    v22 = v32 + v21;
    v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16)
        goto LABEL_24;
      if (v18 == v16)
        goto LABEL_28;
      v24 = *(double *)(v22 + 8 * v16);
      v25 = *(double *)(v23 + 8 * v16);
      v27 = *(_QWORD *)(v33 + 16);
      v26 = *(_QWORD *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v11;
        result = (uint64_t)sub_2141D3AA0((char *)(v26 > 1), v27 + 1, 1);
        v11 = v29;
      }
      *(_QWORD *)(v33 + 16) = v27 + 1;
      *(double *)(v33 + 8 * v27 + 32) = v24 * v25;
      if (v19 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_214312E78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_214425790();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_214425790() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_214312F3C()
{
  unint64_t result;

  result = sub_21436CDFC(MEMORY[0x24BEE4AF8]);
  qword_253F1C928 = result;
  return result;
}

uint64_t sub_214312F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  double i;
  unint64_t v10;
  unint64_t v11;
  double v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD v16[98];

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  for (i = 0.0; ; i = i + v12 * v12)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v8 << 6);
      goto LABEL_5;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v6)
      return swift_release();
    v14 = *(_QWORD *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v6)
        return swift_release();
      v14 = *(_QWORD *)(v2 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v6)
          return swift_release();
        v14 = *(_QWORD *)(v2 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 3;
          if (v13 + 3 >= v6)
            return swift_release();
          v14 = *(_QWORD *)(v2 + 8 * v8);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_5:
    sub_2142AAF2C(*(_QWORD *)(a1 + 56) + 784 * v11, (uint64_t)v16);
    v12 = *(double *)&v16[1];
    result = sub_2143195C0((uint64_t)v16);
  }
  v15 = v13 + 4;
  if (v15 >= v6)
    return swift_release();
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v6)
      return swift_release();
    v14 = *(_QWORD *)(v2 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_2143130E0(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD v18[4];

  v3 = *v1;
  v4 = *v1 + 64;
  v5 = 1 << *(_BYTE *)(*v1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*v1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_25;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v13 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release();
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            return swift_release();
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
          {
            v10 = v13 + 4;
            if (v13 + 4 >= v8)
              return swift_release();
            v14 = *(_QWORD *)(v4 + 8 * v10);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_24:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_25:
    v17 = sub_214312120(v18, *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12));
    if (*(unsigned __int8 *)(v16 + 176) != 254)
      *(double *)(v16 + 8) = *(double *)(v16 + 8) * a1;
    result = ((uint64_t (*)(_QWORD *, _QWORD))v17)(v18, 0);
  }
  v15 = v13 + 5;
  if (v15 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_214313280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v30 = type metadata accessor for SgPath(0);
  v45 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v44 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SgArea(0);
  v43 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v42 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SgLine(0);
  v41 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v40 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SgRule(0);
  v39 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v38 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SgPoint(0);
  v37 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v36 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SgSector(0);
  v35 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v34 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AnyVectorizedRenderer(0);
  v33 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v23);
  v14 = sub_2141D8BF8(&qword_253F10B70);
  MEMORY[0x24BDAC7A8](v14);
  v32 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for SgGroup(0);
  v46 = *(_QWORD *)(v48 - 8);
  v16 = MEMORY[0x24BDAC7A8](v48);
  v31 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v18);
  v20 = *(_QWORD *)(a1 + 16);
  if (v20 != *(_QWORD *)(a2 + 16))
  {
    __break(1u);
    JUMPOUT(0x214314794);
  }
  if (v20)
  {
    v22[1] = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22[2] = a3;
    v22[3] = a4;
    v47 = a2;
    sub_2142E9C70(*(_QWORD *)(a1 + 32));
    __asm { BR              X11 }
  }
  return 0xE000000000000000;
}

double sub_214314848(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_2143125D4(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    v11 = 0.0;
    goto LABEL_10;
  }
  if (v9 == 1)
  {
    v10 = 0;
    v11 = 0.0;
LABEL_8:
    v14 = v9 - v10;
    v15 = (double *)(v8 + 8 * v10 + 32);
    do
    {
      v16 = *v15++;
      v11 = v11 + v16;
      --v14;
    }
    while (v14);
    goto LABEL_10;
  }
  v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
  v12 = (double *)(v8 + 40);
  v11 = 0.0;
  v13 = v9 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v11 = v11 + *(v12 - 1) + *v12;
    v12 += 2;
    v13 -= 2;
  }
  while (v13);
  if (v9 != v10)
    goto LABEL_8;
LABEL_10:
  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0)
  {
    v17 = *(_QWORD *)(a2 + 16);
    if (v17)
    {
      if (v17 == 1)
      {
        v18 = 0;
        v19 = 0.0;
      }
      else
      {
        v18 = v17 & 0x7FFFFFFFFFFFFFFELL;
        v23 = (double *)(a2 + 40);
        v19 = 0.0;
        v24 = v17 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v19 = v19 + *(v23 - 1) + *v23;
          v23 += 2;
          v24 -= 2;
        }
        while (v24);
        if (v17 == v18)
          return v11 + (1.0 - v19) * *(double *)&a3;
      }
      v25 = v17 - v18;
      v26 = (double *)(a2 + 8 * v18 + 32);
      do
      {
        v27 = *v26++;
        v19 = v19 + v27;
        --v25;
      }
      while (v25);
    }
    else
    {
      v19 = 0.0;
    }
    return v11 + (1.0 - v19) * *(double *)&a3;
  }
  if (*(double *)&a3 != 0.0)
  {
    v20 = *(_QWORD *)(a2 + 16);
    if (v20)
    {
      if (v20 == 1)
      {
        v21 = 0;
        v22 = 0.0;
      }
      else
      {
        v21 = v20 & 0x7FFFFFFFFFFFFFFELL;
        v28 = (double *)(a2 + 40);
        v22 = 0.0;
        v29 = v20 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v22 = v22 + *(v28 - 1) + *v28;
          v28 += 2;
          v29 -= 2;
        }
        while (v29);
        if (v20 == v21)
          return v11 * (1.0 / v22);
      }
      v30 = v20 - v21;
      v31 = (double *)(a2 + 8 * v21 + 32);
      do
      {
        v32 = *v31++;
        v22 = v22 + v32;
        --v30;
      }
      while (v30);
    }
    else
    {
      v22 = 0.0;
    }
    return v11 * (1.0 / v22);
  }
  return v11;
}

float64_t sub_214314A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float64_t v6;
  float64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float64x2_t v22;
  float64_t result;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  float64x2_t v34;
  _QWORD v35[2];
  _QWORD v36[4];
  char v37;

  sub_2141E801C(a3, (uint64_t)v35, qword_253F10AD8);
  v6 = *(double *)v35;
  v7 = *(double *)&v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_2143127F0(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (float64x2_t *)(v8 + 32);
    v11 = 0uLL;
    v12 = 0uLL;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      v10 += 2;
      v12 = vaddq_f64(v12, v14);
      v11 = vaddq_f64(v11, v13);
      --v9;
    }
    while (v9);
  }
  else
  {
    v11 = 0uLL;
  }
  v34 = v11;
  swift_bridgeObjectRelease();
  sub_2141E801C(a3, (uint64_t)v36, qword_253F10AD8);
  if (v37 != 1)
  {
    v18.f64[1] = v7;
    v19 = *(_QWORD *)(a2 + 16);
    if (v19)
    {
      if (v19 == 1)
      {
        v20 = 0;
        v21 = 0.0;
        v22 = v34;
      }
      else
      {
        v20 = v19 & 0x7FFFFFFFFFFFFFFELL;
        v24 = (double *)(a2 + 40);
        v21 = 0.0;
        v25 = v19 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v21 = v21 + *(v24 - 1) + *v24;
          v24 += 2;
          v25 -= 2;
        }
        while (v25);
        v22 = v34;
        if (v19 == v20)
          goto LABEL_21;
      }
      v26 = v19 - v20;
      v27 = (double *)(a2 + 8 * v20 + 32);
      do
      {
        v28 = *v27++;
        v21 = v21 + v28;
        --v26;
      }
      while (v26);
    }
    else
    {
      v21 = 0.0;
      v22 = v34;
    }
LABEL_21:
    v18.f64[0] = v6;
    *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(v22, vmulq_n_f64(v18, 1.0 - v21));
    return result;
  }
  if (!(v36[2] | v36[3] | v36[0] | v36[1]))
    return v34.f64[0];
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = 0;
      v17 = 0.0;
    }
    else
    {
      v16 = v15 & 0x7FFFFFFFFFFFFFFELL;
      v29 = (double *)(a2 + 40);
      v17 = 0.0;
      v30 = v15 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v17 = v17 + *(v29 - 1) + *v29;
        v29 += 2;
        v30 -= 2;
      }
      while (v30);
      if (v15 == v16)
        goto LABEL_28;
    }
    v31 = v15 - v16;
    v32 = (double *)(a2 + 8 * v16 + 32);
    do
    {
      v33 = *v32++;
      v17 = v17 + v33;
      --v31;
    }
    while (v31);
  }
  else
  {
    v17 = 0.0;
  }
LABEL_28:
  *(_QWORD *)&result = *(_OWORD *)&vmulq_n_f64(v34, 1.0 / v17);
  return result;
}

float64_t sub_214314C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  float64_t result;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  float64x2_t v34;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_214312A34(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (float64x2_t *)(v10 + 32);
    v13 = 0uLL;
    do
    {
      v14 = *v12++;
      v13 = vaddq_f64(v13, v14);
      --v11;
    }
    while (v11);
  }
  else
  {
    v13 = 0uLL;
  }
  v34 = v13;
  swift_bridgeObjectRelease();
  if ((a5 & 1) == 0)
  {
    *(_QWORD *)&v15.f64[1] = a4;
    v16 = *(_QWORD *)(a2 + 16);
    if (v16)
    {
      if (v16 == 1)
      {
        v17 = 0;
        v18 = 0.0;
        v19 = v34;
      }
      else
      {
        v17 = v16 & 0x7FFFFFFFFFFFFFFELL;
        v24 = (double *)(a2 + 40);
        v18 = 0.0;
        v25 = v16 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v18 = v18 + *(v24 - 1) + *v24;
          v24 += 2;
          v25 -= 2;
        }
        while (v25);
        v19 = v34;
        if (v16 == v17)
          goto LABEL_21;
      }
      v26 = v16 - v17;
      v27 = (double *)(a2 + 8 * v17 + 32);
      do
      {
        v28 = *v27++;
        v18 = v18 + v28;
        --v26;
      }
      while (v26);
    }
    else
    {
      v18 = 0.0;
      v19 = v34;
    }
LABEL_21:
    *(_QWORD *)&v15.f64[0] = a3;
    *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(v19, vmulq_n_f64(v15, 1.0 - v18));
    return result;
  }
  if (!(a3 | a4))
    return v34.f64[0];
  v20 = *(_QWORD *)(a2 + 16);
  if (v20)
  {
    if (v20 == 1)
    {
      v21 = 0;
      v22 = 0.0;
    }
    else
    {
      v21 = v20 & 0x7FFFFFFFFFFFFFFELL;
      v29 = (double *)(a2 + 40);
      v22 = 0.0;
      v30 = v20 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v22 = v22 + *(v29 - 1) + *v29;
        v29 += 2;
        v30 -= 2;
      }
      while (v30);
      if (v20 == v21)
        goto LABEL_28;
    }
    v31 = v20 - v21;
    v32 = (double *)(a2 + 8 * v21 + 32);
    do
    {
      v33 = *v32++;
      v22 = v22 + v33;
      --v31;
    }
    while (v31);
  }
  else
  {
    v22 = 0.0;
  }
LABEL_28:
  *(_QWORD *)&result = *(_OWORD *)&vmulq_n_f64(v34, 1.0 / v22);
  return result;
}

double sub_214314E78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_214312C5C(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    v11 = 0.0;
    goto LABEL_10;
  }
  if (v9 == 1)
  {
    v10 = 0;
    v11 = 0.0;
LABEL_8:
    v14 = v9 - v10;
    v15 = (double *)(v8 + 8 * v10 + 32);
    do
    {
      v16 = *v15++;
      v11 = v11 + v16;
      --v14;
    }
    while (v14);
    goto LABEL_10;
  }
  v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
  v12 = (double *)(v8 + 40);
  v11 = 0.0;
  v13 = v9 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v11 = v11 + *(v12 - 1) + *v12;
    v12 += 2;
    v13 -= 2;
  }
  while (v13);
  if (v9 != v10)
    goto LABEL_8;
LABEL_10:
  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0)
  {
    v17 = *(_QWORD *)(a2 + 16);
    if (v17)
    {
      if (v17 == 1)
      {
        v18 = 0;
        v19 = 0.0;
      }
      else
      {
        v18 = v17 & 0x7FFFFFFFFFFFFFFELL;
        v23 = (double *)(a2 + 40);
        v19 = 0.0;
        v24 = v17 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v19 = v19 + *(v23 - 1) + *v23;
          v23 += 2;
          v24 -= 2;
        }
        while (v24);
        if (v17 == v18)
          return v11 + (1.0 - v19) * *(double *)&a3;
      }
      v25 = v17 - v18;
      v26 = (double *)(a2 + 8 * v18 + 32);
      do
      {
        v27 = *v26++;
        v19 = v19 + v27;
        --v25;
      }
      while (v25);
    }
    else
    {
      v19 = 0.0;
    }
    return v11 + (1.0 - v19) * *(double *)&a3;
  }
  if (*(double *)&a3 != 0.0)
  {
    v20 = *(_QWORD *)(a2 + 16);
    if (v20)
    {
      if (v20 == 1)
      {
        v21 = 0;
        v22 = 0.0;
      }
      else
      {
        v21 = v20 & 0x7FFFFFFFFFFFFFFELL;
        v28 = (double *)(a2 + 40);
        v22 = 0.0;
        v29 = v20 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v22 = v22 + *(v28 - 1) + *v28;
          v28 += 2;
          v29 -= 2;
        }
        while (v29);
        if (v20 == v21)
          return v11 * (1.0 / v22);
      }
      v30 = v20 - v21;
      v31 = (double *)(a2 + 8 * v21 + 32);
      do
      {
        v32 = *v31++;
        v22 = v22 + v32;
        --v30;
      }
      while (v30);
    }
    else
    {
      v22 = 0.0;
    }
    return v11 * (1.0 / v22);
  }
  return v11;
}

uint64_t sub_214315080()
{
  uint64_t *v0;

  return sub_214312F60(*v0);
}

uint64_t sub_214315088@<X0>(_QWORD *a1@<X8>)
{
  if (qword_253F10B68 != -1)
    swift_once();
  *a1 = qword_253F1C928;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2143150D8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_214324C18(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_214315104(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_214324C18((_QWORD *)*a1, *a2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_214315148@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_214324798(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_214315174(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_214324798((_QWORD *)*a1, *a2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_2143151B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *a2;
  v3 = sub_214323598(*a1);
  v4 = sub_214323598(v2);
  v5 = sub_2143529B0(v3, v4);
  swift_release();
  swift_release();
  return v5 & 1;
}

void sub_214315224(uint64_t a1, uint64_t a2, uint64_t a3, double (*a4)(_QWORD, double))
{
  uint64_t v4;
  uint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = a1 + 32;
    v9 = a2 + 32;
    v10 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = 0;
    v13 = a2 + 48;
    v14 = 0.0;
    while ((unint64_t)v12 < *(_QWORD *)(v4 + 16))
    {
      if ((uint64_t)(v11 + 1) >= v7 || v12 < *(_QWORD *)(v9 + 8 * (v11 + 1)))
      {
LABEL_8:
        if (v11 >= v10)
          goto LABEL_13;
      }
      else
      {
        while (v7 - 2 != v11)
        {
          v15 = *(_QWORD *)(v13 + 8 * v11++);
          if (v12 < v15)
            goto LABEL_8;
        }
        v11 = v7 - 1;
        if (v7 - 1 >= v10)
        {
LABEL_13:
          __break(1u);
LABEL_14:
          swift_bridgeObjectRelease();
          return;
        }
      }
      if ((uint64_t)v11 >= v7)
        goto LABEL_17;
      v16 = *(double *)(v4 + 32 + 8 * v12);
      v17 = v12 + 1;
      v14 = v14 + v16 * a4(*(_QWORD *)(v9 + 8 * v11), *(double *)(v8 + 8 * v11));
      v12 = v17;
      if (v17 == v5)
        goto LABEL_14;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

void sub_214315368()
{
  qword_253F0FE78 = 0x4059000000000000;
}

unint64_t sub_214315378(unint64_t result, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *__return_ptr, _QWORD);
  void (*v11)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  double v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  char v66;
  char v67;
  unsigned __int8 v68;
  double v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  char v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(double *__return_ptr, uint64_t *);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(_QWORD *__return_ptr, _QWORD);
  uint64_t v114;
  uint64_t v115;
  char v116;
  void (*v117)(_QWORD *__return_ptr, _QWORD);
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(_QWORD *__return_ptr, _QWORD);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  _QWORD v140[3];
  char v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  if (result != a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v6 = *(_QWORD *)(a3 + 16);
      if (*(_QWORD *)(v6 + 16) > result)
      {
        v5 = a2;
        v4 = v6 + 32;
        sub_2141FCAC0((uint64_t *)(v6 + 32 + 712 * result), (uint64_t)&v113);
        v9 = v126;
        v8 = v127;
        v11 = v130;
        v12 = v136;
        v13 = v137;
        v14 = v139;
        v103 = v138;
        v104 = v135;
        v105 = v134;
        v106 = v132;
        v102 = v128;
        v108 = v129;
        v109 = v131;
        v107 = v133;
        sub_21421C7C0((uint64_t)v126, v127, v128, v129, (uint64_t)v130, v131, (uint64_t)v132, v133, v134, v135, v136, v137, v138, v139);
        result = sub_2141FD584((uint64_t)&v113);
        if (v14 == 255)
          return result;
        if ((v5 & 0x8000000000000000) == 0)
        {
          if (*(_QWORD *)(v6 + 16) > v5)
          {
            v15 = v14;
            v101 = v12;
            sub_2141FCAC0((uint64_t *)(v4 + 712 * v5), (uint64_t)&v113);
            v16 = (uint64_t)v130;
            v17 = v131;
            v18 = v132;
            v19 = v139;
            v93 = (void (*)(double *__return_ptr, uint64_t *))v126;
            v94 = v138;
            v96 = v135;
            v97 = v137;
            v99 = v134;
            v100 = v136;
            v95 = v127;
            v98 = v128;
            v91 = v133;
            v92 = v129;
            sub_21421C7C0((uint64_t)v126, v127, v128, v129, (uint64_t)v130, v131, (uint64_t)v132, v133, v134, v135, v136, v137, v138, v139);
            sub_2141FD584((uint64_t)&v113);
            if (v19 == 255)
            {
              v75 = v15;
              v24 = v102;
              v73 = v13;
              v74 = v103;
              v71 = v104;
              v72 = v101;
              v70 = v105;
              v22 = (uint64_t)v9;
              v23 = v8;
              v25 = v108;
              v27 = v109;
              v26 = (uint64_t)v11;
            }
            else
            {
              v89 = v17;
              v90 = v16;
              v6 = v102;
              if ((v15 & 1) == 0)
              {
                LOBYTE(v4) = v15;
                if ((v19 & 1) != 0)
                {
                  sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                  v75 = v15;
                  v73 = v13;
                  v74 = v103;
                  v71 = v104;
                  v72 = v101;
                  v70 = v105;
                  v22 = (uint64_t)v9;
                  v23 = v8;
                  v24 = v102;
                  v25 = v108;
                  v26 = (uint64_t)v11;
                }
                else
                {
                  if (v11)
                  {
                    *(double *)v140 = a4;
                    sub_21421C7C0((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v15);
                    v84 = v19;
                    sub_21421C7C0((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                    v11(&v113, v140);
                    v88 = (uint64_t)v18;
                    if ((v114 & 1) != 0)
                    {
                      sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                      sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                      v20 = v107;
                      sub_21421BB38((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v4);
                      v75 = v4;
                      v73 = v13;
                      v74 = v103;
                      v71 = v104;
                      v72 = v101;
                      v21 = (uint64_t)v106;
                      v70 = v105;
                      v22 = (uint64_t)v9;
                      v23 = v8;
                      v24 = v102;
                      v25 = v108;
                      v26 = (uint64_t)v11;
                      v27 = v109;
LABEL_41:
                      v43 = v20;
                      return sub_21421BB38(v22, v23, v24, v25, v26, v27, v21, v43, v70, v71, v72, v73, v74, v75);
                    }
                    v85 = v13;
                    v83 = (uint64_t)v11;
                    v140[0] = v113;
                    v5 = v95;
                    v93((double *)&v113, v140);
                    v7 = (uint64_t)v93;
                    if (qword_253F0FE80 == -1)
                      goto LABEL_31;
                    goto LABEL_56;
                  }
                  sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                  v75 = v15;
                  v73 = v13;
                  v74 = v103;
                  v71 = v104;
                  v72 = v101;
                  v70 = v105;
                  v22 = (uint64_t)v9;
                  v23 = v8;
                  v24 = v102;
                  v25 = v108;
                  v26 = 0;
                }
                v27 = v109;
                v21 = (uint64_t)v106;
LABEL_26:
                v43 = v107;
                return sub_21421BB38(v22, v23, v24, v25, v26, v27, v21, v43, v70, v71, v72, v73, v74, v75);
              }
              v88 = (uint64_t)v18;
              v113 = v9;
              v114 = v8;
              v115 = v102;
              v116 = v108 & 1;
              v117 = (void (*)(_QWORD *__return_ptr, _QWORD))v11;
              v118 = v109;
              v119 = v106;
              v120 = v107;
              v121 = v105;
              v122 = v104;
              v123 = v101;
              v124 = v13;
              v125 = v103;
              if ((v19 & 1) == 0)
              {
                sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v17, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                return sub_21421BB38((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v15);
              }
              v85 = v13;
              v86 = v8;
              v87 = (uint64_t)v9;
              v140[0] = v93;
              v140[1] = v95;
              v140[2] = v98;
              v141 = v92 & 1;
              v142 = v90;
              v143 = v17;
              v28 = (uint64_t)v18;
              v144 = v18;
              v145 = v91;
              v146 = v99;
              v147 = v96;
              v148 = v100;
              v149 = v97;
              v150 = v94;
              if (!v11)
              {
                sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                return sub_21421BB38((uint64_t)v9, v8, v102, v108, 0, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v15);
              }
              v110 = a4;
              v82 = v15;
              v29 = (uint64_t)v11;
              sub_21421C7C0((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v15);
              v84 = v19;
              sub_21421C7C0((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
              v11(&v111, &v110);
              v30 = v112;
              v83 = (uint64_t)v11;
              if (v112)
              {
                v31 = v111;
                v33 = v8;
                v32 = (uint64_t)v9;
                v9(&v110, &v111);
                if ((sub_214312E78(v31, v30, v18) & 1) == 0)
                {
                  v48 = sub_214317780(v31, v30, v106);
                  v41 = v49;
                  swift_bridgeObjectRelease();
                  v40 = v98;
                  if ((v41 & 1) != 0)
                  {
                    sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                    sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                    v20 = v107;
                    sub_21421BB38(v87, v86, v102, v108, v29, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                    v75 = v82;
                    v73 = v85;
                    v74 = v103;
                    v71 = v104;
                    v72 = v101;
                    v70 = v105;
                    v23 = v86;
                    v22 = v87;
                    v24 = v102;
                    v25 = v108;
                    v26 = v29;
                    v27 = v109;
                    v21 = (uint64_t)v106;
                    goto LABEL_41;
                  }
                  if ((v48 & 0x8000000000000000) == 0)
                  {
                    v28 = v105;
                    v41 = v106[2];
                    v31 = v99;
                    if (v41 >= v48)
                    {
                      v40 = (uint64_t)(v106 + 4);
                      v80 = sub_214325238((uint64_t)(v106 + 4), 0, (2 * v48) | 1, (uint64_t)v140);
                      if (v41 > v48)
                      {
                        v77 = v50 & 1;
                        v79 = sub_2143253B0((uint64_t)(v106 + 4), v48 + 1, (2 * v41) | 1, (uint64_t)v140);
                        v78 = v51 & 1;
                        sub_21421C7C0(v87, v86, v102, v108, v29, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                        sub_21421C7C0((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                        sub_21432550C(v80, v77, (uint64_t)v140, (uint64_t)&v113);
                        v81 = v52;
                        sub_21421BB38(v87, v86, v102, v108, v29, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                        sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                        if ((v81 & 1) == 0 || v99 == 255)
                        {
                          v54 = v105;
                          v53 = (uint64_t)v106;
                          v56 = v86;
                          v55 = v87;
                          v57 = v92;
                          v58 = (uint64_t)v93;
                          v59 = v100;
                          v63 = v101;
                          v60 = v97;
                          v61 = v94;
                          v62 = v104;
                          v64 = v82;
                          v65 = v85;
                        }
                        else
                        {
                          v54 = v105;
                          v53 = (uint64_t)v106;
                          v56 = v86;
                          v55 = v87;
                          v57 = v92;
                          v58 = (uint64_t)v93;
                          v59 = v100;
                          v60 = v97;
                          v61 = v94;
                          v62 = v104;
                          v63 = v101;
                          v64 = v82;
                          v65 = v85;
                        }
                        sub_21421C7C0(v55, v56, v102, v108, v83, v109, v53, v107, v54, v62, v63, v65, v103, v64);
                        sub_21421C7C0(v58, v95, v98, v57, v90, v89, v88, v91, v99, v96, v59, v60, v61, v84);
                        sub_21432550C(v79, v78, (uint64_t)v140, (uint64_t)&v113);
                        v67 = v66;
                        v41 = v88;
                        v32 = v91;
                        v28 = v92;
                        sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                        sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                        if ((v67 & 1) == 0 || v99 == 255)
                        {
                          v31 = (uint64_t)v93;
                          v40 = v100;
                          v68 = v84;
                        }
                        else
                        {
                          v31 = (uint64_t)v93;
                          v40 = v100;
                          v68 = v84;
                        }
                        if (qword_253F0FE80 == -1)
                          goto LABEL_50;
                        goto LABEL_63;
                      }
LABEL_62:
                      __break(1u);
LABEL_63:
                      swift_once();
                      v68 = v84;
LABEL_50:
                      v69 = *(double *)&qword_253F0FE78;
                      sub_21421BB38(v31, v95, v98, v28, v90, v89, v41, v32, v99, v96, v40, v97, v94, v68);
                      sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                      sub_21421BB38((uint64_t)v93, v95, v98, v28, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                      result = sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                      if (a4 - v69 > v69 + a4)
                        __break(1u);
                      return result;
                    }
LABEL_61:
                    __break(1u);
                    goto LABEL_62;
                  }
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
                v34 = v92;
                v35 = (uint64_t)v93;
                v36 = v98;
                v111 = v31;
                v112 = v30;
                v37 = v95;
                v93(&v110, &v111);
                swift_bridgeObjectRelease();
                if (qword_253F0FE80 == -1)
                {
LABEL_22:
                  v38 = *(double *)&qword_253F0FE78;
                  v39 = v36;
                  v31 = v90;
                  v32 = v88;
                  v40 = v91;
                  sub_21421BB38(v35, v37, v39, v34, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                  v28 = v83;
                  v41 = v107;
                  sub_21421BB38(v87, v33, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                  sub_21421BB38(v35, v95, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                  result = sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                  v42 = a4 - v38;
                  a4 = v38 + a4;
                  if (v42 <= a4)
                    return result;
                  __break(1u);
                  goto LABEL_60;
                }
LABEL_58:
                swift_once();
                goto LABEL_22;
              }
              sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
              sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
              sub_21421BB38((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v15);
              v75 = v15;
              v73 = v85;
              v74 = v103;
              v71 = v104;
              v72 = v101;
              v70 = v105;
              v22 = (uint64_t)v9;
              v23 = v8;
              v24 = v102;
              v25 = v108;
              v26 = (uint64_t)v11;
              v27 = v109;
            }
            v21 = (uint64_t)v106;
            goto LABEL_26;
          }
LABEL_55:
          __break(1u);
LABEL_56:
          swift_once();
LABEL_31:
          v44 = *(double *)&qword_253F0FE78;
          sub_21421BB38(v7, v5, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
          sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
          v76 = v4;
          v33 = v104;
          v45 = (uint64_t)v9;
          v86 = v8;
          v87 = (uint64_t)v9;
          v37 = v109;
          v35 = v83;
          v46 = v4;
          v34 = (uint64_t)v106;
          v36 = v107;
          sub_21421BB38(v45, v8, v6, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v76);
          result = sub_21421BB38(v87, v8, v6, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v46);
          v47 = a4 - v44;
          a4 = v44 + a4;
          if (v47 <= a4)
            return result;
          __break(1u);
          goto LABEL_58;
        }
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
    }
    __break(1u);
    goto LABEL_54;
  }
  return result;
}

unint64_t sub_21431658C(unint64_t result, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *__return_ptr, _QWORD);
  void (*v11)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  double v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  char v66;
  char v67;
  unsigned __int8 v68;
  double v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  char v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(double *__return_ptr, uint64_t *);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(_QWORD *__return_ptr, _QWORD);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  _QWORD v127[3];
  char v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  if (result != a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v6 = *(_QWORD *)(a3 + 16);
      if (*(_QWORD *)(v6 + 16) > result)
      {
        v5 = a2;
        v4 = v6 + 32;
        sub_2141FCAC0((uint64_t *)(v6 + 32 + 712 * result), (uint64_t)&v113);
        v9 = v113;
        v8 = v114;
        v11 = v117;
        v12 = v123;
        v13 = v124;
        v14 = v126;
        v103 = v125;
        v104 = v122;
        v105 = v121;
        v106 = v119;
        v102 = v115;
        v108 = v116;
        v109 = v118;
        v107 = v120;
        sub_21421C7C0((uint64_t)v113, v114, v115, v116, (uint64_t)v117, v118, (uint64_t)v119, v120, v121, v122, v123, v124, v125, v126);
        result = sub_2141FD584((uint64_t)&v113);
        if (v14 == 255)
          return result;
        if ((v5 & 0x8000000000000000) == 0)
        {
          if (*(_QWORD *)(v6 + 16) > v5)
          {
            v15 = v14;
            v101 = v12;
            sub_2141FCAC0((uint64_t *)(v4 + 712 * v5), (uint64_t)&v113);
            v17 = (uint64_t)v117;
            v16 = v118;
            v18 = v119;
            v19 = v126;
            v93 = (void (*)(double *__return_ptr, uint64_t *))v113;
            v94 = v125;
            v96 = v122;
            v97 = v124;
            v99 = v121;
            v100 = v123;
            v95 = v114;
            v98 = v115;
            v91 = v120;
            v92 = v116;
            sub_21421C7C0((uint64_t)v113, v114, v115, v116, (uint64_t)v117, v118, (uint64_t)v119, v120, v121, v122, v123, v124, v125, v126);
            sub_2141FD584((uint64_t)&v113);
            if (v19 == 255)
            {
              v75 = v15;
              v24 = v102;
              v73 = v13;
              v74 = v103;
              v71 = v104;
              v72 = v101;
              v70 = v105;
              v22 = (uint64_t)v9;
              v23 = v8;
              v25 = v108;
              v27 = v109;
              v26 = (uint64_t)v11;
            }
            else
            {
              v89 = v16;
              v90 = v17;
              v6 = v102;
              if ((v15 & 1) == 0)
              {
                LOBYTE(v4) = v15;
                if ((v19 & 1) != 0)
                {
                  sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                  v75 = v15;
                  v73 = v13;
                  v74 = v103;
                  v71 = v104;
                  v72 = v101;
                  v70 = v105;
                  v22 = (uint64_t)v9;
                  v23 = v8;
                  v24 = v102;
                  v25 = v108;
                  v26 = (uint64_t)v11;
                }
                else
                {
                  if (v11)
                  {
                    *(double *)v127 = a4;
                    sub_21421C7C0((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v15);
                    v84 = v19;
                    sub_21421C7C0((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                    v11(&v113, v127);
                    v88 = (uint64_t)v18;
                    if ((v114 & 1) != 0)
                    {
                      sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                      sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                      v20 = v107;
                      sub_21421BB38((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v4);
                      v75 = v4;
                      v73 = v13;
                      v74 = v103;
                      v71 = v104;
                      v72 = v101;
                      v21 = (uint64_t)v106;
                      v70 = v105;
                      v22 = (uint64_t)v9;
                      v23 = v8;
                      v24 = v102;
                      v25 = v108;
                      v26 = (uint64_t)v11;
                      v27 = v109;
LABEL_41:
                      v43 = v20;
                      return sub_21421BB38(v22, v23, v24, v25, v26, v27, v21, v43, v70, v71, v72, v73, v74, v75);
                    }
                    v85 = v13;
                    v83 = (uint64_t)v11;
                    v127[0] = v113;
                    v5 = v95;
                    v93((double *)&v113, v127);
                    v7 = (uint64_t)v93;
                    if (qword_253F0FE80 == -1)
                      goto LABEL_31;
                    goto LABEL_56;
                  }
                  sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                  v75 = v15;
                  v73 = v13;
                  v74 = v103;
                  v71 = v104;
                  v72 = v101;
                  v70 = v105;
                  v22 = (uint64_t)v9;
                  v23 = v8;
                  v24 = v102;
                  v25 = v108;
                  v26 = 0;
                }
                v27 = v109;
                v21 = (uint64_t)v106;
LABEL_26:
                v43 = v107;
                return sub_21421BB38(v22, v23, v24, v25, v26, v27, v21, v43, v70, v71, v72, v73, v74, v75);
              }
              v88 = (uint64_t)v18;
              v113 = v9;
              v114 = v8;
              v115 = v102;
              LOBYTE(v116) = v108 & 1;
              v117 = v11;
              v118 = v109;
              v119 = v106;
              v120 = v107;
              LOBYTE(v121) = v105;
              v122 = v104;
              v123 = v101;
              v124 = v13;
              v125 = v103;
              if ((v19 & 1) == 0)
              {
                sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v16, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                return sub_21421BB38((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v15);
              }
              v85 = v13;
              v86 = v8;
              v87 = (uint64_t)v9;
              v127[0] = v93;
              v127[1] = v95;
              v127[2] = v98;
              v128 = v92 & 1;
              v129 = v90;
              v130 = v16;
              v28 = (uint64_t)v18;
              v131 = v18;
              v132 = v91;
              v133 = v99;
              v134 = v96;
              v135 = v100;
              v136 = v97;
              v137 = v94;
              if (!v11)
              {
                sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
                return sub_21421BB38((uint64_t)v9, v8, v102, v108, 0, v109, (uint64_t)v106, v107, v105, v104, v101, v13, v103, v15);
              }
              v110 = a4;
              v82 = v15;
              v29 = (uint64_t)v11;
              sub_21421C7C0((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v15);
              v84 = v19;
              sub_21421C7C0((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
              v11(&v111, &v110);
              v30 = v112;
              v83 = (uint64_t)v11;
              if (v112)
              {
                v31 = v111;
                v33 = v8;
                v32 = (uint64_t)v9;
                v9(&v110, &v111);
                if ((sub_214312E78(v31, v30, v18) & 1) == 0)
                {
                  v48 = sub_214317780(v31, v30, v106);
                  v41 = v49;
                  swift_bridgeObjectRelease();
                  v40 = v98;
                  if ((v41 & 1) != 0)
                  {
                    sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                    sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                    v20 = v107;
                    sub_21421BB38(v87, v86, v102, v108, v29, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                    v75 = v82;
                    v73 = v85;
                    v74 = v103;
                    v71 = v104;
                    v72 = v101;
                    v70 = v105;
                    v23 = v86;
                    v22 = v87;
                    v24 = v102;
                    v25 = v108;
                    v26 = v29;
                    v27 = v109;
                    v21 = (uint64_t)v106;
                    goto LABEL_41;
                  }
                  if ((v48 & 0x8000000000000000) == 0)
                  {
                    v28 = v105;
                    v41 = v106[2];
                    v31 = v99;
                    if (v41 >= v48)
                    {
                      v40 = (uint64_t)(v106 + 4);
                      v80 = sub_214325238((uint64_t)(v106 + 4), 0, (2 * v48) | 1, (uint64_t)v127);
                      if (v41 > v48)
                      {
                        v77 = v50 & 1;
                        v79 = sub_2143253B0((uint64_t)(v106 + 4), v48 + 1, (2 * v41) | 1, (uint64_t)v127);
                        v78 = v51 & 1;
                        sub_21421C7C0(v87, v86, v102, v108, v29, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                        sub_21421C7C0((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                        sub_21432550C(v80, v77, (uint64_t)v127, (uint64_t)&v113);
                        v81 = v52;
                        sub_21421BB38(v87, v86, v102, v108, v29, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                        sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v84);
                        if ((v81 & 1) == 0 || v99 == 255)
                        {
                          v54 = v105;
                          v53 = (uint64_t)v106;
                          v56 = v86;
                          v55 = v87;
                          v57 = v92;
                          v58 = (uint64_t)v93;
                          v59 = v100;
                          v63 = v101;
                          v60 = v97;
                          v61 = v94;
                          v62 = v104;
                          v64 = v82;
                          v65 = v85;
                        }
                        else
                        {
                          v54 = v105;
                          v53 = (uint64_t)v106;
                          v56 = v86;
                          v55 = v87;
                          v57 = v92;
                          v58 = (uint64_t)v93;
                          v59 = v100;
                          v60 = v97;
                          v61 = v94;
                          v62 = v104;
                          v63 = v101;
                          v64 = v82;
                          v65 = v85;
                        }
                        sub_21421C7C0(v55, v56, v102, v108, v83, v109, v53, v107, v54, v62, v63, v65, v103, v64);
                        sub_21421C7C0(v58, v95, v98, v57, v90, v89, v88, v91, v99, v96, v59, v60, v61, v84);
                        sub_21432550C(v79, v78, (uint64_t)v127, (uint64_t)&v113);
                        v67 = v66;
                        v41 = v88;
                        v32 = v91;
                        v28 = v92;
                        sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                        sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                        if ((v67 & 1) == 0 || v99 == 255)
                        {
                          v31 = (uint64_t)v93;
                          v40 = v100;
                          v68 = v84;
                        }
                        else
                        {
                          v31 = (uint64_t)v93;
                          v40 = v100;
                          v68 = v84;
                        }
                        if (qword_253F0FE80 == -1)
                          goto LABEL_50;
                        goto LABEL_63;
                      }
LABEL_62:
                      __break(1u);
LABEL_63:
                      swift_once();
                      v68 = v84;
LABEL_50:
                      v69 = *(double *)&qword_253F0FE78;
                      sub_21421BB38(v31, v95, v98, v28, v90, v89, v41, v32, v99, v96, v40, v97, v94, v68);
                      sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                      sub_21421BB38((uint64_t)v93, v95, v98, v28, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                      result = sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                      if (a4 - v69 > v69 + a4)
                        __break(1u);
                      return result;
                    }
LABEL_61:
                    __break(1u);
                    goto LABEL_62;
                  }
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
                v34 = v92;
                v35 = (uint64_t)v93;
                v36 = v98;
                v111 = v31;
                v112 = v30;
                v37 = v95;
                v93(&v110, &v111);
                swift_bridgeObjectRelease();
                if (qword_253F0FE80 == -1)
                {
LABEL_22:
                  v38 = *(double *)&qword_253F0FE78;
                  v39 = v36;
                  v31 = v90;
                  v32 = v88;
                  v40 = v91;
                  sub_21421BB38(v35, v37, v39, v34, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                  v28 = v83;
                  v41 = v107;
                  sub_21421BB38(v87, v33, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                  sub_21421BB38(v35, v95, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
                  result = sub_21421BB38(v87, v86, v102, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v82);
                  v42 = a4 - v38;
                  a4 = v38 + a4;
                  if (v42 <= a4)
                    return result;
                  __break(1u);
                  goto LABEL_60;
                }
LABEL_58:
                swift_once();
                goto LABEL_22;
              }
              sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
              sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, (uint64_t)v18, v91, v99, v96, v100, v97, v94, v19);
              sub_21421BB38((uint64_t)v9, v8, v102, v108, (uint64_t)v11, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v15);
              v75 = v15;
              v73 = v85;
              v74 = v103;
              v71 = v104;
              v72 = v101;
              v70 = v105;
              v22 = (uint64_t)v9;
              v23 = v8;
              v24 = v102;
              v25 = v108;
              v26 = (uint64_t)v11;
              v27 = v109;
            }
            v21 = (uint64_t)v106;
            goto LABEL_26;
          }
LABEL_55:
          __break(1u);
LABEL_56:
          swift_once();
LABEL_31:
          v44 = *(double *)&qword_253F0FE78;
          sub_21421BB38(v7, v5, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
          sub_21421BB38((uint64_t)v93, v95, v98, v92, v90, v89, v88, v91, v99, v96, v100, v97, v94, v84);
          v76 = v4;
          v33 = v104;
          v45 = (uint64_t)v9;
          v86 = v8;
          v87 = (uint64_t)v9;
          v37 = v109;
          v35 = v83;
          v46 = v4;
          v34 = (uint64_t)v106;
          v36 = v107;
          sub_21421BB38(v45, v8, v6, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v76);
          result = sub_21421BB38(v87, v8, v6, v108, v83, v109, (uint64_t)v106, v107, v105, v104, v101, v85, v103, v46);
          v47 = a4 - v44;
          a4 = v44 + a4;
          if (v47 <= a4)
            return result;
          __break(1u);
          goto LABEL_58;
        }
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
    }
    __break(1u);
    goto LABEL_54;
  }
  return result;
}

uint64_t sub_214317780(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (sub_214425790() & 1) != 0)
    return 0;
  v9 = 0;
  v10 = a3 + 7;
  v11 = 1;
  while (1)
  {
    if (v3 == v11)
      return 0;
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2)
      break;
    v13 = sub_214425790();
    result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0)
      return result;
  }
  return v9;
}

unint64_t *sub_214317864@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(double *__return_ptr, _QWORD *);
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;

  v5 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a3 + 48);
  if (v5 >= *(_QWORD *)(v6 + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v8 = v6 + 16 * v5;
  v9 = *(_QWORD *)(v8 + 40);
  v13[0] = *(_QWORD *)(v8 + 32);
  v13[1] = v9;
  v10 = *(void (**)(double *__return_ptr, _QWORD *))a2;
  swift_bridgeObjectRetain();
  v10(&v14, v13);
  result = (unint64_t *)swift_bridgeObjectRelease();
  v11 = *(double *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24))
    v11 = 0.0;
  v12 = v14 + v11;
  *a4 = v14;
  a4[1] = v12;
  return result;
}

uint64_t sub_214317910()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SgMerger.Context()
{
  return objc_opt_self();
}

uint64_t destroy for SgScales(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  if (*(unsigned __int8 *)(result + 104) != 255)
    result = sub_21421BB6C(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), *(_OWORD *)(result + 64));
  if (*(unsigned __int8 *)(v1 + 216) != 255)
    result = sub_21421BB6C(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168), *(_OWORD *)(v1 + 176));
  if (*(unsigned __int8 *)(v1 + 320) != 255)
    result = sub_21421B8A0(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 280));
  if (*(unsigned __int8 *)(v1 + 456) != 255)
  {
    swift_release();
    if (*(_QWORD *)(v1 + 368))
      _s6Charts15AnyChartContentVwxx_0(v1 + 344);
    if (*(_QWORD *)(v1 + 384))
      swift_release();
    result = swift_bridgeObjectRelease();
    v2 = *(unsigned __int8 *)(v1 + 416);
    if (v2 != 255)
      result = sub_2141E833C(*(_QWORD *)(v1 + 408), v2 & 1);
  }
  if (*(unsigned __int8 *)(v1 + 568) != 255)
    result = sub_21421BB6C(*(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 472), *(_QWORD *)(v1 + 480), *(_QWORD *)(v1 + 488), *(_QWORD *)(v1 + 496), *(_QWORD *)(v1 + 504), *(_QWORD *)(v1 + 512), *(_QWORD *)(v1 + 520), *(_OWORD *)(v1 + 528));
  if (*(unsigned __int8 *)(v1 + 704) != 255)
    return sub_21421BA80(*(_QWORD *)(v1 + 576), *(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 592), *(_QWORD *)(v1 + 600), *(_QWORD *)(v1 + 608), *(_QWORD *)(v1 + 616), *(_QWORD *)(v1 + 624), *(_QWORD *)(v1 + 632), *(_QWORD *)(v1 + 640), *(_QWORD *)(v1 + 648), *(_QWORD *)(v1 + 656), *(_QWORD *)(v1 + 664));
  return result;
}

uint64_t initializeWithCopy for SgScales(uint64_t a1, uint64_t *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t *v57;
  int v58;
  char v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t *v63;
  int v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;

  v4 = *((unsigned __int8 *)a2 + 104);
  if (v4 == 255)
  {
    v5 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)a2 + 89);
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    v124 = v4 & 1;
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[5];
    v14 = a2[6];
    v15 = a2[7];
    v101 = a2[8];
    v106 = a2[9];
    v111 = a2[10];
    v115 = a2[11];
    v119 = a2[12];
    sub_21421BAE4(*a2, v9, v10, v11, v12, v13, v14, v15, v101);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v101;
    *(_QWORD *)(a1 + 72) = v106;
    *(_QWORD *)(a1 + 80) = v111;
    *(_QWORD *)(a1 + 88) = v115;
    *(_QWORD *)(a1 + 96) = v119;
    *(_BYTE *)(a1 + 104) = v124;
  }
  v16 = *((unsigned __int8 *)a2 + 216);
  if (v16 == 255)
  {
    v17 = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 192) = v17;
    *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)a2 + 201);
    v18 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v18;
    v19 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v19;
  }
  else
  {
    v125 = v16 & 1;
    v20 = a2[14];
    v21 = a2[15];
    v22 = a2[16];
    v23 = a2[17];
    v24 = a2[18];
    v25 = a2[19];
    v26 = a2[20];
    v27 = a2[21];
    v102 = a2[22];
    v107 = a2[23];
    v112 = a2[24];
    v116 = a2[25];
    v120 = a2[26];
    sub_21421BAE4(v20, v21, v22, v23, v24, v25, v26, v27, v102);
    *(_QWORD *)(a1 + 112) = v20;
    *(_QWORD *)(a1 + 120) = v21;
    *(_QWORD *)(a1 + 128) = v22;
    *(_QWORD *)(a1 + 136) = v23;
    *(_QWORD *)(a1 + 144) = v24;
    *(_QWORD *)(a1 + 152) = v25;
    *(_QWORD *)(a1 + 160) = v26;
    *(_QWORD *)(a1 + 168) = v27;
    *(_QWORD *)(a1 + 176) = v102;
    *(_QWORD *)(a1 + 184) = v107;
    *(_QWORD *)(a1 + 192) = v112;
    *(_QWORD *)(a1 + 200) = v116;
    *(_QWORD *)(a1 + 208) = v120;
    *(_BYTE *)(a1 + 216) = v125;
  }
  v28 = a1 + 320;
  v29 = *((unsigned __int8 *)a2 + 320);
  if (v29 == 255)
  {
    v30 = *((_OWORD *)a2 + 19);
    *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 304) = v30;
    *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
    v31 = *((_OWORD *)a2 + 15);
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
    *(_OWORD *)(a1 + 240) = v31;
    v32 = *((_OWORD *)a2 + 17);
    *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
    *(_OWORD *)(a1 + 272) = v32;
  }
  else
  {
    v121 = v29 & 1;
    v33 = a2[28];
    v34 = a2[29];
    v35 = a2[30];
    v36 = a2[31];
    v37 = a2[32];
    v38 = a2[33];
    v39 = a2[34];
    v40 = a2[35];
    v103 = a2[36];
    v108 = a2[37];
    v113 = a2[38];
    v117 = a2[39];
    sub_21421B808(v33, v34, v35, v36, v37, v38, v39, v40);
    *(_QWORD *)(a1 + 224) = v33;
    *(_QWORD *)(a1 + 232) = v34;
    *(_QWORD *)(a1 + 240) = v35;
    *(_QWORD *)(a1 + 248) = v36;
    *(_QWORD *)(a1 + 256) = v37;
    *(_QWORD *)(a1 + 264) = v38;
    v28 = a1 + 320;
    *(_QWORD *)(a1 + 272) = v39;
    *(_QWORD *)(a1 + 280) = v40;
    *(_QWORD *)(a1 + 288) = v103;
    *(_QWORD *)(a1 + 296) = v108;
    *(_QWORD *)(a1 + 304) = v113;
    *(_QWORD *)(a1 + 312) = v117;
    *(_BYTE *)(a1 + 320) = v121;
  }
  v41 = *((unsigned __int8 *)a2 + 456);
  if (v41 == 255)
  {
    v42 = *(_OWORD *)(a2 + 55);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    *(_OWORD *)(a1 + 440) = v42;
    *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
    v43 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v43;
    v44 = *(_OWORD *)(a2 + 51);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
    *(_OWORD *)(a1 + 408) = v44;
    v45 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v45;
    goto LABEL_31;
  }
  v46 = a2[42];
  *(_QWORD *)(a1 + 328) = a2[41];
  *(_QWORD *)(a1 + 336) = v46;
  v47 = (_OWORD *)(a1 + 344);
  v48 = a2 + 43;
  v49 = a2[46];
  swift_retain();
  if ((v41 & 1) == 0)
  {
    if (v49)
    {
      v50 = a2[47];
      *(_QWORD *)(a1 + 368) = v49;
      *(_QWORD *)(a1 + 376) = v50;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v49 - 8))(a1 + 344, (uint64_t)(a2 + 43), v49);
      v51 = a2[48];
      if (v51)
      {
LABEL_15:
        v52 = a2[49];
        *(_QWORD *)(a1 + 384) = v51;
        *(_QWORD *)(a1 + 392) = v52;
        swift_retain();
LABEL_21:
        *(_QWORD *)(a1 + 400) = a2[50];
        v57 = a2 + 51;
        v58 = *((unsigned __int8 *)a2 + 416);
        swift_bridgeObjectRetain();
        if (v58 == 255)
        {
          *(_QWORD *)(a1 + 408) = *v57;
          *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
        }
        else
        {
          v59 = v58 & 1;
          v60 = *v57;
          sub_2141E83F4(v60, v59);
          *(_QWORD *)(a1 + 408) = v60;
          *(_BYTE *)(v28 + 96) = v59;
        }
        v61 = *(_OWORD *)(a2 + 55);
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
        *(_OWORD *)(a1 + 440) = v61;
        *(_BYTE *)(v28 + 136) = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v56 = *(_OWORD *)(a2 + 45);
      *v47 = *v48;
      *(_OWORD *)(a1 + 360) = v56;
      *(_QWORD *)(a1 + 376) = a2[47];
      v51 = a2[48];
      if (v51)
        goto LABEL_15;
    }
    *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
    goto LABEL_21;
  }
  if (!v49)
  {
    v62 = *(_OWORD *)(a2 + 45);
    *v47 = *v48;
    *(_OWORD *)(a1 + 360) = v62;
    *(_QWORD *)(a1 + 376) = a2[47];
    v54 = a2[48];
    if (v54)
      goto LABEL_18;
LABEL_26:
    *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
    goto LABEL_27;
  }
  v53 = a2[47];
  *(_QWORD *)(a1 + 368) = v49;
  *(_QWORD *)(a1 + 376) = v53;
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v49 - 8))(a1 + 344, (uint64_t)(a2 + 43), v49);
  v54 = a2[48];
  if (!v54)
    goto LABEL_26;
LABEL_18:
  v55 = a2[49];
  *(_QWORD *)(a1 + 384) = v54;
  *(_QWORD *)(a1 + 392) = v55;
  swift_retain();
LABEL_27:
  *(_QWORD *)(a1 + 400) = a2[50];
  v63 = a2 + 51;
  v64 = *((unsigned __int8 *)a2 + 416);
  swift_bridgeObjectRetain();
  if (v64 == 255)
  {
    *(_QWORD *)(a1 + 408) = *v63;
    *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
  }
  else
  {
    v65 = v64 & 1;
    v66 = *v63;
    sub_2141E83F4(v66, v65);
    *(_QWORD *)(a1 + 408) = v66;
    *(_BYTE *)(v28 + 96) = v65;
  }
  v67 = *(_OWORD *)(a2 + 55);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
  *(_OWORD *)(a1 + 440) = v67;
  *(_BYTE *)(v28 + 136) = 1;
LABEL_31:
  v68 = *((unsigned __int8 *)a2 + 568);
  if (v68 == 255)
  {
    v69 = *((_OWORD *)a2 + 34);
    *(_OWORD *)(a1 + 528) = *((_OWORD *)a2 + 33);
    *(_OWORD *)(a1 + 544) = v69;
    *(_OWORD *)(a1 + 553) = *(_OWORD *)((char *)a2 + 553);
    v70 = *((_OWORD *)a2 + 30);
    *(_OWORD *)(a1 + 464) = *((_OWORD *)a2 + 29);
    *(_OWORD *)(a1 + 480) = v70;
    v71 = *((_OWORD *)a2 + 32);
    *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
    *(_OWORD *)(a1 + 512) = v71;
  }
  else
  {
    v122 = v68 & 1;
    v72 = a2[58];
    v73 = a2[59];
    v74 = a2[60];
    v75 = a2[61];
    v76 = a2[62];
    v77 = a2[63];
    v78 = a2[64];
    v79 = a2[65];
    v99 = a2[66];
    v104 = a2[67];
    v109 = a2[68];
    v114 = a2[69];
    v118 = a2[70];
    sub_21421BAE4(v72, v73, v74, v75, v76, v77, v78, v79, v99);
    *(_QWORD *)(a1 + 464) = v72;
    *(_QWORD *)(a1 + 472) = v73;
    *(_QWORD *)(a1 + 480) = v74;
    *(_QWORD *)(a1 + 488) = v75;
    *(_QWORD *)(a1 + 496) = v76;
    *(_QWORD *)(a1 + 504) = v77;
    *(_QWORD *)(a1 + 512) = v78;
    *(_QWORD *)(a1 + 520) = v79;
    *(_QWORD *)(a1 + 528) = v99;
    *(_QWORD *)(a1 + 536) = v104;
    *(_QWORD *)(a1 + 544) = v109;
    *(_QWORD *)(a1 + 552) = v114;
    *(_QWORD *)(a1 + 560) = v118;
    *(_BYTE *)(a1 + 568) = v122;
  }
  v80 = *((unsigned __int8 *)a2 + 704);
  if (v80 == 255)
  {
    v81 = *((_OWORD *)a2 + 43);
    *(_OWORD *)(a1 + 672) = *((_OWORD *)a2 + 42);
    *(_OWORD *)(a1 + 688) = v81;
    *(_BYTE *)(a1 + 704) = *((_BYTE *)a2 + 704);
    v82 = *((_OWORD *)a2 + 39);
    *(_OWORD *)(a1 + 608) = *((_OWORD *)a2 + 38);
    *(_OWORD *)(a1 + 624) = v82;
    v83 = *((_OWORD *)a2 + 41);
    *(_OWORD *)(a1 + 640) = *((_OWORD *)a2 + 40);
    *(_OWORD *)(a1 + 656) = v83;
    v84 = *((_OWORD *)a2 + 37);
    *(_OWORD *)(a1 + 576) = *((_OWORD *)a2 + 36);
    *(_OWORD *)(a1 + 592) = v84;
  }
  else
  {
    v123 = v80 & 1;
    v85 = a2[72];
    v86 = a2[73];
    v87 = a2[74];
    v88 = a2[75];
    v89 = a2[76];
    v90 = a2[77];
    v91 = a2[78];
    v92 = a2[79];
    v97 = a2[80];
    v98 = a2[81];
    v100 = a2[82];
    v105 = a2[83];
    v110 = a2[84];
    v95 = a2[86];
    v96 = a2[87];
    v94 = a2[85];
    sub_21421B980(v85, v86, v87, v88, v89, v90, v91, v92, v97, v98, v100, v105);
    *(_QWORD *)(a1 + 576) = v85;
    *(_QWORD *)(a1 + 584) = v86;
    *(_QWORD *)(a1 + 592) = v87;
    *(_QWORD *)(a1 + 600) = v88;
    *(_QWORD *)(a1 + 608) = v89;
    *(_QWORD *)(a1 + 616) = v90;
    *(_QWORD *)(a1 + 624) = v91;
    *(_QWORD *)(a1 + 632) = v92;
    *(_QWORD *)(a1 + 640) = v97;
    *(_QWORD *)(a1 + 648) = v98;
    *(_QWORD *)(a1 + 656) = v100;
    *(_QWORD *)(a1 + 664) = v105;
    *(_QWORD *)(a1 + 672) = v110;
    *(_QWORD *)(a1 + 680) = v94;
    *(_QWORD *)(a1 + 688) = v95;
    *(_QWORD *)(a1 + 696) = v96;
    *(_BYTE *)(a1 + 704) = v123;
  }
  return a1;
}

uint64_t assignWithCopy for SgScales(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  _OWORD *v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  _OWORD *v132;
  __int128 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t *v141;
  int v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t *v149;
  int v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  __int128 v154;
  __int128 *v155;
  __int128 *v156;
  int v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _OWORD *v193;
  _OWORD *v194;
  _BYTE *v195;
  int v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  uint64_t v297;
  char v298;
  char v299;
  _BYTE *v300;
  char v301;
  char v302;

  v4 = *((unsigned __int8 *)a2 + 104);
  if (*(unsigned __int8 *)(a1 + 104) == 255)
  {
    if (v4 == 255)
    {
      v10 = *a2;
      v11 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)a1 = v10;
      v12 = a2[3];
      v13 = a2[4];
      v14 = a2[5];
      *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
      *(_OWORD *)(a1 + 64) = v13;
      *(_OWORD *)(a1 + 80) = v14;
      *(_OWORD *)(a1 + 48) = v12;
    }
    else
    {
      v299 = v4 & 1;
      v32 = *(_QWORD *)a2;
      v33 = *((_QWORD *)a2 + 1);
      v34 = *((_QWORD *)a2 + 2);
      v35 = *((_QWORD *)a2 + 3);
      v36 = *((_QWORD *)a2 + 4);
      v37 = *((_QWORD *)a2 + 5);
      v38 = *((_QWORD *)a2 + 6);
      v39 = *((_QWORD *)a2 + 7);
      v250 = *((_QWORD *)a2 + 8);
      v260 = *((_QWORD *)a2 + 9);
      v270 = *((_QWORD *)a2 + 10);
      v280 = *((_QWORD *)a2 + 11);
      v290 = *((_QWORD *)a2 + 12);
      sub_21421BAE4(*(_QWORD *)a2, v33, v34, v35, v36, v37, v38, v39, v250);
      *(_QWORD *)a1 = v32;
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)(a1 + 16) = v34;
      *(_QWORD *)(a1 + 24) = v35;
      *(_QWORD *)(a1 + 32) = v36;
      *(_QWORD *)(a1 + 40) = v37;
      *(_QWORD *)(a1 + 48) = v38;
      *(_QWORD *)(a1 + 56) = v39;
      *(_QWORD *)(a1 + 64) = v250;
      *(_QWORD *)(a1 + 72) = v260;
      *(_QWORD *)(a1 + 80) = v270;
      *(_QWORD *)(a1 + 88) = v280;
      *(_QWORD *)(a1 + 96) = v290;
      *(_BYTE *)(a1 + 104) = v299;
    }
  }
  else if (v4 == 255)
  {
    sub_2141E0750(a1, &qword_253F13368);
    v6 = a2[1];
    v5 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v5;
    v8 = a2[4];
    v7 = a2[5];
    v9 = a2[3];
    *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
    *(_OWORD *)(a1 + 64) = v8;
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    v298 = v4 & 1;
    v15 = *(_QWORD *)a2;
    v16 = *((_QWORD *)a2 + 1);
    v17 = *((_QWORD *)a2 + 2);
    v18 = *((_QWORD *)a2 + 3);
    v19 = *((_QWORD *)a2 + 4);
    v20 = *((_QWORD *)a2 + 5);
    v21 = *((_QWORD *)a2 + 6);
    v22 = *((_QWORD *)a2 + 7);
    v249 = *((_QWORD *)a2 + 8);
    v259 = *((_QWORD *)a2 + 9);
    v269 = *((_QWORD *)a2 + 10);
    v279 = *((_QWORD *)a2 + 11);
    v289 = *((_QWORD *)a2 + 12);
    sub_21421BAE4(*(_QWORD *)a2, v16, v17, v18, v19, v20, v21, v22, v249);
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(_QWORD *)(a1 + 40);
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v22;
    *(_QWORD *)(a1 + 64) = v249;
    *(_QWORD *)(a1 + 72) = v259;
    *(_QWORD *)(a1 + 80) = v269;
    *(_QWORD *)(a1 + 88) = v279;
    *(_QWORD *)(a1 + 96) = v289;
    *(_BYTE *)(a1 + 104) = v298;
    sub_21421BB6C(v23, v24, v25, v26, v27, v28, v29, v30, v31);
  }
  v300 = (_BYTE *)(a1 + 320);
  v40 = (__int128 *)(a1 + 112);
  v41 = a2 + 7;
  v42 = *((unsigned __int8 *)a2 + 216);
  if (*(unsigned __int8 *)(a1 + 216) == 255)
  {
    if (v42 == 255)
    {
      v48 = *v41;
      v49 = a2[9];
      *(_OWORD *)(a1 + 128) = a2[8];
      *(_OWORD *)(a1 + 144) = v49;
      *v40 = v48;
      v50 = a2[10];
      v51 = a2[11];
      v52 = a2[12];
      *(_OWORD *)(a1 + 201) = *(__int128 *)((char *)a2 + 201);
      *(_OWORD *)(a1 + 176) = v51;
      *(_OWORD *)(a1 + 192) = v52;
      *(_OWORD *)(a1 + 160) = v50;
    }
    else
    {
      v292 = v42 & 1;
      v70 = *((_QWORD *)a2 + 14);
      v71 = *((_QWORD *)a2 + 15);
      v72 = *((_QWORD *)a2 + 16);
      v73 = *((_QWORD *)a2 + 17);
      v74 = *((_QWORD *)a2 + 18);
      v75 = *((_QWORD *)a2 + 19);
      v76 = *((_QWORD *)a2 + 20);
      v77 = *((_QWORD *)a2 + 21);
      v244 = *((_QWORD *)a2 + 22);
      v252 = *((_QWORD *)a2 + 23);
      v262 = *((_QWORD *)a2 + 24);
      v272 = *((_QWORD *)a2 + 25);
      v282 = *((_QWORD *)a2 + 26);
      sub_21421BAE4(v70, v71, v72, v73, v74, v75, v76, v77, v244);
      *(_QWORD *)(a1 + 112) = v70;
      *(_QWORD *)(a1 + 120) = v71;
      *(_QWORD *)(a1 + 128) = v72;
      *(_QWORD *)(a1 + 136) = v73;
      *(_QWORD *)(a1 + 144) = v74;
      *(_QWORD *)(a1 + 152) = v75;
      *(_QWORD *)(a1 + 160) = v76;
      *(_QWORD *)(a1 + 168) = v77;
      *(_QWORD *)(a1 + 176) = v244;
      *(_QWORD *)(a1 + 184) = v252;
      *(_QWORD *)(a1 + 192) = v262;
      *(_QWORD *)(a1 + 200) = v272;
      *(_QWORD *)(a1 + 208) = v282;
      *(_BYTE *)(a1 + 216) = v292;
    }
  }
  else if (v42 == 255)
  {
    sub_2141E0750(a1 + 112, &qword_253F13368);
    v44 = a2[8];
    v43 = a2[9];
    *v40 = *v41;
    *(_OWORD *)(a1 + 128) = v44;
    *(_OWORD *)(a1 + 144) = v43;
    v46 = a2[11];
    v45 = a2[12];
    v47 = a2[10];
    *(_OWORD *)(a1 + 201) = *(__int128 *)((char *)a2 + 201);
    *(_OWORD *)(a1 + 176) = v46;
    *(_OWORD *)(a1 + 192) = v45;
    *(_OWORD *)(a1 + 160) = v47;
  }
  else
  {
    v291 = v42 & 1;
    v53 = *((_QWORD *)a2 + 14);
    v54 = *((_QWORD *)a2 + 15);
    v55 = *((_QWORD *)a2 + 16);
    v56 = *((_QWORD *)a2 + 17);
    v57 = *((_QWORD *)a2 + 18);
    v58 = *((_QWORD *)a2 + 19);
    v59 = *((_QWORD *)a2 + 20);
    v60 = *((_QWORD *)a2 + 21);
    v243 = *((_QWORD *)a2 + 22);
    v251 = *((_QWORD *)a2 + 23);
    v261 = *((_QWORD *)a2 + 24);
    v271 = *((_QWORD *)a2 + 25);
    v281 = *((_QWORD *)a2 + 26);
    sub_21421BAE4(v53, v54, v55, v56, v57, v58, v59, v60, v243);
    v61 = *(_QWORD *)(a1 + 112);
    v62 = *(_QWORD *)(a1 + 120);
    v63 = *(_QWORD *)(a1 + 128);
    v64 = *(_QWORD *)(a1 + 136);
    v65 = *(_QWORD *)(a1 + 144);
    v66 = *(_QWORD *)(a1 + 152);
    v67 = *(_QWORD *)(a1 + 160);
    v68 = *(_QWORD *)(a1 + 168);
    v69 = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 112) = v53;
    *(_QWORD *)(a1 + 120) = v54;
    *(_QWORD *)(a1 + 128) = v55;
    *(_QWORD *)(a1 + 136) = v56;
    *(_QWORD *)(a1 + 144) = v57;
    *(_QWORD *)(a1 + 152) = v58;
    *(_QWORD *)(a1 + 160) = v59;
    *(_QWORD *)(a1 + 168) = v60;
    *(_QWORD *)(a1 + 176) = v243;
    *(_QWORD *)(a1 + 184) = v251;
    *(_QWORD *)(a1 + 192) = v261;
    *(_QWORD *)(a1 + 200) = v271;
    *(_QWORD *)(a1 + 208) = v281;
    *(_BYTE *)(a1 + 216) = v291;
    sub_21421BB6C(v61, v62, v63, v64, v65, v66, v67, v68, v69);
  }
  v78 = (__int128 *)(a1 + 224);
  v79 = a2 + 14;
  v80 = *((unsigned __int8 *)a2 + 320);
  if (*(unsigned __int8 *)(a1 + 320) == 255)
  {
    if (v80 == 255)
    {
      v86 = *v79;
      v87 = a2[16];
      *(_OWORD *)(a1 + 240) = a2[15];
      *(_OWORD *)(a1 + 256) = v87;
      *v78 = v86;
      v88 = a2[17];
      v89 = a2[18];
      v90 = a2[19];
      *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
      *(_OWORD *)(a1 + 288) = v89;
      *(_OWORD *)(a1 + 304) = v90;
      *(_OWORD *)(a1 + 272) = v88;
      goto LABEL_20;
    }
    v294 = v80 & 1;
    v108 = *((_QWORD *)a2 + 28);
    v109 = *((_QWORD *)a2 + 29);
    v110 = *((_QWORD *)a2 + 30);
    v111 = *((_QWORD *)a2 + 31);
    v112 = *((_QWORD *)a2 + 32);
    v113 = *((_QWORD *)a2 + 33);
    v114 = *((_QWORD *)a2 + 34);
    v115 = *((_QWORD *)a2 + 35);
    v254 = *((_QWORD *)a2 + 36);
    v264 = *((_QWORD *)a2 + 37);
    v274 = *((_QWORD *)a2 + 38);
    v284 = *((_QWORD *)a2 + 39);
    sub_21421B808(v108, v109, v110, v111, v112, v113, v114, v115);
    *(_QWORD *)(a1 + 224) = v108;
    *(_QWORD *)(a1 + 232) = v109;
    *(_QWORD *)(a1 + 240) = v110;
    *(_QWORD *)(a1 + 248) = v111;
    *(_QWORD *)(a1 + 256) = v112;
    *(_QWORD *)(a1 + 264) = v113;
    *(_QWORD *)(a1 + 272) = v114;
    *(_QWORD *)(a1 + 280) = v115;
    *(_QWORD *)(a1 + 288) = v254;
    *(_QWORD *)(a1 + 296) = v264;
    *(_QWORD *)(a1 + 304) = v274;
    *(_QWORD *)(a1 + 312) = v284;
    v91 = a1 + 320;
    *v300 = v294;
  }
  else
  {
    if (v80 == 255)
    {
      sub_2141E0750(a1 + 224, qword_253F10468);
      v82 = a2[15];
      v81 = a2[16];
      *v78 = *v79;
      *(_OWORD *)(a1 + 240) = v82;
      *(_OWORD *)(a1 + 256) = v81;
      v84 = a2[18];
      v83 = a2[19];
      v85 = a2[17];
      *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
      *(_OWORD *)(a1 + 288) = v84;
      *(_OWORD *)(a1 + 304) = v83;
      *(_OWORD *)(a1 + 272) = v85;
LABEL_20:
      v91 = a1 + 320;
      goto LABEL_23;
    }
    v293 = v80 & 1;
    v92 = *((_QWORD *)a2 + 28);
    v93 = *((_QWORD *)a2 + 29);
    v94 = *((_QWORD *)a2 + 30);
    v95 = *((_QWORD *)a2 + 31);
    v96 = *((_QWORD *)a2 + 32);
    v97 = *((_QWORD *)a2 + 33);
    v98 = *((_QWORD *)a2 + 34);
    v99 = *((_QWORD *)a2 + 35);
    v253 = *((_QWORD *)a2 + 36);
    v263 = *((_QWORD *)a2 + 37);
    v273 = *((_QWORD *)a2 + 38);
    v283 = *((_QWORD *)a2 + 39);
    sub_21421B808(v92, v93, v94, v95, v96, v97, v98, v99);
    v100 = *(_QWORD *)(a1 + 224);
    v101 = *(_QWORD *)(a1 + 232);
    v102 = *(_QWORD *)(a1 + 240);
    v103 = *(_QWORD *)(a1 + 248);
    v104 = *(_QWORD *)(a1 + 256);
    v105 = *(_QWORD *)(a1 + 264);
    v106 = *(_QWORD *)(a1 + 272);
    v107 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 224) = v92;
    *(_QWORD *)(a1 + 232) = v93;
    *(_QWORD *)(a1 + 240) = v94;
    *(_QWORD *)(a1 + 248) = v95;
    *(_QWORD *)(a1 + 256) = v96;
    *(_QWORD *)(a1 + 264) = v97;
    v91 = a1 + 320;
    *(_QWORD *)(a1 + 272) = v98;
    *(_QWORD *)(a1 + 280) = v99;
    *(_QWORD *)(a1 + 288) = v253;
    *(_QWORD *)(a1 + 296) = v263;
    *(_QWORD *)(a1 + 304) = v273;
    *(_QWORD *)(a1 + 312) = v283;
    *v300 = v293;
    sub_21421B8A0(v100, v101, v102, v103, v104, v105, v106, v107);
  }
LABEL_23:
  v116 = (_OWORD *)(a1 + 328);
  v117 = (__int128 *)((char *)a2 + 328);
  v118 = *((unsigned __int8 *)a2 + 456);
  if (*(unsigned __int8 *)(a1 + 456) == 255)
  {
    if (v118 == 255)
    {
      *v116 = *v117;
      v125 = *(__int128 *)((char *)a2 + 344);
      v126 = *(__int128 *)((char *)a2 + 360);
      v127 = *(__int128 *)((char *)a2 + 392);
      *(_OWORD *)(a1 + 376) = *(__int128 *)((char *)a2 + 376);
      *(_OWORD *)(a1 + 392) = v127;
      *(_OWORD *)(a1 + 344) = v125;
      *(_OWORD *)(a1 + 360) = v126;
      v128 = *(__int128 *)((char *)a2 + 408);
      v129 = *(__int128 *)((char *)a2 + 424);
      v130 = *(__int128 *)((char *)a2 + 440);
      *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
      *(_OWORD *)(a1 + 424) = v129;
      *(_OWORD *)(a1 + 440) = v130;
      *(_OWORD *)(a1 + 408) = v128;
      goto LABEL_49;
    }
LABEL_30:
    v131 = *((_QWORD *)a2 + 42);
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
    *(_QWORD *)(a1 + 336) = v131;
    v132 = (_OWORD *)(a1 + 344);
    v133 = (__int128 *)((char *)a2 + 344);
    v134 = *((_QWORD *)a2 + 46);
    swift_retain();
    if ((v118 & 1) != 0)
    {
      if (v134)
      {
        *(_QWORD *)(a1 + 368) = v134;
        *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v134 - 8))(a1 + 344, (uint64_t)a2 + 344, v134);
        v135 = *((_QWORD *)a2 + 48);
        if (v135)
        {
LABEL_33:
          v136 = *((_QWORD *)a2 + 49);
          *(_QWORD *)(a1 + 384) = v135;
          *(_QWORD *)(a1 + 392) = v136;
          swift_retain();
LABEL_39:
          *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
          v141 = (uint64_t *)a2 + 51;
          v142 = *((unsigned __int8 *)a2 + 416);
          swift_bridgeObjectRetain();
          if (v142 == 255)
          {
            v143 = *v141;
            *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
            *(_QWORD *)(a1 + 408) = v143;
          }
          else
          {
            v144 = v142 & 1;
            v145 = *v141;
            sub_2141E83F4(v145, v144);
            *(_QWORD *)(a1 + 408) = v145;
            *(_BYTE *)(v91 + 96) = v144;
          }
          v146 = *(__int128 *)((char *)a2 + 440);
          *(_OWORD *)(a1 + 424) = *(__int128 *)((char *)a2 + 424);
          *(_OWORD *)(a1 + 440) = v146;
          *(_BYTE *)(v91 + 136) = 1;
          goto LABEL_49;
        }
      }
      else
      {
        v139 = *v133;
        v140 = *(__int128 *)((char *)a2 + 360);
        *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
        *v132 = v139;
        *(_OWORD *)(a1 + 360) = v140;
        v135 = *((_QWORD *)a2 + 48);
        if (v135)
          goto LABEL_33;
      }
      *(_OWORD *)(a1 + 384) = a2[24];
      goto LABEL_39;
    }
    if (v134)
    {
      *(_QWORD *)(a1 + 368) = v134;
      *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v134 - 8))(a1 + 344, (uint64_t)a2 + 344, v134);
      v137 = *((_QWORD *)a2 + 48);
      if (v137)
      {
LABEL_36:
        v138 = *((_QWORD *)a2 + 49);
        *(_QWORD *)(a1 + 384) = v137;
        *(_QWORD *)(a1 + 392) = v138;
        swift_retain();
LABEL_45:
        *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
        v149 = (uint64_t *)a2 + 51;
        v150 = *((unsigned __int8 *)a2 + 416);
        swift_bridgeObjectRetain();
        if (v150 == 255)
        {
          v151 = *v149;
          *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
          *(_QWORD *)(a1 + 408) = v151;
        }
        else
        {
          v152 = v150 & 1;
          v153 = *v149;
          sub_2141E83F4(v153, v152);
          *(_QWORD *)(a1 + 408) = v153;
          *(_BYTE *)(v91 + 96) = v152;
        }
        v154 = *(__int128 *)((char *)a2 + 440);
        *(_OWORD *)(a1 + 424) = *(__int128 *)((char *)a2 + 424);
        *(_OWORD *)(a1 + 440) = v154;
        *(_BYTE *)(v91 + 136) = 0;
        goto LABEL_49;
      }
    }
    else
    {
      v147 = *v133;
      v148 = *(__int128 *)((char *)a2 + 360);
      *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
      *v132 = v147;
      *(_OWORD *)(a1 + 360) = v148;
      v137 = *((_QWORD *)a2 + 48);
      if (v137)
        goto LABEL_36;
    }
    *(_OWORD *)(a1 + 384) = a2[24];
    goto LABEL_45;
  }
  if (v118 == 255)
  {
    sub_2141E0750(a1 + 328, &qword_254D695C8);
    *v116 = *v117;
    v119 = *(__int128 *)((char *)a2 + 392);
    v121 = *(__int128 *)((char *)a2 + 344);
    v120 = *(__int128 *)((char *)a2 + 360);
    *(_OWORD *)(a1 + 376) = *(__int128 *)((char *)a2 + 376);
    *(_OWORD *)(a1 + 392) = v119;
    *(_OWORD *)(a1 + 344) = v121;
    *(_OWORD *)(a1 + 360) = v120;
    v123 = *(__int128 *)((char *)a2 + 424);
    v122 = *(__int128 *)((char *)a2 + 440);
    v124 = *(__int128 *)((char *)a2 + 408);
    *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
    *(_OWORD *)(a1 + 424) = v123;
    *(_OWORD *)(a1 + 440) = v122;
    *(_OWORD *)(a1 + 408) = v124;
    goto LABEL_49;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2141E0750(a1 + 328, &qword_254D695C8);
    LOBYTE(v118) = *((_BYTE *)a2 + 456);
    goto LABEL_30;
  }
LABEL_49:
  v155 = (__int128 *)(a1 + 464);
  v156 = a2 + 29;
  v157 = *((unsigned __int8 *)a2 + 568);
  if (*(unsigned __int8 *)(a1 + 568) == 255)
  {
    if (v157 == 255)
    {
      v163 = *v156;
      v164 = a2[31];
      *(_OWORD *)(a1 + 480) = a2[30];
      *(_OWORD *)(a1 + 496) = v164;
      *v155 = v163;
      v165 = a2[32];
      v166 = a2[33];
      v167 = a2[34];
      *(_OWORD *)(a1 + 553) = *(__int128 *)((char *)a2 + 553);
      *(_OWORD *)(a1 + 528) = v166;
      *(_OWORD *)(a1 + 544) = v167;
      *(_OWORD *)(a1 + 512) = v165;
    }
    else
    {
      v296 = v157 & 1;
      v185 = *((_QWORD *)a2 + 58);
      v186 = *((_QWORD *)a2 + 59);
      v187 = *((_QWORD *)a2 + 60);
      v188 = *((_QWORD *)a2 + 61);
      v189 = *((_QWORD *)a2 + 62);
      v190 = *((_QWORD *)a2 + 63);
      v191 = *((_QWORD *)a2 + 64);
      v192 = *((_QWORD *)a2 + 65);
      v246 = *((_QWORD *)a2 + 66);
      v256 = *((_QWORD *)a2 + 67);
      v266 = *((_QWORD *)a2 + 68);
      v276 = *((_QWORD *)a2 + 69);
      v286 = *((_QWORD *)a2 + 70);
      sub_21421BAE4(v185, v186, v187, v188, v189, v190, v191, v192, v246);
      *(_QWORD *)(a1 + 464) = v185;
      *(_QWORD *)(a1 + 472) = v186;
      *(_QWORD *)(a1 + 480) = v187;
      *(_QWORD *)(a1 + 488) = v188;
      *(_QWORD *)(a1 + 496) = v189;
      *(_QWORD *)(a1 + 504) = v190;
      v91 = a1 + 320;
      *(_QWORD *)(a1 + 512) = v191;
      *(_QWORD *)(a1 + 520) = v192;
      *(_QWORD *)(a1 + 528) = v246;
      *(_QWORD *)(a1 + 536) = v256;
      *(_QWORD *)(a1 + 544) = v266;
      *(_QWORD *)(a1 + 552) = v276;
      *(_QWORD *)(a1 + 560) = v286;
      *(_BYTE *)(a1 + 568) = v296;
    }
  }
  else if (v157 == 255)
  {
    sub_2141E0750(a1 + 464, &qword_253F13368);
    v159 = a2[30];
    v158 = a2[31];
    *v155 = *v156;
    *(_OWORD *)(a1 + 480) = v159;
    *(_OWORD *)(a1 + 496) = v158;
    v161 = a2[33];
    v160 = a2[34];
    v162 = a2[32];
    *(_OWORD *)(a1 + 553) = *(__int128 *)((char *)a2 + 553);
    *(_OWORD *)(a1 + 528) = v161;
    *(_OWORD *)(a1 + 544) = v160;
    *(_OWORD *)(a1 + 512) = v162;
  }
  else
  {
    v295 = v157 & 1;
    v168 = *((_QWORD *)a2 + 58);
    v169 = *((_QWORD *)a2 + 59);
    v170 = *((_QWORD *)a2 + 60);
    v171 = *((_QWORD *)a2 + 61);
    v172 = *((_QWORD *)a2 + 62);
    v173 = *((_QWORD *)a2 + 63);
    v174 = *((_QWORD *)a2 + 64);
    v175 = *((_QWORD *)a2 + 65);
    v245 = *((_QWORD *)a2 + 66);
    v255 = *((_QWORD *)a2 + 67);
    v265 = *((_QWORD *)a2 + 68);
    v275 = *((_QWORD *)a2 + 69);
    v285 = *((_QWORD *)a2 + 70);
    sub_21421BAE4(v168, v169, v170, v171, v172, v173, v174, v175, v245);
    v176 = *(_QWORD *)(a1 + 464);
    v177 = *(_QWORD *)(a1 + 472);
    v178 = *(_QWORD *)(a1 + 480);
    v179 = *(_QWORD *)(a1 + 488);
    v180 = *(_QWORD *)(a1 + 496);
    v181 = *(_QWORD *)(a1 + 504);
    v182 = *(_QWORD *)(a1 + 512);
    v183 = *(_QWORD *)(a1 + 520);
    v184 = *(_OWORD *)(a1 + 528);
    *(_QWORD *)(a1 + 464) = v168;
    *(_QWORD *)(a1 + 472) = v169;
    *(_QWORD *)(a1 + 480) = v170;
    *(_QWORD *)(a1 + 488) = v171;
    *(_QWORD *)(a1 + 496) = v172;
    *(_QWORD *)(a1 + 504) = v173;
    v91 = a1 + 320;
    *(_QWORD *)(a1 + 512) = v174;
    *(_QWORD *)(a1 + 520) = v175;
    *(_QWORD *)(a1 + 528) = v245;
    *(_QWORD *)(a1 + 536) = v255;
    *(_QWORD *)(a1 + 544) = v265;
    *(_QWORD *)(a1 + 552) = v275;
    *(_QWORD *)(a1 + 560) = v285;
    *(_BYTE *)(a1 + 568) = v295;
    sub_21421BB6C(v176, v177, v178, v179, v180, v181, v182, v183, v184);
  }
  v193 = (_OWORD *)(a1 + 576);
  v194 = a2 + 36;
  v195 = (_BYTE *)(v91 + 384);
  v196 = *((unsigned __int8 *)a2 + 704);
  if (*(unsigned __int8 *)(a1 + 704) == 255)
  {
    if (v196 == 255)
    {
      *v193 = *v194;
      v203 = a2[37];
      v204 = a2[38];
      v205 = a2[40];
      *(_OWORD *)(a1 + 624) = a2[39];
      *(_OWORD *)(a1 + 640) = v205;
      *(_OWORD *)(a1 + 592) = v203;
      *(_OWORD *)(a1 + 608) = v204;
      v206 = a2[41];
      v207 = a2[42];
      v208 = a2[43];
      *(_BYTE *)(a1 + 704) = *((_BYTE *)a2 + 704);
      *(_OWORD *)(a1 + 672) = v207;
      *(_OWORD *)(a1 + 688) = v208;
      *(_OWORD *)(a1 + 656) = v206;
    }
    else
    {
      v302 = v196 & 1;
      v228 = *((_QWORD *)a2 + 72);
      v229 = *((_QWORD *)a2 + 73);
      v230 = *((_QWORD *)a2 + 74);
      v231 = *((_QWORD *)a2 + 75);
      v232 = *((_QWORD *)a2 + 76);
      v233 = *((_QWORD *)a2 + 77);
      v234 = *((_QWORD *)a2 + 78);
      v235 = *((_QWORD *)a2 + 79);
      v240 = *((_QWORD *)a2 + 80);
      v248 = *((_QWORD *)a2 + 81);
      v258 = *((_QWORD *)a2 + 82);
      v268 = *((_QWORD *)a2 + 83);
      v278 = *((_QWORD *)a2 + 84);
      v288 = *((_QWORD *)a2 + 85);
      v237 = *((_QWORD *)a2 + 86);
      v238 = *((_QWORD *)a2 + 87);
      v242 = v195;
      sub_21421B980(v228, v229, v230, v231, v232, v233, v234, v235, v240, v248, v258, v268);
      *(_QWORD *)(a1 + 576) = v228;
      *(_QWORD *)(a1 + 584) = v229;
      *(_QWORD *)(a1 + 592) = v230;
      *(_QWORD *)(a1 + 600) = v231;
      *(_QWORD *)(a1 + 608) = v232;
      *(_QWORD *)(a1 + 616) = v233;
      *(_QWORD *)(a1 + 624) = v234;
      *(_QWORD *)(a1 + 632) = v235;
      *(_QWORD *)(a1 + 640) = v240;
      *(_QWORD *)(a1 + 648) = v248;
      *(_QWORD *)(a1 + 656) = v258;
      *(_QWORD *)(a1 + 664) = v268;
      *(_QWORD *)(a1 + 672) = v278;
      *(_QWORD *)(a1 + 680) = v288;
      *(_QWORD *)(a1 + 688) = v237;
      *(_QWORD *)(a1 + 696) = v238;
      *v242 = v302;
    }
  }
  else if (v196 == 255)
  {
    sub_2141E0750(a1 + 576, &qword_254D695C0);
    *v193 = *v194;
    v197 = a2[40];
    v199 = a2[37];
    v198 = a2[38];
    *(_OWORD *)(a1 + 624) = a2[39];
    *(_OWORD *)(a1 + 640) = v197;
    *(_OWORD *)(a1 + 592) = v199;
    *(_OWORD *)(a1 + 608) = v198;
    v201 = a2[42];
    v200 = a2[43];
    v202 = a2[41];
    *(_BYTE *)(a1 + 704) = *((_BYTE *)a2 + 704);
    *(_OWORD *)(a1 + 672) = v201;
    *(_OWORD *)(a1 + 688) = v200;
    *(_OWORD *)(a1 + 656) = v202;
  }
  else
  {
    v301 = v196 & 1;
    v209 = *((_QWORD *)a2 + 72);
    v210 = *((_QWORD *)a2 + 73);
    v211 = *((_QWORD *)a2 + 74);
    v212 = *((_QWORD *)a2 + 75);
    v213 = *((_QWORD *)a2 + 76);
    v214 = *((_QWORD *)a2 + 77);
    v215 = *((_QWORD *)a2 + 78);
    v216 = *((_QWORD *)a2 + 79);
    v239 = *((_QWORD *)a2 + 80);
    v241 = *((_QWORD *)a2 + 81);
    v247 = *((_QWORD *)a2 + 82);
    v257 = *((_QWORD *)a2 + 83);
    v267 = *((_QWORD *)a2 + 84);
    v277 = *((_QWORD *)a2 + 85);
    v287 = *((_QWORD *)a2 + 86);
    v297 = *((_QWORD *)a2 + 87);
    v217 = v195;
    sub_21421B980(v209, v210, v211, v212, v213, v214, v215, v216, v239, v241, v247, v257);
    v218 = *(_QWORD *)(a1 + 576);
    v219 = *(_QWORD *)(a1 + 584);
    v220 = *(_QWORD *)(a1 + 592);
    v221 = *(_QWORD *)(a1 + 600);
    v222 = *(_QWORD *)(a1 + 608);
    v223 = *(_QWORD *)(a1 + 616);
    v224 = *(_QWORD *)(a1 + 624);
    v225 = *(_QWORD *)(a1 + 632);
    v226 = *(_OWORD *)(a1 + 640);
    v227 = *(_OWORD *)(a1 + 656);
    *(_QWORD *)(a1 + 576) = v209;
    *(_QWORD *)(a1 + 584) = v210;
    *(_QWORD *)(a1 + 592) = v211;
    *(_QWORD *)(a1 + 600) = v212;
    *(_QWORD *)(a1 + 608) = v213;
    *(_QWORD *)(a1 + 616) = v214;
    *(_QWORD *)(a1 + 624) = v215;
    *(_QWORD *)(a1 + 632) = v216;
    *(_QWORD *)(a1 + 640) = v239;
    *(_QWORD *)(a1 + 648) = v241;
    *(_QWORD *)(a1 + 656) = v247;
    *(_QWORD *)(a1 + 664) = v257;
    *(_QWORD *)(a1 + 672) = v267;
    *(_QWORD *)(a1 + 680) = v277;
    *(_QWORD *)(a1 + 688) = v287;
    *(_QWORD *)(a1 + 696) = v297;
    *v217 = v301;
    sub_21421BA80(v218, v219, v220, v221, v222, v223, v224, v225, v226, *((uint64_t *)&v226 + 1), v227, BYTE8(v227));
  }
  return a1;
}

void *initializeWithTake for SgScales(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2C1uLL);
}

uint64_t assignWithTake for SgScales(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  if (*(unsigned __int8 *)(a1 + 104) == 255)
    goto LABEL_4;
  v4 = *(unsigned __int8 *)(a2 + 104);
  if (v4 == 255)
  {
    sub_2141E0750(a1, &qword_253F13368);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_OWORD *)(a1 + 64);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = v4 & 1;
  sub_21421BB6C(v9, v10, v11, v12, v13, v14, v15, v16, v17);
LABEL_6:
  if (*(unsigned __int8 *)(a1 + 216) == 255)
  {
LABEL_9:
    v22 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v22;
    *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
    v23 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v23;
    v24 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v24;
    goto LABEL_11;
  }
  v21 = *(unsigned __int8 *)(a2 + 216);
  if (v21 == 255)
  {
    sub_2141E0750(a1 + 112, &qword_253F13368);
    goto LABEL_9;
  }
  v25 = *(_QWORD *)(a2 + 208);
  v26 = *(_QWORD *)(a1 + 112);
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  v29 = *(_QWORD *)(a1 + 136);
  v30 = *(_QWORD *)(a1 + 144);
  v31 = *(_QWORD *)(a1 + 152);
  v32 = *(_QWORD *)(a1 + 160);
  v33 = *(_QWORD *)(a1 + 168);
  v34 = *(_OWORD *)(a1 + 176);
  v35 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v35;
  v36 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v36;
  v37 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v37;
  *(_QWORD *)(a1 + 208) = v25;
  *(_BYTE *)(a1 + 216) = v21 & 1;
  sub_21421BB6C(v26, v27, v28, v29, v30, v31, v32, v33, v34);
LABEL_11:
  if (*(unsigned __int8 *)(a1 + 320) == 255)
  {
LABEL_14:
    v39 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v39;
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    v40 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v40;
    v41 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v41;
    goto LABEL_16;
  }
  v38 = *(unsigned __int8 *)(a2 + 320);
  if (v38 == 255)
  {
    sub_2141E0750(a1 + 224, qword_253F10468);
    goto LABEL_14;
  }
  v42 = *(_QWORD *)(a1 + 224);
  v43 = *(_QWORD *)(a1 + 232);
  v44 = *(_QWORD *)(a1 + 240);
  v45 = *(_QWORD *)(a1 + 248);
  v46 = *(_QWORD *)(a1 + 256);
  v47 = *(_QWORD *)(a1 + 264);
  v48 = *(_QWORD *)(a1 + 272);
  v49 = *(_QWORD *)(a1 + 280);
  v50 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v50;
  v51 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v51;
  v52 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v52;
  *(_BYTE *)(a1 + 320) = v38 & 1;
  sub_21421B8A0(v42, v43, v44, v45, v46, v47, v48, v49);
LABEL_16:
  if (*(unsigned __int8 *)(a1 + 456) == 255)
  {
LABEL_20:
    v53 = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 440) = v53;
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    v54 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v54;
    v55 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v55;
    v56 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v56;
    goto LABEL_21;
  }
  if (*(unsigned __int8 *)(a2 + 456) == 255 || a1 != a2)
  {
    sub_2141E0750(a1 + 328, &qword_254D695C8);
    goto LABEL_20;
  }
LABEL_21:
  if (*(unsigned __int8 *)(a1 + 568) == 255)
  {
LABEL_24:
    v58 = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 544) = v58;
    *(_OWORD *)(a1 + 553) = *(_OWORD *)(a2 + 553);
    v59 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v59;
    v60 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v60;
    goto LABEL_26;
  }
  v57 = *(unsigned __int8 *)(a2 + 568);
  if (v57 == 255)
  {
    sub_2141E0750(a1 + 464, &qword_253F13368);
    goto LABEL_24;
  }
  v61 = *(_QWORD *)(a2 + 560);
  v62 = *(_QWORD *)(a1 + 464);
  v63 = *(_QWORD *)(a1 + 472);
  v64 = *(_QWORD *)(a1 + 480);
  v65 = *(_QWORD *)(a1 + 488);
  v66 = *(_QWORD *)(a1 + 496);
  v67 = *(_QWORD *)(a1 + 504);
  v68 = *(_QWORD *)(a1 + 512);
  v69 = *(_QWORD *)(a1 + 520);
  v70 = *(_OWORD *)(a1 + 528);
  v71 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v71;
  v72 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v72;
  v73 = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = v73;
  *(_QWORD *)(a1 + 560) = v61;
  *(_BYTE *)(a1 + 568) = v57 & 1;
  sub_21421BB6C(v62, v63, v64, v65, v66, v67, v68, v69, v70);
LABEL_26:
  if (*(unsigned __int8 *)(a1 + 704) != 255)
  {
    v74 = *(unsigned __int8 *)(a2 + 704);
    if (v74 != 255)
    {
      v79 = *(_QWORD *)(a1 + 576);
      v80 = *(_QWORD *)(a1 + 584);
      v81 = *(_QWORD *)(a1 + 592);
      v82 = *(_QWORD *)(a1 + 600);
      v83 = *(_QWORD *)(a1 + 608);
      v84 = *(_QWORD *)(a1 + 616);
      v85 = *(_QWORD *)(a1 + 624);
      v86 = *(_QWORD *)(a1 + 632);
      v87 = *(_OWORD *)(a1 + 640);
      v88 = *(_OWORD *)(a1 + 656);
      v89 = *(_OWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
      *(_OWORD *)(a1 + 592) = v89;
      v90 = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
      *(_OWORD *)(a1 + 624) = v90;
      v91 = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
      *(_OWORD *)(a1 + 656) = v91;
      v92 = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
      *(_OWORD *)(a1 + 688) = v92;
      *(_BYTE *)(a1 + 704) = v74 & 1;
      sub_21421BA80(v79, v80, v81, v82, v83, v84, v85, v86, v87, *((uint64_t *)&v87 + 1), v88, BYTE8(v88));
      return a1;
    }
    sub_2141E0750(a1 + 576, &qword_254D695C0);
  }
  v75 = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = v75;
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
  v76 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v76;
  v77 = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 656) = v77;
  v78 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v78;
  return a1;
}

uint64_t getEnumTagSinglePayload for SgScales(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 705))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SgScales(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 696) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_BYTE *)(result + 704) = 0;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 705) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 705) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgScales()
{
  return &type metadata for SgScales;
}

unint64_t sub_214319534()
{
  unint64_t result;

  result = qword_253F11E58;
  if (!qword_253F11E58)
  {
    result = MEMORY[0x2199CD934](&unk_21442C4FC, &type metadata for SgAnimatableData);
    atomic_store(result, (unint64_t *)&qword_253F11E58);
  }
  return result;
}

unint64_t sub_21431957C()
{
  unint64_t result;

  result = qword_253F11E50;
  if (!qword_253F11E50)
  {
    result = MEMORY[0x2199CD934](&unk_21442C54C, &type metadata for SgAnimatableData);
    atomic_store(result, (unint64_t *)&qword_253F11E50);
  }
  return result;
}

uint64_t sub_2143195C0(uint64_t a1)
{
  destroy for SgAnimatableData.Item(a1);
  return a1;
}

uint64_t sub_2143195EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  CGRect *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  double x;
  double Width;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  double y;
  double Height;
  unint64_t v35;
  unint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64[8];
  _QWORD v65[4];
  char v66;
  CGRect v67;

  *(_QWORD *)&v60 = a2;
  v59 = a5;
  v58 = type metadata accessor for SgClipRect(0);
  v8 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v10 = (CGRect *)((char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = 0;
  v12 = sub_21430F428(a1);
  swift_retain();
  sub_214315224(v12, a3, a4, (double (*)(_QWORD, double))sub_21431658C);
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_release();
  v15 = *(_QWORD *)(a1 + 16);
  v16 = MEMORY[0x24BEE4AF8];
  v62 = v8;
  v63 = a1;
  *(_QWORD *)&v61 = a3;
  if (v15)
  {
    v57 = 0;
    v65[0] = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v15, 0);
    v17 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v18 = *(_QWORD *)(v8 + 72);
    v16 = v65[0];
    v19 = v15;
    do
    {
      sub_2141FDEA0(v17, (uint64_t)v10, type metadata accessor for SgClipRect);
      x = v10->origin.x;
      Width = CGRectGetWidth(*v10);
      sub_2141DD370((uint64_t)v10, type metadata accessor for SgClipRect);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D39D4(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v65[0];
      }
      v23 = *(_QWORD *)(v16 + 16);
      v22 = *(_QWORD *)(v16 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_2141D39D4((char *)(v22 > 1), v23 + 1, 1);
        v16 = v65[0];
      }
      *(_QWORD *)(v16 + 16) = v23 + 1;
      *(double *)(v16 + 8 * v23 + 32) = x + Width;
      v17 += v18;
      --v15;
    }
    while (v15);
    v8 = v62;
    a1 = v63;
    a3 = v61;
    v15 = v19;
    v11 = v57;
  }
  swift_retain();
  sub_214315224(v16, a3, a4, (double (*)(_QWORD, double))sub_21431658C);
  v25 = v24;
  swift_bridgeObjectRelease();
  swift_release();
  v26 = sub_214310228(a1, (uint64_t)v64, type metadata accessor for SgClipRect);
  swift_retain();
  sub_214315224(v26, a3, a4, (double (*)(_QWORD, double))sub_214315378);
  v28 = v27;
  swift_bridgeObjectRelease();
  swift_release();
  v29 = MEMORY[0x24BEE4AF8];
  if (v15)
  {
    v57 = v11;
    v65[0] = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v15, 0);
    v30 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v31 = *(_QWORD *)(v8 + 72);
    v29 = v65[0];
    v32 = v15;
    do
    {
      sub_2141FDEA0(v30, (uint64_t)v10, type metadata accessor for SgClipRect);
      v67.origin.x = v10->origin.x;
      y = v10->origin.y;
      v67.size.width = v10->size.width;
      v67.size.height = v10->size.height;
      v67.origin.y = y;
      Height = CGRectGetHeight(v67);
      sub_2141DD370((uint64_t)v10, type metadata accessor for SgClipRect);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D39D4(0, *(_QWORD *)(v29 + 16) + 1, 1);
        v29 = v65[0];
      }
      v36 = *(_QWORD *)(v29 + 16);
      v35 = *(_QWORD *)(v29 + 24);
      if (v36 >= v35 >> 1)
      {
        sub_2141D39D4((char *)(v35 > 1), v36 + 1, 1);
        v29 = v65[0];
      }
      *(_QWORD *)(v29 + 16) = v36 + 1;
      *(double *)(v29 + 8 * v36 + 32) = y + Height;
      v30 += v31;
      --v15;
    }
    while (v15);
    v8 = v62;
    a1 = v63;
    a3 = v61;
    v15 = v32;
  }
  swift_retain();
  sub_214315224(v29, a3, a4, (double (*)(_QWORD, double))sub_214315378);
  v38 = v37;
  swift_bridgeObjectRelease();
  swift_release();
  v39 = sub_21430F518(a1);
  v65[0] = 1;
  memset(&v65[1], 0, 24);
  v66 = 1;
  *(double *)&v40 = sub_214314A4C(v39, v60, (uint64_t)v65);
  v60 = v41;
  v61 = v40;
  swift_bridgeObjectRelease();
  result = sub_21436EBF0();
  if (v15)
  {
    v47 = vabdd_f64(v38, v28);
    v48 = vabdd_f64(v25, v14);
    if (v38 >= v28)
      v49 = v28;
    else
      v49 = v38;
    if (v25 >= v14)
      v50 = v14;
    else
      v50 = v25;
    v51 = v58;
    v52 = a1
        + *(int *)(v58 + 24)
        + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v53 = v59;
    *v59 = v50;
    v53[1] = v49;
    v53[2] = v48;
    v53[3] = v47;
    *((_QWORD *)v53 + 4) = v43;
    *((_QWORD *)v53 + 5) = v44;
    *((_QWORD *)v53 + 6) = v45;
    *((_QWORD *)v53 + 7) = v46;
    v54 = (char *)v53 + *(int *)(v51 + 24);
    v55 = sub_214424308();
    return (*(uint64_t (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v54, v52, v55);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_214319A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (*v19)(_QWORD *@<X8>);
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  char *v72;
  unint64_t i;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  _QWORD *v79;
  _QWORD *v80;

  v64 = a3;
  v65 = a4;
  v63 = a2;
  v5 = type metadata accessor for SgGroup(0);
  v67 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F10B88);
  v74 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v66 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(&qword_253F10B90);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (unint64_t *)((char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v62 - v14);
  v16 = (char *)MEMORY[0x24BEE4AF8];
  v17 = (_QWORD *)sub_21436BC10(MEMORY[0x24BEE4AF8]);
  v80 = v17;
  v18 = *(_QWORD *)(a1 + 16);
  v68 = a1;
  swift_bridgeObjectRetain();
  v19 = 0;
  v78 = v16;
  v20 = v18;
  v21 = 0;
  v71 = v8;
  v72 = v7;
  v69 = v15;
  v70 = v13;
  for (i = v20; ; v20 = i)
  {
    if (v21 == v20)
    {
      v22 = 1;
      v21 = v20;
    }
    else
    {
      if (v21 >= v20)
        goto LABEL_42;
      v77 = v21 + 1;
      v23 = v68
          + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))
          + *(_QWORD *)(v67 + 72) * v21;
      v24 = v21;
      v25 = (uint64_t)&v66[*(int *)(v8 + 48)];
      sub_2141FDEA0(v23, v25, type metadata accessor for SgGroup);
      v26 = (uint64_t)v13 + *(int *)(v8 + 48);
      *v13 = v24;
      sub_2141FE1E0(v25, v26, type metadata accessor for SgGroup);
      v22 = 0;
      v21 = v77;
    }
    v27 = v74;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v13, v22, 1, v8);
    sub_2141E801C((uint64_t)v13, (uint64_t)v15, &qword_253F10B90);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v15, 1, v8) == 1)
    {
      swift_bridgeObjectRelease();
      v57 = v63;
      swift_bridgeObjectRetain();
      v58 = v64;
      swift_bridgeObjectRetain();
      v59 = swift_bridgeObjectRetain();
      v60 = sub_21430F618(v59, (uint64_t *)&v80, v57, v58, v65);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_2141D972C((uint64_t)v19);
      return v60;
    }
    v77 = *v15;
    sub_2141FE1E0((uint64_t)v15 + *(int *)(v8 + 48), (uint64_t)v7, type metadata accessor for SgGroup);
    v28 = *((_QWORD *)v7 + 1);
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
      break;
LABEL_2:
    sub_2141DD370((uint64_t)v7, type metadata accessor for SgGroup);
  }
  v75 = v21;
  swift_bridgeObjectRetain();
  v30 = 0x8000000000000000;
  v76 = v28;
  while (1)
  {
    v31 = *(_QWORD *)(v28 + 8 * v30 + 32);
    swift_retain();
    sub_2142E9C84(v31);
    if (v32)
      v33 = v32;
    else
      v33 = v30;
    if (!v17[2] || (sub_21433AB28(v33), (v34 & 1) == 0))
    {
      v35 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v35 = sub_214225150(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
      v37 = *((_QWORD *)v35 + 2);
      v36 = *((_QWORD *)v35 + 3);
      if (v37 >= v36 >> 1)
        v35 = sub_214225150((char *)(v36 > 1), v37 + 1, 1, v35);
      *((_QWORD *)v35 + 2) = v37 + 1;
      v78 = v35;
      *(_QWORD *)&v35[8 * v37 + 32] = v33;
    }
    swift_retain();
    sub_2141D972C((uint64_t)v19);
    v17 = v80;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v79 = v17;
    v40 = sub_21433AB28(v33);
    v41 = v17[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
      break;
    v44 = v39;
    if (v17[3] >= v43)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_2142A96E4();
        v17 = v79;
      }
    }
    else
    {
      sub_21429F6F4(v43, isUniquelyReferenced_nonNull_native);
      v17 = v79;
      v45 = sub_21433AB28(v33);
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_43;
      v40 = v45;
    }
    v80 = v17;
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v17[(v40 >> 6) + 8] |= 1 << v40;
      *(_QWORD *)(v17[6] + 8 * v40) = v33;
      *(_QWORD *)(v17[7] + 8 * v40) = MEMORY[0x24BEE4AF8];
      v47 = v17[2];
      v48 = v47 + 1;
      v49 = __OFADD__(v47, 1);
      swift_bridgeObjectRetain();
      if (v49)
        goto LABEL_41;
      v17[2] = v48;
    }
    v50 = v17[7];
    swift_bridgeObjectRelease();
    v51 = *(_QWORD **)(v50 + 8 * v40);
    v52 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v50 + 8 * v40) = v51;
    if ((v52 & 1) == 0)
    {
      v51 = sub_214225030(0, v51[2] + 1, 1, v51);
      *(_QWORD *)(v50 + 8 * v40) = v51;
    }
    v54 = v51[2];
    v53 = v51[3];
    if (v54 >= v53 >> 1)
    {
      v51 = sub_214225030((_QWORD *)(v53 > 1), v54 + 1, 1, v51);
      *(_QWORD *)(v50 + 8 * v40) = v51;
    }
    v28 = v76;
    v55 = v77;
    v51[2] = v54 + 1;
    v56 = &v51[2 * v54];
    v56[4] = v55;
    v56[5] = v31;
    swift_release();
    ++v30;
    v19 = sub_21431DA34;
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      v8 = v71;
      v7 = v72;
      v15 = v69;
      v13 = v70;
      v21 = v75;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_214319FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *@<X8>);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;

  v8 = (char *)MEMORY[0x24BEE4AF8];
  v9 = sub_21436BC10(MEMORY[0x24BEE4AF8]);
  v51 = (_QWORD *)v9;
  v47 = *(_QWORD *)(a1 + 16);
  if (v47)
  {
    v10 = (_QWORD *)v9;
    v43 = a2;
    v44 = a3;
    v45 = a4;
    v46 = a1 + 32;
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(v46 + 32 * v12 + 8);
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
        break;
      swift_bridgeObjectRetain();
LABEL_3:
      ++v12;
      swift_bridgeObjectRelease();
      if (v12 == v47)
      {
        swift_bridgeObjectRelease();
        a3 = v44;
        a4 = v45;
        a2 = v43;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v15 = 0x8000000000000000;
    v48 = v13;
    v49 = v12;
    while (1)
    {
      v16 = *(_QWORD *)(v13 + 8 * v15 + 32);
      swift_retain();
      sub_2142E9C84(v16);
      v18 = v17 ? v17 : v15;
      if (v10[2] && (sub_21433AB28(v18), (v19 & 1) != 0))
      {
        v50 = v8;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_214225150(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v21 = *((_QWORD *)v8 + 2);
        v20 = *((_QWORD *)v8 + 3);
        if (v21 >= v20 >> 1)
          v8 = sub_214225150((char *)(v20 > 1), v21 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v21 + 1;
        v50 = v8;
        *(_QWORD *)&v8[8 * v21 + 32] = v18;
        v10 = v51;
      }
      swift_retain();
      sub_2141D972C((uint64_t)v11);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v24 = sub_21433AB28(v18);
      v25 = v10[2];
      v26 = (v23 & 1) == 0;
      v27 = v25 + v26;
      if (__OFADD__(v25, v26))
        break;
      v28 = v23;
      if (v10[3] >= v27)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_2142A96E4();
      }
      else
      {
        sub_21429F6F4(v27, isUniquelyReferenced_nonNull_native);
        v29 = sub_21433AB28(v18);
        if ((v28 & 1) != (v30 & 1))
          goto LABEL_42;
        v24 = v29;
      }
      v51 = v10;
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v10[(v24 >> 6) + 8] |= 1 << v24;
        *(_QWORD *)(v10[6] + 8 * v24) = v18;
        *(_QWORD *)(v10[7] + 8 * v24) = MEMORY[0x24BEE4AF8];
        v31 = v10[2];
        v32 = v31 + 1;
        v33 = __OFADD__(v31, 1);
        swift_bridgeObjectRetain();
        if (v33)
          goto LABEL_41;
        v10[2] = v32;
      }
      v34 = v10[7];
      swift_bridgeObjectRelease();
      v35 = *(_QWORD **)(v34 + 8 * v24);
      v36 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v34 + 8 * v24) = v35;
      if ((v36 & 1) == 0)
      {
        v35 = sub_214225030(0, v35[2] + 1, 1, v35);
        *(_QWORD *)(v34 + 8 * v24) = v35;
      }
      v38 = v35[2];
      v37 = v35[3];
      if (v38 >= v37 >> 1)
      {
        v35 = sub_214225030((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
        *(_QWORD *)(v34 + 8 * v24) = v35;
      }
      v35[2] = v38 + 1;
      v39 = &v35[2 * v38];
      v12 = v49;
      v8 = v50;
      v39[4] = v49;
      v39[5] = v16;
      swift_release();
      ++v15;
      v11 = sub_21431DA34;
      --v14;
      v13 = v48;
      if (!v14)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    result = sub_214425820();
    __break(1u);
  }
  else
  {
    v11 = 0;
LABEL_39:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    v41 = sub_21430F618(v40, (uint64_t *)&v51, a2, a3, a4);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_2141D972C((uint64_t)v11);
    return v41;
  }
  return result;
}

uint64_t sub_21431A3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *@<X8>);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;

  v8 = (char *)MEMORY[0x24BEE4AF8];
  v9 = sub_21436BC10(MEMORY[0x24BEE4AF8]);
  v51 = (_QWORD *)v9;
  v47 = *(_QWORD *)(a1 + 16);
  if (v47)
  {
    v10 = (_QWORD *)v9;
    v43 = a2;
    v44 = a3;
    v45 = a4;
    v46 = a1 + 32;
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(v46 + 32 * v12 + 16);
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
        break;
      swift_bridgeObjectRetain();
LABEL_3:
      ++v12;
      swift_bridgeObjectRelease();
      if (v12 == v47)
      {
        swift_bridgeObjectRelease();
        a3 = v44;
        a4 = v45;
        a2 = v43;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v15 = 0x8000000000000000;
    v48 = v13;
    v49 = v12;
    while (1)
    {
      v16 = *(_QWORD *)(v13 + 8 * v15 + 32);
      swift_retain();
      sub_2142E9C84(v16);
      v18 = v17 ? v17 : v15;
      if (v10[2] && (sub_21433AB28(v18), (v19 & 1) != 0))
      {
        v50 = v8;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_214225150(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v21 = *((_QWORD *)v8 + 2);
        v20 = *((_QWORD *)v8 + 3);
        if (v21 >= v20 >> 1)
          v8 = sub_214225150((char *)(v20 > 1), v21 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v21 + 1;
        v50 = v8;
        *(_QWORD *)&v8[8 * v21 + 32] = v18;
        v10 = v51;
      }
      swift_retain();
      sub_2141D972C((uint64_t)v11);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v24 = sub_21433AB28(v18);
      v25 = v10[2];
      v26 = (v23 & 1) == 0;
      v27 = v25 + v26;
      if (__OFADD__(v25, v26))
        break;
      v28 = v23;
      if (v10[3] >= v27)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_2142A96E4();
      }
      else
      {
        sub_21429F6F4(v27, isUniquelyReferenced_nonNull_native);
        v29 = sub_21433AB28(v18);
        if ((v28 & 1) != (v30 & 1))
          goto LABEL_42;
        v24 = v29;
      }
      v51 = v10;
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v10[(v24 >> 6) + 8] |= 1 << v24;
        *(_QWORD *)(v10[6] + 8 * v24) = v18;
        *(_QWORD *)(v10[7] + 8 * v24) = MEMORY[0x24BEE4AF8];
        v31 = v10[2];
        v32 = v31 + 1;
        v33 = __OFADD__(v31, 1);
        swift_bridgeObjectRetain();
        if (v33)
          goto LABEL_41;
        v10[2] = v32;
      }
      v34 = v10[7];
      swift_bridgeObjectRelease();
      v35 = *(_QWORD **)(v34 + 8 * v24);
      v36 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v34 + 8 * v24) = v35;
      if ((v36 & 1) == 0)
      {
        v35 = sub_214225030(0, v35[2] + 1, 1, v35);
        *(_QWORD *)(v34 + 8 * v24) = v35;
      }
      v38 = v35[2];
      v37 = v35[3];
      if (v38 >= v37 >> 1)
      {
        v35 = sub_214225030((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
        *(_QWORD *)(v34 + 8 * v24) = v35;
      }
      v35[2] = v38 + 1;
      v39 = &v35[2 * v38];
      v12 = v49;
      v8 = v50;
      v39[4] = v49;
      v39[5] = v16;
      swift_release();
      ++v15;
      v11 = sub_21431DA34;
      --v14;
      v13 = v48;
      if (!v14)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    result = sub_214425820();
    __break(1u);
  }
  else
  {
    v11 = 0;
LABEL_39:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    v41 = sub_21430F618(v40, (uint64_t *)&v51, a2, a3, a4);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_2141D972C((uint64_t)v11);
    return v41;
  }
  return result;
}

uint64_t sub_21431A7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  void (*v8)(_QWORD *@<X8>);
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD v48[4];
  _OWORD v49[5];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55[3];

  v5 = (char *)MEMORY[0x24BEE4AF8];
  v6 = (_QWORD *)sub_21436BC10(MEMORY[0x24BEE4AF8]);
  v55[0] = (uint64_t)v6;
  v7 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  v43 = v7;
  while (1)
  {
    if (v9 == v7)
    {
      v9 = v7;
      memset(v49, 0, 72);
    }
    else
    {
      if (v9 >= v7)
        goto LABEL_43;
      sub_2141FE108((_QWORD *)(a1 + 32 + (v9 << 6)), (uint64_t)v48);
      *(_QWORD *)&v49[0] = v9;
      *(_OWORD *)((char *)v49 + 8) = v48[0];
      *(_OWORD *)((char *)&v49[1] + 8) = v48[1];
      *(_OWORD *)((char *)&v49[2] + 8) = v48[2];
      *(_OWORD *)((char *)&v49[3] + 8) = v48[3];
      ++v9;
    }
    sub_2141E801C((uint64_t)v49, (uint64_t)&v50, &qword_253F101A0);
    if (!*((_QWORD *)&v51 + 1))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = swift_bridgeObjectRetain();
      v38 = sub_21430F618(v37, v55, a2, a3, a4);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_2141D972C((uint64_t)v8);
      return v38;
    }
    v46 = v50;
    v49[3] = v54;
    v49[0] = v51;
    v49[1] = v52;
    v49[2] = v53;
    v10 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 16);
    if (v10)
      break;
LABEL_2:
    sub_2141FE470((uint64_t)v49);
  }
  v44 = v9;
  v11 = swift_bridgeObjectRetain();
  v12 = 0x8000000000000000;
  v45 = v11;
  while (1)
  {
    v13 = *(_QWORD *)(v11 + 8 * v12 + 32);
    swift_retain();
    sub_2142E9C84(v13);
    v15 = v14 ? v14 : v12;
    if (v6[2] && (sub_21433AB28(v15), (v16 & 1) != 0))
    {
      v47 = v5;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_214225150(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v18 = *((_QWORD *)v5 + 2);
      v17 = *((_QWORD *)v5 + 3);
      if (v18 >= v17 >> 1)
        v5 = sub_214225150((char *)(v17 > 1), v18 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v18 + 1;
      v47 = v5;
      *(_QWORD *)&v5[8 * v18 + 32] = v15;
    }
    swift_retain();
    sub_2141D972C((uint64_t)v8);
    v6 = (_QWORD *)v55[0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = sub_21433AB28(v15);
    v22 = v6[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    if (v6[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_2142A96E4();
    }
    else
    {
      sub_21429F6F4(v24, isUniquelyReferenced_nonNull_native);
      v26 = sub_21433AB28(v15);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_44;
      v21 = v26;
    }
    v55[0] = (uint64_t)v6;
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v6[(v21 >> 6) + 8] |= 1 << v21;
      *(_QWORD *)(v6[6] + 8 * v21) = v15;
      *(_QWORD *)(v6[7] + 8 * v21) = MEMORY[0x24BEE4AF8];
      v28 = v6[2];
      v29 = v28 + 1;
      v30 = __OFADD__(v28, 1);
      swift_bridgeObjectRetain();
      if (v30)
        goto LABEL_42;
      v6[2] = v29;
    }
    v31 = v6[7];
    swift_bridgeObjectRelease();
    v32 = *(_QWORD **)(v31 + 8 * v21);
    v33 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v31 + 8 * v21) = v32;
    if ((v33 & 1) == 0)
    {
      v32 = sub_214225030(0, v32[2] + 1, 1, v32);
      *(_QWORD *)(v31 + 8 * v21) = v32;
    }
    v35 = v32[2];
    v34 = v32[3];
    if (v35 >= v34 >> 1)
    {
      v32 = sub_214225030((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
      *(_QWORD *)(v31 + 8 * v21) = v32;
    }
    v5 = v47;
    v32[2] = v35 + 1;
    v36 = &v32[2 * v35];
    v36[4] = v46;
    v36[5] = v13;
    swift_release();
    ++v12;
    v8 = sub_21431DA34;
    --v10;
    v11 = v45;
    if (!v10)
    {
      swift_bridgeObjectRelease();
      v7 = v43;
      v9 = v44;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_21431AC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  double v14;
  double v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  uint64_t result;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[8];
  _BYTE v72[16];
  _QWORD v73[4];
  char v74;

  v65 = a2;
  v67 = a5;
  v66 = type metadata accessor for SgRectangle(0);
  v8 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v10 = (double *)((char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = 0;
  v13 = sub_214310228(a1, (uint64_t)v72, v12);
  swift_retain();
  sub_214315224(v13, a3, a4, (double (*)(_QWORD, double))sub_21431658C);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_release();
  v16 = *(_QWORD *)(a1 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  v69 = a1;
  v70 = a3;
  *(_QWORD *)&v68 = v8;
  if (v16)
  {
    *(_QWORD *)&v64 = 0;
    v73[0] = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v16, 0);
    v18 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v19 = *(_QWORD *)(v8 + 72);
    v17 = v73[0];
    v20 = v16;
    do
    {
      sub_2141FDEA0(v18, (uint64_t)v10, type metadata accessor for SgRectangle);
      v21 = v10[1];
      v22 = v10[3];
      sub_2141DD370((uint64_t)v10, type metadata accessor for SgRectangle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D39D4(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v73[0];
      }
      v24 = *(_QWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_2141D39D4((char *)(v23 > 1), v24 + 1, 1);
        v17 = v73[0];
      }
      *(_QWORD *)(v17 + 16) = v24 + 1;
      *(double *)(v17 + 8 * v24 + 32) = v21 + v22;
      v18 += v19;
      --v16;
    }
    while (v16);
    a1 = v69;
    a3 = v70;
    v8 = v68;
    v16 = v20;
    v11 = v64;
  }
  swift_retain();
  sub_214315224(v17, a3, a4, (double (*)(_QWORD, double))sub_21431658C);
  v26 = v25;
  swift_bridgeObjectRelease();
  swift_release();
  v27 = sub_214310418(a1, (uint64_t)v71, type metadata accessor for SgRectangle);
  swift_retain();
  sub_214315224(v27, a3, a4, (double (*)(_QWORD, double))sub_214315378);
  v29 = v28;
  swift_bridgeObjectRelease();
  swift_release();
  v30 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    *(_QWORD *)&v64 = v11;
    v73[0] = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v16, 0);
    v31 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v32 = *(_QWORD *)(v8 + 72);
    v30 = v73[0];
    v33 = v16;
    do
    {
      sub_2141FDEA0(v31, (uint64_t)v10, type metadata accessor for SgRectangle);
      v34 = v10[2];
      v35 = v10[4];
      sub_2141DD370((uint64_t)v10, type metadata accessor for SgRectangle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D39D4(0, *(_QWORD *)(v30 + 16) + 1, 1);
        v30 = v73[0];
      }
      v37 = *(_QWORD *)(v30 + 16);
      v36 = *(_QWORD *)(v30 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_2141D39D4((char *)(v36 > 1), v37 + 1, 1);
        v30 = v73[0];
      }
      *(_QWORD *)(v30 + 16) = v37 + 1;
      *(double *)(v30 + 8 * v37 + 32) = v34 + v35;
      v31 += v32;
      --v16;
    }
    while (v16);
    a1 = v69;
    a3 = v70;
    v8 = v68;
    v16 = v33;
  }
  swift_retain();
  sub_214315224(v30, a3, a4, (double (*)(_QWORD, double))sub_214315378);
  v39 = v38;
  swift_bridgeObjectRelease();
  result = swift_release();
  if (v16)
  {
    v41 = *(_QWORD *)(a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
    if (v26 >= v15)
      v42 = v15;
    else
      v42 = v26;
    if (v39 >= v29)
      v43 = v29;
    else
      v43 = v39;
    v44 = vabdd_f64(v26, v15);
    v45 = vabdd_f64(v39, v29);
    v46 = sub_21430F984(a1);
    v73[0] = 1;
    memset(&v73[1], 0, 24);
    v74 = 1;
    v47 = v65;
    *(double *)&v48 = sub_214314A4C(v46, v65, (uint64_t)v73);
    v68 = v48;
    v64 = v49;
    swift_bridgeObjectRelease();
    sub_21436EBF0();
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v56;
    v58 = sub_21430FA84(a1);
    v59 = v66;
    v60 = v67;
    sub_21431DA44(v58, v47, a3, v67 + *(int *)(v66 + 44));
    swift_bridgeObjectRelease();
    v61 = v60 + *(int *)(v59 + 40);
    v62 = *MEMORY[0x24BDEEB68];
    v63 = sub_214424308();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v61, v62, v63);
    *(_QWORD *)v60 = v41;
    *(double *)(v60 + 8) = v42;
    *(double *)(v60 + 16) = v43;
    *(double *)(v60 + 24) = v44;
    *(double *)(v60 + 32) = v45;
    *(_QWORD *)(v60 + 40) = v51;
    *(_QWORD *)(v60 + 48) = v53;
    *(_QWORD *)(v60 + 56) = v55;
    *(_QWORD *)(v60 + 64) = v57;
    *(_QWORD *)(v60 + *(int *)(v59 + 48)) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21431B140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;

  v10 = type metadata accessor for SgVectorized(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for AnyVectorizedRenderer(0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v31 = (_QWORD *)a3;
  sub_2141FDEA0(a1+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * (v17 - 1), (uint64_t)v16, type metadata accessor for AnyVectorizedRenderer);
  sub_214252B84();
  v3 = v18;
  v4 = sub_21431DCF4(1, a1, (void (*)(_QWORD))type metadata accessor for AnyVectorizedRenderer);
  v5 = v19;
  v6 = v20;
  a3 = v21;
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_4:
    sub_214397D48(v4, v5, v6, a3);
    v23 = v22;
    goto LABEL_11;
  }
  v30 = a2;
  sub_2144257A8();
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  v24 = swift_dynamicCastClass();
  if (!v24)
  {
    swift_unknownObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
  }
  v25 = *(_QWORD *)(v24 + 16);
  swift_release();
  if (__OFSUB__(a3 >> 1, v6))
    goto LABEL_13;
  if (v25 != (a3 >> 1) - v6)
  {
LABEL_14:
    swift_unknownObjectRelease();
    a2 = v30;
    goto LABEL_4;
  }
  v23 = swift_dynamicCastClass();
  a2 = v30;
  if (!v23)
  {
    swift_unknownObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
  }
LABEL_11:
  swift_unknownObjectRelease();
  *v12 = v3;
  v12[1] = v23;
  v12[2] = a2;
  v12[3] = 0;
  sub_2141FE1E0((uint64_t)v16, (uint64_t)v12 + *(int *)(v10 + 32), type metadata accessor for AnyVectorizedRenderer);
  v26 = (_QWORD *)((char *)v12 + *(int *)(v10 + 36));
  *v26 = 0;
  v26[1] = 0;
  v27 = swift_allocBox();
  sub_2141FE1E0((uint64_t)v12, v28, type metadata accessor for SgVectorized);
  *v31 = v27;
  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t sub_21431B398@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t result;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[8];
  _BYTE v59[8];
  _BYTE v60[8];
  _BYTE v61[24];

  v56 = a3;
  v57 = a4;
  v8 = (int *)type metadata accessor for SgSector(0);
  v55 = *((_QWORD *)v8 - 1);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_214310228(a1, (uint64_t)v61, type metadata accessor for SgSector);
  v15 = sub_214314848(v14, a2, 1, 1);
  swift_bridgeObjectRelease();
  v16 = sub_214310418(a1, (uint64_t)v60, type metadata accessor for SgSector);
  v17 = sub_214314848(v16, a2, 1, 1);
  swift_bridgeObjectRelease();
  v18 = sub_214310320(a1, (uint64_t)v59, type metadata accessor for SgSector);
  v19 = sub_214314848(v18, a2, 1, 1);
  swift_bridgeObjectRelease();
  v20 = sub_214310510(a1, (uint64_t)v58, type metadata accessor for SgSector);
  v21 = sub_214314848(v20, a2, 1, 1);
  swift_bridgeObjectRelease();
  v22 = sub_21430FBEC(a1);
  v23 = sub_214314848(v22, a2, 1, 1);
  swift_bridgeObjectRelease();
  v24 = sub_21430FCDC(a1);
  v25 = sub_214314848(v24, a2, 1, 1);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    v27 = v55;
    v52 = *(_QWORD *)(a1 + 16);
    v28 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)));
    v53 = *v28;
    v29 = sub_21430FDD0(a1);
    v30 = sub_214314848(v29, a2, 1, 1);
    swift_bridgeObjectRelease();
    v31 = sub_21430FEC4(a1);
    v32 = sub_214314848(v31, a2, 1, 1);
    swift_bridgeObjectRelease();
    v33 = sub_21430FFB8(a1);
    v54 = v13;
    sub_21431DA44(v33, a2, v56, (uint64_t)v13);
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v27 + 72);
    swift_bridgeObjectRetain();
    v35 = v52 - 1;
    do
    {
      sub_2141FDEA0((uint64_t)v28, (uint64_t)v10, type metadata accessor for SgSector);
      v36 = v10[v8[14]];
      sub_2141DD370((uint64_t)v10, type metadata accessor for SgSector);
      v38 = v35-- != 0;
      if (v36 != 1)
        break;
      v28 = (uint64_t *)((char *)v28 + v34);
    }
    while (v38);
    swift_bridgeObjectRelease();
    v39 = (v19 + v21) * 0.5;
    v40 = vabdd_f64(v21, v19) * 0.5;
    v41 = (v15 + v17) * 0.5;
    v42 = vabdd_f64(v17, v15);
    v43 = v41 - v42 * 0.5;
    v44 = v41 + v42 * 0.5;
    v45 = v39 - v40;
    v46 = v39 + v40;
    v47 = a5 + v8[11];
    v48 = *MEMORY[0x24BDEEB68];
    v49 = sub_214424308();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v47, v48, v49);
    *(_QWORD *)a5 = v53;
    *(double *)(a5 + 8) = v43;
    *(double *)(a5 + 16) = v44;
    *(double *)(a5 + 24) = v45;
    *(double *)(a5 + 32) = v46;
    *(double *)(a5 + 40) = v30;
    *(double *)(a5 + 48) = v32;
    result = sub_2141FE1E0((uint64_t)v54, a5 + v8[12], (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
    v50 = (double *)(a5 + v8[13]);
    *v50 = v23;
    v50[1] = v25;
    *(_BYTE *)(a5 + v8[14]) = v36;
    *(_QWORD *)(a5 + v8[15]) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21431B774@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43[8];
  __int128 v44;
  uint64_t v45;

  v39 = a3;
  v40 = a4;
  v8 = type metadata accessor for SgPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  v41 = v10;
  if (v13)
  {
    v38 = a2;
    *(_QWORD *)&v44 = MEMORY[0x24BEE4AF8];
    sub_2141D3D20(0, v13, 0);
    v15 = *(unsigned __int8 *)(v9 + 80);
    v36 = v9;
    v37 = a1;
    v16 = a1 + ((v15 + 32) & ~v15);
    v17 = *(_QWORD *)(v9 + 72);
    v14 = v44;
    v18 = v13;
    v19 = v13;
    do
    {
      sub_2141FDEA0(v16, (uint64_t)v12, type metadata accessor for SgPoint);
      v42 = *(_OWORD *)(v12 + 8);
      sub_2141DD370((uint64_t)v12, type metadata accessor for SgPoint);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3D20(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v44;
      }
      v21 = *(_QWORD *)(v14 + 16);
      v20 = *(_QWORD *)(v14 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_2141D3D20((char *)(v20 > 1), v21 + 1, 1);
        v14 = v44;
      }
      *(_QWORD *)(v14 + 16) = v21 + 1;
      *(_OWORD *)(v14 + 16 * v21 + 32) = v42;
      v16 += v17;
      --v19;
    }
    while (v19);
    a1 = v37;
    a2 = v38;
    v9 = v36;
    v13 = v18;
  }
  *(double *)&v22 = sub_214314C98(v14, a2, 1, 0, 1);
  v42 = v22;
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  v44 = v42;
  swift_getAtKeyPath();
  swift_release();
  v23 = v45;
  swift_getKeyPath();
  v44 = v42;
  swift_getAtKeyPath();
  result = swift_release();
  if (v13)
  {
    v25 = v45;
    v26 = (_QWORD *)(a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
    *(_QWORD *)&v42 = *v26;
    v27 = sub_214310120(a1);
    v28 = sub_2143256C8(v27, a2);
    v38 = v29;
    v31 = v30;
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v26 + *(_QWORD *)(v9 + 72) * (v13 - 1) + 48;
    v33 = sub_214310608(a1, (uint64_t)v43, type metadata accessor for SgPoint);
    v34 = v41;
    sub_21431DA44(v33, a2, v39, a5 + *(int *)(v41 + 36));
    swift_bridgeObjectRelease();
    *(_QWORD *)a5 = v42;
    *(_QWORD *)(a5 + 8) = v23;
    *(_QWORD *)(a5 + 16) = v25;
    v35 = v38;
    *(_QWORD *)(a5 + 24) = v28;
    *(_QWORD *)(a5 + 32) = v35;
    *(_BYTE *)(a5 + 40) = v31 & 1;
    result = sub_2142AAEB4(v32, a5 + 48);
    *(_QWORD *)(a5 + *(int *)(v34 + 40)) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21431BA58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  _BYTE v29[8];
  _BYTE v30[8];
  _BYTE v31[16];

  v10 = sub_214310228(a1, (uint64_t)v31, type metadata accessor for SgRule);
  swift_retain();
  sub_214315224(v10, a3, a4, (double (*)(_QWORD, double))sub_21431658C);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  v13 = sub_214310320(a1, (uint64_t)v30, type metadata accessor for SgRule);
  swift_retain();
  sub_214315224(v13, a3, a4, (double (*)(_QWORD, double))sub_21431658C);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_release();
  v16 = sub_214310418(a1, (uint64_t)v29, type metadata accessor for SgRule);
  swift_retain();
  sub_214315224(v16, a3, a4, (double (*)(_QWORD, double))sub_214315378);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_release();
  v19 = sub_214310510(a1, (uint64_t)v28, type metadata accessor for SgRule);
  swift_retain();
  sub_214315224(v19, a3, a4, (double (*)(_QWORD, double))sub_214315378);
  v21 = v20;
  swift_bridgeObjectRelease();
  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
  {
    v23 = type metadata accessor for SgRule(0);
    v24 = *(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80);
    v25 = *(_QWORD *)(a1 + ((v24 + 32) & ~v24));
    v26 = sub_214310608(a1, (uint64_t)&v27, type metadata accessor for SgRule);
    sub_21431DA44(v26, a2, a3, (uint64_t)a5 + *(int *)(v23 + 36));
    result = swift_bridgeObjectRelease();
    *a5 = v25;
    a5[1] = v12;
    a5[2] = v18;
    a5[3] = v15;
    a5[4] = v21;
    *(_QWORD *)((char *)a5 + *(int *)(v23 + 40)) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21431BC5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int8 *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int8x16_t v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int32x2_t v59;
  int64x2_t v60;
  int8x16_t *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD *v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _QWORD *v94;
  char *v95;
  __int128 v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t *v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t v124;
  _QWORD *v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  _BOOL8 v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  uint64_t v142;
  _BOOL8 v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unsigned __int8 v156;
  unint64_t *v157;
  uint64_t (*v158)();
  unint64_t *v159;
  char v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char **v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t (*v172)(uint64_t *);
  uint64_t v173;
  int64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  int v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  char *v207;
  char v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t result;
  uint64_t v214;
  uint64_t v215;
  int8x16_t v216;
  _QWORD *v217;
  _QWORD *v218;
  unint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _BYTE v235[24];
  _QWORD *v236;
  __int128 v237;
  _BYTE *v238;
  _QWORD *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  _OWORD v244[3];
  _QWORD *v245;
  _QWORD v246[5];
  unsigned __int8 v247;
  _QWORD *v248;
  __int128 v249;
  _BYTE v250[48];
  __int128 v251;
  unsigned __int8 v252;
  unint64_t v253;
  char v254[24];

  v225 = a5;
  v9 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v216.i8[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_21431090C(a1, (uint64_t)v254, type metadata accessor for SgLine);
  v229 = a3;
  v230 = 0;
  v224 = v11;
  v228 = a2;
  v226 = a4;
  sub_21431DA44(v12, a2, a3, (uint64_t)v11);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_154;
  v14 = type metadata accessor for SgLine(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v222 = *(_QWORD *)(v16 + 24);
  v223 = v14;
  v221 = *(unsigned __int8 *)(v16 + 32);
  v227 = *(unsigned __int8 *)(v16 + 16);
  v248 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_2141D3DB4(0, v13, 0);
  v17 = v248;
  v18 = *(_QWORD *)(v15 + 72);
  v19 = (uint64_t *)(v16 + 8);
  do
  {
    v20 = *v19;
    swift_beginAccess();
    v21 = *(_QWORD *)(v20 + 16);
    v248 = v17;
    v23 = v17[2];
    v22 = v17[3];
    swift_bridgeObjectRetain();
    v24 = v23;
    if (v23 >= v22 >> 1)
    {
      sub_2141D3DB4((_QWORD *)(v22 > 1), v23 + 1, 1);
      v24 = v23;
      v17 = v248;
    }
    v17[2] = v23 + 1;
    v17[v24 + 4] = v21;
    v19 = (uint64_t *)((char *)v19 + v18);
    --v13;
  }
  while (v13);
  v25 = v17[4];
  if (v24)
  {
    v26 = *(_QWORD *)(v25 + 16);
    v27 = v17[5];
    if (*(_QWORD *)(v27 + 16) == v26)
    {
      v28 = v17 + 6;
      v29 = v24 - 1;
      do
      {
        if (v26 && *(_QWORD *)(v27 + 96 * v26 - 96 + 32) != *(_QWORD *)(v25 + 32 + 96 * v26 - 96))
          break;
        if (!v29)
          goto LABEL_14;
        v30 = *v28++;
        v27 = v30;
        --v29;
      }
      while (*(_QWORD *)(v30 + 16) == v26);
    }
    v231 = v17 + 4;
    v232 = v24;
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_14:
    v231 = v17 + 4;
    v232 = v24;
    type metadata accessor for SgLine.Points();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = MEMORY[0x24BEE4AF8];
    v236 = *(_QWORD **)(v25 + 16);
    if (!v236)
    {
LABEL_147:
      swift_bridgeObjectRelease();
      v214 = v223;
      v215 = v225;
      result = sub_2141FE1E0((uint64_t)v224, v225 + *(int *)(v223 + 32), (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
      *(_QWORD *)v215 = 0;
      *(_QWORD *)(v215 + 8) = v18;
      *(_BYTE *)(v215 + 16) = v227;
      *(_QWORD *)(v215 + 24) = v222;
      *(_BYTE *)(v215 + 32) = v221;
      *(_QWORD *)(v215 + *(int *)(v214 + 36)) = 0;
      return result;
    }
    *(_QWORD *)&v237 = v25 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v31 = 0;
    *(_QWORD *)v235 = v18 + 16;
    *(_QWORD *)&v235[8] = v250;
    v234 = (uint64_t)&v241 + 8;
    v217 = v17 + 4;
    v218 = v17 + 5;
    v219 = v18;
    v220 = v25;
    while (1)
    {
      if (v31 >= *(_QWORD *)(v25 + 16))
        goto LABEL_155;
      v239 = (_QWORD *)v31;
      v32 = 96 * v31;
      v33 = sub_2143035C0(v237 + 96 * v31, (uint64_t)&v248);
      v34 = v232;
      if (v232)
        break;
LABEL_22:
      v238 = v248;
      MEMORY[0x24BDAC7A8](v33);
      *((_QWORD *)&v216 - 2) = v36;
      v37 = v36;
      swift_getKeyPath();
      swift_retain();
      v38 = v230;
      v39 = sub_2143259D0((uint64_t)v17);
      swift_release_n();
      v40 = v226;
      swift_retain();
      v41 = v229;
      sub_214315224(v39, v229, v40, (double (*)(_QWORD, double))sub_21431658C);
      v43 = v42;
      swift_bridgeObjectRelease();
      v44 = swift_release();
      MEMORY[0x24BDAC7A8](v44);
      *((_QWORD *)&v216 - 2) = v37;
      swift_getKeyPath();
      swift_retain();
      v45 = sub_2143259D0((uint64_t)v17);
      v230 = v38;
      swift_release_n();
      swift_retain();
      sub_214315224(v45, v41, v40, (double (*)(_QWORD, double))sub_214315378);
      v47 = v46;
      swift_bridgeObjectRelease();
      swift_release();
      sub_2141E070C(*(uint64_t *)&v235[8], (uint64_t)v246, &qword_253F12208);
      if (v252 == 255)
      {
        v63 = *((_QWORD *)&v251 + 1);
        v62 = v251;
        v64 = -1;
      }
      else
      {
        v48 = v17[2];
        if (v48)
        {
          v245 = (_QWORD *)MEMORY[0x24BEE4AF8];
          sub_2141D3D3C(0, v48, 0);
          v49 = (uint64_t)v245;
          v50 = v217;
          v51 = v239;
          do
          {
            if ((unint64_t)v51 >= *(_QWORD *)(*v50 + 16))
              goto LABEL_152;
            v52 = v17;
            v53 = *v50 + v32;
            v54 = *(int8x16_t *)(v53 + 104);
            v55 = *(unsigned __int8 *)(v53 + 120);
            v56 = v55 != 255;
            v245 = (_QWORD *)v49;
            v58 = *(_QWORD *)(v49 + 16);
            v57 = *(_QWORD *)(v49 + 24);
            if (v58 >= v57 >> 1)
            {
              v216 = v54;
              sub_2141D3D3C((char *)(v57 > 1), v58 + 1, 1);
              v54 = v216;
              v51 = v239;
              v49 = (uint64_t)v245;
            }
            v59 = vdup_n_s32(v56);
            v60.i64[0] = v59.u32[0];
            v60.i64[1] = v59.u32[1];
            *(_QWORD *)(v49 + 16) = v58 + 1;
            v61 = (int8x16_t *)(v49 + 24 * v58);
            v61[2] = vandq_s8(v54, (int8x16_t)vcltzq_s64(vshlq_n_s64(v60, 0x3FuLL)));
            v61[3].i8[0] = v56 & v55;
            ++v50;
            --v48;
            v17 = v52;
          }
          while (v48);
        }
        else
        {
          v49 = MEMORY[0x24BEE4AF8];
        }
        v62 = sub_2143256C8(v49, v228);
        v63 = v65;
        v67 = v66;
        swift_bridgeObjectRelease();
        v64 = v67 & 1;
      }
      *(_QWORD *)&v240 = v238;
      *((_QWORD *)&v240 + 1) = v43;
      *(_QWORD *)&v241 = v47;
      sub_2141E801C((uint64_t)v246, v234, &qword_253F12208);
      *((_QWORD *)&v244[0] + 1) = v62;
      *(_QWORD *)&v244[1] = v63;
      BYTE8(v244[1]) = v64;
      v68 = *(char ***)v235;
      v69 = **(char ***)v235;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v68 = v69;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v69 = sub_21422449C(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
        *v68 = v69;
      }
      v18 = v219;
      v25 = v220;
      v72 = *((_QWORD *)v69 + 2);
      v71 = *((_QWORD *)v69 + 3);
      v73 = v239;
      if (v72 >= v71 >> 1)
      {
        v80 = sub_21422449C((char *)(v71 > 1), v72 + 1, 1, v69);
        v73 = v239;
        v69 = v80;
        *v68 = v80;
      }
      *((_QWORD *)v69 + 2) = v72 + 1;
      v74 = &v69[96 * v72];
      v75 = v241;
      *((_OWORD *)v74 + 2) = v240;
      *((_OWORD *)v74 + 3) = v75;
      v76 = v242;
      v77 = v243;
      v78 = v244[0];
      *(_OWORD *)(v74 + 105) = *(_OWORD *)((char *)v244 + 9);
      *((_OWORD *)v74 + 5) = v77;
      *((_OWORD *)v74 + 6) = v78;
      *((_OWORD *)v74 + 4) = v76;
      v79 = (_QWORD *)((char *)v73 + 1);
      sub_2143035F4((uint64_t)&v248);
      v31 = (unint64_t)v79;
      if (v79 == v236)
      {
LABEL_146:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_147;
      }
    }
    v35 = v218;
    while (1)
    {
      if ((unint64_t)v239 >= *(_QWORD *)(*v35 + 16))
        goto LABEL_151;
      if (*(_QWORD **)(*v35 + v32 + 32) != v248)
        break;
      ++v35;
      if (!--v34)
        goto LABEL_22;
    }
    sub_2143035F4((uint64_t)&v248);
    swift_release();
    swift_bridgeObjectRelease();
  }
  v81 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v82 = (_QWORD *)sub_21436BC1C(MEMORY[0x24BEE4AF8]);
  v253 = sub_21436BC28(v81);
  v236 = (_QWORD *)sub_21436BD2C((uint64_t)v81);
  v83 = 0;
  v238 = v250;
  v237 = xmmword_214426EF0;
  v85 = v231;
  v84 = v232;
  v233 = v17;
  do
  {
    if (v83 >= v17[2])
      goto LABEL_150;
    v87 = v85[v83];
    v88 = *(_QWORD *)(v87 + 16);
    if (v88)
    {
      v239 = (_QWORD *)v83;
      v89 = v87 + 32;
      v234 = v87;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_2143035C0(v89, (uint64_t)&v248);
        v91 = (uint64_t)v248;
        if (v82[2])
        {
          v92 = sub_21433AB28(v248);
          if ((v93 & 1) != 0)
          {
            v94 = (_QWORD *)(v82[7] + 16 * v92);
            v95 = (char *)v94[1];
            *(_QWORD *)&v235[8] = *v94;
            v96 = v249;
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v95 = sub_214225440(0, *((_QWORD *)v95 + 2) + 1, 1, v95);
            v98 = *((_QWORD *)v95 + 2);
            v97 = *((_QWORD *)v95 + 3);
            if (v98 >= v97 >> 1)
              v95 = sub_214225440((char *)(v97 > 1), v98 + 1, 1, v95);
            *((_QWORD *)v95 + 2) = v98 + 1;
            v99 = &v95[24 * v98];
            *((_QWORD *)v99 + 4) = v239;
            *(_OWORD *)(v99 + 40) = v96;
            v100 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v240 = v82;
            v102 = sub_21433AB28(v91);
            v103 = v82[2];
            v104 = (v101 & 1) == 0;
            v105 = v103 + v104;
            if (__OFADD__(v103, v104))
              goto LABEL_142;
            v18 = v101;
            if (v82[3] >= v105)
            {
              if ((v100 & 1) != 0)
              {
                v82 = (_QWORD *)v240;
                if ((v101 & 1) == 0)
                  goto LABEL_99;
              }
              else
              {
                sub_2142A9A58();
                v82 = (_QWORD *)v240;
                if ((v18 & 1) == 0)
                  goto LABEL_99;
              }
            }
            else
            {
              sub_21429FC80(v105, v100);
              v106 = sub_21433AB28(v91);
              if ((v18 & 1) != (v107 & 1))
                goto LABEL_158;
              v102 = v106;
              v82 = (_QWORD *)v240;
              if ((v18 & 1) == 0)
              {
LABEL_99:
                v82[(v102 >> 6) + 8] |= 1 << v102;
                *(_QWORD *)(v82[6] + 8 * v102) = v91;
                v152 = (_QWORD *)(v82[7] + 16 * v102);
                *v152 = *(_QWORD *)&v235[8];
                v152[1] = v95;
                v153 = v82[2];
                v121 = __OFADD__(v153, 1);
                v154 = v153 + 1;
                if (v121)
                  goto LABEL_145;
                v82[2] = v154;
                goto LABEL_101;
              }
            }
            v118 = (_QWORD *)(v82[7] + 16 * v102);
            swift_bridgeObjectRelease();
            *v118 = *(_QWORD *)&v235[8];
            v118[1] = v95;
LABEL_101:
            swift_bridgeObjectRelease();
            sub_2141E070C((uint64_t)v238, (uint64_t)&v240, &qword_253F12208);
            v155 = BYTE8(v242);
            sub_2141E0750((uint64_t)&v240, &qword_253F12208);
            if (v155 != 255)
            {
              v156 = v252;
              if (v252 != 255)
              {
                *(_OWORD *)&v235[8] = v251;
                v158 = sub_2143121BC(&v240, (uint64_t)v248);
                v18 = *v157;
                if (*v157)
                {
                  v159 = v157;
                  v160 = swift_isUniquelyReferenced_nonNull_native();
                  *v159 = v18;
                  if ((v160 & 1) == 0)
                  {
                    v18 = (unint64_t)sub_214225348(0, *(_QWORD *)(v18 + 16) + 1, 1, (char *)v18);
                    *v159 = v18;
                  }
                  v162 = *(_QWORD *)(v18 + 16);
                  v161 = *(_QWORD *)(v18 + 24);
                  if (v162 >= v161 >> 1)
                  {
                    v18 = (unint64_t)sub_214225348((char *)(v161 > 1), v162 + 1, 1, (char *)v18);
                    *v159 = v18;
                  }
                  *(_QWORD *)(v18 + 16) = v162 + 1;
                  v163 = v18 + 32 * v162;
                  *(_OWORD *)(v163 + 32) = *(_OWORD *)&v235[8];
                  *(_BYTE *)(v163 + 48) = v156 & 1;
                  *(_QWORD *)(v163 + 56) = v239;
                }
                ((void (*)(__int128 *, _QWORD))v158)(&v240, 0);
              }
            }
            goto LABEL_49;
          }
        }
        sub_2141D8BF8(&qword_253F101C8);
        v108 = swift_allocObject();
        *(_OWORD *)(v108 + 16) = v237;
        *(_QWORD *)(v108 + 32) = v239;
        *(_OWORD *)(v108 + 40) = v249;
        v109 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v240 = v82;
        v111 = sub_21433AB28(v91);
        v112 = v82[2];
        v113 = (v110 & 1) == 0;
        v114 = v112 + v113;
        if (__OFADD__(v112, v113))
        {
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        v18 = v110;
        if (v82[3] >= v114)
        {
          if ((v109 & 1) != 0)
          {
            v82 = (_QWORD *)v240;
            if ((v110 & 1) != 0)
              goto LABEL_69;
          }
          else
          {
            sub_2142A9A58();
            v82 = (_QWORD *)v240;
            if ((v18 & 1) != 0)
              goto LABEL_69;
          }
        }
        else
        {
          sub_21429FC80(v114, v109);
          v115 = sub_21433AB28(v91);
          if ((v18 & 1) != (v116 & 1))
            goto LABEL_158;
          v111 = v115;
          v82 = (_QWORD *)v240;
          if ((v18 & 1) != 0)
          {
LABEL_69:
            v117 = (uint64_t *)(v82[7] + 16 * v111);
            swift_bridgeObjectRelease();
            *v117 = v91;
            v117[1] = v108;
            goto LABEL_76;
          }
        }
        v82[(v111 >> 6) + 8] |= 1 << v111;
        *(_QWORD *)(v82[6] + 8 * v111) = v91;
        v119 = (uint64_t *)(v82[7] + 16 * v111);
        *v119 = v91;
        v119[1] = v108;
        v120 = v82[2];
        v121 = __OFADD__(v120, 1);
        v122 = v120 + 1;
        if (v121)
          goto LABEL_141;
        v82[2] = v122;
LABEL_76:
        swift_bridgeObjectRelease();
        sub_2141E070C((uint64_t)v238, (uint64_t)v246, &qword_253F12208);
        if (v247 == 255)
        {
          sub_2143035F4((uint64_t)&v248);
          sub_2141E0750((uint64_t)v246, &qword_253F12208);
          goto LABEL_50;
        }
        sub_2142AAEF0((uint64_t)v246, (uint64_t)&v240);
        v123 = v252;
        if (v252 == 255)
          goto LABEL_48;
        *(_OWORD *)v235 = v251;
        v124 = (uint64_t)v248;
        sub_2142AAEB4((uint64_t)&v240, (uint64_t)v246);
        v125 = v236;
        v18 = swift_isUniquelyReferenced_nonNull_native();
        v245 = v125;
        v127 = sub_21433AB28(v124);
        v128 = v125[2];
        v129 = (v126 & 1) == 0;
        v130 = v128 + v129;
        if (__OFADD__(v128, v129))
          goto LABEL_143;
        v131 = v126;
        if (v125[3] >= v130)
        {
          if ((v18 & 1) == 0)
            sub_2142A9894();
        }
        else
        {
          sub_21429F9BC(v130, v18);
          v132 = sub_21433AB28(v124);
          if ((v131 & 1) != (v133 & 1))
            goto LABEL_158;
          v127 = v132;
        }
        v236 = v245;
        if ((v131 & 1) != 0)
        {
          sub_214326A1C((uint64_t)v246, v245[7] + 48 * v127);
        }
        else
        {
          v245[(v127 >> 6) + 8] |= 1 << v127;
          *(_QWORD *)(v236[6] + 8 * v127) = v124;
          sub_2142AAEF0((uint64_t)v246, v236[7] + 48 * v127);
          v134 = v236[2];
          v121 = __OFADD__(v134, 1);
          v135 = v134 + 1;
          if (v121)
          {
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            sub_214425820();
            __break(1u);
LABEL_159:
            result = swift_release();
            __break(1u);
            return result;
          }
          v236[2] = v135;
        }
        swift_bridgeObjectRelease();
        v136 = (uint64_t)v248;
        sub_2141D8BF8(&qword_254D69810);
        v137 = swift_allocObject();
        *(_OWORD *)(v137 + 16) = v237;
        v138 = *(_QWORD *)&v235[8];
        *(_QWORD *)(v137 + 32) = *(_QWORD *)v235;
        *(_QWORD *)(v137 + 40) = v138;
        *(_BYTE *)(v137 + 48) = v123 & 1;
        *(_QWORD *)(v137 + 56) = v239;
        v139 = v253;
        v140 = swift_isUniquelyReferenced_nonNull_native();
        v246[0] = v139;
        v18 = sub_21433AB28(v136);
        v142 = *(_QWORD *)(v139 + 16);
        v143 = (v141 & 1) == 0;
        v144 = v142 + v143;
        if (__OFADD__(v142, v143))
          goto LABEL_144;
        v145 = v141;
        if (*(_QWORD *)(v139 + 24) >= v144)
        {
          if ((v140 & 1) != 0)
          {
            v148 = (_QWORD *)v246[0];
            if ((v141 & 1) == 0)
              goto LABEL_96;
          }
          else
          {
            sub_2142A96F0();
            v148 = (_QWORD *)v246[0];
            if ((v145 & 1) == 0)
              goto LABEL_96;
          }
        }
        else
        {
          sub_21429F700(v144, v140);
          v146 = sub_21433AB28(v136);
          if ((v145 & 1) != (v147 & 1))
            goto LABEL_158;
          v18 = v146;
          v148 = (_QWORD *)v246[0];
          if ((v145 & 1) == 0)
          {
LABEL_96:
            v148[(v18 >> 6) + 8] |= 1 << v18;
            v149 = 8 * v18;
            *(_QWORD *)(v148[6] + v149) = v136;
            *(_QWORD *)(v148[7] + v149) = v137;
            v150 = v148[2];
            v121 = __OFADD__(v150, 1);
            v151 = v150 + 1;
            if (v121)
              goto LABEL_149;
            v148[2] = v151;
            goto LABEL_47;
          }
        }
        v90 = v148[7];
        v18 *= 8;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v90 + v18) = v137;
LABEL_47:
        v253 = (unint64_t)v148;
        swift_bridgeObjectRelease();
LABEL_48:
        sub_21420D730((uint64_t)&v240);
LABEL_49:
        sub_2143035F4((uint64_t)&v248);
LABEL_50:
        v89 += 96;
        if (!--v88)
        {
          swift_bridgeObjectRelease();
          v85 = v231;
          v84 = v232;
          v83 = (unint64_t)v239;
          break;
        }
      }
    }
    v86 = v83++ == v84;
    v17 = v233;
  }
  while (!v86);
  swift_bridgeObjectRelease();
  type metadata accessor for SgLine.Points();
  v164 = swift_allocObject();
  *(_QWORD *)(v164 + 16) = MEMORY[0x24BEE4AF8];
  v165 = (char **)(v164 + 16);
  v166 = v228;
  swift_bridgeObjectRetain();
  v167 = v229;
  swift_bridgeObjectRetain();
  v168 = swift_bridgeObjectRetain();
  v169 = v230;
  v170 = sub_214325AD0(v168, v166, v167, v226);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LODWORD(v167) = sub_214424674();
  v171 = sub_214424674();
  v238 = (_BYTE *)v164;
  v248 = (_QWORD *)v170;
  if ((_DWORD)v167 == v171)
  {
    swift_bridgeObjectRetain();
    v172 = sub_214320B68;
  }
  else
  {
    swift_bridgeObjectRetain();
    v172 = sub_21432048C;
  }
  sub_21431EEE8((uint64_t *)&v248, (uint64_t (*)(uint64_t))sub_21435015C, v172);
  if (v169)
    goto LABEL_159;
  swift_bridgeObjectRelease();
  v173 = (uint64_t)v248;
  v239 = 0;
  v174 = v248[2];
  if (v174)
  {
    v248 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_2141D3D7C(0, v174, 0);
    v175 = (uint64_t)v248;
    v176 = v248[2];
    v177 = 96 * v176 + 120;
    *(_QWORD *)&v237 = v173;
    v178 = (_OWORD *)(v173 + 40);
    v179 = 0uLL;
    do
    {
      v180 = *((_QWORD *)v178 - 1);
      v181 = *v178;
      v248 = (_QWORD *)v175;
      v182 = *(_QWORD *)(v175 + 24);
      v183 = v176 + 1;
      if (v176 >= v182 >> 1)
      {
        *(_OWORD *)&v235[8] = v181;
        sub_2141D3D7C((char *)(v182 > 1), v176 + 1, 1);
        v181 = *(_OWORD *)&v235[8];
        v179 = 0uLL;
        v175 = (uint64_t)v248;
      }
      *(_QWORD *)(v175 + 16) = v183;
      v184 = (_BYTE *)(v175 + v177);
      *((_QWORD *)v184 - 11) = v180;
      *((_OWORD *)v184 - 5) = v181;
      *((_OWORD *)v184 - 4) = v179;
      *((_OWORD *)v184 - 3) = v179;
      *((_QWORD *)v184 - 4) = 0;
      *(v184 - 24) = -1;
      v185 = v240;
      *((_DWORD *)v184 - 5) = *(_DWORD *)((char *)&v240 + 3);
      *(_DWORD *)(v184 - 23) = v185;
      *((_QWORD *)v184 - 2) = 0;
      *((_QWORD *)v184 - 1) = 0;
      *v184 = -1;
      v177 += 96;
      v178 = (_OWORD *)((char *)v178 + 24);
      v176 = v183;
      --v174;
    }
    while (v174);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v175 = MEMORY[0x24BEE4AF8];
  }
  swift_beginAccess();
  *v165 = (char *)v175;
  swift_bridgeObjectRelease();
  v186 = v236;
  if (v236[2])
  {
    if (*(_QWORD *)(v253 + 16))
    {
      v187 = *((_QWORD *)*v165 + 2);
      if (v187)
      {
        v188 = 0;
        v189 = 0;
        v234 = *((_QWORD *)*v165 + 2);
        while (v189 < *((_QWORD *)*v165 + 2))
        {
          if (v186[2])
          {
            v190 = *(_QWORD *)&(*v165)[v188 + 32];
            v191 = sub_21433AB28(v190);
            v186 = v236;
            if ((v192 & 1) != 0)
            {
              sub_2142AAEB4(v236[7] + 48 * v191, (uint64_t)&v240);
              sub_2142AAEF0((uint64_t)&v240, (uint64_t)&v248);
              v193 = v253;
              if (*(_QWORD *)(v253 + 16) && (v194 = sub_21433AB28(v190), (v195 & 1) != 0))
              {
                v196 = *(_QWORD *)(*(_QWORD *)(v193 + 56) + 8 * v194);
                v197 = swift_bridgeObjectRetain();
                v198 = v239;
                v199 = sub_214310774(v197);
                v200 = v228;
                swift_bridgeObjectRetain();
                v201 = v229;
                swift_bridgeObjectRetain();
                *(_QWORD *)&v237 = sub_214325078(v199, v200);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                *(_QWORD *)&v235[8] = sub_214325158(v199, v201);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v202 = sub_214310830(v196);
                v239 = v198;
                swift_bridgeObjectRelease();
                *(_QWORD *)v235 = sub_2143256C8(v202, v237);
                v204 = v203;
                v206 = v205;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_2142AAEB4((uint64_t)&v248, (uint64_t)&v240);
                swift_beginAccess();
                v207 = *v165;
                v208 = swift_isUniquelyReferenced_nonNull_native();
                *v165 = v207;
                if ((v208 & 1) == 0)
                {
                  v207 = sub_21434EB98((uint64_t)v207);
                  *v165 = v207;
                }
                if (v189 >= *((_QWORD *)v207 + 2))
                  goto LABEL_156;
                sub_2143269D4((uint64_t)&v240, (uint64_t)&v207[v188 + 56]);
                if (v189 >= *((_QWORD *)*v165 + 2))
                  goto LABEL_157;
                v209 = &(*v165)[v188];
                *((_QWORD *)v209 + 13) = *(_QWORD *)v235;
                *((_QWORD *)v209 + 14) = v204;
                v209[120] = v206 & 1;
                swift_endAccess();
                sub_21420D730((uint64_t)&v248);
                v186 = v236;
                v187 = v234;
              }
              else
              {
                sub_21420D730((uint64_t)&v248);
                v186 = v236;
              }
            }
          }
          ++v189;
          v188 += 96;
          if (v187 == v189)
            goto LABEL_139;
        }
        goto LABEL_153;
      }
    }
  }
LABEL_139:
  swift_bridgeObjectRelease();
  v210 = v223;
  v211 = v225;
  sub_2141FE1E0((uint64_t)v224, v225 + *(int *)(v223 + 32), (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  v212 = (uint64_t)v238;
  *(_QWORD *)v211 = 0;
  *(_QWORD *)(v211 + 8) = v212;
  *(_BYTE *)(v211 + 16) = v227;
  *(_QWORD *)(v211 + 24) = v222;
  *(_BYTE *)(v211 + 32) = v221;
  *(_QWORD *)(v211 + *(int *)(v210 + 36)) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21431D000@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t *);
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  char v118[8];
  _QWORD *v119;

  v103 = a4;
  v102 = a3;
  v101 = a2;
  v7 = sub_2141D8BF8(&qword_253F10400);
  v114 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v105 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2141D8BF8(&qword_253F10408);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (unint64_t *)((char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v14 = (uint64_t *)((char *)&v96 - v13);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    goto LABEL_58;
  v98 = a5;
  v97 = type metadata accessor for SgArea(0);
  v104 = *(_QWORD *)(v97 - 8);
  v106 = a1 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
  v100 = *(unsigned __int8 *)(v106 + 16);
  v16 = (_QWORD *)sub_21436BE38(MEMORY[0x24BEE4AF8]);
  v99 = a1;
  swift_bridgeObjectRetain();
  v17 = 0;
  v96 = 0;
  v108 = xmmword_214426EF0;
  v112 = v12;
  v113 = v7;
  v110 = v15;
  v111 = v14;
  while (1)
  {
    if (v17 == v15)
    {
      v18 = 1;
      v19 = v15;
    }
    else
    {
      if (v17 >= v15)
        goto LABEL_54;
      v19 = v17 + 1;
      v20 = (uint64_t)&v105[*(int *)(v7 + 48)];
      sub_2141FDEA0(v106 + *(_QWORD *)(v104 + 72) * v17, v20, type metadata accessor for SgArea);
      v21 = (uint64_t)v12 + *(int *)(v7 + 48);
      *v12 = v17;
      sub_2141FE1E0(v20, v21, type metadata accessor for SgArea);
      v18 = 0;
    }
    v22 = v114;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v114 + 56))(v12, v18, 1, v7);
    sub_2141E801C((uint64_t)v12, (uint64_t)v14, &qword_253F10408);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v14, 1, v7) == 1)
      break;
    *(_QWORD *)&v117 = v19;
    v23 = *v14;
    v24 = (uint64_t)v14 + *(int *)(v7 + 48);
    v25 = *(_QWORD *)(v24 + 8);
    swift_retain();
    sub_2141DD370(v24, type metadata accessor for SgArea);
    v26 = *(_QWORD *)(v25 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v109 = v23;
      v28 = (_OWORD *)(v26 + 56);
      do
      {
        v30 = *((_QWORD *)v28 - 3);
        v31 = *v28;
        v115 = *(v28 - 1);
        v116 = v31;
        if (v16[2] && (v32 = sub_21433AB28(v30), (v33 & 1) != 0))
        {
          v34 = (uint64_t *)(v16[7] + 16 * v32);
          v35 = *v34;
          v36 = (char *)v34[1];
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v38 = v109;
          v107 = v35;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v36 = sub_214225554(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
          v40 = *((_QWORD *)v36 + 2);
          v39 = *((_QWORD *)v36 + 3);
          if (v40 >= v39 >> 1)
            v36 = sub_214225554((char *)(v39 > 1), v40 + 1, 1, v36);
          *((_QWORD *)v36 + 2) = v40 + 1;
          v41 = &v36[40 * v40];
          *((_QWORD *)v41 + 4) = v38;
          *(_OWORD *)(v41 + 40) = v115;
          *(_OWORD *)(v41 + 56) = v116;
          v42 = swift_isUniquelyReferenced_nonNull_native();
          v119 = v16;
          v44 = sub_21433AB28(v30);
          v45 = v16[2];
          v46 = (v43 & 1) == 0;
          v47 = v45 + v46;
          if (__OFADD__(v45, v46))
            goto LABEL_56;
          v48 = v43;
          if (v16[3] >= v47)
          {
            if ((v42 & 1) == 0)
              sub_2142A9A64();
          }
          else
          {
            sub_21429FC8C(v47, v42);
            v49 = sub_21433AB28(v30);
            if ((v48 & 1) != (v50 & 1))
              goto LABEL_59;
            v44 = v49;
          }
          v65 = v107;
          v16 = v119;
          if ((v48 & 1) == 0)
          {
            v119[(v44 >> 6) + 8] |= 1 << v44;
            *(_QWORD *)(v16[6] + 8 * v44) = v30;
            v67 = (_QWORD *)(v16[7] + 16 * v44);
            *v67 = v65;
            v67[1] = v36;
            v68 = v16[2];
            v63 = __OFADD__(v68, 1);
            v64 = v68 + 1;
            if (v63)
              goto LABEL_57;
            goto LABEL_38;
          }
          v66 = (_QWORD *)(v119[7] + 16 * v44);
          swift_bridgeObjectRelease();
          *v66 = v65;
          v66[1] = v36;
        }
        else
        {
          sub_2141D8BF8(&qword_253F10420);
          v51 = swift_allocObject();
          *(_OWORD *)(v51 + 16) = v108;
          *(_QWORD *)(v51 + 32) = v109;
          *(_OWORD *)(v51 + 40) = v115;
          *(_OWORD *)(v51 + 56) = v116;
          v52 = swift_isUniquelyReferenced_nonNull_native();
          v119 = v16;
          v54 = sub_21433AB28(v30);
          v55 = v16[2];
          v56 = (v53 & 1) == 0;
          v57 = v55 + v56;
          if (__OFADD__(v55, v56))
          {
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            sub_214425820();
            __break(1u);
LABEL_60:
            result = swift_release();
            __break(1u);
            return result;
          }
          v58 = v53;
          if (v16[3] >= v57)
          {
            if ((v52 & 1) != 0)
            {
              v16 = v119;
              if ((v53 & 1) == 0)
                goto LABEL_30;
            }
            else
            {
              sub_2142A9A64();
              v16 = v119;
              if ((v58 & 1) == 0)
                goto LABEL_30;
            }
          }
          else
          {
            sub_21429FC8C(v57, v52);
            v59 = sub_21433AB28(v30);
            if ((v58 & 1) != (v60 & 1))
              goto LABEL_59;
            v54 = v59;
            v16 = v119;
            if ((v58 & 1) == 0)
            {
LABEL_30:
              v16[(v54 >> 6) + 8] |= 1 << v54;
              *(_QWORD *)(v16[6] + 8 * v54) = v30;
              v61 = (_QWORD *)(v16[7] + 16 * v54);
              *v61 = v30;
              v61[1] = v51;
              v62 = v16[2];
              v63 = __OFADD__(v62, 1);
              v64 = v62 + 1;
              if (v63)
                goto LABEL_55;
LABEL_38:
              v16[2] = v64;
              goto LABEL_12;
            }
          }
          v29 = (_QWORD *)(v16[7] + 16 * v54);
          swift_bridgeObjectRelease();
          *v29 = v30;
          v29[1] = v51;
        }
LABEL_12:
        swift_bridgeObjectRelease();
        v12 = v112;
        v7 = v113;
        v15 = v110;
        v14 = v111;
        v28 = (_OWORD *)((char *)v28 + 40);
        --v27;
      }
      while (v27);
    }
    swift_bridgeObjectRelease();
    v17 = v117;
  }
  v69 = v99;
  swift_bridgeObjectRelease();
  type metadata accessor for SgArea.Points();
  v70 = swift_allocObject();
  v71 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v70 + 16) = MEMORY[0x24BEE4AF8];
  v72 = v101;
  swift_bridgeObjectRetain();
  v73 = v102;
  swift_bridgeObjectRetain();
  v74 = swift_bridgeObjectRetain();
  v75 = v96;
  v76 = sub_214325FEC(v74, v72, v73, v103);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LODWORD(v73) = sub_214424674();
  if ((_DWORD)v73 == sub_214424674())
  {
    v119 = (_QWORD *)v76;
    swift_bridgeObjectRetain();
    v77 = sub_214321938;
  }
  else
  {
    v119 = (_QWORD *)v76;
    swift_bridgeObjectRetain();
    v77 = sub_21432123C;
  }
  sub_21431EEE8((uint64_t *)&v119, (uint64_t (*)(uint64_t))sub_214350170, v77);
  if (v75)
    goto LABEL_60;
  swift_bridgeObjectRelease();
  v78 = (uint64_t)v119;
  v79 = v119[2];
  if (v79)
  {
    v119 = (_QWORD *)v71;
    sub_2141D3DE0(0, v79, 0);
    v80 = 0;
    v81 = (uint64_t)v119;
    v82 = v119[2];
    v83 = 40 * v82;
    do
    {
      v84 = *(_QWORD *)(v78 + v80 + 32);
      v85 = *(_OWORD *)(v78 + v80 + 40);
      v86 = *(_OWORD *)(v78 + v80 + 56);
      v119 = (_QWORD *)v81;
      v87 = *(_QWORD *)(v81 + 24);
      v88 = v82 + 1;
      if (v82 >= v87 >> 1)
      {
        v116 = v86;
        v117 = v85;
        sub_2141D3DE0((char *)(v87 > 1), v82 + 1, 1);
        v86 = v116;
        v85 = v117;
        v81 = (uint64_t)v119;
      }
      *(_QWORD *)(v81 + 16) = v88;
      v89 = v81 + v83 + v80;
      *(_QWORD *)(v89 + 32) = v84;
      *(_OWORD *)(v89 + 40) = v85;
      *(_OWORD *)(v89 + 56) = v86;
      v80 += 40;
      v82 = v88;
      --v79;
    }
    while (v79);
    swift_bridgeObjectRelease();
    v69 = v99;
  }
  else
  {
    swift_bridgeObjectRelease();
    v81 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v70 + 16) = v81;
  swift_bridgeObjectRelease();
  v90 = *(_QWORD *)(v106 + 24);
  v91 = *(_BYTE *)(v106 + 32);
  v92 = sub_21431090C(v69, (uint64_t)v118, type metadata accessor for SgArea);
  v93 = v97;
  v94 = v98;
  sub_21431DA44(v92, v101, v102, v98 + *(int *)(v97 + 32));
  swift_bridgeObjectRelease();
  *(_QWORD *)v94 = 0;
  *(_QWORD *)(v94 + 8) = v70;
  *(_BYTE *)(v94 + 16) = v100;
  *(_QWORD *)(v94 + 24) = v90;
  *(_BYTE *)(v94 + 32) = v91;
  *(_QWORD *)(v94 + *(int *)(v93 + 36)) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_21431D838@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  char v32;

  v8 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for SgPath(0);
  result = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    sub_2141FDEA0(a1+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * (v16 - 1), (uint64_t)v15, type metadata accessor for SgPath);
    v26 = a3;
    v17 = sub_214310BF8(a1);
    v18 = sub_214314E78(v17, a2, 1, 1);
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)v15;
    v32 = v15[40];
    v20 = *(_OWORD *)(v15 + 24);
    v30 = *(_OWORD *)(v15 + 8);
    v31 = v20;
    sub_2144246BC();
    v21 = sub_214310CE8(a1);
    sub_21431DA44(v21, a2, v26, (uint64_t)v10);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)&v15[v11[7]];
    v23 = v15[v11[9]];
    sub_2141DD370((uint64_t)v15, type metadata accessor for SgPath);
    *(_QWORD *)a4 = v19;
    v24 = v28;
    *(_OWORD *)(a4 + 8) = v27;
    *(_OWORD *)(a4 + 24) = v24;
    *(_BYTE *)(a4 + 40) = v29;
    result = sub_2141FE1E0((uint64_t)v10, a4 + v11[6], (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
    *(_QWORD *)(a4 + v11[7]) = v22;
    *(double *)(a4 + v11[8]) = v18;
    *(_BYTE *)(a4 + v11[9]) = v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_21431DA34(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t sub_21431DA44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _BYTE v36[48];
  _QWORD v37[5];

  v8 = sub_2141D8BF8(&qword_253F15C88);
  MEMORY[0x24BDAC7A8](v8);
  v10 = v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 38;
  v11 = (char *)sub_21430F678(a1);
  sub_21431E0CC(v11, a2, a3, (uint64_t)v36);
  swift_bridgeObjectRelease();
  v12 = (_QWORD *)sub_21430F774(a1);
  sub_21431E6F4(v12, a2, v37);
  swift_bridgeObjectRelease();
  v13 = sub_21430F890(a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_2143125D4(v13, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = 0;
      v17 = 0.0;
    }
    else
    {
      v16 = v15 & 0x7FFFFFFFFFFFFFFELL;
      v18 = (double *)(v14 + 40);
      v17 = 0.0;
      v19 = v15 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v17 = v17 + *(v18 - 1) + *v18;
        v18 += 2;
        v19 -= 2;
      }
      while (v19);
      if (v15 == v16)
        goto LABEL_10;
    }
    v20 = v15 - v16;
    v21 = (double *)(v14 + 8 * v16 + 32);
    do
    {
      v22 = *v21++;
      v17 = v17 + v22;
      --v20;
    }
    while (v20);
  }
  else
  {
    v17 = 0.0;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    v23 = type metadata accessor for SgShapeStyle();
    v24 = *(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80);
    v25 = a1 + ((v24 + 32) & ~v24);
    sub_2141E070C(v25 + *(int *)(v23 + 32), (uint64_t)v10, &qword_253F15C88);
    v26 = v25 + *(int *)(v23 + 36);
    v27 = *(_QWORD *)v26;
    v28 = *(_WORD *)(v26 + 8);
    swift_retain();
  }
  else
  {
    v29 = sub_214424C68();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v10, 1, 1, v29);
    v27 = 0;
    v28 = 0;
  }
  v30 = 0.0;
  if (v17 > 0.0)
    v30 = v17;
  if (v30 <= 1.0)
    v31 = v30;
  else
    v31 = 1.0;
  sub_21421D060((uint64_t)v36, a4);
  *(_BYTE *)(a4 + 41) = 0;
  sub_2141E801C((uint64_t)v37, a4 + 48, &qword_253F11F60);
  *(double *)(a4 + 88) = v31;
  v32 = type metadata accessor for SgShapeStyle();
  result = sub_2141E801C((uint64_t)v10, a4 + *(int *)(v32 + 32), &qword_253F15C88);
  v34 = a4 + *(int *)(v32 + 36);
  *(_QWORD *)v34 = v27;
  *(_WORD *)(v34 + 8) = v28;
  return result;
}

uint64_t sub_21431DCE8(uint64_t a1, uint64_t a2)
{
  return sub_21431DCF4(a1, a2, (void (*)(_QWORD))MEMORY[0x24BDCBDE0]);
}

uint64_t sub_21431DCF4(uint64_t result, uint64_t a2, void (*a3)(_QWORD))
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    a3(0);
    return a2;
  }
  return result;
}

BOOL sub_21431DD74(_QWORD *a1, _QWORD *a2)
{
  return *a2 == *a1;
}

uint64_t sub_21431DD88()
{
  return sub_214425154();
}

uint64_t sub_21431DD90@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    return sub_2143035C0(*(_QWORD *)result + 96 * v3 + 32, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_21431DDC4(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *a3;
  v6 = *a2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_21434EB98(v6);
  v6 = result;
  *a2 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v5 < *(_QWORD *)(v6 + 16))
    return sub_214326AA0(a1, v6 + 96 * v5 + 32);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_21431DE40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;

  v29 = *a1;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_2143115E0(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_214325078(v10, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_214325158(v10, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_21431169C(v12);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_214315224(v13, v11, a4, (double (*)(_QWORD, double))sub_21431658C);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_release();
  v16 = swift_bridgeObjectRetain();
  v17 = sub_21431175C(v16);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_214315224(v17, v11, a4, (double (*)(_QWORD, double))sub_214315378);
  v19 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  v20 = swift_bridgeObjectRetain();
  v21 = sub_21431181C(v20);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_214315224(v21, v11, a4, (double (*)(_QWORD, double))sub_21431658C);
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_release();
  v24 = swift_bridgeObjectRetain();
  v25 = sub_2143118DC(v24);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_214315224(v25, v11, a4, (double (*)(_QWORD, double))sub_214315378);
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  *a5 = v29;
  a5[1] = v15;
  a5[2] = v19;
  a5[3] = v23;
  a5[4] = v27;
  return result;
}

uint64_t sub_21431E0CC@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  BOOL v24;
  int v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47[40];
  unint64_t v48;
  __int128 v49[2];
  char v50;
  _BYTE v51[48];
  double v52;
  char *v53;

  v42 = a3;
  v46 = sub_214424BCC();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v44 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v53 = (char *)MEMORY[0x24BEE4AF8];
  v10 = *((_QWORD *)a1 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v10)
  {
    LOBYTE(v15) = 1;
    v43 = v9;
    goto LABEL_41;
  }
  v11 = 0;
  v12 = (uint64_t)(a1 + 32);
  v13 = a2 + 32;
  v39 = v10 - 1;
  v14 = 0.0;
  v15 = 1;
  v43 = v9;
  v40 = a1 + 32;
LABEL_3:
  LODWORD(v41) = v15;
LABEL_4:
  if (v11 <= v10)
    v16 = v10;
  else
    v16 = v11;
  v4 = v12 + 48 * v11;
  while (1)
  {
    if (v16 == v11)
    {
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    sub_2141FE4A4(v4, (uint64_t)v49);
    v17 = *(_QWORD *)(a2 + 16);
    if (v11 == v17)
    {
      sub_21420D6FC((uint64_t)v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
      {
LABEL_36:
        a1 = v43;
        v15 = *((_QWORD *)v43 + 2);
        if (!v15)
          goto LABEL_69;
        v4 = v15 - 1;
        v26 = *(double *)&v43[8 * v15 + 24];
        v38 = (_QWORD *)a4;
        if (v26 != 1.0)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
            goto LABEL_71;
          goto LABEL_46;
        }
        v27 = a2;
        while (1)
        {
          v31 = *((_QWORD *)v9 + 2);
          a2 = v31 != 0;
          if (v31)
          {
            v32 = *((_QWORD *)v9 + 4);
            if (v31 == a2)
            {
              swift_retain_n();
              v33 = v32;
LABEL_61:
              swift_release();
              v37 = v38;
              *v38 = v33;
              *((_BYTE *)v37 + 40) = 0;
              goto LABEL_62;
            }
            v34 = (char *)v27;
            if (*(_QWORD *)(v27 + 16) <= a2)
              v15 = v31 != 0;
            else
              v15 = *(_QWORD *)(v27 + 16);
            swift_retain_n();
            v43 = v34;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v41 = v32;
            v4 = v32;
            while (a2 < v31)
            {
              if (a2 >= *((_QWORD *)v53 + 2))
                goto LABEL_66;
              if (v15 == a2)
                goto LABEL_67;
              if (a2 >= *((_QWORD *)a1 + 2))
                goto LABEL_68;
              v35 = a2 + 1;
              swift_retain();
              v36 = v44;
              sub_214424BC0();
              v33 = sub_214424980();
              swift_release();
              (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v46);
              swift_release();
              a2 = v35;
              v4 = v33;
              if (v31 == v35)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_61;
              }
            }
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
          }
          __break(1u);
LABEL_71:
          result = (uint64_t)sub_21434EB70((uint64_t)a1);
          a1 = (char *)result;
LABEL_46:
          if (v15 > *((_QWORD *)a1 + 2))
          {
            __break(1u);
            return result;
          }
          v27 = a2;
          *(_QWORD *)&a1[8 * v4 + 32] = 0x3FF0000000000000;
          v9 = v53;
        }
      }
LABEL_42:
      if (v10)
      {
        sub_2141FE4A4((uint64_t)(a1 + 32), a4);
      }
      else
      {
        v28 = sub_2144249C8();
        v29 = MEMORY[0x24BDF3E18];
        *(_QWORD *)(a4 + 24) = MEMORY[0x24BDF3E48];
        *(_QWORD *)(a4 + 32) = v29;
        *(_QWORD *)a4 = v28;
        *(_BYTE *)(a4 + 40) = 1;
      }
      goto LABEL_62;
    }
    if (v11 >= v17)
      goto LABEL_64;
    v18 = *(double *)(v13 + 8 * v11);
    sub_21421D060((uint64_t)v49, (uint64_t)v51);
    v52 = v18;
    sub_21421D060((uint64_t)v51, (uint64_t)v49);
    if ((v50 & 1) != 0)
      break;
    v15 = *(_QWORD *)&v49[0];
    if (!*(_QWORD *)&v49[0])
      goto LABEL_39;
LABEL_18:
    if (v18 > 0.0)
    {
      v19 = swift_retain();
      MEMORY[0x2199CC8E4](v19);
      if (*((_QWORD *)v53 + 2) >= *((_QWORD *)v53 + 3) >> 1)
        sub_21442501C();
      sub_214425064();
      sub_214424FF8();
      v20 = a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = sub_214224AE0(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
      v22 = *((_QWORD *)v43 + 2);
      v21 = *((_QWORD *)v43 + 3);
      if (v22 >= v21 >> 1)
        v43 = sub_214224AE0((char *)(v21 > 1), v22 + 1, 1, v43);
      v14 = fmin(v14 + v18, 1.0);
      v23 = v43;
      *((_QWORD *)v43 + 2) = v22 + 1;
      *(double *)&v23[8 * v22 + 32] = v14;
      v9 = v53;
      if (*((_QWORD *)v53 + 2))
      {
        v4 = *((_QWORD *)v53 + 4);
        swift_retain();
        v25 = sub_214424974();
        swift_release();
        swift_release();
        v15 = v25 & v41;
        v24 = v39 == v11++;
        a2 = v20;
        v12 = (uint64_t)v40;
        if (v24)
          goto LABEL_41;
        goto LABEL_3;
      }
      v4 = v11 + 1;
      swift_release();
      v24 = v39 == v11++;
      a2 = v20;
      v12 = (uint64_t)v40;
      if (v24)
      {
LABEL_40:
        LOBYTE(v15) = v41;
LABEL_41:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
          goto LABEL_36;
        goto LABEL_42;
      }
      goto LABEL_4;
    }
    ++v11;
    swift_release();
    v4 += 48;
    if (v10 == v11)
      goto LABEL_40;
  }
  sub_2141D8DC0(v49, (uint64_t)v47);
  sub_2141D8BF8(&qword_253F131F8);
  if (swift_dynamicCast())
    v15 = v48;
  else
    v15 = 0;
  if (v15)
    goto LABEL_18;
LABEL_39:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2141FE4A4((uint64_t)v40, a4);
LABEL_62:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_21431E6F4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double v42;
  _QWORD *v43;
  uint64_t *v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  double *v63;
  double v64;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v3 = result[2];
  if (v3)
  {
    v4 = result;
    v6 = result + 4;
    v7 = result + 7;
    v8 = result[2];
    do
    {
      v9 = *v7;
      v7 += 5;
      if (!v9)
      {
        v14 = result[4];
        v15 = result[5];
        v17 = result[6];
        v16 = result[7];
        v18 = result[8];
        result = (_QWORD *)swift_bridgeObjectRetain();
LABEL_61:
        *a3 = v14;
        a3[1] = v15;
        a3[2] = v17;
        a3[3] = v16;
        a3[4] = v18;
        return result;
      }
      --v8;
    }
    while (v8);
    if (result[7])
    {
      v66 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      result = sub_2141D39D4(0, v3, 0);
      v10 = v3;
      do
      {
        if (!v6[3])
          goto LABEL_63;
        v11 = *v6;
        v13 = *(_QWORD *)(v66 + 16);
        v12 = *(_QWORD *)(v66 + 24);
        if (v13 >= v12 >> 1)
          result = sub_2141D39D4((char *)(v12 > 1), v13 + 1, 1);
        *(_QWORD *)(v66 + 16) = v13 + 1;
        *(_QWORD *)(v66 + 8 * v13 + 32) = v11;
        v6 += 5;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = sub_2143125D4(v66, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        if (v20 == 1)
        {
          v21 = 0;
          v22 = 0.0;
          goto LABEL_20;
        }
        v21 = v20 & 0x7FFFFFFFFFFFFFFELL;
        v23 = (double *)(v19 + 40);
        v22 = 0.0;
        v24 = v20 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v22 = v22 + *(v23 - 1) + *v23;
          v23 += 2;
          v24 -= 2;
        }
        while (v24);
        if (v20 != v21)
        {
LABEL_20:
          v25 = v20 - v21;
          v26 = (double *)(v19 + 8 * v21 + 32);
          do
          {
            v27 = *v26++;
            v22 = v22 + v27;
            --v25;
          }
          while (v25);
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = MEMORY[0x24BEE4AF8];
      result = sub_2141D39D4(0, v3, 0);
      v28 = v4 + 7;
      v29 = v3;
      do
      {
        if (!*v28)
          goto LABEL_64;
        v30 = *(v28 - 1);
        v32 = *(_QWORD *)(v67 + 16);
        v31 = *(_QWORD *)(v67 + 24);
        if (v32 >= v31 >> 1)
          result = sub_2141D39D4((char *)(v31 > 1), v32 + 1, 1);
        *(_QWORD *)(v67 + 16) = v32 + 1;
        *(_QWORD *)(v67 + 8 * v32 + 32) = v30;
        v28 += 5;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRetain();
      v33 = swift_bridgeObjectRetain();
      v34 = sub_2143125D4(v33, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = *(_QWORD *)(v34 + 16);
      if (v35)
      {
        if (v35 == 1)
        {
          v36 = 0;
          v37 = 0.0;
          goto LABEL_34;
        }
        v36 = v35 & 0x7FFFFFFFFFFFFFFELL;
        v38 = (double *)(v34 + 40);
        v37 = 0.0;
        v39 = v35 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v37 = v37 + *(v38 - 1) + *v38;
          v38 += 2;
          v39 -= 2;
        }
        while (v39);
        if (v35 != v36)
        {
LABEL_34:
          v40 = v35 - v36;
          v41 = (double *)(v34 + 8 * v36 + 32);
          do
          {
            v42 = *v41++;
            v37 = v37 + v42;
            --v40;
          }
          while (v40);
        }
      }
      v43 = a3;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v68 = (_QWORD *)MEMORY[0x24BEE4AF8];
      result = sub_2141D3C90(0, v3, 0);
      v44 = v4 + 7;
      v45 = v3;
      do
      {
        v46 = *v44;
        if (!*v44)
          goto LABEL_65;
        v47 = v68[2];
        v48 = v68[3];
        result = (_QWORD *)swift_bridgeObjectRetain();
        if (v47 >= v48 >> 1)
          result = sub_2141D3C90((_QWORD *)(v48 > 1), v47 + 1, 1);
        v68[2] = v47 + 1;
        v68[v47 + 4] = v46;
        v44 += 5;
        --v45;
      }
      while (v45);
      v49 = 0;
      v50 = *(_QWORD *)(v68[4] + 16);
      a3 = v43;
      do
      {
        if (*(_QWORD *)(v68[v49 + 4] + 16) != v50)
        {
          swift_bridgeObjectRetain();
          goto LABEL_46;
        }
        ++v49;
      }
      while (v47 + 1 != v49);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21432556C(0, v50, (uint64_t)v68, a2);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
LABEL_46:
      swift_bridgeObjectRelease();
      v69 = MEMORY[0x24BEE4AF8];
      result = sub_2141D39D4(0, v3, 0);
      v51 = v4 + 8;
      do
      {
        if (!*(v51 - 1))
          goto LABEL_66;
        v52 = *v51;
        v54 = *(_QWORD *)(v69 + 16);
        v53 = *(_QWORD *)(v69 + 24);
        if (v54 >= v53 >> 1)
          result = sub_2141D39D4((char *)(v53 > 1), v54 + 1, 1);
        *(_QWORD *)(v69 + 16) = v54 + 1;
        *(_QWORD *)(v69 + 8 * v54 + 32) = v52;
        v51 += 5;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRetain();
      v55 = swift_bridgeObjectRetain();
      v56 = sub_2143125D4(v55, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v57 = *(_QWORD *)(v56 + 16);
      if (v57)
      {
        if (v57 == 1)
        {
          v58 = 0;
          v59 = 0.0;
          goto LABEL_58;
        }
        v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        v60 = (double *)(v56 + 40);
        v59 = 0.0;
        v61 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v59 = v59 + *(v60 - 1) + *v60;
          v60 += 2;
          v61 -= 2;
        }
        while (v61);
        if (v57 != v58)
        {
LABEL_58:
          v62 = v57 - v58;
          v63 = (double *)(v56 + 8 * v58 + 32);
          do
          {
            v64 = *v63++;
            v59 = v59 + v64;
            --v62;
          }
          while (v62);
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_214423D80();
      v14 = v69;
      v15 = v70;
      v17 = v71;
      v16 = v72;
      v18 = v73;
      result = (_QWORD *)swift_bridgeObjectRelease();
      goto LABEL_61;
    }
  }
  else
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_21431ED24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (!v6)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = sub_2143125D4(v7, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      if (v16 == 1)
      {
        v17 = 0;
        v18 = 0.0;
      }
      else
      {
        v17 = v16 & 0x7FFFFFFFFFFFFFFELL;
        v19 = (double *)(v15 + 40);
        v18 = 0.0;
        v20 = v16 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v18 = v18 + *(v19 - 1) + *v19;
          v19 += 2;
          v20 -= 2;
        }
        while (v20);
        if (v16 == v17)
          goto LABEL_17;
      }
      v21 = v16 - v17;
      v22 = (double *)(v15 + 8 * v17 + 32);
      do
      {
        v23 = *v22++;
        v18 = v18 + v23;
        --v21;
      }
      while (v21);
    }
    else
    {
      v18 = 0.0;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a4 = v18;
    return result;
  }
  v9 = *a1;
  v24 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)sub_2141D39D4(0, v6, 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v11 = a2 + 32;
    v7 = v24;
    while (v9 < *(_QWORD *)(*(_QWORD *)v11 + 16))
    {
      v12 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v9 + 32);
      v14 = *(_QWORD *)(v24 + 16);
      v13 = *(_QWORD *)(v24 + 24);
      if (v14 >= v13 >> 1)
        result = (uint64_t)sub_2141D39D4((char *)(v13 > 1), v14 + 1, 1);
      *(_QWORD *)(v24 + 16) = v14 + 1;
      *(_QWORD *)(v24 + 8 * v14 + 32) = v12;
      v11 += 8;
      if (!--v6)
        goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_21431EEE8(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

unint64_t sub_21431EF60(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v30 = type metadata accessor for CalendarCache.Key(0);
  v4 = *(_QWORD *)(v30 - 8);
  result = MEMORY[0x24BDAC7A8](v30);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_214425424();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v31 = (result + 1) & v11;
      v12 = *(_QWORD *)(v4 + 72);
      v13 = v11;
      do
      {
        v14 = v12;
        v15 = v12 * v10;
        v16 = v13;
        sub_2141FDEA0(*(_QWORD *)(a2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for CalendarCache.Key);
        sub_214425874();
        sub_2142C58CC();
        v17 = sub_2144258B0();
        result = sub_2141DD370((uint64_t)v7, type metadata accessor for CalendarCache.Key);
        v13 = v16;
        v18 = v17 & v16;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 < v31)
          {
            v12 = v14;
          }
          else
          {
            v12 = v14;
            if (a1 >= (uint64_t)v18)
              goto LABEL_12;
          }
        }
        else
        {
          v12 = v14;
          if (v18 >= v31 || a1 >= (uint64_t)v18)
          {
LABEL_12:
            v19 = *(_QWORD *)(a2 + 48);
            result = v19 + v12 * a1;
            if (v12 * a1 < v15 || result >= v19 + v15 + v12)
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              v13 = v16;
            }
            else if (v12 * a1 != v15)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = (_QWORD *)(v20 + 8 * a1);
            v22 = (_QWORD *)(v20 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v21 >= v22 + 1))
            {
              *v21 = *v22;
              a1 = v10;
            }
          }
        }
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v23 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431F1EC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_214425868();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            result = v15 + 784 * v3;
            v16 = (const void *)(v15 + 784 * v6);
            if (784 * v3 < (uint64_t)(784 * v6)
              || (result < (unint64_t)v16 + 784 ? (v17 = v3 == v6) : (v17 = 0), v3 = v6, !v17))
            {
              result = (unint64_t)memmove((void *)result, v16, 0x310uLL);
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431F398(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v6);
        result = sub_214425868();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            v16 = (_QWORD *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1)
              *v16 = *v12;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = v17 + 40 * v3;
            v19 = (__int128 *)(v17 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              v9 = *v19;
              v10 = v19[1];
              *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
              *(_OWORD *)v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431F540(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_214425874();
        sub_214425880();
        result = sub_2144258B0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (16 * v3 != 16 * v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431F700(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_214425874();
        sub_214425880();
        result = sub_2144258B0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431F8B8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_214425874();
        sub_214425880();
        result = sub_2144258B0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431FA70(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_214425868();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431FC04(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_214425874();
        sub_214425898();
        sub_214425898();
        result = sub_2144258B0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_OWORD *)(v10 + 16 * v3);
          v12 = (_OWORD *)(v10 + 16 * v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21431FDD4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v4 = sub_214423C54();
  v31 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v32 = a2 + 64;
    result = sub_214425424();
    v11 = v32;
    if ((*(_QWORD *)(v32 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v31 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
      do
      {
        v14 = v13 * v9;
        v30(v7, *(_QWORD *)(a2 + 48) + v13 * v9, v4);
        sub_2142AB588();
        v15 = sub_214424DB8();
        result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v4);
        v16 = v15 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v16 >= v12 && a1 >= (uint64_t)v16)
          {
LABEL_17:
            v19 = *(_QWORD *)(a2 + 48);
            result = v19 + v13 * a1;
            if (v13 * a1 < v14 || result >= v19 + v14 + v13)
            {
              result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v13 * a1 != v14)
            {
              result = swift_arrayInitWithTakeBackToFront();
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = (_QWORD *)(v20 + 8 * a1);
            v22 = (_QWORD *)(v20 + 8 * v9);
            v11 = v32;
            if (a1 != v9 || (a1 = v9, v21 >= v22 + 1))
            {
              *v21 = *v22;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v16 >= v12 || a1 >= (uint64_t)v16)
        {
          goto LABEL_17;
        }
        v11 = v32;
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v11 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v23 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_214320038(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_214425874();
        sub_214425880();
        result = sub_2144258B0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v9 < v8)
          goto LABEL_11;
LABEL_12:
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_BYTE *)(v10 + v3);
        v12 = (_BYTE *)(v10 + v6);
        if (v3 != v6 || v11 >= v12 + 1)
          *v11 = *v12;
        v13 = *(_QWORD *)(a2 + 56);
        v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartContentRenderContext.Bins(0) - 8) + 72);
        v15 = v14 * v3;
        result = v13 + v14 * v3;
        v16 = v14 * v6;
        v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v15 == v16)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v9 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v9)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_214320218(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22[72];
  _QWORD v23[20];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_214425424();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2141EF6B8(*(_QWORD *)(a2 + 48) + 152 * v6, (uint64_t)v23);
        sub_214425874();
        sub_21421C318(v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2142FFD88((uint64_t)v22);
        v9 = sub_2144258B0();
        result = (unint64_t)sub_21421C318(v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (char *)(v11 + 152 * v3);
          v13 = (char *)(v11 + 152 * v6);
          if (v3 != v6 || v12 >= v13 + 152)
            memmove(v12, v13, 0x98uLL);
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 304 * v3;
          v15 = (const void *)(v14 + 304 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 304))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x130uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_214320418()
{
  unint64_t result;

  result = qword_253F10B78;
  if (!qword_253F10B78)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE1418], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_253F10B78);
  }
  return result;
}

double sub_21432045C@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_214320468(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_214320474@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_214320480(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

uint64_t sub_21432048C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double *v29;
  double v30;
  double *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v85 = *a1;
      v86 = *a1 + 16;
      v87 = -1;
      for (i = 1; i != v3; ++i)
      {
        v89 = *(double *)(v85 + 24 * i + 16);
        v90 = v86;
        v91 = v87;
        do
        {
          if (v89 >= *(double *)v90)
            break;
          if (!v85)
            goto LABEL_142;
          v92 = *(_QWORD *)(v90 + 8);
          v93 = *(_QWORD *)(v90 + 16);
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v90 - 16);
          *(_QWORD *)(v90 + 24) = *(_QWORD *)v90;
          *(_QWORD *)(v90 - 16) = v92;
          *(_QWORD *)(v90 - 8) = v93;
          *(double *)v90 = v89;
          v90 -= 24;
        }
        while (!__CFADD__(v91++, 1));
        --v87;
        v86 += 24;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v102 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      sub_2141D8BF8(&qword_254D6AC10);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v7;
      v104 = result;
      v108 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v103 = *a1 + 64;
      v11 = MEMORY[0x24BEE4AF8];
      v105 = v6;
      v106 = v3;
      v107 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 24 * v9 + 16);
          v15 = *(double *)(v10 + 24 * v13 + 16);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v103 + 24 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 3;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 24 * v9;
              v20 = 24 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = v10 + v19;
                  v25 = *(_QWORD *)(v10 + v20);
                  v26 = *(_OWORD *)(v10 + v20 + 8);
                  v27 = *(_OWORD *)(v10 + v19 - 24);
                  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v10 + v19 - 8);
                  *(_OWORD *)v23 = v27;
                  *(_QWORD *)(v24 - 24) = v25;
                  *(_OWORD *)(v24 - 16) = v26;
                }
                ++v22;
                v19 -= 24;
                v20 += 24;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v28 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v28 >= v3)
              v28 = v3;
            if (v28 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v28)
            {
              v29 = (double *)(v10 + 24 * v9);
              do
              {
                v30 = *(double *)(v10 + 24 * v9 + 16);
                v31 = v29;
                v32 = v13;
                do
                {
                  if (v30 >= *(v31 - 1))
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v33 = *v31;
                  v34 = *((_QWORD *)v31 + 1);
                  *(_OWORD *)v31 = *(_OWORD *)(v31 - 3);
                  v31[2] = *(v31 - 1);
                  *((_QWORD *)v31 - 2) = v34;
                  *(v31 - 1) = v30;
                  *(v31 - 3) = v33;
                  v31 -= 3;
                  ++v32;
                }
                while (v9 != v32);
                ++v9;
                v29 += 3;
              }
              while (v9 != v28);
              v9 = v28;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v36 = *(_QWORD *)(v11 + 16);
        v35 = *(_QWORD *)(v11 + 24);
        v12 = v36 + 1;
        v10 = v107;
        if (v36 >= v35 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v35 > 1), v36 + 1, 1, (char *)v11);
          v10 = v107;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v37 = v11 + 32;
        v38 = (uint64_t *)(v11 + 32 + 16 * v36);
        *v38 = v13;
        v38[1] = v9;
        if (v36)
        {
          while (1)
          {
            v39 = v12 - 1;
            if (v12 >= 4)
            {
              v44 = v37 + 16 * v12;
              v45 = *(_QWORD *)(v44 - 64);
              v46 = *(_QWORD *)(v44 - 56);
              v50 = __OFSUB__(v46, v45);
              v47 = v46 - v45;
              if (v50)
                goto LABEL_120;
              v49 = *(_QWORD *)(v44 - 48);
              v48 = *(_QWORD *)(v44 - 40);
              v50 = __OFSUB__(v48, v49);
              v42 = v48 - v49;
              v43 = v50;
              if (v50)
                goto LABEL_121;
              v51 = v12 - 2;
              v52 = (uint64_t *)(v37 + 16 * (v12 - 2));
              v54 = *v52;
              v53 = v52[1];
              v50 = __OFSUB__(v53, v54);
              v55 = v53 - v54;
              if (v50)
                goto LABEL_122;
              v50 = __OFADD__(v42, v55);
              v56 = v42 + v55;
              if (v50)
                goto LABEL_124;
              if (v56 >= v47)
              {
                v74 = (uint64_t *)(v37 + 16 * v39);
                v76 = *v74;
                v75 = v74[1];
                v50 = __OFSUB__(v75, v76);
                v77 = v75 - v76;
                if (v50)
                  goto LABEL_130;
                v67 = v42 < v77;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v68 = *(_QWORD *)(v11 + 32);
                v69 = *(_QWORD *)(v11 + 40);
                v50 = __OFSUB__(v69, v68);
                v61 = v69 - v68;
                v62 = v50;
                goto LABEL_77;
              }
              v41 = *(_QWORD *)(v11 + 32);
              v40 = *(_QWORD *)(v11 + 40);
              v50 = __OFSUB__(v40, v41);
              v42 = v40 - v41;
              v43 = v50;
            }
            if ((v43 & 1) != 0)
              goto LABEL_123;
            v51 = v12 - 2;
            v57 = (uint64_t *)(v37 + 16 * (v12 - 2));
            v59 = *v57;
            v58 = v57[1];
            v60 = __OFSUB__(v58, v59);
            v61 = v58 - v59;
            v62 = v60;
            if (v60)
              goto LABEL_125;
            v63 = (uint64_t *)(v37 + 16 * v39);
            v65 = *v63;
            v64 = v63[1];
            v50 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v50)
              goto LABEL_127;
            if (__OFADD__(v61, v66))
              goto LABEL_129;
            if (v61 + v66 >= v42)
            {
              v67 = v42 < v66;
LABEL_83:
              if (v67)
                v39 = v51;
              goto LABEL_85;
            }
LABEL_77:
            if ((v62 & 1) != 0)
              goto LABEL_126;
            v70 = (uint64_t *)(v37 + 16 * v39);
            v72 = *v70;
            v71 = v70[1];
            v50 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v50)
              goto LABEL_128;
            if (v73 < v61)
              goto LABEL_15;
LABEL_85:
            v78 = v39 - 1;
            if (v39 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v79 = v11;
            v80 = (uint64_t *)(v37 + 16 * v78);
            v81 = *v80;
            v82 = (_QWORD *)(v37 + 16 * v39);
            v83 = v82[1];
            result = sub_214322920((double *)(v10 + 24 * *v80), (double *)(v10 + 24 * *v82), v10 + 24 * v83, v108);
            if (v1)
              goto LABEL_93;
            if (v83 < v81)
              goto LABEL_117;
            if (v39 > *(_QWORD *)(v79 + 16))
              goto LABEL_118;
            *v80 = v81;
            *(_QWORD *)(v37 + 16 * v78 + 8) = v83;
            v84 = *(_QWORD *)(v79 + 16);
            if (v39 >= v84)
              goto LABEL_119;
            v11 = v79;
            v12 = v84 - 1;
            result = (uint64_t)memmove((void *)(v37 + 16 * v39), v82 + 2, 16 * (v84 - 1 - v39));
            *(_QWORD *)(v79 + 16) = v84 - 1;
            v10 = v107;
            if (v84 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v105;
        v3 = v106;
        if (v9 >= v106)
        {
          v8 = v104;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v108 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v104 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v11;
    v104 = v8;
    if (v12 >= 2)
    {
      v95 = *v102;
      do
      {
        v96 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v95)
          goto LABEL_146;
        v97 = result;
        v98 = *(_QWORD *)(result + 32 + 16 * v96);
        v99 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_214322920((double *)(v95 + 24 * v98), (double *)(v95 + 24 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v95 + 24 * v99, v108);
        if (v1)
          break;
        if (v99 < v98)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v97);
          v97 = result;
        }
        if (v96 >= *(_QWORD *)(v97 + 16))
          goto LABEL_134;
        v100 = (_QWORD *)(v97 + 32 + 16 * v96);
        *v100 = v98;
        v100[1] = v99;
        v101 = *(_QWORD *)(v97 + 16);
        if (v12 > v101)
          goto LABEL_135;
        memmove((void *)(v97 + 32 + 16 * (v12 - 1)), (const void *)(v97 + 32 + 16 * v12), 16 * (v101 - v12));
        result = v97;
        *(_QWORD *)(v97 + 16) = v101 - 1;
        v12 = v101 - 1;
      }
      while (v101 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v104 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_214320B68(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double *v29;
  double v30;
  uint64_t v31;
  double *v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  double v89;
  uint64_t v90;
  double *v91;
  double v92;
  uint64_t v93;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v85 = *a1;
      v86 = *a1 + 24;
      v87 = -1;
      for (i = 1; i != v3; ++i)
      {
        v89 = *(double *)(v85 + 24 * i + 8);
        v90 = v87;
        v91 = (double *)v86;
        do
        {
          if (v89 >= *(v91 - 2))
            break;
          if (!v85)
            goto LABEL_142;
          v92 = *v91;
          v93 = *((_QWORD *)v91 + 2);
          *(_OWORD *)v91 = *(_OWORD *)(v91 - 3);
          v91[2] = *(v91 - 1);
          *(v91 - 2) = v89;
          *((_QWORD *)v91 - 1) = v93;
          *(v91 - 3) = v92;
          v91 -= 3;
        }
        while (!__CFADD__(v90++, 1));
        v86 += 24;
        --v87;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v102 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      sub_2141D8BF8(&qword_254D6AC10);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v7;
      v104 = result;
      v108 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v103 = *a1 + 56;
      v11 = MEMORY[0x24BEE4AF8];
      v105 = v6;
      v106 = v3;
      v107 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 24 * v9 + 8);
          v15 = *(double *)(v10 + 24 * v13 + 8);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v103 + 24 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 3;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 24 * v9;
              v20 = 24 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = v10 + v19;
                  v25 = *(_QWORD *)(v10 + v20);
                  v26 = *(_OWORD *)(v10 + v20 + 8);
                  v27 = *(_OWORD *)(v10 + v19 - 24);
                  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v10 + v19 - 8);
                  *(_OWORD *)v23 = v27;
                  *(_QWORD *)(v24 - 24) = v25;
                  *(_OWORD *)(v24 - 16) = v26;
                }
                ++v22;
                v19 -= 24;
                v20 += 24;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v28 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v28 >= v3)
              v28 = v3;
            if (v28 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v28)
            {
              v29 = (double *)(v10 + 24 * v9);
              do
              {
                v30 = *(double *)(v10 + 24 * v9 + 8);
                v31 = v13;
                v32 = v29;
                do
                {
                  if (v30 >= *(v32 - 2))
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v33 = *v32;
                  v34 = *((_QWORD *)v32 + 2);
                  *(_OWORD *)v32 = *(_OWORD *)(v32 - 3);
                  v32[2] = *(v32 - 1);
                  *(v32 - 2) = v30;
                  *((_QWORD *)v32 - 1) = v34;
                  *(v32 - 3) = v33;
                  v32 -= 3;
                  ++v31;
                }
                while (v9 != v31);
                ++v9;
                v29 += 3;
              }
              while (v9 != v28);
              v9 = v28;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v36 = *(_QWORD *)(v11 + 16);
        v35 = *(_QWORD *)(v11 + 24);
        v12 = v36 + 1;
        v10 = v107;
        if (v36 >= v35 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v35 > 1), v36 + 1, 1, (char *)v11);
          v10 = v107;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v37 = v11 + 32;
        v38 = (uint64_t *)(v11 + 32 + 16 * v36);
        *v38 = v13;
        v38[1] = v9;
        if (v36)
        {
          while (1)
          {
            v39 = v12 - 1;
            if (v12 >= 4)
            {
              v44 = v37 + 16 * v12;
              v45 = *(_QWORD *)(v44 - 64);
              v46 = *(_QWORD *)(v44 - 56);
              v50 = __OFSUB__(v46, v45);
              v47 = v46 - v45;
              if (v50)
                goto LABEL_120;
              v49 = *(_QWORD *)(v44 - 48);
              v48 = *(_QWORD *)(v44 - 40);
              v50 = __OFSUB__(v48, v49);
              v42 = v48 - v49;
              v43 = v50;
              if (v50)
                goto LABEL_121;
              v51 = v12 - 2;
              v52 = (uint64_t *)(v37 + 16 * (v12 - 2));
              v54 = *v52;
              v53 = v52[1];
              v50 = __OFSUB__(v53, v54);
              v55 = v53 - v54;
              if (v50)
                goto LABEL_122;
              v50 = __OFADD__(v42, v55);
              v56 = v42 + v55;
              if (v50)
                goto LABEL_124;
              if (v56 >= v47)
              {
                v74 = (uint64_t *)(v37 + 16 * v39);
                v76 = *v74;
                v75 = v74[1];
                v50 = __OFSUB__(v75, v76);
                v77 = v75 - v76;
                if (v50)
                  goto LABEL_130;
                v67 = v42 < v77;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v68 = *(_QWORD *)(v11 + 32);
                v69 = *(_QWORD *)(v11 + 40);
                v50 = __OFSUB__(v69, v68);
                v61 = v69 - v68;
                v62 = v50;
                goto LABEL_77;
              }
              v41 = *(_QWORD *)(v11 + 32);
              v40 = *(_QWORD *)(v11 + 40);
              v50 = __OFSUB__(v40, v41);
              v42 = v40 - v41;
              v43 = v50;
            }
            if ((v43 & 1) != 0)
              goto LABEL_123;
            v51 = v12 - 2;
            v57 = (uint64_t *)(v37 + 16 * (v12 - 2));
            v59 = *v57;
            v58 = v57[1];
            v60 = __OFSUB__(v58, v59);
            v61 = v58 - v59;
            v62 = v60;
            if (v60)
              goto LABEL_125;
            v63 = (uint64_t *)(v37 + 16 * v39);
            v65 = *v63;
            v64 = v63[1];
            v50 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v50)
              goto LABEL_127;
            if (__OFADD__(v61, v66))
              goto LABEL_129;
            if (v61 + v66 >= v42)
            {
              v67 = v42 < v66;
LABEL_83:
              if (v67)
                v39 = v51;
              goto LABEL_85;
            }
LABEL_77:
            if ((v62 & 1) != 0)
              goto LABEL_126;
            v70 = (uint64_t *)(v37 + 16 * v39);
            v72 = *v70;
            v71 = v70[1];
            v50 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v50)
              goto LABEL_128;
            if (v73 < v61)
              goto LABEL_15;
LABEL_85:
            v78 = v39 - 1;
            if (v39 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v79 = v11;
            v80 = (uint64_t *)(v37 + 16 * v78);
            v81 = *v80;
            v82 = (_QWORD *)(v37 + 16 * v39);
            v83 = v82[1];
            result = sub_214322B7C((double *)(v10 + 24 * *v80), (double *)(v10 + 24 * *v82), v10 + 24 * v83, v108);
            if (v1)
              goto LABEL_93;
            if (v83 < v81)
              goto LABEL_117;
            if (v39 > *(_QWORD *)(v79 + 16))
              goto LABEL_118;
            *v80 = v81;
            *(_QWORD *)(v37 + 16 * v78 + 8) = v83;
            v84 = *(_QWORD *)(v79 + 16);
            if (v39 >= v84)
              goto LABEL_119;
            v11 = v79;
            v12 = v84 - 1;
            result = (uint64_t)memmove((void *)(v37 + 16 * v39), v82 + 2, 16 * (v84 - 1 - v39));
            *(_QWORD *)(v79 + 16) = v84 - 1;
            v10 = v107;
            if (v84 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v105;
        v3 = v106;
        if (v9 >= v106)
        {
          v8 = v104;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v108 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v104 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v11;
    v104 = v8;
    if (v12 >= 2)
    {
      v95 = *v102;
      do
      {
        v96 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v95)
          goto LABEL_146;
        v97 = result;
        v98 = *(_QWORD *)(result + 32 + 16 * v96);
        v99 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_214322B7C((double *)(v95 + 24 * v98), (double *)(v95 + 24 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v95 + 24 * v99, v108);
        if (v1)
          break;
        if (v99 < v98)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v97);
          v97 = result;
        }
        if (v96 >= *(_QWORD *)(v97 + 16))
          goto LABEL_134;
        v100 = (_QWORD *)(v97 + 32 + 16 * v96);
        *v100 = v98;
        v100[1] = v99;
        v101 = *(_QWORD *)(v97 + 16);
        if (v12 > v101)
          goto LABEL_135;
        memmove((void *)(v97 + 32 + 16 * (v12 - 1)), (const void *)(v97 + 32 + 16 * v12), 16 * (v101 - v12));
        result = v97;
        *(_QWORD *)(v97 + 16) = v101 - 1;
        v12 = v101 - 1;
      }
      while (v101 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v104 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21432123C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double *v117;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v91 = *a1;
      v92 = *a1 + 40;
      v93 = -1;
      for (i = 1; i != v3; ++i)
      {
        v95 = *(double *)(v91 + 40 * i + 16);
        v96 = v93;
        v97 = v92;
        do
        {
          if (v95 >= *(double *)(v97 - 24))
            break;
          if (!v91)
            goto LABEL_142;
          v98 = *(_QWORD *)v97;
          v99 = *(_QWORD *)(v97 + 8);
          v100 = *(_OWORD *)(v97 + 24);
          v101 = *(_OWORD *)(v97 - 24);
          *(_OWORD *)v97 = *(_OWORD *)(v97 - 40);
          *(_OWORD *)(v97 + 16) = v101;
          *(_QWORD *)(v97 + 32) = *(_QWORD *)(v97 - 8);
          *(_QWORD *)(v97 - 32) = v99;
          *(double *)(v97 - 24) = v95;
          *(_OWORD *)(v97 - 16) = v100;
          *(_QWORD *)(v97 - 40) = v98;
          v97 -= 40;
        }
        while (!__CFADD__(v96++, 1));
        v92 += 40;
        --v93;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v111 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      sub_2141D8BF8(&qword_254D6AC18);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v7;
      v113 = result;
      v117 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v112 = *a1 + 96;
      v110 = *a1 + 24;
      v11 = MEMORY[0x24BEE4AF8];
      v114 = v6;
      v115 = v3;
      v116 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 40 * v9 + 16);
          v15 = *(double *)(v10 + 40 * v13 + 16);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v112 + 40 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 5;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 40 * v9;
              v20 = 40 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = *(_QWORD *)(v10 + v20);
                  v25 = v10 + v19;
                  v26 = *(_OWORD *)(v10 + v20 + 8);
                  v27 = *(_OWORD *)(v10 + v20 + 24);
                  v28 = *(_QWORD *)(v10 + v19 - 8);
                  v29 = *(_OWORD *)(v10 + v19 - 24);
                  *(_OWORD *)v23 = *(_OWORD *)(v10 + v19 - 40);
                  *(_OWORD *)(v23 + 16) = v29;
                  *(_QWORD *)(v23 + 32) = v28;
                  *(_QWORD *)(v25 - 40) = v24;
                  *(_OWORD *)(v25 - 32) = v26;
                  *(_OWORD *)(v25 - 16) = v27;
                }
                ++v22;
                v19 -= 40;
                v20 += 40;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v30 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v30 >= v3)
              v30 = v3;
            if (v30 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v30)
            {
              v31 = v110 + 40 * v9;
              do
              {
                v32 = *(double *)(v10 + 40 * v9 + 16);
                v33 = v13;
                v34 = v31;
                do
                {
                  if (v32 >= *(double *)(v34 - 48))
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v35 = v34 - 24;
                  v36 = *(_QWORD *)(v34 - 32);
                  v38 = *(_OWORD *)(v34 - 64);
                  v37 = *(_OWORD *)(v34 - 48);
                  *(_OWORD *)(v34 - 40) = *(_OWORD *)v34;
                  v34 -= 40;
                  v39 = *(_QWORD *)(v34 + 16);
                  v40 = *(_QWORD *)(v34 + 24);
                  *(_OWORD *)v35 = v38;
                  *(_OWORD *)(v35 + 16) = v37;
                  *(_QWORD *)(v35 + 32) = v36;
                  *(_QWORD *)(v34 - 24) = v39;
                  *(_QWORD *)(v34 - 16) = v40;
                  *(double *)(v34 - 8) = v32;
                  ++v33;
                }
                while (v9 != v33);
                ++v9;
                v31 += 40;
              }
              while (v9 != v30);
              v9 = v30;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v42 = *(_QWORD *)(v11 + 16);
        v41 = *(_QWORD *)(v11 + 24);
        v12 = v42 + 1;
        v10 = v116;
        if (v42 >= v41 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v41 > 1), v42 + 1, 1, (char *)v11);
          v10 = v116;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v43 = v11 + 32;
        v44 = (uint64_t *)(v11 + 32 + 16 * v42);
        *v44 = v13;
        v44[1] = v9;
        if (v42)
        {
          while (1)
          {
            v45 = v12 - 1;
            if (v12 >= 4)
            {
              v50 = v43 + 16 * v12;
              v51 = *(_QWORD *)(v50 - 64);
              v52 = *(_QWORD *)(v50 - 56);
              v56 = __OFSUB__(v52, v51);
              v53 = v52 - v51;
              if (v56)
                goto LABEL_120;
              v55 = *(_QWORD *)(v50 - 48);
              v54 = *(_QWORD *)(v50 - 40);
              v56 = __OFSUB__(v54, v55);
              v48 = v54 - v55;
              v49 = v56;
              if (v56)
                goto LABEL_121;
              v57 = v12 - 2;
              v58 = (uint64_t *)(v43 + 16 * (v12 - 2));
              v60 = *v58;
              v59 = v58[1];
              v56 = __OFSUB__(v59, v60);
              v61 = v59 - v60;
              if (v56)
                goto LABEL_122;
              v56 = __OFADD__(v48, v61);
              v62 = v48 + v61;
              if (v56)
                goto LABEL_124;
              if (v62 >= v53)
              {
                v80 = (uint64_t *)(v43 + 16 * v45);
                v82 = *v80;
                v81 = v80[1];
                v56 = __OFSUB__(v81, v82);
                v83 = v81 - v82;
                if (v56)
                  goto LABEL_130;
                v73 = v48 < v83;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v74 = *(_QWORD *)(v11 + 32);
                v75 = *(_QWORD *)(v11 + 40);
                v56 = __OFSUB__(v75, v74);
                v67 = v75 - v74;
                v68 = v56;
                goto LABEL_77;
              }
              v47 = *(_QWORD *)(v11 + 32);
              v46 = *(_QWORD *)(v11 + 40);
              v56 = __OFSUB__(v46, v47);
              v48 = v46 - v47;
              v49 = v56;
            }
            if ((v49 & 1) != 0)
              goto LABEL_123;
            v57 = v12 - 2;
            v63 = (uint64_t *)(v43 + 16 * (v12 - 2));
            v65 = *v63;
            v64 = v63[1];
            v66 = __OFSUB__(v64, v65);
            v67 = v64 - v65;
            v68 = v66;
            if (v66)
              goto LABEL_125;
            v69 = (uint64_t *)(v43 + 16 * v45);
            v71 = *v69;
            v70 = v69[1];
            v56 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            if (v56)
              goto LABEL_127;
            if (__OFADD__(v67, v72))
              goto LABEL_129;
            if (v67 + v72 >= v48)
            {
              v73 = v48 < v72;
LABEL_83:
              if (v73)
                v45 = v57;
              goto LABEL_85;
            }
LABEL_77:
            if ((v68 & 1) != 0)
              goto LABEL_126;
            v76 = (uint64_t *)(v43 + 16 * v45);
            v78 = *v76;
            v77 = v76[1];
            v56 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v56)
              goto LABEL_128;
            if (v79 < v67)
              goto LABEL_15;
LABEL_85:
            v84 = v45 - 1;
            if (v45 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v85 = v11;
            v86 = (uint64_t *)(v43 + 16 * v84);
            v87 = *v86;
            v88 = (_QWORD *)(v43 + 16 * v45);
            v89 = v88[1];
            result = sub_214322DD8((double *)(v10 + 40 * *v86), (double *)(v10 + 40 * *v88), v10 + 40 * v89, v117);
            if (v1)
              goto LABEL_93;
            if (v89 < v87)
              goto LABEL_117;
            if (v45 > *(_QWORD *)(v85 + 16))
              goto LABEL_118;
            *v86 = v87;
            *(_QWORD *)(v43 + 16 * v84 + 8) = v89;
            v90 = *(_QWORD *)(v85 + 16);
            if (v45 >= v90)
              goto LABEL_119;
            v11 = v85;
            v12 = v90 - 1;
            result = (uint64_t)memmove((void *)(v43 + 16 * v45), v88 + 2, 16 * (v90 - 1 - v45));
            *(_QWORD *)(v85 + 16) = v90 - 1;
            v10 = v116;
            if (v90 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v114;
        v3 = v115;
        if (v9 >= v115)
        {
          v8 = v113;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v117 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v113 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v11;
    v113 = v8;
    if (v12 >= 2)
    {
      v103 = *v111;
      do
      {
        v104 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v103)
          goto LABEL_146;
        v105 = result;
        v106 = *(_QWORD *)(result + 32 + 16 * v104);
        v107 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_214322DD8((double *)(v103 + 40 * v106), (double *)(v103 + 40 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v103 + 40 * v107, v117);
        if (v1)
          break;
        if (v107 < v106)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v105);
          v105 = result;
        }
        if (v104 >= *(_QWORD *)(v105 + 16))
          goto LABEL_134;
        v108 = (_QWORD *)(v105 + 32 + 16 * v104);
        *v108 = v106;
        v108[1] = v107;
        v109 = *(_QWORD *)(v105 + 16);
        if (v12 > v109)
          goto LABEL_135;
        memmove((void *)(v105 + 32 + 16 * (v12 - 1)), (const void *)(v105 + 32 + 16 * v12), 16 * (v109 - v12));
        result = v105;
        *(_QWORD *)(v105 + 16) = v109 - 1;
        v12 = v109 - 1;
      }
      while (v109 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v113 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_214321938(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double *v117;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v91 = *a1;
      v92 = *a1 + 40;
      v93 = -1;
      for (i = 1; i != v3; ++i)
      {
        v95 = *(double *)(v91 + 40 * i + 8);
        v96 = v93;
        v97 = v92;
        do
        {
          if (v95 >= *(double *)(v97 - 32))
            break;
          if (!v91)
            goto LABEL_142;
          v98 = *(_QWORD *)v97;
          v99 = *(_QWORD *)(v97 + 32);
          v100 = *(_OWORD *)(v97 + 16);
          v101 = *(_OWORD *)(v97 - 24);
          *(_OWORD *)v97 = *(_OWORD *)(v97 - 40);
          *(_OWORD *)(v97 + 16) = v101;
          *(_QWORD *)(v97 + 32) = *(_QWORD *)(v97 - 8);
          *(double *)(v97 - 32) = v95;
          *(_OWORD *)(v97 - 24) = v100;
          *(_QWORD *)(v97 - 8) = v99;
          *(_QWORD *)(v97 - 40) = v98;
          v97 -= 40;
        }
        while (!__CFADD__(v96++, 1));
        v92 += 40;
        --v93;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v111 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      sub_2141D8BF8(&qword_254D6AC18);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v7;
      v113 = result;
      v117 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v112 = *a1 + 88;
      v110 = *a1 + 32;
      v11 = MEMORY[0x24BEE4AF8];
      v114 = v6;
      v115 = v3;
      v116 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 40 * v9 + 8);
          v15 = *(double *)(v10 + 40 * v13 + 8);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v112 + 40 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 5;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 40 * v9;
              v20 = 40 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = *(_QWORD *)(v10 + v20);
                  v25 = v10 + v19;
                  v26 = *(_OWORD *)(v10 + v20 + 8);
                  v27 = *(_OWORD *)(v10 + v20 + 24);
                  v28 = *(_QWORD *)(v10 + v19 - 8);
                  v29 = *(_OWORD *)(v10 + v19 - 24);
                  *(_OWORD *)v23 = *(_OWORD *)(v10 + v19 - 40);
                  *(_OWORD *)(v23 + 16) = v29;
                  *(_QWORD *)(v23 + 32) = v28;
                  *(_QWORD *)(v25 - 40) = v24;
                  *(_OWORD *)(v25 - 32) = v26;
                  *(_OWORD *)(v25 - 16) = v27;
                }
                ++v22;
                v19 -= 40;
                v20 += 40;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v30 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v30 >= v3)
              v30 = v3;
            if (v30 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v30)
            {
              v31 = v110 + 40 * v9;
              do
              {
                v32 = *(double *)(v10 + 40 * v9 + 8);
                v33 = v13;
                v34 = v31;
                do
                {
                  if (v32 >= *(double *)(v34 - 64))
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v35 = v34 - 32;
                  v36 = (_OWORD *)(v34 - 72);
                  v37 = *(_QWORD *)(v34 - 40);
                  *(_QWORD *)(v34 - 40) = *(_QWORD *)v34;
                  v34 -= 40;
                  v38 = *(_QWORD *)(v34 + 8);
                  v39 = *(_OWORD *)(v34 + 24);
                  v40 = v36[1];
                  *(_OWORD *)v35 = *v36;
                  *(_OWORD *)(v35 + 16) = v40;
                  *(_QWORD *)(v35 + 32) = v37;
                  *(_QWORD *)(v34 - 32) = v38;
                  *(double *)(v34 - 24) = v32;
                  *(_OWORD *)(v34 - 16) = v39;
                  ++v33;
                }
                while (v9 != v33);
                ++v9;
                v31 += 40;
              }
              while (v9 != v30);
              v9 = v30;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v42 = *(_QWORD *)(v11 + 16);
        v41 = *(_QWORD *)(v11 + 24);
        v12 = v42 + 1;
        v10 = v116;
        if (v42 >= v41 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v41 > 1), v42 + 1, 1, (char *)v11);
          v10 = v116;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v43 = v11 + 32;
        v44 = (uint64_t *)(v11 + 32 + 16 * v42);
        *v44 = v13;
        v44[1] = v9;
        if (v42)
        {
          while (1)
          {
            v45 = v12 - 1;
            if (v12 >= 4)
            {
              v50 = v43 + 16 * v12;
              v51 = *(_QWORD *)(v50 - 64);
              v52 = *(_QWORD *)(v50 - 56);
              v56 = __OFSUB__(v52, v51);
              v53 = v52 - v51;
              if (v56)
                goto LABEL_120;
              v55 = *(_QWORD *)(v50 - 48);
              v54 = *(_QWORD *)(v50 - 40);
              v56 = __OFSUB__(v54, v55);
              v48 = v54 - v55;
              v49 = v56;
              if (v56)
                goto LABEL_121;
              v57 = v12 - 2;
              v58 = (uint64_t *)(v43 + 16 * (v12 - 2));
              v60 = *v58;
              v59 = v58[1];
              v56 = __OFSUB__(v59, v60);
              v61 = v59 - v60;
              if (v56)
                goto LABEL_122;
              v56 = __OFADD__(v48, v61);
              v62 = v48 + v61;
              if (v56)
                goto LABEL_124;
              if (v62 >= v53)
              {
                v80 = (uint64_t *)(v43 + 16 * v45);
                v82 = *v80;
                v81 = v80[1];
                v56 = __OFSUB__(v81, v82);
                v83 = v81 - v82;
                if (v56)
                  goto LABEL_130;
                v73 = v48 < v83;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v74 = *(_QWORD *)(v11 + 32);
                v75 = *(_QWORD *)(v11 + 40);
                v56 = __OFSUB__(v75, v74);
                v67 = v75 - v74;
                v68 = v56;
                goto LABEL_77;
              }
              v47 = *(_QWORD *)(v11 + 32);
              v46 = *(_QWORD *)(v11 + 40);
              v56 = __OFSUB__(v46, v47);
              v48 = v46 - v47;
              v49 = v56;
            }
            if ((v49 & 1) != 0)
              goto LABEL_123;
            v57 = v12 - 2;
            v63 = (uint64_t *)(v43 + 16 * (v12 - 2));
            v65 = *v63;
            v64 = v63[1];
            v66 = __OFSUB__(v64, v65);
            v67 = v64 - v65;
            v68 = v66;
            if (v66)
              goto LABEL_125;
            v69 = (uint64_t *)(v43 + 16 * v45);
            v71 = *v69;
            v70 = v69[1];
            v56 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            if (v56)
              goto LABEL_127;
            if (__OFADD__(v67, v72))
              goto LABEL_129;
            if (v67 + v72 >= v48)
            {
              v73 = v48 < v72;
LABEL_83:
              if (v73)
                v45 = v57;
              goto LABEL_85;
            }
LABEL_77:
            if ((v68 & 1) != 0)
              goto LABEL_126;
            v76 = (uint64_t *)(v43 + 16 * v45);
            v78 = *v76;
            v77 = v76[1];
            v56 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v56)
              goto LABEL_128;
            if (v79 < v67)
              goto LABEL_15;
LABEL_85:
            v84 = v45 - 1;
            if (v45 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v85 = v11;
            v86 = (uint64_t *)(v43 + 16 * v84);
            v87 = *v86;
            v88 = (_QWORD *)(v43 + 16 * v45);
            v89 = v88[1];
            result = sub_21432302C((double *)(v10 + 40 * *v86), (double *)(v10 + 40 * *v88), v10 + 40 * v89, v117);
            if (v1)
              goto LABEL_93;
            if (v89 < v87)
              goto LABEL_117;
            if (v45 > *(_QWORD *)(v85 + 16))
              goto LABEL_118;
            *v86 = v87;
            *(_QWORD *)(v43 + 16 * v84 + 8) = v89;
            v90 = *(_QWORD *)(v85 + 16);
            if (v45 >= v90)
              goto LABEL_119;
            v11 = v85;
            v12 = v90 - 1;
            result = (uint64_t)memmove((void *)(v43 + 16 * v45), v88 + 2, 16 * (v90 - 1 - v45));
            *(_QWORD *)(v85 + 16) = v90 - 1;
            v10 = v116;
            if (v90 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v114;
        v3 = v115;
        if (v9 >= v115)
        {
          v8 = v113;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v117 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v113 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v11;
    v113 = v8;
    if (v12 >= 2)
    {
      v103 = *v111;
      do
      {
        v104 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v103)
          goto LABEL_146;
        v105 = result;
        v106 = *(_QWORD *)(result + 32 + 16 * v104);
        v107 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_21432302C((double *)(v103 + 40 * v106), (double *)(v103 + 40 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v103 + 40 * v107, v117);
        if (v1)
          break;
        if (v107 < v106)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v105);
          v105 = result;
        }
        if (v104 >= *(_QWORD *)(v105 + 16))
          goto LABEL_134;
        v108 = (_QWORD *)(v105 + 32 + 16 * v104);
        *v108 = v106;
        v108[1] = v107;
        v109 = *(_QWORD *)(v105 + 16);
        if (v12 > v109)
          goto LABEL_135;
        memmove((void *)(v105 + 32 + 16 * (v12 - 1)), (const void *)(v105 + 32 + 16 * v12), 16 * (v109 - v12));
        result = v105;
        *(_QWORD *)(v105 + 16) = v109 - 1;
        v12 = v109 - 1;
      }
      while (v109 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v113 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21432203C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _QWORD v104[99];
  _QWORD __dst[100];
  uint64_t *v106;

  v2 = v1;
  v4 = a1[1];
  result = sub_214425730();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_137;
    if (v4)
      return sub_2143227EC(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_136;
  v106 = a1;
  v99 = result;
  if (v4 > 1)
  {
    v103 = v1;
    v7 = v6 >> 1;
    sub_2141D8BF8(&qword_253F13338);
    result = sub_21442504C();
    *(_QWORD *)(result + 16) = v7;
    v98 = result;
    v102 = (char *)(result + 32);
LABEL_13:
    v9 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v11 = v9++;
      v101 = v11;
      if (v9 >= v4)
      {
        v12 = v106;
      }
      else
      {
        v12 = v106;
        v13 = *v106;
        sub_2141E070C(*v106 + 792 * v9, (uint64_t)__dst, &qword_253F13338);
        sub_2141E070C(v13 + 792 * v11, (uint64_t)v104, &qword_253F13338);
        v14 = __dst[0];
        v15 = v4;
        v16 = v104[0];
        sub_2141E0750((uint64_t)v104, &qword_253F13338);
        result = sub_2141E0750((uint64_t)__dst, &qword_253F13338);
        v9 = v11 + 2;
        v100 = v15;
        if (v11 + 2 >= v15)
        {
          v18 = v13;
          if (v14 >= v16)
            goto LABEL_34;
        }
        else
        {
          v96 = v8;
          v17 = v13 + 792 * v11 + 792;
          v18 = v13;
          while (1)
          {
            sub_2141E070C(v17 + 792, (uint64_t)__dst, &qword_253F13338);
            sub_2141E070C(v17, (uint64_t)v104, &qword_253F13338);
            v19 = __dst[0] >= v104[0];
            sub_2141E0750((uint64_t)v104, &qword_253F13338);
            result = sub_2141E0750((uint64_t)__dst, &qword_253F13338);
            if (v14 < v16 == v19)
              break;
            ++v9;
            v17 += 792;
            if (v100 == v9)
            {
              v9 = v100;
              break;
            }
          }
          v8 = v96;
          v12 = v106;
          if (v14 >= v16)
            goto LABEL_34;
        }
        v4 = v100;
        if (v9 < v11)
          goto LABEL_138;
        if (v11 < v9)
        {
          v20 = (char *)(v18 + 792 * v9 - 792);
          v21 = v11;
          v22 = (char *)(v18 + 792 * v11);
          v23 = v9;
          do
          {
            if (v21 != --v23)
            {
              if (!v18)
                goto LABEL_143;
              memcpy(__dst, v22, 0x311uLL);
              memmove(v22, v20, 0x318uLL);
              result = (uint64_t)memcpy(v20, __dst, 0x311uLL);
            }
            ++v21;
            v20 -= 792;
            v22 += 792;
          }
          while (v21 < v23);
          v12 = v106;
          v11 = v101;
LABEL_34:
          v4 = v100;
        }
      }
      if (v9 < v4)
      {
        if (__OFSUB__(v9, v11))
          goto LABEL_135;
        if (v9 - v11 < v99)
        {
          if (__OFADD__(v11, v99))
            goto LABEL_139;
          if (v11 + v99 >= v4)
            v24 = v4;
          else
            v24 = v11 + v99;
          if (v24 < v11)
          {
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            return result;
          }
          if (v9 != v24)
          {
            v97 = v8;
            v25 = 792 * v9;
            do
            {
              v26 = v11;
              v27 = v25;
              do
              {
                v28 = *v12 + v27;
                sub_2141E070C(v28, (uint64_t)__dst, &qword_253F13338);
                sub_2141E070C(v28 - 792, (uint64_t)v104, &qword_253F13338);
                v29 = __dst[0];
                v30 = v104[0];
                sub_2141E0750((uint64_t)v104, &qword_253F13338);
                result = sub_2141E0750((uint64_t)__dst, &qword_253F13338);
                if (v29 >= v30)
                  break;
                v31 = *v12;
                if (!*v12)
                  goto LABEL_141;
                v32 = (void *)(v31 + v27);
                v33 = (void *)(v31 + v27 - 792);
                memcpy(__dst, (const void *)(v31 + v27), 0x311uLL);
                memcpy(v32, v33, 0x318uLL);
                result = (uint64_t)memcpy(v33, __dst, 0x311uLL);
                v27 -= 792;
                ++v26;
                v12 = v106;
              }
              while (v9 != v26);
              ++v9;
              v25 += 792;
              v11 = v101;
            }
            while (v9 != v24);
            v9 = v24;
            v8 = v97;
          }
        }
      }
      if (v9 < v11)
        goto LABEL_130;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v8 = result;
      }
      v35 = *(_QWORD *)(v8 + 16);
      v34 = *(_QWORD *)(v8 + 24);
      v10 = v35 + 1;
      if (v35 >= v34 >> 1)
      {
        result = (uint64_t)sub_214224E24((char *)(v34 > 1), v35 + 1, 1, (char *)v8);
        v8 = result;
      }
      *(_QWORD *)(v8 + 16) = v10;
      v36 = v8 + 32;
      v37 = (uint64_t *)(v8 + 32 + 16 * v35);
      *v37 = v11;
      v37[1] = v9;
      if (v35)
      {
        while (1)
        {
          v38 = v10 - 1;
          if (v10 >= 4)
          {
            v43 = v36 + 16 * v10;
            v44 = *(_QWORD *)(v43 - 64);
            v45 = *(_QWORD *)(v43 - 56);
            v49 = __OFSUB__(v45, v44);
            v46 = v45 - v44;
            if (v49)
              goto LABEL_119;
            v48 = *(_QWORD *)(v43 - 48);
            v47 = *(_QWORD *)(v43 - 40);
            v49 = __OFSUB__(v47, v48);
            v41 = v47 - v48;
            v42 = v49;
            if (v49)
              goto LABEL_120;
            v50 = v10 - 2;
            v51 = (uint64_t *)(v36 + 16 * (v10 - 2));
            v53 = *v51;
            v52 = v51[1];
            v49 = __OFSUB__(v52, v53);
            v54 = v52 - v53;
            if (v49)
              goto LABEL_121;
            v49 = __OFADD__(v41, v54);
            v55 = v41 + v54;
            if (v49)
              goto LABEL_123;
            if (v55 >= v46)
            {
              v73 = (uint64_t *)(v36 + 16 * v38);
              v75 = *v73;
              v74 = v73[1];
              v49 = __OFSUB__(v74, v75);
              v76 = v74 - v75;
              if (v49)
                goto LABEL_129;
              v66 = v41 < v76;
              goto LABEL_89;
            }
          }
          else
          {
            if (v10 != 3)
            {
              v67 = *(_QWORD *)(v8 + 32);
              v68 = *(_QWORD *)(v8 + 40);
              v49 = __OFSUB__(v68, v67);
              v60 = v68 - v67;
              v61 = v49;
              goto LABEL_83;
            }
            v40 = *(_QWORD *)(v8 + 32);
            v39 = *(_QWORD *)(v8 + 40);
            v49 = __OFSUB__(v39, v40);
            v41 = v39 - v40;
            v42 = v49;
          }
          if ((v42 & 1) != 0)
            goto LABEL_122;
          v50 = v10 - 2;
          v56 = (uint64_t *)(v36 + 16 * (v10 - 2));
          v58 = *v56;
          v57 = v56[1];
          v59 = __OFSUB__(v57, v58);
          v60 = v57 - v58;
          v61 = v59;
          if (v59)
            goto LABEL_124;
          v62 = (uint64_t *)(v36 + 16 * v38);
          v64 = *v62;
          v63 = v62[1];
          v49 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v49)
            goto LABEL_126;
          if (__OFADD__(v60, v65))
            goto LABEL_128;
          if (v60 + v65 >= v41)
          {
            v66 = v41 < v65;
LABEL_89:
            if (v66)
              v38 = v50;
            goto LABEL_91;
          }
LABEL_83:
          if ((v61 & 1) != 0)
            goto LABEL_125;
          v69 = (uint64_t *)(v36 + 16 * v38);
          v71 = *v69;
          v70 = v69[1];
          v49 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          if (v49)
            goto LABEL_127;
          if (v72 < v60)
            goto LABEL_15;
LABEL_91:
          v77 = v38 - 1;
          if (v38 - 1 >= v10)
          {
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }
          if (!*v106)
            goto LABEL_142;
          v78 = v9;
          v79 = v8;
          v80 = (uint64_t *)(v36 + 16 * v77);
          v81 = *v80;
          v82 = v36;
          v83 = v38;
          v84 = (_QWORD *)(v36 + 16 * v38);
          v85 = v84[1];
          result = sub_214323280((char *)(*v106 + 792 * *v80), (char *)(*v106 + 792 * *v84), *v106 + 792 * v85, v102);
          if (v103)
            goto LABEL_99;
          if (v85 < v81)
            goto LABEL_116;
          if (v83 > *(_QWORD *)(v79 + 16))
            goto LABEL_117;
          *v80 = v81;
          *(_QWORD *)(v82 + 16 * v77 + 8) = v85;
          v86 = *(_QWORD *)(v79 + 16);
          if (v83 >= v86)
            goto LABEL_118;
          v8 = v79;
          v10 = v86 - 1;
          result = (uint64_t)memmove(v84, v84 + 2, 16 * (v86 - 1 - v83));
          v36 = v82;
          *(_QWORD *)(v79 + 16) = v86 - 1;
          v9 = v78;
          if (v86 <= 2)
            goto LABEL_15;
        }
      }
      v10 = 1;
LABEL_15:
      v4 = v106[1];
      if (v9 >= v4)
      {
        v2 = v103;
        goto LABEL_102;
      }
    }
  }
  v8 = MEMORY[0x24BEE4AF8];
  v102 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  v98 = MEMORY[0x24BEE4AF8];
  if (v4 == 1)
  {
    v103 = v1;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_102:
  result = v8;
  if (v10 >= 2)
  {
    v87 = *v106;
    do
    {
      v88 = v10 - 2;
      if (v10 < 2)
        goto LABEL_131;
      if (!v87)
        goto LABEL_144;
      v89 = result;
      v90 = *(_QWORD *)(result + 32 + 16 * v88);
      v91 = *(_QWORD *)(result + 32 + 16 * (v10 - 1) + 8);
      result = sub_214323280((char *)(v87 + 792 * v90), (char *)(v87 + 792 * *(_QWORD *)(result + 32 + 16 * (v10 - 1))), v87 + 792 * v91, v102);
      if (v2)
        break;
      if (v91 < v90)
        goto LABEL_132;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_21435010C(v89);
        v89 = result;
      }
      if (v88 >= *(_QWORD *)(v89 + 16))
        goto LABEL_133;
      v92 = v89 + 32;
      v93 = (_QWORD *)(v89 + 32 + 16 * v88);
      *v93 = v90;
      v93[1] = v91;
      v94 = v89;
      v95 = *(_QWORD *)(v89 + 16);
      if (v10 > v95)
        goto LABEL_134;
      memmove((void *)(v92 + 16 * (v10 - 1)), (const void *)(v92 + 16 * v10), 16 * (v95 - v10));
      result = v94;
      *(_QWORD *)(v94 + 16) = v95 - 1;
      v10 = v95 - 1;
    }
    while (v95 > 2);
  }
LABEL_99:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v98 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143227EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD v16[99];
  _QWORD __dst[100];
  uint64_t v18;

  v18 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v7 = 792 * a3;
LABEL_5:
    v8 = v18;
    v9 = v7;
    while (1)
    {
      v10 = *a4 + v9;
      sub_2141E070C(v10, (uint64_t)__dst, &qword_253F13338);
      sub_2141E070C(v10 - 792, (uint64_t)v16, &qword_253F13338);
      v11 = __dst[0];
      v12 = v16[0];
      sub_2141E0750((uint64_t)v16, &qword_253F13338);
      result = sub_2141E0750((uint64_t)__dst, &qword_253F13338);
      if (v11 >= v12)
      {
LABEL_4:
        ++v5;
        v7 += 792;
        if (v5 == a2)
          return result;
        goto LABEL_5;
      }
      v13 = *a4;
      if (!*a4)
        break;
      v14 = (void *)(v13 + v9);
      v15 = (void *)(v13 + v9 - 792);
      memcpy(__dst, (const void *)(v13 + v9), 0x311uLL);
      memcpy(v14, v15, 0x318uLL);
      result = (uint64_t)memcpy(v15, __dst, 0x311uLL);
      v9 -= 792;
      if (v5 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_214322920(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  unint64_t v17;
  double *v18;
  double *v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 24;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[3 * v11] <= a4)
      memmove(a4, __src, 24 * v11);
    v12 = &v4[3 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_39;
    v17 = a3 - 24;
    while (1)
    {
      v18 = (double *)(v17 + 24);
      if (*(v12 - 1) >= *(v6 - 1))
      {
        v19 = v12 - 3;
        if (v18 != v12)
        {
          v12 -= 3;
          goto LABEL_36;
        }
        v20 = v17 >= (unint64_t)v12;
        v12 -= 3;
        if (v20)
          goto LABEL_36;
      }
      else
      {
        v19 = v6 - 3;
        if (v18 != v6)
        {
          v6 -= 3;
LABEL_36:
          v21 = *(_OWORD *)v19;
          *(double *)(v17 + 16) = v19[2];
          *(_OWORD *)v17 = v21;
          goto LABEL_37;
        }
        v20 = v17 >= (unint64_t)v6;
        v6 -= 3;
        if (v20)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v17 -= 24;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[3 * v9] <= a4)
    memmove(a4, __dst, 24 * v9);
  v12 = &v4[3 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (v6[2] >= v4[2])
      {
        v15 = v4 + 3;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 3;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 3;
        }
      }
      else
      {
        v13 = v6 + 3;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      v16 = *(_OWORD *)v14;
      v7[2] = v14[2];
      *(_OWORD *)v7 = v16;
LABEL_16:
      v7 += 3;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v22 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[3 * v23])
    memmove(v6, v4, 24 * v23);
  return 1;
}

uint64_t sub_214322B7C(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  unint64_t v17;
  double *v18;
  double *v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 24;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[3 * v11] <= a4)
      memmove(a4, __src, 24 * v11);
    v12 = &v4[3 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_39;
    v17 = a3 - 24;
    while (1)
    {
      v18 = (double *)(v17 + 24);
      if (*(v12 - 2) >= *(v6 - 2))
      {
        v19 = v12 - 3;
        if (v18 != v12)
        {
          v12 -= 3;
          goto LABEL_36;
        }
        v20 = v17 >= (unint64_t)v12;
        v12 -= 3;
        if (v20)
          goto LABEL_36;
      }
      else
      {
        v19 = v6 - 3;
        if (v18 != v6)
        {
          v6 -= 3;
LABEL_36:
          v21 = *(_OWORD *)v19;
          *(double *)(v17 + 16) = v19[2];
          *(_OWORD *)v17 = v21;
          goto LABEL_37;
        }
        v20 = v17 >= (unint64_t)v6;
        v6 -= 3;
        if (v20)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v17 -= 24;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[3 * v9] <= a4)
    memmove(a4, __dst, 24 * v9);
  v12 = &v4[3 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (v6[1] >= v4[1])
      {
        v15 = v4 + 3;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 3;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 3;
        }
      }
      else
      {
        v13 = v6 + 3;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      v16 = *(_OWORD *)v14;
      v7[2] = v14[2];
      *(_OWORD *)v7 = v16;
LABEL_16:
      v7 += 3;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v22 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[3 * v23])
    memmove(v6, v4, 24 * v23);
  return 1;
}

uint64_t sub_214322DD8(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  double *v19;
  double *v20;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 40;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 40;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[5 * v11] <= a4)
      memmove(a4, __src, 40 * v11);
    v12 = &v4[5 * v11];
    if (v7 >= v6 || v10 < 40)
      goto LABEL_39;
    v18 = a3 - 40;
    while (1)
    {
      v19 = (double *)(v18 + 40);
      if (*(v12 - 3) >= *(v6 - 3))
      {
        v20 = v12 - 5;
        if (v19 != v12)
        {
          v12 -= 5;
          goto LABEL_36;
        }
        v21 = v18 >= (unint64_t)v12;
        v12 -= 5;
        if (v21)
          goto LABEL_36;
      }
      else
      {
        v20 = v6 - 5;
        if (v19 != v6)
        {
          v6 -= 5;
LABEL_36:
          v22 = *(_OWORD *)v20;
          v23 = *((_OWORD *)v20 + 1);
          *(double *)(v18 + 32) = v20[4];
          *(_OWORD *)v18 = v22;
          *(_OWORD *)(v18 + 16) = v23;
          goto LABEL_37;
        }
        v21 = v18 >= (unint64_t)v6;
        v6 -= 5;
        if (v21)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v18 -= 40;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[5 * v9] <= a4)
    memmove(a4, __dst, 40 * v9);
  v12 = &v4[5 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 40)
  {
    while (1)
    {
      if (v6[2] >= v4[2])
      {
        v15 = v4 + 5;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 5;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 5;
        }
      }
      else
      {
        v13 = v6 + 5;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      v16 = *(_OWORD *)v14;
      v17 = *((_OWORD *)v14 + 1);
      v7[4] = v14[4];
      *(_OWORD *)v7 = v16;
      *((_OWORD *)v7 + 1) = v17;
LABEL_16:
      v7 += 5;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v24 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x6666666666666667) >> 64;
  v25 = (v24 >> 4) + ((unint64_t)v24 >> 63);
  if (v6 != v4 || v6 >= &v4[5 * v25])
    memmove(v6, v4, 40 * v25);
  return 1;
}

uint64_t sub_21432302C(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  double *v19;
  double *v20;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 40;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 40;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[5 * v11] <= a4)
      memmove(a4, __src, 40 * v11);
    v12 = &v4[5 * v11];
    if (v7 >= v6 || v10 < 40)
      goto LABEL_39;
    v18 = a3 - 40;
    while (1)
    {
      v19 = (double *)(v18 + 40);
      if (*(v12 - 4) >= *(v6 - 4))
      {
        v20 = v12 - 5;
        if (v19 != v12)
        {
          v12 -= 5;
          goto LABEL_36;
        }
        v21 = v18 >= (unint64_t)v12;
        v12 -= 5;
        if (v21)
          goto LABEL_36;
      }
      else
      {
        v20 = v6 - 5;
        if (v19 != v6)
        {
          v6 -= 5;
LABEL_36:
          v22 = *(_OWORD *)v20;
          v23 = *((_OWORD *)v20 + 1);
          *(double *)(v18 + 32) = v20[4];
          *(_OWORD *)v18 = v22;
          *(_OWORD *)(v18 + 16) = v23;
          goto LABEL_37;
        }
        v21 = v18 >= (unint64_t)v6;
        v6 -= 5;
        if (v21)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v18 -= 40;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[5 * v9] <= a4)
    memmove(a4, __dst, 40 * v9);
  v12 = &v4[5 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 40)
  {
    while (1)
    {
      if (v6[1] >= v4[1])
      {
        v15 = v4 + 5;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 5;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 5;
        }
      }
      else
      {
        v13 = v6 + 5;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      v16 = *(_OWORD *)v14;
      v17 = *((_OWORD *)v14 + 1);
      v7[4] = v14[4];
      *(_OWORD *)v7 = v16;
      *((_OWORD *)v7 + 1) = v17;
LABEL_16:
      v7 += 5;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v24 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x6666666666666667) >> 64;
  v25 = (v24 >> 4) + ((unint64_t)v24 >> 63);
  if (v6 != v4 || v6 >= &v4[5 * v25])
    memmove(v6, v4, 40 * v25);
  return 1;
}

uint64_t sub_214323280(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  size_t v26;
  char *v28;
  _QWORD v29[99];
  _QWORD v30[100];
  char *v31;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 792;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 792;
  if (v9 >= v11)
  {
    v19 = 792 * v11;
    if (a4 != __src || &__src[v19] <= a4)
      memmove(a4, __src, 792 * v11);
    v13 = &v4[v19];
    if (v7 >= v6 || v10 < 792)
      goto LABEL_39;
    v20 = (char *)(a3 - 792);
    v28 = v7;
    v31 = v4;
    while (1)
    {
      v21 = v20 + 792;
      sub_2141E070C((uint64_t)(v13 - 792), (uint64_t)v30, &qword_253F13338);
      v22 = v6 - 792;
      sub_2141E070C((uint64_t)(v6 - 792), (uint64_t)v29, &qword_253F13338);
      v23 = v30[0];
      v24 = v29[0];
      sub_2141E0750((uint64_t)v29, &qword_253F13338);
      sub_2141E0750((uint64_t)v30, &qword_253F13338);
      if (v23 >= v24)
      {
        v4 = v31;
        v22 = v13 - 792;
        if (v21 != v13)
        {
          v13 -= 792;
          goto LABEL_36;
        }
        v25 = v20 >= v13;
        v13 -= 792;
        if (v25)
          goto LABEL_36;
      }
      else
      {
        v4 = v31;
        if (v21 != v6)
        {
          v6 -= 792;
LABEL_36:
          memmove(v20, v22, 0x318uLL);
          goto LABEL_37;
        }
        v25 = v20 >= v6;
        v6 -= 792;
        if (v25)
          goto LABEL_36;
      }
LABEL_37:
      if (v13 > v4)
      {
        v20 -= 792;
        if (v6 > v28)
          continue;
      }
      goto LABEL_39;
    }
  }
  v12 = 792 * v9;
  if (a4 != __dst || &__dst[v12] <= a4)
    memmove(a4, __dst, v12);
  v13 = &v4[v12];
  if ((unint64_t)v6 < a3 && v8 >= 792)
  {
    while (1)
    {
      sub_2141E070C((uint64_t)v6, (uint64_t)v30, &qword_253F13338);
      sub_2141E070C((uint64_t)v4, (uint64_t)v29, &qword_253F13338);
      v14 = v30[0];
      v15 = v29[0];
      sub_2141E0750((uint64_t)v29, &qword_253F13338);
      sub_2141E0750((uint64_t)v30, &qword_253F13338);
      if (v14 >= v15)
      {
        v18 = v4 + 792;
        v17 = v4;
        v16 = v6;
        if (v7 == v4)
        {
          v4 += 792;
          if (v7 < v18)
            goto LABEL_16;
        }
        else
        {
          v4 += 792;
        }
      }
      else
      {
        v16 = v6 + 792;
        v17 = v6;
        if (v7 == v6 && v7 < v16)
          goto LABEL_16;
      }
      memmove(v7, v17, 0x318uLL);
LABEL_16:
      v7 += 792;
      if (v4 < v13)
      {
        v6 = v16;
        if ((unint64_t)v16 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v26 = 792 * ((v13 - v4) / 792);
  if (v6 != v4 || v6 >= &v4[v26])
    memmove(v6, v4, v26);
  return 1;
}

uint64_t sub_214323584(uint64_t a1)
{
  return sub_214323598(a1);
}

uint64_t sub_214323598(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;

  sub_2141D8BF8(qword_253F13C40);
  result = sub_2144256B8();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v21 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
    sub_2142AAF2C(*(_QWORD *)(a1 + 56) + 784 * i, (uint64_t)v22);
    v17 = v23;
    result = sub_2143195C0((uint64_t)v22);
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v16;
    *(_QWORD *)(v3[7] + 8 * i) = v17;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v20;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v21 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v21 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v21 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v21 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v21 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t (*sub_214323780(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_214323E30(v4);
  v4[9] = sub_214323934(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_2143237FC;
}

uint64_t (*sub_214323800(_QWORD *a1, unsigned __int8 a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_214323E50(v4);
  v4[9] = sub_214323AD4(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_2143237FC;
}

uint64_t (*sub_21432387C(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_214323E30(v4);
  v4[9] = sub_214323C94(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_2143237FC;
}

void sub_2143238F8(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_214323934(_QWORD *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _OWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*result)(uint64_t *);

  v4 = v3;
  v8 = malloc(0x328uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 99) = v4;
  *((_QWORD *)v8 + 98) = a2;
  v9 = *v4;
  v11 = sub_21433AB28(a2);
  *((_BYTE *)v8 + 777) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v8 + 100) = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        memcpy(v8, (const void *)(*(_QWORD *)(*v4 + 56) + 784 * v11), 0x309uLL);
        return sub_214323A8C;
      }
LABEL_11:
      v8[9] = 0u;
      v8[10] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      *((_QWORD *)v8 + 22) = 254;
      *v8 = 0u;
      bzero((char *)v8 + 184, 0x251uLL);
      return sub_214323A8C;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_2142A7150();
      goto LABEL_7;
    }
    sub_21429B328(v14, a3 & 1);
    v17 = sub_21433AB28(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      v11 = v17;
      *((_QWORD *)v8 + 100) = v17;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t *))sub_214425820();
  __break(1u);
  return result;
}

void sub_214323A8C(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  sub_214323E7C(*a1, *(_BYTE *)(*a1 + 777), *(uint64_t **)(*a1 + 792), *(_QWORD *)(*a1 + 800), *(_QWORD *)(*a1 + 784));
  sub_2141E0750((uint64_t)v1, &qword_253F10B60);
  free(v1);
}

void (*sub_214323AD4(_QWORD *a1, unsigned __int8 a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[2] = v4;
  *((_BYTE *)v8 + 32) = a2;
  v9 = *v4;
  v11 = sub_214336B74(a2);
  *((_BYTE *)v8 + 33) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = (uint64_t *)(*(_QWORD *)(*v4 + 56) + 16 * v11);
        v18 = *v17;
        v19 = v17[1];
LABEL_12:
        *v8 = v18;
        v8[1] = v19;
        return sub_214323BFC;
      }
LABEL_11:
      v18 = 0;
      v19 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_2142A7D48();
      goto LABEL_7;
    }
    sub_21429C760(v14, a3 & 1);
    v20 = sub_214336B74(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v8[3] = v20;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))sub_214425820();
  __break(1u);
  return result;
}

void sub_214323BFC(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  v4 = *((_BYTE *)*a1 + 33);
  if (v2)
  {
    v5 = v1[3];
    v6 = *(_QWORD **)v1[2];
    if ((v4 & 1) != 0)
    {
      v7 = (uint64_t *)(v6[7] + 16 * v5);
      *v7 = v2;
      v7[1] = v3;
    }
    else
    {
      sub_2142A62B0(v5, *((_BYTE *)v1 + 32), v2, v3, v6);
    }
  }
  else if ((*((_BYTE *)*a1 + 33) & 1) != 0)
  {
    sub_21431F700(v1[3], *(_QWORD *)v1[2]);
  }
  v8 = *v1;
  sub_214326B40(v2);
  sub_2141F99CC(v8);
  free(v1);
}

void (*sub_214323C94(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_21433AB28(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_214323DB0;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_2142A96F0();
      goto LABEL_7;
    }
    sub_21429F700(v14, a3 & 1);
    v18 = sub_21433AB28(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))sub_214425820();
  __break(1u);
  return result;
}

void sub_214323DB0(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = **a1;
  v3 = *((_BYTE *)*a1 + 32);
  if (v2)
  {
    v4 = v1[3];
    v5 = *(_QWORD **)v1[2];
    if ((v3 & 1) != 0)
      *(_QWORD *)(v5[7] + 8 * v4) = v2;
    else
      sub_2142A6440(v4, v1[1], v2, v5);
  }
  else if (((*a1)[4] & 1) != 0)
  {
    sub_21431FA70(v1[3], *(_QWORD *)v1[2]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*sub_214323E30(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_214329940;
}

uint64_t (*sub_214323E50(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_214323E70;
}

uint64_t sub_214323E70(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

void *sub_214323E7C(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  void *result;
  _QWORD *v10;
  _BYTE v11[784];
  _BYTE __dst[777];

  sub_2141E070C(a1, (uint64_t)v11, &qword_253F10B60);
  if (v11[176] == 254)
  {
    result = (void *)sub_2141E0750((uint64_t)v11, &qword_253F10B60);
    if ((a2 & 1) != 0)
      return (void *)sub_21431F1EC(a4, *a3);
  }
  else
  {
    memcpy(__dst, v11, sizeof(__dst));
    v10 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return memcpy((void *)(v10[7] + 784 * a4), __dst, 0x309uLL);
    }
    else
    {
      memcpy(v11, __dst, 0x309uLL);
      return sub_2142A61A8(a4, a5, v11, v10);
    }
  }
  return result;
}

uint64_t sub_214323F54(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v9;
  _OWORD v11[19];
  _OWORD __src[19];
  _BYTE v13[304];
  _BYTE v14[304];

  sub_2141E801C(a1, (uint64_t)v13, &qword_253F12178);
  sub_2141E801C((uint64_t)v13, (uint64_t)v14, &qword_253F12178);
  if (sub_214326B70((uint64_t)v14) == 1)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy();
      sub_214320218(a4, *a3);
    }
  }
  else
  {
    sub_2141E801C((uint64_t)v13, (uint64_t)__src, &qword_253F12178);
    v9 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      memcpy((void *)(v9[7] + 304 * a4), __src, 0x130uLL);
    }
    else
    {
      v11[0] = __src[0];
      v11[1] = __src[1];
      v11[2] = __src[2];
      v11[3] = __src[3];
      v11[4] = __src[4];
      v11[5] = __src[5];
      v11[6] = __src[6];
      v11[7] = __src[7];
      v11[8] = __src[8];
      v11[9] = __src[9];
      v11[10] = __src[10];
      v11[11] = __src[11];
      v11[12] = __src[12];
      v11[13] = __src[13];
      v11[14] = __src[14];
      v11[15] = __src[15];
      v11[16] = __src[16];
      v11[17] = __src[17];
      v11[18] = __src[18];
      sub_2142A65AC(a4, (uint64_t)a5, (uint64_t *)v11, v9);
      sub_21421C318(a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    }
  }
  return sub_214326B88((uint64_t)v13);
}

uint64_t sub_2143240C0(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = sub_214324210((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    if (v1)
      swift_willThrow();
    else
      return v6;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v2 = sub_214324210((uint64_t)v7, v4, v2);
    MEMORY[0x2199CDA48](v7, -1, -1);
  }
  return v2;
}

uint64_t sub_214324210(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t *v19;
  uint64_t v20;
  _QWORD v21[99];
  _BYTE v22[784];
  _BYTE v23[792];

  v19 = (unint64_t *)result;
  v20 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v9)
      return sub_214324400(v19, a2, v20, a3);
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v9)
        return sub_214324400(v19, a2, v20, a3);
      v15 = *(_QWORD *)(v5 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v9)
          return sub_214324400(v19, a2, v20, a3);
        v15 = *(_QWORD *)(v5 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    sub_2142AAF2C(*(_QWORD *)(a3 + 56) + 784 * v11, (uint64_t)v23);
    v21[98] = v12;
    sub_2142AAF2C((uint64_t)v23, (uint64_t)v22);
    memcpy(v21, v22, 0x309uLL);
    v13 = *(double *)&v21[1];
    sub_2143195C0((uint64_t)v21);
    result = sub_2143195C0((uint64_t)v23);
    if (v13 != 0.0)
    {
      *(unint64_t *)((char *)v19 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
        return sub_214324400(v19, a2, v20, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v9)
    return sub_214324400(v19, a2, v20, a3);
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      return sub_214324400(v19, a2, v20, a3);
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_214324400(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  _BYTE __dst[777];
  _BYTE __src[792];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_2141D8BF8(&qword_253F13318);
  result = sub_2144256D0();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v28[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v28[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v28[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    sub_2142AAF2C(*(_QWORD *)(v4 + 56) + 784 * v14, (uint64_t)__src);
    memcpy(__dst, __src, sizeof(__dst));
    result = sub_214425868();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v9 + 56) + 784 * v22), __dst, 0x309uLL);
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_214324690(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_214324718(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * a2);
    sub_2142AAF2C(*(_QWORD *)(a5 + 56) + 784 * a2, result);
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_214324798(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  _BYTE __src[784];
  double v39[23];
  uint64_t v40;
  _QWORD __dst[100];
  uint64_t v42;
  _BYTE v43[777];
  _QWORD *v44;

  v3 = *(_QWORD *)(a2 + 64);
  v36 = a2 + 64;
  v44 = a1;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & v3;
  v37 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
LABEL_9:
      v10 = *(_QWORD *)(a2 + 56);
      __dst[0] = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v9);
      sub_2142AAF2C(v10 + 784 * v9, (uint64_t)&__dst[1]);
      goto LABEL_28;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_47;
    if (v11 < v37)
    {
      v12 = *(_QWORD *)(v36 + 8 * v11);
      if (v12)
        goto LABEL_13;
      v13 = v7 + 2;
      ++v7;
      if (v11 + 1 < v37)
      {
        v12 = *(_QWORD *)(v36 + 8 * v13);
        if (v12)
          goto LABEL_16;
        v7 = v11 + 1;
        if (v11 + 2 < v37)
        {
          v12 = *(_QWORD *)(v36 + 8 * (v11 + 2));
          if (v12)
          {
            v11 += 2;
            goto LABEL_13;
          }
          v13 = v11 + 3;
          v7 = v11 + 2;
          if (v11 + 3 < v37)
            break;
        }
      }
    }
LABEL_27:
    memset(__dst, 0, 184);
    __dst[23] = 254;
    bzero(&__dst[24], 0x251uLL);
    v6 = 0;
LABEL_28:
    sub_2141E801C((uint64_t)__dst, (uint64_t)&v42, &qword_253F10BE8);
    if (v43[176] == 254)
    {
      swift_release();
      v33 = swift_bridgeObjectRetain();
      v34 = sub_2143240C0(v33);
      swift_bridgeObjectRelease_n();
      return v34;
    }
    v14 = v42;
    memcpy(__dst, v43, 0x309uLL);
    v15 = v44;
    if (!v44[2] || (v16 = sub_21433AB28(v42), (v17 & 1) == 0))
    {
      memset(v39, 0, 176);
      *(_QWORD *)&v39[22] = 254;
      bzero(&v40, 0x251uLL);
      sub_2141E0750((uint64_t)v39, &qword_253F10B60);
      sub_2142AAF2C((uint64_t)__dst, (uint64_t)v39);
      v39[1] = -v39[1];
      sub_2142AAF2C((uint64_t)v39, (uint64_t)__src);
      v20 = v44;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v23 = sub_21433AB28(v14);
      v24 = v20[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v27 = v22;
      if (v20[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v22 & 1) == 0)
            goto LABEL_41;
        }
        else
        {
          sub_2142A7150();
          if ((v27 & 1) == 0)
            goto LABEL_41;
        }
      }
      else
      {
        sub_21429B328(v26, isUniquelyReferenced_nonNull_native);
        v28 = sub_21433AB28(v14);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_50;
        v23 = v28;
        if ((v27 & 1) == 0)
        {
LABEL_41:
          v20[(v23 >> 6) + 8] |= 1 << v23;
          *(_QWORD *)(v20[6] + 8 * v23) = v14;
          memcpy((void *)(v20[7] + 784 * v23), __src, 0x309uLL);
          v30 = v20[2];
          v31 = __OFADD__(v30, 1);
          v32 = v30 + 1;
          if (v31)
            goto LABEL_48;
          v20[2] = v32;
          goto LABEL_5;
        }
      }
      sub_214326B0C((uint64_t)__src, v20[7] + 784 * v23);
LABEL_5:
      v44 = v20;
      swift_bridgeObjectRelease();
      sub_2143195C0((uint64_t)v39);
      goto LABEL_6;
    }
    sub_2142AAF2C(v15[7] + 784 * v16, (uint64_t)v39);
    sub_2141E0750((uint64_t)v39, &qword_253F10B60);
    v19 = sub_214312120(v39, v14);
    if (*(unsigned __int8 *)(v18 + 176) != 254)
      *(double *)(v18 + 8) = *(double *)(v18 + 8) - *(double *)&__dst[1];
    ((void (*)(double *, _QWORD))v19)(v39, 0);
LABEL_6:
    sub_2143195C0((uint64_t)__dst);
  }
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v11 = v13;
LABEL_13:
    v6 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v11 << 6);
    v7 = v11;
    goto LABEL_9;
  }
  while (1)
  {
    v11 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v11 >= v37)
    {
      v7 = v37 - 1;
      goto LABEL_27;
    }
    v12 = *(_QWORD *)(v36 + 8 * v11);
    ++v13;
    if (v12)
      goto LABEL_13;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_214324C18(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  _OWORD __src[50];
  _QWORD __dst[100];
  uint64_t v40;
  _BYTE v41[777];
  _QWORD *v42;

  v3 = *(_QWORD *)(a2 + 64);
  v36 = a2 + 64;
  v42 = a1;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & v3;
  v37 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
LABEL_9:
      v10 = *(_QWORD *)(a2 + 56);
      __dst[0] = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v9);
      sub_2142AAF2C(v10 + 784 * v9, (uint64_t)&__dst[1]);
      goto LABEL_28;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_47;
    if (v11 < v37)
    {
      v12 = *(_QWORD *)(v36 + 8 * v11);
      if (v12)
        goto LABEL_13;
      v13 = v7 + 2;
      ++v7;
      if (v11 + 1 < v37)
      {
        v12 = *(_QWORD *)(v36 + 8 * v13);
        if (v12)
          goto LABEL_16;
        v7 = v11 + 1;
        if (v11 + 2 < v37)
        {
          v12 = *(_QWORD *)(v36 + 8 * (v11 + 2));
          if (v12)
          {
            v11 += 2;
            goto LABEL_13;
          }
          v13 = v11 + 3;
          v7 = v11 + 2;
          if (v11 + 3 < v37)
            break;
        }
      }
    }
LABEL_27:
    memset(__dst, 0, 184);
    __dst[23] = 254;
    bzero(&__dst[24], 0x251uLL);
    v6 = 0;
LABEL_28:
    sub_2141E801C((uint64_t)__dst, (uint64_t)&v40, &qword_253F10BE8);
    if (v41[176] == 254)
    {
      swift_release();
      v33 = swift_bridgeObjectRetain();
      v34 = sub_2143240C0(v33);
      swift_bridgeObjectRelease_n();
      return v34;
    }
    v14 = v40;
    memcpy(__dst, v41, 0x309uLL);
    v15 = v42;
    if (!v42[2] || (v16 = sub_21433AB28(v40), (v17 & 1) == 0))
    {
      memset(__src, 0, 176);
      *(_QWORD *)&__src[11] = 254;
      bzero((char *)&__src[11] + 8, 0x251uLL);
      sub_2141E0750((uint64_t)__src, &qword_253F10B60);
      sub_2142AAF2C((uint64_t)__dst, (uint64_t)__src);
      v20 = v42;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v23 = sub_21433AB28(v14);
      v24 = v20[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v27 = v22;
      if (v20[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v22 & 1) == 0)
            goto LABEL_41;
        }
        else
        {
          sub_2142A7150();
          if ((v27 & 1) == 0)
            goto LABEL_41;
        }
      }
      else
      {
        sub_21429B328(v26, isUniquelyReferenced_nonNull_native);
        v28 = sub_21433AB28(v14);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_50;
        v23 = v28;
        if ((v27 & 1) == 0)
        {
LABEL_41:
          v20[(v23 >> 6) + 8] |= 1 << v23;
          *(_QWORD *)(v20[6] + 8 * v23) = v14;
          memcpy((void *)(v20[7] + 784 * v23), __src, 0x309uLL);
          v30 = v20[2];
          v31 = __OFADD__(v30, 1);
          v32 = v30 + 1;
          if (v31)
            goto LABEL_48;
          v20[2] = v32;
          goto LABEL_5;
        }
      }
      sub_214326B0C((uint64_t)__src, v20[7] + 784 * v23);
LABEL_5:
      v42 = v20;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_2142AAF2C(v15[7] + 784 * v16, (uint64_t)__src);
    sub_2141E0750((uint64_t)__src, &qword_253F10B60);
    v19 = sub_214312120(__src, v14);
    if (*(unsigned __int8 *)(v18 + 176) != 254)
      *(double *)(v18 + 8) = *(double *)&__dst[1] + *(double *)(v18 + 8);
    ((void (*)(_OWORD *, _QWORD))v19)(__src, 0);
LABEL_6:
    sub_2143195C0((uint64_t)__dst);
  }
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v11 = v13;
LABEL_13:
    v6 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v11 << 6);
    v7 = v11;
    goto LABEL_9;
  }
  while (1)
  {
    v11 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v11 >= v37)
    {
      v7 = v37 - 1;
      goto LABEL_27;
    }
    v12 = *(_QWORD *)(v36 + 8 * v11);
    ++v13;
    if (v12)
      goto LABEL_13;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_214325078(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v3, 0);
    result = v13;
    v6 = (unint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v9 = *v6++;
      v8 = v9;
      if (v9 >= v7)
        break;
      v10 = *(_QWORD *)(a2 + 32 + 8 * v8);
      v14 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2141D3AA0((char *)(v11 > 1), v12 + 1, 1);
        result = v14;
      }
      *(_QWORD *)(result + 16) = v12 + 1;
      *(_QWORD *)(result + 8 * v12 + 32) = v10;
      if (!--v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_214325158(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_2141D3D60(0, v3, 0);
    result = v13;
    v6 = (unint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v9 = *v6++;
      v8 = v9;
      if (v9 >= v7)
        break;
      v10 = *(_QWORD *)(a2 + 32 + 8 * v8);
      v14 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2141D3D60((char *)(v11 > 1), v12 + 1, 1);
        result = v14;
      }
      *(_QWORD *)(result + 16) = v12 + 1;
      *(_QWORD *)(result + 8 * v12 + 32) = v10;
      if (!--v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_214325238(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int64_t v4;
  int64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;

  v4 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    return 0;
  }
  else
  {
    v18 = result;
    v7 = *(_QWORD **)(a4 + 48);
    v8 = v7[2];
    v5 = a3 >> 1;
    v19 = a3 >> 1;
    while (!__OFSUB__(v5--, 1))
    {
      if (v5 < a2 || v5 >= v4)
        goto LABEL_32;
      if (v8)
      {
        v10 = (uint64_t *)(v18 + 16 * v5);
        v11 = *v10;
        v12 = v10[1];
        if (v7[4] == *v10 && v7[5] == v12)
          return v5;
        result = sub_214425790();
        if ((result & 1) != 0)
          return v5;
        if (v8 != 1)
        {
          if (v7[6] == v11 && v7[7] == v12)
            return v5;
          result = sub_214425790();
          if ((result & 1) != 0)
            return v5;
          if (v8 != 2)
          {
            v14 = v7 + 9;
            v15 = 2;
            while (1)
            {
              v16 = v15 + 1;
              if (__OFADD__(v15, 1))
                break;
              if (*(v14 - 1) == v11 && *v14 == v12)
                return v5;
              result = sub_214425790();
              if ((result & 1) != 0)
                return v5;
              v14 += 2;
              ++v15;
              if (v16 == v8)
                goto LABEL_4;
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_4:
      v4 = v19;
      if (v5 == a2)
        return 0;
    }
    __break(1u);
LABEL_32:
    __break(1u);
  }
  return result;
}

uint64_t sub_2143253B0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;

  v4 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    return 0;
  }
  else
  {
    v5 = a2;
    v17 = result;
    v6 = *(_QWORD **)(a4 + 48);
    v7 = v6[2];
    while (v5 < v4)
    {
      if (v7)
      {
        v8 = (uint64_t *)(v17 + 16 * v5);
        v9 = *v8;
        v10 = v8[1];
        if (v6[4] == *v8 && v6[5] == v10)
          return v5;
        result = sub_214425790();
        if ((result & 1) != 0)
          return v5;
        if (v7 != 1)
        {
          if (v6[6] == v9 && v6[7] == v10)
            return v5;
          result = sub_214425790();
          if ((result & 1) != 0)
            return v5;
          if (v7 != 2)
          {
            v12 = v6 + 9;
            v13 = 2;
            while (1)
            {
              v14 = v13 + 1;
              if (__OFADD__(v13, 1))
                break;
              if (*(v12 - 1) == v9 && *v12 == v10)
                return v5;
              result = sub_214425790();
              if ((result & 1) != 0)
                return v5;
              v12 += 2;
              ++v13;
              if (v14 == v7)
                goto LABEL_24;
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_24:
      if (__OFADD__(v5++, 1))
        goto LABEL_30;
      if (v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_30:
    __break(1u);
  }
  return result;
}

unint64_t *sub_21432550C(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *result;
  uint64_t v6;
  unint64_t v7;

  if ((a2 & 1) != 0)
    return 0;
  v7 = a1;
  result = sub_214317864(&v7, a3, a4, (double *)&v6);
  if (!v4)
    return (unint64_t *)v6;
  return result;
}

uint64_t sub_21432556C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v7;
  v10 = result;
  v19 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)sub_2141D39D4(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a2 <= v10)
      v11 = v10;
    else
      v11 = a2;
    v12 = v10;
    while (a2 != v12)
    {
      v17 = v12;
      result = sub_21431ED24(&v17, a3, a4, (double *)&v18);
      if (v6)
      {
        swift_release();
        return v7;
      }
      v6 = 0;
      v13 = v18;
      v19 = v7;
      v15 = *(_QWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        result = (uint64_t)sub_2141D39D4((char *)(v14 > 1), v15 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v15 + 1;
      *(_QWORD *)(v7 + 8 * v15 + 32) = v13;
      if (a2 < v10)
        goto LABEL_19;
      if (v11 == v12)
        goto LABEL_20;
      if (a2 == ++v12)
        return v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_2143256C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t result;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (_BYTE *)(a1 + 48);
    v6 = (char *)MEMORY[0x24BEE4AF8];
    v7 = v4;
    do
    {
      if ((*v5 & 1) == 0)
      {
        v8 = *((_QWORD *)v5 - 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_214223E10(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        v10 = *((_QWORD *)v6 + 2);
        v9 = *((_QWORD *)v6 + 3);
        if (v10 >= v9 >> 1)
          v6 = sub_214223E10((char *)(v9 > 1), v10 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v10 + 1;
        *(_QWORD *)&v6[8 * v10 + 32] = v8;
      }
      v5 += 24;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = (char *)MEMORY[0x24BEE4AF8];
  }
  if (*((_QWORD *)v6 + 2) == v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = sub_2143125D4((uint64_t)v6, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      if (v12 == 1)
      {
        v13 = 0;
        v14 = 0.0;
      }
      else
      {
        v13 = v12 & 0x7FFFFFFFFFFFFFFELL;
        v23 = (double *)(v11 + 40);
        v14 = 0.0;
        v24 = v12 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v14 = v14 + *(v23 - 1) + *v23;
          v23 += 2;
          v24 -= 2;
        }
        while (v24);
        if (v12 == v13)
          goto LABEL_29;
      }
      v25 = v12 - v13;
      v26 = (double *)(v11 + 8 * v13 + 32);
      do
      {
        v27 = *v26++;
        v14 = v14 + v27;
        --v25;
      }
      while (v25);
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return *(_QWORD *)&v14;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  v15 = sub_214311DB4(a1);
  if (*((_QWORD *)v15 + 2) == v4)
  {
    swift_bridgeObjectRetain();
    v16 = sub_214312A34((uint64_t)v15, a2);
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = (float64x2_t *)(v16 + 32);
      v19 = 0uLL;
      do
      {
        v20 = *v18++;
        v19 = vaddq_f64(v19, v20);
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getAtKeyPath();
    swift_release();
    v22 = v28;
    swift_getKeyPath();
    swift_getAtKeyPath();
    swift_release();
    return v22;
  }
  result = swift_bridgeObjectRelease();
  if (v4)
    return *(_QWORD *)(a1 + 32);
  __break(1u);
  return result;
}

uint64_t sub_2143259D0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v1, 0);
    v2 = v9;
    v4 = a1 + 32;
    do
    {
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v9 + 16);
      v5 = *(_QWORD *)(v9 + 24);
      if (v6 >= v5 >> 1)
        sub_2141D39D4((char *)(v5 > 1), v6 + 1, 1);
      *(_QWORD *)(v9 + 16) = v6 + 1;
      *(_QWORD *)(v9 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214325AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = a1;
    v63 = MEMORY[0x24BEE4AF8];
    sub_2141D3D98(0, v4, 0);
    v7 = v63;
    result = sub_214324690(v6);
    v10 = result;
    v11 = 0;
    v12 = v6 + 64;
    v13 = *(_BYTE *)(v6 + 32);
    v51 = v6 + 80;
    v52 = v4;
    v54 = v6 + 64;
    v55 = v6;
    v53 = v9;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << v13)
    {
      v16 = (unint64_t)v10 >> 6;
      if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
        goto LABEL_46;
      if (*(_DWORD *)(v6 + 36) != v9)
        goto LABEL_47;
      v58 = v11;
      v17 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v10);
      v18 = v17[1];
      v59 = *v17;
      v60 = v7;
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain();
        sub_2141D3D60(0, v19, 0);
        v20 = v5;
        v21 = (uint64_t *)(v18 + 32);
        do
        {
          v23 = *v21;
          v21 += 3;
          v22 = v23;
          v25 = *(_QWORD *)(v20 + 16);
          v24 = *(_QWORD *)(v20 + 24);
          if (v25 >= v24 >> 1)
            sub_2141D3D60((char *)(v24 > 1), v25 + 1, 1);
          *(_QWORD *)(v20 + 16) = v25 + 1;
          *(_QWORD *)(v20 + 8 * v25 + 32) = v22;
          --v19;
        }
        while (v19);
      }
      else
      {
        swift_bridgeObjectRetain();
        v20 = v5;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_214325078(v20, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26 = sub_214325158(v20, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = *(_QWORD *)(v18 + 16);
      if (v27)
      {
        v62 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_2141D39D4(0, v27, 0);
        v28 = v62;
        v29 = 40;
        do
        {
          v30 = *(_QWORD *)(v18 + v29);
          v32 = *(_QWORD *)(v62 + 16);
          v31 = *(_QWORD *)(v62 + 24);
          if (v32 >= v31 >> 1)
            sub_2141D39D4((char *)(v31 > 1), v32 + 1, 1);
          *(_QWORD *)(v62 + 16) = v32 + 1;
          *(_QWORD *)(v62 + 8 * v32 + 32) = v30;
          v29 += 24;
          --v27;
        }
        while (v27);
        swift_bridgeObjectRelease();
        v5 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v5 = MEMORY[0x24BEE4AF8];
        v28 = MEMORY[0x24BEE4AF8];
      }
      swift_retain();
      sub_214315224(v28, v26, a4, (double (*)(_QWORD, double))sub_21431658C);
      v34 = v33;
      swift_bridgeObjectRelease();
      swift_release();
      v35 = *(_QWORD *)(v18 + 16);
      if (v35)
      {
        swift_bridgeObjectRetain();
        sub_2141D39D4(0, v35, 0);
        v36 = v5;
        v37 = 48;
        do
        {
          v38 = *(_QWORD *)(v18 + v37);
          v40 = *(_QWORD *)(v5 + 16);
          v39 = *(_QWORD *)(v5 + 24);
          if (v40 >= v39 >> 1)
            sub_2141D39D4((char *)(v39 > 1), v40 + 1, 1);
          *(_QWORD *)(v5 + 16) = v40 + 1;
          *(_QWORD *)(v5 + 8 * v40 + 32) = v38;
          v37 += 24;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease();
        v5 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v36 = v5;
      }
      swift_retain();
      sub_214315224(v36, v26, a4, (double (*)(_QWORD, double))sub_214315378);
      v42 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_release();
      v7 = v60;
      v44 = *(_QWORD *)(v60 + 16);
      v43 = *(_QWORD *)(v60 + 24);
      if (v44 >= v43 >> 1)
      {
        result = (uint64_t)sub_2141D3D98((char *)(v43 > 1), v44 + 1, 1);
        v7 = v60;
      }
      *(_QWORD *)(v7 + 16) = v44 + 1;
      v45 = (_QWORD *)(v7 + 24 * v44);
      v45[4] = v59;
      v45[5] = v34;
      v45[6] = v42;
      v6 = v55;
      v13 = *(_BYTE *)(v55 + 32);
      v14 = 1 << v13;
      if (v10 >= 1 << v13)
        goto LABEL_48;
      v12 = v54;
      v46 = *(_QWORD *)(v54 + 8 * v16);
      if ((v46 & (1 << v10)) == 0)
        goto LABEL_49;
      v9 = v53;
      if (*(_DWORD *)(v55 + 36) != v53)
        goto LABEL_50;
      v47 = v46 & (-2 << (v10 & 0x3F));
      if (v47)
      {
        v14 = __clz(__rbit64(v47)) | v10 & 0xFFFFFFFFFFFFFFC0;
        v15 = v52;
      }
      else
      {
        v48 = v16 + 1;
        v49 = (v14 + 63) >> 6;
        v15 = v52;
        if (v16 + 1 < v49)
        {
          v50 = *(_QWORD *)(v54 + 8 * v48);
          if (v50)
          {
LABEL_41:
            v14 = __clz(__rbit64(v50)) + (v48 << 6);
          }
          else
          {
            while (v49 - 2 != v16)
            {
              v50 = *(_QWORD *)(v51 + 8 * v16++);
              if (v50)
              {
                v48 = v16 + 1;
                goto LABEL_41;
              }
            }
          }
        }
      }
      v11 = v58 + 1;
      v10 = v14;
      if (v58 + 1 == v15)
        return v7;
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_214325FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v39;
  uint64_t v40[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v7 = a1;
  v44 = MEMORY[0x24BEE4AF8];
  sub_2141D3E04(0, v5, 0);
  v6 = v44;
  result = sub_214324690(v7);
  v9 = result;
  v11 = v10;
  v12 = 0;
  v13 = v7 + 64;
  v34 = v7 + 80;
  v35 = v5;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v7 + 32))
  {
    v16 = (unint64_t)v9 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(v7 + 36) != v11)
      goto LABEL_26;
    v39 = v12;
    v17 = v7;
    v18 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v9);
    v19 = v18[1];
    v40[0] = *v18;
    v40[1] = v19;
    swift_bridgeObjectRetain();
    sub_21431DE40(v40, a2, a3, a4, &v41);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }
    result = swift_bridgeObjectRelease();
    v20 = v41;
    v21 = v42;
    v22 = v43;
    v44 = v6;
    v24 = *(_QWORD *)(v6 + 16);
    v23 = *(_QWORD *)(v6 + 24);
    if (v24 >= v23 >> 1)
    {
      v32 = v43;
      v33 = v42;
      v31 = v41;
      result = (uint64_t)sub_2141D3E04((char *)(v23 > 1), v24 + 1, 1);
      v20 = v31;
      v22 = v32;
      v21 = v33;
      v6 = v44;
    }
    *(_QWORD *)(v6 + 16) = v24 + 1;
    v25 = v6 + 40 * v24;
    *(_QWORD *)(v25 + 32) = v20;
    *(_OWORD *)(v25 + 40) = v21;
    *(_OWORD *)(v25 + 56) = v22;
    v14 = 1 << *(_BYTE *)(v17 + 32);
    if (v9 >= v14)
      goto LABEL_27;
    v26 = *(_QWORD *)(v13 + 8 * v16);
    if ((v26 & (1 << v9)) == 0)
      goto LABEL_28;
    v7 = v17;
    if (*(_DWORD *)(v17 + 36) != v11)
      goto LABEL_29;
    v27 = v26 & (-2 << (v9 & 0x3F));
    if (v27)
    {
      v14 = __clz(__rbit64(v27)) | v9 & 0xFFFFFFFFFFFFFFC0;
      v4 = 0;
      v15 = v35;
    }
    else
    {
      v28 = v16 + 1;
      v29 = (unint64_t)(v14 + 63) >> 6;
      v4 = 0;
      v15 = v35;
      if (v16 + 1 < v29)
      {
        v30 = *(_QWORD *)(v13 + 8 * v28);
        if (v30)
        {
LABEL_21:
          v14 = __clz(__rbit64(v30)) + (v28 << 6);
        }
        else
        {
          while (v29 - 2 != v16)
          {
            v30 = *(_QWORD *)(v34 + 8 * v16++);
            if (v30)
            {
              v28 = v16 + 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
    v12 = v39 + 1;
    v9 = v14;
    if (v39 + 1 == v15)
      return v6;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_214326268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  int64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  _OWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  _QWORD v33[4];
  char v34;

  v10 = sub_214310A78(a1);
  swift_retain();
  sub_214315224(v10, a3, a4, (double (*)(_QWORD, double))sub_21431658C);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  v13 = sub_214310B38(a1);
  swift_retain();
  sub_214315224(v13, a3, a4, (double (*)(_QWORD, double))sub_214315378);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_release();
  v16 = *(_QWORD *)(a1 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v33[0] = MEMORY[0x24BEE4AF8];
    sub_2141D3C74(0, v16, 0);
    v17 = v33[0];
    v18 = *(_QWORD *)(v33[0] + 16) + 1;
    v19 = (__int128 *)(a1 + 120);
    v20 = v16;
    do
    {
      v21 = *(v19 - 4);
      v22 = *v19;
      v33[0] = v17;
      v23 = *(_QWORD *)(v17 + 24);
      if (v18 - 1 >= v23 >> 1)
      {
        v30 = v22;
        v31 = v21;
        sub_2141D3C74((char *)(v23 > 1), v18, 1);
        v22 = v30;
        v21 = v31;
        v17 = v33[0];
      }
      *(_QWORD *)(v17 + 16) = v18;
      v24 = (_OWORD *)(v17 + 32 * v18);
      *v24 = v21;
      v24[1] = v22;
      ++v18;
      v19 += 11;
      --v20;
    }
    while (v20);
  }
  v33[0] = 1;
  memset(&v33[1], 0, 24);
  v34 = 1;
  sub_214314A4C(v17, a2, (uint64_t)v33);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  result = swift_release();
  if (v16)
  {
    v26 = a1 + 32 + 176 * v16;
    v27 = *(_QWORD *)(v26 - 104);
    v28 = *(_BYTE *)(v26 - 96);
    v29 = *(_QWORD *)(v26 - 24);
    *(_QWORD *)a5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a5 + 8) = v12;
    *(_QWORD *)(a5 + 16) = v15;
    *(_QWORD *)(a5 + 24) = v32;
    *(_QWORD *)(a5 + 32) = v32;
    *(_OWORD *)(a5 + 40) = *(_OWORD *)(v26 - 136);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v26 - 120);
    *(_QWORD *)(a5 + 72) = v27;
    *(_BYTE *)(a5 + 80) = v28;
    *(_DWORD *)(a5 + 84) = v32 >> 24;
    *(_DWORD *)(a5 + 81) = v32;
    *(_QWORD *)(a5 + 88) = v32;
    *(_QWORD *)(a5 + 96) = v32;
    *(_OWORD *)(a5 + 104) = *(_OWORD *)(v26 - 72);
    *(_OWORD *)(a5 + 120) = *(_OWORD *)(v26 - 56);
    *(_OWORD *)(a5 + 136) = *(_OWORD *)(v26 - 40);
    *(_QWORD *)(a5 + 152) = v29;
    *(_WORD *)(a5 + 160) = 6;
    *(_DWORD *)(a5 + 162) = v32;
    *(_WORD *)(a5 + 166) = WORD2(v32);
    *(_QWORD *)(a5 + 168) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_214326600(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v39 = MEMORY[0x24BEE4AF8];
    result = (uint64_t)sub_2141D3A14(0, v5, 0);
    v9 = 0;
    v10 = v39;
    v32 = v5;
    v33 = a1 + 32;
    while (1)
    {
      v11 = *a2;
      if (!*(_QWORD *)(*a2 + 16))
        break;
      result = sub_21433AB28(*(_QWORD *)(v33 + 8 * v9));
      if ((v12 & 1) == 0)
        goto LABEL_26;
      v38 = v10;
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * result);
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        swift_bridgeObjectRetain();
        sub_2141D3D60(0, v14, 0);
        v15 = v6;
        v16 = (uint64_t *)(v13 + 32);
        do
        {
          v18 = *v16;
          v16 += 2;
          v17 = v18;
          v20 = *(_QWORD *)(v6 + 16);
          v19 = *(_QWORD *)(v6 + 24);
          if (v20 >= v19 >> 1)
            sub_2141D3D60((char *)(v19 > 1), v20 + 1, 1);
          *(_QWORD *)(v6 + 16) = v20 + 1;
          *(_QWORD *)(v6 + 8 * v20 + 32) = v17;
          --v14;
        }
        while (v14);
      }
      else
      {
        swift_bridgeObjectRetain();
        v15 = v6;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = sub_214325078(v15, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = sub_214325158(v15, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v13 + 16);
      if (v23)
      {
        sub_2141D3A14(0, v23, 0);
        v24 = v6;
        v25 = 40;
        do
        {
          v26 = *(_QWORD *)(v13 + v25);
          v27 = *(_QWORD *)(v24 + 16);
          v28 = *(_QWORD *)(v24 + 24);
          swift_retain();
          if (v27 >= v28 >> 1)
            sub_2141D3A14((char *)(v28 > 1), v27 + 1, 1);
          *(_QWORD *)(v24 + 16) = v27 + 1;
          *(_QWORD *)(v24 + 8 * v27 + 32) = v26;
          v25 += 16;
          --v23;
        }
        while (v23);
        swift_bridgeObjectRelease();
        v6 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        swift_bridgeObjectRelease();
        v24 = v6;
      }
      v29 = sub_214313280(v24, v21, v22, a5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v10 = v38;
      v31 = *(_QWORD *)(v38 + 16);
      v30 = *(_QWORD *)(v38 + 24);
      if (v31 >= v30 >> 1)
      {
        result = (uint64_t)sub_2141D3A14((char *)(v30 > 1), v31 + 1, 1);
        v10 = v38;
      }
      ++v9;
      *(_QWORD *)(v10 + 16) = v31 + 1;
      *(_QWORD *)(v10 + 8 * v31 + 32) = v29;
      if (v9 == v32)
        return v10;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t *sub_214326918(uint64_t *a1)
{
  sub_2141ED014(a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t sub_214326948()
{
  uint64_t *v0;

  sub_2141ED07C(v0[7], v0[8], v0[9]);
  return swift_deallocObject();
}

uint64_t sub_214326974()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_2143269A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2143269D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F12208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_214326A1C(uint64_t a1, uint64_t a2)
{
  assignWithTake for SgSymbol(a2, a1);
  return a2;
}

uint64_t sub_214326A60()
{
  return 8;
}

BOOL sub_214326A6C(_QWORD *a1, _QWORD *a2)
{
  return *a2 == *a1;
}

uint64_t sub_214326A80()
{
  return sub_214425154();
}

_QWORD *sub_214326A88(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_214326A94()
{
  return 8;
}

uint64_t sub_214326AA0(uint64_t a1, uint64_t a2)
{
  assignWithCopy for SgLine.Points.Element(a2, a1);
  return a2;
}

__n128 sub_214326ADC@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_214326AE8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_214326AF4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[1];
  *a2 = result;
  return result;
}

__n128 sub_214326B00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1] = *a1;
  return result;
}

uint64_t sub_214326B0C(uint64_t a1, uint64_t a2)
{
  assignWithTake for SgAnimatableData.Item(a2, a1);
  return a2;
}

uint64_t sub_214326B40(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_214326B70(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 280);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_214326B88(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  sub_214326C08(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_OWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1));
  return a1;
}

uint64_t sub_214326C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t result;

  if (a36)
  {
    swift_bridgeObjectRetain();
    sub_2141EF2B4(a9, a10, a11, a12);
    sub_2141EF2B4(a13, a14, a15, a16);
    sub_214326DB0(a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_214326DB0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a13 > 1 || (result & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8 || a4 > 1)
    return sub_21420B7DC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  if ((a10 | a9) & 0xF000000000000007 | a8 & 0xFFFFFFFFFFFFFF7CLL
    || ((a19 | a18) & 0xF000000000000007 | a17 & 0xFFFFFFFFFFFFFF7CLL) != 0)
  {
    return sub_21420B7DC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SgMerger.MergedAreaPosition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SgMerger.MergedAreaPosition()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithTake for SgMerger.MergedAreaPosition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SgMerger.MergedAreaPosition()
{
  return &type metadata for SgMerger.MergedAreaPosition;
}

_QWORD *assignWithCopy for ScaleResolutionFailure(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SgMerger.MergedLinePosition()
{
  return &type metadata for SgMerger.MergedLinePosition;
}

uint64_t sub_214326F20()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_214326F78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_214327110(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_21432716C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_21432725C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_2143273AC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_21432749C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_2143275EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void sub_214327780(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  else
  {
    v15 = 0;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_21432799C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_2143279B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t type metadata accessor for WeightedSumMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeightedSumMode);
}

uint64_t destroy for SgAnimatableData.Item(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = swift_release();
  if (*(unsigned __int8 *)(a1 + 176) != 255)
    result = sub_21421BB6C(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_OWORD *)(a1 + 136));
  if (*(unsigned __int8 *)(a1 + 288) != 255)
    result = sub_21421BB6C(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(_OWORD *)(a1 + 248));
  if (*(unsigned __int8 *)(a1 + 392) != 255)
    result = sub_21421B8A0(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352));
  if (*(unsigned __int8 *)(a1 + 528) != 255)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 440))
      _s6Charts15AnyChartContentVwxx_0(a1 + 416);
    if (*(_QWORD *)(a1 + 456))
      swift_release();
    result = swift_bridgeObjectRelease();
    v3 = *(unsigned __int8 *)(a1 + 488);
    if (v3 != 255)
      result = sub_2141E833C(*(_QWORD *)(a1 + 480), v3 & 1);
  }
  if (*(unsigned __int8 *)(a1 + 640) != 255)
    result = sub_21421BB6C(*(_QWORD *)(a1 + 536), *(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), *(_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 584), *(_QWORD *)(a1 + 592), *(_OWORD *)(a1 + 600));
  if (*(unsigned __int8 *)(a1 + 776) != 255)
    return sub_21421BA80(*(_QWORD *)(a1 + 648), *(_QWORD *)(a1 + 656), *(_QWORD *)(a1 + 664), *(_QWORD *)(a1 + 672), *(_QWORD *)(a1 + 680), *(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696), *(_QWORD *)(a1 + 704), *(_QWORD *)(a1 + 712), *(_QWORD *)(a1 + 720), *(_QWORD *)(a1 + 728), *(_QWORD *)(a1 + 736));
  return result;
}

uint64_t initializeWithCopy for SgAnimatableData.Item(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t *v57;
  int v58;
  char v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t *v63;
  int v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(unsigned __int8 *)(a2 + 176);
  swift_retain();
  if (v4 == 255)
  {
    v5 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v5;
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    v6 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v6;
    v7 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v7;
  }
  else
  {
    v125 = v4 & 1;
    v8 = *(_QWORD *)(a2 + 72);
    v9 = *(_QWORD *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 96);
    v12 = *(_QWORD *)(a2 + 104);
    v13 = *(_QWORD *)(a2 + 112);
    v14 = *(_QWORD *)(a2 + 120);
    v15 = *(_QWORD *)(a2 + 128);
    v102 = *(_QWORD *)(a2 + 136);
    v107 = *(_QWORD *)(a2 + 144);
    v112 = *(_QWORD *)(a2 + 152);
    v116 = *(_QWORD *)(a2 + 160);
    v120 = *(_QWORD *)(a2 + 168);
    sub_21421BAE4(v8, v9, v10, v11, v12, v13, v14, v15, v102);
    *(_QWORD *)(a1 + 72) = v8;
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v12;
    *(_QWORD *)(a1 + 112) = v13;
    *(_QWORD *)(a1 + 120) = v14;
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = v102;
    *(_QWORD *)(a1 + 144) = v107;
    *(_QWORD *)(a1 + 152) = v112;
    *(_QWORD *)(a1 + 160) = v116;
    *(_QWORD *)(a1 + 168) = v120;
    *(_BYTE *)(a1 + 176) = v125;
  }
  v16 = a1 + 288;
  v17 = *(unsigned __int8 *)(a2 + 288);
  if (v17 == 255)
  {
    v18 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v18;
    *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
    v19 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v19;
    v20 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v20;
  }
  else
  {
    v121 = v17 & 1;
    v21 = *(_QWORD *)(a2 + 184);
    v22 = *(_QWORD *)(a2 + 192);
    v23 = *(_QWORD *)(a2 + 200);
    v24 = *(_QWORD *)(a2 + 208);
    v25 = *(_QWORD *)(a2 + 216);
    v26 = *(_QWORD *)(a2 + 224);
    v27 = *(_QWORD *)(a2 + 232);
    v28 = *(_QWORD *)(a2 + 240);
    v99 = *(_QWORD *)(a2 + 248);
    v103 = *(_QWORD *)(a2 + 256);
    v108 = *(_QWORD *)(a2 + 264);
    v113 = *(_QWORD *)(a2 + 272);
    v117 = *(_QWORD *)(a2 + 280);
    sub_21421BAE4(v21, v22, v23, v24, v25, v26, v27, v28, v99);
    *(_QWORD *)(a1 + 184) = v21;
    *(_QWORD *)(a1 + 192) = v22;
    *(_QWORD *)(a1 + 200) = v23;
    *(_QWORD *)(a1 + 208) = v24;
    *(_QWORD *)(a1 + 216) = v25;
    *(_QWORD *)(a1 + 224) = v26;
    v16 = a1 + 288;
    *(_QWORD *)(a1 + 232) = v27;
    *(_QWORD *)(a1 + 240) = v28;
    *(_QWORD *)(a1 + 248) = v99;
    *(_QWORD *)(a1 + 256) = v103;
    *(_QWORD *)(a1 + 264) = v108;
    *(_QWORD *)(a1 + 272) = v113;
    *(_QWORD *)(a1 + 280) = v117;
    *(_BYTE *)(a1 + 288) = v121;
  }
  v29 = *(unsigned __int8 *)(a2 + 392);
  if (v29 == 255)
  {
    v30 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v30;
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    v31 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v31;
    v32 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v32;
  }
  else
  {
    v122 = v29 & 1;
    v33 = *(_QWORD *)(a2 + 296);
    v34 = *(_QWORD *)(a2 + 304);
    v35 = *(_QWORD *)(a2 + 312);
    v36 = *(_QWORD *)(a2 + 320);
    v37 = *(_QWORD *)(a2 + 328);
    v38 = *(_QWORD *)(a2 + 336);
    v39 = *(_QWORD *)(a2 + 344);
    v40 = *(_QWORD *)(a2 + 352);
    v104 = *(_QWORD *)(a2 + 360);
    v109 = *(_QWORD *)(a2 + 368);
    v114 = *(_QWORD *)(a2 + 376);
    v118 = *(_QWORD *)(a2 + 384);
    sub_21421B808(v33, v34, v35, v36, v37, v38, v39, v40);
    *(_QWORD *)(a1 + 296) = v33;
    *(_QWORD *)(a1 + 304) = v34;
    *(_QWORD *)(a1 + 312) = v35;
    *(_QWORD *)(a1 + 320) = v36;
    *(_QWORD *)(a1 + 328) = v37;
    *(_QWORD *)(a1 + 336) = v38;
    v16 = a1 + 288;
    *(_QWORD *)(a1 + 344) = v39;
    *(_QWORD *)(a1 + 352) = v40;
    *(_QWORD *)(a1 + 360) = v104;
    *(_QWORD *)(a1 + 368) = v109;
    *(_QWORD *)(a1 + 376) = v114;
    *(_QWORD *)(a1 + 384) = v118;
    *(_BYTE *)(a1 + 392) = v122;
  }
  v41 = *(unsigned __int8 *)(a2 + 528);
  if (v41 == 255)
  {
    v42 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v42;
    *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
    v43 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v43;
    v44 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v44;
    v45 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v45;
    goto LABEL_31;
  }
  v46 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v46;
  v47 = (_OWORD *)(a1 + 416);
  v48 = (_OWORD *)(a2 + 416);
  v49 = *(_QWORD *)(a2 + 440);
  swift_retain();
  if ((v41 & 1) == 0)
  {
    if (v49)
    {
      v50 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v49;
      *(_QWORD *)(a1 + 448) = v50;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v49 - 8))(a1 + 416, a2 + 416, v49);
      v51 = *(_QWORD *)(a2 + 456);
      if (v51)
      {
LABEL_15:
        v52 = *(_QWORD *)(a2 + 464);
        *(_QWORD *)(a1 + 456) = v51;
        *(_QWORD *)(a1 + 464) = v52;
        swift_retain();
LABEL_21:
        *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
        v57 = (uint64_t *)(a2 + 480);
        v58 = *(unsigned __int8 *)(a2 + 488);
        swift_bridgeObjectRetain();
        if (v58 == 255)
        {
          *(_QWORD *)(a1 + 480) = *v57;
          *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
        }
        else
        {
          v59 = v58 & 1;
          v60 = *v57;
          sub_2141E83F4(v60, v59);
          *(_QWORD *)(a1 + 480) = v60;
          *(_BYTE *)(v16 + 200) = v59;
        }
        v61 = *(_OWORD *)(a2 + 512);
        *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
        *(_OWORD *)(a1 + 512) = v61;
        *(_BYTE *)(v16 + 240) = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v56 = *(_OWORD *)(a2 + 432);
      *v47 = *v48;
      *(_OWORD *)(a1 + 432) = v56;
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      v51 = *(_QWORD *)(a2 + 456);
      if (v51)
        goto LABEL_15;
    }
    *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
    goto LABEL_21;
  }
  if (!v49)
  {
    v62 = *(_OWORD *)(a2 + 432);
    *v47 = *v48;
    *(_OWORD *)(a1 + 432) = v62;
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    v54 = *(_QWORD *)(a2 + 456);
    if (v54)
      goto LABEL_18;
LABEL_26:
    *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
    goto LABEL_27;
  }
  v53 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v49;
  *(_QWORD *)(a1 + 448) = v53;
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v49 - 8))(a1 + 416, a2 + 416, v49);
  v54 = *(_QWORD *)(a2 + 456);
  if (!v54)
    goto LABEL_26;
LABEL_18:
  v55 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v54;
  *(_QWORD *)(a1 + 464) = v55;
  swift_retain();
LABEL_27:
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  v63 = (uint64_t *)(a2 + 480);
  v64 = *(unsigned __int8 *)(a2 + 488);
  swift_bridgeObjectRetain();
  if (v64 == 255)
  {
    *(_QWORD *)(a1 + 480) = *v63;
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  }
  else
  {
    v65 = v64 & 1;
    v66 = *v63;
    sub_2141E83F4(v66, v65);
    *(_QWORD *)(a1 + 480) = v66;
    *(_BYTE *)(v16 + 200) = v65;
  }
  v67 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v67;
  *(_BYTE *)(v16 + 240) = 1;
LABEL_31:
  v68 = *(unsigned __int8 *)(a2 + 640);
  if (v68 == 255)
  {
    v69 = *(_OWORD *)(a2 + 616);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
    *(_OWORD *)(a1 + 616) = v69;
    *(_OWORD *)(a1 + 625) = *(_OWORD *)(a2 + 625);
    v70 = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(a1 + 552) = v70;
    v71 = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 584) = v71;
  }
  else
  {
    v123 = v68 & 1;
    v72 = *(_QWORD *)(a2 + 536);
    v73 = *(_QWORD *)(a2 + 544);
    v74 = *(_QWORD *)(a2 + 552);
    v75 = *(_QWORD *)(a2 + 560);
    v76 = *(_QWORD *)(a2 + 568);
    v77 = *(_QWORD *)(a2 + 576);
    v78 = *(_QWORD *)(a2 + 584);
    v79 = *(_QWORD *)(a2 + 592);
    v100 = *(_QWORD *)(a2 + 600);
    v105 = *(_QWORD *)(a2 + 608);
    v110 = *(_QWORD *)(a2 + 616);
    v115 = *(_QWORD *)(a2 + 624);
    v119 = *(_QWORD *)(a2 + 632);
    sub_21421BAE4(v72, v73, v74, v75, v76, v77, v78, v79, v100);
    *(_QWORD *)(a1 + 536) = v72;
    *(_QWORD *)(a1 + 544) = v73;
    *(_QWORD *)(a1 + 552) = v74;
    *(_QWORD *)(a1 + 560) = v75;
    *(_QWORD *)(a1 + 568) = v76;
    *(_QWORD *)(a1 + 576) = v77;
    *(_QWORD *)(a1 + 584) = v78;
    *(_QWORD *)(a1 + 592) = v79;
    *(_QWORD *)(a1 + 600) = v100;
    *(_QWORD *)(a1 + 608) = v105;
    *(_QWORD *)(a1 + 616) = v110;
    *(_QWORD *)(a1 + 624) = v115;
    *(_QWORD *)(a1 + 632) = v119;
    *(_BYTE *)(a1 + 640) = v123;
  }
  v80 = *(unsigned __int8 *)(a2 + 776);
  if (v80 == 255)
  {
    v81 = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 760) = v81;
    *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
    v82 = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
    *(_OWORD *)(a1 + 696) = v82;
    v83 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v83;
    v84 = *(_OWORD *)(a2 + 664);
    *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
    *(_OWORD *)(a1 + 664) = v84;
  }
  else
  {
    v124 = v80 & 1;
    v85 = *(_QWORD *)(a2 + 648);
    v86 = *(_QWORD *)(a2 + 656);
    v87 = *(_QWORD *)(a2 + 664);
    v88 = *(_QWORD *)(a2 + 672);
    v89 = *(_QWORD *)(a2 + 680);
    v90 = *(_QWORD *)(a2 + 688);
    v91 = *(_QWORD *)(a2 + 696);
    v92 = *(_QWORD *)(a2 + 704);
    v97 = *(_QWORD *)(a2 + 712);
    v98 = *(_QWORD *)(a2 + 720);
    v101 = *(_QWORD *)(a2 + 728);
    v106 = *(_QWORD *)(a2 + 736);
    v111 = *(_QWORD *)(a2 + 744);
    v95 = *(_QWORD *)(a2 + 760);
    v96 = *(_QWORD *)(a2 + 768);
    v94 = *(_QWORD *)(a2 + 752);
    sub_21421B980(v85, v86, v87, v88, v89, v90, v91, v92, v97, v98, v101, v106);
    *(_QWORD *)(a1 + 648) = v85;
    *(_QWORD *)(a1 + 656) = v86;
    *(_QWORD *)(a1 + 664) = v87;
    *(_QWORD *)(a1 + 672) = v88;
    *(_QWORD *)(a1 + 680) = v89;
    *(_QWORD *)(a1 + 688) = v90;
    *(_QWORD *)(a1 + 696) = v91;
    *(_QWORD *)(a1 + 704) = v92;
    *(_QWORD *)(a1 + 712) = v97;
    *(_QWORD *)(a1 + 720) = v98;
    *(_QWORD *)(a1 + 728) = v101;
    *(_QWORD *)(a1 + 736) = v106;
    *(_QWORD *)(a1 + 744) = v111;
    *(_QWORD *)(a1 + 752) = v94;
    *(_QWORD *)(a1 + 760) = v95;
    *(_QWORD *)(a1 + 768) = v96;
    *(_BYTE *)(a1 + 776) = v124;
  }
  return a1;
}

uint64_t assignWithCopy for SgAnimatableData.Item(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  __int128 *v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  _OWORD *v119;
  int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _OWORD *v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t *v143;
  int v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t *v151;
  int v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  __int128 v156;
  __int128 *v157;
  __int128 *v158;
  _BYTE *v159;
  int v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  _OWORD *v197;
  _BYTE *v198;
  int v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  uint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  char v297;
  char v298;
  char v299;
  char v300;
  char v301;
  char v302;
  char v303;
  uint64_t v304;
  _BYTE *v305;
  char v306;
  char v307;

  v305 = (_BYTE *)(a1 + 288);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = (__int128 *)(a1 + 72);
  v5 = (__int128 *)(a2 + 72);
  v6 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
    if (v6 == 255)
    {
      v12 = *v5;
      v13 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v13;
      *v4 = v12;
      v14 = *(_OWORD *)(a2 + 120);
      v15 = *(_OWORD *)(a2 + 136);
      v16 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
      *(_OWORD *)(a1 + 136) = v15;
      *(_OWORD *)(a1 + 152) = v16;
      *(_OWORD *)(a1 + 120) = v14;
    }
    else
    {
      v297 = v6 & 1;
      v34 = *(_QWORD *)(a2 + 72);
      v35 = *(_QWORD *)(a2 + 80);
      v36 = *(_QWORD *)(a2 + 88);
      v37 = *(_QWORD *)(a2 + 96);
      v38 = *(_QWORD *)(a2 + 104);
      v39 = *(_QWORD *)(a2 + 112);
      v40 = *(_QWORD *)(a2 + 120);
      v41 = *(_QWORD *)(a2 + 128);
      v249 = *(_QWORD *)(a2 + 136);
      v257 = *(_QWORD *)(a2 + 144);
      v267 = *(_QWORD *)(a2 + 152);
      v277 = *(_QWORD *)(a2 + 160);
      v287 = *(_QWORD *)(a2 + 168);
      sub_21421BAE4(v34, v35, v36, v37, v38, v39, v40, v41, v249);
      *(_QWORD *)(a1 + 72) = v34;
      *(_QWORD *)(a1 + 80) = v35;
      *(_QWORD *)(a1 + 88) = v36;
      *(_QWORD *)(a1 + 96) = v37;
      *(_QWORD *)(a1 + 104) = v38;
      *(_QWORD *)(a1 + 112) = v39;
      *(_QWORD *)(a1 + 120) = v40;
      *(_QWORD *)(a1 + 128) = v41;
      *(_QWORD *)(a1 + 136) = v249;
      *(_QWORD *)(a1 + 144) = v257;
      *(_QWORD *)(a1 + 152) = v267;
      *(_QWORD *)(a1 + 160) = v277;
      *(_QWORD *)(a1 + 168) = v287;
      *(_BYTE *)(a1 + 176) = v297;
    }
  }
  else if (v6 == 255)
  {
    sub_2141E0750(a1 + 72, &qword_253F13368);
    v8 = *(_OWORD *)(a2 + 88);
    v7 = *(_OWORD *)(a2 + 104);
    *v4 = *v5;
    *(_OWORD *)(a1 + 88) = v8;
    *(_OWORD *)(a1 + 104) = v7;
    v10 = *(_OWORD *)(a2 + 136);
    v9 = *(_OWORD *)(a2 + 152);
    v11 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    *(_OWORD *)(a1 + 136) = v10;
    *(_OWORD *)(a1 + 152) = v9;
    *(_OWORD *)(a1 + 120) = v11;
  }
  else
  {
    v296 = v6 & 1;
    v17 = *(_QWORD *)(a2 + 72);
    v18 = *(_QWORD *)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 88);
    v20 = *(_QWORD *)(a2 + 96);
    v21 = *(_QWORD *)(a2 + 104);
    v22 = *(_QWORD *)(a2 + 112);
    v23 = *(_QWORD *)(a2 + 120);
    v24 = *(_QWORD *)(a2 + 128);
    v248 = *(_QWORD *)(a2 + 136);
    v256 = *(_QWORD *)(a2 + 144);
    v266 = *(_QWORD *)(a2 + 152);
    v276 = *(_QWORD *)(a2 + 160);
    v286 = *(_QWORD *)(a2 + 168);
    sub_21421BAE4(v17, v18, v19, v20, v21, v22, v23, v24, v248);
    v25 = *(_QWORD *)(a1 + 72);
    v26 = *(_QWORD *)(a1 + 80);
    v27 = *(_QWORD *)(a1 + 88);
    v28 = *(_QWORD *)(a1 + 96);
    v29 = *(_QWORD *)(a1 + 104);
    v30 = *(_QWORD *)(a1 + 112);
    v31 = *(_QWORD *)(a1 + 120);
    v32 = *(_QWORD *)(a1 + 128);
    v33 = *(_OWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v19;
    *(_QWORD *)(a1 + 96) = v20;
    *(_QWORD *)(a1 + 104) = v21;
    *(_QWORD *)(a1 + 112) = v22;
    *(_QWORD *)(a1 + 120) = v23;
    *(_QWORD *)(a1 + 128) = v24;
    *(_QWORD *)(a1 + 136) = v248;
    *(_QWORD *)(a1 + 144) = v256;
    *(_QWORD *)(a1 + 152) = v266;
    *(_QWORD *)(a1 + 160) = v276;
    *(_QWORD *)(a1 + 168) = v286;
    *(_BYTE *)(a1 + 176) = v296;
    sub_21421BB6C(v25, v26, v27, v28, v29, v30, v31, v32, v33);
  }
  v42 = (__int128 *)(a1 + 184);
  v43 = (__int128 *)(a2 + 184);
  v44 = *(unsigned __int8 *)(a2 + 288);
  if (*(unsigned __int8 *)(a1 + 288) == 255)
  {
    if (v44 == 255)
    {
      v50 = *v43;
      v51 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = v51;
      *v42 = v50;
      v52 = *(_OWORD *)(a2 + 232);
      v53 = *(_OWORD *)(a2 + 248);
      v54 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
      *(_OWORD *)(a1 + 248) = v53;
      *(_OWORD *)(a1 + 264) = v54;
      *(_OWORD *)(a1 + 232) = v52;
      goto LABEL_13;
    }
    v299 = v44 & 1;
    v73 = *(_QWORD *)(a2 + 184);
    v74 = *(_QWORD *)(a2 + 192);
    v75 = *(_QWORD *)(a2 + 200);
    v76 = *(_QWORD *)(a2 + 208);
    v77 = *(_QWORD *)(a2 + 216);
    v78 = *(_QWORD *)(a2 + 224);
    v79 = *(_QWORD *)(a2 + 232);
    v80 = *(_QWORD *)(a2 + 240);
    v251 = *(_QWORD *)(a2 + 248);
    v259 = *(_QWORD *)(a2 + 256);
    v269 = *(_QWORD *)(a2 + 264);
    v279 = *(_QWORD *)(a2 + 272);
    v289 = *(_QWORD *)(a2 + 280);
    sub_21421BAE4(v73, v74, v75, v76, v77, v78, v79, v80, v251);
    *(_QWORD *)(a1 + 184) = v73;
    *(_QWORD *)(a1 + 192) = v74;
    *(_QWORD *)(a1 + 200) = v75;
    *(_QWORD *)(a1 + 208) = v76;
    *(_QWORD *)(a1 + 216) = v77;
    *(_QWORD *)(a1 + 224) = v78;
    *(_QWORD *)(a1 + 232) = v79;
    *(_QWORD *)(a1 + 240) = v80;
    *(_QWORD *)(a1 + 248) = v251;
    *(_QWORD *)(a1 + 256) = v259;
    *(_QWORD *)(a1 + 264) = v269;
    *(_QWORD *)(a1 + 272) = v279;
    *(_QWORD *)(a1 + 280) = v289;
    v55 = v305;
    *v305 = v299;
  }
  else
  {
    if (v44 == 255)
    {
      sub_2141E0750(a1 + 184, &qword_253F13368);
      v46 = *(_OWORD *)(a2 + 200);
      v45 = *(_OWORD *)(a2 + 216);
      *v42 = *v43;
      *(_OWORD *)(a1 + 200) = v46;
      *(_OWORD *)(a1 + 216) = v45;
      v48 = *(_OWORD *)(a2 + 248);
      v47 = *(_OWORD *)(a2 + 264);
      v49 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
      *(_OWORD *)(a1 + 248) = v48;
      *(_OWORD *)(a1 + 264) = v47;
      *(_OWORD *)(a1 + 232) = v49;
LABEL_13:
      v55 = v305;
      goto LABEL_16;
    }
    v298 = v44 & 1;
    v56 = *(_QWORD *)(a2 + 184);
    v57 = *(_QWORD *)(a2 + 192);
    v58 = *(_QWORD *)(a2 + 200);
    v59 = *(_QWORD *)(a2 + 208);
    v60 = *(_QWORD *)(a2 + 216);
    v61 = *(_QWORD *)(a2 + 224);
    v62 = *(_QWORD *)(a2 + 232);
    v63 = *(_QWORD *)(a2 + 240);
    v250 = *(_QWORD *)(a2 + 248);
    v258 = *(_QWORD *)(a2 + 256);
    v268 = *(_QWORD *)(a2 + 264);
    v278 = *(_QWORD *)(a2 + 272);
    v288 = *(_QWORD *)(a2 + 280);
    sub_21421BAE4(v56, v57, v58, v59, v60, v61, v62, v63, v250);
    v64 = *(_QWORD *)(a1 + 184);
    v65 = *(_QWORD *)(a1 + 192);
    v66 = *(_QWORD *)(a1 + 200);
    v67 = *(_QWORD *)(a1 + 208);
    v68 = *(_QWORD *)(a1 + 216);
    v69 = *(_QWORD *)(a1 + 224);
    v70 = *(_QWORD *)(a1 + 232);
    v71 = *(_QWORD *)(a1 + 240);
    v72 = *(_OWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 184) = v56;
    *(_QWORD *)(a1 + 192) = v57;
    *(_QWORD *)(a1 + 200) = v58;
    *(_QWORD *)(a1 + 208) = v59;
    *(_QWORD *)(a1 + 216) = v60;
    *(_QWORD *)(a1 + 224) = v61;
    v55 = v305;
    *(_QWORD *)(a1 + 232) = v62;
    *(_QWORD *)(a1 + 240) = v63;
    *(_QWORD *)(a1 + 248) = v250;
    *(_QWORD *)(a1 + 256) = v258;
    *(_QWORD *)(a1 + 264) = v268;
    *(_QWORD *)(a1 + 272) = v278;
    *(_QWORD *)(a1 + 280) = v288;
    *v305 = v298;
    sub_21421BB6C(v64, v65, v66, v67, v68, v69, v70, v71, v72);
  }
LABEL_16:
  v81 = (__int128 *)(a1 + 296);
  v82 = (__int128 *)(a2 + 296);
  v83 = *(unsigned __int8 *)(a2 + 392);
  if (*(unsigned __int8 *)(a1 + 392) == 255)
  {
    if (v83 == 255)
    {
      v89 = *v82;
      v90 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v90;
      *v81 = v89;
      v91 = *(_OWORD *)(a2 + 344);
      v92 = *(_OWORD *)(a2 + 360);
      v93 = *(_OWORD *)(a2 + 376);
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v92;
      *(_OWORD *)(a1 + 376) = v93;
      *(_OWORD *)(a1 + 344) = v91;
    }
    else
    {
      v301 = v83 & 1;
      v110 = *(_QWORD *)(a2 + 296);
      v111 = *(_QWORD *)(a2 + 304);
      v112 = *(_QWORD *)(a2 + 312);
      v113 = *(_QWORD *)(a2 + 320);
      v114 = *(_QWORD *)(a2 + 328);
      v115 = *(_QWORD *)(a2 + 336);
      v116 = *(_QWORD *)(a2 + 344);
      v117 = *(_QWORD *)(a2 + 352);
      v261 = *(_QWORD *)(a2 + 360);
      v271 = *(_QWORD *)(a2 + 368);
      v281 = *(_QWORD *)(a2 + 376);
      v291 = *(_QWORD *)(a2 + 384);
      sub_21421B808(v110, v111, v112, v113, v114, v115, v116, v117);
      *(_QWORD *)(a1 + 296) = v110;
      *(_QWORD *)(a1 + 304) = v111;
      *(_QWORD *)(a1 + 312) = v112;
      *(_QWORD *)(a1 + 320) = v113;
      *(_QWORD *)(a1 + 328) = v114;
      *(_QWORD *)(a1 + 336) = v115;
      v55 = v305;
      *(_QWORD *)(a1 + 344) = v116;
      *(_QWORD *)(a1 + 352) = v117;
      *(_QWORD *)(a1 + 360) = v261;
      *(_QWORD *)(a1 + 368) = v271;
      *(_QWORD *)(a1 + 376) = v281;
      *(_QWORD *)(a1 + 384) = v291;
      v305[104] = v301;
    }
  }
  else if (v83 == 255)
  {
    sub_2141E0750(a1 + 296, qword_253F10468);
    v85 = *(_OWORD *)(a2 + 312);
    v84 = *(_OWORD *)(a2 + 328);
    *v81 = *v82;
    *(_OWORD *)(a1 + 312) = v85;
    *(_OWORD *)(a1 + 328) = v84;
    v87 = *(_OWORD *)(a2 + 360);
    v86 = *(_OWORD *)(a2 + 376);
    v88 = *(_OWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v87;
    *(_OWORD *)(a1 + 376) = v86;
    *(_OWORD *)(a1 + 344) = v88;
  }
  else
  {
    v300 = v83 & 1;
    v94 = *(_QWORD *)(a2 + 296);
    v95 = *(_QWORD *)(a2 + 304);
    v96 = *(_QWORD *)(a2 + 312);
    v97 = *(_QWORD *)(a2 + 320);
    v98 = *(_QWORD *)(a2 + 328);
    v99 = *(_QWORD *)(a2 + 336);
    v100 = *(_QWORD *)(a2 + 344);
    v101 = *(_QWORD *)(a2 + 352);
    v260 = *(_QWORD *)(a2 + 360);
    v270 = *(_QWORD *)(a2 + 368);
    v280 = *(_QWORD *)(a2 + 376);
    v290 = *(_QWORD *)(a2 + 384);
    sub_21421B808(v94, v95, v96, v97, v98, v99, v100, v101);
    v102 = *(_QWORD *)(a1 + 296);
    v103 = *(_QWORD *)(a1 + 304);
    v104 = *(_QWORD *)(a1 + 312);
    v105 = *(_QWORD *)(a1 + 320);
    v106 = *(_QWORD *)(a1 + 328);
    v107 = *(_QWORD *)(a1 + 336);
    v108 = *(_QWORD *)(a1 + 344);
    v109 = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 296) = v94;
    *(_QWORD *)(a1 + 304) = v95;
    *(_QWORD *)(a1 + 312) = v96;
    *(_QWORD *)(a1 + 320) = v97;
    *(_QWORD *)(a1 + 328) = v98;
    *(_QWORD *)(a1 + 336) = v99;
    v55 = v305;
    *(_QWORD *)(a1 + 344) = v100;
    *(_QWORD *)(a1 + 352) = v101;
    *(_QWORD *)(a1 + 360) = v260;
    *(_QWORD *)(a1 + 368) = v270;
    *(_QWORD *)(a1 + 376) = v280;
    *(_QWORD *)(a1 + 384) = v290;
    v305[104] = v300;
    sub_21421B8A0(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  v118 = (_OWORD *)(a1 + 400);
  v119 = (_OWORD *)(a2 + 400);
  v120 = *(unsigned __int8 *)(a2 + 528);
  if (*(unsigned __int8 *)(a1 + 528) == 255)
  {
    if (v120 == 255)
    {
      *v118 = *v119;
      v127 = *(_OWORD *)(a2 + 416);
      v128 = *(_OWORD *)(a2 + 432);
      v129 = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 464) = v129;
      *(_OWORD *)(a1 + 416) = v127;
      *(_OWORD *)(a1 + 432) = v128;
      v130 = *(_OWORD *)(a2 + 480);
      v131 = *(_OWORD *)(a2 + 496);
      v132 = *(_OWORD *)(a2 + 512);
      *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
      *(_OWORD *)(a1 + 496) = v131;
      *(_OWORD *)(a1 + 512) = v132;
      *(_OWORD *)(a1 + 480) = v130;
      goto LABEL_49;
    }
LABEL_30:
    v133 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = v133;
    v134 = (_OWORD *)(a1 + 416);
    v135 = (__int128 *)(a2 + 416);
    v136 = *(_QWORD *)(a2 + 440);
    swift_retain();
    if ((v120 & 1) != 0)
    {
      if (v136)
      {
        *(_QWORD *)(a1 + 440) = v136;
        *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v136 - 8))(a1 + 416, a2 + 416, v136);
        v137 = *(_QWORD *)(a2 + 456);
        if (v137)
        {
LABEL_33:
          v138 = *(_QWORD *)(a2 + 464);
          *(_QWORD *)(a1 + 456) = v137;
          *(_QWORD *)(a1 + 464) = v138;
          swift_retain();
LABEL_39:
          *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
          v143 = (uint64_t *)(a2 + 480);
          v144 = *(unsigned __int8 *)(a2 + 488);
          swift_bridgeObjectRetain();
          if (v144 == 255)
          {
            v145 = *v143;
            *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
            *(_QWORD *)(a1 + 480) = v145;
          }
          else
          {
            v146 = v144 & 1;
            v147 = *v143;
            sub_2141E83F4(v147, v146);
            *(_QWORD *)(a1 + 480) = v147;
            v55[200] = v146;
          }
          v148 = *(_OWORD *)(a2 + 512);
          *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
          *(_OWORD *)(a1 + 512) = v148;
          v55[240] = 1;
          goto LABEL_49;
        }
      }
      else
      {
        v141 = *v135;
        v142 = *(_OWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
        *v134 = v141;
        *(_OWORD *)(a1 + 432) = v142;
        v137 = *(_QWORD *)(a2 + 456);
        if (v137)
          goto LABEL_33;
      }
      *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
      goto LABEL_39;
    }
    if (v136)
    {
      *(_QWORD *)(a1 + 440) = v136;
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v136 - 8))(a1 + 416, a2 + 416, v136);
      v139 = *(_QWORD *)(a2 + 456);
      if (v139)
      {
LABEL_36:
        v140 = *(_QWORD *)(a2 + 464);
        *(_QWORD *)(a1 + 456) = v139;
        *(_QWORD *)(a1 + 464) = v140;
        swift_retain();
LABEL_45:
        *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
        v151 = (uint64_t *)(a2 + 480);
        v152 = *(unsigned __int8 *)(a2 + 488);
        swift_bridgeObjectRetain();
        if (v152 == 255)
        {
          v153 = *v151;
          *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
          *(_QWORD *)(a1 + 480) = v153;
        }
        else
        {
          v154 = v152 & 1;
          v155 = *v151;
          sub_2141E83F4(v155, v154);
          *(_QWORD *)(a1 + 480) = v155;
          v55[200] = v154;
        }
        v156 = *(_OWORD *)(a2 + 512);
        *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
        *(_OWORD *)(a1 + 512) = v156;
        v55[240] = 0;
        goto LABEL_49;
      }
    }
    else
    {
      v149 = *v135;
      v150 = *(_OWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      *v134 = v149;
      *(_OWORD *)(a1 + 432) = v150;
      v139 = *(_QWORD *)(a2 + 456);
      if (v139)
        goto LABEL_36;
    }
    *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
    goto LABEL_45;
  }
  if (v120 == 255)
  {
    sub_2141E0750(a1 + 400, &qword_254D695C8);
    *v118 = *v119;
    v121 = *(_OWORD *)(a2 + 464);
    v123 = *(_OWORD *)(a2 + 416);
    v122 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v121;
    *(_OWORD *)(a1 + 416) = v123;
    *(_OWORD *)(a1 + 432) = v122;
    v125 = *(_OWORD *)(a2 + 496);
    v124 = *(_OWORD *)(a2 + 512);
    v126 = *(_OWORD *)(a2 + 480);
    *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
    *(_OWORD *)(a1 + 496) = v125;
    *(_OWORD *)(a1 + 512) = v124;
    *(_OWORD *)(a1 + 480) = v126;
    goto LABEL_49;
  }
  if (a1 != a2)
  {
    sub_2141E0750(a1 + 400, &qword_254D695C8);
    LOBYTE(v120) = *(_BYTE *)(a2 + 528);
    goto LABEL_30;
  }
LABEL_49:
  v157 = (__int128 *)(a1 + 536);
  v158 = (__int128 *)(a2 + 536);
  v159 = v55 + 352;
  v160 = *(unsigned __int8 *)(a2 + 640);
  if (*(unsigned __int8 *)(a1 + 640) == 255)
  {
    if (v160 == 255)
    {
      v166 = *v158;
      v167 = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 568) = v167;
      *v157 = v166;
      v168 = *(_OWORD *)(a2 + 584);
      v169 = *(_OWORD *)(a2 + 600);
      v170 = *(_OWORD *)(a2 + 616);
      *(_OWORD *)(a1 + 625) = *(_OWORD *)(a2 + 625);
      *(_OWORD *)(a1 + 600) = v169;
      *(_OWORD *)(a1 + 616) = v170;
      *(_OWORD *)(a1 + 584) = v168;
    }
    else
    {
      v303 = v160 & 1;
      v188 = *(_QWORD *)(a2 + 536);
      v189 = *(_QWORD *)(a2 + 544);
      v190 = *(_QWORD *)(a2 + 552);
      v191 = *(_QWORD *)(a2 + 560);
      v192 = *(_QWORD *)(a2 + 568);
      v193 = *(_QWORD *)(a2 + 576);
      v194 = *(_QWORD *)(a2 + 584);
      v195 = *(_QWORD *)(a2 + 592);
      v253 = *(_QWORD *)(a2 + 600);
      v263 = *(_QWORD *)(a2 + 608);
      v273 = *(_QWORD *)(a2 + 616);
      v283 = *(_QWORD *)(a2 + 624);
      v293 = *(_QWORD *)(a2 + 632);
      v245 = v159;
      sub_21421BAE4(v188, v189, v190, v191, v192, v193, v194, v195, v253);
      *(_QWORD *)(a1 + 536) = v188;
      *(_QWORD *)(a1 + 544) = v189;
      *(_QWORD *)(a1 + 552) = v190;
      *(_QWORD *)(a1 + 560) = v191;
      *(_QWORD *)(a1 + 568) = v192;
      v55 = v305;
      *(_QWORD *)(a1 + 576) = v193;
      *(_QWORD *)(a1 + 584) = v194;
      *(_QWORD *)(a1 + 592) = v195;
      *(_QWORD *)(a1 + 600) = v253;
      *(_QWORD *)(a1 + 608) = v263;
      *(_QWORD *)(a1 + 616) = v273;
      *(_QWORD *)(a1 + 624) = v283;
      *(_QWORD *)(a1 + 632) = v293;
      *v245 = v303;
    }
  }
  else if (v160 == 255)
  {
    sub_2141E0750(a1 + 536, &qword_253F13368);
    v162 = *(_OWORD *)(a2 + 552);
    v161 = *(_OWORD *)(a2 + 568);
    *v157 = *v158;
    *(_OWORD *)(a1 + 552) = v162;
    *(_OWORD *)(a1 + 568) = v161;
    v164 = *(_OWORD *)(a2 + 600);
    v163 = *(_OWORD *)(a2 + 616);
    v165 = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 625) = *(_OWORD *)(a2 + 625);
    *(_OWORD *)(a1 + 600) = v164;
    *(_OWORD *)(a1 + 616) = v163;
    *(_OWORD *)(a1 + 584) = v165;
  }
  else
  {
    v302 = v160 & 1;
    v171 = *(_QWORD *)(a2 + 544);
    v172 = *(_QWORD *)(a2 + 552);
    v173 = *(_QWORD *)(a2 + 560);
    v174 = *(_QWORD *)(a2 + 568);
    v175 = *(_QWORD *)(a2 + 576);
    v176 = *(_QWORD *)(a2 + 584);
    v177 = *(_QWORD *)(a2 + 592);
    v244 = *(_QWORD *)(a2 + 536);
    v252 = *(_QWORD *)(a2 + 600);
    v262 = *(_QWORD *)(a2 + 608);
    v272 = *(_QWORD *)(a2 + 616);
    v282 = *(_QWORD *)(a2 + 624);
    v292 = *(_QWORD *)(a2 + 632);
    v178 = v159;
    sub_21421BAE4(v244, v171, v172, v173, v174, v175, v176, v177, *(_OWORD *)(a2 + 600));
    v179 = *(_QWORD *)(a1 + 536);
    v180 = *(_QWORD *)(a1 + 544);
    v181 = *(_QWORD *)(a1 + 552);
    v182 = *(_QWORD *)(a1 + 560);
    v183 = *(_QWORD *)(a1 + 568);
    v184 = *(_QWORD *)(a1 + 576);
    v185 = *(_QWORD *)(a1 + 584);
    v186 = *(_QWORD *)(a1 + 592);
    v187 = *(_OWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 536) = v244;
    *(_QWORD *)(a1 + 544) = v171;
    *(_QWORD *)(a1 + 552) = v172;
    *(_QWORD *)(a1 + 560) = v173;
    *(_QWORD *)(a1 + 568) = v174;
    v55 = v305;
    *(_QWORD *)(a1 + 576) = v175;
    *(_QWORD *)(a1 + 584) = v176;
    *(_QWORD *)(a1 + 592) = v177;
    *(_QWORD *)(a1 + 600) = v252;
    *(_QWORD *)(a1 + 608) = v262;
    *(_QWORD *)(a1 + 616) = v272;
    *(_QWORD *)(a1 + 624) = v282;
    *(_QWORD *)(a1 + 632) = v292;
    *v178 = v302;
    sub_21421BB6C(v179, v180, v181, v182, v183, v184, v185, v186, v187);
  }
  v196 = (_OWORD *)(a1 + 648);
  v197 = (_OWORD *)(a2 + 648);
  v198 = v55 + 488;
  v199 = *(unsigned __int8 *)(a2 + 776);
  if (*(unsigned __int8 *)(a1 + 776) == 255)
  {
    if (v199 == 255)
    {
      *v196 = *v197;
      v206 = *(_OWORD *)(a2 + 664);
      v207 = *(_OWORD *)(a2 + 680);
      v208 = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 712) = v208;
      *(_OWORD *)(a1 + 664) = v206;
      *(_OWORD *)(a1 + 680) = v207;
      v209 = *(_OWORD *)(a2 + 728);
      v210 = *(_OWORD *)(a2 + 744);
      v211 = *(_OWORD *)(a2 + 760);
      *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
      *(_OWORD *)(a1 + 744) = v210;
      *(_OWORD *)(a1 + 760) = v211;
      *(_OWORD *)(a1 + 728) = v209;
    }
    else
    {
      v307 = v199 & 1;
      v231 = *(_QWORD *)(a2 + 648);
      v232 = *(_QWORD *)(a2 + 656);
      v233 = *(_QWORD *)(a2 + 664);
      v234 = *(_QWORD *)(a2 + 672);
      v235 = *(_QWORD *)(a2 + 680);
      v236 = *(_QWORD *)(a2 + 688);
      v237 = *(_QWORD *)(a2 + 696);
      v238 = *(_QWORD *)(a2 + 704);
      v243 = *(_QWORD *)(a2 + 712);
      v255 = *(_QWORD *)(a2 + 720);
      v265 = *(_QWORD *)(a2 + 728);
      v275 = *(_QWORD *)(a2 + 736);
      v285 = *(_QWORD *)(a2 + 744);
      v295 = *(_QWORD *)(a2 + 752);
      v240 = *(_QWORD *)(a2 + 760);
      v241 = *(_QWORD *)(a2 + 768);
      v247 = v198;
      sub_21421B980(v231, v232, v233, v234, v235, v236, v237, v238, v243, v255, v265, v275);
      *(_QWORD *)(a1 + 648) = v231;
      *(_QWORD *)(a1 + 656) = v232;
      *(_QWORD *)(a1 + 664) = v233;
      *(_QWORD *)(a1 + 672) = v234;
      *(_QWORD *)(a1 + 680) = v235;
      *(_QWORD *)(a1 + 688) = v236;
      *(_QWORD *)(a1 + 696) = v237;
      *(_QWORD *)(a1 + 704) = v238;
      *(_QWORD *)(a1 + 712) = v243;
      *(_QWORD *)(a1 + 720) = v255;
      *(_QWORD *)(a1 + 728) = v265;
      *(_QWORD *)(a1 + 736) = v275;
      *(_QWORD *)(a1 + 744) = v285;
      *(_QWORD *)(a1 + 752) = v295;
      *(_QWORD *)(a1 + 760) = v240;
      *(_QWORD *)(a1 + 768) = v241;
      *v247 = v307;
    }
  }
  else if (v199 == 255)
  {
    sub_2141E0750(a1 + 648, &qword_254D695C0);
    *v196 = *v197;
    v200 = *(_OWORD *)(a2 + 712);
    v202 = *(_OWORD *)(a2 + 664);
    v201 = *(_OWORD *)(a2 + 680);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 712) = v200;
    *(_OWORD *)(a1 + 664) = v202;
    *(_OWORD *)(a1 + 680) = v201;
    v204 = *(_OWORD *)(a2 + 744);
    v203 = *(_OWORD *)(a2 + 760);
    v205 = *(_OWORD *)(a2 + 728);
    *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
    *(_OWORD *)(a1 + 744) = v204;
    *(_OWORD *)(a1 + 760) = v203;
    *(_OWORD *)(a1 + 728) = v205;
  }
  else
  {
    v306 = v199 & 1;
    v212 = *(_QWORD *)(a2 + 648);
    v213 = *(_QWORD *)(a2 + 656);
    v214 = *(_QWORD *)(a2 + 664);
    v215 = *(_QWORD *)(a2 + 672);
    v216 = *(_QWORD *)(a2 + 680);
    v217 = *(_QWORD *)(a2 + 688);
    v218 = *(_QWORD *)(a2 + 696);
    v219 = *(_QWORD *)(a2 + 704);
    v242 = *(_QWORD *)(a2 + 712);
    v246 = *(_QWORD *)(a2 + 720);
    v254 = *(_QWORD *)(a2 + 728);
    v264 = *(_QWORD *)(a2 + 736);
    v274 = *(_QWORD *)(a2 + 744);
    v284 = *(_QWORD *)(a2 + 752);
    v294 = *(_QWORD *)(a2 + 760);
    v304 = *(_QWORD *)(a2 + 768);
    v220 = v198;
    sub_21421B980(v212, v213, v214, v215, v216, v217, v218, v219, v242, v246, v254, v264);
    v221 = *(_QWORD *)(a1 + 648);
    v222 = *(_QWORD *)(a1 + 656);
    v223 = *(_QWORD *)(a1 + 664);
    v224 = *(_QWORD *)(a1 + 672);
    v225 = *(_QWORD *)(a1 + 680);
    v226 = *(_QWORD *)(a1 + 688);
    v227 = *(_QWORD *)(a1 + 696);
    v228 = *(_QWORD *)(a1 + 704);
    v229 = *(_OWORD *)(a1 + 712);
    v230 = *(_OWORD *)(a1 + 728);
    *(_QWORD *)(a1 + 648) = v212;
    *(_QWORD *)(a1 + 656) = v213;
    *(_QWORD *)(a1 + 664) = v214;
    *(_QWORD *)(a1 + 672) = v215;
    *(_QWORD *)(a1 + 680) = v216;
    *(_QWORD *)(a1 + 688) = v217;
    *(_QWORD *)(a1 + 696) = v218;
    *(_QWORD *)(a1 + 704) = v219;
    *(_QWORD *)(a1 + 712) = v242;
    *(_QWORD *)(a1 + 720) = v246;
    *(_QWORD *)(a1 + 728) = v254;
    *(_QWORD *)(a1 + 736) = v264;
    *(_QWORD *)(a1 + 744) = v274;
    *(_QWORD *)(a1 + 752) = v284;
    *(_QWORD *)(a1 + 760) = v294;
    *(_QWORD *)(a1 + 768) = v304;
    *v220 = v306;
    sub_21421BA80(v221, v222, v223, v224, v225, v226, v227, v228, v229, *((uint64_t *)&v229 + 1), v230, BYTE8(v230));
  }
  return a1;
}

void *initializeWithTake for SgAnimatableData.Item(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x309uLL);
}

uint64_t assignWithTake for SgAnimatableData.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _OWORD *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v4 = a1 + 264;
  v5 = a2 + 264;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
    goto LABEL_4;
  v6 = *(unsigned __int8 *)(a2 + 176);
  if (v6 == 255)
  {
    sub_2141E0750(a1 + 72, &qword_253F13368);
LABEL_4:
    v7 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v7;
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    v8 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v8;
    v9 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v9;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a2 + 168);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v10;
  *(_BYTE *)(a1 + 176) = v6 & 1;
  sub_21421BB6C(v11, v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  if (*(unsigned __int8 *)(a1 + 288) == 255)
  {
LABEL_9:
    v21 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v21;
    *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
    v22 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v22;
    v23 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v23;
    goto LABEL_11;
  }
  v20 = *(unsigned __int8 *)(a2 + 288);
  if (v20 == 255)
  {
    sub_2141E0750(a1 + 184, &qword_253F13368);
    goto LABEL_9;
  }
  v24 = *(_QWORD *)(a2 + 280);
  v25 = *(_QWORD *)(a1 + 184);
  v26 = *(_QWORD *)(a1 + 192);
  v27 = *(_QWORD *)(a1 + 200);
  v28 = *(_QWORD *)(a1 + 208);
  v29 = *(_QWORD *)(a1 + 216);
  v30 = *(_QWORD *)(a1 + 224);
  v31 = *(_QWORD *)(a1 + 232);
  v32 = *(_QWORD *)(a1 + 240);
  v33 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 280) = v24;
  *(_BYTE *)(v4 + 24) = v20 & 1;
  sub_21421BB6C(v25, v26, v27, v28, v29, v30, v31, v32, v33);
LABEL_11:
  v34 = (_OWORD *)(a1 + 536);
  if (*(unsigned __int8 *)(v4 + 128) == 255)
  {
LABEL_14:
    v36 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(v4 + 112) = v36;
    *(_BYTE *)(v4 + 128) = *(_BYTE *)(v5 + 128);
    v37 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v37;
    v38 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v4 + 80) = v38;
    goto LABEL_16;
  }
  v35 = *(unsigned __int8 *)(a2 + 392);
  if (v35 == 255)
  {
    sub_2141E0750(v4 + 32, qword_253F10468);
    goto LABEL_14;
  }
  v39 = *(_QWORD *)(a1 + 296);
  v40 = *(_QWORD *)(a1 + 304);
  v41 = *(_QWORD *)(a1 + 312);
  v42 = *(_QWORD *)(a1 + 320);
  v43 = *(_QWORD *)(a1 + 328);
  v44 = *(_QWORD *)(a1 + 336);
  v45 = *(_QWORD *)(a1 + 344);
  v46 = *(_QWORD *)(a1 + 352);
  v47 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v4 + 48) = v47;
  v48 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(v4 + 80) = v48;
  v49 = *(_OWORD *)(v5 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(v5 + 96);
  *(_OWORD *)(v4 + 112) = v49;
  *(_BYTE *)(v4 + 128) = v35 & 1;
  sub_21421B8A0(v39, v40, v41, v42, v43, v44, v45, v46);
LABEL_16:
  v50 = (_OWORD *)(a2 + 536);
  if (*(unsigned __int8 *)(a1 + 528) == 255)
  {
LABEL_20:
    v51 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v51;
    *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
    v52 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v52;
    v53 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v53;
    v54 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v54;
    goto LABEL_21;
  }
  if (*(unsigned __int8 *)(a2 + 528) == 255 || a1 != a2)
  {
    sub_2141E0750(a1 + 400, &qword_254D695C8);
    goto LABEL_20;
  }
LABEL_21:
  if (*(unsigned __int8 *)(a1 + 640) == 255)
  {
LABEL_24:
    v56 = *(_OWORD *)(a2 + 616);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
    *(_OWORD *)(a1 + 616) = v56;
    *(_OWORD *)(a1 + 625) = *(_OWORD *)(a2 + 625);
    v57 = *(_OWORD *)(a2 + 552);
    *v34 = *v50;
    *(_OWORD *)(a1 + 552) = v57;
    v58 = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 584) = v58;
    goto LABEL_26;
  }
  v55 = *(unsigned __int8 *)(a2 + 640);
  if (v55 == 255)
  {
    sub_2141E0750(a1 + 536, &qword_253F13368);
    goto LABEL_24;
  }
  v59 = *(_QWORD *)(a2 + 632);
  v60 = *(_QWORD *)(a1 + 536);
  v61 = *(_QWORD *)(a1 + 544);
  v62 = *(_QWORD *)(a1 + 552);
  v63 = *(_QWORD *)(a1 + 560);
  v64 = *(_QWORD *)(a1 + 568);
  v65 = *(_QWORD *)(a1 + 576);
  v66 = *(_QWORD *)(a1 + 584);
  v67 = *(_QWORD *)(a1 + 592);
  v68 = *(_OWORD *)(a1 + 600);
  v69 = *(_OWORD *)(a2 + 552);
  *v34 = *v50;
  *(_OWORD *)(a1 + 552) = v69;
  v70 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v70;
  v71 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v71;
  *(_QWORD *)(a1 + 632) = v59;
  *(_BYTE *)(a1 + 640) = v55 & 1;
  sub_21421BB6C(v60, v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_26:
  if (*(unsigned __int8 *)(a1 + 776) != 255)
  {
    v72 = *(unsigned __int8 *)(a2 + 776);
    if (v72 != 255)
    {
      v77 = *(_QWORD *)(a1 + 648);
      v78 = *(_QWORD *)(a1 + 656);
      v79 = *(_QWORD *)(a1 + 664);
      v80 = *(_QWORD *)(a1 + 672);
      v81 = *(_QWORD *)(a1 + 680);
      v82 = *(_QWORD *)(a1 + 688);
      v83 = *(_QWORD *)(a1 + 696);
      v84 = *(_QWORD *)(a1 + 704);
      v85 = *(_OWORD *)(a1 + 712);
      v86 = *(_OWORD *)(a1 + 728);
      v87 = *(_OWORD *)(a2 + 664);
      *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
      *(_OWORD *)(a1 + 664) = v87;
      v88 = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
      *(_OWORD *)(a1 + 696) = v88;
      v89 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 728) = v89;
      v90 = *(_OWORD *)(a2 + 760);
      *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
      *(_OWORD *)(a1 + 760) = v90;
      *(_BYTE *)(a1 + 776) = v72 & 1;
      sub_21421BA80(v77, v78, v79, v80, v81, v82, v83, v84, v85, *((uint64_t *)&v85 + 1), v86, BYTE8(v86));
      return a1;
    }
    sub_2141E0750(a1 + 648, &qword_254D695C0);
  }
  v73 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v73;
  *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
  v74 = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = v74;
  v75 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v75;
  v76 = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 664) = v76;
  return a1;
}

uint64_t getEnumTagSinglePayload for SgAnimatableData.Item(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 777))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 176);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SgAnimatableData.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 776) = 0;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 777) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 777) = 0;
    if (a2)
      *(_BYTE *)(result + 176) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgAnimatableData.Item()
{
  return &type metadata for SgAnimatableData.Item;
}

ValueMetadata *type metadata accessor for SgAnimatableData()
{
  return &type metadata for SgAnimatableData;
}

uint64_t sub_2143297B4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SgMerger(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for SgMerger(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SgMerger(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SgMerger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SgMerger()
{
  return &type metadata for SgMerger;
}

void *AreaMark.init<A, B>(x:y:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _BYTE v55[7];
  int v56;
  char v57;
  _BYTE v58[7];
  _BYTE v59[7];
  char v60;
  _QWORD v61[39];
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[7];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _BYTE v70[7];
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int16 v74;
  int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _BYTE v80[7];
  uint64_t v81;
  uint64_t v82;
  char v83;
  _QWORD v84[2];
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[2];
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[144];
  _BYTE v101[152];

  v50 = a5;
  v51 = a7;
  v37 = a3;
  v54 = a8;
  v12 = type metadata accessor for PlottableValue(0, a5, a7, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - v14;
  v17 = type metadata accessor for PlottableValue(0, a4, a6, v16);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v35 - v18;
  v52 = v20;
  v53 = a1;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v48 = v22;
  v21(v19, a1, v22);
  sub_2143D046C((uint64_t)v19, a4, a6, (uint64_t)v84);
  v38 = v84[0];
  v39 = v84[1];
  v40 = v85;
  v41 = v86;
  v42 = v87;
  v43 = v88;
  v44 = v89;
  v45 = v90;
  v46 = v91;
  v23 = v13;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v25 = a2;
  v26 = v12;
  v24(v15, a2, v12);
  sub_2143D046C((uint64_t)v15, v50, v51, (uint64_t)v92);
  v27 = v92[1];
  v47 = v92[0];
  v28 = v93;
  v29 = v95;
  v30 = v96;
  v31 = v97;
  v49 = v94;
  v50 = v98;
  v51 = v99;
  if ((v97 & 0x80000000) == 0)
  {
    if (!v97)
    {
      sub_2141EF1B0(v95, v96, 0);
      v33 = v87;
      v32 = v88;
      v36 = v89;
      sub_2141DD140(v87, v88, v89);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v26);
      v62 = v38;
      v63 = v39;
      v64 = v40;
      v66 = v41;
      v67 = v42;
      v68 = v43;
      v69 = v44;
      v71 = v45;
      v72 = v46;
      sub_21428F980((uint64_t)&v62);
      v60 = v28;
      v61[0] = v47;
      v61[1] = v27;
      LOBYTE(v61[2]) = v28;
      *(_DWORD *)((char *)&v61[2] + 1) = *(_DWORD *)v59;
      HIDWORD(v61[2]) = *(_DWORD *)&v59[3];
      v61[3] = v49;
      v61[4] = v29;
      v61[5] = v30;
      LOBYTE(v61[6]) = 0;
      *(_DWORD *)((char *)&v61[6] + 1) = *(_DWORD *)v58;
      HIDWORD(v61[6]) = *(_DWORD *)&v58[3];
      v61[7] = v50;
      v61[8] = v51;
      LOBYTE(v61[9]) = v37;
      *(_WORD *)((char *)&v61[9] + 1) = 257;
      HIBYTE(v61[9]) = v57;
      *(_DWORD *)((char *)&v61[9] + 3) = v56;
      v61[10] = v33;
      v61[11] = v32;
      LOBYTE(v61[12]) = v36;
      *(_DWORD *)((char *)&v61[12] + 1) = *(_DWORD *)v55;
      HIDWORD(v61[12]) = *(_DWORD *)&v55[3];
      v61[13] = 0;
      v61[14] = 0;
      LOBYTE(v61[15]) = -4;
      sub_2141EFEF4((uint64_t)v61);
      goto LABEL_12;
    }
    if (v97 == 1)
      sub_2141EF1B0(v95, v96, 1);
  }
  if (((char)v89 & 0x80000000) == 0)
  {
    if (v89)
    {
      if (v89 == 1)
        sub_2141EF1B0(v87, v88, 1);
      goto LABEL_9;
    }
    sub_2141EF1B0(v87, v88, 0);
    sub_2141DD140(v29, v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v26);
    v60 = v40;
    v62 = v38;
    v63 = v39;
    v64 = v40;
    *(_DWORD *)v65 = *(_DWORD *)v59;
    *(_DWORD *)&v65[3] = *(_DWORD *)&v59[3];
    v66 = v41;
    v67 = v42;
    v68 = v43;
    v69 = v44;
    *(_DWORD *)v70 = *(_DWORD *)v58;
    *(_DWORD *)&v70[3] = *(_DWORD *)&v58[3];
    v71 = v45;
    v72 = v46;
    v73 = v37;
    v74 = 256;
    v75 = v56;
    v76 = v57;
    v77 = v29;
    v78 = v30;
    v79 = v31;
    *(_DWORD *)v80 = *(_DWORD *)v55;
    *(_DWORD *)&v80[3] = *(_DWORD *)&v55[3];
    v81 = 0;
    v82 = 0;
    v83 = -4;
    sub_2141EFEF4((uint64_t)&v62);
    v61[0] = v47;
    v61[1] = v27;
    LOBYTE(v61[2]) = v28;
    v61[3] = v49;
    v61[4] = v29;
    v61[5] = v30;
    LOBYTE(v61[6]) = v31;
    v61[7] = v50;
    v61[8] = v51;
    sub_21428F980((uint64_t)v61);
LABEL_12:
    sub_2141EDFD8((uint64_t)v61, (uint64_t)v100);
    sub_2141EDFD8((uint64_t)&v62, (uint64_t)v101);
    goto LABEL_13;
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v26);
  v62 = v38;
  v63 = v39;
  v64 = v40;
  v66 = v41;
  v67 = v42;
  v68 = v43;
  v69 = v44;
  v71 = v45;
  v72 = v46;
  sub_21428F980((uint64_t)&v62);
  v61[0] = v47;
  v61[1] = v27;
  LOBYTE(v61[2]) = v28;
  v61[3] = v49;
  v61[4] = v29;
  v61[5] = v30;
  LOBYTE(v61[6]) = v31;
  v61[7] = v50;
  v61[8] = v51;
  sub_21428F980((uint64_t)v61);
  sub_2141EDFD8((uint64_t)v61, (uint64_t)v100);
  sub_2141EDFD8((uint64_t)&v62, (uint64_t)v101);
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v48);
  sub_2141EDFD8((uint64_t)v101, (uint64_t)v61);
  sub_2141EDFD8((uint64_t)v100, (uint64_t)&v61[18]);
  v61[36] = 0;
  v61[37] = 0;
  LOBYTE(v61[38]) = -1;
  return memcpy(v54, v61, 0x131uLL);
}

