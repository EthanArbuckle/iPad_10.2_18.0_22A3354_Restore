uint64_t sub_2143A2DDC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v8;

  swift_retain();
  v4 = sub_2143A4274(a2, a1);
  swift_release();
  v8 = v4;
  v5 = swift_retain();
  MEMORY[0x2199CC8E4](v5);
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_21442501C();
  sub_214425064();
  sub_214424FF8();
  if (v4 >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain();
    v4 = sub_214425634();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21442579C();
    type metadata accessor for AnySignal();
  }
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = sub_2143A3DF8;
  v6[3] = 0;
  v6[4] = v8;
  sub_2141D8BF8(&qword_253F15840);
  swift_allocObject();
  return sub_214242E38(v4, (uint64_t)sub_214249740, (uint64_t)v6);
}

unint64_t sub_2143A2F4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[56];
  _BYTE v32[8];
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  _OWORD v37[3];
  uint64_t v38;

  result = sub_21436D444(MEMORY[0x24BEE4AF8]);
  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_20:
    *a2 = v5;
    return result;
  }
  v28 = a2;
  swift_bridgeObjectRetain();
  v7 = 32;
  while (1)
  {
    v8 = *(_OWORD *)(a1 + v7 + 16);
    v37[0] = *(_OWORD *)(a1 + v7);
    v38 = *(_QWORD *)(a1 + v7 + 48);
    v9 = *(_OWORD *)(a1 + v7 + 32);
    v37[1] = v8;
    v37[2] = v9;
    v10 = v37[0];
    if (!v5[2])
      goto LABEL_8;
    v11 = sub_214336B74(v37[0]);
    if ((v12 & 1) != 0)
    {
      v13 = v5[7] + 56 * v11;
      v14 = *(_BYTE *)v13;
      v15 = *(_QWORD *)(v13 + 24);
      v29 = *(_OWORD *)(v13 + 40);
      v30 = *(_OWORD *)(v13 + 8);
      v16 = swift_bridgeObjectRetain();
      v18 = v29;
      v17 = v30;
    }
    else
    {
LABEL_8:
      v16 = sub_21436CC10(MEMORY[0x24BEE4AF8]);
      v17 = 0uLL;
      v15 = 0;
      v14 = v10;
      v18 = 0uLL;
    }
    v32[0] = v14;
    v33 = v17;
    v34 = v15;
    v35 = v16;
    v36 = v18;
    sub_2143A46B0((uint64_t)v37);
    sub_2143A46B0((uint64_t)v37);
    sub_214423440((uint64_t)v32, (uint64_t)v37, (uint64_t)v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = sub_214336B74(v10);
    v22 = v5[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    if (v5[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v20 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        sub_2142AAAE4();
        if ((v25 & 1) != 0)
          goto LABEL_16;
      }
    }
    else
    {
      sub_2142A18D0(v24, isUniquelyReferenced_nonNull_native);
      v26 = sub_214336B74(v10);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_22;
      v21 = v26;
      if ((v25 & 1) != 0)
      {
LABEL_16:
        sub_2143A4700((uint64_t)v31, v5[7] + 56 * v21);
        goto LABEL_4;
      }
    }
    sub_2142A6730(v21, v10, (uint64_t)v31, v5);
LABEL_4:
    swift_bridgeObjectRelease();
    sub_2143A46D8((uint64_t)v37);
    v7 += 56;
    if (!--v6)
    {
      result = swift_bridgeObjectRelease();
      a2 = v28;
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2143A3180@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>, __n128 a6@<Q3>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  double *v13;

  v6 = 1 << *(_BYTE *)(*(_QWORD *)result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(*(_QWORD *)result + 64);
  a3.n128_u64[0] = 0;
  a4.n128_u64[0] = 0;
  a5.n128_u64[0] = 0;
  a6.n128_u64[0] = 0;
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
LABEL_20:
    v13 = (double *)(*(_QWORD *)(*(_QWORD *)result + 56) + 56 * v9);
    return ((uint64_t (*)(__n128, __n128, __n128, __n128, double, double))((char *)&loc_2143A32E0
                                                                                   + dword_2143A3334[*(unsigned __int8 *)v13]))(a3, a4, a5, a6, v13[3], v13[5]);
  }
  if ((unint64_t)(v6 + 63) >> 6 > 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)result + 72);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if ((unint64_t)(v6 + 63) >> 6 <= 2)
      goto LABEL_21;
    v10 = *(_QWORD *)(*(_QWORD *)result + 80);
    if (v10)
      goto LABEL_19;
    v11 = 3;
    if ((unint64_t)(v6 + 63) >> 6 <= 3)
      goto LABEL_21;
    v10 = *(_QWORD *)(*(_QWORD *)result + 88);
    if (v10)
      goto LABEL_19;
    v11 = 4;
    if ((unint64_t)(v6 + 63) >> 6 <= 4)
      goto LABEL_21;
    v10 = *(_QWORD *)(*(_QWORD *)result + 96);
    if (v10)
    {
LABEL_19:
      v9 = __clz(__rbit64(v10)) + (v11 << 6);
      goto LABEL_20;
    }
    v12 = 5;
    if ((unint64_t)(v6 + 63) >> 6 > 5)
    {
      v10 = *(_QWORD *)(*(_QWORD *)result + 104);
      if (v10)
      {
        v11 = 5;
        goto LABEL_19;
      }
      while (1)
      {
        v11 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          JUMPOUT(0x2143A3334);
        }
        if (v11 >= (uint64_t)((unint64_t)(v6 + 63) >> 6))
          break;
        v10 = *(_QWORD *)(*(_QWORD *)result + 64 + 8 * v11);
        ++v12;
        if (v10)
          goto LABEL_19;
      }
    }
  }
LABEL_21:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return result;
}

uint64_t *sub_2143A3344@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  unsigned int v15;
  double v16;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = 0;
  v3 = *result;
  v4 = 1 << *(_BYTE *)(*result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v7 = *(_QWORD *)(v3 + 64);
  v6 = v3 + 64;
  v8 = v5 & v7;
  v9 = (unint64_t)(v4 + 63) >> 6;
  v10 = 0.0;
  v11 = 0.0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v2 << 6);
      goto LABEL_5;
    }
    v19 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v19 >= v9)
      goto LABEL_34;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v2;
    if (!v20)
    {
      v2 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_34;
      v20 = *(_QWORD *)(v6 + 8 * v2);
      if (!v20)
      {
        v2 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_34;
        v20 = *(_QWORD *)(v6 + 8 * v2);
        if (!v20)
        {
          v2 = v19 + 3;
          if (v19 + 3 >= v9)
            goto LABEL_34;
          v20 = *(_QWORD *)(v6 + 8 * v2);
          if (!v20)
          {
            v2 = v19 + 4;
            if (v19 + 4 >= v9)
              goto LABEL_34;
            v20 = *(_QWORD *)(v6 + 8 * v2);
            if (!v20)
              break;
          }
        }
      }
    }
LABEL_33:
    v8 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v2 << 6);
LABEL_5:
    v14 = (double *)(*(_QWORD *)(*result + 56) + 56 * v13);
    v15 = *(unsigned __int8 *)v14;
    v16 = v14[6];
    if (v10 <= v16 && v15 < 2)
      v10 = v14[6];
    if (v11 <= v16 && (v15 & 0xFE) == 2)
      v11 = v14[6];
  }
  v21 = v19 + 5;
  if (v21 >= v9)
  {
LABEL_34:
    *(double *)a2 = v10;
    *(_QWORD *)(a2 + 8) = 0;
    *(double *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = 0;
    return result;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v2 = v21;
    goto LABEL_33;
  }
  while (1)
  {
    v2 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v2 >= v9)
      goto LABEL_34;
    v20 = *(_QWORD *)(v6 + 8 * v2);
    ++v21;
    if (v20)
      goto LABEL_33;
  }
LABEL_36:
  __break(1u);
  return result;
}

void sub_2143A34A8(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_2142D001C();
  *a1 = v2;
}

void sub_2143A3514(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;

  sub_2142D08C8(*a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8), a3);
  *a4 = v5;
}

void sub_2143A3548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x24BDAC7A8](v2);
  sub_2143A4774(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_2143A35D8 + 4 * byte_214430140[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2143A35D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRetain();
  *v0 = v1;
  return result;
}

uint64_t sub_2143A3664@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[6];

  v50 = a7;
  LODWORD(v51) = a6;
  v12 = *(double *)(a1 + 16);
  v11 = *(double *)(a1 + 24);
  v48 = *a2;
  v13 = *a4;
  v14 = *(_QWORD *)a5;
  v15 = *(_QWORD *)(a5 + 8);
  v49 = *(unsigned __int8 *)(a5 + 16);
  v16 = *a8;
  v17 = a3[3];
  v18 = a3[4];
  v19 = sub_2141E88D0(a3, v17);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  if (qword_254D68ED0 != -1)
    swift_once();
  v43 = v15;
  v44 = v14;
  v23 = qword_254D68ED8;
  swift_retain();
  if (v23 != -1)
    swift_once();
  v24 = qword_254D760B8;
  swift_retain();
  result = sub_2142ED48C((uint64_t)v21, v24, v17, v18, v52);
  v26 = v52[0];
  if (v16 == 9)
  {
    v27 = v51;
    LOBYTE(v16) = v51;
    if (v51 != 1)
    {
      if ((_BYTE)v51)
      {
        __break(1u);
        return result;
      }
      if (v12 != 0.0 && v11 <= 0.0)
        LOBYTE(v16) = 1;
      else
        LOBYTE(v16) = 2;
    }
  }
  else
  {
    v27 = v51;
  }
  v45 = v52[4];
  v46 = v52[3];
  v47 = v52[2];
  v51 = v52[1];
  if (v49)
  {
    v29 = sub_2143A499C(v16);
    v31 = v30;
  }
  else
  {
    v31 = v43;
    v29 = v44;
  }
  v32 = v16 - 3;
  v33 = v48;
  swift_retain();
  swift_retain();
  sub_2141ED0CC(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED014);
  v34 = v50;
  v35 = sub_21421C988(v50, v27, a10, v33, (uint64_t)v52, a10);
  v37 = v36;
  swift_release();
  sub_2141ED0CC(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED07C);
  result = swift_release();
  *(_BYTE *)a9 = v16;
  if (v32 >= 2)
    v38 = v37;
  else
    v38 = v35;
  if (v32 >= 2)
    v39 = v35;
  else
    v39 = v37;
  *(_QWORD *)(a9 + 8) = v29;
  *(_QWORD *)(a9 + 16) = v31;
  *(_QWORD *)(a9 + 24) = v13;
  v40 = v51;
  *(_QWORD *)(a9 + 32) = v26;
  *(_QWORD *)(a9 + 40) = v40;
  v41 = v46;
  *(_QWORD *)(a9 + 48) = v47;
  *(_QWORD *)(a9 + 56) = v41;
  *(_QWORD *)(a9 + 64) = v45;
  *(_BYTE *)(a9 + 72) = v32 < 2;
  *(double *)(a9 + 80) = v39;
  *(double *)(a9 + 88) = v38;
  *(_QWORD *)(a9 + 96) = v34;
  *(_BYTE *)(a9 + 104) = v27;
  return result;
}

uint64_t sub_2143A3910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42[5];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_2141ECF88(a2, (uint64_t)v42);
  v37 = v42[0];
  v8 = sub_2141D8BF8(&qword_253F12228);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_2141D8BF8(&qword_253F12220);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = *(_QWORD *)(a3 + 24);
  v14 = sub_214424134();
  v16 = v15;
  v38 = v17;
  v19 = v18;
  sub_2141ECF88(a2, (uint64_t)&v43);
  if (v45 < 0)
  {
    v45 &= ~0x8000000000000000;
    v34 = v43;
    KeyPath = swift_getKeyPath();
    v35 = a4;
    v29 = a1 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
    swift_beginAccess();
    v30 = (char *)v10 + *(int *)(v8 + 28);
    v31 = sub_214423F24();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v30, v29, v31);
    *v10 = KeyPath;
    sub_2141E070C((uint64_t)v10, (uint64_t)v13 + *(int *)(v11 + 36), &qword_253F12228);
    *v13 = v34;
    swift_retain();
    a4 = v35;
    sub_2141E0750((uint64_t)v10, &qword_253F12228);
    v40 = v16 & 1;
    v39 = v19 & 1;
    v24 = sub_214299CE4((uint64_t)v13, v36, v14, v16 & 1, v38, v19 & 1);
    v26 = v32;
    result = sub_2141E0750((uint64_t)v13, &qword_253F12220);
  }
  else
  {
    v20 = v43;
    v21 = v44;
    v22 = v45 & 1;
    v23 = v46;
    sub_2141DD130(v43, v44, v45 & 1);
    swift_bridgeObjectRetain();
    v41 = v16 & 1;
    v40 = v19 & 1;
    v24 = sub_2143C87D0(v20, v21, v22, v23);
    v26 = v25;
    sub_2141ED0BC(v20, v21, v22);
    result = swift_bridgeObjectRelease();
  }
  *a4 = v24;
  *((_QWORD *)a4 + 1) = v26;
  return result;
}

uint64_t sub_2143A3BA0@<X0>(double *a1@<X0>, _OWORD *a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t result;
  _OWORD v35[5];
  _BYTE v36[25];

  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = a2[5];
  v35[4] = a2[4];
  *(_OWORD *)v36 = v11;
  *(_OWORD *)&v36[9] = *(_OWORD *)((char *)a2 + 89);
  v12 = a2[1];
  v35[0] = *a2;
  v35[1] = v12;
  v13 = a2[3];
  v35[2] = a2[2];
  v35[3] = v13;
  v15 = *a3;
  v14 = a3[1];
  v16 = v12;
  sub_2141EA758(*((uint64_t *)&v35[0] + 1), v12, v35[0]);
  v20 = v19;
  v22 = v21;
  if (((1 << SLOBYTE(v35[0])) & 0x1E1) != 0)
  {
    v23 = v15 * v17;
LABEL_9:
    v26 = v14 * v18;
    goto LABEL_10;
  }
  if (((1 << SLOBYTE(v35[0])) & 6) == 0)
  {
    v23 = (v8 + v7 + v15) * v17 - v7;
    goto LABEL_9;
  }
  v24 = v15 * v17;
  v25 = (v8 + v7 + v15) * v17 - v7;
  if (v36[24] == 1)
    v23 = v25;
  else
    v23 = v24;
  v26 = (v10 + v9 + v14) * v18 - v9;
LABEL_10:
  sub_2141EA9FC(*((uint64_t *)&v35[0] + 1), v16, v35[0]);
  v28 = v27;
  v30 = v29;
  v31 = *(_QWORD *)&v36[16];
  v32 = v36[24];
  swift_retain();
  sub_2143A47B8(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED014);
  v33 = sub_21421C7F4(v31, v32, a4, a4, (uint64_t)v35, v23, v26, v28, v30, v20, v22);
  sub_2143A47B8(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED07C);
  result = swift_release();
  *a5 = v33;
  return result;
}

uint64_t sub_2143A3D3C(double *a1, double *a2)
{
  return ((uint64_t (*)(double, double, double, double, double, double, double))((char *)sub_2143A3D68
                                                                                         + 4
                                                                                         * byte_214430144[*(unsigned __int8 *)a2]))(a1[3], a1[2], a1[1], *a1, a2[3], a2[11], a2[10]);
}

void sub_2143A3D68(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *a1 = a5;
  a1[1] = a4;
  a1[2] = a3 + a6 + a7;
  a1[3] = a2;
}

float64x2_t sub_2143A3DF8@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (float64x2_t *)(a1 + 48);
    v4 = 0uLL;
    v5 = 0uLL;
    do
    {
      v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v3[-1], v4), (int8x16_t)v3[-1], (int8x16_t)v4);
      v6 = *v3;
      v3 += 2;
      v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v6, v5), (int8x16_t)v6, (int8x16_t)v5);
      --v2;
    }
    while (v2);
  }
  else
  {
    v4 = 0uLL;
    v5 = 0uLL;
  }
  result = vrndpq_f64(v4);
  *a2 = result;
  a2[1] = vrndpq_f64(v5);
  return result;
}

uint64_t sub_2143A3E48()
{
  sub_214425874();
  sub_214425880();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_2143A3EA4()
{
  sub_214425880();
  return sub_214425880();
}

uint64_t sub_2143A3EE0()
{
  sub_214425874();
  sub_214425880();
  sub_214425880();
  return sub_2144258B0();
}

BOOL sub_2143A3F38(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

void sub_2143A3F58(char a1@<W1>, char a2@<W2>, char *a3@<X8>)
{
  char v3;

  if (a2 == 2)
    v3 = 2;
  else
    v3 = 1;
  if (!a1)
    v3 = 0;
  *a3 = v3;
}

void sub_2143A3F78(char a1@<W1>, char a2@<W2>, char *a3@<X8>)
{
  char v3;

  if (a2 == 2)
    v3 = 2;
  else
    v3 = 3;
  if (!a1)
    v3 = 1;
  *a3 = v3;
}

uint64_t sub_2143A3F98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  *(_QWORD *)(a1 + 24) = sub_2141D8BF8(&qword_254D698F8);
  *(_QWORD *)(a1 + 32) = sub_21424C95C();
  v2 = swift_allocObject();
  *(_QWORD *)a1 = v2;
  result = sub_2143C8E68((uint64_t)v4, v2 + 16);
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_2143A4008@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[48];
  _BYTE v18[48];

  v10 = *a3;
  v11 = *a2;
  v12 = *a1;
  sub_21422F3FC(a4, (uint64_t)v18);
  type metadata accessor for AxisMarkLayoutContext();
  v13 = swift_allocObject();
  v14 = sub_21436CC10(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v13 + 184) = 0;
  *(_QWORD *)(v13 + 192) = 0;
  *(_QWORD *)(v13 + 200) = 0;
  *(_QWORD *)(v13 + 208) = 0;
  *(_QWORD *)(v13 + 216) = v14;
  *(_QWORD *)(v13 + 224) = 0;
  *(_QWORD *)(v13 + 232) = 0;
  sub_2141E070C((uint64_t)v18, (uint64_t)v17, &qword_253F146B8);
  swift_retain();
  swift_retain();
  v15 = sub_214422E14(a5, v12, v11, a6, (uint64_t)v17, v10);
  sub_2141E0750((uint64_t)v18, &qword_253F146B8);
  result = swift_beginAccess();
  *(_BYTE *)(v15 + 184) = v11;
  *a7 = v15;
  return result;
}

uint64_t sub_2143A410C@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  _BYTE v14[48];

  v10 = *a4;
  v11 = *a2;
  v12 = *a1;
  sub_21422F3FC(a3, (uint64_t)v14);
  type metadata accessor for AxisMarkRenderContext();
  swift_allocObject();
  swift_retain();
  swift_retain();
  result = sub_214422FBC(a5, v12, v11, a6, (uint64_t)v14, v10);
  *a7 = result;
  return result;
}

void sub_2143A41B4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t sub_2143A41C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  sub_2143F8874();
  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_2143A4274(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_36;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v35 = MEMORY[0x24BEE4AF8];
  result = sub_2144255B0();
  if ((v4 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v32 = v3 & 0xC000000000000001;
    v28 = v3 + 32;
    v30 = v3;
    v31 = a2;
    v29 = v4;
    while (1)
    {
      if (v7 == v4)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        swift_bridgeObjectRetain();
        v4 = sub_2144256AC();
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      if (v32)
      {
        v10 = MEMORY[0x2199CCE3C](v7, v3);
      }
      else
      {
        v10 = *(_QWORD *)(v28 + 8 * v7);
        swift_retain();
      }
      sub_2141D8BF8(&qword_253F15D58);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_214427890;
      *(_QWORD *)(v11 + 32) = a2;
      *(_QWORD *)(v11 + 40) = v10;
      v34 = v11;
      sub_214424FF8();
      v12 = v34;
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = sub_2143A3D3C;
      v13[3] = 0;
      v13[4] = a2;
      v13[5] = v10;
      v33 = v13;
      sub_2141D8BF8(&qword_253F15840);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *(_BYTE *)(v14 + 72) = 1;
      *(_WORD *)(v14 + 16) = 256;
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 24) = v12;
      *(_QWORD *)(v14 + 32) = v5;
      if (v12 >> 62)
      {
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        v15 = sub_2144256AC();
        if (!v15)
        {
LABEL_31:
          swift_bridgeObjectRelease();
          goto LABEL_7;
        }
      }
      else
      {
        v15 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (!v15)
          goto LABEL_31;
      }
      if (v15 < 1)
        goto LABEL_35;
      if ((v12 & 0xC000000000000001) != 0)
      {
        v16 = 0;
        do
        {
          v17 = MEMORY[0x2199CCE3C](v16, v12);
          swift_weakInit();
          v18 = *(_QWORD **)(v17 + 32);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v17 + 32) = v18;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
            *(_QWORD *)(v17 + 32) = v18;
          }
          v21 = v18[2];
          v20 = v18[3];
          if (v21 >= v20 >> 1)
          {
            v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
            *(_QWORD *)(v17 + 32) = v18;
          }
          ++v16;
          v18[2] = v21 + 1;
          sub_2143A485C((uint64_t)&v34, (uint64_t)&v18[v21 + 4]);
          swift_unknownObjectRelease();
        }
        while (v15 != v16);
      }
      else
      {
        v22 = 0;
        do
        {
          v23 = *(_QWORD *)(v12 + 8 * v22 + 32);
          swift_weakInit();
          v24 = *(_QWORD **)(v23 + 32);
          swift_retain();
          v25 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v23 + 32) = v24;
          if ((v25 & 1) == 0)
          {
            v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
            *(_QWORD *)(v23 + 32) = v24;
          }
          v27 = v24[2];
          v26 = v24[3];
          if (v27 >= v26 >> 1)
          {
            v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
            *(_QWORD *)(v23 + 32) = v24;
          }
          ++v22;
          v24[2] = v27 + 1;
          sub_2143A485C((uint64_t)&v34, (uint64_t)&v24[v27 + 4]);
          swift_release();
        }
        while (v15 != v22);
      }
      swift_bridgeObjectRelease();
      v3 = v30;
      a2 = v31;
      v4 = v29;
LABEL_7:
      ++v7;
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = sub_2143A482C;
      *(_QWORD *)(v8 + 24) = v33;
      v9 = *(_QWORD *)(v14 + 80);
      *(_QWORD *)(v14 + 80) = sub_2141E7E10;
      *(_QWORD *)(v14 + 88) = v8;
      sub_2141D972C(v9);
      sub_21442558C();
      sub_2144255BC();
      sub_2144255C8();
      sub_214425598();
      v5 = MEMORY[0x24BEE4AF8];
      if (v7 == v4)
        return v35;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2143A46B0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2143A46D8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2143A4700(uint64_t a1, uint64_t a2)
{
  assignWithTake for AxisLayoutInformation(a2, a1);
  return a2;
}

uint64_t sub_2143A473C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21424CA0C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_BYTE *)(v0 + 304));
  return swift_deallocObject();
}

uint64_t sub_2143A4774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_2143A47B8(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(a1[4], a1[5], a1[6], a1[7], a1[8]);
  return a1;
}

uint64_t sub_2143A47EC()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2143A47F8()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2143A482C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_2141F4E10(*(void (**)(uint64_t *__return_ptr, _OWORD *, _BYTE *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return result;
}

uint64_t sub_2143A485C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F13188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143A48A4()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_2143A48B0(uint64_t a1)
{
  uint64_t v1;

  return sub_2142437C4(a1, *(void (**)(_QWORD *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_2143A48BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2143A48E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  return sub_2143A3664(a1, a2, a3, a4, a5, *(unsigned __int8 *)(v6 + 16), *(_QWORD *)(v6 + 24), (unsigned __int8 *)(v6 + 32), a6, *(_QWORD *)(v6 + 80));
}

uint64_t sub_2143A4910()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2143A495C()
{
  uint64_t v0;

  return sub_2141F51A8(*(void (**)(_OWORD *, uint64_t *, _BYTE *, uint64_t *, __int128 *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_2143A4970()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2143A4994@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2143A41C4(v1, a1);
}

uint64_t sub_2143A499C(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)&sub_2143A49B8 + 4 * byte_21443014D[a1]))();
}

uint64_t destroy for ResolvedLayout(uint64_t *a1)
{
  return sub_2141ED07C(a1[4], a1[5], a1[6]);
}

uint64_t initializeWithCopy for ResolvedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  sub_2141ED014(v4, v5, v6);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for ResolvedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  sub_2141ED014(v4, v5, v6);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  sub_2141ED07C(v9, v10, v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 initializeWithTake for ResolvedLayout(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ResolvedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = v4;
  sub_2141ED07C(v5, v6, v7);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedLayout(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 48) = 2 * -a2;
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedLayout()
{
  return &type metadata for ResolvedLayout;
}

uint64_t getEnumTagSinglePayload for IndexedChannel(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 8;
  v5 = v3 - 8;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexedChannel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 7;
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexedChannel()
{
  return &type metadata for IndexedChannel;
}

uint64_t sub_2143A4D6C(uint64_t a1)
{
  uint64_t result;

  swift_release();
  result = swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 56) == 1)
    return swift_release();
  if (!*(_BYTE *)(a1 + 56))
    return _s6Charts15AnyChartContentVwxx_0(a1 + 16);
  return result;
}

uint64_t sub_2143A4DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 56) = 1;
    swift_retain();
  }
  else
  {
    v6 = (_OWORD *)(a1 + 16);
    v7 = (_OWORD *)(a2 + 16);
    if (v5)
    {
      v10 = *(_OWORD *)(a2 + 32);
      *v6 = *v7;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v8;
      (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
      *(_BYTE *)(a1 + 56) = 0;
    }
  }
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t sub_2143A4E78(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_2141DE9E0(a1 + 16);
    if (*(_BYTE *)(a2 + 56) == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v6;
      *(_BYTE *)(a1 + 56) = 1;
      swift_retain();
    }
    else
    {
      v4 = (__int128 *)(a2 + 16);
      if (*(_BYTE *)(a2 + 56))
      {
        v7 = *v4;
        v8 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = v8;
      }
      else
      {
        v5 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v5;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1 + 16, v4);
        *(_BYTE *)(a1 + 56) = 0;
      }
    }
  }
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2143A4F80(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_2141DE9E0(a1 + 16);
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t sub_2143A4FF4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2143A503C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MarksDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MarksDescriptor);
}

unint64_t sub_2143A509C()
{
  unint64_t result;

  result = qword_253F119C0;
  if (!qword_253F119C0)
  {
    result = MEMORY[0x2199CD934](&unk_2144301F0, &type metadata for IndexedChannel);
    atomic_store(result, (unint64_t *)&qword_253F119C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicViewContentOffsetTraitKey()
{
  return &type metadata for DynamicViewContentOffsetTraitKey;
}

void sub_2143A50F4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

double sub_2143A5104(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double MinX;
  char v20;
  double v21;
  _QWORD v23[2];
  double v24;
  double v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v25 = a3;
  *(double *)v23 = a1;
  v15 = sub_2144240D4();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v26.size.height = a8;
  MinX = CGRectGetMinX(v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BDED118], v15);
  v20 = sub_2144240C8();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if ((v20 & 1) != 0)
    v21 = a4;
  else
    v21 = a2;
  v24 = MinX - v21;
  v27.origin.x = a5;
  v27.origin.y = a6;
  v27.size.width = a7;
  v27.size.height = a8;
  *(double *)&v23[1] = CGRectGetMinY(v27) - a1;
  v28.origin.x = a5;
  v28.origin.y = a6;
  v28.size.width = a7;
  v28.size.height = a8;
  CGRectGetMaxX(v28);
  v29.origin.x = a5;
  v29.origin.y = a6;
  v29.size.width = a7;
  v29.size.height = a8;
  CGRectGetMinX(v29);
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = a7;
  v30.size.height = a8;
  CGRectGetMaxY(v30);
  v31.origin.x = a5;
  v31.origin.y = a6;
  v31.size.width = a7;
  v31.size.height = a8;
  CGRectGetMinY(v31);
  return v24;
}

uint64_t FunctionGraphMark.init(x:y:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v11 = sub_21442480C();
  *((_QWORD *)&v11 + 1) = v3;
  v12 = v4 & 1;
  v13 = v5;
  v14 = sub_21442480C();
  v15 = v6;
  v16 = v7 & 1;
  v18 = 0;
  v19 = 0;
  v17 = v8;
  v20 = 1;
  v21 = a2;
  v22 = a3;
  sub_2143A567C((uint64_t)&v11);
  return sub_2143A5698(&v11, a1);
}

uint64_t FunctionGraphMark.init(x:y:t:domain:function:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)&v22 = sub_21442480C();
  *((_QWORD *)&v22 + 1) = v11;
  v23 = v12 & 1;
  v24 = v13;
  v25 = sub_21442480C();
  v26 = v14;
  v27 = v15 & 1;
  v28 = v16;
  v29 = sub_21442480C();
  v30 = v17;
  v31 = v18 & 1;
  v32 = v19;
  v33 = a2;
  v34 = a3;
  v35 = a8;
  v36 = a9;
  sub_2143A56D4((uint64_t)&v22);
  return sub_2143A5698(&v22, a1);
}

uint64_t static FunctionGraphMark._layoutChartContent(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;
  __int128 v8[8];

  v2 = a1[5];
  v8[4] = a1[4];
  v8[5] = v2;
  v3 = a1[7];
  v8[6] = a1[6];
  v8[7] = v3;
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a1[3];
  v8[2] = a1[2];
  v8[3] = v5;
  v7 = *a2;
  return _s6Charts23FunctionLinePlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0(v8, (uint64_t *)&v7);
}

uint64_t static FunctionGraphMark._renderChartContent(_:_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v9[8];
  uint64_t v10;
  _OWORD v11[8];

  v3 = a1[5];
  v11[4] = a1[4];
  v11[5] = v3;
  v4 = a1[7];
  v11[6] = a1[6];
  v11[7] = v4;
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  v9[0] = *(_BYTE *)a2;
  v10 = v7;
  return static FunctionLinePlotContent._renderChartContent(_:_:)((uint64_t)v11, v9, a3);
}

uint64_t sub_2143A55DC(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;
  __int128 v8[8];

  v2 = a1[5];
  v8[4] = a1[4];
  v8[5] = v2;
  v3 = a1[7];
  v8[6] = a1[6];
  v8[7] = v3;
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a1[3];
  v8[2] = a1[2];
  v8[3] = v5;
  v7 = *a2;
  return _s6Charts23FunctionLinePlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0(v8, (uint64_t *)&v7);
}

uint64_t sub_2143A5628@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v9[8];
  uint64_t v10;
  _OWORD v11[8];

  v3 = a1[5];
  v11[4] = a1[4];
  v11[5] = v3;
  v4 = a1[7];
  v11[6] = a1[6];
  v11[7] = v4;
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  v9[0] = *(_BYTE *)a2;
  v10 = v7;
  return static FunctionLinePlotContent._renderChartContent(_:_:)((uint64_t)v11, v9, a3);
}

uint64_t sub_2143A567C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 80) & 1;
  *(_QWORD *)(result + 48) &= 1uLL;
  *(_QWORD *)(result + 80) = v1;
  return result;
}

uint64_t sub_2143A5698(__int128 *a1, uint64_t a2)
{
  initializeWithTake for FunctionLinePlotContent.FunctionLineRepresentation(a2, a1);
  return a2;
}

uint64_t sub_2143A56D4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 80) & 1 | 0x4000000000000000;
  *(_QWORD *)(result + 48) &= 1uLL;
  *(_QWORD *)(result + 80) = v1;
  return result;
}

uint64_t sub_2143A56F4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v11;
  char v14;
  char v15;

  v11 = a11 >> 62;
  if (a11 >> 62 != 2)
  {
    if ((_DWORD)v11 == 1)
    {
      v15 = a7 & 1;
      sub_2141DD130(result, a2, a3 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD130(a5, a6, v15);
      swift_bridgeObjectRetain();
      sub_2141DD130(a9, a10, a11 & 1);
    }
    else
    {
      if ((_DWORD)v11)
        return result;
      v14 = a7 & 1;
      sub_2141DD130(result, a2, a3 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD130(a5, a6, v14);
    }
    swift_bridgeObjectRetain();
  }
  return swift_retain();
}

uint64_t destroy for FunctionGraphMark(uint64_t *a1)
{
  return sub_2143A5868(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
}

uint64_t sub_2143A5868(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v11;
  char v14;
  char v15;

  v11 = a11 >> 62;
  if (a11 >> 62 == 2)
    return swift_release();
  if ((_DWORD)v11 == 1)
  {
    v15 = a7 & 1;
    sub_2141ED0BC(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a5, a6, v15);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a9, a10, a11 & 1);
    swift_release();
  }
  else
  {
    if ((_DWORD)v11)
      return result;
    v14 = a7 & 1;
    sub_2141ED0BC(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a5, a6, v14);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for FunctionGraphMark(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  sub_2143A56F4(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  return a1;
}

uint64_t assignWithCopy for FunctionGraphMark(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v23 = a2[9];
  v24 = a2[10];
  v25 = a2[11];
  v26 = a2[12];
  v27 = a2[13];
  v28 = a2[14];
  v29 = a2[15];
  sub_2143A56F4(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = v26;
  *(_QWORD *)(a1 + 104) = v27;
  *(_QWORD *)(a1 + 112) = v28;
  *(_QWORD *)(a1 + 120) = v29;
  sub_2143A5868(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21);
  return a1;
}

__n128 initializeWithTake for FunctionLinePlotContent.FunctionLineRepresentation(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for FunctionGraphMark(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v14;
  v15 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v15;
  v16 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v16;
  sub_2143A5868(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for FunctionGraphMark(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for FunctionGraphMark(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = 2 * -a2;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_QWORD *)(a1 + 120) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FunctionGraphMark()
{
  return &type metadata for FunctionGraphMark;
}

uint64_t storeEnumTagSinglePayload for LegendLayout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2143A5D78 + 4 * byte_214430315[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2143A5DAC + 4 * asc_214430310[v4]))();
}

uint64_t sub_2143A5DAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143A5DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143A5DBCLL);
  return result;
}

uint64_t sub_2143A5DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143A5DD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2143A5DD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143A5DDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegendLayout()
{
  return &type metadata for LegendLayout;
}

ValueMetadata *type metadata accessor for LegendRenderingContext()
{
  return &type metadata for LegendRenderingContext;
}

uint64_t sub_2143A5E08(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2143A5EC8(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2143A5F88(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D3D60(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 2;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D3D60((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2143A6044(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 88);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2143A6104(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 80);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_2141D39D4((char *)(v6 > 1), v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2143A61C4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void sub_2143A61D0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2143A61DC()
{
  uint64_t v1;

  sub_2143A6290();
  sub_214424224();
  return v1;
}

uint64_t sub_2143A6214()
{
  unsigned __int8 v1;

  sub_2143A624C();
  sub_214424224();
  return v1;
}

unint64_t sub_2143A624C()
{
  unint64_t result;

  result = qword_254D6D0D0;
  if (!qword_254D6D0D0)
  {
    result = MEMORY[0x2199CD934](&unk_21443042C, &type metadata for LegendLayoutKey);
    atomic_store(result, (unint64_t *)&qword_254D6D0D0);
  }
  return result;
}

unint64_t sub_2143A6290()
{
  unint64_t result;

  result = qword_254D6D0D8;
  if (!qword_254D6D0D8)
  {
    result = MEMORY[0x2199CD934](&unk_2144303F4, &type metadata for LegendRenderingContextKey);
    atomic_store(result, (unint64_t *)&qword_254D6D0D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for LegendRenderingContextKey()
{
  return &type metadata for LegendRenderingContextKey;
}

ValueMetadata *type metadata accessor for LegendLayoutKey()
{
  return &type metadata for LegendLayoutKey;
}

uint64_t sub_2143A62F4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return swift_retain();
}

uint64_t sub_2143A6300(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t destroy for DefaultChartLegend(uint64_t a1)
{
  sub_2143ABBF8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  return sub_2143A634C(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_2143A634C(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for DefaultChartLegend(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_2143A62F4(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(v2 + 16);
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  sub_2143A6300(v6, v2);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v2;
  return a1;
}

uint64_t assignWithCopy for DefaultChartLegend(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_2143A62F4(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_2143ABBF8(v6, v7, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v8 = *(_QWORD *)(v2 + 16);
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  sub_2143A6300(v8, v2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v2;
  sub_2143A634C(v9, v10);
  return a1;
}

uint64_t assignWithTake for DefaultChartLegend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_2143ABBF8(v6, v7, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  sub_2143A634C(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultChartLegend(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultChartLegend(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend()
{
  return &type metadata for DefaultChartLegend;
}

__n128 initializeWithTake for LegendRenderingContext.Category(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

ValueMetadata *type metadata accessor for LegendRenderingContext.Category()
{
  return &type metadata for LegendRenderingContext.Category;
}

ValueMetadata *type metadata accessor for LegendRenderingContext.Categories()
{
  return &type metadata for LegendRenderingContext.Categories;
}

uint64_t destroy for LegendRenderingContext.ColorRamp()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for LegendRenderingContext.ColorRamp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LegendRenderingContext.ColorRamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for LegendRenderingContext.ColorRamp(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegendRenderingContext.ColorRamp(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegendRenderingContext.ColorRamp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegendRenderingContext.ColorRamp()
{
  return &type metadata for LegendRenderingContext.ColorRamp;
}

uint64_t sub_2143A6788(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_bridgeObjectRetain();
  if (a4 < 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t destroy for LegendRenderingContext.Section(uint64_t a1)
{
  return sub_2143A67D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_2143A67D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_bridgeObjectRelease();
  if (a4 < 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LegendRenderingContext.Section(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_2143A6788(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LegendRenderingContext.Section(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_2143A6788(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_2143A67D4(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LegendRenderingContext.Section(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_2143A67D4(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegendRenderingContext.Section(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 63);
  v3 = ((*(unsigned __int8 *)(a1 + 24) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 24) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LegendRenderingContext.Section(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 63;
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_2143A69D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 7;
}

uint64_t sub_2143A69DC(uint64_t result)
{
  *(_BYTE *)(result + 24) &= ~0x80u;
  return result;
}

uint64_t sub_2143A69EC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 3 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for LegendRenderingContext.Section()
{
  return &type metadata for LegendRenderingContext.Section;
}

uint64_t sub_2143A6A10()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t sub_2143A6A1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2143A6A2C(uint64_t result, uint64_t a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  double *v16;
  uint64_t i;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;

  v4 = result;
  if ((a3 & 1) == 0 && (~a2 & 0x7FF0000000000000) != 0)
  {
    v6 = *(_QWORD *)(result + 16);
    if (v6)
    {
      v8 = 0;
      v9 = v6 - 1;
      v10 = *(double *)&a2 + a4;
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = 1;
      while (1)
      {
        v5 = v6;
        if ((v12 & 1) == 0)
        {
          if (v8 < 2)
            goto LABEL_33;
          v5 = v8 - 1;
        }
        v13 = v9 / v5;
        if (v9 / v5 < -1)
          break;
        if (v13 == -1)
        {
          v15 = v11;
        }
        else
        {
          v14 = (_QWORD *)sub_21442504C();
          v15 = v14;
          v14[2] = v13 + 1;
          v14[4] = 0;
          if (v13)
            bzero(v14 + 5, 8 * v13);
        }
        v16 = (double *)(v15 + 4);
        result = swift_bridgeObjectRetain();
        for (i = 0; i != v6; ++i)
        {
          v18 = i / v5;
          if (i / v5 < 0)
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          if (v18 >= v15[2])
            goto LABEL_31;
          v16[v18] = *(double *)(v4 + 8 * i + 32) + a4 + v16[v18];
        }
        swift_bridgeObjectRelease();
        v19 = v15[2];
        if (v19)
        {
          v20 = *v16;
          v21 = v19 - 1;
          if (v21)
          {
            v22 = (double *)(v15 + 5);
            do
            {
              v23 = *v22++;
              v24 = v23;
              if (v20 < v23)
                v20 = v24;
              --v21;
            }
            while (v21);
          }
        }
        else
        {
          v20 = 0.0;
        }
        result = swift_bridgeObjectRelease();
        if (v20 > v10)
        {
          v12 = 0;
          v8 = v5;
          if (v5 != 1)
            continue;
        }
        return v5;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    return *(_QWORD *)(result + 16);
  }
  return result;
}

uint64_t sub_2143A6BDC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, double a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void (*v17)(_QWORD *, _QWORD);
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  char v47;
  char v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  char v54;
  char v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  char v85;
  _QWORD v86[4];
  uint64_t v87;

  v83 = a6;
  v80 = a4;
  v82 = a3;
  v79 = a2;
  v81 = a1;
  v9 = sub_214423E88();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214423EF4();
  sub_2141FED10(&qword_253F13D50, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC778], MEMORY[0x24BDEC7A0]);
  v13 = sub_2144251A8();
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v15 = v13;
    v87 = MEMORY[0x24BEE4AF8];
    sub_2141D426C(0, v13 & ~(v13 >> 63), 0);
    result = sub_21442519C();
    if (v15 < 0)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v84 = a5;
    do
    {
      v17 = (void (*)(_QWORD *, _QWORD))sub_2144252A4();
      (*(void (**)(char *))(v10 + 16))(v12);
      v17(v86, 0);
      sub_214424134();
      LOBYTE(v86[0]) = v18 & 1;
      v85 = v19 & 1;
      sub_214423E64();
      v21 = v20;
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v14 = v87;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D426C(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v87;
      }
      v25 = *(_QWORD *)(v14 + 16);
      v24 = *(_QWORD *)(v14 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_2141D426C((char *)(v24 > 1), v25 + 1, 1);
        v14 = v87;
      }
      *(_QWORD *)(v14 + 16) = v25 + 1;
      v26 = v14 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v21;
      *(_QWORD *)(v26 + 40) = v23;
      sub_214425208();
      --v15;
    }
    while (v15);
  }
  if ((v83 & 1) == 0)
  {
    v27 = v79 & 1;
    v28 = sub_2143A5E08(v14);
    v29 = sub_2143A6A2C(v28, v81, v27, a7);
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v14 + 16);
    v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v30)
    {
      v86[0] = MEMORY[0x24BEE4AF8];
      result = (uint64_t)sub_2141D4248(0, v30, 0);
      if (!v29)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      v32 = 0;
      v31 = (_QWORD *)v86[0];
      do
      {
        v86[0] = v31;
        v34 = v31[2];
        v33 = v31[3];
        if (v34 >= v33 >> 1)
        {
          sub_2141D4248((char *)(v33 > 1), v34 + 1, 1);
          v31 = (_QWORD *)v86[0];
        }
        v31[2] = v34 + 1;
        v35 = &v31[2 * v34];
        v35[4] = v32 % v29;
        v35[5] = v32 / v29;
        ++v32;
      }
      while (v30 != v32);
    }
LABEL_23:
    v44 = swift_bridgeObjectRetain();
    v45 = sub_2143A5F88(v44);
    swift_bridgeObjectRelease();
    v46 = sub_2142B4070(v45);
    v48 = v47;
    result = swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
      v49 = 0;
    else
      v49 = v46;
    v50 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v51 = swift_bridgeObjectRetain();
    v52 = sub_214331198(v51);
    swift_bridgeObjectRelease();
    v53 = sub_2142B4070(v52);
    v55 = v54;
    result = swift_bridgeObjectRelease();
    if ((v55 & 1) != 0)
      v56 = 0;
    else
      v56 = v53;
    v57 = v56 + 1;
    if (__OFADD__(v56, 1))
      goto LABEL_59;
    if (v50 < 0)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v49 == -1)
    {
      v58 = MEMORY[0x24BEE4AF8];
      if ((v57 & 0x8000000000000000) == 0)
      {
LABEL_34:
        if (v56 != -1)
        {
          v59 = sub_21442504C();
          *(_QWORD *)(v59 + 16) = v57;
          bzero((void *)(v59 + 32), 8 * v56 + 8);
          goto LABEL_39;
        }
LABEL_38:
        v59 = MEMORY[0x24BEE4AF8];
LABEL_39:
        v86[0] = v59;
        v60 = v31[2];
        if (!v60 || (v61 = *(_QWORD *)(v14 + 16)) == 0)
        {
LABEL_53:
          v71 = swift_bridgeObjectRetain();
          v72 = sub_2143ABE54(v71, a7);
          swift_bridgeObjectRelease();
          v73 = swift_bridgeObjectRetain();
          v74 = sub_2143ABE54(v73, a7);
          v75 = swift_bridgeObjectRelease();
          MEMORY[0x24BDAC7A8](v75);
          *(&v78 - 4) = (uint64_t)v72;
          *(&v78 - 3) = (uint64_t)v74;
          *(&v78 - 2) = (uint64_t)v86;
          sub_2143ABC04((uint64_t)v31, v14, (double (*)(_QWORD, _QWORD, double, double))sub_2143ABED4);
          v77 = v76;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v77;
        }
        v84 = 0;
        v63 = v31[4];
        v62 = v31[5];
        v64 = v58 + 32;
        v65 = v59 + 32;
        v66 = v60;
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        v67 = 0;
        v68 = v66 - 1;
        while ((v63 & 0x8000000000000000) == 0)
        {
          if (v63 >= *(_QWORD *)(v58 + 16))
            goto LABEL_55;
          v70 = *(double *)(v14 + v67 * 8 + 32);
          v69 = *(double *)(v14 + v67 * 8 + 40);
          if (*(double *)(v64 + 8 * v63) > v70)
            v70 = *(double *)(v64 + 8 * v63);
          *(double *)(v64 + 8 * v63) = v70;
          if ((v62 & 0x8000000000000000) != 0)
            goto LABEL_56;
          if (v62 >= *(_QWORD *)(v59 + 16))
            goto LABEL_57;
          if (*(double *)(v65 + 8 * v62) > v69)
            v69 = *(double *)(v65 + 8 * v62);
          *(double *)(v65 + 8 * v62) = v69;
          if (v68)
          {
            v63 = v31[v67 + 6];
            v62 = v31[v67 + 7];
            v67 += 2;
            --v68;
            if (--v61)
              continue;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v86[0] = v59;
          goto LABEL_53;
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
    }
    else
    {
      v58 = sub_21442504C();
      *(_QWORD *)(v58 + 16) = v50;
      bzero((void *)(v58 + 32), 8 * v49 + 8);
      if ((v57 & 0x8000000000000000) == 0)
        goto LABEL_34;
    }
    __break(1u);
    goto LABEL_38;
  }
  v36 = v80 & 1;
  v37 = sub_2143A5EC8(v14);
  v38 = sub_2143A6A2C(v37, v82, v36, a7);
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(v14 + 16);
  v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v39)
    goto LABEL_23;
  v86[0] = MEMORY[0x24BEE4AF8];
  result = (uint64_t)sub_2141D4248(0, v39, 0);
  if (v38)
  {
    v40 = 0;
    v31 = (_QWORD *)v86[0];
    do
    {
      v86[0] = v31;
      v42 = v31[2];
      v41 = v31[3];
      if (v42 >= v41 >> 1)
      {
        sub_2141D4248((char *)(v41 > 1), v42 + 1, 1);
        v31 = (_QWORD *)v86[0];
      }
      v31[2] = v42 + 1;
      v43 = &v31[2 * v42];
      v43[4] = v40 / v38;
      v43[5] = v40 % v38;
      ++v40;
    }
    while (v39 != v40);
    goto LABEL_23;
  }
LABEL_63:
  __break(1u);
  return result;
}

unint64_t sub_2143A7250(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a3 + 16) <= result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)(a4 + 16) <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(*(_QWORD *)a5 + 16) <= a2)
LABEL_11:
    __break(1u);
  return result;
}

double sub_2143A72CC(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, double a6, uint64_t a7, char a8)
{
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  CGFloat *v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double MaxX;
  double MaxY;
  uint64_t v27;
  uint64_t v28;
  CGRect v29;
  CGRect v30;

  sub_214423EF4();
  sub_2141FED10(&qword_253F13D50, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC778], MEMORY[0x24BDEC7A0]);
  sub_21442519C();
  sub_2144251FC();
  v15 = 0.0;
  v16 = 0.0;
  if (v28 != v27)
  {
    v17 = sub_2143A6BDC(a1, a2 & 1, a3, a4 & 1, a5, a8 & 1, a6);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = (CGFloat *)(v17 + 56);
      do
      {
        v20 = *(v19 - 3);
        v21 = *(v19 - 2);
        v22 = *(v19 - 1);
        v23 = *v19;
        v29.origin.x = v20;
        v29.origin.y = v21;
        v29.size.width = v22;
        v29.size.height = *v19;
        MaxX = CGRectGetMaxX(v29);
        if (v15 <= MaxX)
          v15 = MaxX;
        v30.origin.x = v20;
        v30.origin.y = v21;
        v30.size.width = v22;
        v30.size.height = v23;
        MaxY = CGRectGetMaxY(v30);
        if (v16 <= MaxY)
          v16 = MaxY;
        v19 += 4;
        --v18;
      }
      while (v18);
    }
    swift_bridgeObjectRelease();
  }
  return v15;
}

uint64_t sub_2143A742C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, uint64_t a11, int a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t *, _QWORD);
  uint64_t v41;
  char *v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  char v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62[4];
  uint64_t v63;
  CGRect v64;
  CGRect v65;

  LODWORD(v55) = a12;
  LODWORD(v56) = a4;
  *(_QWORD *)&v61 = a3;
  LODWORD(v54) = a2;
  v57 = a1;
  v18 = sub_2141D8BF8(&qword_253F15B30);
  MEMORY[0x24BDAC7A8](v18);
  v59 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_214423E88();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v60 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_2141D8BF8(&qword_254D6D278);
  MEMORY[0x24BDAC7A8](v58);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_214423EF4();
  v26 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC778];
  v27 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_2141D8BF8(&qword_254D6D280);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v53 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_2141D8BF8(&qword_254D6D288);
  MEMORY[0x24BDAC7A8](v53);
  v34 = (char *)&v53 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141FED10(&qword_253F13D50, v26, MEMORY[0x24BDEC7A0]);
  sub_21442519C();
  result = sub_2144251FC();
  if (v62[0] != v63)
  {
    LOBYTE(v62[0]) = v54 & 1;
    LOBYTE(v63) = v56 & 1;
    *(_QWORD *)&v61 = sub_2143A6BDC(v57, v54 & 1, v61, v56 & 1, a5, v55 & 1, a10);
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v54(v32, a5, v25);
    v56 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v32, v25);
    sub_2141FED10(&qword_254D6D290, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC778], MEMORY[0x24BDEC798]);
    v55 = v29;
    sub_214424F38();
    v36 = v53;
    v37 = &v34[*(int *)(v53 + 52)];
    *(_QWORD *)v37 = v61;
    *((_QWORD *)v37 + 1) = 0;
    v57 = *(int *)(v36 + 56);
    v34[v57] = 0;
    v38 = &v34[*(int *)(sub_2141D8BF8(&qword_253F15CF8) + 36)];
    while (1)
    {
      v39 = *(_QWORD *)v38;
      sub_2144251FC();
      if (v39 == v62[0])
      {
        v41 = (uint64_t)v59;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v59, 1, 1, v20);
LABEL_10:
        sub_2141E0750(v41, &qword_253F15B30);
        goto LABEL_12;
      }
      v40 = (void (*)(uint64_t *, _QWORD))sub_2144252A4();
      v41 = (uint64_t)v59;
      (*(void (**)(char *))(v21 + 16))(v59);
      v40(v62, 0);
      v42 = v55;
      v54(v55, (uint64_t)v34, v25);
      sub_214425208();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v25);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v41, 0, 1, v20);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v41, 1, v20) == 1)
        goto LABEL_10;
      v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 32);
      result = v43(v60, v41, v20);
      v44 = *((_QWORD *)v37 + 1);
      v45 = *(_QWORD *)(*(_QWORD *)v37 + 16);
      if (v44 == v45)
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v60, v20);
LABEL_12:
        v34[v57] = 1;
        return sub_2141E0750((uint64_t)v34, &qword_254D6D288);
      }
      if (v44 >= v45)
        break;
      v46 = v44 + 1;
      v47 = *(_QWORD *)v37 + 32 * v44;
      v48 = *(_QWORD *)(v47 + 56);
      v49 = *(_QWORD *)(v47 + 32);
      v61 = *(_OWORD *)(v47 + 40);
      *((_QWORD *)v37 + 1) = v46;
      v50 = &v24[*(int *)(v58 + 48)];
      v43(v24, (uint64_t)v60, v20);
      *(_QWORD *)v50 = v49;
      *(_OWORD *)(v50 + 8) = v61;
      *((_QWORD *)v50 + 3) = v48;
      v64.origin.x = a6;
      v64.origin.y = a7;
      v64.size.width = a8;
      v64.size.height = a9;
      CGRectGetMinX(v64);
      v65.origin.x = a6;
      v65.origin.y = a7;
      v65.size.width = a8;
      v65.size.height = a9;
      CGRectGetMinY(v65);
      sub_214424C8C();
      sub_214424134();
      LOBYTE(v62[0]) = v51 & 1;
      LOBYTE(v63) = v52 & 1;
      sub_214423E70();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
      if (v34[v57] == 1)
        return sub_2141E0750((uint64_t)v34, &qword_254D6D288);
    }
    __break(1u);
  }
  return result;
}

double sub_2143A7998(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_2143A72CC(a1, a2 & 1, a3, a4 & 1, a5, *(double *)(v6 + 8), a6, *(_BYTE *)v6);
}

uint64_t sub_2143A79B8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  double *v10;

  return sub_2143A742C(a1, a2 & 1, a3, a4 & 1, a5, a7, a8, a9, a10, v10[1], a6, *(unsigned __int8 *)v10);
}

uint64_t (*sub_2143A79DC(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_214423CE4();
  return sub_214247E48;
}

double sub_2143A7A3C@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _OWORD v17[2];
  char v18;
  _BYTE v19[40];
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  sub_214424770();
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  CGRectGetMinX(v20);
  v21.origin.x = a2;
  v21.origin.y = a3;
  v21.size.width = a4;
  v21.size.height = a5;
  CGRectGetMidY(v21);
  sub_2144246F8();
  v22.origin.x = a2;
  v22.origin.y = a3;
  v22.size.width = a4;
  v22.size.height = a5;
  CGRectGetMaxX(v22);
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  CGRectGetMidY(v23);
  sub_21442471C();
  v17[0] = v11;
  v17[1] = v12;
  v18 = v13;
  sub_2141FE3B0((uint64_t)v17, (uint64_t)v19);
  sub_2141FE404((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
  sub_2144246B0();
  sub_2141FE404((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  sub_2141FE404((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  result = *(double *)&v14;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

uint64_t sub_2143A7B98()
{
  return sub_214424A1C();
}

uint64_t sub_2143A7BB0()
{
  sub_2143AC9C0();
  return sub_214424A64();
}

uint64_t sub_2143A7C00()
{
  sub_2143AC9C0();
  return sub_214424A28();
}

uint64_t sub_2143A7C50()
{
  sub_2143AC9C0();
  return sub_214424A40();
}

uint64_t sub_2143A7C88@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _BYTE __src[280];
  _BYTE v14[24];
  uint64_t v15;
  char v16;
  _BYTE v17[56];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = (_QWORD *)v1;
  sub_2141E070C(v1 + 56, (uint64_t)__src, (uint64_t *)&unk_253F0FF58);
  if (*(_QWORD *)&__src[24])
  {
    v21 = *(_OWORD *)__src;
    v22 = *(_OWORD *)&__src[16];
    v23 = *(_QWORD *)&__src[32];
    if ((*(_BYTE *)(v1 + 144) & 1) == 0)
      goto LABEL_8;
    goto LABEL_3;
  }
  if (qword_253F10D60 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C950, (uint64_t)&v21);
  sub_2141E0750((uint64_t)__src, (uint64_t *)&unk_253F0FF58);
  if ((*(_BYTE *)(v1 + 144) & 1) != 0)
  {
LABEL_3:
    if (qword_253F10D28 != -1)
      swift_once();
  }
LABEL_8:
  if (*(_QWORD *)(v1 + 48))
    v4 = *(_QWORD *)(v1 + 48);
  else
    v4 = sub_214423E10();
  v5 = *((_QWORD *)&v22 + 1);
  v6 = v23;
  sub_2141E88D0(&v21, *((uint64_t *)&v22 + 1));
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  v7(v5, v6);
  sub_2141F9E40((uint64_t)&v21, (uint64_t)__src);
  *(_QWORD *)&__src[40] = v4;
  *(_WORD *)&__src[48] = 256;
  swift_retain();
  sub_214424C44();
  sub_214423E04();
  sub_2141E070C((uint64_t)__src, (uint64_t)v17, &qword_254D6D2C0);
  v18 = v24;
  v19 = v25;
  v20 = v26;
  sub_2141E0750((uint64_t)__src, &qword_254D6D2C0);
  v8 = *(_QWORD *)(v1 + 120);
  sub_2143AC704(v1, (uint64_t)__src);
  if (!v8)
  {
    sub_2143AC738((uint64_t)__src);
    sub_2143AC704(v1, (uint64_t)v14);
    goto LABEL_15;
  }
  sub_2141E070C((uint64_t)&__src[56], (uint64_t)v14, (uint64_t *)&unk_253F0FF58);
  sub_2143AC738((uint64_t)__src);
  v9 = v15;
  sub_2141E0750((uint64_t)v14, (uint64_t *)&unk_253F0FF58);
  sub_2143AC704(v1, (uint64_t)v14);
  if (v9)
  {
LABEL_15:
    sub_2143AC738((uint64_t)v14);
    v11 = 1;
    goto LABEL_16;
  }
  v10 = v16;
  sub_2143AC738((uint64_t)v14);
  v11 = v10 ^ 1;
LABEL_16:
  *(_QWORD *)__src = sub_21442426C();
  *(_QWORD *)&__src[8] = 0x4014000000000000;
  __src[16] = 0;
  sub_2143A7F94(v11 & 1, (uint64_t)v17, v2, v4, (uint64_t)&__src[24]);
  sub_2143039E0((uint64_t)&v21);
  swift_release();
  memcpy(a1, __src, 0x118uLL);
  return sub_2141E0750((uint64_t)v17, &qword_254D6D2C8);
}

uint64_t sub_2143A7F94@<X0>(char a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _BYTE v24[240];
  _QWORD v25[2];
  _QWORD v26[26];

  v25[0] = sub_214424C44();
  v25[1] = v10;
  sub_2143A8180(a1, a2, a3, a4, v26);
  if (qword_253F10C00 != -1)
    swift_once();
  v11 = sub_214424800();
  v13 = v12;
  v15 = v14;
  if (qword_253F10C08 != -1)
    swift_once();
  v16 = sub_2144247DC();
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  sub_2141ED0BC(v11, v13, v15 & 1);
  swift_bridgeObjectRelease();
  sub_2141E070C((uint64_t)v25, (uint64_t)v24, &qword_254D6D2D0);
  sub_2141E070C((uint64_t)v24, a5, &qword_254D6D2D0);
  *(_QWORD *)(a5 + 224) = v16;
  *(_QWORD *)(a5 + 232) = v18;
  *(_BYTE *)(a5 + 240) = v22;
  *(_QWORD *)(a5 + 248) = v20;
  sub_2141DD130(v16, v18, v22);
  swift_bridgeObjectRetain();
  sub_2141E0750((uint64_t)v25, &qword_254D6D2D0);
  sub_2141ED0BC(v16, v18, v22);
  swift_bridgeObjectRelease();
  return sub_2141E0750((uint64_t)v24, &qword_254D6D2D0);
}

uint64_t sub_2143A8180@<X0>(char a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[104];
  _OWORD v23[6];
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;

  if ((a1 & 1) != 0)
  {
    sub_2141E070C(a2, (uint64_t)v23, &qword_254D6D2C8);
  }
  else
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
  }
  v20 = a3[15];
  if (v20)
  {
    v21 = a3[16];
    v9 = a3[13];
    v8 = a3[14];
    v10 = a3[12];
    swift_bridgeObjectRetain();
    swift_retain();
    sub_214424C44();
    sub_214423E04();
    v11 = v25;
    v19 = v26;
    v17 = v28;
    v18 = v27;
    v12 = 256;
    v13 = a4;
    v15 = v30;
    v16 = v29;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v21 = 0;
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v18 = 0;
    v19 = 0;
    v16 = 0;
    v17 = 0;
    v15 = 0;
  }
  sub_2141E070C((uint64_t)v23, (uint64_t)v22, &qword_254D6D2D8);
  sub_2141E070C((uint64_t)v22, (uint64_t)a5, &qword_254D6D2D8);
  a5[13] = v10;
  a5[14] = v9;
  a5[15] = v8;
  a5[16] = v20;
  a5[17] = v21;
  a5[18] = v13;
  a5[19] = v12;
  a5[20] = v11;
  a5[21] = v19;
  a5[22] = v18;
  a5[23] = v17;
  a5[24] = v16;
  a5[25] = v15;
  sub_2143AC764(v10, v9, v8, v20);
  sub_2141E0750((uint64_t)v23, &qword_254D6D2D8);
  sub_2143AC794(v10, v9, v8, v20);
  return sub_2141E0750((uint64_t)v22, &qword_254D6D2D8);
}

uint64_t sub_2143A83A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2143AB950(a1, a2);
}

uint64_t sub_2143A83B0()
{
  swift_bridgeObjectRetain();
  sub_2141D8BF8(&qword_254D6D240);
  sub_2141D9054(&qword_254D6D248, &qword_254D6D240, MEMORY[0x24BEE12D8]);
  sub_2143AB8C8();
  sub_2143AB90C();
  return sub_214424B90();
}

double sub_2143A845C@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_2143A8468()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  char v8;
  double v9;
  double v10;
  char v11;
  double v12;
  uint64_t v14;
  long double v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  char isUniquelyReferenced_nonNull_native;
  double v26;
  uint64_t v27;
  double v28;
  char v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[48];
  _QWORD v45[2];
  double v46;
  double v47;
  double v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[13];
  double v52[5];
  __int128 v53;
  __int128 v54;
  _BYTE v55[72];

  v1 = v0;
  v2 = sub_214423B94();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  v7 = COERCE_DOUBLE(sub_2143EDF48(v6));
  if ((v8 & 1) != 0)
    v9 = 0.0;
  else
    v9 = v7;
  v10 = COERCE_DOUBLE(sub_2142B402C(v6));
  if ((v11 & 1) != 0)
    v12 = 0.0;
  else
    v12 = v10;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
    return MEMORY[0x24BEE4AF8];
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0 || v9 > v12)
    return MEMORY[0x24BEE4AF8];
  v15 = *((double *)v1 + 2);
  v16 = *((unsigned __int8 *)v1 + 24);
  v42 = v3;
  v43 = v2;
  if (v16 && (v16 == 1 || *(_QWORD *)&v15 == 2))
  {
    v41 = v15;
    v17 = sub_2142D0708(v9, v12);
    v18 = *(_QWORD *)(v17 + 16);
    v40 = v17;
    if (v18)
    {
      v19 = (double *)(v17 + 32);
      v20 = MEMORY[0x24BEE4AF8];
      do
      {
        v23 = *v19;
        if (v9 <= *v19 && v23 <= v12)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v51[0] = v20;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_2141D3AA0(0, *(_QWORD *)(v20 + 16) + 1, 1);
            v20 = v51[0];
          }
          v22 = *(_QWORD *)(v20 + 16);
          v21 = *(_QWORD *)(v20 + 24);
          if (v22 >= v21 >> 1)
          {
            sub_2141D3AA0((char *)(v21 > 1), v22 + 1, 1);
            v20 = v51[0];
          }
          *(_QWORD *)(v20 + 16) = v22 + 1;
          *(double *)(v20 + 8 * v22 + 32) = v23;
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
    else
    {
      v20 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v15 = v41;
  }
  else
  {
    v26 = sub_2143872F4(4, v9, v12, 0.0, 1, 1);
    sub_2142D057C((uint64_t)v55, v26, v9, v12);
    sub_2142CDD00();
    v20 = v27;
    sub_2143ABBA0((uint64_t)v55);
  }
  v30 = COERCE_DOUBLE(sub_214331EB0(v20));
  v31 = v28;
  if (v9 <= v30)
    v30 = v9;
  if (v12 > v28)
    v31 = v12;
  if ((v29 & 1) != 0)
    v32 = v9;
  else
    v32 = v30;
  if ((v29 & 1) != 0)
    v33 = v12;
  else
    v33 = v31;
  if (v16)
  {
    if (v16 == 1)
    {
      sub_2141D8BF8(&qword_253F15D48);
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_2144271D0;
      *(double *)(v34 + 32) = v32;
      *(double *)(v34 + 40) = v33;
      sub_21421EDB4(v34, (uint64_t)v45, v15);
    }
    else
    {
      sub_2141D8BF8(&qword_253F15D48);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_2144271D0;
      *(double *)(v36 + 32) = v32;
      *(double *)(v36 + 40) = v33;
      if (*(_QWORD *)&v15 == 2)
        sub_21421EB2C(v36, (uint64_t)v45);
      else
        sub_21421EF30(v36, (uint64_t)v45);
    }
  }
  else
  {
    sub_2141D8BF8(&qword_253F15D48);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_2144271D0;
    *(double *)(v35 + 32) = v32;
    *(double *)(v35 + 40) = v33;
    sub_21421EC54(v35, (uint64_t)v45, v15);
  }
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)&v46;
  v52[0] = *(double *)v45;
  v52[1] = *(double *)&v45[1];
  v52[2] = v46;
  v52[3] = v47;
  v52[4] = v48;
  v53 = v49;
  v54 = v50;
  sub_2141F1C84(v52, (uint64_t)v51, 0.0, *((double *)v1 + 4));
  type metadata accessor for DefaultChartLegend.ColorRampView();
  sub_21441BB54((uint64_t)v5);
  sub_2143EDF8C((uint64_t)v5, (uint64_t)v44);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v5, v43);
  MEMORY[0x24BDAC7A8](v38);
  *(&v40 - 4) = (uint64_t)v44;
  *(&v40 - 3) = (uint64_t)v51;
  *(&v40 - 2) = (uint64_t)v1;
  v14 = sub_214234798((void (*)(__int128 *__return_ptr, uint64_t *))sub_2143ABBD8, (uint64_t)(&v40 - 6), v20);
  sub_214382D48((uint64_t)v51);
  swift_release();
  sub_2141D972C(v37);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v32 <= v33)
  {
    sub_21422F27C((uint64_t)v44);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_2143A88AC@<X0>(uint64_t *a1@<X0>, void (**a2)(_QWORD *__return_ptr, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  void (**v38)(_QWORD *__return_ptr, uint64_t *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[2];

  v38 = a2;
  v39 = a3;
  v6 = sub_2141D8BF8(&qword_253F11920);
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v42[0] = sub_2143F486C(*a1, 0, 0);
  v42[1] = v9;
  sub_2141DCE8C();
  v10 = sub_214424818();
  v12 = v11;
  v14 = v13;
  if (qword_253F10C08 != -1)
    swift_once();
  v15 = v14 & 1;
  v16 = sub_2144247DC();
  v18 = v17;
  v20 = v19;
  sub_2141ED0BC(v10, v12, v15);
  swift_bridgeObjectRelease();
  if (qword_253F10C00 != -1)
    swift_once();
  v21 = v20 & 1;
  v22 = sub_214424800();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_2141ED0BC(v16, v18, v21);
  swift_bridgeObjectRelease();
  v41 = v8;
  (*v38)(v42, &v41);
  v29 = v42[0];
  type metadata accessor for DefaultChartLegend.ColorRampView();
  v30 = sub_2144247AC();
  v31 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v40, 1, 1, v30);
  sub_2144247B8();
  v33 = v32;
  v35 = v34;
  result = sub_2141E0750(v31, &qword_253F11920);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v29;
  *(_QWORD *)(a4 + 16) = v22;
  *(_QWORD *)(a4 + 24) = v24;
  *(_BYTE *)(a4 + 32) = v26 & 1;
  *(_QWORD *)(a4 + 40) = v28;
  *(_QWORD *)(a4 + 48) = v33;
  *(_QWORD *)(a4 + 56) = v35;
  return result;
}

double sub_2143A8B1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double result;
  __int128 v15;
  __int128 v16;
  char v17;

  sub_214424770();
  v5 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(v2 + 25) & 1) != 0)
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      v6 = a1 + 72;
      do
      {
        v7 = *(_QWORD *)(v6 - 24);
        v8 = *(_QWORD *)(v6 - 16);
        v9 = *(_BYTE *)(v6 - 8);
        v6 += 64;
        sub_2141DD130(v7, v8, v9);
        swift_bridgeObjectRetain();
        sub_2144246F8();
        sub_21442471C();
        sub_2141ED0BC(v7, v8, v9);
        swift_bridgeObjectRelease();
        --v5;
      }
      while (v5);
LABEL_9:
      swift_bridgeObjectRelease();
    }
  }
  else if (v5)
  {
    swift_bridgeObjectRetain();
    v10 = a1 + 72;
    do
    {
      v11 = *(_QWORD *)(v10 - 24);
      v12 = *(_QWORD *)(v10 - 16);
      v13 = *(_BYTE *)(v10 - 8);
      v10 += 64;
      sub_2141DD130(v11, v12, v13);
      swift_bridgeObjectRetain();
      sub_2144246F8();
      sub_21442471C();
      sub_2141ED0BC(v11, v12, v13);
      swift_bridgeObjectRelease();
      --v5;
    }
    while (v5);
    goto LABEL_9;
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 32) = v17;
  return result;
}

uint64_t sub_2143A8CB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  int64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  int64_t v17;
  double v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double *v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  double v29;
  double v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((*(_BYTE *)(v1 + 25) & 1) != 0)
  {
    v3 = sub_2143A6104(a1);
    sub_2142B402C(v3);
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(a1 + 16);
    v5 = MEMORY[0x24BEE4AF8];
    if (v4)
    {
      v33 = MEMORY[0x24BEE4AF8];
      sub_2141D39D4(0, v4, 0);
      v5 = v33;
      v6 = *(_QWORD *)(v33 + 16);
      v7 = (double *)(a1 + 88);
      v8 = v4;
      do
      {
        v9 = *(v7 - 6);
        v10 = *v7;
        v11 = *(_QWORD *)(v33 + 24);
        if (v6 >= v11 >> 1)
          sub_2141D39D4((char *)(v11 > 1), v6 + 1, 1);
        *(_QWORD *)(v33 + 16) = v6 + 1;
        *(double *)(v33 + 8 * v6 + 32) = v9 + v10 * -0.5;
        v7 += 8;
        ++v6;
        --v8;
      }
      while (v8);
    }
    sub_2143EDF48(v5);
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
    if (v4)
    {
      v35 = MEMORY[0x24BEE4AF8];
      sub_2141D39D4(0, v4, 0);
      v21 = v35;
      v22 = *(_QWORD *)(v35 + 16);
      v23 = (double *)(a1 + 88);
      do
      {
        v24 = *(v23 - 6);
        v25 = *v23;
        v26 = *(_QWORD *)(v35 + 24);
        if (v22 >= v26 >> 1)
          sub_2141D39D4((char *)(v26 > 1), v22 + 1, 1);
        *(_QWORD *)(v35 + 16) = v22 + 1;
        *(double *)(v35 + 8 * v22 + 32) = v24 + v25 * 0.5;
        v23 += 8;
        ++v22;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v12 = sub_2143A6044(a1);
    sub_2142B402C(v12);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(a1 + 16);
    v14 = MEMORY[0x24BEE4AF8];
    if (v13)
    {
      v34 = MEMORY[0x24BEE4AF8];
      sub_2141D39D4(0, v13, 0);
      v14 = v34;
      v15 = *(_QWORD *)(v34 + 16);
      v16 = (double *)(a1 + 80);
      v17 = v13;
      do
      {
        v18 = *(v16 - 5);
        v19 = *v16;
        v20 = *(_QWORD *)(v34 + 24);
        if (v15 >= v20 >> 1)
          sub_2141D39D4((char *)(v20 > 1), v15 + 1, 1);
        *(_QWORD *)(v34 + 16) = v15 + 1;
        *(double *)(v34 + 8 * v15 + 32) = v18 + v19 * -0.5;
        v16 += 8;
        ++v15;
        --v17;
      }
      while (v17);
    }
    sub_2143EDF48(v14);
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
    if (v13)
    {
      v36 = MEMORY[0x24BEE4AF8];
      sub_2141D39D4(0, v13, 0);
      v21 = v36;
      v27 = *(_QWORD *)(v36 + 16);
      v28 = (double *)(a1 + 80);
      do
      {
        v29 = *(v28 - 5);
        v30 = *v28;
        v31 = *(_QWORD *)(v36 + 24);
        if (v27 >= v31 >> 1)
          sub_2141D39D4((char *)(v31 > 1), v27 + 1, 1);
        *(_QWORD *)(v36 + 16) = v27 + 1;
        *(double *)(v36 + 8 * v27 + 32) = v29 + v30 * 0.5;
        v28 += 8;
        ++v27;
        --v13;
      }
      while (v13);
    }
  }
  sub_2142B402C(v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143A9108@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v41 = a1;
  v2 = sub_214424278();
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DefaultChartLegend.ColorRampView();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_254D6D260);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_2141D8BF8(&qword_254D6D268);
  MEMORY[0x24BDAC7A8](v37);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2143A8468();
  v16 = v15;
  v18 = v17;
  v19 = v14;
  sub_2143A8CB4(v14);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  sub_2143AAA38(v1, (uint64_t)v7);
  v28 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v29 = (v6 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = v21;
  v30[3] = v23;
  v30[4] = v25;
  v30[5] = v27;
  sub_2143ABADC((uint64_t)v7, (uint64_t)v30 + v28);
  v31 = (_QWORD *)((char *)v30 + v29);
  *v31 = v16;
  v31[1] = v18;
  *(_QWORD *)((char *)v30 + ((v29 + 23) & 0xFFFFFFFFFFFFFFF8)) = v19;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v38, *MEMORY[0x24BDEE8B0], v40);
  sub_214424AD0();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v11, v8);
  v13[*(int *)(v37 + 36)] = 1;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_214424C44();
  sub_214423E04();
  v32 = v41;
  sub_2141E070C((uint64_t)v13, v41, &qword_254D6D268);
  v33 = (_OWORD *)(v32 + *(int *)(sub_2141D8BF8(&qword_254D6D270) + 36));
  v34 = v43;
  *v33 = v42;
  v33[1] = v34;
  v33[2] = v44;
  return sub_2141E0750((uint64_t)v13, &qword_254D6D268);
}

uint64_t sub_2143A93C0(uint64_t *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  double v35;
  double v36;
  double v37;
  char v38;
  double v39;
  double v40;
  char v41;
  double v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t result;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  int EnumCaseMultiPayload;
  os_log_type_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, _QWORD, uint64_t);
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  uint64_t *v67;
  int v68;
  char *v69;
  uint64_t v70;
  os_log_type_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  os_log_type_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char v98;
  uint64_t v99;
  char v100;
  void (*v101)(char *, uint64_t);
  _QWORD v102[2];
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124[2];
  _BYTE v125[24];
  _BYTE v126[16];
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;

  v110 = sub_214424218();
  v109 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v108 = (char *)v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_2141D8BF8(&qword_254D6D150);
  v17 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v123);
  v106 = (_QWORD *)((char *)v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v17);
  v105 = (uint64_t)v102 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v119 = (uint64_t)v102 - v21;
  v22 = sub_2144240D4();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v22);
  v107 = (char *)v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v24);
  v111 = (char *)v102 - v27;
  v28 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v26);
  v121 = (char *)v102 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v115 = (uint64_t)v102 - v30;
  v31 = sub_21442402C();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)v102 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214423F48();
  v35 = COERCE_DOUBLE(sub_214331EB0(*(_QWORD *)a2));
  v37 = v36;
  if ((v38 & 1) != 0)
  {
    v37 = 0.0;
    v35 = 0.0;
  }
  v39 = a11 - a10;
  v40 = (v35 - a10) / (a11 - a10);
  v41 = *(_BYTE *)(a2 + 25);
  v42 = (v37 - a10) / v39;
  v118 = a2;
  v117 = a1;
  v116 = v22;
  v122 = v23;
  if ((v41 & 1) != 0)
  {
    v43 = v118;
    sub_21442477C();
    v127 = *(_QWORD *)(v43 + 8);
    v128 = 0.0;
    v129 = v40;
    v130 = 0.0;
    v131 = v42;
    sub_214424020();
    sub_214423FC0();
    sub_2141FE404((uint64_t)v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    v44 = *(void (**)(char *, uint64_t))(v32 + 8);
    v44(v34, v31);
    sub_2143A8B1C(a3, (uint64_t)v126);
    if (qword_253F10460 != -1)
      swift_once();
    sub_214424014();
    sub_214424008();
    sub_2141FE404((uint64_t)v126, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    result = ((uint64_t (*)(char *, uint64_t))v44)(v34, v31);
    v46 = *(_QWORD *)(a3 + 16);
    if (v46)
    {
      v115 = v118 + *(int *)(type metadata accessor for DefaultChartLegend.ColorRampView() + 48);
      LODWORD(v114) = *MEMORY[0x24BDED118];
      swift_bridgeObjectRetain();
      v102[0] = a3;
      v47 = (_QWORD *)(a3 + 72);
      *(_QWORD *)&v48 = 136315138;
      v103 = v48;
      v102[1] = MEMORY[0x24BEE4AD8] + 8;
      v49 = v117;
      v50 = v111;
      do
      {
        v52 = *(v47 - 3);
        v53 = *((_BYTE *)v47 - 8);
        v54 = *v47;
        v119 = *(v47 - 2);
        sub_2141DD130(v52, v119, v53);
        v120 = v54;
        swift_bridgeObjectRetain();
        sub_2144240A4();
        sub_214423F48();
        v55 = v105;
        sub_2141E070C(v115, v105, &qword_254D6D150);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        *(_QWORD *)&v112 = v46;
        if (EnumCaseMultiPayload == 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v50, v55, v22);
        }
        else
        {
          v57 = sub_2144252EC();
          v58 = sub_214424644();
          v59 = v57;
          if (os_log_type_enabled(v58, v57))
          {
            v60 = swift_slowAlloc();
            v61 = swift_slowAlloc();
            v124[0] = v61;
            *(_DWORD *)v60 = v103;
            *(_QWORD *)(v60 + 4) = sub_21441C718(0x694474756F79614CLL, 0xEF6E6F6974636572, v124);
            _os_log_impl(&dword_2141CE000, v58, v59, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v60, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2199CDA48](v61, -1, -1);
            MEMORY[0x2199CDA48](v60, -1, -1);
          }

          v62 = v108;
          sub_21442420C();
          v50 = v111;
          swift_getAtKeyPath();
          swift_release();
          (*(void (**)(char *, uint64_t))(v109 + 8))(v62, v110);
          v49 = v117;
          v22 = v116;
        }
        v63 = *(void (**)(char *, _QWORD, uint64_t))(v23 + 104);
        v64 = v121;
        v63(v121, v114, v22);
        v65 = sub_2144240C8();
        v66 = *(void (**)(char *, uint64_t))(v23 + 8);
        v66(v64, v22);
        v66(v50, v22);
        if ((v65 & 1) != 0)
          sub_214424068();
        v113 = *v49;
        v67 = v106;
        sub_2141E070C(v115, (uint64_t)v106, &qword_254D6D150);
        v68 = swift_getEnumCaseMultiPayload();
        v69 = v107;
        if (v68 == 1)
        {
          (*(void (**)(char *, uint64_t *, uint64_t))(v122 + 32))(v107, v67, v22);
          sub_2141DD130(v52, v119, v53);
          swift_bridgeObjectRetain();
          v70 = v112;
        }
        else
        {
          v104 = *v67;
          sub_2141DD130(v52, v119, v53);
          swift_bridgeObjectRetain();
          v71 = sub_2144252EC();
          v72 = sub_214424644();
          if (os_log_type_enabled(v72, v71))
          {
            v73 = swift_slowAlloc();
            v74 = swift_slowAlloc();
            v124[0] = v74;
            *(_DWORD *)v73 = v103;
            *(_QWORD *)(v73 + 4) = sub_21441C718(0x694474756F79614CLL, 0xEF6E6F6974636572, v124);
            _os_log_impl(&dword_2141CE000, v72, v71, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v73, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2199CDA48](v74, -1, -1);
            v75 = v73;
            v69 = v107;
            MEMORY[0x2199CDA48](v75, -1, -1);
          }

          v70 = v112;
          v76 = v108;
          sub_21442420C();
          swift_getAtKeyPath();
          swift_release();
          (*(void (**)(char *, uint64_t))(v109 + 8))(v76, v110);
          v49 = v117;
          v22 = v116;
        }
        v77 = v121;
        v63(v121, v114, v22);
        v78 = sub_2144240C8();
        v66(v77, v22);
        v66(v69, v22);
        if ((v78 & 1) != 0)
          sub_214424CF8();
        else
          sub_214424CEC();
        v23 = v122;
        v50 = v111;
        v51 = v119;
        sub_214423F90();
        sub_2141ED0BC(v52, v51, v53);
        swift_bridgeObjectRelease();
        sub_2144240B0();
        sub_2141ED0BC(v52, v51, v53);
        swift_bridgeObjectRelease();
        v47 += 8;
        v46 = v70 - 1;
      }
      while (v46);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v79 = v118;
    sub_21442477C();
    v127 = *(_QWORD *)(v79 + 8);
    v128 = v40;
    v129 = 0.0;
    v130 = v42;
    v131 = 0.0;
    sub_214424020();
    sub_214423FC0();
    sub_2141FE404((uint64_t)v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    v80 = *(void (**)(char *, uint64_t))(v32 + 8);
    v80(v34, v31);
    sub_2143A8B1C(a3, (uint64_t)v126);
    if (qword_253F10460 != -1)
      swift_once();
    sub_214424014();
    sub_214424008();
    sub_2141FE404((uint64_t)v126, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
    result = ((uint64_t (*)(char *, uint64_t))v80)(v34, v31);
    v81 = *(_QWORD *)(a3 + 16);
    if (v81)
    {
      v114 = v118 + *(int *)(type metadata accessor for DefaultChartLegend.ColorRampView() + 48);
      LODWORD(v113) = *MEMORY[0x24BDED118];
      swift_bridgeObjectRetain();
      v102[0] = a3;
      v82 = a3 + 72;
      *(_QWORD *)&v83 = 136315138;
      v112 = v83;
      v111 = (char *)(MEMORY[0x24BEE4AD8] + 8);
      do
      {
        v120 = v81;
        v84 = *(_QWORD *)(v82 - 24);
        v85 = *(_QWORD *)(v82 - 16);
        v86 = *(_BYTE *)(v82 - 8);
        sub_2141DD130(v84, v85, v86);
        swift_bridgeObjectRetain();
        sub_2144240A4();
        sub_214423F48();
        v87 = v119;
        sub_2141E070C(v114, v119, &qword_254D6D150);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v88 = v115;
          v89 = v87;
          v90 = v116;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v115, v89, v116);
        }
        else
        {
          v91 = sub_2144252EC();
          v92 = sub_214424644();
          v93 = v91;
          if (os_log_type_enabled(v92, v91))
          {
            v94 = swift_slowAlloc();
            v95 = swift_slowAlloc();
            v124[0] = v95;
            *(_DWORD *)v94 = v112;
            *(_QWORD *)(v94 + 4) = sub_21441C718(0x694474756F79614CLL, 0xEF6E6F6974636572, v124);
            _os_log_impl(&dword_2141CE000, v92, v93, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v94, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2199CDA48](v95, -1, -1);
            MEMORY[0x2199CDA48](v94, -1, -1);
          }

          v96 = v108;
          sub_21442420C();
          v88 = v115;
          swift_getAtKeyPath();
          swift_release();
          (*(void (**)(char *, uint64_t))(v109 + 8))(v96, v110);
          v90 = v116;
          v23 = v122;
        }
        v97 = v121;
        (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v121, v113, v90);
        v98 = sub_2144240C8();
        v99 = v23;
        v100 = v98;
        v101 = *(void (**)(char *, uint64_t))(v99 + 8);
        v101(v97, v90);
        v101((char *)v88, v90);
        if ((v100 & 1) != 0)
          sub_214424068();
        sub_2141DD130(v84, v85, v86);
        swift_bridgeObjectRetain();
        sub_214424CC8();
        sub_214423F90();
        sub_2141ED0BC(v84, v85, v86);
        swift_bridgeObjectRelease();
        sub_2144240B0();
        sub_2141ED0BC(v84, v85, v86);
        swift_bridgeObjectRelease();
        v82 += 64;
        v81 = v120 - 1;
        v23 = v122;
      }
      while (v120 != 1);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_2143AA1C0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = sub_2141D8BF8(&qword_254D6D0E0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_2141D8BF8(&qword_254D6D0E8);
  v13 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4 &= 1u;
  sub_2143A6300(a3, a4);
  v16 = sub_21441B9C0(a3, a4);
  sub_2143A634C(a3, a4);
  sub_2143A62F4(a1, a2 & 1);
  v17 = sub_21441B814(a1, a2 & 1);
  sub_2143ABBF8(a1, a2 & 1, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  if (!v17)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a5, 1, 1, v23);
  v22 = a5;
  *v12 = v16 & 1;
  *((_QWORD *)v12 + 1) = 0x4020000000000000;
  v18 = *(_QWORD *)(v17 + 16);
  v24 = 0;
  v25 = v18;
  swift_getKeyPath();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v17;
  *(_BYTE *)(v19 + 24) = v16 & 1;
  sub_2141D8BF8(&qword_253F13548);
  sub_2141D8BF8(&qword_254D6D0F0);
  sub_2141FE010();
  sub_2143AA78C();
  sub_214424B84();
  sub_2143AA890();
  sub_2144248CC();
  sub_2141E0750((uint64_t)v12, &qword_254D6D0E0);
  v20 = v22;
  sub_2141E801C((uint64_t)v15, v22, &qword_254D6D0E8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v23);
}

void sub_2143AA440(unint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;

  v8 = sub_2141D8BF8(&qword_254D6D138);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for DefaultChartLegend.ColorRampView();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2141D8BF8(&qword_254D6D140);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v17 >= *(_QWORD *)(a2 + 16))
  {
LABEL_8:
    __break(1u);
    return;
  }
  v18 = a2 + 32 * v17;
  v20 = *(_QWORD *)(v18 + 32);
  v21 = *(_QWORD *)(v18 + 40);
  v19 = v18 + 32;
  v22 = *(char *)(v19 + 24);
  if (v22 < 0)
  {
    v23 = a3 & 1;
    v24 = *(_QWORD *)(v19 + 16);
    v27 = v22 & 0x7F;
    v28 = v23;
    *v10 = swift_getKeyPath();
    sub_2141D8BF8(&qword_254D6D148);
    swift_storeEnumTagMultiPayload();
    KeyPath = swift_getKeyPath();
    v26 = *(int *)(v11 + 48);
    v29 = a4;
    *(_QWORD *)&v13[v26] = KeyPath;
    sub_2141D8BF8(&qword_254D6D150);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)v13 = v20;
    *((_QWORD *)v13 + 1) = v21;
    *((_QWORD *)v13 + 2) = v24;
    v13[24] = v27;
    v13[25] = v28;
    *((_OWORD *)v13 + 2) = xmmword_2144308A0;
    *((_OWORD *)v13 + 3) = xmmword_2144308B0;
    sub_2143A6788(v20, v21, v24, v22);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_2144247C4();
    sub_2141E801C((uint64_t)v10, (uint64_t)&v13[*(int *)(v11 + 44)], &qword_254D6D138);
    sub_2143AAA38((uint64_t)v13, (uint64_t)v16);
    swift_storeEnumTagMultiPayload();
    sub_2143AA810();
    sub_2141FED10(&qword_254D6D108, (uint64_t (*)(uint64_t))type metadata accessor for DefaultChartLegend.ColorRampView, (uint64_t)&unk_21443065C);
    sub_2144243EC();
    swift_release();
    swift_bridgeObjectRelease();
    sub_2143AAA7C((uint64_t)v13);
  }
  else
  {
    *v16 = v20;
    v16[1] = v21;
    swift_storeEnumTagMultiPayload();
    sub_2143AA810();
    sub_2141FED10(&qword_254D6D108, (uint64_t (*)(uint64_t))type metadata accessor for DefaultChartLegend.ColorRampView, (uint64_t)&unk_21443065C);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2144243EC();
  }
}

uint64_t sub_2143AA73C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2143AA1C0(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_2143AA75C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_2143AA780(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_2143AA440(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

unint64_t sub_2143AA78C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6D0F8;
  if (!qword_254D6D0F8)
  {
    v1 = sub_2141D7924(&qword_254D6D0F0);
    v2[0] = sub_2143AA810();
    v2[1] = sub_2141FED10(&qword_254D6D108, (uint64_t (*)(uint64_t))type metadata accessor for DefaultChartLegend.ColorRampView, (uint64_t)&unk_21443065C);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6D0F8);
  }
  return result;
}

unint64_t sub_2143AA810()
{
  unint64_t result;

  result = qword_254D6D100;
  if (!qword_254D6D100)
  {
    result = MEMORY[0x2199CD934](&unk_2144306AC, &type metadata for DefaultChartLegend.CategoriesView);
    atomic_store(result, (unint64_t *)&qword_254D6D100);
  }
  return result;
}

uint64_t type metadata accessor for DefaultChartLegend.ColorRampView()
{
  uint64_t result;

  result = qword_254D6D1B8;
  if (!qword_254D6D1B8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_2143AA890()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6D110;
  if (!qword_254D6D110)
  {
    v1 = sub_2141D7924(&qword_254D6D0E0);
    v2[0] = sub_2141D9054(&qword_254D6D118, &qword_254D6D120, MEMORY[0x24BDEB9A8]);
    v2[1] = sub_214398944(&qword_254D6D128, &qword_254D6D130, (uint64_t (*)(void))sub_2143AA78C, MEMORY[0x24BDF4A08]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEC550], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6D110);
  }
  return result;
}

uint64_t sub_2143AA934()
{
  return sub_2144241F4();
}

uint64_t sub_2143AA954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2143AA998(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], MEMORY[0x24BDEE3D8]);
}

uint64_t sub_2143AA978()
{
  return sub_2144241D0();
}

uint64_t sub_2143AA998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_2143AAA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2143AA998(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDED130], MEMORY[0x24BDEE080]);
}

uint64_t sub_2143AAA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultChartLegend.ColorRampView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143AAA7C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DefaultChartLegend.ColorRampView();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143AAAB8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
    v9 = *((_OWORD *)a2 + 3);
    v10 = a3[10];
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v9;
    v13 = sub_2144247D0();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v14(v11, v12, v13);
    v15 = a3[11];
    v16 = (_QWORD *)(v7 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    sub_2141D8BF8(&qword_254D6D148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_214423B94();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v19 = a3[12];
    v20 = (_QWORD *)(v7 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_2141D8BF8(&qword_254D6D150);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = sub_2144240D4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v7;
}

uint64_t sub_2143AAC80(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + a2[10];
  v5 = sub_2144247D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[11];
  sub_2141D8BF8(&qword_254D6D148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_214423B94();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v8 = a1 + a2[12];
  sub_2141D8BF8(&qword_254D6D150);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v9 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t sub_2143AAD80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = a3[10];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v11 = sub_2144247D0();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v12(v9, v10, v11);
  v13 = a3[11];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  sub_2141D8BF8(&qword_254D6D148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_214423B94();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v17 = a3[12];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  sub_2141D8BF8(&qword_254D6D150);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = sub_2144240D4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    *v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_2143AAF18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_2144247D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  if (a1 != a2)
  {
    v11 = a3[11];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    sub_2141E0750(a1 + v11, &qword_254D6D148);
    sub_2141D8BF8(&qword_254D6D148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v14 = sub_214423B94();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v15 = a3[12];
    v16 = (_QWORD *)(a1 + v15);
    v17 = (_QWORD *)(a2 + v15);
    sub_2141E0750(a1 + v15, &qword_254D6D150);
    sub_2141D8BF8(&qword_254D6D150);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_2144240D4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2143AB0F4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_2144247D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[11];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_2141D8BF8(&qword_254D6D148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = sub_214423B94();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[12];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_2141D8BF8(&qword_254D6D150);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = sub_2144240D4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_2143AB268(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v10 = sub_2144247D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  if (a1 != a2)
  {
    v11 = a3[11];
    v12 = (void *)(a1 + v11);
    v13 = (const void *)(a2 + v11);
    sub_2141E0750(a1 + v11, &qword_254D6D148);
    v14 = sub_2141D8BF8(&qword_254D6D148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = sub_214423B94();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    v16 = a3[12];
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    sub_2141E0750(a1 + v16, &qword_254D6D150);
    v19 = sub_2141D8BF8(&qword_254D6D150);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = sub_2144240D4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2143AB424()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143AB430(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2144247D0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[10];
    }
    else
    {
      v12 = sub_2141D8BF8(&qword_254D6D138);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[11];
      }
      else
      {
        v10 = sub_2141D8BF8(qword_254D6D158);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[12];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_2143AB4FC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2143AB508(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_2144247D0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[10];
    }
    else
    {
      v12 = sub_2141D8BF8(&qword_254D6D138);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[11];
      }
      else
      {
        v10 = sub_2141D8BF8(qword_254D6D158);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[12];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_2143AB5D0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_2144247D0();
  if (v0 <= 0x3F)
  {
    sub_2143AB6B8(319, &qword_254D6D1C8, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    if (v1 <= 0x3F)
    {
      sub_2143AB6B8(319, qword_254D6D1D0, (void (*)(uint64_t))MEMORY[0x24BDED130]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void sub_2143AB6B8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_214423D5C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for DefaultChartLegend.CategoriesView()
{
  return &type metadata for DefaultChartLegend.CategoriesView;
}

uint64_t getEnumTagSinglePayload for DefaultChartLegend.GridLayout(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultChartLegend.GridLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.GridLayout()
{
  return &type metadata for DefaultChartLegend.GridLayout;
}

uint64_t sub_2143AB7A8()
{
  return sub_214398944(&qword_254D6D220, &qword_254D6D228, (uint64_t (*)(void))sub_2143AB7DC, MEMORY[0x24BDF5578]);
}

unint64_t sub_2143AB7DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6D230;
  if (!qword_254D6D230)
  {
    v1 = sub_2141D7924(&qword_254D6D0E8);
    v2[0] = sub_2143AA890();
    v2[1] = sub_2141FED10(&qword_253F132D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6D230);
  }
  return result;
}

unint64_t sub_2143AB864()
{
  unint64_t result;

  result = qword_254D6D238;
  if (!qword_254D6D238)
  {
    result = MEMORY[0x2199CD934](&unk_214430594, &type metadata for DefaultChartLegend.GridLayout);
    atomic_store(result, (unint64_t *)&qword_254D6D238);
  }
  return result;
}

uint64_t sub_2143AB8A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2143AB8B8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_2143AB8C8()
{
  unint64_t result;

  result = qword_254D6D250;
  if (!qword_254D6D250)
  {
    result = MEMORY[0x2199CD934](&unk_214430748, &type metadata for DefaultChartLegend.CategoryView);
    atomic_store(result, (unint64_t *)&qword_254D6D250);
  }
  return result;
}

unint64_t sub_2143AB90C()
{
  unint64_t result;

  result = qword_254D6D258;
  if (!qword_254D6D258)
  {
    result = MEMORY[0x2199CD934](&unk_2144303BC, &type metadata for LegendRenderingContext.Category);
    atomic_store(result, (unint64_t *)&qword_254D6D258);
  }
  return result;
}

uint64_t sub_2143AB950(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LegendRenderingContext.Category(a2, a1, &type metadata for LegendRenderingContext.Category);
  return a2;
}

uint64_t sub_2143AB984()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for DefaultChartLegend.ColorRampView();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_release();
  v3 = v2 + v1[10];
  v4 = sub_2144247D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v2 + v1[11];
  sub_2141D8BF8(&qword_254D6D148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_214423B94();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  v7 = v2 + v1[12];
  sub_2141D8BF8(&qword_254D6D150);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_2144240D4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2143ABADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultChartLegend.ColorRampView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143ABB20(uint64_t *a1, double a2, double a3)
{
  double *v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(type metadata accessor for DefaultChartLegend.ColorRampView() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_2143A93C0(a1, (uint64_t)v3 + v8, *(_QWORD *)((char *)v3 + ((v9 + 23) & 0xFFFFFFFFFFFFF8)), a2, a3, v3[2], v3[3], v3[4], v3[5], *(double *)((char *)v3 + v9), *(double *)((char *)v3 + v9 + 8));
}

uint64_t sub_2143ABBA0(uint64_t a1)
{
  sub_214208738(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return a1;
}

uint64_t sub_2143ABBD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2143A88AC(a1, *(void (***)(_QWORD *__return_ptr, uint64_t *))(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_2143ABBF8(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if ((a2 & 1) == 0)
    a4 = a3;
  return a4();
}

void sub_2143ABC04(uint64_t a1, uint64_t a2, double (*a3)(_QWORD, _QWORD, double, double))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  double *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD *v28;
  double *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double *v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v46 = MEMORY[0x24BEE4AF8];
  sub_2141D422C(0, v7, 0);
  v40 = v7;
  v43 = a2;
  v44 = a1;
  v41 = v5;
  v42 = v6;
  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = (double *)(a2 + 40);
    v9 = v6;
    v10 = (_QWORD *)(a1 + 40);
    v11 = v5;
    v12 = v7;
    while (v11)
    {
      if (!v9)
        goto LABEL_26;
      v13 = a3(*(v10 - 1), *v10, *(v8 - 1), *v8);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = *(_QWORD *)(v46 + 16);
      v20 = *(_QWORD *)(v46 + 24);
      if (v21 >= v20 >> 1)
        sub_2141D422C((char *)(v20 > 1), v21 + 1, 1);
      *(_QWORD *)(v46 + 16) = v21 + 1;
      v22 = (double *)(v46 + 32 * v21);
      v22[4] = v13;
      *((_QWORD *)v22 + 5) = v15;
      --v9;
      *((_QWORD *)v22 + 6) = v17;
      *((_QWORD *)v22 + 7) = v19;
      --v11;
      v8 += 2;
      v10 += 2;
      if (!--v12)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_13:
    if (v41 <= v42)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v40 <= v42)
      v23 = v42;
    else
      v23 = v40;
    v24 = v23 - v40;
    v25 = v41 - v40;
    v26 = v42 - v40;
    v27 = 16 * v40 + 40;
    v28 = (_QWORD *)(v44 + v27);
    v29 = (double *)(v43 + v27);
    while (v25)
    {
      if (!v26)
        goto LABEL_24;
      if (!v24)
        goto LABEL_28;
      v30 = a3(*(v28 - 1), *v28, *(v29 - 1), *v29);
      v32 = v31;
      v34 = v33;
      v36 = v35;
      v38 = *(_QWORD *)(v46 + 16);
      v37 = *(_QWORD *)(v46 + 24);
      if (v38 >= v37 >> 1)
        sub_2141D422C((char *)(v37 > 1), v38 + 1, 1);
      *(_QWORD *)(v46 + 16) = v38 + 1;
      v39 = (double *)(v46 + 32 * v38);
      v39[4] = v30;
      *((_QWORD *)v39 + 5) = v32;
      --v24;
      *((_QWORD *)v39 + 6) = v34;
      *((_QWORD *)v39 + 7) = v36;
      --v26;
      v28 += 2;
      v29 += 2;
      if (!--v25)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

char *sub_2143ABE54(uint64_t a1, double a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char *v7;
  double v8;

  v3 = (char *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_21434EC60((uint64_t)v3);
    v5 = 0;
    v6 = 0.0;
    do
    {
      v7 = &v3[8 * v5];
      v8 = *((double *)v7 + 4);
      *((double *)v7 + 4) = v6;
      v6 = v6 + v8 + a2;
      ++v5;
    }
    while (v4 != v5);
  }
  return v3;
}

unint64_t sub_2143ABED4(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  return sub_2143A7250(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t destroy for DefaultChartLegend.ColorRampView.Tick(uint64_t a1)
{
  sub_2141ED0BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_2141DD130(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_2141DD130(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v4;
  sub_2141ED0BC(v5, v6, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultChartLegend.ColorRampView.Tick(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.ColorRampView.Tick()
{
  return &type metadata for DefaultChartLegend.ColorRampView.Tick;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(a1 + 80))
    _s6Charts15AnyChartContentVwxx_0(a1 + 56);
  return swift_bridgeObjectRelease();
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_2141DD130(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 56, a2 + 56, v9);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v13;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_2141DD130(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v10 = (_OWORD *)(a1 + 56);
  v11 = (_OWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v12)
    {
      sub_2141DEA14((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
    }
    else
    {
      sub_2143039E0(a1 + 56);
      v13 = *(_QWORD *)(a2 + 88);
      v14 = *(_OWORD *)(a2 + 72);
      *v10 = *v11;
      *(_OWORD *)(a1 + 72) = v14;
      *(_QWORD *)(a1 + 88) = v13;
    }
  }
  else if (v12)
  {
    *(_QWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 56, a2 + 56);
  }
  else
  {
    v15 = *v11;
    v16 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *v10 = v15;
    *(_OWORD *)(a1 + 72) = v16;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v17;
  return a1;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v5;
  sub_2141ED0BC(v6, v7, v8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_QWORD *)(a2 + 80))
      _s6Charts15AnyChartContentVwxx_0(a1 + 56);
    else
      sub_2143039E0(a1 + 56);
  }
  v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)&v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2143AC504(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.CategoryView()
{
  return &type metadata for DefaultChartLegend.CategoryView;
}

uint64_t sub_2143AC57C()
{
  return sub_214398944(&qword_254D6D298, &qword_254D6D2A0, (uint64_t (*)(void))sub_2143AB8C8, MEMORY[0x24BDF4A08]);
}

unint64_t sub_2143AC5B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6D2A8;
  if (!qword_254D6D2A8)
  {
    v1 = sub_2141D7924(&qword_254D6D270);
    v2[0] = sub_2143AC620();
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6D2A8);
  }
  return result;
}

unint64_t sub_2143AC620()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6D2B0;
  if (!qword_254D6D2B0)
  {
    v1 = sub_2141D7924(&qword_254D6D268);
    v2[0] = sub_2141D9054(&qword_254D6D2B8, &qword_254D6D260, MEMORY[0x24BDF4400]);
    v2[1] = sub_2143AC6A4();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6D2B0);
  }
  return result;
}

unint64_t sub_2143AC6A4()
{
  unint64_t result;

  result = qword_253F13268;
  if (!qword_253F13268)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEE7F0], MEMORY[0x24BDEE800]);
    atomic_store(result, (unint64_t *)&qword_253F13268);
  }
  return result;
}

uint64_t sub_2143AC6E8()
{
  return MEMORY[0x24BEE13E8];
}

uint64_t sub_2143AC6F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2143AC704(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LegendRenderingContext.Category(a2, a1, &type metadata for DefaultChartLegend.CategoryView);
  return a2;
}

uint64_t sub_2143AC738(uint64_t a1)
{
  destroy for LegendRenderingContext.Category(a1, &type metadata for DefaultChartLegend.CategoryView);
  return a1;
}

uint64_t sub_2143AC764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_2143AC794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t destroy for DefaultChartLegend.LineShape()
{
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DefaultChartLegend.LineShape(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DefaultChartLegend.LineShape(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

_QWORD *assignWithTake for DefaultChartLegend.LineShape(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.LineShape()
{
  return &type metadata for DefaultChartLegend.LineShape;
}

uint64_t sub_2143AC8D8()
{
  return sub_2141D9054(&qword_254D6D2E0, &qword_254D6D2E8, MEMORY[0x24BDF4498]);
}

uint64_t sub_2143AC904()
{
  return sub_2141D9054(&qword_254D6D2F0, &qword_254D6D2F8, MEMORY[0x24BDEB358]);
}

unint64_t sub_2143AC934()
{
  unint64_t result;

  result = qword_254D6D300;
  if (!qword_254D6D300)
  {
    result = MEMORY[0x2199CD934](&unk_2144307F4, &type metadata for DefaultChartLegend.LineShape);
    atomic_store(result, (unint64_t *)&qword_254D6D300);
  }
  return result;
}

unint64_t sub_2143AC97C()
{
  unint64_t result;

  result = qword_254D6D308;
  if (!qword_254D6D308)
  {
    result = MEMORY[0x2199CD934](&unk_2144307A4, &type metadata for DefaultChartLegend.LineShape);
    atomic_store(result, (unint64_t *)&qword_254D6D308);
  }
  return result;
}

unint64_t sub_2143AC9C0()
{
  unint64_t result;

  result = qword_254D6D310;
  if (!qword_254D6D310)
  {
    result = MEMORY[0x2199CD934](&unk_214430844, &type metadata for DefaultChartLegend.LineShape);
    atomic_store(result, (unint64_t *)&qword_254D6D310);
  }
  return result;
}

uint64_t sub_2143ACA0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v21[1] = a2;
  v3 = sub_2141D8BF8(&qword_254D6D318);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v21 - v7;
  v9 = sub_2141D8BF8(&qword_254D6D320);
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_214424584();
  v15 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214424590();
  sub_2143ACF60(a1, (uint64_t)v14);
  result = AGTypeGetKind();
  if ((result - 6) < 0xFFFFFFFC)
  {
    __break(1u);
  }
  else
  {
    v21[0] = v9;
    sub_2141D8BF8(&qword_254D6D328);
    sub_2143AD260();
    sub_2144242F0();
    sub_2143ACA0C(v11, v14);
    sub_2143AD100((uint64_t)v8, (uint64_t)v5);
    v19 = sub_2144245D8();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, v19) == 1)
    {
      sub_2143AD148((uint64_t)v8);
      (*(void (**)(char *, _QWORD))(v23 + 8))(v11, v21[0]);
      sub_2143AD188((uint64_t)v14);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v22);
      return sub_2143AD148((uint64_t)v5);
    }
    else
    {
      sub_2144245CC();
      sub_2143AD148((uint64_t)v8);
      (*(void (**)(char *, _QWORD))(v23 + 8))(v11, v21[0]);
      sub_2143AD188((uint64_t)v14);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v22);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v5, v19);
    }
  }
  return result;
}

uint64_t static ChartContent._makeChartContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v28 = a2;
  v30 = a5;
  v8 = sub_2141D8BF8(&qword_254D6D318);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_214423DA4();
  v31 = *(_QWORD *)(v15 - 8);
  v32 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - v16;
  v18 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_214424584();
  v21 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214424590();
  sub_2143ACF60(v28, (uint64_t)v20);
  v28 = a1;
  sub_2143AD058((uint64_t)v17, (uint64_t)v13, a1, (uint64_t)v20, (uint64_t)v23, a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v17, v20, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_2143AD100((uint64_t)v13, (uint64_t)v10);
  v25 = sub_2144245D8();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v25) == 1)
  {
    sub_2143AD148((uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
    sub_2143AD188((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v29);
    return sub_2143AD148((uint64_t)v10);
  }
  else
  {
    sub_2144245CC();
    sub_2143AD148((uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
    sub_2143AD188((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v10, v25);
  }
}

uint64_t sub_2143ACF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _ChartContentInputs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static ChartContent._chartContentCount(inputs:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_2143AD040()
{
  return sub_2143AD040();
}

uint64_t sub_2143AD058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  result = AGTypeGetKind();
  if ((result - 6) < 0xFFFFFFFC)
  {
    __break(1u);
  }
  else
  {
    v11 = type metadata accessor for ChartContentBodyAccessor(0, a6, a7, v10);
    MEMORY[0x2199CD934](&unk_214430900, v11);
    return sub_2144242F0();
  }
  return result;
}

uint64_t sub_2143AD100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_254D6D318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143AD148(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_254D6D318);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143AD188(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _ChartContentInputs(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143AD1C4(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](result);
    v4 = type metadata accessor for ChartContentBodyAccessor(0, v2, v3, v3);
    MEMORY[0x2199CD934](&unk_214430900, v4);
    return sub_2144242E4();
  }
  return result;
}

uint64_t sub_2143AD254(uint64_t result, char a2)
{
  return sub_2143AD1C4(result, a2);
}

unint64_t sub_2143AD260()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D6D330[0];
  if (!qword_254D6D330[0])
  {
    v1 = sub_2141D7924(&qword_254D6D328);
    result = MEMORY[0x2199CD934](&unk_214430900, v1);
    atomic_store(result, qword_254D6D330);
  }
  return result;
}

uint64_t type metadata accessor for ChartContentBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChartContentBodyAccessor);
}

uint64_t sub_2143AD2B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 24))(*(_QWORD *)(v0 + 16));
}

void *RectangleMark.init<A, B>(x:y:width:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[288];
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE v26[144];
  _BYTE v27[144];
  _BYTE __src[288];

  sub_2143D90EC(a1, a3, a4, a7, a10, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)v23);
  sub_2143D90EC(a2, a5, a6, a8, a11, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v26);
  v19 = type metadata accessor for PlottableValue(0, a8, a11, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a2, v19);
  v21 = type metadata accessor for PlottableValue(0, a7, a10, v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[144];
  _BYTE v21[144];
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE __src[288];

  sub_2143D90EC(a1, a6, a7, a8, a10, (uint64_t)v20);
  sub_2141EDFD8((uint64_t)v20, (uint64_t)v21);
  v18 = type metadata accessor for PlottableValue(0, a8, a10, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  v22 = a2;
  v23 = a3 & 1;
  v24 = a4;
  v25 = a5 & 1;
  sub_2141EFF40((uint64_t)&v22);
  sub_2141EDFD8((uint64_t)v21, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)&v22, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[288];
  _BYTE v19[144];
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE __src[288];

  v20 = a1;
  v21 = a2 & 1;
  v22 = a3;
  v23 = a4 & 1;
  sub_2141EFF40((uint64_t)&v20);
  sub_2141EDFD8((uint64_t)&v20, (uint64_t)v18);
  sub_2143D90EC(a5, a6, a7, a8, a10, (uint64_t)v19);
  sub_2141EDFD8((uint64_t)v19, (uint64_t)v24);
  v16 = type metadata accessor for PlottableValue(0, a8, a10, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a5, v16);
  sub_2141EDFD8((uint64_t)v18, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A, B>(xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  _BYTE v25[288];
  _BYTE v26[144];
  _BYTE v27[144];
  _BYTE v28[144];
  _BYTE v29[144];
  _BYTE __src[296];

  sub_2143D8D5C(a1, a2, a6, a8, (uint64_t)v26);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)v25);
  sub_2143D90EC(a3, a4, a5, a7, a10, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)v28);
  v20 = type metadata accessor for PlottableValue(0, a7, a10, v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a3, v20);
  v22 = type metadata accessor for PlottableValue(0, a6, a8, v21);
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
  v23(a2, v22);
  v23(a1, v22);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v29);
  sub_2141EDFD8((uint64_t)v29, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v28, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _BYTE v22[144];
  _BYTE v23[144];
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _BYTE __src[288];

  sub_2143D8D5C(a1, a2, a7, a8, (uint64_t)v22);
  sub_2141EDFD8((uint64_t)v22, (uint64_t)v23);
  v19 = type metadata accessor for PlottableValue(0, a7, a8, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(a2, v19);
  v20(a1, v19);
  v24 = a3;
  v25 = a4 & 1;
  v26 = a5;
  v27 = a6 & 1;
  sub_2141EFF40((uint64_t)&v24);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)&v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A, B>(x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[288];
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE v26[144];
  _BYTE v27[144];
  _BYTE __src[288];

  sub_2143D90EC(a1, a4, a5, a6, a8, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)v23);
  sub_2143D8D5C(a2, a3, a7, a10, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v26);
  v18 = type metadata accessor for PlottableValue(0, a7, a10, v17);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(a3, v18);
  v19(a2, v18);
  v21 = type metadata accessor for PlottableValue(0, a6, a8, v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _BYTE v18[288];
  _BYTE v19[144];
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE __src[288];

  v20 = a1;
  v21 = a2 & 1;
  v22 = a3;
  v23 = a4 & 1;
  sub_2141EFF40((uint64_t)&v20);
  sub_2141EDFD8((uint64_t)&v20, (uint64_t)v18);
  sub_2143D8D5C(a5, a6, a7, a8, (uint64_t)v19);
  sub_2141EDFD8((uint64_t)v19, (uint64_t)v24);
  v15 = type metadata accessor for PlottableValue(0, a7, a8, v14);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(a6, v15);
  v16(a5, v15);
  sub_2141EDFD8((uint64_t)v18, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A, B>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  _BYTE v25[288];
  _BYTE v26[144];
  _BYTE v27[144];
  _BYTE v28[144];
  _BYTE v29[144];
  _BYTE __src[288];

  sub_2143D8D5C(a1, a2, a5, a7, (uint64_t)v26);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)v25);
  sub_2143D8D5C(a3, a4, a6, a8, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)v28);
  v19 = type metadata accessor for PlottableValue(0, a6, a8, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(a4, v19);
  v20(a3, v19);
  v22 = type metadata accessor for PlottableValue(0, a5, a7, v21);
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
  v23(a2, v22);
  v23(a1, v22);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v29);
  sub_2141EDFD8((uint64_t)v29, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v28, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>)
{
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _BYTE __src[288];

  v15 = a1;
  v16 = a2 & 1;
  v17 = a3;
  v18 = a4 & 1;
  sub_2141EFF40((uint64_t)&v15);
  v19 = a5;
  v20 = a6 & 1;
  v21 = a7;
  v22 = a8 & 1;
  sub_2141EFF40((uint64_t)&v19);
  sub_2141EDFD8((uint64_t)&v15, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)&v19, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void static RectangleMark._layoutChartContent(_:_:)(uint64_t a1)
{
  _BYTE v2[144];
  _BYTE v3[144];

  sub_2141EDFD8(a1, (uint64_t)v3);
  sub_2141EDFD8(a1 + 144, (uint64_t)v2);
  swift_beginAccess();
  sub_214200BC0((uint64_t)v3);
  sub_214200BC0((uint64_t)v2);
  sub_214202388((uint64_t)v3);
  sub_214202388((uint64_t)v2);
}

uint64_t static RectangleMark._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  unint64_t *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  _BYTE v50[144];
  _BYTE v51[152];

  v45 = a3;
  v44 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v44);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2141D8BF8(&qword_253F134C8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_214424308();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (double *)((char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141EDFD8(a1, (uint64_t)v51);
  sub_2141EDFD8(a1 + 144, (uint64_t)v50);
  LOBYTE(a1) = *(_BYTE *)a2;
  v17 = *(_QWORD *)(a2 + 8);
  swift_retain();
  if ((a1 & 1) != 0)
  {
    v18 = sub_2143AE0A8((uint64_t)v51, (uint64_t)v50, v17);
    result = swift_release();
  }
  else
  {
    sub_2141FF3BC((uint64_t)v51);
    v20 = v46;
    v21 = v47;
    sub_2141FF3BC((uint64_t)v50);
    v22 = v48;
    v23 = v49;
    if (v21 >= v20)
      v24 = v20;
    else
      v24 = v21;
    if (v49 >= v48)
      v25 = v48;
    else
      v25 = v49;
    v42 = v25;
    v43 = v24;
    v26 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    if ((*(_BYTE *)(v26 + 208) & 1) != 0)
    {
      if ((*(_BYTE *)(v26 + 168) & 1) != 0 && qword_253F11AB8 != -1)
        swift_once();
      sub_214424404();
      v29 = v31;
      v30 = v32;
      v27 = v33;
      v28 = v34;
    }
    else
    {
      v27 = *(_QWORD *)(v26 + 192);
      v28 = *(_QWORD *)(v26 + 200);
      v29 = *(_QWORD *)(v26 + 176);
      v30 = *(_QWORD *)(v26 + 184);
    }
    v35 = vabdd_f64(v21, v20);
    v36 = vabdd_f64(v23, v22);
    sub_2141EEE24(v26 + *(int *)(v44 + 44), (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      if (qword_253F121C8 != -1)
        swift_once();
      v37 = sub_2141EEE6C(v10, (uint64_t)qword_253F1C998);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v37, v10);
      sub_2141EEE84((uint64_t)v9);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    }
    sub_2141EEEC4(v26, (uint64_t)v6);
    sub_2141FFC88((uint64_t)v6, (uint64_t)v16 + v14[11]);
    v38 = *(_QWORD *)(v26 + *(int *)(v44 + 64));
    swift_release();
    *v16 = 0.0;
    v39 = v42;
    v16[1] = v43;
    v16[2] = v39;
    v16[3] = v35;
    v16[4] = v36;
    *((_QWORD *)v16 + 5) = v29;
    *((_QWORD *)v16 + 6) = v30;
    *((_QWORD *)v16 + 7) = v27;
    *((_QWORD *)v16 + 8) = v28;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v16 + v14[10], v13, v10);
    *(_QWORD *)((char *)v16 + v14[12]) = v38;
    v40 = swift_allocBox();
    result = sub_2143AE7DC((uint64_t)v16, v41);
    v18 = v40 | 0x4000000000000000;
  }
  *v45 = v18;
  return result;
}

unint64_t sub_2143AE0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[152];
  _QWORD __src[76];
  _BYTE v69[152];
  _BYTE v70[152];
  char v71[8];
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _BYTE v82[152];
  _BYTE v83[152];
  _BYTE v84[168];
  _BYTE v85[168];
  _BYTE v86[144];
  _BYTE v87[144];
  _BYTE v88[144];
  double v89;
  double v90;
  double v91;
  double v92;
  char v93[152];
  char v94[152];
  char v95[152];
  _BYTE v96[144];
  _BYTE v97[144];
  _BYTE v98[144];
  _BYTE v99[144];
  __int128 v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  _BYTE v107[144];
  _BYTE v108[152];

  sub_2141EDFD8(a2, (uint64_t)v97);
  v6 = v107;
  sub_2141EDFD8((uint64_t)v97, (uint64_t)v107);
  sub_2141EDFD8(a1, (uint64_t)v96);
  sub_2141EDFD8((uint64_t)v96, (uint64_t)v108);
  sub_2141FF3BC(a1);
  v7 = v89;
  v8 = v90;
  v65 = a3;
  sub_2141FF3BC(a2);
  v9 = v91;
  v10 = v92;
  v11 = sub_2143E5A38() & 1;
  if (v11)
    v12 = v107;
  else
    v12 = v108;
  if (v11)
    v6 = v108;
  v61 = v11;
  v64 = v11 ^ 1;
  sub_2141EDFD8((uint64_t)v12, (uint64_t)v87);
  sub_2141EDFD8((uint64_t)v6, (uint64_t)v88);
  sub_2141EDFD8((uint64_t)v87, (uint64_t)v99);
  sub_2141EDFD8((uint64_t)v88, (uint64_t)v98);
  sub_2141EDFD8((uint64_t)v88, (uint64_t)v86);
  v13 = sub_2141EF1D0((uint64_t)v86);
  if (v13 == 2)
  {
    v23 = sub_2141EF754((uint64_t)v86);
    v16 = *(_QWORD *)(v23 + 8);
    v17 = *(_BYTE *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    v18 = *(_QWORD *)(v23 + 32);
    v20 = *(_QWORD *)(v23 + 40);
    *(_QWORD *)&v100 = *(_QWORD *)v23;
    v15 = v100;
    *((_QWORD *)&v100 + 1) = v16;
    v101 = v17;
    v102 = v24;
    v103 = v18;
    v104 = v20;
    v105 = *(_BYTE *)(v23 + 48);
    v21 = v105;
    v106 = *(_OWORD *)(v23 + 56);
    sub_2141DD130(v100, v16, v17);
    swift_bridgeObjectRetain();
    sub_2141DD140(v18, v20, v21);
    v22 = (_OWORD *)v65;
    swift_retain();
    sub_21439C044(a2);
    sub_21439C044(a1);
    sub_2141DD130(v15, v16, v17);
    swift_bridgeObjectRetain();
    sub_2141DD140(v18, v20, v21);
    goto LABEL_10;
  }
  if (!v13)
  {
    v14 = sub_2141EF754((uint64_t)v86);
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_BYTE *)(v14 + 16);
    v19 = *(_QWORD *)(v14 + 24);
    v18 = *(_QWORD *)(v14 + 32);
    v20 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)&v100 = *(_QWORD *)v14;
    v15 = v100;
    *((_QWORD *)&v100 + 1) = v16;
    v101 = v17;
    v102 = v19;
    v103 = v18;
    v104 = v20;
    v105 = *(_BYTE *)(v14 + 48);
    v21 = v105;
    v106 = *(_OWORD *)(v14 + 56);
    sub_2141DD130(v100, v16, v17);
    swift_bridgeObjectRetain();
    sub_2141DD140(v18, v20, v21);
    sub_2141DD130(v15, v16, v17);
    swift_bridgeObjectRetain();
    sub_2141DD140(v18, v20, v21);
    v22 = (_OWORD *)v65;
    swift_retain();
    sub_21439C044(a2);
    sub_21439C044(a1);
LABEL_10:
    sub_214205DD8(v64, v22, (uint64_t)v22, v64, &v100, (uint64_t)v85);
    sub_2141ED0BC(v15, v16, v17);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v18, v20, v21);
    sub_2141E801C((uint64_t)v85, (uint64_t)__src, qword_253F12398);
    goto LABEL_12;
  }
  sub_2141EF1DC((uint64_t)__src);
  sub_21439C044(a2);
  sub_21439C044(a1);
LABEL_12:
  sub_2141E801C((uint64_t)__src, (uint64_t)v85, qword_253F12398);
  sub_2141D8BF8(&qword_253F13588);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_214427810;
  sub_2141E801C((uint64_t)v85, (uint64_t)v84, qword_253F12398);
  if (sub_2141EF214((uint64_t)v84) == 1)
  {
    sub_21439C044((uint64_t)v88);
    sub_2143036C0(v64, (uint64_t)v98);
    sub_2141E801C((uint64_t)v93, (uint64_t)__src, &qword_253F13428);
  }
  else
  {
    sub_2141EF22C((uint64_t)__src);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v83, &qword_253F13428);
  sub_2141E801C((uint64_t)v83, v25 + 32, &qword_253F13428);
  sub_2143036C0(v61, (uint64_t)v99);
  sub_2141E801C((uint64_t)v94, v25 + 184, &qword_253F13428);
  v26 = v65 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v27 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v28 = (uint64_t *)(v26 + v27[18]);
  v29 = *v28;
  v30 = v28[1];
  v31 = v28[2];
  v32 = v28[3];
  v34 = v28[4];
  v33 = v28[5];
  v36 = v28[6];
  v35 = v28[7];
  v37 = v28[8];
  v62 = v36;
  if (v32)
  {
    v71[0] = 4;
    v72 = v29;
    v73 = v30;
    v74 = v31 & 1;
    v75 = v32;
    v76 = v34;
    v77 = v33;
    v78 = v36;
    v79 = v35;
    v80 = v37;
    v81 = 3;
    v38 = v33;
    sub_2141EF6F4((uint64_t)v71);
    sub_2141EF6B8((uint64_t)v71, (uint64_t)__src);
    nullsub_1(__src, v39);
  }
  else
  {
    v38 = v28[5];
    sub_2141EF22C((uint64_t)__src);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v82, &qword_253F13428);
  sub_2141E801C((uint64_t)v82, v25 + 336, &qword_253F13428);
  sub_2141EF260(v29, v30, v31, v32, v34, v38, v62);
  v59 = sub_2142E91DC(v25);
  v63 = v40;
  swift_setDeallocating();
  sub_2141D8BF8(&qword_253F13428);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v60 = *(_QWORD *)(*(_QWORD *)(v65 + 16) + 24);
  v41 = (uint64_t *)(v26 + v27[26]);
  v42 = v41[1];
  v66 = *v41;
  v43 = v27[25];
  v44 = (uint64_t *)(v26 + v27[24]);
  v45 = *v44;
  v46 = v44[1];
  v48 = v44[2];
  v47 = v44[3];
  v49 = v26 + v43;
  v50 = *(_QWORD *)(v26 + v43);
  v51 = *(_QWORD *)(v26 + v43 + 8);
  v53 = *(_QWORD *)(v49 + 16);
  v52 = *(_QWORD *)(v49 + 24);
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v45, v46, v48, v47);
  sub_2141EF2B4(v50, v51, v53, v52);
  sub_2143036C0(v64, (uint64_t)v98);
  sub_2141E801C((uint64_t)v95, (uint64_t)v70, &qword_253F13428);
  sub_2141E801C((uint64_t)v85, (uint64_t)v71, qword_253F12398);
  if (sub_2141EF214((uint64_t)v71) == 1)
  {
    sub_2141EF22C((uint64_t)__src);
  }
  else
  {
    sub_2141EF6B8((uint64_t)&v73, (uint64_t)__src);
    nullsub_1(__src, v54);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v69, &qword_253F13428);
  v55 = vabdd_f64(v10, v9);
  v56 = vabdd_f64(v8, v7);
  if (v10 < v9)
    v9 = v10;
  if (v8 < v7)
    v7 = v8;
  sub_2141EF22C((uint64_t)v67);
  __src[0] = v60;
  *(double *)&__src[1] = v7;
  *(double *)&__src[2] = v9;
  *(double *)&__src[3] = v56;
  *(double *)&__src[4] = v55;
  __src[5] = v66;
  __src[6] = v42;
  __src[7] = v45;
  __src[8] = v46;
  __src[9] = v48;
  __src[10] = v47;
  __src[11] = v50;
  __src[12] = v51;
  __src[13] = v53;
  __src[14] = v52;
  __src[15] = v59;
  sub_2141E801C((uint64_t)v70, (uint64_t)&__src[16], &qword_253F13428);
  __src[35] = v63;
  sub_2141E801C((uint64_t)v69, (uint64_t)&__src[36], &qword_253F13428);
  sub_2141E801C((uint64_t)v67, (uint64_t)&__src[55], &qword_253F13428);
  LOWORD(__src[74]) = 0;
  __src[75] = 0;
  v57 = swift_allocObject();
  memcpy((void *)(v57 + 16), __src, 0x260uLL);
  return v57 | 0xC000000000000000;
}

uint64_t sub_2143AE7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SgRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for RectangleMark()
{
  return &type metadata for RectangleMark;
}

uint64_t sub_2143AE830()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v3, v4, v5, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v7, *(_QWORD *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(_QWORD *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v9, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), v10, *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v11, v12, v13, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v14, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), v15, *(_QWORD *)(v0 + 440), v16);
  }
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(_QWORD *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v17, *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), v18, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), v19, v20, v21, *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), v22, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), v23, *(_QWORD *)(v0 + 592), v24);
  }
  return swift_deallocObject();
}

uint64_t sub_2143AEA88(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD v46[4];
  char v47;

  v35 = a2;
  v36 = a3;
  v7 = sub_214424308();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (!v9)
    return v10;
  v30 = v4;
  v45 = MEMORY[0x24BEE4AF8];
  sub_2141D3C3C(0, v9, 0);
  v11 = 0;
  v10 = v45;
  v37 = a1 + 32;
  v31 = v9;
  while (1)
  {
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v13 = qword_253F11F50;
    swift_bridgeObjectRetain();
    if (v13 != -1)
      swift_once();
    if (*(double *)&qword_253F1C988 >= a4)
      break;
    v15 = (uint64_t)v32;
    v14 = v33;
    v16 = v34;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v33 + 16))(v32, v36, v34, *(double *)&qword_253F1C988);
    v17 = sub_2142D7320(v15, v12, v35, (uint64_t)v46, a4);
    v18 = v46[2];
    v38 = v46[1];
    v39 = v46[0];
    v19 = v46[3];
    v20 = v47;
    v21 = v15;
    v9 = v31;
    (*(void (**)(uint64_t, uint64_t, double))(v14 + 8))(v21, v16, v17);
    swift_bridgeObjectRelease();
LABEL_13:
    v45 = v10;
    v27 = *(_QWORD *)(v10 + 16);
    v26 = *(_QWORD *)(v10 + 24);
    if (v27 >= v26 >> 1)
    {
      sub_2141D3C3C((char *)(v26 > 1), v27 + 1, 1);
      v10 = v45;
    }
    ++v11;
    *(_QWORD *)(v10 + 16) = v27 + 1;
    v28 = v10 + 40 * v27;
    v29 = v38;
    *(_QWORD *)(v28 + 32) = v39;
    *(_QWORD *)(v28 + 40) = v29;
    *(_QWORD *)(v28 + 48) = v18;
    *(_QWORD *)(v28 + 56) = v19;
    *(_BYTE *)(v28 + 64) = v20;
    if (v11 == v9)
      return v10;
  }
  result = sub_214424770();
  v23 = *(_QWORD *)(v12 + 16);
  if (v23)
  {
    sub_2144246F8();
    v24 = v23 - 1;
    if (v24)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v24; ++i)
        sub_21442471C();
      swift_bridgeObjectRelease();
    }
    sub_2144246E0();
    swift_bridgeObjectRelease();
    v18 = v42;
    v38 = v41;
    v39 = v40;
    v19 = v43;
    v20 = v44;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_2143AECFC(char **a1)
{
  char *v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21434EB5C((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_2143B0528(v4);
  *a1 = v2;
}

uint64_t ChartContent._horizontalConnection(gradient:width:tolerance:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v7;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int *v22;
  uint64_t v24;

  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, v7, v19, v16);
  if ((a3 & 1) != 0)
    v20 = 0.5;
  else
    v20 = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v18, a4);
  v22 = (int *)type metadata accessor for _HorizontalConnection(0, a4, a5, v21);
  *(_QWORD *)(a6 + v22[9]) = a1;
  *(double *)(a6 + v22[10]) = a7;
  *(double *)(a6 + v22[11]) = v20;
  return swift_bridgeObjectRetain();
}

_UNKNOWN **sub_2143AEE5C()
{
  return &off_254D6D3F8;
}

uint64_t sub_2143AEE68()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2143AEEF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    *v12 = *v13;
    *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_2143AEFD4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143AF014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2143AF094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v7 += 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(((v7 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v9 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2143AF120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2143AF19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v8 += 15;
  *(_QWORD *)v7 = v9;
  v7 += 15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(((v7 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v8 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2143AF220(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2143AF2AC + 4 * byte_214430990[v10]))();
  }
}

void sub_2143AF330(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2143AF434()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2143AF4A8);
}

void sub_2143AF43C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2143AF444);
  JUMPOUT(0x2143AF4A8);
}

void sub_2143AF484()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143AF4A8);
}

void sub_2143AF48C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143AF4A8);
}

uint64_t sub_2143AF494(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x2143AF4A8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x2143AF4A4);
    JUMPOUT(0x2143AF4A0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for _HorizontalConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _HorizontalConnection);
}

void sub_2143AF4CC(unint64_t a1, char **a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  double v34;
  __int128 v35;

  v12 = type metadata accessor for SgRectangle(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 60 == 4)
  {
    v25 = sub_214424308();
    v26 = *(_QWORD *)(v25 - 8);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a4, v25);
    v27 = swift_projectBox();
    sub_2141FDEA0(v27, (uint64_t)v14, type metadata accessor for SgRectangle);
    v28 = *((_QWORD *)v14 + 1);
    v35 = *((_OWORD *)v14 + 1);
    v29 = *((_QWORD *)v14 + 4);
    v30 = *a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = sub_2142245B0(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    v32 = *((_QWORD *)v30 + 2);
    v31 = *((_QWORD *)v30 + 3);
    if (v32 >= v31 >> 1)
      v30 = sub_2142245B0((char *)(v31 > 1), v32 + 1, 1, v30);
    *((_QWORD *)v30 + 2) = v32 + 1;
    v33 = &v30[32 * v32];
    *((_QWORD *)v33 + 4) = v28;
    *(_OWORD *)(v33 + 40) = v35;
    *((_QWORD *)v33 + 7) = v29;
    *a2 = v30;
    v34 = *((double *)v14 + 5);
    if (v34 <= *((double *)v14 + 8))
      v34 = *((double *)v14 + 8);
    if (v34 <= *((double *)v14 + 7))
      v34 = *((double *)v14 + 7);
    if (v34 <= *((double *)v14 + 6))
      v34 = *((double *)v14 + 6);
    if (v34 <= *a3)
      v34 = *a3;
    *a3 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(a4, &v14[*(int *)(v12 + 40)], v25);
    v23 = type metadata accessor for SgRectangle;
    v24 = (uint64_t)v14;
  }
  else
  {
    if (a1 >> 60)
      return;
    v18 = swift_projectBox();
    sub_2141FDEA0(v18, (uint64_t)v17, type metadata accessor for SgGroup);
    v19 = *((_QWORD *)v17 + 1);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      *(_QWORD *)&v35 = v17;
      swift_bridgeObjectRetain();
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(v19 + 8 * v21++ + 32);
        swift_retain();
        sub_2143AF4CC(v22, a2, a3, a4, a5, a6);
        swift_release();
      }
      while (v20 != v21);
      swift_bridgeObjectRelease();
      v17 = (char *)v35;
    }
    v23 = type metadata accessor for SgGroup;
    v24 = (uint64_t)v17;
  }
  sub_2141DD370(v24, v23);
}

void sub_2143AF75C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  void (*v19)(_QWORD *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  double v42;
  uint64_t v43;
  __int128 v44;
  CGFloat v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  unint64_t v62;
  double v63;
  char *v64;
  double v65;
  char *v66;
  double v67;
  int64_t v68;
  uint64_t v69;
  double *v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  _OWORD *v75;
  __int128 v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat MinY;
  __int128 v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  __int128 v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat MaxY;
  __int128 v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  __int128 v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  __int128 v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  __int128 v103;
  CGFloat v104;
  CGFloat v105;
  CGFloat v106;
  CGFloat v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  CGFloat *v112;
  char *v113;
  CGFloat v114;
  CGFloat v115;
  CGFloat v116;
  CGFloat v117;
  double Width;
  double Height;
  double v120;
  double v121;
  double MinX;
  double v123;
  unint64_t v124;
  unint64_t v125;
  double *v126;
  double MaxX;
  double v128;
  unint64_t v129;
  unint64_t v130;
  double *v131;
  double v132;
  double v133;
  unint64_t v134;
  unint64_t v135;
  double *v136;
  double v137;
  double v138;
  unint64_t v139;
  unint64_t v140;
  double *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[2];
  char *v172;
  double v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  double v189;
  __int128 v190;
  __int128 v191;
  _QWORD v192[5];
  char v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  unsigned __int8 v198;
  char *v199;
  double v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  _OWORD v205[2];
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE v213[56];
  CGRect v214;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;
  CGRect v235;
  CGRect v236;
  CGRect v237;

  v184 = a1;
  v182 = a5;
  v8 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v8);
  v180 = (char *)v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SgPath(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v171 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_214424308();
  v13 = *(_QWORD *)(v181 - 8);
  v14 = MEMORY[0x24BDAC7A8](v181);
  v16 = (char *)v171 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 + 8);
  LOBYTE(v207) = *(_BYTE *)a2;
  v17 = v207;
  v208 = v18;
  v19 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(a4 + 40);
  *(_QWORD *)&v190 = a3;
  *(_QWORD *)&v191 = a4;
  v19(v192, v184, &v207, a3, a4, v14);
  if ((v17 & 1) != 0)
  {
    *v182 = v192[0];
  }
  else
  {
    v176 = v192[0];
    v177 = (int *)v10;
    v172 = v12;
    LOBYTE(v207) = v17;
    v208 = v18;
    v20 = v184;
    v21 = v190;
    v22 = v191;
    ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t *, _QWORD, _QWORD))v19)(v192, v184, &v207, v190, v191);
    v23 = v192[0];
    v200 = 0.0;
    v201 = (char *)MEMORY[0x24BEE4AF8];
    v24 = *MEMORY[0x24BDEEB68];
    v178 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v16, v24, v181);
    v179 = v16;
    sub_2143AF4CC(v23, &v201, &v200, (uint64_t)v16, v21, v22);
    v26 = type metadata accessor for _HorizontalConnection(0, v21, v22, v25);
    v27 = *(double *)(v20 + *(int *)(v26 + 40));
    v189 = *(double *)(v20 + *(int *)(v26 + 44));
    v173 = v200;
    sub_2143AECFC(&v201);
    v28 = v201;
    v29 = *((_QWORD *)v201 + 2);
    v30 = v29 != 0;
    v174 = v26;
    v175 = v23;
    v171[1] = 0;
    if (!v29 || v29 == v30)
    {
      swift_bridgeObjectRetain_n();
      v37 = v28;
LABEL_31:
      v67 = v27 * 0.5;
      v189 = v27 * 0.5 + v173;
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v68 = *((_QWORD *)v37 + 2);
      if (v68)
      {
        v207 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_2141D3BF4(0, v68, 0);
        v69 = v207;
        v70 = (double *)(v37 + 56);
        v190 = xmmword_21442C470;
        do
        {
          v71 = *(v70 - 3) - v67;
          v72 = *(v70 - 2) - v67;
          v73 = v27 + *(v70 - 1);
          v74 = v27 + *v70;
          sub_2141D8BF8(&qword_253F103C8);
          v75 = (_OWORD *)swift_allocObject();
          v75[1] = v190;
          v227.origin.x = v71;
          v227.origin.y = v72;
          v227.size.width = v73;
          v227.size.height = v74;
          *(double *)&v76 = CGRectGetMinX(v227);
          v191 = v76;
          *(CGFloat *)&v76 = v71;
          v77 = v72;
          v78 = v73;
          v79 = v74;
          MinY = CGRectGetMinY(*(CGRect *)&v76);
          *(_QWORD *)&v81 = v191;
          *((CGFloat *)&v81 + 1) = MinY;
          v75[2] = v81;
          v82 = v71;
          *(CGFloat *)&v81 = v72;
          v83 = v73;
          v84 = v74;
          *(double *)&v85 = CGRectGetMinX(*(CGRect *)((char *)&v81 - 8));
          v191 = v85;
          *(CGFloat *)&v85 = v71;
          v86 = v72;
          v87 = v73;
          v88 = v74;
          MaxY = CGRectGetMaxY(*(CGRect *)&v85);
          *(_QWORD *)&v90 = v191;
          *((CGFloat *)&v90 + 1) = MaxY;
          v75[3] = v90;
          v91 = v71;
          *(CGFloat *)&v90 = v72;
          v92 = v73;
          v93 = v74;
          *(double *)&v94 = CGRectGetMaxX(*(CGRect *)((char *)&v90 - 8));
          v191 = v94;
          *(CGFloat *)&v94 = v71;
          v95 = v72;
          v96 = v73;
          v97 = v74;
          v98 = CGRectGetMaxY(*(CGRect *)&v94);
          *(_QWORD *)&v99 = v191;
          *((CGFloat *)&v99 + 1) = v98;
          v75[4] = v99;
          v100 = v71;
          *(CGFloat *)&v99 = v72;
          v101 = v73;
          v102 = v74;
          *(double *)&v103 = CGRectGetMaxX(*(CGRect *)((char *)&v99 - 8));
          v191 = v103;
          *(CGFloat *)&v103 = v71;
          v104 = v72;
          v105 = v73;
          v106 = v74;
          v107 = CGRectGetMinY(*(CGRect *)&v103);
          *(_QWORD *)&v108 = v191;
          *((CGFloat *)&v108 + 1) = v107;
          v75[5] = v108;
          v207 = v69;
          v110 = *(_QWORD *)(v69 + 16);
          v109 = *(_QWORD *)(v69 + 24);
          if (v110 >= v109 >> 1)
          {
            sub_2141D3BF4((char *)(v109 > 1), v110 + 1, 1);
            v69 = v207;
          }
          *(_QWORD *)(v69 + 16) = v110 + 1;
          *(_QWORD *)(v69 + 8 * v110 + 32) = v75;
          v70 += 4;
          --v68;
        }
        while (v68);
        swift_bridgeObjectRelease();
        v111 = *((_QWORD *)v37 + 2);
        v199 = (char *)MEMORY[0x24BEE4AF8];
        if (v111)
        {
          swift_bridgeObjectRetain();
          v112 = (CGFloat *)(v37 + 56);
          v113 = (char *)MEMORY[0x24BEE4AF8];
          do
          {
            v114 = *(v112 - 3);
            v115 = *(v112 - 2);
            v116 = *(v112 - 1);
            v117 = *v112;
            v228.origin.x = v114;
            v228.origin.y = v115;
            v228.size.width = v116;
            v228.size.height = *v112;
            Width = CGRectGetWidth(v228);
            v229.origin.x = v114;
            v229.origin.y = v115;
            v229.size.width = v116;
            v229.size.height = v117;
            Height = CGRectGetHeight(v229);
            if (Height >= Width)
              Height = Width;
            v120 = v67 + Height * 0.5;
            if (v120 >= v189)
              v121 = v189;
            else
              v121 = v120;
            v230.origin.x = v114;
            v230.origin.y = v115;
            v230.size.width = v116;
            v230.size.height = v117;
            MinX = CGRectGetMinX(v230);
            v231.origin.x = v114;
            v231.origin.y = v115;
            v231.size.width = v116;
            v231.size.height = v117;
            v123 = CGRectGetMinY(v231);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v113 = sub_214224F1C(0, *((_QWORD *)v113 + 2) + 1, 1, v113);
            v125 = *((_QWORD *)v113 + 2);
            v124 = *((_QWORD *)v113 + 3);
            if (v125 >= v124 >> 1)
              v113 = sub_214224F1C((char *)(v124 > 1), v125 + 1, 1, v113);
            *((_QWORD *)v113 + 2) = v125 + 1;
            v126 = (double *)&v113[24 * v125];
            v126[4] = MinX - v67;
            v126[5] = v123 - v67;
            v126[6] = v121;
            v232.origin.x = v114;
            v232.origin.y = v115;
            v232.size.width = v116;
            v232.size.height = v117;
            MaxX = CGRectGetMaxX(v232);
            v233.origin.x = v114;
            v233.origin.y = v115;
            v233.size.width = v116;
            v233.size.height = v117;
            v128 = CGRectGetMinY(v233);
            v130 = *((_QWORD *)v113 + 2);
            v129 = *((_QWORD *)v113 + 3);
            if (v130 >= v129 >> 1)
              v113 = sub_214224F1C((char *)(v129 > 1), v130 + 1, 1, v113);
            *((_QWORD *)v113 + 2) = v130 + 1;
            v131 = (double *)&v113[24 * v130];
            v131[4] = v67 + MaxX;
            v131[5] = v128 - v67;
            v131[6] = v121;
            v234.origin.x = v114;
            v234.origin.y = v115;
            v234.size.width = v116;
            v234.size.height = v117;
            v132 = CGRectGetMinX(v234);
            v235.origin.x = v114;
            v235.origin.y = v115;
            v235.size.width = v116;
            v235.size.height = v117;
            v133 = CGRectGetMaxY(v235);
            v135 = *((_QWORD *)v113 + 2);
            v134 = *((_QWORD *)v113 + 3);
            if (v135 >= v134 >> 1)
              v113 = sub_214224F1C((char *)(v134 > 1), v135 + 1, 1, v113);
            *((_QWORD *)v113 + 2) = v135 + 1;
            v136 = (double *)&v113[24 * v135];
            v136[4] = v132 - v67;
            v136[5] = v67 + v133;
            v136[6] = v121;
            v236.origin.x = v114;
            v236.origin.y = v115;
            v236.size.width = v116;
            v236.size.height = v117;
            v137 = CGRectGetMaxX(v236);
            v237.origin.x = v114;
            v237.origin.y = v115;
            v237.size.width = v116;
            v237.size.height = v117;
            v138 = CGRectGetMaxY(v237);
            v140 = *((_QWORD *)v113 + 2);
            v139 = *((_QWORD *)v113 + 3);
            if (v140 >= v139 >> 1)
              v113 = sub_214224F1C((char *)(v139 > 1), v140 + 1, 1, v113);
            *((_QWORD *)v113 + 2) = v140 + 1;
            v141 = (double *)&v113[24 * v140];
            v141[4] = v67 + v137;
            v141[5] = v67 + v138;
            v141[6] = v121;
            v112 += 4;
            --v111;
          }
          while (v111);
          swift_bridgeObjectRelease();
          v199 = v113;
        }
      }
      else
      {
        v69 = MEMORY[0x24BEE4AF8];
        v199 = (char *)MEMORY[0x24BEE4AF8];
      }
      v142 = (uint64_t)v179;
      v143 = (uint64_t)v172;
      v144 = sub_214350348(v69);
      swift_bridgeObjectRelease();
      v145 = sub_2143AEA88(v144, (uint64_t *)&v199, v142, v189);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_214424770();
      v146 = *(_QWORD *)(v145 + 16);
      if (v146)
      {
        v207 = 0x3FF0000000000000;
        v208 = 0;
        v209 = 0;
        v210 = 0x3FF0000000000000;
        v147 = v145 + 32;
        v211 = 0;
        v212 = 0;
        do
        {
          v148 = *(_OWORD *)v147;
          v149 = *(_OWORD *)(v147 + 16);
          v206 = *(_BYTE *)(v147 + 32);
          v205[0] = v148;
          v205[1] = v149;
          sub_2141FE3B0((uint64_t)v205, (uint64_t)v213);
          sub_2141FE404((uint64_t)v213, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
          sub_2144246A4();
          sub_2141FE404((uint64_t)v205, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
          v147 += 40;
          --v146;
        }
        while (v146);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_214424CC8();
      sub_214424CD4();
      sub_214423F0C();
      v192[3] = MEMORY[0x24BDEC7D0];
      v192[4] = MEMORY[0x24BDEC7B8];
      v150 = swift_allocObject();
      v192[0] = v150;
      v151 = v203;
      *(_OWORD *)(v150 + 16) = v202;
      *(_OWORD *)(v150 + 32) = v151;
      *(_QWORD *)(v150 + 48) = v204;
      v193 = 1;
      v152 = v194;
      v153 = v195;
      v155 = *(_QWORD *)&v196;
      v154 = v197;
      v189 = v196;
      *(_QWORD *)&v190 = v194;
      v188 = v197;
      v156 = v177;
      v157 = v143 + v177[6];
      LODWORD(v187) = v198;
      sub_2141FE4A4((uint64_t)v192, v157);
      v158 = type metadata accessor for SgShapeStyle();
      v159 = v143;
      v160 = v157 + *(int *)(v158 + 32);
      v161 = sub_214424C68();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v160, 1, 1, v161);
      *(_BYTE *)(v157 + 41) = 1;
      *(_OWORD *)(v157 + 48) = 0u;
      *(_OWORD *)(v157 + 64) = 0u;
      *(_QWORD *)(v157 + 80) = 0;
      *(_QWORD *)(v157 + 88) = 0x3FF0000000000000;
      v162 = v157 + *(int *)(v158 + 36);
      *(_QWORD *)v162 = 0;
      *(_WORD *)(v162 + 8) = 0;
      *(_QWORD *)v159 = 0;
      *(_QWORD *)(v159 + 8) = v152;
      *(_QWORD *)(v159 + 16) = v153;
      *(_QWORD *)(v159 + 24) = v155;
      *(_QWORD *)(v159 + 32) = v154;
      LOBYTE(v152) = LOBYTE(v187);
      *(_BYTE *)(v159 + 40) = LOBYTE(v187);
      *(_QWORD *)(v159 + v156[7]) = 0;
      *(_QWORD *)(v159 + v156[8]) = 0x3FF0000000000000;
      *(_BYTE *)(v159 + v156[9]) = 0;
      v163 = (int *)type metadata accessor for SgGroup(0);
      *(_QWORD *)&v191 = swift_allocBox();
      v165 = v164;
      sub_2141D8BF8(&qword_253F15D40);
      v166 = swift_allocObject();
      *(_OWORD *)(v166 + 16) = xmmword_2144271D0;
      v167 = swift_allocBox();
      sub_2141FDEA0(v159, v168, type metadata accessor for SgPath);
      *(_QWORD *)(v166 + 32) = v167 | 0x9000000000000000;
      *(_QWORD *)(v166 + 40) = v175;
      v169 = type metadata accessor for SgClipRect(0);
      v170 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 56))(v180, 1, 1, v169);
      sub_2141FE3EC(v190, v153, *(uint64_t *)&v189, v188, v152);
      swift_release();
      sub_2141DD370(v159, type metadata accessor for SgPath);
      sub_2141EEF3C(v194, v195, *(uint64_t *)&v196, v197, v198);
      *v165 = 0;
      v165[1] = v166;
      sub_2141ED100(v170, (uint64_t)v165 + v163[6]);
      *(_QWORD *)((char *)v165 + v163[7]) = 0x3FF0000000000000;
      *(_QWORD *)((char *)v165 + v163[8]) = 0;
      *(_QWORD *)((char *)v165 + v163[9]) = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v165 + v163[10]) = 0;
      *v182 = v191;
      sub_21420D6FC((uint64_t)v192);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v178 + 8))(v179, v181);
    }
    else
    {
      v31 = *((_OWORD *)v201 + 2);
      v190 = *((_OWORD *)v201 + 3);
      v191 = v31;
      swift_bridgeObjectRetain_n();
      v32 = v190;
      v33 = v191;
      v34 = 0;
      v35 = v30 - v29;
      v36 = 32 * v30 + 32;
      v37 = v28;
      v183 = v30 - v29;
      while (v30 + v34 < v29)
      {
        v190 = v32;
        v191 = v33;
        v39 = *(double *)&v28[v36 + 16];
        v38 = *(double *)&v28[v36 + 24];
        v41 = *(double *)&v28[v36];
        v40 = *(double *)&v28[v36 + 8];
        v214.origin.x = v41;
        v214.origin.y = v40;
        v214.size.width = v39;
        v214.size.height = v38;
        v42 = CGRectGetMinX(v214);
        v43 = v190;
        v44 = v191;
        v45 = *((double *)&v190 + 1);
        v46 = *((_QWORD *)&v191 + 1);
        v47 = *((_QWORD *)&v190 + 1);
        if (v42 - CGRectGetMaxX(*(CGRect *)&v44) < v189)
        {
          *(_QWORD *)&v215.size.width = v190;
          *(_QWORD *)&v215.origin.x = v191;
          v215.origin.y = *((CGFloat *)&v44 + 1);
          v215.size.height = v45;
          v48 = CGRectGetMaxX(v215);
          v216.origin.x = v41;
          v216.origin.y = v40;
          v216.size.width = v39;
          v216.size.height = v38;
          v49 = CGRectGetMinX(v216);
          if (v49 >= v48)
            v49 = v48;
          v188 = *(_QWORD *)&v49;
          *(_QWORD *)&v217.size.width = v190;
          *(_QWORD *)&v217.origin.x = v191;
          v217.origin.y = *((CGFloat *)&v44 + 1);
          v217.size.height = v45;
          v50 = CGRectGetMinY(v217);
          v218.origin.x = v41;
          v218.origin.y = v40;
          v218.size.width = v39;
          v218.size.height = v38;
          v51 = CGRectGetMinY(v218);
          if (v51 >= v50)
            v51 = v50;
          v187 = v51;
          *(_QWORD *)&v219.size.width = v190;
          *(_QWORD *)&v219.origin.x = v191;
          v219.origin.y = *((CGFloat *)&v44 + 1);
          v219.size.height = v45;
          v52 = CGRectGetMaxX(v219);
          v220.origin.x = v41;
          v220.origin.y = v40;
          v220.size.width = v39;
          v220.size.height = v38;
          v53 = CGRectGetMinX(v220);
          if (v52 > v53)
            v53 = v52;
          v186 = v53;
          *(_QWORD *)&v221.size.width = v190;
          *(_QWORD *)&v221.origin.x = v191;
          v221.origin.y = *((CGFloat *)&v44 + 1);
          v221.size.height = v45;
          v54 = CGRectGetMaxX(v221);
          v222.origin.x = v41;
          v222.origin.y = v40;
          v222.size.width = v39;
          v222.size.height = v38;
          v55 = CGRectGetMinX(v222);
          if (v55 >= v54)
            v55 = v54;
          v185 = v55;
          *(_QWORD *)&v223.size.width = v190;
          *(_QWORD *)&v223.origin.x = v191;
          v223.origin.y = *((CGFloat *)&v44 + 1);
          v223.size.height = v45;
          v56 = CGRectGetMaxY(v223);
          v224.origin.x = v41;
          v224.origin.y = v40;
          v224.size.width = v39;
          v224.size.height = v38;
          v57 = CGRectGetMaxY(v224);
          if (v56 <= v57)
            v56 = v57;
          *(_QWORD *)&v225.size.width = v190;
          *(_QWORD *)&v225.origin.x = v191;
          v225.origin.y = *((CGFloat *)&v44 + 1);
          v225.size.height = v45;
          v58 = CGRectGetMinY(v225);
          v226.origin.x = v41;
          v226.origin.y = v40;
          v226.size.width = v39;
          v226.size.height = v38;
          v59 = CGRectGetMinY(v226);
          if (v59 >= v58)
            v60 = v58;
          else
            v60 = v59;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v37 = sub_2142245B0(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
          v62 = *((_QWORD *)v37 + 2);
          v61 = *((_QWORD *)v37 + 3);
          if (v62 >= v61 >> 1)
            v37 = sub_2142245B0((char *)(v61 > 1), v62 + 1, 1, v37);
          v63 = v186 - v185;
          *((_QWORD *)v37 + 2) = v62 + 1;
          v64 = &v37[32 * v62];
          v65 = v187;
          *((_QWORD *)v64 + 4) = v188;
          *((double *)v64 + 5) = v65;
          *((double *)v64 + 6) = v63;
          *((double *)v64 + 7) = v56 - v60;
          v201 = v37;
          v35 = v183;
        }
        if (v34 + 1 == v29)
          goto LABEL_31;
        if ((unint64_t)(v34 + 1) >= *((_QWORD *)v28 + 2))
          goto LABEL_61;
        v66 = &v28[32 * v34];
        v33 = *((_OWORD *)v66 + 4);
        v32 = *((_OWORD *)v66 + 5);
        ++v34;
        v36 += 32;
        if (!(v35 + v34))
          goto LABEL_31;
      }
      __break(1u);
LABEL_61:
      __break(1u);
    }
  }
}

double sub_2143B044C(uint64_t *a1, double a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  double v13;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 16);
  if (v6)
  {
    v9 = qword_253F11F50;
    swift_bridgeObjectRetain();
    if (v9 != -1)
LABEL_15:
      swift_once();
    v10 = 0;
    v11 = (double *)(v5 + 48);
    while (1)
    {
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_15;
      }
      v13 = vabdd_f64(a3, *(v11 - 1));
      if (vabdd_f64(a2, *(v11 - 2)) < *(double *)&qword_253F1C988 && v13 < *(double *)&qword_253F1C988)
        break;
      v11 += 3;
      ++v10;
      if (v12 == v6)
        goto LABEL_12;
    }
    a4 = *v11;
LABEL_12:
    swift_bridgeObjectRelease();
  }
  return a4;
}

void sub_2143B051C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_2143AF75C(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void sub_2143B0528(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  CGFloat *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double v18;
  double v19;
  uint64_t v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  double *v87;
  double *v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  double v99;
  __int128 v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double *v111;
  CGFloat v112;
  CGFloat v113;
  CGFloat v114;
  CGFloat v115;
  double MidX;
  __int128 v117;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  CGRect *v130;
  char *v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;

  v2 = a1;
  v3 = a1[1];
  v4 = sub_214425730();
  v129 = v3;
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_140;
    if ((unint64_t)v3 >= 2)
    {
      v101 = *v2;
      v102 = (double *)(v101 + 32);
      v103 = -1;
      v104 = 1;
      do
      {
        v105 = (double *)(v101 + 32 * v104);
        v106 = *v105;
        v107 = *((_QWORD *)v105 + 1);
        v108 = *((_QWORD *)v105 + 2);
        v109 = *((_QWORD *)v105 + 3);
        v110 = v103;
        v111 = v102;
        do
        {
          v112 = *(v111 - 4);
          v113 = *(v111 - 3);
          v114 = *(v111 - 2);
          v115 = *(v111 - 1);
          MidX = CGRectGetMidX(*(CGRect *)&v106);
          v135.origin.x = v112;
          v135.origin.y = v113;
          v135.size.width = v114;
          v135.size.height = v115;
          if (MidX >= CGRectGetMidX(v135))
            break;
          if (!v101)
            goto LABEL_144;
          v106 = *v111;
          v107 = *((_QWORD *)v111 + 1);
          v108 = *((_QWORD *)v111 + 2);
          v109 = *((_QWORD *)v111 + 3);
          v117 = *((_OWORD *)v111 - 1);
          *(_OWORD *)v111 = *((_OWORD *)v111 - 2);
          *((_OWORD *)v111 + 1) = v117;
          *((_QWORD *)v111 - 3) = v107;
          *((_QWORD *)v111 - 2) = v108;
          *((_QWORD *)v111 - 1) = v109;
          *(v111 - 4) = v106;
          v111 -= 4;
        }
        while (!__CFADD__(v110++, 1));
        ++v104;
        v102 += 4;
        --v103;
      }
      while (v104 != v129);
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_139;
    v128 = v4;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      type metadata accessor for CGRect(0);
      v7 = sub_21442504C();
      *(_QWORD *)(v7 + 16) = v6;
      v127 = v7;
      v130 = (CGRect *)(v7 + 32);
LABEL_13:
      v9 = 0;
      v126 = v2;
      v10 = *v2;
      v131 = (char *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        v12 = v9++;
        if (v9 < v3)
        {
          v13 = (CGFloat *)(v10 + 32 * v12);
          v14 = *v13;
          v15 = v13[1];
          v16 = v13[2];
          v17 = v13[3];
          v18 = CGRectGetMidX(*(CGRect *)(v10 + 32 * v9));
          v132.origin.x = v14;
          v132.origin.y = v15;
          v132.size.width = v16;
          v132.size.height = v17;
          v19 = CGRectGetMidX(v132);
          v9 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v20 = v10 + 48 + 32 * v12;
            while (1)
            {
              v21 = *(double *)(v20 - 16);
              v22 = *(double *)(v20 - 8);
              v23 = *(double *)v20;
              v24 = *(double *)(v20 + 8);
              v25 = CGRectGetMidX(*(CGRect *)(v20 + 16));
              v133.origin.x = v21;
              v133.origin.y = v22;
              v133.size.width = v23;
              v133.size.height = v24;
              if (v18 < v19 == v25 >= CGRectGetMidX(v133))
                break;
              ++v9;
              v20 += 32;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v18 < v19)
          {
            if (v9 < v12)
              goto LABEL_141;
            if (v12 < v9)
            {
              v26 = 32 * v9;
              v27 = 32 * v12;
              v28 = v9;
              v29 = v12;
              do
              {
                if (v29 != --v28)
                {
                  if (!v10)
                    goto LABEL_147;
                  v30 = (_OWORD *)(v10 + v27);
                  v31 = v10 + v26;
                  v32 = *(_OWORD *)(v10 + v27);
                  v33 = *(_OWORD *)(v10 + v27 + 16);
                  v34 = *(_OWORD *)(v10 + v26 - 16);
                  *v30 = *(_OWORD *)(v10 + v26 - 32);
                  v30[1] = v34;
                  *(_OWORD *)(v31 - 32) = v32;
                  *(_OWORD *)(v31 - 16) = v33;
                }
                ++v29;
                v26 -= 32;
                v27 += 32;
              }
              while (v29 < v28);
            }
          }
        }
        if (v9 >= v3)
          goto LABEL_39;
        if (__OFSUB__(v9, v12))
          goto LABEL_138;
        if (v9 - v12 >= v128)
          goto LABEL_39;
        if (__OFADD__(v12, v128))
          goto LABEL_142;
        if (v12 + v128 >= v3)
          v35 = v3;
        else
          v35 = v12 + v128;
        if (v35 < v12)
        {
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          return;
        }
        if (v9 == v35)
        {
LABEL_39:
          v36 = v131;
          if (v9 < v12)
            goto LABEL_133;
        }
        else
        {
          v87 = (double *)(v10 + 32 * v9);
          v36 = v131;
          do
          {
            v88 = (double *)(v10 + 32 * v9);
            v89 = *v88;
            v90 = *((_QWORD *)v88 + 1);
            v91 = *((_QWORD *)v88 + 2);
            v92 = *((_QWORD *)v88 + 3);
            v93 = v12;
            v94 = v87;
            do
            {
              v95 = *(v94 - 4);
              v96 = *(v94 - 3);
              v97 = *(v94 - 2);
              v98 = *(v94 - 1);
              v99 = CGRectGetMidX(*(CGRect *)&v89);
              v134.origin.x = v95;
              v134.origin.y = v96;
              v134.size.width = v97;
              v134.size.height = v98;
              if (v99 >= CGRectGetMidX(v134))
                break;
              if (!v10)
                goto LABEL_145;
              v89 = *v94;
              v90 = *((_QWORD *)v94 + 1);
              v91 = *((_QWORD *)v94 + 2);
              v92 = *((_QWORD *)v94 + 3);
              v100 = *((_OWORD *)v94 - 1);
              *(_OWORD *)v94 = *((_OWORD *)v94 - 2);
              *((_OWORD *)v94 + 1) = v100;
              *((_QWORD *)v94 - 3) = v90;
              *((_QWORD *)v94 - 2) = v91;
              *((_QWORD *)v94 - 1) = v92;
              *(v94 - 4) = v89;
              v94 -= 4;
              ++v93;
            }
            while (v9 != v93);
            ++v9;
            v87 += 4;
          }
          while (v9 != v35);
          v9 = v35;
          if (v35 < v12)
            goto LABEL_133;
        }
        v37 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = sub_214224E24(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
        v39 = *((_QWORD *)v36 + 2);
        v38 = *((_QWORD *)v36 + 3);
        v11 = v39 + 1;
        if (v39 >= v38 >> 1)
          v36 = sub_214224E24((char *)(v38 > 1), v39 + 1, 1, v36);
        *((_QWORD *)v36 + 2) = v11;
        v40 = v36 + 32;
        v41 = &v36[16 * v39 + 32];
        *(_QWORD *)v41 = v37;
        *((_QWORD *)v41 + 1) = v9;
        v131 = v36;
        if (v39)
        {
          while (1)
          {
            v42 = v11 - 1;
            if (v11 >= 4)
            {
              v47 = &v40[16 * v11];
              v48 = *((_QWORD *)v47 - 8);
              v49 = *((_QWORD *)v47 - 7);
              v53 = __OFSUB__(v49, v48);
              v50 = v49 - v48;
              if (v53)
                goto LABEL_122;
              v52 = *((_QWORD *)v47 - 6);
              v51 = *((_QWORD *)v47 - 5);
              v53 = __OFSUB__(v51, v52);
              v45 = v51 - v52;
              v46 = v53;
              if (v53)
                goto LABEL_123;
              v54 = v11 - 2;
              v55 = &v40[16 * v11 - 32];
              v57 = *(_QWORD *)v55;
              v56 = *((_QWORD *)v55 + 1);
              v53 = __OFSUB__(v56, v57);
              v58 = v56 - v57;
              if (v53)
                goto LABEL_124;
              v53 = __OFADD__(v45, v58);
              v59 = v45 + v58;
              if (v53)
                goto LABEL_126;
              if (v59 >= v50)
              {
                v77 = &v40[16 * v42];
                v79 = *(_QWORD *)v77;
                v78 = *((_QWORD *)v77 + 1);
                v53 = __OFSUB__(v78, v79);
                v80 = v78 - v79;
                if (v53)
                  goto LABEL_132;
                v70 = v45 < v80;
                goto LABEL_76;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v71 = *((_QWORD *)v36 + 4);
                v72 = *((_QWORD *)v36 + 5);
                v53 = __OFSUB__(v72, v71);
                v64 = v72 - v71;
                v65 = v53;
                goto LABEL_70;
              }
              v44 = *((_QWORD *)v36 + 4);
              v43 = *((_QWORD *)v36 + 5);
              v53 = __OFSUB__(v43, v44);
              v45 = v43 - v44;
              v46 = v53;
            }
            if ((v46 & 1) != 0)
              goto LABEL_125;
            v54 = v11 - 2;
            v60 = &v40[16 * v11 - 32];
            v62 = *(_QWORD *)v60;
            v61 = *((_QWORD *)v60 + 1);
            v63 = __OFSUB__(v61, v62);
            v64 = v61 - v62;
            v65 = v63;
            if (v63)
              goto LABEL_127;
            v66 = &v40[16 * v42];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v53 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v53)
              goto LABEL_129;
            if (__OFADD__(v64, v69))
              goto LABEL_131;
            if (v64 + v69 >= v45)
            {
              v70 = v45 < v69;
LABEL_76:
              if (v70)
                v42 = v54;
              goto LABEL_78;
            }
LABEL_70:
            if ((v65 & 1) != 0)
              goto LABEL_128;
            v73 = &v40[16 * v42];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v53 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v53)
              goto LABEL_130;
            if (v76 < v64)
              goto LABEL_15;
LABEL_78:
            v81 = v42 - 1;
            if (v42 - 1 >= v11)
            {
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
              goto LABEL_143;
            }
            if (!v10)
              goto LABEL_146;
            v82 = &v40[16 * v81];
            v83 = *(_QWORD *)v82;
            v84 = &v40[16 * v42];
            v85 = *((_QWORD *)v84 + 1);
            sub_2143B0C8C((CGRect *)(v10 + 32 * *(_QWORD *)v82), (CGRect *)(v10 + 32 * *(_QWORD *)v84), v10 + 32 * v85, v130);
            if (v1)
              goto LABEL_116;
            if (v85 < v83)
              goto LABEL_119;
            if (v42 > *((_QWORD *)v131 + 2))
              goto LABEL_120;
            *(_QWORD *)v82 = v83;
            *(_QWORD *)&v40[16 * v81 + 8] = v85;
            v86 = *((_QWORD *)v131 + 2);
            if (v42 >= v86)
              goto LABEL_121;
            v36 = v131;
            v11 = v86 - 1;
            memmove(&v40[16 * v42], v84 + 16, 16 * (v86 - 1 - v42));
            *((_QWORD *)v131 + 2) = v86 - 1;
            if (v86 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v129;
        if (v9 >= v129)
        {
          v8 = v127;
          v119 = v131;
          v2 = v126;
          goto LABEL_105;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v130 = (CGRect *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v127 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v119 = (char *)MEMORY[0x24BEE4AF8];
LABEL_105:
    v127 = v8;
    if (v11 >= 2)
    {
      v120 = *v2;
      do
      {
        v121 = v11 - 2;
        if (v11 < 2)
          goto LABEL_134;
        if (!v120)
          goto LABEL_148;
        v122 = *(_QWORD *)&v119[16 * v121 + 32];
        v123 = *(_QWORD *)&v119[16 * v11 + 24];
        sub_2143B0C8C((CGRect *)(v120 + 32 * v122), (CGRect *)(v120 + 32 * *(_QWORD *)&v119[16 * v11 + 16]), v120 + 32 * v123, v130);
        if (v1)
          break;
        if (v123 < v122)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v119 = sub_21435010C((uint64_t)v119);
        if (v121 >= *((_QWORD *)v119 + 2))
          goto LABEL_136;
        v124 = &v119[16 * v121 + 32];
        *(_QWORD *)v124 = v122;
        *((_QWORD *)v124 + 1) = v123;
        v125 = *((_QWORD *)v119 + 2);
        if (v11 > v125)
          goto LABEL_137;
        memmove(&v119[16 * v11 + 16], &v119[16 * v11 + 32], 16 * (v125 - v11));
        *((_QWORD *)v119 + 2) = v125 - 1;
        v11 = v125 - 1;
      }
      while (v125 > 2);
    }
LABEL_116:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v127 + 16) = 0;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2143B0C8C(CGRect *__dst, CGRect *__src, unint64_t a3, CGRect *a4)
{
  CGRect *v4;
  CGRect *v6;
  CGRect *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  CGPoint *v20;
  BOOL v21;
  CGSize v22;
  CGRect *v23;
  CGRect *v24;
  CGPoint *p_origin;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  BOOL v31;
  CGSize v32;
  CGRect v34;
  CGRect v35;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 31;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[v13] <= a4)
      memmove(a4, __src, 32 * v13);
    v14 = (char *)&v4[v13];
    if (v7 >= v6 || v11 < 32)
      goto LABEL_40;
    v23 = (CGRect *)(a3 - 32);
    while (1)
    {
      v24 = v23 + 1;
      x = v6[-1].origin.x;
      y = v6[-1].origin.y;
      p_origin = &v6[-1].origin;
      width = v6[-1].size.width;
      height = v6[-1].size.height;
      MidX = CGRectGetMidX(*((CGRect *)v14 - 1));
      v35.origin.x = x;
      v35.origin.y = y;
      v35.size.width = width;
      v35.size.height = height;
      if (MidX >= CGRectGetMidX(v35))
      {
        p_origin = (CGPoint *)(v14 - 32);
        if (v24 != (CGRect *)v14)
        {
          v14 -= 32;
          goto LABEL_37;
        }
        v31 = v23 >= (CGRect *)v14;
        v14 -= 32;
        if (v31)
          goto LABEL_37;
      }
      else
      {
        if (v24 != v6)
        {
          --v6;
LABEL_37:
          v32 = (CGSize)p_origin[1];
          v23->origin = *p_origin;
          v23->size = v32;
          goto LABEL_38;
        }
        v31 = v23 >= v6--;
        if (v31)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        --v23;
        if (v14 > (char *)v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  if (a4 != __dst || &__dst[v10] <= a4)
    memmove(a4, __dst, 32 * v10);
  v14 = (char *)&v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      v15 = v4->origin.x;
      v16 = v4->origin.y;
      v17 = v4->size.width;
      v18 = v4->size.height;
      v19 = CGRectGetMidX(*v6);
      v34.origin.x = v15;
      v34.origin.y = v16;
      v34.size.width = v17;
      v34.size.height = v18;
      if (v19 >= CGRectGetMidX(v34))
        break;
      v20 = &v6->origin;
      v21 = v7 == v6++;
      if (!v21)
        goto LABEL_16;
LABEL_17:
      ++v7;
      if (v4 >= (CGRect *)v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v20 = &v4->origin;
    v21 = v7 == v4++;
    if (v21)
      goto LABEL_17;
LABEL_16:
    v22 = (CGSize)v20[1];
    v7->origin = *v20;
    v7->size = v22;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_40:
  if (v6 != v4
    || v6 >= (CGRect *)((char *)v4 + ((v14 - (char *)v4 + (v14 - (char *)v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0)))
  {
    memmove(v6, v4, 32 * ((v14 - (char *)v4) / 32));
  }
  return 1;
}

uint64_t sub_2143B0EF8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2143B0F1C()
{
  return sub_2141D9054(&qword_254D6D438, qword_254D6D440, MEMORY[0x24BEE40F0]);
}

uint64_t sub_2143B0F48()
{
  return sub_2141D9054(&qword_254D6D470, qword_254D6D478, MEMORY[0x24BEE4120]);
}

uint64_t sub_2143B0F74()
{
  return sub_2141D9054(&qword_254D6D4A8, qword_254D6D4B0, MEMORY[0x24BEE4180]);
}

uint64_t sub_2143B0FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

float64_t sub_2143B1024(double a1, float64x2_t a2, float64x2_t a3)
{
  if ((vmovn_s64(vceqq_f64(a2, a3)).u8[0] & 1) == 0)
  {
    a2 = vsubq_f64(a2, a3);
    *(_QWORD *)&a2.f64[0] = *(_OWORD *)&vaddq_f64(vmulq_n_f64(a2, (a1 - a3.f64[0]) / a2.f64[0]), a3);
  }
  return a2.f64[0];
}

double sub_2143B1050(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_2143B105C(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

double sub_2143B1068@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16);
  *a2 = result;
  return result;
}

double sub_2143B1074(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 16) = *a1;
  return result;
}

double sub_2143B1080@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 24);
  *a2 = result;
  return result;
}

double sub_2143B108C(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 24) = *a1;
  return result;
}

uint64_t sub_2143B1098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214425490();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t sub_2143B1110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, __n128);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;

  v7 = *(_QWORD **)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v27 - v14;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - v18;
  v20 = (void (*)(char *, __n128))v7[2];
  v20(v15, v17);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v12, a2, a3);
  sub_214425490();
  result = sub_214424F44();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v22 = result;
    v28 = v19;
    v29 = a4;
    if (result)
    {
      v23 = 0;
      do
      {
        sub_21442549C();
        sub_21442549C();
        v32 = v31 + v30;
        sub_2144254A8();
        ++v23;
      }
      while (v22 != v23);
    }
    v24 = (void (*)(char *, uint64_t))v7[1];
    v24(v12, a3);
    v24(v15, a3);
    v25 = (void (*)(char *, char *, uint64_t))v7[4];
    v26 = v28;
    v25(v28, v9, a3);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v29, v26, a3);
  }
  return result;
}

uint64_t sub_2143B12E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, __n128);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;

  v7 = *(_QWORD **)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v27 - v14;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - v18;
  v20 = (void (*)(char *, __n128))v7[2];
  v20(v15, v17);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v12, a2, a3);
  sub_214425490();
  result = sub_214424F44();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v22 = result;
    v28 = v19;
    v29 = a4;
    if (result)
    {
      v23 = 0;
      do
      {
        sub_21442549C();
        sub_21442549C();
        v32 = v31 - v30;
        sub_2144254A8();
        ++v23;
      }
      while (v22 != v23);
    }
    v24 = (void (*)(char *, uint64_t))v7[1];
    v24(v12, a3);
    v24(v15, a3);
    v25 = (void (*)(char *, char *, uint64_t))v7[4];
    v26 = v28;
    v25(v28, v9, a3);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v29, v26, a3);
  }
  return result;
}

uint64_t sub_2143B14C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  unint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  double v27;
  double v28;
  double v29;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v25 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v25 - v11;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v25 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v17(v12, v1, v3, v14);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v9, v1, v3);
  v18 = *(_QWORD *)(a1 + 24);
  sub_214425490();
  result = sub_214424F44();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v20 = result;
    v25[1] = v18;
    v26 = v4;
    if (result)
    {
      v21 = 0;
      do
      {
        sub_21442549C();
        sub_21442549C();
        v29 = v28 * v27;
        sub_2144254A8();
        ++v21;
      }
      while (v20 != v21);
    }
    v22 = v26;
    v23 = *(void (**)(char *, uint64_t))(v26 + 8);
    v23(v9, v3);
    v23(v12, v3);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v16, v6, v3);
    v24 = sub_2143B1F58();
    sub_2143B16B4(v3, v24, (uint64_t)&v29);
    return ((uint64_t (*)(char *, uint64_t))v23)(v16, v3);
  }
  return result;
}

uint64_t sub_2143B16B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v17 - v8;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) + 8);
  sub_214425394();
  v17[1] = a3;
  sub_214424FBC();
  v11 = *(void (**)(char *, uint64_t))(v7 + 8);
  v11(v9, AssociatedTypeWitness);
  result = sub_214424F44();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v13 = result;
    v14 = a1;
    v17[3] = v10;
    if (result)
    {
      result = 0;
      do
      {
        v15 = result + 1;
        v16 = v14;
        sub_21442549C();
        sub_214425658();
        v11(v9, AssociatedTypeWitness);
        v14 = v16;
        result = v15;
      }
      while (v13 != v15);
    }
  }
  return result;
}

uint64_t sub_2143B1828(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, __n128);
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;

  v4 = *(_QWORD *)(a1 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v26 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - v11;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v26 - v15;
  v28 = v17;
  v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 32);
  v18((char *)&v26 - v15, v2, v4, v14);
  sub_214425490();
  result = sub_214424F44();
  if (result < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v20 = result;
  v27 = v2;
  if (result)
  {
    v21 = 0;
    do
    {
      v22 = v21 + 1;
      v31 = a2;
      sub_2144254A8();
      v21 = v22;
    }
    while (v20 != v22);
  }
  ((void (*)(char *, char *, uint64_t))v18)(v12, v9, v4);
  sub_214425490();
  result = sub_214424F44();
  if (result < 0)
    goto LABEL_11;
  v23 = result;
  if (result)
  {
    v24 = 0;
    do
    {
      sub_21442549C();
      sub_21442549C();
      v31 = v30 * v29;
      sub_2144254A8();
      ++v24;
    }
    while (v23 != v24);
  }
  v25 = *(void (**)(char *, uint64_t))(v28 + 8);
  v25(v12, v4);
  v25(v16, v4);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(v27, v6, v4);
}

uint64_t sub_2143B1A60()
{
  return sub_214424ED8() & 1;
}

uint64_t sub_2143B1A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2143B1098(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_2143B1AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143B1110(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t sub_2143B1AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2143B0FA0(a1, a2, a3);
}

uint64_t sub_2143B1AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143B12E8(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t sub_2143B1AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2143B0FA0(a1, a2, a3);
}

uint64_t sub_2143B1AF0()
{
  return sub_2143B1A60();
}

double sub_2143B1AFC()
{
  double v1;

  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

double sub_2143B1C1C@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_2143B1C28(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_2143B1C34@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_2143B1C40(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

double sub_2143B1C4C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16);
  *a2 = result;
  return result;
}

double sub_2143B1C58(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 16) = *a1;
  return result;
}

double sub_2143B1C64@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 24);
  *a2 = result;
  return result;
}

double sub_2143B1C70(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 24) = *a1;
  return result;
}

uint64_t sub_2143B1C7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143B1D2C + 4 * byte_214430A00[(v7 - 1)]))();
}

void sub_2143B1D7C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for CoordinateVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoordinateVector);
}

void sub_2143B1F38()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143B1F48()
{
  JUMPOUT(0x2199CD934);
}

unint64_t sub_2143B1F58()
{
  unint64_t result;

  result = qword_254D6D558;
  if (!qword_254D6D558)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE13E0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_254D6D558);
  }
  return result;
}

uint64_t ForEach<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_214424B54();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t ForEach<>.init(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_214424B54();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t static ForEach<>._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v54 = a8;
  v50 = a7;
  v42 = a5;
  v41 = a4;
  v51 = a1;
  v55 = a9;
  v45 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v40 - v15;
  v47 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v49 = sub_214425694();
  v53 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v21 = (char *)&v40 - v20;
  v46 = *a2;
  v43 = *((_QWORD *)a2 + 1);
  v22 = v43 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v48 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v23 = *(int *)(v48 + 64);
  v24 = *(_QWORD *)(v22 + v23);
  *(_QWORD *)(v22 + v23) = 0;
  v66 = a3;
  v67 = a4;
  v68 = a5;
  v69 = a6;
  v25 = v50;
  v70 = v50;
  sub_214424B9C();
  v26 = v51;
  sub_214424B60();
  sub_2144251D8();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v19, a3);
  sub_214424F5C();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, AssociatedTypeWitness);
  v27 = MEMORY[0x24BEE4AF8];
  v65 = MEMORY[0x24BEE4AF8];
  v56 = a3;
  v57 = v41;
  v58 = v42;
  v59 = a6;
  v60 = v25;
  v61 = v54;
  v62 = v46;
  v28 = v43;
  v63 = v43;
  v64 = v26;
  sub_2141D8BF8(&qword_253F132E0);
  v29 = v49;
  MEMORY[0x2199CD934](MEMORY[0x24BEE2FC0], v49);
  sub_214424F8C();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v21, v29);
  v30 = v66;
  *(_QWORD *)(v22 + *(int *)(v48 + 64)) = v24;
  v31 = (int *)type metadata accessor for SgGroup(0);
  v32 = swift_allocBox();
  v34 = v33;
  v35 = *(_QWORD *)(*(_QWORD *)(v28 + 16) + 24);
  v36 = sub_214251F48(v30);
  swift_bridgeObjectRelease();
  v37 = (char *)v34 + v31[6];
  v38 = type metadata accessor for SgClipRect(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  *v34 = v35;
  v34[1] = v36;
  *(_QWORD *)((char *)v34 + v31[7]) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v34 + v31[8]) = v24;
  *(_QWORD *)((char *)v34 + v31[9]) = v27;
  *((_BYTE *)v34 + v31[10]) = 0;
  *v55 = v32;
  return result;
}

void ForEach<>.body.getter()
{
  sub_214425628();
  __break(1u);
}

uint64_t static ForEach<>._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t AssociatedTypeWitness;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t TupleTypeMetadata2;
  _QWORD v86[5];

  v69 = a8;
  v76 = a6;
  v77 = a7;
  v74 = a1;
  v75 = a5;
  v81 = a2;
  v66 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v65 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v61 = (char *)&v52 - v14;
  v60 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v59 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v83 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v82 = (char *)&v52 - v18;
  v84 = v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v20 = sub_214425388();
  v72 = *(_QWORD *)(v20 - 8);
  v73 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v71 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v52 - v23;
  v25 = swift_getAssociatedTypeWitness();
  v80 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v52 - v26;
  v78 = *(char **)(a3 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v52 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  v55 = sub_214425694();
  MEMORY[0x24BDAC7A8](v55);
  v79 = sub_214425688();
  v53 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v32 = (char *)&v52 - v31;
  v70 = *v81;
  v86[0] = a3;
  v86[1] = a4;
  v68 = a4;
  v86[2] = v75;
  v86[3] = v76;
  v86[4] = v77;
  v57 = sub_214424B9C();
  sub_214424B60();
  v64 = v13;
  sub_2144251D8();
  v33 = (void (*)(char *, uint64_t))*((_QWORD *)v78 + 1);
  v58 = v30;
  v67 = a3;
  v56 = v33;
  v33(v30, a3);
  sub_214424F5C();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v27, v25);
  v78 = v32;
  sub_214425670();
  v55 = v70;
  v54 = MEMORY[0x24BEE4AE0] + 8;
  while (1)
  {
    v34 = v71;
    sub_21442567C();
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v24, v34, v73);
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v24, 1) == 1)
      break;
    v81 = *(__int128 **)v24;
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, &v24[*(int *)(TupleTypeMetadata2 + 48)], v84);
    v80 = sub_214424B78();
    v35 = v58;
    sub_214424B60();
    v36 = v67;
    v37 = (void (*)(_QWORD *, _QWORD))sub_2144252A4();
    v38 = v24;
    v39 = v62;
    v40 = v61;
    v41 = AssociatedTypeWitness;
    (*(void (**)(char *))(v62 + 16))(v61);
    v37(v86, 0);
    v56(v35, v36);
    v42 = v59;
    ((void (*)(char *))v80)(v40);
    swift_release();
    v43 = *(void (**)(char *, uint64_t))(v39 + 8);
    v24 = v38;
    v43(v40, v41);
    swift_retain();
    v44 = (uint64_t)v65;
    v45 = v82;
    v46 = sub_214424B6C();
    MEMORY[0x24BDAC7A8](v46);
    *(&v52 - 10) = v36;
    v47 = v68;
    v49 = v75;
    v48 = v76;
    *(&v52 - 9) = v68;
    *(&v52 - 8) = v49;
    v50 = v77;
    *(&v52 - 7) = v48;
    *(&v52 - 6) = v50;
    *(&v52 - 5) = v69;
    *(&v52 - 4) = (uint64_t)v42;
    *(_OWORD *)(&v52 - 3) = v70;
    sub_214200E80(v44);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v44, v47);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v45, v84);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v42, v49);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v78, v79);
}

uint64_t sub_2143B2BC0(char **a1, char *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char **v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v43 = a8;
  v46 = a5;
  v45 = a4;
  v39 = a1;
  v48 = a11;
  v44 = a10;
  v47 = a3 & 1;
  v50 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v42 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v38 - v20;
  v23 = *(int *)(v22 + 48);
  v25 = v24 + v23;
  v40 = *(_QWORD *)a2;
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v17 + 16))(v24 + v23, &a2[v23], AssociatedTypeWitness, v19);
  v51 = v17;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  v49 = AssociatedTypeWitness;
  v26(v21, v25, AssociatedTypeWitness);
  v27 = v45;
  v41 = *(_QWORD *)(v45 + 16);
  v62 = a6;
  v63 = a7;
  v28 = v43;
  v64 = v43;
  v65 = a9;
  v29 = v44;
  v66 = v44;
  sub_214424B9C();
  v30 = (uint64_t)v42;
  v31 = v46;
  sub_214424B6C();
  v52 = a6;
  v53 = a7;
  v54 = v28;
  v55 = a9;
  v56 = v29;
  v57 = v48;
  v58 = v31;
  v59 = v21;
  v60 = v47;
  v61 = v27;
  sub_214200E80(v30);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v30, a7);
  v32 = v62;
  if (v62 != 0xE000000000000000)
  {
    v33 = v39;
    v34 = *v39;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v34 = sub_214224250(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
    v36 = *((_QWORD *)v34 + 2);
    v35 = *((_QWORD *)v34 + 3);
    if (v36 >= v35 >> 1)
      v34 = sub_214224250((char *)(v35 > 1), v36 + 1, 1, v34);
    *((_QWORD *)v34 + 2) = v36 + 1;
    *(_QWORD *)&v34[8 * v36 + 32] = v32;
    swift_release();
    *v33 = v34;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v21, v49);
}

uint64_t sub_2143B2EE8@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *);
  void (*v24)(uint64_t *, _QWORD);
  uint64_t v25;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v34 = a3;
  v35 = a8;
  v33 = a10;
  v32 = a2 & 1;
  v29 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
  v30 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v27 - v15;
  v27 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a4;
  v37 = a5;
  v38 = a6;
  v39 = a7;
  v40 = a9;
  sub_214424B9C();
  v23 = (void (*)(char *))sub_214424B78();
  sub_214424B60();
  v24 = (void (*)(uint64_t *, _QWORD))sub_2144252A4();
  v25 = AssociatedTypeWitness;
  (*(void (**)(char *))(v14 + 16))(v16);
  v24(&v36, 0);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, a4);
  v23(v16);
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v25);
  LOBYTE(v36) = v32;
  v37 = v34;
  (*(void (**)(char *, uint64_t *, uint64_t))(v33 + 40))(v22, &v36, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v22, a6);
}

void sub_2143B30F0()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_2143B3138(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t a4)
{
  return static ForEach<>._layoutChartContent(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(_QWORD *)(a4 - 8));
}

uint64_t sub_2143B3150@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static ForEach<>._renderChartContent(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(_QWORD *)(a4 - 8), a5);
}

uint64_t sub_2143B3168()
{
  swift_getAssociatedTypeWitness();
  return sub_214424FB0();
}

uint64_t sub_2143B31D4()
{
  return 48;
}

__n128 sub_2143B31E0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2143B31F4(char **a1, char *a2)
{
  uint64_t v2;

  return sub_2143B2BC0(a1, a2, *(_BYTE *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_2143B3230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v4 = *(_OWORD *)(v0 + 72);
  return (*(uint64_t (**)(uint64_t, __int128 *))(v2 + 32))(v1, &v4);
}

uint64_t sub_2143B3270(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&unk_214430D48, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143B32B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <> ForEach<A, B, C>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143B32F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2143B2EE8(*(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

ValueMetadata *_s10CatmullRomVMa()
{
  return &_s10CatmullRomVN;
}

uint64_t sub_2143B3338(double a1, double a2)
{
  double *v2;
  double v5;
  double v6;
  long double v7;
  double v8;
  double v9;

  v5 = v2[6];
  v6 = v2[7];
  v7 = v2[1] * 0.5;
  pow((v2[4] - v5) * (v2[4] - v5) + (v2[5] - v6) * (v2[5] - v6), v7);
  v8 = v2[8];
  v9 = v2[9];
  pow((v5 - v8) * (v5 - v8) + (v6 - v9) * (v6 - v9), v7);
  pow((v8 - a1) * (v8 - a1) + (v9 - a2) * (v9 - a2), v7);
  return sub_214425328();
}

void sub_2143B3524()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 >= 2)
  {
    if (v2 == 2)
      sub_21442531C();
    else
      sub_2143B35BC(*(double *)(v0 + 48), *(double *)(v0 + 56));
  }
  v3 = *(_QWORD *)(v0 + 24);
  if (v3 == 1 || !v3 && *(_QWORD *)(v1 + 16) == 1)
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
  if (__OFSUB__(0, v3))
    __break(1u);
  else
    *(_QWORD *)(v1 + 24) = -v3;
}

__n128 sub_2143B35BC(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v5 = *(_QWORD *)(v2 + 16);
  if (v5 == 1)
  {
    *(_QWORD *)(v2 + 16) = 2;
    *(double *)(v2 + 48) = a1;
    *(double *)(v2 + 56) = a2;
  }
  else if (v5)
  {
    *(_QWORD *)(v2 + 16) = 3;
    sub_2143B3338(a1, a2);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = 1;
    if (*(_QWORD *)(v2 + 24) == 1)
      sub_21442531C();
    else
      sub_214425310();
  }
  result = *(__n128 *)(v2 + 48);
  v7 = *(_OWORD *)(v2 + 64);
  *(__n128 *)(v2 + 32) = result;
  *(_OWORD *)(v2 + 48) = v7;
  *(double *)(v2 + 64) = a1;
  *(double *)(v2 + 72) = a2;
  return result;
}

uint64_t sub_2143B369C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  v5 = a1;
  result = sub_214423DA4();
  v4 = *(_QWORD *)(result - 8);
  if (*(_QWORD *)(v4 + 64) == 4)
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(v4 + 16))(a2, &v5, result);
  __break(1u);
  return result;
}

uint64_t sub_2143B36F4(unsigned int *a1)
{
  uint64_t result;

  result = sub_214423DA4();
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == 4)
    return *a1;
  __break(1u);
  return result;
}

void sub_2143B3730()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2143B3740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x2199CD934](&unk_214430F4C, a1, &v4);
}

void sub_2143B3774()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143B3784()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2143B3794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;

  v24 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_214425388();
  v4 = sub_214425388();
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - v5;
  v7 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = AssociatedTypeWitness;
  sub_214425394();
  v15 = v7;
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v16(v6, 1, v3) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v24, 1, 1, v2);
  }
  else
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    while (1)
    {
      v17(v13, v6, v3);
      v17(v10, v13, v3);
      v18 = *(_QWORD *)(v2 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v2) != 1)
        break;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v3);
      sub_214425394();
      if (v16(v6, 1, v3) == 1)
        goto LABEL_5;
    }
    v20 = v24;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v24, v10, v2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v2);
  }
}

uint64_t sub_2143B39C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, v2, v4, v10);
  sub_214424F38();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, AssociatedTypeWitness);
}

uint64_t sub_2143B3ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_2143B39C0(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_2143B3AEC()
{
  return 0;
}

uint64_t sub_2143B3AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = sub_2143B5068(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_2143B3B44@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v7 - v4;
  sub_2144251FC();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
}

uint64_t sub_2143B3BF4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void (*v8)(_BYTE *, _QWORD);
  uint64_t v9;
  uint64_t result;
  _BYTE v11[32];

  v3 = *(_QWORD *)(a1 + 24);
  v4 = sub_214425388();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v11[-v6];
  v8 = (void (*)(_BYTE *, _QWORD))sub_2144252A4();
  (*(void (**)(_BYTE *))(v5 + 16))(v7);
  v8(v11, 0);
  v9 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(a2, v7, v3);
  __break(1u);
  return result;
}

uint64_t sub_2143B3CE0@<X0>(char **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char **, uint64_t, __n128);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, _QWORD *);
  uint64_t result;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t AssociatedConformanceWitness;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v66 = a3;
  v5 = a2[4];
  v6 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v65 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v63 = (char *)&v52 - v8;
  v9 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = sub_214425610();
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v58 = (char *)&v52 - v11;
  v12 = sub_214425388();
  v53 = *(_QWORD *)(v12 - 8);
  v54 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v61 = (char *)&v52 - v13;
  v69 = v9;
  v62 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v55 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v52 = (char *)&v52 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v71 = (char *)&v52 - v19;
  v20 = *(a2 - 1);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = a2[3];
  v24 = type metadata accessor for CompactedCollection.Index(0, v6, v57, v5);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v52 - v30;
  v32 = *(void (**)(char *, char **, uint64_t, __n128))(v25 + 16);
  v68 = a1;
  v32((char *)&v52 - v30, a1, v24, v29);
  (*(void (**)(char *, uint64_t, _QWORD *))(v20 + 16))(v23, v70, a2);
  sub_2143B3B44((uint64_t)v27);
  v33 = (char *)v6;
  v34 = v5;
  LOBYTE(v5) = sub_2143B4DB8();
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v27, v24);
  v36 = *(void (**)(char *, _QWORD *))(v20 + 8);
  v56 = a2;
  v36(v23, a2);
  result = ((uint64_t (*)(char *, uint64_t))v35)(v31, v24);
  if ((v5 & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v38 = (char *)v34;
  sub_2144251B4();
  v39 = v69;
  result = sub_214424ED8();
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v40 = v62;
  v41 = v58;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v58, v71, v39);
  v42 = v60;
  MEMORY[0x2199CD934](MEMORY[0x24BEE2C50], v60);
  v43 = v63;
  v44 = sub_214425274();
  v68 = &v52;
  MEMORY[0x24BDAC7A8](v44);
  v45 = v57;
  *(&v52 - 4) = v33;
  *(&v52 - 3) = (char *)v45;
  *(&v52 - 2) = v38;
  AssociatedConformanceWitness = (uint64_t)v33;
  v46 = v65;
  swift_getAssociatedConformanceWitness();
  v47 = v61;
  sub_214425214();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v46);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v41, v42);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v47, 1, v39) == 1)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v47, v54);
    sub_2143B3B44(v66);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v71, v39);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v71, v39);
    v48 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v49 = v52;
    v48(v52, v47, v39);
    v50 = v55;
    v48(v55, v49, v39);
    v51 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v66, v50, v51);
  }
}

uint64_t sub_2143B41F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = type metadata accessor for CompactedCollection.Index(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void (*sub_2143B4240(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_2143B429C(v6, a2, a3);
  return sub_2141FC880;
}

void (*sub_2143B429C(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  *a1 = v5;
  a1[1] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  a1[2] = v7;
  sub_2143B3BF4(a3, (uint64_t)v7);
  return sub_2142D5F70;
}

uint64_t sub_2143B430C@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;

  type metadata accessor for CompactedCollection.Index(255, a1[2], a1[3], a1[4]);
  v3 = sub_214425388();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t sub_2143B4364(char **a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for CompactedCollection.Index(0, a2[2], a2[3], a2[4]);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - v6;
  sub_2143B3CE0(a1, a2, (uint64_t)&v9 - v6);
  (*(void (**)(char **, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(char **, char *, uint64_t))(v5 + 32))(a1, v7, v4);
}

uint64_t sub_2143B4408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = type metadata accessor for CompactedCollection.Index(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  v10 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 16))(a2, v2, a1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + *(int *)(a1 + 44), v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, a1);
  MEMORY[0x2199CD934](&unk_214430E04, a1);
  v11 = sub_214425604();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2 + *(int *)(v11 + 36), v9, v5);
}

uint64_t sub_2143B44F8(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_214430E04, a1);
  return sub_214425220();
}

uint64_t sub_2143B452C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x2199CD934](&unk_214430E04, a1);
  v4 = sub_2142D6850(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

uint64_t sub_2143B458C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t *, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t TupleTypeMetadata2;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t AssociatedConformanceWitness;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;

  v86 = a1;
  v4 = a2;
  v81 = a4;
  v78 = a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v79 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v80 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v77 = (char *)&v65 - v8;
  v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v71 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v69 = (char *)&v65 - v12;
  v90 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = sub_2144252BC();
  v75 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v68 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)&v65 - v16;
  v84 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v83 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_214425388();
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v73 = (char *)&v65 - v19;
  v87 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v88 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v72 = (char *)&v65 - v23;
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = *(_QWORD *)(v4 + 24);
  v28 = type metadata accessor for CompactedCollection.Index(0, v6, v67, v5);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v65 - v34;
  v36 = *(void (**)(char *, uint64_t *, uint64_t, __n128))(v29 + 16);
  v36((char *)&v65 - v34, v86, v28, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v85, v4);
  v89 = v6;
  v37 = v4;
  LOBYTE(v4) = sub_2143B4DB8();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v37);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
  if ((v4 & 1) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v38 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v85, v89);
  ((void (*)(char *, uint64_t, uint64_t))v36)(v31, v38 + *(int *)(v37 + 44), v28);
  v27 = v88;
  v39 = *(void (**)(char *, uint64_t *, uint64_t))(v87 + 16);
  v39(v88, v86, v9);
  if ((sub_214424E84() & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v40 = TupleTypeMetadata2;
  v41 = v69;
  v42 = &v69[*(int *)(TupleTypeMetadata2 + 48)];
  v43 = v87;
  v44 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
  v44(v69, v31, v9);
  v44(v42, v88, v9);
  v45 = v71;
  v46 = &v71[*(int *)(v40 + 48)];
  v39(v71, (uint64_t *)v41, v9);
  v39(v46, (uint64_t *)v42, v9);
  v47 = v68;
  v44(v68, v45, v9);
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v46, v9);
  v49 = &v45[*(int *)(v40 + 48)];
  v44(v45, v41, v9);
  v44(v49, v42, v9);
  v50 = v76;
  v44(&v47[*(int *)(v76 + 36)], v49, v9);
  v48(v45, v9);
  v51 = v74;
  v52 = v75;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v47, v50);
  v53 = v77;
  v54 = v83;
  v55 = v89;
  sub_214425298();
  v56 = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v54, v55);
  v86 = &v65;
  MEMORY[0x24BDAC7A8](v56);
  v57 = v67;
  *(&v65 - 4) = v55;
  *(&v65 - 3) = v57;
  v63 = v78;
  v58 = v80;
  swift_getAssociatedConformanceWitness();
  v27 = v73;
  sub_214424E48();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v53, v58);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v27, 1, v9) != 1)
  {
    v59 = v72;
    v44(v72, v27, v9);
    v60 = v88;
    v44(v88, v59, v9);
    v61 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v81, v60, v61);
  }
LABEL_7:
  (*(void (**)(char *, uint64_t))(v65 + 8))(v27, v66);
  v64 = 0;
  v63 = 125;
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2143B4C58@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143B458C(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t sub_2143B4C60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = type metadata accessor for CompactedCollection.Index(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(v5 + 8));
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  sub_2143B458C(a1, a2, v5, (uint64_t)&v11 - v8);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(a1, v9, v6);
}

uint64_t sub_2143B4D24()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_214424E6C() & 1;
}

uint64_t sub_2143B4DB8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_214424ED8() & 1;
}

uint64_t sub_2143B4E4C()
{
  return sub_2143B4D24();
}

uint64_t sub_2143B4E68()
{
  swift_getAssociatedTypeWitness();
  return sub_214424DC4();
}

uint64_t sub_2143B4EC0()
{
  sub_214425874();
  swift_getAssociatedTypeWitness();
  sub_214424DC4();
  return sub_2144258B0();
}

uint64_t sub_2143B4F34()
{
  return sub_2143B4DB8();
}

uint64_t sub_2143B4F44()
{
  return sub_2143B4EC0();
}

uint64_t sub_2143B4F4C()
{
  return sub_2143B4E68();
}

uint64_t sub_2143B4F54()
{
  sub_214425874();
  sub_2143B4E68();
  return sub_2144258B0();
}

void sub_2143B4FA8()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143B4FB8()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143B4FC8()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2143B4FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2143B4FF0(a1, a2, a3, MEMORY[0x24BEE0658]);
}

uint64_t sub_2143B4FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2143B4FF0(a1, a2, a3, MEMORY[0x24BEE4218]);
}

uint64_t sub_2143B4FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x2199CD934](&unk_214431138, a2, &v8);
  return MEMORY[0x2199CD934](a4, a1, &v7);
}

uint64_t type metadata accessor for CompactedCollection.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompactedCollection.Index);
}

BOOL sub_2143B5050(uint64_t a1)
{
  return sub_2143B506C(a1);
}

BOOL sub_2143B506C(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 48))(a1, 1) != 1;
}

uint64_t sub_2143B50A8()
{
  return sub_2143B54A4();
}

uint64_t *sub_2143B50BC(uint64_t *a1, uint64_t *a2)
{
  return sub_2143B5528(a1, a2);
}

uint64_t sub_2143B50D0(uint64_t a1)
{
  return sub_2143B55C4(a1);
}

uint64_t sub_2143B50E4(uint64_t a1, uint64_t a2)
{
  return sub_2143B5620(a1, a2);
}

uint64_t sub_2143B50F8(uint64_t a1, uint64_t a2)
{
  return sub_2143B5680(a1, a2);
}

uint64_t sub_2143B510C(uint64_t a1, uint64_t a2)
{
  return sub_2143B56E0(a1, a2);
}

uint64_t sub_2143B5120(uint64_t a1, uint64_t a2)
{
  return sub_2143B5740(a1, a2);
}

uint64_t sub_2143B5134(uint64_t a1, unsigned int a2)
{
  return sub_2143B57A0(a1, a2);
}

void sub_2143B5148(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_2143B58E8(a1, a2, a3);
}

uint64_t type metadata accessor for CompactedSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompactedSequence.Iterator);
}

uint64_t sub_2143B5168()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2143B51D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143B5284 + 4 * byte_214430D90[(v7 - 1)]))();
}

void sub_2143B52D4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for CompactedSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompactedSequence);
}

uint64_t sub_2143B5490()
{
  return sub_2143B54A4();
}

uint64_t sub_2143B54A4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2143B5514(uint64_t *a1, uint64_t *a2)
{
  return sub_2143B5528(a1, a2);
}

uint64_t *sub_2143B5528(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_2143B55B0(uint64_t a1)
{
  return sub_2143B55C4(a1);
}

uint64_t sub_2143B55C4(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_2143B560C(uint64_t a1, uint64_t a2)
{
  return sub_2143B5620(a1, a2);
}

uint64_t sub_2143B5620(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B566C(uint64_t a1, uint64_t a2)
{
  return sub_2143B5680(a1, a2);
}

uint64_t sub_2143B5680(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B56CC(uint64_t a1, uint64_t a2)
{
  return sub_2143B56E0(a1, a2);
}

uint64_t sub_2143B56E0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B572C(uint64_t a1, uint64_t a2)
{
  return sub_2143B5740(a1, a2);
}

uint64_t sub_2143B5740(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B578C(uint64_t a1, unsigned int a2)
{
  return sub_2143B57A0(a1, a2);
}

uint64_t sub_2143B57A0(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void sub_2143B58D4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_2143B58E8(a1, a2, a3);
}

void sub_2143B58E8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_2143B5AB8()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_2143B5B60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_2143B5C58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t sub_2143B5CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B5D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B5E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B5E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143B5F34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_2143B60E4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_2143B637C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x2143B6364);
}

void sub_2143B638C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x2143B6364);
}

void sub_2143B6394()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x2143B6364);
}

uint64_t type metadata accessor for CompactedCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompactedCollection);
}

uint64_t static BuilderTuple<each A>._layoutAxisMark(_:_:)(uint64_t TupleTypeMetadata, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t *v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = a3;
  v8 = (_QWORD *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 != 1)
  {
    MEMORY[0x24BDAC7A8](TupleTypeMetadata);
    v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v11 = 0;
      if (v6 < 4)
        goto LABEL_8;
      if ((unint64_t)(v10 - (char *)v8) < 0x20)
        goto LABEL_8;
      v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v8 + 2);
      v13 = v10 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v11 != v6)
      {
LABEL_8:
        v16 = v6 - v11;
        v17 = v11;
        v18 = &v10[8 * v11];
        v19 = &v8[v17];
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v21 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v49 = *a2;
  v50 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = 0;
  v46 = v24;
  v47 = v23;
  (*(void (**)(__n128))(v24 + 16))(v21);
  if (!v6)
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v47);
  result = swift_beginAccess();
  v26 = 0;
  v27 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v28 = (_DWORD *)(v47 + 32);
  v29 = v6;
  v48 = v6;
  v30 = v49;
  while (1)
  {
    v52 = v29;
    v53 = v8;
    v51 = &v45;
    v31 = *v8;
    v55 = *v27;
    v33 = MEMORY[0x24BDAC7A8](result);
    v35 = (char *)&v45 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = v6 == 1 ? 0 : *v28;
    v37 = &v50[v36];
    v38 = *(void (**)(char *, char *, uint64_t, __n128))(v32 + 16);
    v54 = v32;
    v38(v35, v37, v31, v33);
    v39 = *(_QWORD *)(v30 + 16);
    v40 = *(_QWORD *)(v39 + 16);
    v41 = *(_QWORD *)(v40 + 32);
    swift_retain();
    v42 = sub_21421F450(v26, v41);
    v43 = *(_QWORD *)(v40 + 32);
    *(_QWORD *)(v40 + 32) = v42;
    v44 = *(_QWORD *)(v39 + 24);
    *(_QWORD *)(v39 + 24) = v42;
    v56 = v30;
    (*(void (**)(char *, uint64_t *, uint64_t))(v55 + 8))(v35, &v56, v31);
    *(_QWORD *)(v39 + 24) = v44;
    *(_QWORD *)(v40 + 32) = v43;
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v35, v31);
    v26 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    ++v57;
    v28 += 4;
    ++v27;
    v8 = v53 + 1;
    v29 = v52 - 1;
    v6 = v48;
    if (v52 == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v47);
  }
  __break(1u);
  return result;
}

uint64_t static BuilderTuple<each A>._renderAxisMark(_:_:)@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  unint64_t v64;
  _DWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v7 = a3;
  v59 = a6;
  v9 = (_QWORD *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 == 1)
  {
    v10 = *v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8](TupleTypeMetadata);
    v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v13 = 0;
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)(v12 - (char *)v9) < 0x20)
        goto LABEL_9;
      v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v9 + 2);
      v15 = v12 + 16;
      v16 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != v7)
      {
LABEL_9:
        v18 = v7 - v13;
        v19 = v13;
        v20 = &v12[8 * v13];
        v21 = &v9[v19];
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v10 = TupleTypeMetadata;
  }
  v23 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v61 = *a2;
  v62 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = 0;
  v57 = v25;
  (*(void (**)(__n128))(v25 + 16))(v23);
  v26 = (char *)MEMORY[0x24BEE4AF8];
  v58 = v10;
  if (v7)
  {
    result = swift_beginAccess();
    v28 = 0;
    v29 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
    v30 = v7;
    v60 = v7;
    v31 = v61;
    while (1)
    {
      v64 = v30;
      v63 = &v57;
      v66 = v9;
      v32 = *v9;
      v33 = *v29;
      v36 = MEMORY[0x24BDAC7A8](result);
      v38 = (char *)&v57 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      v68 = v26;
      v65 = v34;
      if (v7 == 1)
        v39 = 0;
      else
        v39 = *v34;
      v67 = v35;
      (*(void (**)(char *, char *, uint64_t, __n128))(v35 + 16))(v38, &v62[v39], v32, v36);
      v40 = *(_QWORD *)(v31 + 16);
      v41 = *(_QWORD *)(v40 + 16);
      v42 = *(_QWORD *)(v41 + 32);
      swift_retain();
      v43 = sub_21421F450(v28, v42);
      v44 = *(_QWORD *)(v41 + 32);
      *(_QWORD *)(v41 + 32) = v43;
      v45 = *(_QWORD *)(v40 + 24);
      *(_QWORD *)(v40 + 24) = v43;
      v69 = v31;
      (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(v33 + 16))(&v70, v38, &v69, v32, v33);
      *(_QWORD *)(v40 + 24) = v45;
      *(_QWORD *)(v41 + 32) = v44;
      swift_release();
      v46 = v70;
      v26 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = sub_214222074(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
      v48 = *((_QWORD *)v26 + 2);
      v47 = *((_QWORD *)v26 + 3);
      v7 = v60;
      if (v48 >= v47 >> 1)
        v26 = sub_214222074((char *)(v47 > 1), v48 + 1, 1, v26);
      *((_QWORD *)v26 + 2) = v48 + 1;
      *(_QWORD *)&v26[8 * v48 + 32] = v46;
      result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v38, v32);
      v28 = v71 + 1;
      if (__OFADD__(v71, 1))
        break;
      ++v71;
      ++v29;
      v9 = v66 + 1;
      v30 = v64 - 1;
      if (v64 == 1)
        goto LABEL_23;
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    v49 = (int *)type metadata accessor for SgGroup(0);
    v50 = swift_allocBox();
    v52 = v51;
    v53 = *(_QWORD *)(*(_QWORD *)(v61 + 16) + 24);
    v54 = (char *)v51 + v49[6];
    v55 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
    *v52 = v53;
    v52[1] = v26;
    *(_QWORD *)((char *)v52 + v49[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v52 + v49[8]) = 0;
    *(_QWORD *)((char *)v52 + v49[9]) = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v52 + v49[10]) = 0;
    v56 = v58;
    *v59 = v50;
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v62, v56);
  }
  return result;
}

uint64_t sub_2143B6A5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderTuple<each A>._layoutAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t sub_2143B6A6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static BuilderTuple<each A>._renderAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), a5);
}

ValueMetadata *type metadata accessor for AxisMarkBuilder()
{
  return &type metadata for AxisMarkBuilder;
}

uint64_t static BuilderPair<>._makeAxisContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[8];

  v11 = type metadata accessor for BuilderPair(0, a3, a4, a4);
  v12 = sub_21436F848(v11, *(_QWORD *)(v11 + 8), (_QWORD *)(v11 + 8 * *(unsigned int *)(*(_QWORD *)(v11 + 8) + 24)), (_QWORD **)(v11 + 16));
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = v12;
  sub_2141DB52C(a1, (uint64_t)sub_2143B6CE4, (uint64_t)v15, v11, MEMORY[0x24BEE4078], (uint64_t)&type metadata for _AxisContentOutputs, MEMORY[0x24BEE40A8], v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143B6C44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = MEMORY[0x24BEE4AF8];
  v12 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v7 = result;
    v8 = swift_bridgeObjectRetain();
    v9 = (uint64_t *)(a2 + 48);
    do
    {
      v10 = *(v9 - 2);
      v11 = *v9;
      v9 += 3;
      v8 = sub_2143B6D2C(v8, v10, *(_QWORD *)(v7 + v11));
      --v5;
    }
    while (v5);
    v4 = v12;
    result = swift_bridgeObjectRelease();
  }
  *a3 = v4;
  return result;
}

uint64_t sub_2143B6CE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2143B6C44(a1, *(_QWORD *)(v2 + 48), a2);
}

uint64_t sub_2143B6D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static BuilderPair<>._makeAxisContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

void sub_2143B6D18()
{
  qword_253F1C740 = MEMORY[0x24BEE4B00];
}

uint64_t sub_2143B6D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v7 + 16))(v10, *v4 + v4[1], a2, v8);
  (*(void (**)(uint64_t *__return_ptr, char *))(a3 + 8))(&v13, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
  return sub_2143EA970(v13);
}

uint64_t View.chartScrollableAxes(_:)(char a1)
{
  swift_getKeyPath();
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  sub_2144248FC();
  swift_release();
  return swift_release();
}

uint64_t sub_2143B6E78()
{
  sub_2143C5E74();
  return sub_214424224();
}

uint64_t sub_2143B6EAC()
{
  sub_2143C5E74();
  return sub_214424224();
}

uint64_t sub_2143B6EE8()
{
  sub_2143C5E74();
  return sub_214424224();
}

uint64_t sub_2143B6F24(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[80];

  sub_2143C5DF0(a1, (uint64_t)v3);
  sub_2143C5DF0((uint64_t)v3, (uint64_t)&v2);
  sub_2143C5E74();
  sub_214424230();
  return sub_2143BCEE4((uint64_t)v3);
}

uint64_t sub_2143B6F84()
{
  return swift_deallocObject();
}

_BYTE *sub_2143B6F94(_BYTE *result)
{
  uint64_t v1;

  *result = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t View.chartXVisibleDomain<A>(length:start:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.chartXVisibleDomain<A>(length:)(a1, a3, a4, a5, a6);
}

uint64_t View.chartXVisibleDomain<A>(length:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2143B7030(a1, a2, a3, a4, a5);
}

uint64_t View.chartYVisibleDomain<A>(length:start:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.chartYVisibleDomain<A>(length:)(a1, a3, a4, a5, a6);
}

uint64_t View.chartYVisibleDomain<A>(length:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2143B7030(a1, a2, a3, a4, a5);
}

uint64_t sub_2143B7030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;

  v5 = sub_214400B9C(a1, a3, a5);
  v7 = v5;
  if (v8 >= 2u)
  {
    sub_2141E60B8(v5, v6, 2);
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    *(_QWORD *)(swift_allocObject() + 16) = v7;
    sub_2144248FC();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t View.chartScrollTargetBehavior<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_2143B7334(a1, a2, a3, a4, a5, (uint64_t)sub_2143BCAA8, a6);
}

uint64_t View.chartScrollPosition<A>(initialX:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_2143B7334(a1, a2, a3, a4, a5, (uint64_t)sub_2143BCB64, a6);
}

uint64_t sub_2143B7178()
{
  sub_2143C5D80();
  return sub_214424224();
}

uint64_t sub_2143B71AC()
{
  sub_2143C5D80();
  return sub_214424224();
}

uint64_t sub_2143B71E8(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[96];

  sub_2143C5D4C(a1, (uint64_t)v3);
  sub_2143C5D4C((uint64_t)v3, (uint64_t)&v2);
  sub_2143C5D80();
  sub_214424230();
  return sub_2143C5DC4((uint64_t)v3);
}

uint64_t View.chartScrollPosition<A>(x:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_2143B7460(a1, a2, a3, a4, a5, (uint64_t)sub_2143BCBCC, a6);
}

uint64_t sub_2143B725C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[48];

  v10 = sub_214424B3C();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v16[-v12];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v14 + 16))(&v16[-v12], a2, v11);
  sub_2143FB6FC((uint64_t)v13, a4, a6, (uint64_t)v16);
  v16[41] = 1;
  return sub_2141FA160((uint64_t)v16, a1, &qword_253F12388);
}

uint64_t View.chartScrollPosition<A>(initialY:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_2143B7334(a1, a2, a3, a4, a5, (uint64_t)sub_2143BCC34, a6);
}

uint64_t sub_2143B7334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD v17[3];

  v17[2] = a6;
  v17[1] = a7;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](a1);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  *((_QWORD *)v15 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_2144248FC();
  swift_release();
  return swift_release();
}

uint64_t View.chartScrollPosition<A>(y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_2143B7460(a1, a2, a3, a4, a5, (uint64_t)sub_2143BCD2C, a6);
}

uint64_t sub_2143B7460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[3];

  v19[2] = a6;
  v19[0] = a5;
  v19[1] = a7;
  v11 = sub_214424B3C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v19 - v13;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a3;
  v17 = v19[0];
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], v14, v11);
  sub_2144248FC();
  swift_release();
  return swift_release();
}

uint64_t sub_2143B7588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[48];

  v10 = sub_214424B3C();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v16[-v12];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v14 + 16))(&v16[-v12], a2, v11);
  sub_2143FB6FC((uint64_t)v13, a4, a6, (uint64_t)v16);
  v16[41] = 1;
  return sub_2141FA160((uint64_t)v16, a1 + 48, &qword_253F12388);
}

uint64_t sub_2143B7644@<X0>(char a1@<W0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char v18;
  uint64_t result;
  _BYTE v21[40];

  v6 = sub_2141D8BF8(&qword_254D6DB40);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for AutomaticScrollLimitModifier(0);
  v14 = (uint64_t *)&a3[*(int *)(v13 + 24)];
  *v14 = swift_getKeyPath();
  sub_2141D8BF8(&qword_254D6D990);
  swift_storeEnumTagMultiPayload();
  v15 = (uint64_t *)&a3[*(int *)(v13 + 28)];
  *v15 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  *a3 = a1;
  sub_2141D8DC0(a2, (uint64_t)v21);
  sub_2141D8BF8(&qword_254D6DB10);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if ((v16 & 1) != 0)
  {
    v17(v8, 0, 1, v9);
    sub_2141FE1E0((uint64_t)v8, (uint64_t)v12, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
    v18 = v12[*(int *)(v9 + 32)];
    result = sub_2141DD370((uint64_t)v12, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
  }
  else
  {
    v17(v8, 1, 1, v9);
    result = sub_2141E0750((uint64_t)v8, &qword_254D6DB40);
    v18 = 3;
  }
  a3[1] = v18;
  return result;
}

uint64_t sub_2143B7818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v7 = sub_2141D8BF8(&qword_253F15BE8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141E070C(a1, (uint64_t)v9, &qword_253F15BE8);
  return a5(v9);
}

void sub_2143B78A4()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[8];

  v1 = sub_214424488();
  MEMORY[0x24BDAC7A8](v1);
  v11[7] = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_2141D8BF8(&qword_254D6DB00);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2141D8BF8(&qword_253F15BE8);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  __asm { BR              X10 }
}

uint64_t sub_2143B7A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v12 - 120) = v2;
  *(_QWORD *)(v12 - 112) = v1;
  *(_QWORD *)(v12 - 128) = v0;
  *(_QWORD *)(v12 - 104) = v4;
  *(_QWORD *)(v12 - 96) = v10;
  v13 = sub_214424650();
  sub_21442465C();
  v14 = *(_QWORD *)(v12 - 96);
  if (sub_21442465C() != v13)
    goto LABEL_9;
  type metadata accessor for AutomaticScrollLimitModifier(0);
  sub_21441BD5C(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v6, *MEMORY[0x24BDEFEE8], v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v5);
  v15 = v3 + *(int *)(v11 + 48);
  sub_2141E070C(v8, v3, &qword_253F15BE8);
  *(_QWORD *)(v12 - 136) = v15;
  sub_2141E070C(v6, v15, &qword_253F15BE8);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v16(v3, 1, v5) == 1)
  {
    sub_2141E0750(v6, &qword_253F15BE8);
    sub_2141E0750(v8, &qword_253F15BE8);
    if (v16(*(_QWORD *)(v12 - 136), 1, v5) == 1)
    {
      v17 = v3;
LABEL_13:
      sub_2141E0750(v17, &qword_253F15BE8);
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  sub_2141E070C(v3, v7, &qword_253F15BE8);
  if (v16(*(_QWORD *)(v12 - 136), 1, v5) == 1)
  {
    sub_2141E0750(v6, &qword_253F15BE8);
    sub_2141E0750(v8, &qword_253F15BE8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v5);
LABEL_7:
    sub_2141E0750(v3, &qword_254D6DB00);
    v14 = *(_QWORD *)(v12 - 96);
    goto LABEL_9;
  }
  v18 = *(_QWORD *)(v12 - 88);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 32))(v18, *(_QWORD *)(v12 - 136), v5);
  sub_2141FED10(&qword_254D6DB08, (uint64_t (*)(uint64_t))MEMORY[0x24BDEFEF8], MEMORY[0x24BDEFF08]);
  *(_DWORD *)(v12 - 136) = sub_214424ED8();
  v19 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v19(v18, v5);
  sub_2141E0750(v6, &qword_253F15BE8);
  sub_2141E0750(v8, &qword_253F15BE8);
  v19(v7, v5);
  v14 = *(_QWORD *)(v12 - 96);
  sub_2141E0750(v3, &qword_253F15BE8);
  if ((*(_DWORD *)(v12 - 136) & 1) == 0)
  {
LABEL_9:
    v20 = sub_214424668();
    sub_21442465C();
    if (sub_21442465C() == v20)
    {
      type metadata accessor for AutomaticScrollLimitModifier(0);
      v21 = *(_QWORD *)(v12 - 112);
      sub_21441BD5C(v21);
      v22 = *(_QWORD *)(v12 - 120);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v22, *MEMORY[0x24BDEFEE8], v5);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v5);
      v23 = v14 + *(int *)(v11 + 48);
      sub_2141E070C(v21, v14, &qword_253F15BE8);
      sub_2141E070C(v22, v23, &qword_253F15BE8);
      v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (v24(v14, 1, v5) == 1)
      {
        sub_2141E0750(v22, &qword_253F15BE8);
        sub_2141E0750(v21, &qword_253F15BE8);
        if (v24(v23, 1, v5) == 1)
        {
          v17 = v14;
          goto LABEL_13;
        }
        goto LABEL_16;
      }
      v25 = *(_QWORD *)(v12 - 128);
      sub_2141E070C(v14, v25, &qword_253F15BE8);
      if (v24(v23, 1, v5) == 1)
      {
        sub_2141E0750(*(_QWORD *)(v12 - 120), &qword_253F15BE8);
        sub_2141E0750(*(_QWORD *)(v12 - 112), &qword_253F15BE8);
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v25, v5);
LABEL_16:
        sub_2141E0750(v14, &qword_254D6DB00);
        goto LABEL_19;
      }
      v26 = *(_QWORD *)(v12 - 88);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v26, v23, v5);
      sub_2141FED10(&qword_254D6DB08, (uint64_t (*)(uint64_t))MEMORY[0x24BDEFEF8], MEMORY[0x24BDEFF08]);
      v27 = sub_214424ED8();
      v28 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v28(v26, v5);
      sub_2141E0750(*(_QWORD *)(v12 - 120), &qword_253F15BE8);
      sub_2141E0750(*(_QWORD *)(v12 - 112), &qword_253F15BE8);
      v28(v25, v5);
      sub_2141E0750(v14, &qword_253F15BE8);
      if ((v27 & 1) != 0)
        goto LABEL_18;
    }
LABEL_19:
    v29 = *(_QWORD *)(v12 - 104);
    sub_214424458();
    goto LABEL_20;
  }
LABEL_18:
  v29 = *(_QWORD *)(v12 - 104);
  sub_21442444C();
LABEL_20:
  v30 = sub_214424464();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
}

uint64_t sub_2143B7F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v25 = a1;
  v28 = a2;
  v2 = sub_2141D8BF8(&qword_254D6DAD8);
  v24 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_2141D8BF8(&qword_254D6DAE0);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_2141D8BF8(&qword_254D6DAE8);
  v7 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(&qword_254D6DAF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_214424464();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143B78A4();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_2141E0750((uint64_t)v12, &qword_254D6DAF0);
    v17 = v24;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v18(v4, v25, v2);
    v18(v6, (uint64_t)v4, v2);
    swift_storeEnumTagMultiPayload();
    v19 = sub_2141D9054(&qword_254D6DAF8, &qword_254D6DAD8, MEMORY[0x24BDEFB78]);
    v29 = v2;
    v30 = v19;
    swift_getOpaqueTypeConformance2();
    sub_2144243EC();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v21 = sub_2141D9054(&qword_254D6DAF8, &qword_254D6DAD8, MEMORY[0x24BDEFB78]);
    sub_2144248C0();
    v22 = v27;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v6, v9, v27);
    swift_storeEnumTagMultiPayload();
    v29 = v2;
    v30 = v21;
    swift_getOpaqueTypeConformance2();
    sub_2144243EC();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t ChartScrollTargetBehaviorContext.chartProxy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  return sub_2141FDEA0(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for ChartProxy);
}

uint64_t ChartScrollTargetBehaviorContext.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t sub_2143B82B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v3 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ChartModel.Scenegraph();
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChartProxy();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21442462C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a2, v12, v17);
  swift_getKeyPath();
  sub_214424608();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v5, 1, v22) == 1)
  {
    sub_2142D8A8C((uint64_t)v8);
    sub_2141E0750((uint64_t)v5, qword_253F13E08);
  }
  else
  {
    sub_2141FE1E0((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  }
  sub_2141FE1E0((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v15, v12);
  sub_2141FE1E0((uint64_t)v11, (uint64_t)&v19[*(int *)(v16 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for ChartProxy);
  ValueAlignedChartScrollTargetBehavior.updateTarget(_:context:)(v23, (uint64_t)v19);
  return sub_2141DD370((uint64_t)v19, type metadata accessor for ChartScrollTargetBehaviorContext);
}

uint64_t sub_2143B84EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v26 = a1;
  v3 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ChartModel.Scenegraph();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChartProxy();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21442462C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a2, v12, v17);
  swift_getKeyPath();
  sub_214424608();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v5, 1, v24) == 1)
  {
    sub_2142D8A8C((uint64_t)v8);
    sub_2141E0750((uint64_t)v5, qword_253F13E08);
  }
  else
  {
    sub_2141FE1E0((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  }
  sub_2141FE1E0((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v15, v12);
  sub_2141FE1E0((uint64_t)v11, (uint64_t)&v19[*(int *)(v16 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for ChartProxy);
  v20 = v25[3];
  v21 = v25[4];
  sub_2141E88D0(v25, v20);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v21 + 16))(v26, v19, v20, v21);
  return sub_2141DD370((uint64_t)v19, type metadata accessor for ChartScrollTargetBehaviorContext);
}

uint64_t ChartScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a4;
  v25 = a1;
  v26 = a3;
  v5 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ChartModel.Scenegraph();
  v23 = *(_QWORD *)(v8 - 8);
  v24 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ChartProxy();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_21442462C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v17, a2, v14, v19);
  swift_getKeyPath();
  sub_214424608();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v24) == 1)
  {
    sub_2142D8A8C((uint64_t)v10);
    sub_2141E0750((uint64_t)v7, qword_253F13E08);
  }
  else
  {
    sub_2141FE1E0((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  }
  sub_2141FE1E0((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v21, v17, v14);
  sub_2141FE1E0((uint64_t)v13, (uint64_t)&v21[*(int *)(v18 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for ChartProxy);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v25, v21, v26);
  return sub_2141DD370((uint64_t)v21, type metadata accessor for ChartScrollTargetBehaviorContext);
}

uint64_t sub_2143B8988()
{
  sub_2143C5D08();
  return sub_214424224();
}

uint64_t sub_2143B89C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - v6;
  sub_2141E070C(a1, (uint64_t)&v9 - v6, qword_253F13E08);
  sub_2141E070C((uint64_t)v7, (uint64_t)v4, qword_253F13E08);
  sub_2143C5D08();
  sub_214424230();
  return sub_2141E0750((uint64_t)v7, qword_253F13E08);
}

void static ValueAlignedLimitBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A>(unit:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  unsigned __int8 v24;

  v23 = a6;
  type metadata accessor for MajorValueAlignment(255, a4, a5, a4);
  v13 = sub_214425388();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - v15;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a3) = *a3;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v20, a1, a4, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  v24 = a3;
  return ValueAlignedChartScrollTargetBehavior.init<A>(unit:majorAlignment:limitBehavior:)((uint64_t)v20, (uint64_t)v16, &v24, a4, a5, a7);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A>(unit:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;

  v12 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - v16;
  v28 = type metadata accessor for ValueAlignment(0);
  v18 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v20 = (uint64_t *)((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = *a3;
  sub_2143BA464(a1, a4, a5, v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  sub_2141FE1E0((uint64_t)v20, a6, type metadata accessor for ValueAlignment);
  v21 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  sub_2141FDEA0(a6, a6 + v21[5], type metadata accessor for ValueAlignment);
  v23 = type metadata accessor for MajorValueAlignment(0, a4, a5, v22);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(a2, 1, v23) == 1)
  {
    v25 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a2, v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 2, 2, v28);
  }
  else
  {
    sub_2141FDEA0(a2, (uint64_t)v14, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a2, v23);
    sub_2141FE1E0((uint64_t)v14, (uint64_t)v17, type metadata accessor for MajorValueAlignmentStorage);
  }
  v26 = a6 + v21[6];
  sub_2141FE1E0((uint64_t)v17, v26, type metadata accessor for MajorValueAlignmentStorage);
  result = sub_2141FDEA0(v26, a6 + v21[7], type metadata accessor for MajorValueAlignmentStorage);
  *(_BYTE *)(a6 + v21[8]) = v29;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<>(matching:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[15];
  char v18;

  v8 = sub_2141D8BF8(&qword_254D6D7A0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_214423960();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(a3) = *a3;
  (*(void (**)(_BYTE *, uint64_t, __n128))(v15 + 16))(v14, a1, v12);
  sub_2141E070C(a2, (uint64_t)v10, &qword_254D6D7A0);
  v18 = (char)a3;
  return ValueAlignedChartScrollTargetBehavior.init(matching:majorAlignment:limitBehavior:)((uint64_t)v14, (uint64_t)v10, &v18, a4);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init(matching:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v8 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - v12;
  v14 = *a3;
  v15 = sub_214423960();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a4, a1, v15);
  v16 = type metadata accessor for ValueAlignment(0);
  swift_storeEnumTagMultiPayload();
  v17 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  sub_2141FDEA0(a4, a4 + v17[5], type metadata accessor for ValueAlignment);
  v18 = sub_2141D8BF8(&qword_254D6D7A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(a2, 1, v18) == 1)
  {
    sub_2141E0750(a2, &qword_254D6D7A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 2, 2, v16);
  }
  else
  {
    sub_2141FDEA0(a2, (uint64_t)v10, type metadata accessor for MajorValueAlignmentStorage);
    sub_2141E0750(a2, &qword_254D6D7A8);
    sub_2141FE1E0((uint64_t)v10, (uint64_t)v13, type metadata accessor for MajorValueAlignmentStorage);
  }
  v19 = a4 + v17[6];
  sub_2141FE1E0((uint64_t)v13, v19, type metadata accessor for MajorValueAlignmentStorage);
  result = sub_2141FDEA0(v19, a4 + v17[7], type metadata accessor for MajorValueAlignmentStorage);
  *(_BYTE *)(a4 + v17[8]) = v14;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A, B>(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned __int8 v45;

  v12 = a8;
  v37 = a8;
  v38 = a2;
  v34 = a5;
  v35 = a1;
  v39 = a3;
  v40 = a4;
  v44 = a9;
  v41 = a12;
  v42 = a11;
  v43 = a10;
  type metadata accessor for MajorValueAlignment(255, a7, a11, a4);
  v36 = sub_214425388();
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v16 = (char *)&v32 - v15;
  type metadata accessor for MajorValueAlignment(255, a6, v12, v17);
  v18 = sub_214425388();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v32 - v20;
  v22 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v12) = *v34;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 16))(v29, v35, a6, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v38, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v39, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v16, v40, v36);
  v45 = v12;
  return ValueAlignedChartScrollTargetBehavior.init<A, B>(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v29, (uint64_t)v25, (uint64_t)v21, (uint64_t)v16, &v45, a6, a7, v37, v44, v43, v42);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A, B>(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a5;
  v54 = a4;
  v50 = a3;
  v17 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v17);
  v49 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v55 = (uint64_t)&v48 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v48 = (uint64_t)&v48 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v48 - v24;
  v51 = type metadata accessor for ValueAlignment(0);
  v26 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v28 = (uint64_t *)((char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v53) = *v53;
  sub_2143BA464(a1, a6, a8, a9);
  v52 = a11;
  v29 = a9;
  sub_2143BA464(a2, a7, a11, v28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 8))(a2, a7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  v30 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  v31 = (uint64_t)v28;
  v32 = v50;
  sub_2141FE1E0(v31, (uint64_t)a9 + v30[5], type metadata accessor for ValueAlignment);
  v34 = type metadata accessor for MajorValueAlignment(0, a6, a8, v33);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v32, 1, v34) == 1)
  {
    v36 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v32, v36);
    v37 = v51;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v25, 2, 2, v51);
  }
  else
  {
    v38 = v48;
    sub_2141FDEA0(v32, v48, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v32, v34);
    sub_2141FE1E0(v38, (uint64_t)v25, type metadata accessor for MajorValueAlignmentStorage);
    v37 = v51;
  }
  v39 = v26;
  sub_2141FE1E0((uint64_t)v25, (uint64_t)v29 + v30[6], type metadata accessor for MajorValueAlignmentStorage);
  v41 = type metadata accessor for MajorValueAlignment(0, a7, v52, v40);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = v54;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v54, 1, v41) == 1)
  {
    v44 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
    v45 = v55;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v55, 2, 2, v37);
  }
  else
  {
    v46 = v49;
    sub_2141FDEA0(v43, v49, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v41);
    v45 = v55;
    sub_2141FE1E0(v46, v55, type metadata accessor for MajorValueAlignmentStorage);
  }
  result = sub_2141FE1E0(v45, (uint64_t)v29 + v30[7], type metadata accessor for MajorValueAlignmentStorage);
  *((_BYTE *)v29 + v30[8]) = (_BYTE)v53;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<>(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;

  v27 = a4;
  v28 = a6;
  v10 = sub_2141D8BF8(&qword_254D6D7A0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - v14;
  v16 = sub_214423960();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v26 - v21;
  LOBYTE(a5) = *a5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16);
  v24((char *)&v26 - v21, a1, v16, v20);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v18, a2, v16);
  sub_2141E070C(a3, (uint64_t)v15, &qword_254D6D7A0);
  sub_2141E070C(v27, (uint64_t)v12, &qword_254D6D7A0);
  v29 = a5;
  return ValueAlignedChartScrollTargetBehavior.init(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v22, (uint64_t)v18, (uint64_t)v15, (uint64_t)v12, &v29, v28);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  int *v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;

  v34 = a4;
  v11 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v11);
  v32 = (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v35 = (char *)&v32 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v32 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v32 - v19;
  v33 = *a5;
  v21 = sub_214423960();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
  v22(a6, a1, v21);
  v23 = type metadata accessor for ValueAlignment(0);
  swift_storeEnumTagMultiPayload();
  v24 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  v22(a6 + v24[5], a2, v21);
  swift_storeEnumTagMultiPayload();
  v25 = sub_2141D8BF8(&qword_254D6D7A8);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48);
  if (v26(a3, 1, v25) == 1)
  {
    sub_2141E0750(a3, &qword_254D6D7A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v20, 2, 2, v23);
  }
  else
  {
    sub_2141FDEA0(a3, (uint64_t)v17, type metadata accessor for MajorValueAlignmentStorage);
    sub_2141E0750(a3, &qword_254D6D7A8);
    sub_2141FE1E0((uint64_t)v17, (uint64_t)v20, type metadata accessor for MajorValueAlignmentStorage);
  }
  sub_2141FE1E0((uint64_t)v20, a6 + v24[6], type metadata accessor for MajorValueAlignmentStorage);
  v27 = v34;
  v28 = v26(v34, 1, v25);
  v29 = (uint64_t)v35;
  if (v28 == 1)
  {
    sub_2141E0750(v27, &qword_254D6D7A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v29, 2, 2, v23);
  }
  else
  {
    v30 = v32;
    sub_2141FDEA0(v27, v32, type metadata accessor for MajorValueAlignmentStorage);
    sub_2141E0750(v27, &qword_254D6D7A8);
    sub_2141FE1E0(v30, v29, type metadata accessor for MajorValueAlignmentStorage);
  }
  result = sub_2141FE1E0(v29, a6 + v24[7], type metadata accessor for MajorValueAlignmentStorage);
  *(_BYTE *)(a6 + v24[8]) = v33;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A>(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;

  v34 = a9;
  v35 = a8;
  v32 = a3;
  v33 = a4;
  v30 = a1;
  v31 = a2;
  type metadata accessor for MajorValueAlignment(255, a6, a7, a4);
  v12 = sub_214425388();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v29 - v14;
  v16 = sub_2141D8BF8(&qword_254D6D7A0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_214423960();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a5) = *a5;
  (*(void (**)(char *, uint64_t, __n128))(v27 + 16))(v26, v30, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v31, a6);
  sub_2141E070C(v32, (uint64_t)v18, &qword_254D6D7A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v33, v12);
  v36 = a5;
  return ValueAlignedChartScrollTargetBehavior.init<A>(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v26, (uint64_t)v22, (uint64_t)v18, (uint64_t)v15, &v36, a6, a7, v34);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A>(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a4;
  v45 = a3;
  v14 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v14);
  v44 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v50 = (uint64_t)&v43 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v43 = (uint64_t)&v43 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v43 - v21;
  v23 = type metadata accessor for ValueAlignment(0);
  v46 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (uint64_t *)((char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = *a5;
  v26 = sub_214423960();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a8, a1, v26);
  swift_storeEnumTagMultiPayload();
  v47 = a7;
  sub_2143BA464(a2, a6, a7, v25);
  v28 = a2;
  v29 = v45;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(v28, a6);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, v26);
  v30 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  sub_2141FE1E0((uint64_t)v25, a8 + v30[5], type metadata accessor for ValueAlignment);
  v31 = sub_2141D8BF8(&qword_254D6D7A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v29, 1, v31) == 1)
  {
    sub_2141E0750(v29, &qword_254D6D7A0);
    v32 = v46;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v22, 2, 2, v23);
    v33 = v23;
  }
  else
  {
    v34 = v43;
    sub_2141FDEA0(v29, v43, type metadata accessor for MajorValueAlignmentStorage);
    sub_2141E0750(v29, &qword_254D6D7A8);
    sub_2141FE1E0(v34, (uint64_t)v22, type metadata accessor for MajorValueAlignmentStorage);
    v33 = v23;
    v32 = v46;
  }
  sub_2141FE1E0((uint64_t)v22, a8 + v30[6], type metadata accessor for MajorValueAlignmentStorage);
  v36 = type metadata accessor for MajorValueAlignment(0, a6, v47, v35);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v49, 1, v36) == 1)
  {
    v39 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
    v40 = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v50, 2, 2, v33);
  }
  else
  {
    v41 = v44;
    sub_2141FDEA0(v38, v44, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v36);
    v40 = v50;
    sub_2141FE1E0(v41, v50, type metadata accessor for MajorValueAlignmentStorage);
  }
  result = sub_2141FE1E0(v40, a8 + v30[7], type metadata accessor for MajorValueAlignmentStorage);
  *(_BYTE *)(a8 + v30[8]) = v48;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A>(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;

  v35 = a9;
  v36 = a8;
  v32 = a7;
  v33 = a3;
  v34 = a4;
  v30 = a1;
  v31 = a2;
  v12 = sub_2141D8BF8(&qword_254D6D7A0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MajorValueAlignment(255, a6, a7, v15);
  v16 = sub_214425388();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v30 - v18;
  v20 = sub_214423960();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a5) = *a5;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16))(v27, v30, a6, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v31, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v33, v16);
  sub_2141E070C(v34, (uint64_t)v14, &qword_254D6D7A0);
  v37 = a5;
  return ValueAlignedChartScrollTargetBehavior.init<A>(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v27, (uint64_t)v23, (uint64_t)v19, (uint64_t)v14, &v37, a6, v32, v35);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A>(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;

  v46 = a4;
  v43 = a2;
  v44 = a3;
  v13 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v13);
  v42 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v47 = (char *)&v42 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v42 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v42 - v21;
  v23 = type metadata accessor for ValueAlignment(0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (uint64_t *)((char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = *a5;
  sub_2143BA464(a1, a6, a7, v26);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  sub_2141FE1E0((uint64_t)v26, a8, type metadata accessor for ValueAlignment);
  v27 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  v28 = a8 + v27[5];
  v29 = sub_214423960();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, v43, v29);
  swift_storeEnumTagMultiPayload();
  v30 = a6;
  v31 = v44;
  v33 = type metadata accessor for MajorValueAlignment(0, v30, a7, v32);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) == 1)
  {
    v35 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v31, v35);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, 2, 2, v23);
  }
  else
  {
    sub_2141FDEA0(v31, (uint64_t)v19, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v33);
    sub_2141FE1E0((uint64_t)v19, (uint64_t)v22, type metadata accessor for MajorValueAlignmentStorage);
  }
  sub_2141FE1E0((uint64_t)v22, a8 + v27[6], type metadata accessor for MajorValueAlignmentStorage);
  v36 = sub_2141D8BF8(&qword_254D6D7A8);
  v37 = v46;
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v46, 1, v36);
  v39 = (uint64_t)v47;
  if (v38 == 1)
  {
    sub_2141E0750(v37, &qword_254D6D7A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v39, 2, 2, v23);
  }
  else
  {
    v40 = v42;
    sub_2141FDEA0(v37, v42, type metadata accessor for MajorValueAlignmentStorage);
    sub_2141E0750(v37, &qword_254D6D7A8);
    sub_2141FE1E0(v40, v39, type metadata accessor for MajorValueAlignmentStorage);
  }
  result = sub_2141FE1E0(v39, a8 + v27[7], type metadata accessor for MajorValueAlignmentStorage);
  *(_BYTE *)(a8 + v27[8]) = v45;
  return result;
}

void static ValueAlignedLimitBehavior.always.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ValueAlignedLimitBehavior.never.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2143BA464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;

  v5 = sub_214400B9C(a1, a2, a3);
  if (v7)
  {
    if (v7 != 1)
      sub_2141E60B8(v5, v6, 2);
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    *a4 = v5;
    type metadata accessor for ValueAlignment(0);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_2143BA508(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  uint64_t (*v44)(_QWORD);
  void (*v45)(char *, double *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  void (*v98)(char *);
  unsigned int v99;
  void (*v100)(char *, uint64_t, uint64_t);
  void (*v101)(char *);
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;

  v116 = a1;
  v115 = sub_214423BF4();
  v111 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v114 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_214423BE8();
  v108 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v112 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_214423BC4();
  v107 = *(_QWORD *)(v122 - 8);
  MEMORY[0x24BDAC7A8](v122);
  v110 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v6);
  v106 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v103 = (uint64_t)&v91 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v104 = (uint64_t)&v91 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v105 = (uint64_t)&v91 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v91 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v109 = (uint64_t)&v91 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v91 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v120 = (uint64_t)&v91 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v123 = (uint64_t)&v91 - v25;
  v26 = sub_214423B70();
  v117 = *(_QWORD *)(v26 - 8);
  v118 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v91 - v30;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v91 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v121 = (char *)&v91 - v36;
  v37 = sub_214423960();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v91 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ValueAlignment(0);
  MEMORY[0x24BDAC7A8](v41);
  v43 = (double *)((char *)&v91 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v119, (uint64_t)v43, v44);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    *(double *)&result = *v43 * round(a2 / *v43);
    return result;
  }
  v92 = v34;
  v91 = v31;
  v93 = v16;
  v94 = v28;
  v97 = v21;
  v119 = v38;
  v45 = *(void (**)(char *, double *, uint64_t))(v38 + 32);
  v46 = v40;
  v96 = v37;
  v45(v40, v43, v37);
  sub_2144239E4();
  v102 = *MEMORY[0x24BDCF020];
  v47 = v107;
  v101 = *(void (**)(char *))(v107 + 104);
  v48 = v110;
  v101(v110);
  v49 = *MEMORY[0x24BDCF068];
  v50 = v108;
  v100 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 104);
  v51 = v112;
  v52 = v113;
  v100(v112, v49, v113);
  v99 = *MEMORY[0x24BDCF0B0];
  v53 = v111;
  v98 = *(void (**)(char *))(v111 + 104);
  v55 = v114;
  v54 = v115;
  v98(v114);
  sub_214423C30();
  v111 = *(_QWORD *)(v53 + 8);
  ((void (*)(char *, uint64_t))v111)(v55, v54);
  v108 = *(_QWORD *)(v50 + 8);
  ((void (*)(char *, uint64_t))v108)(v51, v52);
  v56 = *(void (**)(char *, uint64_t))(v47 + 8);
  v57 = v122;
  v56(v48, v122);
  ((void (*)(char *, _QWORD, uint64_t))v101)(v48, v102, v57);
  v100(v51, *MEMORY[0x24BDCF070], v52);
  ((void (*)(char *, _QWORD, uint64_t))v98)(v55, v99, v54);
  v58 = v118;
  sub_214423C30();
  ((void (*)(char *, uint64_t))v111)(v55, v54);
  v59 = v51;
  v60 = v58;
  v61 = v52;
  v62 = v117;
  ((void (*)(char *, uint64_t))v108)(v59, v61);
  v56(v48, v122);
  v63 = v109;
  sub_2141E070C(v123, v109, &qword_253F13340);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v65 = v64(v63, 1, v58);
  v95 = v46;
  if (v65 == 1)
  {
    v66 = (uint64_t)v106;
    v67 = (uint64_t)v97;
  }
  else
  {
    v69 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
    v70 = v92;
    v69(v92, v63, v58);
    v63 = (uint64_t)v93;
    sub_2141E070C(v120, (uint64_t)v93, &qword_253F13340);
    v71 = v64(v63, 1, v58);
    v66 = (uint64_t)v106;
    v67 = (uint64_t)v97;
    if (v71 != 1)
    {
      v80 = v62;
      v81 = v91;
      v69(v91, v63, v58);
      sub_214423B58();
      v83 = fabs(v82);
      sub_214423B58();
      v85 = fabs(v84);
      if (v83 >= v85)
        v86 = v70;
      else
        v86 = v81;
      if (v83 >= v85)
        v87 = v81;
      else
        v87 = v70;
      v62 = v80;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v86, v60);
      v69((char *)v67, (uint64_t)v87, v60);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v67, 0, 1, v60);
      v77 = v119;
      v72 = v120;
      v79 = v94;
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v58);
  }
  v72 = v120;
  sub_2141E0750(v63, &qword_253F13340);
  v73 = v104;
  sub_2141E070C(v123, v104, &qword_253F13340);
  v74 = v103;
  v75 = v73;
  sub_2141E070C(v72, v103, &qword_253F13340);
  v76 = v64(v73, 1, v60);
  v77 = v119;
  v78 = v105;
  if (v76 == 1)
  {
    sub_2141E801C(v74, v105, &qword_253F13340);
    sub_2141E0750(v75, &qword_253F13340);
  }
  else
  {
    sub_2141E0750(v74, &qword_253F13340);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v78, v75, v60);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v78, 0, 1, v60);
  }
  v79 = v94;
  sub_2141E801C(v78, v67, &qword_253F13340);
LABEL_18:
  sub_2141E070C(v67, v66, &qword_253F13340);
  if (v64(v66, 1, v60) == 1)
  {
    sub_2141E0750(v67, &qword_253F13340);
    sub_2141E0750(v72, &qword_253F13340);
    sub_2141E0750(v123, &qword_253F13340);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v121, v60);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v95, v96);
    sub_2141E0750(v66, &qword_253F13340);
    *(double *)&result = 0.0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v79, v66, v60);
    sub_2144239F0();
    v89 = v88;
    v90 = *(void (**)(char *, uint64_t))(v62 + 8);
    v90(v79, v60);
    sub_2141E0750(v67, &qword_253F13340);
    sub_2141E0750(v72, &qword_253F13340);
    sub_2141E0750(v123, &qword_253F13340);
    v90(v121, v60);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v95, v96);
    return v89;
  }
  return result;
}

uint64_t sub_2143BADF0(unsigned __int8 a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t (*v29)(_QWORD);
  void (*v30)(char *, double *, uint64_t);
  char *v31;
  unsigned int *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  double v44;
  double v45;
  double v46;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;

  v59 = a2;
  LODWORD(v62) = a1;
  v4 = sub_214423BF4();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_214423BE8();
  v7 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v54 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_214423BC4();
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v12);
  v55 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v53 = (char *)&v48 - v15;
  v16 = sub_214423B70();
  v51 = *(_QWORD *)(v16 - 8);
  v52 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v48 - v20;
  v22 = sub_214423960();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ValueAlignment(0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (double *)((char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v63, (uint64_t)v28, v29);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v48 = v18;
    v49 = v23;
    v30 = *(void (**)(char *, double *, uint64_t))(v23 + 32);
    v50 = v22;
    v30(v25, v28, v22);
    sub_2144239E4();
    v31 = v11;
    (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v11, *MEMORY[0x24BDCF020], v61);
    v32 = (unsigned int *)MEMORY[0x24BDCF068];
    if ((v62 & 1) != 0)
      v32 = (unsigned int *)MEMORY[0x24BDCF070];
    v33 = v54;
    v34 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v54, *v32, v56);
    v35 = (uint64_t)v21;
    v36 = v34;
    v37 = v57;
    v38 = v58;
    (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v6, *MEMORY[0x24BDCF0B0], v58);
    v39 = (uint64_t)v53;
    v62 = v25;
    v63 = v35;
    sub_214423C30();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v38);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v36);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v61);
    v40 = v55;
    sub_2141E070C(v39, v55, &qword_253F13340);
    v42 = v51;
    v41 = v52;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v40, 1, v52) == 1)
    {
      v46 = 0.0;
    }
    else
    {
      v43 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v48, v40, v41);
      sub_2144239F0();
      v45 = v44;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
      v46 = v45;
    }
    sub_2141E0750(v39, &qword_253F13340);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v63, v41);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v62, v50);
  }
  else if ((v62 & 1) != 0)
  {
    v46 = a3 - *v28;
  }
  else
  {
    v46 = *v28 + a3;
  }
  return *(_QWORD *)&v46;
}

uint64_t static MajorValueAlignment.unit<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2143BA464(a1, a2, a3, v10);
  v11 = type metadata accessor for ValueAlignment(0);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 2, v11);
  return sub_2141FE1E0((uint64_t)v10, a4, type metadata accessor for MajorValueAlignmentStorage);
}

uint64_t static MajorValueAlignment.matching<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_214423960();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  v5 = type metadata accessor for ValueAlignment(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 2, v5);
}

uint64_t static MajorValueAlignment.page.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ValueAlignment(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 2, v5);
  return sub_2141FE1E0((uint64_t)v4, a1, type metadata accessor for MajorValueAlignmentStorage);
}

uint64_t ValueAlignedChartScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  _BOOL4 v73;
  double v74;
  uint64_t KeyPath;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _BYTE *v87;
  double v88;
  int v89;
  double *v90;
  uint64_t (*v91)(double *, uint64_t, uint64_t);
  int v92;
  double *v93;
  double v94;
  uint64_t v95;
  double *v96;
  int v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  int v103;
  _BYTE *v104;
  uint64_t v105;
  unsigned __int8 v106;
  uint64_t *v107;
  double *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  _BYTE *v120;
  double v121;
  int v122;
  double *v123;
  uint64_t (*v124)(double *, uint64_t, uint64_t);
  int v125;
  double v126;
  double *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(double *, uint64_t, uint64_t, uint64_t);
  int v134;
  _BYTE *v135;
  _BYTE *v136;
  int v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  void (*v155)(uint64_t *, _QWORD);
  double *v156;
  _BYTE v158[4];
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  double *v175;
  double *v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _BYTE *v183;
  int *v184;
  uint64_t *v185;
  _BOOL4 v186;
  double *v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  double *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  uint64_t v211;
  _BYTE *v212;
  double *v213;
  _BYTE *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  _BYTE *v222;
  _BYTE *v223;
  unsigned __int8 v224;
  _QWORD v225[2];
  unsigned __int8 v226;
  double v227;
  unsigned __int8 v228;
  double v229;
  double v230;
  _QWORD v231[13];
  char v232;
  _QWORD v233[13];
  char v234;

  v4 = sub_214423C54();
  v189 = *(_QWORD *)(v4 - 8);
  v190 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v188 = &v158[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v184 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  MEMORY[0x24BDAC7A8](v184);
  v182 = &v158[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v180 = &v158[-v8];
  v9 = type metadata accessor for ValueAlignment(0);
  v195 = *(_QWORD *)(v9 - 8);
  v196 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v183 = &v158[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v179 = &v158[-v12];
  v13 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x24BDAC7A8](v13);
  v176 = (double *)&v158[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v177 = &v158[-v16];
  MEMORY[0x24BDAC7A8](v17);
  v175 = (double *)&v158[-v18];
  MEMORY[0x24BDAC7A8](v19);
  v174 = &v158[-v20];
  v21 = sub_2141D8BF8(&qword_254D6D7B0);
  MEMORY[0x24BDAC7A8](v21);
  v181 = &v158[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v23);
  v187 = (double *)&v158[-v24];
  MEMORY[0x24BDAC7A8](v25);
  v178 = &v158[-v26];
  MEMORY[0x24BDAC7A8](v27);
  v191 = (double *)&v158[-v28];
  v29 = type metadata accessor for ChartProxy();
  MEMORY[0x24BDAC7A8](v29);
  v185 = (uint64_t *)&v158[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v31);
  v33 = (uint64_t *)&v158[-v32];
  v193 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  MEMORY[0x24BDAC7A8](v193);
  v35 = &v158[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = sub_214423DD4();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v39 = &v158[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v194 = a1;
  sub_214423DC8();
  v41 = v40;
  v43 = v42;
  sub_2144245F0();
  v45 = v44;
  sub_2144245FC();
  v47 = v45 - v46;
  if (v41 > 0.0)
    v48 = v41;
  else
    v48 = 0.0;
  if (v47 >= v48)
    v49 = v48;
  else
    v49 = v47;
  sub_2144245F0();
  v51 = v50;
  sub_2144245FC();
  v53 = v51 - v52;
  if (v43 > 0.0)
    v54 = v43;
  else
    v54 = 0.0;
  if (v53 >= v54)
    v53 = v54;
  v230 = v49;
  v229 = v53;
  sub_2144245E4();
  sub_214423DC8();
  v56 = v55;
  v58 = v57;
  (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v39, v36);
  sub_2144245F0();
  v60 = v59;
  sub_2144245FC();
  v62 = v60 - v61;
  if (v56 > 0.0)
    v63 = v56;
  else
    v63 = 0.0;
  if (v62 >= v63)
    v64 = v63;
  else
    v64 = v62;
  sub_2144245F0();
  v66 = v65;
  sub_2144245FC();
  v68 = v66 - v67;
  if (v58 > 0.0)
    v69 = v58;
  else
    v69 = 0.0;
  if (v68 >= v69)
    v70 = v69;
  else
    v70 = v68;
  sub_214424620();
  v72 = fabs(v71);
  sub_2141FDEA0(a2, (uint64_t)v35, type metadata accessor for ChartScrollTargetBehaviorContext);
  if (v72 <= 0.3)
  {
    sub_214424620();
    v73 = fabs(v74) > 0.3;
  }
  else
  {
    v73 = 1;
  }
  v186 = v73;
  sub_2141DD370((uint64_t)v35, type metadata accessor for ChartScrollTargetBehaviorContext);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  sub_214424614();
  v76 = sub_214424650();
  sub_21442465C();
  if (sub_21442465C() == v76)
  {
    v77 = *(int *)(v193 + 20);
    v168 = a2;
    sub_2141FDEA0(a2 + v77, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ChartProxy);
    sub_2141FCAC0(v33 + 50, (uint64_t)&v197);
    sub_2141DD370((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
    v78 = v197;
    v79 = v198;
    v80 = v199;
    v81 = v201;
    v82 = v202;
    v83 = v203;
    v84 = v204;
    v85 = v205;
    v86 = v210;
    v169 = v209;
    v170 = v208;
    v171 = v207;
    v172 = v206;
    v173 = v200;
    sub_21421C7C0(v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210);
    sub_2141FD584((uint64_t)&v197);
    if (v86 == 255)
    {
      a2 = v168;
      goto LABEL_45;
    }
    v166 = v79;
    v167 = v78;
    v233[0] = v78;
    v233[1] = v79;
    v165 = v80;
    v233[2] = v80;
    v233[3] = v173;
    v233[4] = v81;
    v233[5] = v82;
    v233[6] = v83;
    v233[7] = v84;
    v233[8] = v85;
    v233[9] = v172;
    v233[10] = v171;
    v233[11] = v170;
    v233[12] = v169;
    v159 = v86;
    v234 = v86 & 1;
    v163 = v82;
    v164 = v81;
    v161 = v84;
    v162 = v83;
    v160 = v85;
    if (v186)
    {
      v87 = v174;
      sub_2141FDEA0(v192 + v184[6], (uint64_t)v174, type metadata accessor for MajorValueAlignmentStorage);
      v88 = *(double *)&v225[1];
      v89 = v226;
      v90 = v175;
      sub_2141FDEA0((uint64_t)v87, (uint64_t)v175, type metadata accessor for MajorValueAlignmentStorage);
      v91 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v195 + 48);
      v92 = v91(v90, 2, v196);
      if (v92)
      {
        v93 = v191;
        a2 = v168;
        if (v92 == 1)
        {
          v94 = 1.0;
          if (!v89)
            v94 = v88;
          *v191 = v94;
          swift_storeEnumTagMultiPayload();
          v95 = 0;
        }
        else
        {
          v95 = 1;
        }
      }
      else
      {
        v93 = v191;
        sub_2141FE1E0((uint64_t)v90, (uint64_t)v191, type metadata accessor for ValueAlignment);
        v95 = 0;
        a2 = v168;
      }
      v97 = 1;
      v98 = v93;
      v99 = v196;
      (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v98, v95, 1, v196);
      sub_2141DD370((uint64_t)v87, type metadata accessor for MajorValueAlignmentStorage);
      v100 = v99;
      v96 = v191;
      if (v91(v191, 1, v100) != 1)
        goto LABEL_41;
    }
    else
    {
      v96 = v191;
      (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v191, 1, 1, v196);
      a2 = v168;
    }
    v97 = 0;
LABEL_41:
    v101 = v178;
    sub_2141E070C((uint64_t)v96, (uint64_t)v178, &qword_254D6D7B0);
    v102 = v180;
    sub_2141FDEA0(v192, (uint64_t)v180, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
    v103 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v195 + 48))(v101, 1, v196);
    v104 = v179;
    if (v103 == 1)
    {
      sub_2141FDEA0((uint64_t)v102, (uint64_t)v179, type metadata accessor for ValueAlignment);
      sub_2141DD370((uint64_t)v102, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
      sub_2141E0750((uint64_t)v101, &qword_254D6D7B0);
    }
    else
    {
      sub_2141DD370((uint64_t)v102, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
      sub_2141FE1E0((uint64_t)v101, (uint64_t)v104, type metadata accessor for ValueAlignment);
    }
    v105 = (uint64_t)v188;
    sub_214423C24();
    sub_2143BD0F0(&v230, v97, (uint64_t)v104, (uint64_t)v233, v105, v64);
    sub_21421BB38(v167, v166, v165, v173, v164, v163, v162, v161, v160, v172, v171, v170, v169, v159);
    (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v105, v190);
    sub_2141DD370((uint64_t)v104, type metadata accessor for ValueAlignment);
    sub_2141E0750((uint64_t)v191, &qword_254D6D7B0);
  }
LABEL_45:
  sub_214424614();
  v106 = sub_214424668();
  sub_21442465C();
  if (sub_21442465C() != v106)
    goto LABEL_63;
  v107 = v185;
  sub_2141FDEA0(a2 + *(int *)(v193 + 20), (uint64_t)v185, (uint64_t (*)(_QWORD))type metadata accessor for ChartProxy);
  sub_2141FCAC0(v107 + 50, (uint64_t)&v197);
  sub_2141DD370((uint64_t)v107, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v108 = v212;
  v109 = v214;
  v110 = v216;
  v111 = v217;
  v112 = v218;
  v114 = v219;
  v113 = v220;
  v115 = v224;
  v179 = v223;
  v180 = v222;
  v185 = v221;
  v193 = v211;
  v191 = v213;
  v178 = v215;
  sub_21421C7C0(v211, (uint64_t)v212, (uint64_t)v213, (uint64_t)v214, (uint64_t)v215, v216, v217, v218, v219, v220, (uint64_t)v221, (uint64_t)v222, (uint64_t)v223, v224);
  sub_2141FD584((uint64_t)&v197);
  if (v115 == 255)
    goto LABEL_63;
  v231[0] = v193;
  v174 = v109;
  v175 = (double *)v108;
  v231[1] = v108;
  v231[2] = v191;
  v231[3] = v109;
  v231[4] = v178;
  v116 = v110;
  v231[5] = v110;
  v117 = v111;
  v231[6] = v111;
  v118 = v112;
  v231[7] = v112;
  v119 = v114;
  v231[8] = v114;
  v173 = v113;
  v231[9] = v113;
  v231[10] = v185;
  v231[11] = v180;
  v231[12] = v179;
  LODWORD(v172) = v115;
  v232 = v115 & 1;
  if (!v186)
  {
    v127 = v187;
    (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v187, 1, 1, v196);
    v128 = v116;
    v129 = v117;
    v130 = v118;
LABEL_58:
    v186 = 0;
    goto LABEL_59;
  }
  v120 = v177;
  sub_2141FDEA0(v192 + v184[7], (uint64_t)v177, type metadata accessor for MajorValueAlignmentStorage);
  v121 = v227;
  v122 = v228;
  v123 = v176;
  sub_2141FDEA0((uint64_t)v120, (uint64_t)v176, type metadata accessor for MajorValueAlignmentStorage);
  v124 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v195 + 48);
  v125 = v124(v123, 2, v196);
  if (!v125)
  {
    v127 = v187;
    sub_2141FE1E0((uint64_t)v123, (uint64_t)v187, type metadata accessor for ValueAlignment);
LABEL_55:
    v131 = 0;
    goto LABEL_57;
  }
  if (v125 == 1)
  {
    v126 = 1.0;
    if (!v122)
      v126 = v121;
    v127 = v187;
    *v187 = v126;
    swift_storeEnumTagMultiPayload();
    goto LABEL_55;
  }
  v131 = 1;
  v127 = v187;
LABEL_57:
  v132 = v196;
  v133 = *(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56);
  v186 = 1;
  v133(v127, v131, 1, v196);
  sub_2141DD370((uint64_t)v120, type metadata accessor for MajorValueAlignmentStorage);
  v134 = v124(v127, 1, v132);
  v128 = v116;
  v129 = v117;
  v130 = v118;
  if (v134 == 1)
    goto LABEL_58;
LABEL_59:
  v135 = v181;
  sub_2141E070C((uint64_t)v127, (uint64_t)v181, &qword_254D6D7B0);
  v136 = v182;
  sub_2141FDEA0(v192, (uint64_t)v182, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
  v137 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v195 + 48))(v135, 1, v196);
  v138 = v183;
  v139 = v173;
  if (v137 == 1)
  {
    sub_2141FDEA0((uint64_t)&v136[v184[5]], (uint64_t)v183, type metadata accessor for ValueAlignment);
    sub_2141DD370((uint64_t)v136, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
    sub_2141E0750((uint64_t)v135, &qword_254D6D7B0);
  }
  else
  {
    sub_2141DD370((uint64_t)v136, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
    sub_2141FE1E0((uint64_t)v135, (uint64_t)v138, type metadata accessor for ValueAlignment);
  }
  v140 = (uint64_t)v188;
  sub_214423C24();
  sub_2143BD0F0(&v229, v186, (uint64_t)v138, (uint64_t)v231, v140, v70);
  sub_21421BB38(v193, (uint64_t)v175, (uint64_t)v191, (uint64_t)v174, (uint64_t)v178, v128, v129, v130, v119, v139, (uint64_t)v185, (uint64_t)v180, (uint64_t)v179, v172);
  (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v140, v190);
  sub_2141DD370((uint64_t)v138, type metadata accessor for ValueAlignment);
  sub_2141E0750((uint64_t)v187, &qword_254D6D7B0);
LABEL_63:
  v141 = v230;
  v142 = v229;
  sub_2144245F0();
  v144 = v143;
  sub_2144245FC();
  v146 = v144 - v145;
  if (v141 > 0.0)
    v147 = v141;
  else
    v147 = 0.0;
  if (v146 >= v147)
    v148 = v147;
  else
    v148 = v146;
  sub_2144245F0();
  v150 = v149;
  sub_2144245FC();
  v152 = v150 - v151;
  if (v142 > 0.0)
    v153 = v142;
  else
    v153 = 0.0;
  if (v152 >= v153)
    v154 = v153;
  else
    v154 = v152;
  v155 = (void (*)(uint64_t *, _QWORD))sub_214423DBC();
  *v156 = v148;
  v156[1] = v154;
  v155(&v197, 0);
  return sub_2143BCEE4((uint64_t)v225);
}

uint64_t sub_2143BC100()
{
  sub_2141D8BF8(&qword_254D6DB28);
  return sub_214424ED8() & 1;
}

uint64_t sub_2143BC170(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  sub_2141E88D0(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5, v6);
}

uint64_t sub_2143BC1CC()
{
  sub_2141D8BF8(&qword_254D6DB10);
  return AGCompareValues();
}

double sub_2143BC21C()
{
  double result;

  byte_253F1CA48 = sub_21442465C();
  qword_253F1CA50 = 0;
  byte_253F1CA58 = 1;
  qword_253F1CA60 = 0;
  byte_253F1CA68 = 1;
  result = 0.0;
  unk_253F1CA70 = 0u;
  unk_253F1CA80 = 0u;
  qword_253F1CA90 = 0;
  return result;
}

uint64_t sub_2143BC264@<X0>(uint64_t a1@<X8>)
{
  if (qword_253F154A8 != -1)
    swift_once();
  return sub_2143C5DF0((uint64_t)&byte_253F1CA48, a1);
}

uint64_t sub_2143BC2B4()
{
  sub_2143C6414();
  return sub_214423EE8();
}

double sub_2143BC304()
{
  double result;

  qword_254D76068 = 0;
  result = 0.0;
  xmmword_254D76048 = 0u;
  unk_254D76058 = 0u;
  word_254D76070 = -256;
  xmmword_254D76078 = 0u;
  unk_254D76088 = 0u;
  qword_254D76098 = 0;
  word_254D760A0 = -256;
  return result;
}

uint64_t sub_2143BC330@<X0>(uint64_t a1@<X8>)
{
  if (qword_254D68EC0 != -1)
    swift_once();
  return sub_2143C5D4C((uint64_t)&xmmword_254D76048, a1);
}

uint64_t sub_2143BC380()
{
  sub_2143C63D0();
  return sub_214423EE8();
}

uint64_t sub_2143BC3D0(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v10;
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15[5];
  char v16;
  double v17;
  uint64_t v18;
  char v19;
  char v20;

  sub_2143C5C64(a1, (uint64_t)v15);
  sub_2143C5C64(a2, (uint64_t)&v17);
  if ((v16 & 1) == 0)
  {
    sub_2143C5C64(v15, (uint64_t)&v12);
    v4 = v12;
    v5 = v13;
    if ((v20 & 1) != 0)
    {
      sub_2141E60B8(v12, v13, v14);
LABEL_7:
      sub_2141E0750((uint64_t)v15, &qword_254D6DB18);
LABEL_22:
      v3 = 0;
      return v3 & 1;
    }
    v6 = *(_QWORD *)&v17;
    v7 = v18;
    v8 = v19;
    if (v14)
    {
      if (v14 == 1)
      {
        if (v19 != 1)
          goto LABEL_20;
        goto LABEL_13;
      }
      if (v19 == 2)
      {
        if (v12 == *(_QWORD *)&v17 && v13 == v18)
        {
          sub_2141E60B8(v12, v13, 2);
          sub_2141E60B8(v4, v5, 2);
        }
        else
        {
          v10 = sub_214425790();
          sub_2141E60B8(v4, v5, 2);
          sub_2141E60B8(v6, v7, 2);
          if ((v10 & 1) == 0)
            goto LABEL_21;
        }
LABEL_25:
        sub_2143C535C((uint64_t)v15);
        v3 = 1;
        return v3 & 1;
      }
      sub_2141E60B8(v12, v13, 2);
    }
    else if (!v19)
    {
LABEL_13:
      if (*(double *)&v12 != v17)
        goto LABEL_21;
      goto LABEL_25;
    }
LABEL_20:
    sub_2141E60B8(v6, v7, v8);
LABEL_21:
    sub_2143C535C((uint64_t)v15);
    goto LABEL_22;
  }
  sub_2143C5C64(v15, (uint64_t)&v12);
  if (v20 != 1)
  {
    sub_2143C5C98((uint64_t)&v12);
    goto LABEL_7;
  }
  sub_2143C5CCC((uint64_t)&v17, (uint64_t)v11);
  v3 = sub_2144001A0((uint64_t)&v12, (uint64_t)v11);
  sub_2143C5C98((uint64_t)v11);
  sub_2143C5C98((uint64_t)&v12);
  sub_2143C535C((uint64_t)v15);
  return v3 & 1;
}

BOOL sub_2143BC5B4(double *a1, double *a2)
{
  char v3;
  char v4;
  char v5;
  _OWORD v7[2];
  uint64_t v8;
  _BYTE v9[40];
  _BYTE v10[24];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];
  _BYTE v16[40];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v3 = *((_BYTE *)a2 + 16);
  if (((_BYTE)a1[2] & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 16))
      return 0;
  }
  else
  {
    if (a1[1] != a2[1])
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  v4 = *((_BYTE *)a2 + 32);
  if (((_BYTE)a1[4] & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 32))
      return 0;
  }
  else
  {
    if (a1[3] != a2[3])
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  sub_2141E070C((uint64_t)(a1 + 5), (uint64_t)v16, &qword_253F13438);
  sub_2141E070C((uint64_t)(a2 + 5), (uint64_t)v15, &qword_253F13438);
  sub_2141E070C((uint64_t)v16, (uint64_t)v10, &qword_253F13438);
  sub_2141E070C((uint64_t)v15, (uint64_t)&v12, &qword_253F13438);
  if (v11)
  {
    sub_2141E070C((uint64_t)v10, (uint64_t)v9, &qword_253F13438);
    if (*((_QWORD *)&v13 + 1))
    {
      v7[0] = v12;
      v7[1] = v13;
      v8 = v14;
      sub_2141D8BF8(&qword_254D6DB10);
      v5 = AGCompareValues();
      sub_2141DEB7C((uint64_t)v7);
      sub_2141E0750((uint64_t)v15, &qword_253F13438);
      sub_2141E0750((uint64_t)v16, &qword_253F13438);
      sub_2141DEB7C((uint64_t)v9);
      sub_2141E0750((uint64_t)v10, &qword_253F13438);
      return (v5 & 1) != 0;
    }
    sub_2141E0750((uint64_t)v15, &qword_253F13438);
    sub_2141E0750((uint64_t)v16, &qword_253F13438);
    sub_2141DEB7C((uint64_t)v9);
  }
  else
  {
    sub_2141E0750((uint64_t)v15, &qword_253F13438);
    sub_2141E0750((uint64_t)v16, &qword_253F13438);
    if (!*((_QWORD *)&v13 + 1))
    {
      sub_2141E0750((uint64_t)v10, &qword_253F13438);
      return 1;
    }
  }
  sub_2141E0750((uint64_t)v10, &qword_254D6DB20);
  return 0;
}

BOOL sub_2143BC7CC(uint64_t a1, uint64_t a2)
{
  char v4;
  char v6;
  _OWORD v7[3];
  uint64_t v8[6];
  _BYTE v9[41];
  unsigned __int8 v10;
  __int128 v11[2];
  unsigned __int8 v12;
  _BYTE v13[48];
  _BYTE v14[48];

  sub_2141E070C(a1, (uint64_t)v14, &qword_253F12388);
  sub_2141E070C(a2, (uint64_t)v13, &qword_253F12388);
  sub_2141E070C((uint64_t)v14, (uint64_t)v9, &qword_253F12388);
  sub_2141E070C((uint64_t)v13, (uint64_t)v11, &qword_253F12388);
  if (v10 == 255)
  {
    sub_2141E0750((uint64_t)v13, &qword_253F12388);
    sub_2141E0750((uint64_t)v14, &qword_253F12388);
    if (v12 != 255)
    {
LABEL_11:
      sub_2141E0750((uint64_t)v9, &qword_253F11C78);
      return 0;
    }
    sub_2141E0750((uint64_t)v9, &qword_253F12388);
LABEL_6:
    sub_2141E070C(a1 + 48, (uint64_t)v14, &qword_253F12388);
    sub_2141E070C(a2 + 48, (uint64_t)v13, &qword_253F12388);
    sub_2141E070C((uint64_t)v14, (uint64_t)v9, &qword_253F12388);
    sub_2141E070C((uint64_t)v13, (uint64_t)v11, &qword_253F12388);
    if (v10 == 255)
    {
      sub_2141E0750((uint64_t)v13, &qword_253F12388);
      sub_2141E0750((uint64_t)v14, &qword_253F12388);
      if (v12 == 255)
      {
        sub_2141E0750((uint64_t)v9, &qword_253F12388);
        return 1;
      }
      goto LABEL_11;
    }
    sub_2141E070C((uint64_t)v9, (uint64_t)v8, &qword_253F12388);
    if (v12 == 255)
      goto LABEL_10;
    sub_2143C5C4C(v11, v7);
    v6 = sub_2143BC3D0(v8, (uint64_t *)v7);
    sub_2143C535C((uint64_t)v7);
    sub_2141E0750((uint64_t)v13, &qword_253F12388);
    sub_2141E0750((uint64_t)v14, &qword_253F12388);
    sub_2143C535C((uint64_t)v8);
    sub_2141E0750((uint64_t)v9, &qword_253F12388);
    return (v6 & 1) != 0;
  }
  sub_2141E070C((uint64_t)v9, (uint64_t)v8, &qword_253F12388);
  if (v12 == 255)
  {
LABEL_10:
    sub_2141E0750((uint64_t)v13, &qword_253F12388);
    sub_2141E0750((uint64_t)v14, &qword_253F12388);
    sub_2143C535C((uint64_t)v8);
    goto LABEL_11;
  }
  sub_2143C5C4C(v11, v7);
  v4 = sub_2143BC3D0(v8, (uint64_t *)v7);
  sub_2143C535C((uint64_t)v7);
  sub_2141E0750((uint64_t)v13, &qword_253F12388);
  sub_2141E0750((uint64_t)v14, &qword_253F12388);
  sub_2143C535C((uint64_t)v8);
  sub_2141E0750((uint64_t)v9, &qword_253F12388);
  if ((v4 & 1) != 0)
    goto LABEL_6;
  return 0;
}

uint64_t sub_2143BCA64()
{
  return swift_deallocObject();
}

double sub_2143BCA74(uint64_t a1)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_2143BCA84()
{
  return swift_deallocObject();
}

double sub_2143BCA94(uint64_t a1)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *(double *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_2143BCAA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9[5];

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v9[3] = v3;
  v9[4] = v4;
  v7 = sub_2141D8DD8(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, v6, v3);
  return sub_2141FA160((uint64_t)v9, a1 + 40, &qword_253F13438);
}

uint64_t sub_2143BCB20()
{
  sub_2143C5D80();
  return sub_214424224();
}

uint64_t sub_2143BCB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD v8[2];
  char v9;
  char v10;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v8[0] = sub_214400B9C(v1 + ((v4 + 48) & ~v4), v3, *(_QWORD *)(v1 + 40));
  v8[1] = v5;
  v9 = v6;
  v10 = 0;
  return sub_2141FA160((uint64_t)v8, a1, &qword_253F12388);
}

uint64_t sub_2143BCBCC(uint64_t a1)
{
  return sub_2143BCD38(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2143B725C);
}

uint64_t sub_2143BCBDC()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_2143BCC34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD v8[2];
  char v9;
  char v10;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v8[0] = sub_214400B9C(v1 + ((v4 + 48) & ~v4), v3, *(_QWORD *)(v1 + 40));
  v8[1] = v5;
  v9 = v6;
  v10 = 0;
  return sub_2141FA160((uint64_t)v8, a1 + 48, &qword_253F12388);
}

uint64_t sub_2143BCC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_214424B3C();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = v0 + ((v3 + 48) & ~v3);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 32), v1);
  return swift_deallocObject();
}

uint64_t sub_2143BCD2C(uint64_t a1)
{
  return sub_2143BCD38(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2143B7588);
}

uint64_t sub_2143BCD38(uint64_t a1, uint64_t (*a2)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_QWORD *)v2 + 2);
  v5 = *((_QWORD *)v2 + 3);
  v6 = *((_QWORD *)v2 + 4);
  v7 = *((_QWORD *)v2 + 5);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_214424B3C() - 8) + 80);
  return a2(a1, &v2[(v8 + 48) & ~v8], v4, v5, v6, v7);
}

uint64_t type metadata accessor for ChartScrollTargetBehaviorContext(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6D818);
}

uint64_t sub_2143BCDC4()
{
  sub_2143C5D08();
  return sub_214424224();
}

uint64_t type metadata accessor for MajorValueAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MajorValueAlignment);
}

uint64_t type metadata accessor for MajorValueAlignmentStorage(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_254D6DAB8);
}

uint64_t type metadata accessor for ValueAlignment(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6DA10);
}

uint64_t type metadata accessor for ValueAlignedChartScrollTargetBehavior(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6D928);
}

uint64_t sub_2143BCE4C()
{
  return sub_214424608();
}

uint64_t sub_2143BCE70()
{
  return 8;
}

uint64_t sub_2143BCE7C()
{
  return swift_release();
}

uint64_t sub_2143BCE84(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_2143BCE94()
{
  sub_2141D8BF8(&qword_254D6DB28);
  return sub_214424DD0();
}

_QWORD *sub_2143BCED8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2143BCEE4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 64))
    _s6Charts15AnyChartContentVwxx_0(a1 + 40);
  return a1;
}

uint64_t sub_2143BCF14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  BOOL v33;
  int v34;
  double v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[13];
  char v44;
  _BYTE v45[48];
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;

  sub_2141E801C(a1, (uint64_t)v43, &qword_253F13368);
  v8 = v43[0];
  v9 = v43[1];
  v10 = v43[4];
  v41 = v43[3];
  v42 = v43[2];
  v12 = v43[5];
  v11 = v43[6];
  v13 = v43[7];
  v14 = v43[8];
  v39 = v43[10];
  v40 = v43[9];
  v37 = v43[12];
  v38 = v43[11];
  v36 = v44;
  result = sub_2141E801C(a1, (uint64_t)v45, &qword_253F13368);
  if ((v49 & 1) != 0)
  {
    v16 = 0.0;
    if ((v48 & 1) != 0)
    {
      v18 = 0.0;
      v20 = v41;
      v19 = v42;
      v22 = v39;
      v21 = v40;
      v24 = v37;
      v23 = v38;
      v25 = v36;
    }
    else
    {
      v17 = *(_QWORD *)(v47 + 16);
      v18 = 0.0;
      v20 = v41;
      v19 = v42;
      v22 = v39;
      v21 = v40;
      v24 = v37;
      v23 = v38;
      v25 = v36;
      if (v17)
      {
        v16 = *(double *)(v47 + 32);
        v18 = *(double *)(v47 + 32 + 8 * v17 - 8);
      }
    }
    v28 = v18 - v16 < 0.0;
  }
  else
  {
    v26 = *(_QWORD *)(v46 + 16);
    if (v26)
      v27 = COERCE_UNSIGNED_INT64(*(double *)(v46 + 32 + 8 * v26 - 8) - *(double *)(v46 + 32)) >> 63;
    else
      v27 = 0;
    v20 = v41;
    v19 = v42;
    v22 = v39;
    v21 = v40;
    v24 = v37;
    v23 = v38;
    v25 = v36;
    v29 = 0.0;
    if ((v48 & 1) != 0)
    {
      v31 = 0.0;
    }
    else
    {
      v30 = *(_QWORD *)(v47 + 16);
      v31 = 0.0;
      if (v30)
      {
        v29 = *(double *)(v47 + 32);
        v31 = *(double *)(v47 + 32 + 8 * v30 - 8);
      }
    }
    v32 = v31 - v29;
    v33 = v27 == 0;
    v28 = v27 == 0;
    v34 = !v33;
    if (v32 >= 0.0)
      v28 = v34;
  }
  v35 = 0.0;
  if (v28)
    v35 = a4;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v14;
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v22;
  *(_QWORD *)(a2 + 88) = v23;
  *(_QWORD *)(a2 + 96) = v24;
  *(_BYTE *)(a2 + 104) = v25;
  *(double *)(a2 + 112) = a3;
  *(double *)(a2 + 120) = a4;
  *(double *)(a2 + 128) = v35;
  return result;
}

uint64_t sub_2143BD0F0(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  double v18;
  char v19;
  uint64_t v20;
  void (*v21)(double *__return_ptr, double *);
  double *v22;
  double v23;
  uint64_t v24;
  char v25;
  char v26;
  void (*v27)(char *, uint64_t);
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  char v32;
  char v33;
  void (*v34)(double *__return_ptr, double *);
  double v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  void (*v47)(double *__return_ptr, double *);
  uint64_t v48;
  int v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  char v58;
  char v59[32];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  char v66;
  void (*v67)(double *__return_ptr, double *);
  uint64_t v68;
  char v69;

  v48 = a5;
  v49 = a2;
  v50 = a1;
  sub_2141E801C(a4, (uint64_t)v59, &qword_253F13368);
  v9 = v60;
  v52 = v61;
  v53 = v62;
  v54 = v63;
  v55 = v64;
  v10 = type metadata accessor for ValueAlignment(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (double *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_214423C54();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a4;
  result = sub_2141E801C(a4, (uint64_t)v65, &qword_253F13368);
  if ((v69 & 1) == 0)
  {
    v21 = v67;
    if (!v67)
      return result;
    v47 = (void (*)(double *__return_ptr, double *))v65[0];
    v46 = v65[1];
    v22 = v50;
    v56 = *v50;
    swift_retain();
    sub_2141DD47C(v9);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v54, v55);
    v21(&v57, &v56);
    if ((v58 & 1) == 0)
    {
      v23 = v57;
      sub_214423C24();
      *(double *)&v24 = COERCE_DOUBLE(sub_2143BA508((uint64_t)v16, v23));
      v26 = v25;
      v27 = *(void (**)(char *, uint64_t))(v14 + 8);
      v27(v16, v13);
      if ((v26 & 1) == 0)
      {
        v28 = *(double *)&v24;
        if ((v49 & 1) == 0)
        {
          v37 = v51;
          v34 = v47;
LABEL_31:
          v56 = v28;
          v34(&v57, &v56);
          result = sub_2142BEFB0(v37);
          *v22 = v57;
          return result;
        }
        v29 = vabdd_f64(*v22, a6);
        if (qword_253F11F50 != -1)
          swift_once();
        if (*(double *)&qword_253F1C988 < v29)
        {
          v56 = a6;
          ((void (*)(double *__return_ptr, double *, double))v21)(&v57, &v56, *(double *)&qword_253F1C988);
          if ((v58 & 1) == 0)
          {
            v30 = v57;
            sub_214423C24();
            *(double *)&v31 = COERCE_DOUBLE(sub_2143BA508((uint64_t)v16, v30));
            v33 = v32;
            v27(v16, v13);
            if ((v33 & 1) == 0)
            {
              v56 = *(double *)&v31;
              v34 = v47;
              v47(&v57, &v56);
              v35 = v57;
              v56 = *(double *)&v24;
              v34(&v57, &v56);
              if (vabdd_f64(v35, v57) >= *(double *)&qword_253F1C988)
              {
                v37 = v51;
                v22 = v50;
              }
              else
              {
                v22 = v50;
                v36 = sub_2143BADF0(COERCE_UNSIGNED_INT64(*v50 - a6) >> 63, v48, *(double *)&v24);
                v37 = v51;
                if ((v38 & 1) == 0)
                  v28 = *(double *)&v36;
              }
              goto LABEL_31;
            }
          }
        }
      }
    }
    return sub_2142BEFB0(v51);
  }
  if (*(_QWORD *)(v68 + 16))
  {
    v18 = *(double *)&v65[2];
    v19 = v66;
    sub_2141FDEA0(a3, (uint64_t)v12, type metadata accessor for ValueAlignment);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 1)
    {
      sub_2141D8BF8(qword_254D6A8D0);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_214426EF0;
      *(_QWORD *)(v20 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v20 + 32) = 0xD00000000000003ALL;
      *(_QWORD *)(v20 + 40) = 0x800000021445B290;
      swift_retain();
      sub_2141DD47C(v9);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v54, v55);
      sub_21442585C();
      swift_bridgeObjectRelease();
      sub_2142BEFB0(v51);
      return sub_2141DD370((uint64_t)v12, type metadata accessor for ValueAlignment);
    }
    v39 = 0.0;
    if ((v19 & 1) == 0)
      v39 = v18;
    v40 = v39 * *v12;
    v41 = v50;
    v42 = *v50;
    v43 = v40 * round(*v50 / v40);
    if ((v49 & 1) == 0)
      goto LABEL_29;
    v44 = vabdd_f64(v42, a6);
    swift_retain();
    sub_2141DD47C(v9);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v54, v55);
    if (qword_253F11F50 != -1)
      swift_once();
    v45 = *(double *)&qword_253F1C988;
    result = sub_2142BEFB0(v51);
    if (v45 < v44)
    {
      if (vabdd_f64(v40 * round(a6 / v40), v43) < v45)
      {
        if (COERCE__INT64(v42 - a6) < 0)
          v43 = v43 - v40;
        else
          v43 = v40 + v43;
      }
      v41 = v50;
LABEL_29:
      *v41 = v43;
    }
  }
  return result;
}

uint64_t sub_2143BD6D8(uint64_t a1)
{
  uint64_t result;

  result = sub_2141FED10(&qword_254D6D7B8, type metadata accessor for ValueAlignedChartScrollTargetBehavior, (uint64_t)&protocol conformance descriptor for ValueAlignedChartScrollTargetBehavior);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ChartScrollTargetBehaviorContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  char v14;
  _OWORD *v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  _OWORD *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  _OWORD *v37;
  int v38;
  __int128 v39;
  __int128 v40;
  BOOL *v41;
  _OWORD *v42;
  _OWORD *v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  BOOL *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _OWORD *v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t *v109;
  int v110;
  char v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t *v115;
  int v116;
  char v117;
  uint64_t v118;
  __int128 v119;
  int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  int v153;
  __int128 v154;
  __int128 v155;
  _OWORD *v156;
  _OWORD *v157;
  int v158;
  __int128 v159;
  __int128 v160;
  _OWORD *v161;
  _OWORD *v162;
  int v163;
  __int128 v164;
  __int128 v165;
  _OWORD *v166;
  _OWORD *v167;
  int v168;
  __int128 v169;
  __int128 v170;
  _OWORD *v171;
  _OWORD *v172;
  int v173;
  __int128 v174;
  __int128 v175;
  _OWORD *v176;
  _OWORD *v177;
  int v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  BOOL *v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  char v212;
  char v213;
  char v214;
  char v215;
  uint64_t *v216;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v19;
  }
  v7 = sub_21442462C();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *(uint64_t *)((char *)a2 + v8 + 8);
  *(_QWORD *)v9 = *(uint64_t *)((char *)a2 + v8);
  *((_QWORD *)v9 + 1) = v11;
  v12 = *(uint64_t *)((char *)a2 + v8 + 24);
  *((_QWORD *)v9 + 2) = *(uint64_t *)((char *)a2 + v8 + 16);
  *((_QWORD *)v9 + 3) = v12;
  v13 = (_OWORD *)((char *)a2 + v8 + 32);
  v14 = v10[315];
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v14 & 1) != 0)
  {
    v15 = v9 + 32;
    v16 = v10[72];
    if (v16 == 255)
    {
      v17 = *((_OWORD *)v10 + 3);
      *v15 = *v13;
      *((_OWORD *)v9 + 3) = v17;
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(v10 + 57);
    }
    else
    {
      v20 = *(_OWORD *)(v10 + 56);
      *(_OWORD *)(v9 + 56) = v20;
      (**(void (***)(_OWORD *, uint64_t))(v20 - 8))(v15, (uint64_t)(v10 + 32));
      v9[72] = (v16 & 1) != 0;
    }
    v21 = v9 + 80;
    v22 = v10 + 80;
    v23 = v10[120];
    if (v23 == 255)
    {
      v24 = *((_OWORD *)v10 + 6);
      *v21 = *v22;
      *((_OWORD *)v9 + 6) = v24;
      *(_OWORD *)(v9 + 105) = *(_OWORD *)(v10 + 105);
    }
    else
    {
      v25 = *(_OWORD *)(v10 + 104);
      *(_OWORD *)(v9 + 104) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v21, v22);
      v9[120] = (v23 & 1) != 0;
    }
    v26 = v9 + 128;
    v27 = v10 + 128;
    v28 = v10[168];
    if (v28 == 255)
    {
      v29 = *((_OWORD *)v10 + 9);
      *v26 = *v27;
      *((_OWORD *)v9 + 9) = v29;
      *(_OWORD *)(v9 + 153) = *(_OWORD *)(v10 + 153);
    }
    else
    {
      v30 = *(_OWORD *)(v10 + 152);
      *(_OWORD *)(v9 + 152) = v30;
      (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v26, v27);
      v9[168] = (v28 & 1) != 0;
    }
    v31 = v9 + 176;
    v32 = v10 + 176;
    v33 = v10[216];
    if (v33 == 255)
    {
      v34 = *((_OWORD *)v10 + 12);
      *v31 = *v32;
      *((_OWORD *)v9 + 12) = v34;
      *(_OWORD *)(v9 + 201) = *(_OWORD *)(v10 + 201);
    }
    else
    {
      v35 = *(_OWORD *)(v10 + 200);
      *(_OWORD *)(v9 + 200) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v35 - 8))(v31, v32);
      v9[216] = (v33 & 1) != 0;
    }
    v36 = v9 + 224;
    v37 = v10 + 224;
    v38 = v10[264];
    if (v38 == 255)
    {
      v39 = *((_OWORD *)v10 + 15);
      *v36 = *v37;
      *((_OWORD *)v9 + 15) = v39;
      *(_OWORD *)(v9 + 249) = *(_OWORD *)(v10 + 249);
    }
    else
    {
      v40 = *(_OWORD *)(v10 + 248);
      *(_OWORD *)(v9 + 248) = v40;
      (**(void (***)(_OWORD *, _OWORD *))(v40 - 8))(v36, v37);
      v41 = (BOOL *)(v9 + 264);
      *v41 = (v38 & 1) != 0;
    }
    v42 = v9 + 272;
    v43 = v10 + 272;
    v44 = v10[312];
    if (v44 == 255)
    {
      v45 = *((_OWORD *)v10 + 18);
      *v42 = *v43;
      *((_OWORD *)v9 + 18) = v45;
      *(_OWORD *)(v9 + 297) = *(_OWORD *)(v10 + 297);
    }
    else
    {
      v46 = *((_QWORD *)v10 + 37);
      v47 = *((_QWORD *)v10 + 38);
      *((_QWORD *)v9 + 37) = v46;
      *((_QWORD *)v9 + 38) = v47;
      (**(void (***)(_OWORD *, _OWORD *))(v46 - 8))(v42, v43);
      v48 = (BOOL *)(v9 + 312);
      *v48 = (v44 & 1) != 0;
    }
    *(_WORD *)(v9 + 313) = *(_WORD *)(v10 + 313);
    v9[315] = 1;
  }
  else
  {
    *((_QWORD *)v9 + 4) = *(_QWORD *)v13;
    v9[315] = 0;
    swift_retain();
  }
  v9[316] = v10[316];
  v49 = *((_QWORD *)v10 + 40);
  if (v49)
  {
    v50 = *((_QWORD *)v10 + 41);
    *((_QWORD *)v9 + 40) = v49;
    *((_QWORD *)v9 + 41) = v50;
    swift_retain();
    v51 = *((_QWORD *)v10 + 42);
    if (v51)
      goto LABEL_38;
  }
  else
  {
    *((_OWORD *)v9 + 20) = *((_OWORD *)v10 + 20);
    v51 = *((_QWORD *)v10 + 42);
    if (v51)
    {
LABEL_38:
      v52 = *((_QWORD *)v10 + 43);
      *((_QWORD *)v9 + 42) = v51;
      *((_QWORD *)v9 + 43) = v52;
      swift_retain();
      v53 = *((_QWORD *)v10 + 44);
      if (v53)
        goto LABEL_39;
      goto LABEL_44;
    }
  }
  *((_OWORD *)v9 + 21) = *((_OWORD *)v10 + 21);
  v53 = *((_QWORD *)v10 + 44);
  if (v53)
  {
LABEL_39:
    v54 = *((_QWORD *)v10 + 45);
    *((_QWORD *)v9 + 44) = v53;
    *((_QWORD *)v9 + 45) = v54;
    swift_retain();
    v55 = *((_QWORD *)v10 + 46);
    if (v55)
      goto LABEL_40;
LABEL_45:
    *((_OWORD *)v9 + 23) = *((_OWORD *)v10 + 23);
    v57 = *((_QWORD *)v10 + 48);
    if (v57)
      goto LABEL_41;
    goto LABEL_46;
  }
LABEL_44:
  *((_OWORD *)v9 + 22) = *((_OWORD *)v10 + 22);
  v55 = *((_QWORD *)v10 + 46);
  if (!v55)
    goto LABEL_45;
LABEL_40:
  v56 = *((_QWORD *)v10 + 47);
  *((_QWORD *)v9 + 46) = v55;
  *((_QWORD *)v9 + 47) = v56;
  swift_retain();
  v57 = *((_QWORD *)v10 + 48);
  if (v57)
  {
LABEL_41:
    v58 = *((_QWORD *)v10 + 49);
    *((_QWORD *)v9 + 48) = v57;
    *((_QWORD *)v9 + 49) = v58;
    swift_retain();
    goto LABEL_47;
  }
LABEL_46:
  *((_OWORD *)v9 + 24) = *((_OWORD *)v10 + 24);
LABEL_47:
  v59 = v10[504];
  v216 = a1;
  if (v59 == 255)
  {
    v60 = *((_OWORD *)v10 + 30);
    *((_OWORD *)v9 + 29) = *((_OWORD *)v10 + 29);
    *((_OWORD *)v9 + 30) = v60;
    *(_OWORD *)(v9 + 489) = *(_OWORD *)(v10 + 489);
    v61 = *((_OWORD *)v10 + 26);
    *((_OWORD *)v9 + 25) = *((_OWORD *)v10 + 25);
    *((_OWORD *)v9 + 26) = v61;
    v62 = *((_OWORD *)v10 + 28);
    *((_OWORD *)v9 + 27) = *((_OWORD *)v10 + 27);
    *((_OWORD *)v9 + 28) = v62;
  }
  else
  {
    v211 = v59 & 1;
    v63 = *((_QWORD *)v10 + 50);
    v64 = *((_QWORD *)v10 + 51);
    v65 = *((_QWORD *)v10 + 52);
    v66 = *((_QWORD *)v10 + 53);
    v67 = *((_QWORD *)v10 + 54);
    v68 = *((_QWORD *)v10 + 55);
    v69 = *((_QWORD *)v10 + 56);
    v70 = *((_QWORD *)v10 + 57);
    v187 = *((_QWORD *)v10 + 58);
    v191 = *((_QWORD *)v10 + 59);
    v196 = *((_QWORD *)v10 + 60);
    v201 = *((_QWORD *)v10 + 61);
    v206 = *((_QWORD *)v10 + 62);
    sub_21421BAE4(v63, v64, v65, v66, v67, v68, v69, v70, v187);
    *((_QWORD *)v9 + 50) = v63;
    *((_QWORD *)v9 + 51) = v64;
    *((_QWORD *)v9 + 52) = v65;
    *((_QWORD *)v9 + 53) = v66;
    *((_QWORD *)v9 + 54) = v67;
    *((_QWORD *)v9 + 55) = v68;
    *((_QWORD *)v9 + 56) = v69;
    *((_QWORD *)v9 + 57) = v70;
    *((_QWORD *)v9 + 58) = v187;
    *((_QWORD *)v9 + 59) = v191;
    *((_QWORD *)v9 + 60) = v196;
    *((_QWORD *)v9 + 61) = v201;
    *((_QWORD *)v9 + 62) = v206;
    v9[504] = v211;
  }
  v71 = v10[616];
  if (v71 == 255)
  {
    v72 = *((_OWORD *)v10 + 37);
    *((_OWORD *)v9 + 36) = *((_OWORD *)v10 + 36);
    *((_OWORD *)v9 + 37) = v72;
    *(_OWORD *)(v9 + 601) = *(_OWORD *)(v10 + 601);
    v73 = *((_OWORD *)v10 + 33);
    *((_OWORD *)v9 + 32) = *((_OWORD *)v10 + 32);
    *((_OWORD *)v9 + 33) = v73;
    v74 = *((_OWORD *)v10 + 35);
    *((_OWORD *)v9 + 34) = *((_OWORD *)v10 + 34);
    *((_OWORD *)v9 + 35) = v74;
  }
  else
  {
    v212 = v71 & 1;
    v75 = *((_QWORD *)v10 + 64);
    v76 = *((_QWORD *)v10 + 65);
    v77 = *((_QWORD *)v10 + 66);
    v78 = *((_QWORD *)v10 + 67);
    v79 = *((_QWORD *)v10 + 68);
    v80 = *((_QWORD *)v10 + 69);
    v81 = *((_QWORD *)v10 + 70);
    v82 = *((_QWORD *)v10 + 71);
    v188 = *((_QWORD *)v10 + 72);
    v192 = *((_QWORD *)v10 + 73);
    v197 = *((_QWORD *)v10 + 74);
    v202 = *((_QWORD *)v10 + 75);
    v207 = *((_QWORD *)v10 + 76);
    sub_21421BAE4(v75, v76, v77, v78, v79, v80, v81, v82, v188);
    *((_QWORD *)v9 + 64) = v75;
    *((_QWORD *)v9 + 65) = v76;
    *((_QWORD *)v9 + 66) = v77;
    *((_QWORD *)v9 + 67) = v78;
    *((_QWORD *)v9 + 68) = v79;
    *((_QWORD *)v9 + 69) = v80;
    *((_QWORD *)v9 + 70) = v81;
    *((_QWORD *)v9 + 71) = v82;
    *((_QWORD *)v9 + 72) = v188;
    *((_QWORD *)v9 + 73) = v192;
    *((_QWORD *)v9 + 74) = v197;
    *((_QWORD *)v9 + 75) = v202;
    *((_QWORD *)v9 + 76) = v207;
    v9[616] = v212;
  }
  v83 = v10[720];
  if (v83 == 255)
  {
    v84 = *((_OWORD *)v10 + 44);
    *((_OWORD *)v9 + 43) = *((_OWORD *)v10 + 43);
    *((_OWORD *)v9 + 44) = v84;
    v9[720] = v10[720];
    v85 = *((_OWORD *)v10 + 40);
    *((_OWORD *)v9 + 39) = *((_OWORD *)v10 + 39);
    *((_OWORD *)v9 + 40) = v85;
    v86 = *((_OWORD *)v10 + 42);
    *((_OWORD *)v9 + 41) = *((_OWORD *)v10 + 41);
    *((_OWORD *)v9 + 42) = v86;
  }
  else
  {
    v213 = v83 & 1;
    v87 = *((_QWORD *)v10 + 78);
    v88 = *((_QWORD *)v10 + 79);
    v89 = *((_QWORD *)v10 + 80);
    v90 = *((_QWORD *)v10 + 81);
    v91 = *((_QWORD *)v10 + 82);
    v92 = *((_QWORD *)v10 + 83);
    v93 = *((_QWORD *)v10 + 84);
    v94 = *((_QWORD *)v10 + 85);
    v193 = *((_QWORD *)v10 + 86);
    v198 = *((_QWORD *)v10 + 87);
    v203 = *((_QWORD *)v10 + 88);
    v208 = *((_QWORD *)v10 + 89);
    sub_21421B808(v87, v88, v89, v90, v91, v92, v93, v94);
    *((_QWORD *)v9 + 78) = v87;
    *((_QWORD *)v9 + 79) = v88;
    *((_QWORD *)v9 + 80) = v89;
    *((_QWORD *)v9 + 81) = v90;
    *((_QWORD *)v9 + 82) = v91;
    *((_QWORD *)v9 + 83) = v92;
    *((_QWORD *)v9 + 84) = v93;
    *((_QWORD *)v9 + 85) = v94;
    *((_QWORD *)v9 + 86) = v193;
    *((_QWORD *)v9 + 87) = v198;
    *((_QWORD *)v9 + 88) = v203;
    *((_QWORD *)v9 + 89) = v208;
    v9[720] = v213;
  }
  v95 = v10[856];
  if (v95 != 255)
  {
    v100 = *((_QWORD *)v10 + 92);
    *((_QWORD *)v9 + 91) = *((_QWORD *)v10 + 91);
    *((_QWORD *)v9 + 92) = v100;
    v101 = v9 + 744;
    v102 = v10 + 744;
    v103 = *((_QWORD *)v10 + 96);
    swift_retain();
    if ((v95 & 1) == 0)
    {
      if (v103)
      {
        *((_QWORD *)v9 + 96) = v103;
        *((_QWORD *)v9 + 97) = *((_QWORD *)v10 + 97);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v103 - 8))((uint64_t)(v9 + 744), (uint64_t)(v10 + 744), v103);
        v104 = *((_QWORD *)v10 + 98);
        if (v104)
        {
LABEL_61:
          v105 = *((_QWORD *)v10 + 99);
          *((_QWORD *)v9 + 98) = v104;
          *((_QWORD *)v9 + 99) = v105;
          swift_retain();
LABEL_67:
          *((_QWORD *)v9 + 100) = *((_QWORD *)v10 + 100);
          v109 = (uint64_t *)(v10 + 808);
          v110 = v10[816];
          swift_bridgeObjectRetain();
          if (v110 == 255)
          {
            *((_QWORD *)v9 + 101) = *v109;
            v9[816] = v10[816];
          }
          else
          {
            v111 = v110 & 1;
            v112 = *v109;
            sub_2141E83F4(v112, v111);
            *((_QWORD *)v9 + 101) = v112;
            v9[816] = v111;
          }
          v113 = *(_OWORD *)(v10 + 840);
          *(_OWORD *)(v9 + 824) = *(_OWORD *)(v10 + 824);
          *(_OWORD *)(v9 + 840) = v113;
          v9[856] = 0;
          goto LABEL_77;
        }
      }
      else
      {
        v108 = *(_OWORD *)(v10 + 760);
        *v101 = *v102;
        *(_OWORD *)(v9 + 760) = v108;
        *((_QWORD *)v9 + 97) = *((_QWORD *)v10 + 97);
        v104 = *((_QWORD *)v10 + 98);
        if (v104)
          goto LABEL_61;
      }
      *((_OWORD *)v9 + 49) = *((_OWORD *)v10 + 49);
      goto LABEL_67;
    }
    if (v103)
    {
      *((_QWORD *)v9 + 96) = v103;
      *((_QWORD *)v9 + 97) = *((_QWORD *)v10 + 97);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v103 - 8))((uint64_t)(v9 + 744), (uint64_t)(v10 + 744), v103);
      v106 = *((_QWORD *)v10 + 98);
      if (v106)
      {
LABEL_64:
        v107 = *((_QWORD *)v10 + 99);
        *((_QWORD *)v9 + 98) = v106;
        *((_QWORD *)v9 + 99) = v107;
        swift_retain();
LABEL_73:
        *((_QWORD *)v9 + 100) = *((_QWORD *)v10 + 100);
        v115 = (uint64_t *)(v10 + 808);
        v116 = v10[816];
        swift_bridgeObjectRetain();
        if (v116 == 255)
        {
          *((_QWORD *)v9 + 101) = *v115;
          v9[816] = v10[816];
        }
        else
        {
          v117 = v116 & 1;
          v118 = *v115;
          sub_2141E83F4(v118, v117);
          *((_QWORD *)v9 + 101) = v118;
          v9[816] = v117;
        }
        v119 = *(_OWORD *)(v10 + 840);
        *(_OWORD *)(v9 + 824) = *(_OWORD *)(v10 + 824);
        *(_OWORD *)(v9 + 840) = v119;
        v9[856] = 1;
        goto LABEL_77;
      }
    }
    else
    {
      v114 = *(_OWORD *)(v10 + 760);
      *v101 = *v102;
      *(_OWORD *)(v9 + 760) = v114;
      *((_QWORD *)v9 + 97) = *((_QWORD *)v10 + 97);
      v106 = *((_QWORD *)v10 + 98);
      if (v106)
        goto LABEL_64;
    }
    *((_OWORD *)v9 + 49) = *((_OWORD *)v10 + 49);
    goto LABEL_73;
  }
  v96 = *(_OWORD *)(v10 + 840);
  *(_OWORD *)(v9 + 824) = *(_OWORD *)(v10 + 824);
  *(_OWORD *)(v9 + 840) = v96;
  v9[856] = v10[856];
  v97 = *(_OWORD *)(v10 + 776);
  *(_OWORD *)(v9 + 760) = *(_OWORD *)(v10 + 760);
  *(_OWORD *)(v9 + 776) = v97;
  v98 = *(_OWORD *)(v10 + 808);
  *(_OWORD *)(v9 + 792) = *(_OWORD *)(v10 + 792);
  *(_OWORD *)(v9 + 808) = v98;
  v99 = *(_OWORD *)(v10 + 744);
  *(_OWORD *)(v9 + 728) = *(_OWORD *)(v10 + 728);
  *(_OWORD *)(v9 + 744) = v99;
LABEL_77:
  v120 = v10[968];
  if (v120 == 255)
  {
    v121 = *((_OWORD *)v10 + 59);
    *((_OWORD *)v9 + 58) = *((_OWORD *)v10 + 58);
    *((_OWORD *)v9 + 59) = v121;
    *(_OWORD *)(v9 + 953) = *(_OWORD *)(v10 + 953);
    v122 = *((_OWORD *)v10 + 55);
    *((_OWORD *)v9 + 54) = *((_OWORD *)v10 + 54);
    *((_OWORD *)v9 + 55) = v122;
    v123 = *((_OWORD *)v10 + 57);
    *((_OWORD *)v9 + 56) = *((_OWORD *)v10 + 56);
    *((_OWORD *)v9 + 57) = v123;
  }
  else
  {
    v214 = v120 & 1;
    v124 = *((_QWORD *)v10 + 108);
    v125 = *((_QWORD *)v10 + 109);
    v126 = *((_QWORD *)v10 + 110);
    v127 = *((_QWORD *)v10 + 111);
    v128 = *((_QWORD *)v10 + 112);
    v129 = *((_QWORD *)v10 + 113);
    v130 = *((_QWORD *)v10 + 114);
    v131 = *((_QWORD *)v10 + 115);
    v189 = *((_QWORD *)v10 + 116);
    v194 = *((_QWORD *)v10 + 117);
    v199 = *((_QWORD *)v10 + 118);
    v204 = *((_QWORD *)v10 + 119);
    v209 = *((_QWORD *)v10 + 120);
    sub_21421BAE4(v124, v125, v126, v127, v128, v129, v130, v131, v189);
    *((_QWORD *)v9 + 108) = v124;
    *((_QWORD *)v9 + 109) = v125;
    *((_QWORD *)v9 + 110) = v126;
    *((_QWORD *)v9 + 111) = v127;
    *((_QWORD *)v9 + 112) = v128;
    *((_QWORD *)v9 + 113) = v129;
    *((_QWORD *)v9 + 114) = v130;
    *((_QWORD *)v9 + 115) = v131;
    *((_QWORD *)v9 + 116) = v189;
    *((_QWORD *)v9 + 117) = v194;
    *((_QWORD *)v9 + 118) = v199;
    *((_QWORD *)v9 + 119) = v204;
    *((_QWORD *)v9 + 120) = v209;
    v9[968] = v214;
  }
  v132 = v10[1104];
  if (v132 == 255)
  {
    v133 = *((_OWORD *)v10 + 68);
    *((_OWORD *)v9 + 67) = *((_OWORD *)v10 + 67);
    *((_OWORD *)v9 + 68) = v133;
    v9[1104] = v10[1104];
    v134 = *((_OWORD *)v10 + 64);
    *((_OWORD *)v9 + 63) = *((_OWORD *)v10 + 63);
    *((_OWORD *)v9 + 64) = v134;
    v135 = *((_OWORD *)v10 + 66);
    *((_OWORD *)v9 + 65) = *((_OWORD *)v10 + 65);
    *((_OWORD *)v9 + 66) = v135;
    v136 = *((_OWORD *)v10 + 62);
    *((_OWORD *)v9 + 61) = *((_OWORD *)v10 + 61);
    *((_OWORD *)v9 + 62) = v136;
  }
  else
  {
    v215 = v132 & 1;
    v137 = *((_QWORD *)v10 + 122);
    v138 = *((_QWORD *)v10 + 123);
    v139 = *((_QWORD *)v10 + 124);
    v140 = *((_QWORD *)v10 + 125);
    v141 = *((_QWORD *)v10 + 126);
    v142 = *((_QWORD *)v10 + 127);
    v143 = *((_QWORD *)v10 + 128);
    v144 = *((_QWORD *)v10 + 129);
    v184 = *((_QWORD *)v10 + 130);
    v185 = *((_QWORD *)v10 + 131);
    v186 = *((_QWORD *)v10 + 132);
    v190 = *((_QWORD *)v10 + 133);
    v195 = *((_QWORD *)v10 + 134);
    v200 = *((_QWORD *)v10 + 135);
    v205 = *((_QWORD *)v10 + 136);
    v210 = *((_QWORD *)v10 + 137);
    sub_21421B980(v137, v138, v139, v140, v141, v142, v143, v144, v184, v185, v186, v190);
    *((_QWORD *)v9 + 122) = v137;
    *((_QWORD *)v9 + 123) = v138;
    *((_QWORD *)v9 + 124) = v139;
    *((_QWORD *)v9 + 125) = v140;
    *((_QWORD *)v9 + 126) = v141;
    *((_QWORD *)v9 + 127) = v142;
    *((_QWORD *)v9 + 128) = v143;
    *((_QWORD *)v9 + 129) = v144;
    *((_QWORD *)v9 + 130) = v184;
    *((_QWORD *)v9 + 131) = v185;
    *((_QWORD *)v9 + 132) = v186;
    *((_QWORD *)v9 + 133) = v190;
    *((_QWORD *)v9 + 134) = v195;
    *((_QWORD *)v9 + 135) = v200;
    *((_QWORD *)v9 + 136) = v205;
    *((_QWORD *)v9 + 137) = v210;
    v9[1104] = v215;
  }
  v19 = v216;
  *(_OWORD *)(v9 + 1112) = *(_OWORD *)(v10 + 1112);
  *(_OWORD *)(v9 + 1128) = *(_OWORD *)(v10 + 1128);
  v9[1144] = v10[1144];
  *((_OWORD *)v9 + 72) = *((_OWORD *)v10 + 72);
  *((_OWORD *)v9 + 73) = *((_OWORD *)v10 + 73);
  v145 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v146 = v145[14];
  v147 = &v9[v146];
  v148 = &v10[v146];
  v149 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v147, v148, v149);
  *(_QWORD *)&v9[v145[15]] = *(_QWORD *)&v10[v145[15]];
  *(_QWORD *)&v9[v145[16]] = *(_QWORD *)&v10[v145[16]];
  v150 = v145[17];
  v151 = &v9[v150];
  v152 = &v10[v150];
  v153 = v10[v150 + 40];
  swift_retain();
  swift_retain();
  if (v153 == 255)
  {
    v154 = *((_OWORD *)v152 + 1);
    *(_OWORD *)v151 = *(_OWORD *)v152;
    *((_OWORD *)v151 + 1) = v154;
    *(_OWORD *)(v151 + 25) = *(_OWORD *)(v152 + 25);
  }
  else
  {
    v155 = *(_OWORD *)(v152 + 24);
    *(_OWORD *)(v151 + 24) = v155;
    (**(void (***)(char *, char *))(v155 - 8))(v151, v152);
    v151[40] = (v153 & 1) != 0;
  }
  v156 = v151 + 48;
  v157 = v152 + 48;
  v158 = v152[88];
  if (v158 == 255)
  {
    v159 = *((_OWORD *)v152 + 4);
    *v156 = *v157;
    *((_OWORD *)v151 + 4) = v159;
    *(_OWORD *)(v151 + 73) = *(_OWORD *)(v152 + 73);
  }
  else
  {
    v160 = *(_OWORD *)(v152 + 72);
    *(_OWORD *)(v151 + 72) = v160;
    (**(void (***)(_OWORD *, _OWORD *))(v160 - 8))(v156, v157);
    v151[88] = (v158 & 1) != 0;
  }
  v161 = v151 + 96;
  v162 = v152 + 96;
  v163 = v152[136];
  if (v163 == 255)
  {
    v164 = *((_OWORD *)v152 + 7);
    *v161 = *v162;
    *((_OWORD *)v151 + 7) = v164;
    *(_OWORD *)(v151 + 121) = *(_OWORD *)(v152 + 121);
  }
  else
  {
    v165 = *(_OWORD *)(v152 + 120);
    *(_OWORD *)(v151 + 120) = v165;
    (**(void (***)(_OWORD *, _OWORD *))(v165 - 8))(v161, v162);
    v151[136] = (v163 & 1) != 0;
  }
  v166 = v151 + 144;
  v167 = v152 + 144;
  v168 = v152[184];
  if (v168 == 255)
  {
    v169 = *((_OWORD *)v152 + 10);
    *v166 = *v167;
    *((_OWORD *)v151 + 10) = v169;
    *(_OWORD *)(v151 + 169) = *(_OWORD *)(v152 + 169);
  }
  else
  {
    v170 = *(_OWORD *)(v152 + 168);
    *(_OWORD *)(v151 + 168) = v170;
    (**(void (***)(_OWORD *, _OWORD *))(v170 - 8))(v166, v167);
    v151[184] = (v168 & 1) != 0;
  }
  v171 = v151 + 192;
  v172 = v152 + 192;
  v173 = v152[232];
  if (v173 == 255)
  {
    v174 = *((_OWORD *)v152 + 13);
    *v171 = *v172;
    *((_OWORD *)v151 + 13) = v174;
    *(_OWORD *)(v151 + 217) = *(_OWORD *)(v152 + 217);
  }
  else
  {
    v175 = *(_OWORD *)(v152 + 216);
    *(_OWORD *)(v151 + 216) = v175;
    (**(void (***)(_OWORD *, _OWORD *))(v175 - 8))(v171, v172);
    v151[232] = (v173 & 1) != 0;
  }
  v176 = v151 + 240;
  v177 = v152 + 240;
  v178 = v152[280];
  if (v178 == 255)
  {
    v179 = *((_OWORD *)v152 + 16);
    *v176 = *v177;
    *((_OWORD *)v151 + 16) = v179;
    *(_OWORD *)(v151 + 265) = *(_OWORD *)(v152 + 265);
  }
  else
  {
    v180 = *((_QWORD *)v152 + 33);
    v181 = *((_QWORD *)v152 + 34);
    *((_QWORD *)v151 + 33) = v180;
    *((_QWORD *)v151 + 34) = v181;
    (**(void (***)(_OWORD *, _OWORD *))(v180 - 8))(v176, v177);
    v182 = (BOOL *)(v151 + 280);
    *v182 = (v178 & 1) != 0;
  }
  *(_WORD *)(v151 + 281) = *(_WORD *)(v152 + 281);
  return v19;
}

uint64_t destroy for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;

  v4 = sub_21442462C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  swift_release();
  if ((*(_BYTE *)(v5 + 315) & 1) != 0)
  {
    if (*(unsigned __int8 *)(v5 + 72) != 255)
      _s6Charts15AnyChartContentVwxx_0(v5 + 32);
    if (*(unsigned __int8 *)(v5 + 120) != 255)
      _s6Charts15AnyChartContentVwxx_0(v5 + 80);
    if (*(unsigned __int8 *)(v5 + 168) != 255)
      _s6Charts15AnyChartContentVwxx_0(v5 + 128);
    if (*(unsigned __int8 *)(v5 + 216) != 255)
      _s6Charts15AnyChartContentVwxx_0(v5 + 176);
    if (*(unsigned __int8 *)(v5 + 264) != 255)
      _s6Charts15AnyChartContentVwxx_0(v5 + 224);
    if (*(unsigned __int8 *)(v5 + 312) != 255)
      _s6Charts15AnyChartContentVwxx_0(v5 + 272);
  }
  else
  {
    swift_release();
  }
  if (*(_QWORD *)(v5 + 320))
    swift_release();
  if (*(_QWORD *)(v5 + 336))
    swift_release();
  if (*(_QWORD *)(v5 + 352))
    swift_release();
  if (*(_QWORD *)(v5 + 368))
    swift_release();
  if (*(_QWORD *)(v5 + 384))
    swift_release();
  if (*(unsigned __int8 *)(v5 + 504) != 255)
    sub_21421BB6C(*(_QWORD *)(v5 + 400), *(_QWORD *)(v5 + 408), *(_QWORD *)(v5 + 416), *(_QWORD *)(v5 + 424), *(_QWORD *)(v5 + 432), *(_QWORD *)(v5 + 440), *(_QWORD *)(v5 + 448), *(_QWORD *)(v5 + 456), *(_OWORD *)(v5 + 464));
  if (*(unsigned __int8 *)(v5 + 616) != 255)
    sub_21421BB6C(*(_QWORD *)(v5 + 512), *(_QWORD *)(v5 + 520), *(_QWORD *)(v5 + 528), *(_QWORD *)(v5 + 536), *(_QWORD *)(v5 + 544), *(_QWORD *)(v5 + 552), *(_QWORD *)(v5 + 560), *(_QWORD *)(v5 + 568), *(_OWORD *)(v5 + 576));
  if (*(unsigned __int8 *)(v5 + 720) != 255)
    sub_21421B8A0(*(_QWORD *)(v5 + 624), *(_QWORD *)(v5 + 632), *(_QWORD *)(v5 + 640), *(_QWORD *)(v5 + 648), *(_QWORD *)(v5 + 656), *(_QWORD *)(v5 + 664), *(_QWORD *)(v5 + 672), *(_QWORD *)(v5 + 680));
  if (*(unsigned __int8 *)(v5 + 856) != 255)
  {
    swift_release();
    if (*(_QWORD *)(v5 + 768))
      _s6Charts15AnyChartContentVwxx_0(v5 + 744);
    if (*(_QWORD *)(v5 + 784))
      swift_release();
    swift_bridgeObjectRelease();
    v6 = *(unsigned __int8 *)(v5 + 816);
    if (v6 != 255)
      sub_2141E833C(*(_QWORD *)(v5 + 808), v6 & 1);
  }
  if (*(unsigned __int8 *)(v5 + 968) != 255)
    sub_21421BB6C(*(_QWORD *)(v5 + 864), *(_QWORD *)(v5 + 872), *(_QWORD *)(v5 + 880), *(_QWORD *)(v5 + 888), *(_QWORD *)(v5 + 896), *(_QWORD *)(v5 + 904), *(_QWORD *)(v5 + 912), *(_QWORD *)(v5 + 920), *(_OWORD *)(v5 + 928));
  if (*(unsigned __int8 *)(v5 + 1104) != 255)
    sub_21421BA80(*(_QWORD *)(v5 + 976), *(_QWORD *)(v5 + 984), *(_QWORD *)(v5 + 992), *(_QWORD *)(v5 + 1000), *(_QWORD *)(v5 + 1008), *(_QWORD *)(v5 + 1016), *(_QWORD *)(v5 + 1024), *(_QWORD *)(v5 + 1032), *(_QWORD *)(v5 + 1040), *(_QWORD *)(v5 + 1048), *(_QWORD *)(v5 + 1056), *(_QWORD *)(v5 + 1064));
  v7 = type metadata accessor for ChartModel.Scenegraph();
  v8 = v5 + *(int *)(v7 + 56);
  v9 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  result = swift_release();
  v11 = (unsigned __int8 *)(v5 + *(int *)(v7 + 68));
  if (v11[40] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)v11);
  if (v11[88] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 48));
  if (v11[136] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 96));
  if (v11[184] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 144));
  if (v11[232] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 192));
  if (v11[280] != 255)
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 240));
  return result;
}

uint64_t initializeWithCopy for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  char v13;
  _OWORD *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  int v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  _OWORD *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  BOOL *v38;
  _OWORD *v39;
  _OWORD *v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  BOOL *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _OWORD *v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t *v106;
  int v107;
  char v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t *v112;
  int v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  __int128 v151;
  __int128 v152;
  _OWORD *v153;
  _OWORD *v154;
  int v155;
  __int128 v156;
  __int128 v157;
  _OWORD *v158;
  _OWORD *v159;
  int v160;
  __int128 v161;
  __int128 v162;
  _OWORD *v163;
  _OWORD *v164;
  int v165;
  __int128 v166;
  __int128 v167;
  _OWORD *v168;
  _OWORD *v169;
  int v170;
  __int128 v171;
  __int128 v172;
  _OWORD *v173;
  _OWORD *v174;
  int v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  BOOL *v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  char v209;
  char v210;
  char v211;
  char v212;
  uint64_t v213;

  v6 = sub_21442462C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  v11 = *(_QWORD *)(a2 + v7 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 + v7 + 16);
  *(_QWORD *)(v8 + 24) = v11;
  v12 = (_OWORD *)(a2 + v7 + 32);
  v13 = *(_BYTE *)(a2 + v7 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v13 & 1) != 0)
  {
    v14 = (_OWORD *)(v8 + 32);
    v15 = *(unsigned __int8 *)(v9 + 72);
    if (v15 == 255)
    {
      v16 = *(_OWORD *)(v9 + 48);
      *v14 = *v12;
      *(_OWORD *)(v8 + 48) = v16;
      *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
    }
    else
    {
      v17 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 56) = v17;
      (**(void (***)(_OWORD *, uint64_t))(v17 - 8))(v14, v9 + 32);
      *(_BYTE *)(v8 + 72) = (v15 & 1) != 0;
    }
    v18 = (_OWORD *)(v8 + 80);
    v19 = (_OWORD *)(v9 + 80);
    v20 = *(unsigned __int8 *)(v9 + 120);
    if (v20 == 255)
    {
      v21 = *(_OWORD *)(v9 + 96);
      *v18 = *v19;
      *(_OWORD *)(v8 + 96) = v21;
      *(_OWORD *)(v8 + 105) = *(_OWORD *)(v9 + 105);
    }
    else
    {
      v22 = *(_OWORD *)(v9 + 104);
      *(_OWORD *)(v8 + 104) = v22;
      (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v18, v19);
      *(_BYTE *)(v8 + 120) = (v20 & 1) != 0;
    }
    v23 = (_OWORD *)(v8 + 128);
    v24 = (_OWORD *)(v9 + 128);
    v25 = *(unsigned __int8 *)(v9 + 168);
    if (v25 == 255)
    {
      v26 = *(_OWORD *)(v9 + 144);
      *v23 = *v24;
      *(_OWORD *)(v8 + 144) = v26;
      *(_OWORD *)(v8 + 153) = *(_OWORD *)(v9 + 153);
    }
    else
    {
      v27 = *(_OWORD *)(v9 + 152);
      *(_OWORD *)(v8 + 152) = v27;
      (**(void (***)(_OWORD *, _OWORD *))(v27 - 8))(v23, v24);
      *(_BYTE *)(v8 + 168) = (v25 & 1) != 0;
    }
    v28 = (_OWORD *)(v8 + 176);
    v29 = (_OWORD *)(v9 + 176);
    v30 = *(unsigned __int8 *)(v9 + 216);
    if (v30 == 255)
    {
      v31 = *(_OWORD *)(v9 + 192);
      *v28 = *v29;
      *(_OWORD *)(v8 + 192) = v31;
      *(_OWORD *)(v8 + 201) = *(_OWORD *)(v9 + 201);
    }
    else
    {
      v32 = *(_OWORD *)(v9 + 200);
      *(_OWORD *)(v8 + 200) = v32;
      (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v28, v29);
      *(_BYTE *)(v8 + 216) = (v30 & 1) != 0;
    }
    v33 = (_OWORD *)(v8 + 224);
    v34 = (_OWORD *)(v9 + 224);
    v35 = *(unsigned __int8 *)(v9 + 264);
    if (v35 == 255)
    {
      v36 = *(_OWORD *)(v9 + 240);
      *v33 = *v34;
      *(_OWORD *)(v8 + 240) = v36;
      *(_OWORD *)(v8 + 249) = *(_OWORD *)(v9 + 249);
    }
    else
    {
      v37 = *(_OWORD *)(v9 + 248);
      *(_OWORD *)(v8 + 248) = v37;
      (**(void (***)(_OWORD *, _OWORD *))(v37 - 8))(v33, v34);
      v38 = (BOOL *)(v8 + 264);
      *v38 = (v35 & 1) != 0;
    }
    v39 = (_OWORD *)(v8 + 272);
    v40 = (_OWORD *)(v9 + 272);
    v41 = *(unsigned __int8 *)(v9 + 312);
    if (v41 == 255)
    {
      v42 = *(_OWORD *)(v9 + 288);
      *v39 = *v40;
      *(_OWORD *)(v8 + 288) = v42;
      *(_OWORD *)(v8 + 297) = *(_OWORD *)(v9 + 297);
    }
    else
    {
      v43 = *(_QWORD *)(v9 + 296);
      v44 = *(_QWORD *)(v9 + 304);
      *(_QWORD *)(v8 + 296) = v43;
      *(_QWORD *)(v8 + 304) = v44;
      (**(void (***)(_OWORD *, _OWORD *))(v43 - 8))(v39, v40);
      v45 = (BOOL *)(v8 + 312);
      *v45 = (v41 & 1) != 0;
    }
    *(_WORD *)(v8 + 313) = *(_WORD *)(v9 + 313);
    *(_BYTE *)(v8 + 315) = 1;
  }
  else
  {
    *(_QWORD *)(v8 + 32) = *(_QWORD *)v12;
    *(_BYTE *)(v8 + 315) = 0;
    swift_retain();
  }
  *(_BYTE *)(v8 + 316) = *(_BYTE *)(v9 + 316);
  v46 = *(_QWORD *)(v9 + 320);
  if (v46)
  {
    v47 = *(_QWORD *)(v9 + 328);
    *(_QWORD *)(v8 + 320) = v46;
    *(_QWORD *)(v8 + 328) = v47;
    swift_retain();
    v48 = *(_QWORD *)(v9 + 336);
    if (v48)
      goto LABEL_36;
  }
  else
  {
    *(_OWORD *)(v8 + 320) = *(_OWORD *)(v9 + 320);
    v48 = *(_QWORD *)(v9 + 336);
    if (v48)
    {
LABEL_36:
      v49 = *(_QWORD *)(v9 + 344);
      *(_QWORD *)(v8 + 336) = v48;
      *(_QWORD *)(v8 + 344) = v49;
      swift_retain();
      v50 = *(_QWORD *)(v9 + 352);
      if (v50)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  *(_OWORD *)(v8 + 336) = *(_OWORD *)(v9 + 336);
  v50 = *(_QWORD *)(v9 + 352);
  if (v50)
  {
LABEL_37:
    v51 = *(_QWORD *)(v9 + 360);
    *(_QWORD *)(v8 + 352) = v50;
    *(_QWORD *)(v8 + 360) = v51;
    swift_retain();
    v52 = *(_QWORD *)(v9 + 368);
    if (v52)
      goto LABEL_38;
LABEL_43:
    *(_OWORD *)(v8 + 368) = *(_OWORD *)(v9 + 368);
    v54 = *(_QWORD *)(v9 + 384);
    if (v54)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_42:
  *(_OWORD *)(v8 + 352) = *(_OWORD *)(v9 + 352);
  v52 = *(_QWORD *)(v9 + 368);
  if (!v52)
    goto LABEL_43;
LABEL_38:
  v53 = *(_QWORD *)(v9 + 376);
  *(_QWORD *)(v8 + 368) = v52;
  *(_QWORD *)(v8 + 376) = v53;
  swift_retain();
  v54 = *(_QWORD *)(v9 + 384);
  if (v54)
  {
LABEL_39:
    v55 = *(_QWORD *)(v9 + 392);
    *(_QWORD *)(v8 + 384) = v54;
    *(_QWORD *)(v8 + 392) = v55;
    swift_retain();
    goto LABEL_45;
  }
LABEL_44:
  *(_OWORD *)(v8 + 384) = *(_OWORD *)(v9 + 384);
LABEL_45:
  v56 = *(unsigned __int8 *)(v9 + 504);
  v213 = a1;
  if (v56 == 255)
  {
    v57 = *(_OWORD *)(v9 + 480);
    *(_OWORD *)(v8 + 464) = *(_OWORD *)(v9 + 464);
    *(_OWORD *)(v8 + 480) = v57;
    *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
    v58 = *(_OWORD *)(v9 + 416);
    *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
    *(_OWORD *)(v8 + 416) = v58;
    v59 = *(_OWORD *)(v9 + 448);
    *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
    *(_OWORD *)(v8 + 448) = v59;
  }
  else
  {
    v208 = v56 & 1;
    v60 = *(_QWORD *)(v9 + 400);
    v61 = *(_QWORD *)(v9 + 408);
    v62 = *(_QWORD *)(v9 + 416);
    v63 = *(_QWORD *)(v9 + 424);
    v64 = *(_QWORD *)(v9 + 432);
    v65 = *(_QWORD *)(v9 + 440);
    v66 = *(_QWORD *)(v9 + 448);
    v67 = *(_QWORD *)(v9 + 456);
    v184 = *(_QWORD *)(v9 + 464);
    v188 = *(_QWORD *)(v9 + 472);
    v193 = *(_QWORD *)(v9 + 480);
    v198 = *(_QWORD *)(v9 + 488);
    v203 = *(_QWORD *)(v9 + 496);
    sub_21421BAE4(v60, v61, v62, v63, v64, v65, v66, v67, v184);
    *(_QWORD *)(v8 + 400) = v60;
    *(_QWORD *)(v8 + 408) = v61;
    *(_QWORD *)(v8 + 416) = v62;
    *(_QWORD *)(v8 + 424) = v63;
    *(_QWORD *)(v8 + 432) = v64;
    *(_QWORD *)(v8 + 440) = v65;
    *(_QWORD *)(v8 + 448) = v66;
    *(_QWORD *)(v8 + 456) = v67;
    *(_QWORD *)(v8 + 464) = v184;
    *(_QWORD *)(v8 + 472) = v188;
    *(_QWORD *)(v8 + 480) = v193;
    *(_QWORD *)(v8 + 488) = v198;
    *(_QWORD *)(v8 + 496) = v203;
    *(_BYTE *)(v8 + 504) = v208;
  }
  v68 = *(unsigned __int8 *)(v9 + 616);
  if (v68 == 255)
  {
    v69 = *(_OWORD *)(v9 + 592);
    *(_OWORD *)(v8 + 576) = *(_OWORD *)(v9 + 576);
    *(_OWORD *)(v8 + 592) = v69;
    *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
    v70 = *(_OWORD *)(v9 + 528);
    *(_OWORD *)(v8 + 512) = *(_OWORD *)(v9 + 512);
    *(_OWORD *)(v8 + 528) = v70;
    v71 = *(_OWORD *)(v9 + 560);
    *(_OWORD *)(v8 + 544) = *(_OWORD *)(v9 + 544);
    *(_OWORD *)(v8 + 560) = v71;
  }
  else
  {
    v209 = v68 & 1;
    v72 = *(_QWORD *)(v9 + 512);
    v73 = *(_QWORD *)(v9 + 520);
    v74 = *(_QWORD *)(v9 + 528);
    v75 = *(_QWORD *)(v9 + 536);
    v76 = *(_QWORD *)(v9 + 544);
    v77 = *(_QWORD *)(v9 + 552);
    v78 = *(_QWORD *)(v9 + 560);
    v79 = *(_QWORD *)(v9 + 568);
    v185 = *(_QWORD *)(v9 + 576);
    v189 = *(_QWORD *)(v9 + 584);
    v194 = *(_QWORD *)(v9 + 592);
    v199 = *(_QWORD *)(v9 + 600);
    v204 = *(_QWORD *)(v9 + 608);
    sub_21421BAE4(v72, v73, v74, v75, v76, v77, v78, v79, v185);
    *(_QWORD *)(v8 + 512) = v72;
    *(_QWORD *)(v8 + 520) = v73;
    *(_QWORD *)(v8 + 528) = v74;
    *(_QWORD *)(v8 + 536) = v75;
    *(_QWORD *)(v8 + 544) = v76;
    *(_QWORD *)(v8 + 552) = v77;
    *(_QWORD *)(v8 + 560) = v78;
    *(_QWORD *)(v8 + 568) = v79;
    *(_QWORD *)(v8 + 576) = v185;
    *(_QWORD *)(v8 + 584) = v189;
    *(_QWORD *)(v8 + 592) = v194;
    *(_QWORD *)(v8 + 600) = v199;
    *(_QWORD *)(v8 + 608) = v204;
    *(_BYTE *)(v8 + 616) = v209;
  }
  v80 = *(unsigned __int8 *)(v9 + 720);
  if (v80 == 255)
  {
    v81 = *(_OWORD *)(v9 + 704);
    *(_OWORD *)(v8 + 688) = *(_OWORD *)(v9 + 688);
    *(_OWORD *)(v8 + 704) = v81;
    *(_BYTE *)(v8 + 720) = *(_BYTE *)(v9 + 720);
    v82 = *(_OWORD *)(v9 + 640);
    *(_OWORD *)(v8 + 624) = *(_OWORD *)(v9 + 624);
    *(_OWORD *)(v8 + 640) = v82;
    v83 = *(_OWORD *)(v9 + 672);
    *(_OWORD *)(v8 + 656) = *(_OWORD *)(v9 + 656);
    *(_OWORD *)(v8 + 672) = v83;
  }
  else
  {
    v210 = v80 & 1;
    v84 = *(_QWORD *)(v9 + 624);
    v85 = *(_QWORD *)(v9 + 632);
    v86 = *(_QWORD *)(v9 + 640);
    v87 = *(_QWORD *)(v9 + 648);
    v88 = *(_QWORD *)(v9 + 656);
    v89 = *(_QWORD *)(v9 + 664);
    v90 = *(_QWORD *)(v9 + 672);
    v91 = *(_QWORD *)(v9 + 680);
    v190 = *(_QWORD *)(v9 + 688);
    v195 = *(_QWORD *)(v9 + 696);
    v200 = *(_QWORD *)(v9 + 704);
    v205 = *(_QWORD *)(v9 + 712);
    sub_21421B808(v84, v85, v86, v87, v88, v89, v90, v91);
    *(_QWORD *)(v8 + 624) = v84;
    *(_QWORD *)(v8 + 632) = v85;
    *(_QWORD *)(v8 + 640) = v86;
    *(_QWORD *)(v8 + 648) = v87;
    *(_QWORD *)(v8 + 656) = v88;
    *(_QWORD *)(v8 + 664) = v89;
    *(_QWORD *)(v8 + 672) = v90;
    *(_QWORD *)(v8 + 680) = v91;
    *(_QWORD *)(v8 + 688) = v190;
    *(_QWORD *)(v8 + 696) = v195;
    *(_QWORD *)(v8 + 704) = v200;
    *(_QWORD *)(v8 + 712) = v205;
    *(_BYTE *)(v8 + 720) = v210;
  }
  v92 = *(unsigned __int8 *)(v9 + 856);
  if (v92 == 255)
  {
    v93 = *(_OWORD *)(v9 + 840);
    *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
    *(_OWORD *)(v8 + 840) = v93;
    *(_BYTE *)(v8 + 856) = *(_BYTE *)(v9 + 856);
    v94 = *(_OWORD *)(v9 + 776);
    *(_OWORD *)(v8 + 760) = *(_OWORD *)(v9 + 760);
    *(_OWORD *)(v8 + 776) = v94;
    v95 = *(_OWORD *)(v9 + 808);
    *(_OWORD *)(v8 + 792) = *(_OWORD *)(v9 + 792);
    *(_OWORD *)(v8 + 808) = v95;
    v96 = *(_OWORD *)(v9 + 744);
    *(_OWORD *)(v8 + 728) = *(_OWORD *)(v9 + 728);
    *(_OWORD *)(v8 + 744) = v96;
    goto LABEL_75;
  }
  v97 = *(_QWORD *)(v9 + 736);
  *(_QWORD *)(v8 + 728) = *(_QWORD *)(v9 + 728);
  *(_QWORD *)(v8 + 736) = v97;
  v98 = (_OWORD *)(v8 + 744);
  v99 = (_OWORD *)(v9 + 744);
  v100 = *(_QWORD *)(v9 + 768);
  swift_retain();
  if ((v92 & 1) == 0)
  {
    if (v100)
    {
      *(_QWORD *)(v8 + 768) = v100;
      *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v100 - 8))(v8 + 744, v9 + 744, v100);
      v101 = *(_QWORD *)(v9 + 784);
      if (v101)
      {
LABEL_59:
        v102 = *(_QWORD *)(v9 + 792);
        *(_QWORD *)(v8 + 784) = v101;
        *(_QWORD *)(v8 + 792) = v102;
        swift_retain();
LABEL_65:
        *(_QWORD *)(v8 + 800) = *(_QWORD *)(v9 + 800);
        v106 = (uint64_t *)(v9 + 808);
        v107 = *(unsigned __int8 *)(v9 + 816);
        swift_bridgeObjectRetain();
        if (v107 == 255)
        {
          *(_QWORD *)(v8 + 808) = *v106;
          *(_BYTE *)(v8 + 816) = *(_BYTE *)(v9 + 816);
        }
        else
        {
          v108 = v107 & 1;
          v109 = *v106;
          sub_2141E83F4(v109, v108);
          *(_QWORD *)(v8 + 808) = v109;
          *(_BYTE *)(v8 + 816) = v108;
        }
        v110 = *(_OWORD *)(v9 + 840);
        *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
        *(_OWORD *)(v8 + 840) = v110;
        *(_BYTE *)(v8 + 856) = 0;
        goto LABEL_75;
      }
    }
    else
    {
      v105 = *(_OWORD *)(v9 + 760);
      *v98 = *v99;
      *(_OWORD *)(v8 + 760) = v105;
      *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
      v101 = *(_QWORD *)(v9 + 784);
      if (v101)
        goto LABEL_59;
    }
    *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
    goto LABEL_65;
  }
  if (!v100)
  {
    v111 = *(_OWORD *)(v9 + 760);
    *v98 = *v99;
    *(_OWORD *)(v8 + 760) = v111;
    *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
    v103 = *(_QWORD *)(v9 + 784);
    if (v103)
      goto LABEL_62;
LABEL_70:
    *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
    goto LABEL_71;
  }
  *(_QWORD *)(v8 + 768) = v100;
  *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v100 - 8))(v8 + 744, v9 + 744, v100);
  v103 = *(_QWORD *)(v9 + 784);
  if (!v103)
    goto LABEL_70;
LABEL_62:
  v104 = *(_QWORD *)(v9 + 792);
  *(_QWORD *)(v8 + 784) = v103;
  *(_QWORD *)(v8 + 792) = v104;
  swift_retain();
LABEL_71:
  *(_QWORD *)(v8 + 800) = *(_QWORD *)(v9 + 800);
  v112 = (uint64_t *)(v9 + 808);
  v113 = *(unsigned __int8 *)(v9 + 816);
  swift_bridgeObjectRetain();
  if (v113 == 255)
  {
    *(_QWORD *)(v8 + 808) = *v112;
    *(_BYTE *)(v8 + 816) = *(_BYTE *)(v9 + 816);
  }
  else
  {
    v114 = v113 & 1;
    v115 = *v112;
    sub_2141E83F4(v115, v114);
    *(_QWORD *)(v8 + 808) = v115;
    *(_BYTE *)(v8 + 816) = v114;
  }
  v116 = *(_OWORD *)(v9 + 840);
  *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
  *(_OWORD *)(v8 + 840) = v116;
  *(_BYTE *)(v8 + 856) = 1;
LABEL_75:
  v117 = *(unsigned __int8 *)(v9 + 968);
  if (v117 == 255)
  {
    v118 = *(_OWORD *)(v9 + 944);
    *(_OWORD *)(v8 + 928) = *(_OWORD *)(v9 + 928);
    *(_OWORD *)(v8 + 944) = v118;
    *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
    v119 = *(_OWORD *)(v9 + 880);
    *(_OWORD *)(v8 + 864) = *(_OWORD *)(v9 + 864);
    *(_OWORD *)(v8 + 880) = v119;
    v120 = *(_OWORD *)(v9 + 912);
    *(_OWORD *)(v8 + 896) = *(_OWORD *)(v9 + 896);
    *(_OWORD *)(v8 + 912) = v120;
  }
  else
  {
    v211 = v117 & 1;
    v121 = *(_QWORD *)(v9 + 864);
    v122 = *(_QWORD *)(v9 + 872);
    v123 = *(_QWORD *)(v9 + 880);
    v124 = *(_QWORD *)(v9 + 888);
    v125 = *(_QWORD *)(v9 + 896);
    v126 = *(_QWORD *)(v9 + 904);
    v127 = *(_QWORD *)(v9 + 912);
    v128 = *(_QWORD *)(v9 + 920);
    v186 = *(_QWORD *)(v9 + 928);
    v191 = *(_QWORD *)(v9 + 936);
    v196 = *(_QWORD *)(v9 + 944);
    v201 = *(_QWORD *)(v9 + 952);
    v206 = *(_QWORD *)(v9 + 960);
    sub_21421BAE4(v121, v122, v123, v124, v125, v126, v127, v128, v186);
    *(_QWORD *)(v8 + 864) = v121;
    *(_QWORD *)(v8 + 872) = v122;
    *(_QWORD *)(v8 + 880) = v123;
    *(_QWORD *)(v8 + 888) = v124;
    *(_QWORD *)(v8 + 896) = v125;
    *(_QWORD *)(v8 + 904) = v126;
    *(_QWORD *)(v8 + 912) = v127;
    *(_QWORD *)(v8 + 920) = v128;
    *(_QWORD *)(v8 + 928) = v186;
    *(_QWORD *)(v8 + 936) = v191;
    *(_QWORD *)(v8 + 944) = v196;
    *(_QWORD *)(v8 + 952) = v201;
    *(_QWORD *)(v8 + 960) = v206;
    *(_BYTE *)(v8 + 968) = v211;
  }
  v129 = *(unsigned __int8 *)(v9 + 1104);
  if (v129 == 255)
  {
    v130 = *(_OWORD *)(v9 + 1088);
    *(_OWORD *)(v8 + 1072) = *(_OWORD *)(v9 + 1072);
    *(_OWORD *)(v8 + 1088) = v130;
    *(_BYTE *)(v8 + 1104) = *(_BYTE *)(v9 + 1104);
    v131 = *(_OWORD *)(v9 + 1024);
    *(_OWORD *)(v8 + 1008) = *(_OWORD *)(v9 + 1008);
    *(_OWORD *)(v8 + 1024) = v131;
    v132 = *(_OWORD *)(v9 + 1056);
    *(_OWORD *)(v8 + 1040) = *(_OWORD *)(v9 + 1040);
    *(_OWORD *)(v8 + 1056) = v132;
    v133 = *(_OWORD *)(v9 + 992);
    *(_OWORD *)(v8 + 976) = *(_OWORD *)(v9 + 976);
    *(_OWORD *)(v8 + 992) = v133;
  }
  else
  {
    v212 = v129 & 1;
    v134 = *(_QWORD *)(v9 + 976);
    v135 = *(_QWORD *)(v9 + 984);
    v136 = *(_QWORD *)(v9 + 992);
    v137 = *(_QWORD *)(v9 + 1000);
    v138 = *(_QWORD *)(v9 + 1008);
    v139 = *(_QWORD *)(v9 + 1016);
    v140 = *(_QWORD *)(v9 + 1024);
    v141 = *(_QWORD *)(v9 + 1032);
    v181 = *(_QWORD *)(v9 + 1040);
    v182 = *(_QWORD *)(v9 + 1048);
    v183 = *(_QWORD *)(v9 + 1056);
    v187 = *(_QWORD *)(v9 + 1064);
    v192 = *(_QWORD *)(v9 + 1072);
    v197 = *(_QWORD *)(v9 + 1080);
    v202 = *(_QWORD *)(v9 + 1088);
    v207 = *(_QWORD *)(v9 + 1096);
    sub_21421B980(v134, v135, v136, v137, v138, v139, v140, v141, v181, v182, v183, v187);
    *(_QWORD *)(v8 + 976) = v134;
    *(_QWORD *)(v8 + 984) = v135;
    *(_QWORD *)(v8 + 992) = v136;
    *(_QWORD *)(v8 + 1000) = v137;
    *(_QWORD *)(v8 + 1008) = v138;
    *(_QWORD *)(v8 + 1016) = v139;
    *(_QWORD *)(v8 + 1024) = v140;
    *(_QWORD *)(v8 + 1032) = v141;
    *(_QWORD *)(v8 + 1040) = v181;
    *(_QWORD *)(v8 + 1048) = v182;
    *(_QWORD *)(v8 + 1056) = v183;
    *(_QWORD *)(v8 + 1064) = v187;
    *(_QWORD *)(v8 + 1072) = v192;
    *(_QWORD *)(v8 + 1080) = v197;
    *(_QWORD *)(v8 + 1088) = v202;
    *(_QWORD *)(v8 + 1096) = v207;
    *(_BYTE *)(v8 + 1104) = v212;
  }
  *(_OWORD *)(v8 + 1112) = *(_OWORD *)(v9 + 1112);
  *(_OWORD *)(v8 + 1128) = *(_OWORD *)(v9 + 1128);
  *(_BYTE *)(v8 + 1144) = *(_BYTE *)(v9 + 1144);
  *(_OWORD *)(v8 + 1152) = *(_OWORD *)(v9 + 1152);
  *(_OWORD *)(v8 + 1168) = *(_OWORD *)(v9 + 1168);
  v142 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v143 = v142[14];
  v144 = v8 + v143;
  v145 = v9 + v143;
  v146 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 16))(v144, v145, v146);
  *(_QWORD *)(v8 + v142[15]) = *(_QWORD *)(v9 + v142[15]);
  *(_QWORD *)(v8 + v142[16]) = *(_QWORD *)(v9 + v142[16]);
  v147 = v142[17];
  v148 = v8 + v147;
  v149 = v9 + v147;
  v150 = *(unsigned __int8 *)(v9 + v147 + 40);
  swift_retain();
  swift_retain();
  if (v150 == 255)
  {
    v151 = *(_OWORD *)(v149 + 16);
    *(_OWORD *)v148 = *(_OWORD *)v149;
    *(_OWORD *)(v148 + 16) = v151;
    *(_OWORD *)(v148 + 25) = *(_OWORD *)(v149 + 25);
  }
  else
  {
    v152 = *(_OWORD *)(v149 + 24);
    *(_OWORD *)(v148 + 24) = v152;
    (**(void (***)(uint64_t, uint64_t))(v152 - 8))(v148, v149);
    *(_BYTE *)(v148 + 40) = (v150 & 1) != 0;
  }
  v153 = (_OWORD *)(v148 + 48);
  v154 = (_OWORD *)(v149 + 48);
  v155 = *(unsigned __int8 *)(v149 + 88);
  if (v155 == 255)
  {
    v156 = *(_OWORD *)(v149 + 64);
    *v153 = *v154;
    *(_OWORD *)(v148 + 64) = v156;
    *(_OWORD *)(v148 + 73) = *(_OWORD *)(v149 + 73);
  }
  else
  {
    v157 = *(_OWORD *)(v149 + 72);
    *(_OWORD *)(v148 + 72) = v157;
    (**(void (***)(_OWORD *, _OWORD *))(v157 - 8))(v153, v154);
    *(_BYTE *)(v148 + 88) = (v155 & 1) != 0;
  }
  v158 = (_OWORD *)(v148 + 96);
  v159 = (_OWORD *)(v149 + 96);
  v160 = *(unsigned __int8 *)(v149 + 136);
  if (v160 == 255)
  {
    v161 = *(_OWORD *)(v149 + 112);
    *v158 = *v159;
    *(_OWORD *)(v148 + 112) = v161;
    *(_OWORD *)(v148 + 121) = *(_OWORD *)(v149 + 121);
  }
  else
  {
    v162 = *(_OWORD *)(v149 + 120);
    *(_OWORD *)(v148 + 120) = v162;
    (**(void (***)(_OWORD *, _OWORD *))(v162 - 8))(v158, v159);
    *(_BYTE *)(v148 + 136) = (v160 & 1) != 0;
  }
  v163 = (_OWORD *)(v148 + 144);
  v164 = (_OWORD *)(v149 + 144);
  v165 = *(unsigned __int8 *)(v149 + 184);
  if (v165 == 255)
  {
    v166 = *(_OWORD *)(v149 + 160);
    *v163 = *v164;
    *(_OWORD *)(v148 + 160) = v166;
    *(_OWORD *)(v148 + 169) = *(_OWORD *)(v149 + 169);
  }
  else
  {
    v167 = *(_OWORD *)(v149 + 168);
    *(_OWORD *)(v148 + 168) = v167;
    (**(void (***)(_OWORD *, _OWORD *))(v167 - 8))(v163, v164);
    *(_BYTE *)(v148 + 184) = (v165 & 1) != 0;
  }
  v168 = (_OWORD *)(v148 + 192);
  v169 = (_OWORD *)(v149 + 192);
  v170 = *(unsigned __int8 *)(v149 + 232);
  if (v170 == 255)
  {
    v171 = *(_OWORD *)(v149 + 208);
    *v168 = *v169;
    *(_OWORD *)(v148 + 208) = v171;
    *(_OWORD *)(v148 + 217) = *(_OWORD *)(v149 + 217);
  }
  else
  {
    v172 = *(_OWORD *)(v149 + 216);
    *(_OWORD *)(v148 + 216) = v172;
    (**(void (***)(_OWORD *, _OWORD *))(v172 - 8))(v168, v169);
    *(_BYTE *)(v148 + 232) = (v170 & 1) != 0;
  }
  v173 = (_OWORD *)(v148 + 240);
  v174 = (_OWORD *)(v149 + 240);
  v175 = *(unsigned __int8 *)(v149 + 280);
  if (v175 == 255)
  {
    v176 = *(_OWORD *)(v149 + 256);
    *v173 = *v174;
    *(_OWORD *)(v148 + 256) = v176;
    *(_OWORD *)(v148 + 265) = *(_OWORD *)(v149 + 265);
  }
  else
  {
    v177 = *(_QWORD *)(v149 + 264);
    v178 = *(_QWORD *)(v149 + 272);
    *(_QWORD *)(v148 + 264) = v177;
    *(_QWORD *)(v148 + 272) = v178;
    (**(void (***)(_OWORD *, _OWORD *))(v177 - 8))(v173, v174);
    v179 = (BOOL *)(v148 + 280);
    *v179 = (v175 & 1) != 0;
  }
  *(_WORD *)(v148 + 281) = *(_WORD *)(v149 + 281);
  return v213;
}

uint64_t assignWithCopy for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  BOOL *v39;
  _OWORD *v40;
  __int128 *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  BOOL *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  __int128 *v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  __int128 *v100;
  int v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  __int128 *v137;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  _OWORD *v173;
  _BYTE *v174;
  int v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  _OWORD *v189;
  __int128 *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t *v198;
  int v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t *v206;
  int v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  __int128 v211;
  __int128 *v212;
  __int128 *v213;
  int v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _OWORD *v249;
  _OWORD *v250;
  int v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __int128 *v296;
  int v297;
  int v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  __int128 *v305;
  __int128 *v306;
  int v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  __int128 *v313;
  __int128 *v314;
  int v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  __int128 *v321;
  __int128 *v322;
  int v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  __int128 *v329;
  __int128 *v330;
  int v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  __int128 *v337;
  __int128 *v338;
  BOOL *v339;
  int v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char v405;
  char v406;
  char v407;
  char v408;
  char v409;
  char v410;
  char v411;
  char v412;
  char v413;
  char v414;
  uint64_t v415;
  uint64_t v416;

  v6 = sub_21442462C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  v416 = a2;
  if (a1 != a2)
  {
    v10 = (__int128 *)(v9 + 32);
    sub_2141E0750(v8 + 32, &qword_253F15AE8);
    if ((*(_BYTE *)(v9 + 315) & 1) != 0)
    {
      v11 = *(unsigned __int8 *)(v9 + 72);
      if (v11 == 255)
      {
        v12 = *v10;
        v13 = *(_OWORD *)(v9 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
        *(_OWORD *)(v8 + 32) = v12;
        *(_OWORD *)(v8 + 48) = v13;
      }
      else
      {
        v14 = *(_QWORD *)(v9 + 56);
        *(_QWORD *)(v8 + 56) = v14;
        *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v8 + 32, v9 + 32);
        *(_BYTE *)(v8 + 72) = (v11 & 1) != 0;
      }
      v15 = (_OWORD *)(v8 + 80);
      v16 = (__int128 *)(v9 + 80);
      v17 = *(unsigned __int8 *)(v9 + 120);
      if (v17 == 255)
      {
        v18 = *v16;
        v19 = *(_OWORD *)(v9 + 96);
        *(_OWORD *)(v8 + 105) = *(_OWORD *)(v9 + 105);
        *v15 = v18;
        *(_OWORD *)(v8 + 96) = v19;
      }
      else
      {
        v20 = *(_QWORD *)(v9 + 104);
        *(_QWORD *)(v8 + 104) = v20;
        *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 + 112);
        (**(void (***)(_OWORD *, __int128 *))(v20 - 8))(v15, v16);
        *(_BYTE *)(v8 + 120) = (v17 & 1) != 0;
      }
      v21 = (_OWORD *)(v8 + 128);
      v22 = (__int128 *)(v9 + 128);
      v23 = *(unsigned __int8 *)(v9 + 168);
      if (v23 == 255)
      {
        v24 = *v22;
        v25 = *(_OWORD *)(v9 + 144);
        *(_OWORD *)(v8 + 153) = *(_OWORD *)(v9 + 153);
        *v21 = v24;
        *(_OWORD *)(v8 + 144) = v25;
      }
      else
      {
        v26 = *(_QWORD *)(v9 + 152);
        *(_QWORD *)(v8 + 152) = v26;
        *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 + 160);
        (**(void (***)(_OWORD *, __int128 *))(v26 - 8))(v21, v22);
        *(_BYTE *)(v8 + 168) = (v23 & 1) != 0;
      }
      v27 = (_OWORD *)(v8 + 176);
      v28 = (__int128 *)(v9 + 176);
      v29 = *(unsigned __int8 *)(v9 + 216);
      if (v29 == 255)
      {
        v30 = *v28;
        v31 = *(_OWORD *)(v9 + 192);
        *(_OWORD *)(v8 + 201) = *(_OWORD *)(v9 + 201);
        *v27 = v30;
        *(_OWORD *)(v8 + 192) = v31;
      }
      else
      {
        v32 = *(_QWORD *)(v9 + 200);
        *(_QWORD *)(v8 + 200) = v32;
        *(_QWORD *)(v8 + 208) = *(_QWORD *)(v9 + 208);
        (**(void (***)(_OWORD *, __int128 *))(v32 - 8))(v27, v28);
        *(_BYTE *)(v8 + 216) = (v29 & 1) != 0;
      }
      v33 = (_OWORD *)(v8 + 224);
      v34 = (__int128 *)(v9 + 224);
      v35 = *(unsigned __int8 *)(v9 + 264);
      if (v35 == 255)
      {
        v36 = *v34;
        v37 = *(_OWORD *)(v9 + 240);
        *(_OWORD *)(v8 + 249) = *(_OWORD *)(v9 + 249);
        *v33 = v36;
        *(_OWORD *)(v8 + 240) = v37;
      }
      else
      {
        v38 = *(_QWORD *)(v9 + 248);
        *(_QWORD *)(v8 + 248) = v38;
        *(_QWORD *)(v8 + 256) = *(_QWORD *)(v9 + 256);
        (**(void (***)(_OWORD *, __int128 *))(v38 - 8))(v33, v34);
        v39 = (BOOL *)(v8 + 264);
        *v39 = (v35 & 1) != 0;
      }
      v40 = (_OWORD *)(v8 + 272);
      v41 = (__int128 *)(v9 + 272);
      v42 = *(unsigned __int8 *)(v9 + 312);
      if (v42 == 255)
      {
        v43 = *v41;
        v44 = *(_OWORD *)(v9 + 288);
        *(_OWORD *)(v8 + 297) = *(_OWORD *)(v9 + 297);
        *v40 = v43;
        *(_OWORD *)(v8 + 288) = v44;
      }
      else
      {
        v45 = *(_QWORD *)(v9 + 296);
        *(_QWORD *)(v8 + 296) = v45;
        *(_QWORD *)(v8 + 304) = *(_QWORD *)(v9 + 304);
        (**(void (***)(_OWORD *, __int128 *))(v45 - 8))(v40, v41);
        v46 = (BOOL *)(v8 + 312);
        *v46 = (v42 & 1) != 0;
      }
      *(_WORD *)(v8 + 313) = *(_WORD *)(v9 + 313);
      *(_BYTE *)(v8 + 315) = 1;
    }
    else
    {
      *(_QWORD *)(v8 + 32) = *(_QWORD *)v10;
      *(_BYTE *)(v8 + 315) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(v8 + 316) = *(_BYTE *)(v9 + 316);
  v47 = *(_QWORD *)(v9 + 320);
  if (*(_QWORD *)(v8 + 320))
  {
    if (v47)
    {
      v48 = *(_QWORD *)(v9 + 328);
      *(_QWORD *)(v8 + 320) = v47;
      *(_QWORD *)(v8 + 328) = v48;
      swift_retain();
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v47)
  {
    v49 = *(_QWORD *)(v9 + 328);
    *(_QWORD *)(v8 + 320) = v47;
    *(_QWORD *)(v8 + 328) = v49;
    swift_retain();
    goto LABEL_42;
  }
  *(_OWORD *)(v8 + 320) = *(_OWORD *)(v9 + 320);
LABEL_42:
  v50 = *(_QWORD *)(v9 + 336);
  if (*(_QWORD *)(v8 + 336))
  {
    if (v50)
    {
      v51 = *(_QWORD *)(v9 + 344);
      *(_QWORD *)(v8 + 336) = v50;
      *(_QWORD *)(v8 + 344) = v51;
      swift_retain();
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v50)
  {
    v52 = *(_QWORD *)(v9 + 344);
    *(_QWORD *)(v8 + 336) = v50;
    *(_QWORD *)(v8 + 344) = v52;
    swift_retain();
    goto LABEL_49;
  }
  *(_OWORD *)(v8 + 336) = *(_OWORD *)(v9 + 336);
LABEL_49:
  v53 = *(_QWORD *)(v9 + 352);
  if (*(_QWORD *)(v8 + 352))
  {
    if (v53)
    {
      v54 = *(_QWORD *)(v9 + 360);
      *(_QWORD *)(v8 + 352) = v53;
      *(_QWORD *)(v8 + 360) = v54;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    swift_release();
  }
  else if (v53)
  {
    v55 = *(_QWORD *)(v9 + 360);
    *(_QWORD *)(v8 + 352) = v53;
    *(_QWORD *)(v8 + 360) = v55;
    swift_retain();
    goto LABEL_56;
  }
  *(_OWORD *)(v8 + 352) = *(_OWORD *)(v9 + 352);
LABEL_56:
  v56 = *(_QWORD *)(v9 + 368);
  if (*(_QWORD *)(v8 + 368))
  {
    if (v56)
    {
      v57 = *(_QWORD *)(v9 + 376);
      *(_QWORD *)(v8 + 368) = v56;
      *(_QWORD *)(v8 + 376) = v57;
      swift_retain();
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  else if (v56)
  {
    v58 = *(_QWORD *)(v9 + 376);
    *(_QWORD *)(v8 + 368) = v56;
    *(_QWORD *)(v8 + 376) = v58;
    swift_retain();
    goto LABEL_63;
  }
  *(_OWORD *)(v8 + 368) = *(_OWORD *)(v9 + 368);
LABEL_63:
  v59 = *(_QWORD *)(v9 + 384);
  if (*(_QWORD *)(v8 + 384))
  {
    if (v59)
    {
      v60 = *(_QWORD *)(v9 + 392);
      *(_QWORD *)(v8 + 384) = v59;
      *(_QWORD *)(v8 + 392) = v60;
      swift_retain();
      swift_release();
      goto LABEL_70;
    }
    swift_release();
  }
  else if (v59)
  {
    v61 = *(_QWORD *)(v9 + 392);
    *(_QWORD *)(v8 + 384) = v59;
    *(_QWORD *)(v8 + 392) = v61;
    swift_retain();
    goto LABEL_70;
  }
  *(_OWORD *)(v8 + 384) = *(_OWORD *)(v9 + 384);
LABEL_70:
  v62 = (__int128 *)(v8 + 400);
  v63 = (__int128 *)(v9 + 400);
  v64 = *(unsigned __int8 *)(v9 + 504);
  v415 = a1;
  if (*(unsigned __int8 *)(v8 + 504) == 255)
  {
    if (v64 == 255)
    {
      v70 = *v63;
      v71 = *(_OWORD *)(v9 + 432);
      *(_OWORD *)(v8 + 416) = *(_OWORD *)(v9 + 416);
      *(_OWORD *)(v8 + 432) = v71;
      *v62 = v70;
      v72 = *(_OWORD *)(v9 + 448);
      v73 = *(_OWORD *)(v9 + 464);
      v74 = *(_OWORD *)(v9 + 480);
      *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
      *(_OWORD *)(v8 + 464) = v73;
      *(_OWORD *)(v8 + 480) = v74;
      *(_OWORD *)(v8 + 448) = v72;
    }
    else
    {
      v406 = v64 & 1;
      v91 = *(_QWORD *)(v9 + 400);
      v92 = *(_QWORD *)(v9 + 408);
      v93 = *(_QWORD *)(v9 + 416);
      v94 = *(_QWORD *)(v9 + 424);
      v95 = *(_QWORD *)(v9 + 432);
      v96 = *(_QWORD *)(v9 + 440);
      v97 = *(_QWORD *)(v9 + 448);
      v98 = *(_QWORD *)(v9 + 456);
      v358 = *(_QWORD *)(v9 + 464);
      v367 = *(_QWORD *)(v9 + 472);
      v377 = *(_QWORD *)(v9 + 480);
      v387 = *(_QWORD *)(v9 + 488);
      v397 = *(_QWORD *)(v9 + 496);
      sub_21421BAE4(v91, v92, v93, v94, v95, v96, v97, v98, v358);
      *(_QWORD *)(v8 + 400) = v91;
      *(_QWORD *)(v8 + 408) = v92;
      *(_QWORD *)(v8 + 416) = v93;
      *(_QWORD *)(v8 + 424) = v94;
      *(_QWORD *)(v8 + 432) = v95;
      *(_QWORD *)(v8 + 440) = v96;
      *(_QWORD *)(v8 + 448) = v97;
      *(_QWORD *)(v8 + 456) = v98;
      *(_QWORD *)(v8 + 464) = v358;
      *(_QWORD *)(v8 + 472) = v367;
      *(_QWORD *)(v8 + 480) = v377;
      *(_QWORD *)(v8 + 488) = v387;
      *(_QWORD *)(v8 + 496) = v397;
      *(_BYTE *)(v8 + 504) = v406;
    }
  }
  else if (v64 == 255)
  {
    sub_2141E0750(v8 + 400, &qword_253F13368);
    v66 = *(_OWORD *)(v9 + 416);
    v65 = *(_OWORD *)(v9 + 432);
    *v62 = *v63;
    *(_OWORD *)(v8 + 416) = v66;
    *(_OWORD *)(v8 + 432) = v65;
    v68 = *(_OWORD *)(v9 + 464);
    v67 = *(_OWORD *)(v9 + 480);
    v69 = *(_OWORD *)(v9 + 448);
    *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
    *(_OWORD *)(v8 + 464) = v68;
    *(_OWORD *)(v8 + 480) = v67;
    *(_OWORD *)(v8 + 448) = v69;
  }
  else
  {
    v405 = v64 & 1;
    v75 = *(_QWORD *)(v9 + 408);
    v76 = *(_QWORD *)(v9 + 416);
    v77 = *(_QWORD *)(v9 + 424);
    v78 = *(_QWORD *)(v9 + 432);
    v79 = *(_QWORD *)(v9 + 440);
    v80 = *(_QWORD *)(v9 + 448);
    v81 = *(_QWORD *)(v9 + 456);
    v352 = *(_QWORD *)(v9 + 400);
    v357 = *(_QWORD *)(v9 + 464);
    v366 = *(_QWORD *)(v9 + 472);
    v376 = *(_QWORD *)(v9 + 480);
    v386 = *(_QWORD *)(v9 + 488);
    v396 = *(_QWORD *)(v9 + 496);
    sub_21421BAE4(v352, v75, v76, v77, v78, v79, v80, v81, v357);
    v82 = *(_QWORD *)(v8 + 400);
    v83 = *(_QWORD *)(v8 + 408);
    v84 = *(_QWORD *)(v8 + 416);
    v85 = *(_QWORD *)(v8 + 424);
    v86 = *(_QWORD *)(v8 + 432);
    v87 = *(_QWORD *)(v8 + 440);
    v88 = *(_QWORD *)(v8 + 448);
    v89 = *(_QWORD *)(v8 + 456);
    v90 = *(_OWORD *)(v8 + 464);
    *(_QWORD *)(v8 + 400) = v352;
    *(_QWORD *)(v8 + 408) = v75;
    *(_QWORD *)(v8 + 416) = v76;
    *(_QWORD *)(v8 + 424) = v77;
    *(_QWORD *)(v8 + 432) = v78;
    *(_QWORD *)(v8 + 440) = v79;
    *(_QWORD *)(v8 + 448) = v80;
    *(_QWORD *)(v8 + 456) = v81;
    *(_QWORD *)(v8 + 464) = v357;
    *(_QWORD *)(v8 + 472) = v366;
    *(_QWORD *)(v8 + 480) = v376;
    *(_QWORD *)(v8 + 488) = v386;
    *(_QWORD *)(v8 + 496) = v396;
    *(_BYTE *)(v8 + 504) = v405;
    sub_21421BB6C(v82, v83, v84, v85, v86, v87, v88, v89, v90);
  }
  v99 = (__int128 *)(v8 + 512);
  v100 = (__int128 *)(v9 + 512);
  v101 = *(unsigned __int8 *)(v9 + 616);
  if (*(unsigned __int8 *)(v8 + 616) == 255)
  {
    if (v101 == 255)
    {
      v107 = *v100;
      v108 = *(_OWORD *)(v9 + 544);
      *(_OWORD *)(v8 + 528) = *(_OWORD *)(v9 + 528);
      *(_OWORD *)(v8 + 544) = v108;
      *v99 = v107;
      v109 = *(_OWORD *)(v9 + 560);
      v110 = *(_OWORD *)(v9 + 576);
      v111 = *(_OWORD *)(v9 + 592);
      *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
      *(_OWORD *)(v8 + 576) = v110;
      *(_OWORD *)(v8 + 592) = v111;
      *(_OWORD *)(v8 + 560) = v109;
    }
    else
    {
      v408 = v101 & 1;
      v128 = *(_QWORD *)(v9 + 512);
      v129 = *(_QWORD *)(v9 + 520);
      v130 = *(_QWORD *)(v9 + 528);
      v131 = *(_QWORD *)(v9 + 536);
      v132 = *(_QWORD *)(v9 + 544);
      v133 = *(_QWORD *)(v9 + 552);
      v134 = *(_QWORD *)(v9 + 560);
      v135 = *(_QWORD *)(v9 + 568);
      v360 = *(_QWORD *)(v9 + 576);
      v369 = *(_QWORD *)(v9 + 584);
      v379 = *(_QWORD *)(v9 + 592);
      v389 = *(_QWORD *)(v9 + 600);
      v399 = *(_QWORD *)(v9 + 608);
      sub_21421BAE4(v128, v129, v130, v131, v132, v133, v134, v135, v360);
      *(_QWORD *)(v8 + 512) = v128;
      *(_QWORD *)(v8 + 520) = v129;
      *(_QWORD *)(v8 + 528) = v130;
      *(_QWORD *)(v8 + 536) = v131;
      *(_QWORD *)(v8 + 544) = v132;
      *(_QWORD *)(v8 + 552) = v133;
      *(_QWORD *)(v8 + 560) = v134;
      *(_QWORD *)(v8 + 568) = v135;
      *(_QWORD *)(v8 + 576) = v360;
      *(_QWORD *)(v8 + 584) = v369;
      *(_QWORD *)(v8 + 592) = v379;
      *(_QWORD *)(v8 + 600) = v389;
      *(_QWORD *)(v8 + 608) = v399;
      *(_BYTE *)(v8 + 616) = v408;
    }
  }
  else if (v101 == 255)
  {
    sub_2141E0750(v8 + 512, &qword_253F13368);
    v103 = *(_OWORD *)(v9 + 528);
    v102 = *(_OWORD *)(v9 + 544);
    *v99 = *v100;
    *(_OWORD *)(v8 + 528) = v103;
    *(_OWORD *)(v8 + 544) = v102;
    v105 = *(_OWORD *)(v9 + 576);
    v104 = *(_OWORD *)(v9 + 592);
    v106 = *(_OWORD *)(v9 + 560);
    *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
    *(_OWORD *)(v8 + 576) = v105;
    *(_OWORD *)(v8 + 592) = v104;
    *(_OWORD *)(v8 + 560) = v106;
  }
  else
  {
    v407 = v101 & 1;
    v112 = *(_QWORD *)(v9 + 520);
    v113 = *(_QWORD *)(v9 + 528);
    v114 = *(_QWORD *)(v9 + 536);
    v115 = *(_QWORD *)(v9 + 544);
    v116 = *(_QWORD *)(v9 + 552);
    v117 = *(_QWORD *)(v9 + 560);
    v118 = *(_QWORD *)(v9 + 568);
    v353 = *(_QWORD *)(v9 + 512);
    v359 = *(_QWORD *)(v9 + 576);
    v368 = *(_QWORD *)(v9 + 584);
    v378 = *(_QWORD *)(v9 + 592);
    v388 = *(_QWORD *)(v9 + 600);
    v398 = *(_QWORD *)(v9 + 608);
    sub_21421BAE4(v353, v112, v113, v114, v115, v116, v117, v118, *(_OWORD *)(v9 + 576));
    v119 = *(_QWORD *)(v8 + 512);
    v120 = *(_QWORD *)(v8 + 520);
    v121 = *(_QWORD *)(v8 + 528);
    v122 = *(_QWORD *)(v8 + 536);
    v123 = *(_QWORD *)(v8 + 544);
    v124 = *(_QWORD *)(v8 + 552);
    v125 = *(_QWORD *)(v8 + 560);
    v126 = *(_QWORD *)(v8 + 568);
    v127 = *(_OWORD *)(v8 + 576);
    *(_QWORD *)(v8 + 512) = v353;
    *(_QWORD *)(v8 + 520) = v112;
    *(_QWORD *)(v8 + 528) = v113;
    *(_QWORD *)(v8 + 536) = v114;
    *(_QWORD *)(v8 + 544) = v115;
    *(_QWORD *)(v8 + 552) = v116;
    *(_QWORD *)(v8 + 560) = v117;
    *(_QWORD *)(v8 + 568) = v118;
    *(_QWORD *)(v8 + 576) = v359;
    *(_QWORD *)(v8 + 584) = v368;
    *(_QWORD *)(v8 + 592) = v378;
    *(_QWORD *)(v8 + 600) = v388;
    *(_QWORD *)(v8 + 608) = v398;
    *(_BYTE *)(v8 + 616) = v407;
    sub_21421BB6C(v119, v120, v121, v122, v123, v124, v125, v126, v127);
  }
  v136 = (__int128 *)(v8 + 624);
  v137 = (__int128 *)(v9 + 624);
  v138 = *(unsigned __int8 *)(v9 + 720);
  if (*(unsigned __int8 *)(v8 + 720) == 255)
  {
    if (v138 == 255)
    {
      v144 = *v137;
      v145 = *(_OWORD *)(v9 + 656);
      *(_OWORD *)(v8 + 640) = *(_OWORD *)(v9 + 640);
      *(_OWORD *)(v8 + 656) = v145;
      *v136 = v144;
      v146 = *(_OWORD *)(v9 + 672);
      v147 = *(_OWORD *)(v9 + 688);
      v148 = *(_OWORD *)(v9 + 704);
      *(_BYTE *)(v8 + 720) = *(_BYTE *)(v9 + 720);
      *(_OWORD *)(v8 + 688) = v147;
      *(_OWORD *)(v8 + 704) = v148;
      *(_OWORD *)(v8 + 672) = v146;
    }
    else
    {
      v410 = v138 & 1;
      v164 = *(_QWORD *)(v9 + 624);
      v165 = *(_QWORD *)(v9 + 632);
      v166 = *(_QWORD *)(v9 + 640);
      v167 = *(_QWORD *)(v9 + 648);
      v168 = *(_QWORD *)(v9 + 656);
      v169 = *(_QWORD *)(v9 + 664);
      v170 = *(_QWORD *)(v9 + 672);
      v171 = *(_QWORD *)(v9 + 680);
      v371 = *(_QWORD *)(v9 + 688);
      v381 = *(_QWORD *)(v9 + 696);
      v391 = *(_OWORD *)(v9 + 704);
      sub_21421B808(v164, v165, v166, v167, v168, v169, v170, v171);
      *(_QWORD *)(v8 + 624) = v164;
      *(_QWORD *)(v8 + 632) = v165;
      *(_QWORD *)(v8 + 640) = v166;
      *(_QWORD *)(v8 + 648) = v167;
      *(_QWORD *)(v8 + 656) = v168;
      *(_QWORD *)(v8 + 664) = v169;
      *(_QWORD *)(v8 + 672) = v170;
      *(_QWORD *)(v8 + 680) = v171;
      *(_QWORD *)(v8 + 688) = v371;
      *(_QWORD *)(v8 + 696) = v381;
      *(_OWORD *)(v8 + 704) = v391;
      *(_BYTE *)(v8 + 720) = v410;
    }
  }
  else if (v138 == 255)
  {
    sub_2141E0750(v8 + 624, qword_253F10468);
    v140 = *(_OWORD *)(v9 + 640);
    v139 = *(_OWORD *)(v9 + 656);
    *v136 = *v137;
    *(_OWORD *)(v8 + 640) = v140;
    *(_OWORD *)(v8 + 656) = v139;
    v142 = *(_OWORD *)(v9 + 688);
    v141 = *(_OWORD *)(v9 + 704);
    v143 = *(_OWORD *)(v9 + 672);
    *(_BYTE *)(v8 + 720) = *(_BYTE *)(v9 + 720);
    *(_OWORD *)(v8 + 688) = v142;
    *(_OWORD *)(v8 + 704) = v141;
    *(_OWORD *)(v8 + 672) = v143;
  }
  else
  {
    v409 = v138 & 1;
    v149 = *(_QWORD *)(v9 + 632);
    v150 = *(_QWORD *)(v9 + 640);
    v151 = *(_QWORD *)(v9 + 648);
    v152 = *(_QWORD *)(v9 + 656);
    v153 = *(_QWORD *)(v9 + 664);
    v154 = *(_QWORD *)(v9 + 672);
    v155 = *(_QWORD *)(v9 + 680);
    v361 = *(_QWORD *)(v9 + 624);
    v370 = *(_QWORD *)(v9 + 688);
    v380 = *(_QWORD *)(v9 + 696);
    v390 = *(_QWORD *)(v9 + 704);
    v400 = *(_QWORD *)(v9 + 712);
    sub_21421B808(v361, v149, v150, v151, v152, v153, v154, v155);
    v156 = *(_QWORD *)(v8 + 624);
    v157 = *(_QWORD *)(v8 + 632);
    v158 = *(_QWORD *)(v8 + 640);
    v159 = *(_QWORD *)(v8 + 648);
    v160 = *(_QWORD *)(v8 + 656);
    v161 = *(_QWORD *)(v8 + 664);
    v162 = *(_QWORD *)(v8 + 672);
    v163 = *(_QWORD *)(v8 + 680);
    *(_QWORD *)(v8 + 624) = v361;
    *(_QWORD *)(v8 + 632) = v149;
    *(_QWORD *)(v8 + 640) = v150;
    *(_QWORD *)(v8 + 648) = v151;
    *(_QWORD *)(v8 + 656) = v152;
    *(_QWORD *)(v8 + 664) = v153;
    *(_QWORD *)(v8 + 672) = v154;
    *(_QWORD *)(v8 + 680) = v155;
    *(_QWORD *)(v8 + 688) = v370;
    *(_QWORD *)(v8 + 696) = v380;
    *(_QWORD *)(v8 + 704) = v390;
    *(_QWORD *)(v8 + 712) = v400;
    *(_BYTE *)(v8 + 720) = v409;
    sub_21421B8A0(v156, v157, v158, v159, v160, v161, v162, v163);
  }
  v172 = (_OWORD *)(v8 + 728);
  v173 = (_OWORD *)(v9 + 728);
  v174 = (_BYTE *)(v8 + 856);
  v175 = *(unsigned __int8 *)(v9 + 856);
  if (*(unsigned __int8 *)(v8 + 856) == 255)
  {
    if (v175 == 255)
    {
      *v172 = *v173;
      v182 = *(_OWORD *)(v9 + 744);
      v183 = *(_OWORD *)(v9 + 760);
      v184 = *(_OWORD *)(v9 + 792);
      *(_OWORD *)(v8 + 776) = *(_OWORD *)(v9 + 776);
      *(_OWORD *)(v8 + 792) = v184;
      *(_OWORD *)(v8 + 744) = v182;
      *(_OWORD *)(v8 + 760) = v183;
      v185 = *(_OWORD *)(v9 + 808);
      v186 = *(_OWORD *)(v9 + 824);
      v187 = *(_OWORD *)(v9 + 840);
      *(_BYTE *)(v8 + 856) = *(_BYTE *)(v9 + 856);
      *(_OWORD *)(v8 + 824) = v186;
      *(_OWORD *)(v8 + 840) = v187;
      *(_OWORD *)(v8 + 808) = v185;
      goto LABEL_117;
    }
LABEL_98:
    v188 = *(_QWORD *)(v9 + 736);
    *(_QWORD *)(v8 + 728) = *(_QWORD *)(v9 + 728);
    *(_QWORD *)(v8 + 736) = v188;
    v189 = (_OWORD *)(v8 + 744);
    v190 = (__int128 *)(v9 + 744);
    v191 = *(_QWORD *)(v9 + 768);
    swift_retain();
    if ((v175 & 1) != 0)
    {
      if (v191)
      {
        *(_QWORD *)(v8 + 768) = v191;
        *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v191 - 8))(v8 + 744, v9 + 744, v191);
        v192 = *(_QWORD *)(v9 + 784);
        if (v192)
        {
LABEL_101:
          v193 = *(_QWORD *)(v9 + 792);
          *(_QWORD *)(v8 + 784) = v192;
          *(_QWORD *)(v8 + 792) = v193;
          swift_retain();
LABEL_107:
          *(_QWORD *)(v8 + 800) = *(_QWORD *)(v9 + 800);
          v198 = (uint64_t *)(v9 + 808);
          v199 = *(unsigned __int8 *)(v9 + 816);
          swift_bridgeObjectRetain();
          if (v199 == 255)
          {
            v200 = *v198;
            *(_BYTE *)(v8 + 816) = *(_BYTE *)(v9 + 816);
            *(_QWORD *)(v8 + 808) = v200;
          }
          else
          {
            v201 = v199 & 1;
            v202 = *v198;
            sub_2141E83F4(v202, v201);
            *(_QWORD *)(v8 + 808) = v202;
            *(_BYTE *)(v8 + 816) = v201;
          }
          v203 = *(_OWORD *)(v9 + 840);
          *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
          *(_OWORD *)(v8 + 840) = v203;
          *v174 = 1;
          goto LABEL_117;
        }
      }
      else
      {
        v196 = *v190;
        v197 = *(_OWORD *)(v9 + 760);
        *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
        *v189 = v196;
        *(_OWORD *)(v8 + 760) = v197;
        v192 = *(_QWORD *)(v9 + 784);
        if (v192)
          goto LABEL_101;
      }
      *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
      goto LABEL_107;
    }
    if (v191)
    {
      *(_QWORD *)(v8 + 768) = v191;
      *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v191 - 8))(v8 + 744, v9 + 744, v191);
      v194 = *(_QWORD *)(v9 + 784);
      if (v194)
      {
LABEL_104:
        v195 = *(_QWORD *)(v9 + 792);
        *(_QWORD *)(v8 + 784) = v194;
        *(_QWORD *)(v8 + 792) = v195;
        swift_retain();
LABEL_113:
        *(_QWORD *)(v8 + 800) = *(_QWORD *)(v9 + 800);
        v206 = (uint64_t *)(v9 + 808);
        v207 = *(unsigned __int8 *)(v9 + 816);
        swift_bridgeObjectRetain();
        if (v207 == 255)
        {
          v208 = *v206;
          *(_BYTE *)(v8 + 816) = *(_BYTE *)(v9 + 816);
          *(_QWORD *)(v8 + 808) = v208;
        }
        else
        {
          v209 = v207 & 1;
          v210 = *v206;
          sub_2141E83F4(v210, v209);
          *(_QWORD *)(v8 + 808) = v210;
          *(_BYTE *)(v8 + 816) = v209;
        }
        v211 = *(_OWORD *)(v9 + 840);
        *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
        *(_OWORD *)(v8 + 840) = v211;
        *v174 = 0;
        goto LABEL_117;
      }
    }
    else
    {
      v204 = *v190;
      v205 = *(_OWORD *)(v9 + 760);
      *(_QWORD *)(v8 + 776) = *(_QWORD *)(v9 + 776);
      *v189 = v204;
      *(_OWORD *)(v8 + 760) = v205;
      v194 = *(_QWORD *)(v9 + 784);
      if (v194)
        goto LABEL_104;
    }
    *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
    goto LABEL_113;
  }
  if (v175 == 255)
  {
    sub_2141E0750(v8 + 728, &qword_254D695C8);
    *v172 = *v173;
    v176 = *(_OWORD *)(v9 + 792);
    v178 = *(_OWORD *)(v9 + 744);
    v177 = *(_OWORD *)(v9 + 760);
    *(_OWORD *)(v8 + 776) = *(_OWORD *)(v9 + 776);
    *(_OWORD *)(v8 + 792) = v176;
    *(_OWORD *)(v8 + 744) = v178;
    *(_OWORD *)(v8 + 760) = v177;
    v180 = *(_OWORD *)(v9 + 824);
    v179 = *(_OWORD *)(v9 + 840);
    v181 = *(_OWORD *)(v9 + 808);
    *(_BYTE *)(v8 + 856) = *(_BYTE *)(v9 + 856);
    *(_OWORD *)(v8 + 824) = v180;
    *(_OWORD *)(v8 + 840) = v179;
    *(_OWORD *)(v8 + 808) = v181;
    goto LABEL_117;
  }
  if (v415 != v416)
  {
    sub_2141E0750(v8 + 728, &qword_254D695C8);
    LOBYTE(v175) = *(_BYTE *)(v9 + 856);
    goto LABEL_98;
  }
LABEL_117:
  v212 = (__int128 *)(v8 + 864);
  v213 = (__int128 *)(v9 + 864);
  v214 = *(unsigned __int8 *)(v9 + 968);
  if (*(unsigned __int8 *)(v8 + 968) == 255)
  {
    if (v214 == 255)
    {
      v220 = *v213;
      v221 = *(_OWORD *)(v9 + 896);
      *(_OWORD *)(v8 + 880) = *(_OWORD *)(v9 + 880);
      *(_OWORD *)(v8 + 896) = v221;
      *v212 = v220;
      v222 = *(_OWORD *)(v9 + 912);
      v223 = *(_OWORD *)(v9 + 928);
      v224 = *(_OWORD *)(v9 + 944);
      *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
      *(_OWORD *)(v8 + 928) = v223;
      *(_OWORD *)(v8 + 944) = v224;
      *(_OWORD *)(v8 + 912) = v222;
    }
    else
    {
      v412 = v214 & 1;
      v241 = *(_QWORD *)(v9 + 864);
      v242 = *(_QWORD *)(v9 + 872);
      v243 = *(_QWORD *)(v9 + 880);
      v244 = *(_QWORD *)(v9 + 888);
      v245 = *(_QWORD *)(v9 + 896);
      v246 = *(_QWORD *)(v9 + 904);
      v247 = *(_QWORD *)(v9 + 912);
      v248 = *(_QWORD *)(v9 + 920);
      v363 = *(_QWORD *)(v9 + 928);
      v373 = *(_QWORD *)(v9 + 936);
      v383 = *(_QWORD *)(v9 + 944);
      v393 = *(_QWORD *)(v9 + 952);
      v402 = *(_QWORD *)(v9 + 960);
      sub_21421BAE4(v241, v242, v243, v244, v245, v246, v247, v248, v363);
      *(_QWORD *)(v8 + 864) = v241;
      *(_QWORD *)(v8 + 872) = v242;
      *(_QWORD *)(v8 + 880) = v243;
      *(_QWORD *)(v8 + 888) = v244;
      *(_QWORD *)(v8 + 896) = v245;
      *(_QWORD *)(v8 + 904) = v246;
      *(_QWORD *)(v8 + 912) = v247;
      *(_QWORD *)(v8 + 920) = v248;
      *(_QWORD *)(v8 + 928) = v363;
      *(_QWORD *)(v8 + 936) = v373;
      *(_QWORD *)(v8 + 944) = v383;
      *(_QWORD *)(v8 + 952) = v393;
      *(_QWORD *)(v8 + 960) = v402;
      *(_BYTE *)(v8 + 968) = v412;
    }
  }
  else if (v214 == 255)
  {
    sub_2141E0750(v8 + 864, &qword_253F13368);
    v216 = *(_OWORD *)(v9 + 880);
    v215 = *(_OWORD *)(v9 + 896);
    *v212 = *v213;
    *(_OWORD *)(v8 + 880) = v216;
    *(_OWORD *)(v8 + 896) = v215;
    v218 = *(_OWORD *)(v9 + 928);
    v217 = *(_OWORD *)(v9 + 944);
    v219 = *(_OWORD *)(v9 + 912);
    *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
    *(_OWORD *)(v8 + 928) = v218;
    *(_OWORD *)(v8 + 944) = v217;
    *(_OWORD *)(v8 + 912) = v219;
  }
  else
  {
    v411 = v214 & 1;
    v225 = *(_QWORD *)(v9 + 872);
    v226 = *(_QWORD *)(v9 + 880);
    v227 = *(_QWORD *)(v9 + 888);
    v228 = *(_QWORD *)(v9 + 896);
    v229 = *(_QWORD *)(v9 + 904);
    v230 = *(_QWORD *)(v9 + 912);
    v231 = *(_QWORD *)(v9 + 920);
    v354 = *(_QWORD *)(v9 + 864);
    v362 = *(_QWORD *)(v9 + 928);
    v372 = *(_QWORD *)(v9 + 936);
    v382 = *(_QWORD *)(v9 + 944);
    v392 = *(_QWORD *)(v9 + 952);
    v401 = *(_QWORD *)(v9 + 960);
    sub_21421BAE4(v354, v225, v226, v227, v228, v229, v230, v231, *(_OWORD *)(v9 + 928));
    v232 = *(_QWORD *)(v8 + 864);
    v233 = *(_QWORD *)(v8 + 872);
    v234 = *(_QWORD *)(v8 + 880);
    v235 = *(_QWORD *)(v8 + 888);
    v236 = *(_QWORD *)(v8 + 896);
    v237 = *(_QWORD *)(v8 + 904);
    v238 = *(_QWORD *)(v8 + 912);
    v239 = *(_QWORD *)(v8 + 920);
    v240 = *(_OWORD *)(v8 + 928);
    *(_QWORD *)(v8 + 864) = v354;
    *(_QWORD *)(v8 + 872) = v225;
    *(_QWORD *)(v8 + 880) = v226;
    *(_QWORD *)(v8 + 888) = v227;
    *(_QWORD *)(v8 + 896) = v228;
    *(_QWORD *)(v8 + 904) = v229;
    *(_QWORD *)(v8 + 912) = v230;
    *(_QWORD *)(v8 + 920) = v231;
    *(_QWORD *)(v8 + 928) = v362;
    *(_QWORD *)(v8 + 936) = v372;
    *(_QWORD *)(v8 + 944) = v382;
    *(_QWORD *)(v8 + 952) = v392;
    *(_QWORD *)(v8 + 960) = v401;
    *(_BYTE *)(v8 + 968) = v411;
    sub_21421BB6C(v232, v233, v234, v235, v236, v237, v238, v239, v240);
  }
  v249 = (_OWORD *)(v8 + 976);
  v250 = (_OWORD *)(v9 + 976);
  v251 = *(unsigned __int8 *)(v9 + 1104);
  if (*(unsigned __int8 *)(v8 + 1104) == 255)
  {
    if (v251 == 255)
    {
      *v249 = *v250;
      v258 = *(_OWORD *)(v9 + 992);
      v259 = *(_OWORD *)(v9 + 1008);
      v260 = *(_OWORD *)(v9 + 1040);
      *(_OWORD *)(v8 + 1024) = *(_OWORD *)(v9 + 1024);
      *(_OWORD *)(v8 + 1040) = v260;
      *(_OWORD *)(v8 + 992) = v258;
      *(_OWORD *)(v8 + 1008) = v259;
      v261 = *(_OWORD *)(v9 + 1056);
      v262 = *(_OWORD *)(v9 + 1072);
      v263 = *(_OWORD *)(v9 + 1088);
      *(_BYTE *)(v8 + 1104) = *(_BYTE *)(v9 + 1104);
      *(_OWORD *)(v8 + 1072) = v262;
      *(_OWORD *)(v8 + 1088) = v263;
      *(_OWORD *)(v8 + 1056) = v261;
    }
    else
    {
      v414 = v251 & 1;
      v281 = *(_QWORD *)(v9 + 976);
      v282 = *(_QWORD *)(v9 + 984);
      v283 = *(_QWORD *)(v9 + 992);
      v284 = *(_QWORD *)(v9 + 1000);
      v285 = *(_QWORD *)(v9 + 1008);
      v286 = *(_QWORD *)(v9 + 1016);
      v287 = *(_QWORD *)(v9 + 1024);
      v288 = *(_QWORD *)(v9 + 1032);
      v348 = *(_QWORD *)(v9 + 1040);
      v351 = *(_QWORD *)(v9 + 1048);
      v356 = *(_QWORD *)(v9 + 1056);
      v365 = *(_QWORD *)(v9 + 1064);
      v375 = *(_QWORD *)(v9 + 1072);
      v385 = *(_QWORD *)(v9 + 1080);
      v395 = *(_QWORD *)(v9 + 1088);
      v404 = *(_QWORD *)(v9 + 1096);
      sub_21421B980(v281, v282, v283, v284, v285, v286, v287, v288, v348, v351, v356, v365);
      *(_QWORD *)(v8 + 976) = v281;
      *(_QWORD *)(v8 + 984) = v282;
      *(_QWORD *)(v8 + 992) = v283;
      *(_QWORD *)(v8 + 1000) = v284;
      *(_QWORD *)(v8 + 1008) = v285;
      *(_QWORD *)(v8 + 1016) = v286;
      *(_QWORD *)(v8 + 1024) = v287;
      *(_QWORD *)(v8 + 1032) = v288;
      *(_QWORD *)(v8 + 1040) = v348;
      *(_QWORD *)(v8 + 1048) = v351;
      *(_QWORD *)(v8 + 1056) = v356;
      *(_QWORD *)(v8 + 1064) = v365;
      *(_QWORD *)(v8 + 1072) = v375;
      *(_QWORD *)(v8 + 1080) = v385;
      *(_QWORD *)(v8 + 1088) = v395;
      *(_QWORD *)(v8 + 1096) = v404;
      *(_BYTE *)(v8 + 1104) = v414;
    }
  }
  else if (v251 == 255)
  {
    sub_2141E0750(v8 + 976, &qword_254D695C0);
    *v249 = *v250;
    v252 = *(_OWORD *)(v9 + 1040);
    v254 = *(_OWORD *)(v9 + 992);
    v253 = *(_OWORD *)(v9 + 1008);
    *(_OWORD *)(v8 + 1024) = *(_OWORD *)(v9 + 1024);
    *(_OWORD *)(v8 + 1040) = v252;
    *(_OWORD *)(v8 + 992) = v254;
    *(_OWORD *)(v8 + 1008) = v253;
    v256 = *(_OWORD *)(v9 + 1072);
    v255 = *(_OWORD *)(v9 + 1088);
    v257 = *(_OWORD *)(v9 + 1056);
    *(_BYTE *)(v8 + 1104) = *(_BYTE *)(v9 + 1104);
    *(_OWORD *)(v8 + 1072) = v256;
    *(_OWORD *)(v8 + 1088) = v255;
    *(_OWORD *)(v8 + 1056) = v257;
  }
  else
  {
    v413 = v251 & 1;
    v264 = *(_QWORD *)(v9 + 976);
    v265 = *(_QWORD *)(v9 + 984);
    v266 = *(_QWORD *)(v9 + 992);
    v267 = *(_QWORD *)(v9 + 1000);
    v268 = *(_QWORD *)(v9 + 1008);
    v269 = *(_QWORD *)(v9 + 1016);
    v270 = *(_QWORD *)(v9 + 1024);
    v347 = *(_QWORD *)(v9 + 1032);
    v349 = *(_QWORD *)(v9 + 1040);
    v350 = *(_QWORD *)(v9 + 1048);
    v355 = *(_QWORD *)(v9 + 1056);
    v364 = *(_QWORD *)(v9 + 1064);
    v374 = *(_QWORD *)(v9 + 1072);
    v384 = *(_QWORD *)(v9 + 1080);
    v394 = *(_QWORD *)(v9 + 1088);
    v403 = *(_QWORD *)(v9 + 1096);
    sub_21421B980(v264, v265, v266, v267, v268, v269, v270, v347, v349, v350, v355, v364);
    v271 = *(_QWORD *)(v8 + 976);
    v272 = *(_QWORD *)(v8 + 984);
    v273 = *(_QWORD *)(v8 + 992);
    v274 = *(_QWORD *)(v8 + 1000);
    v275 = *(_QWORD *)(v8 + 1008);
    v276 = *(_QWORD *)(v8 + 1016);
    v277 = *(_QWORD *)(v8 + 1024);
    v278 = *(_QWORD *)(v8 + 1032);
    v279 = *(_OWORD *)(v8 + 1040);
    v280 = *(_OWORD *)(v8 + 1056);
    *(_QWORD *)(v8 + 976) = v264;
    *(_QWORD *)(v8 + 984) = v265;
    *(_QWORD *)(v8 + 992) = v266;
    *(_QWORD *)(v8 + 1000) = v267;
    *(_QWORD *)(v8 + 1008) = v268;
    *(_QWORD *)(v8 + 1016) = v269;
    *(_QWORD *)(v8 + 1024) = v270;
    *(_QWORD *)(v8 + 1032) = v347;
    *(_QWORD *)(v8 + 1040) = v349;
    *(_QWORD *)(v8 + 1048) = v350;
    *(_QWORD *)(v8 + 1056) = v355;
    *(_QWORD *)(v8 + 1064) = v364;
    *(_QWORD *)(v8 + 1072) = v374;
    *(_QWORD *)(v8 + 1080) = v384;
    *(_QWORD *)(v8 + 1088) = v394;
    *(_QWORD *)(v8 + 1096) = v403;
    *(_BYTE *)(v8 + 1104) = v413;
    sub_21421BA80(v271, v272, v273, v274, v275, v276, v277, v278, v279, *((uint64_t *)&v279 + 1), v280, BYTE8(v280));
  }
  *(_QWORD *)(v8 + 1112) = *(_QWORD *)(v9 + 1112);
  *(_QWORD *)(v8 + 1120) = *(_QWORD *)(v9 + 1120);
  *(_QWORD *)(v8 + 1128) = *(_QWORD *)(v9 + 1128);
  *(_QWORD *)(v8 + 1136) = *(_QWORD *)(v9 + 1136);
  *(_BYTE *)(v8 + 1144) = *(_BYTE *)(v9 + 1144);
  *(_QWORD *)(v8 + 1152) = *(_QWORD *)(v9 + 1152);
  *(_QWORD *)(v8 + 1160) = *(_QWORD *)(v9 + 1160);
  *(_QWORD *)(v8 + 1168) = *(_QWORD *)(v9 + 1168);
  *(_QWORD *)(v8 + 1176) = *(_QWORD *)(v9 + 1176);
  v289 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v290 = v289[14];
  v291 = v8 + v290;
  v292 = v9 + v290;
  v293 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v293 - 8) + 24))(v291, v292, v293);
  *(_QWORD *)(v8 + v289[15]) = *(_QWORD *)(v9 + v289[15]);
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + v289[16]) = *(_QWORD *)(v9 + v289[16]);
  swift_retain();
  swift_release();
  v294 = v289[17];
  v295 = v8 + v294;
  v296 = (__int128 *)(v9 + v294);
  v297 = *(unsigned __int8 *)(v8 + v294 + 40);
  v298 = *(unsigned __int8 *)(v9 + v294 + 40);
  if (v297 == 255)
  {
    if (v298 == 255)
    {
      v301 = *v296;
      v302 = v296[1];
      *(_OWORD *)(v295 + 25) = *(__int128 *)((char *)v296 + 25);
      *(_OWORD *)v295 = v301;
      *(_OWORD *)(v295 + 16) = v302;
      goto LABEL_141;
    }
    if ((v298 & 1) != 0)
      goto LABEL_138;
LABEL_140:
    v304 = *((_QWORD *)v296 + 3);
    *(_QWORD *)(v295 + 24) = v304;
    *(_QWORD *)(v295 + 32) = *((_QWORD *)v296 + 4);
    (**(void (***)(uint64_t, __int128 *))(v304 - 8))(v295, v296);
    *(_BYTE *)(v295 + 40) = 0;
    goto LABEL_141;
  }
  if (v298 == 255)
  {
    sub_2141E61B0(v295);
    v299 = *(__int128 *)((char *)v296 + 25);
    v300 = v296[1];
    *(_OWORD *)v295 = *v296;
    *(_OWORD *)(v295 + 16) = v300;
    *(_OWORD *)(v295 + 25) = v299;
    goto LABEL_141;
  }
  if (v415 != v416)
  {
    sub_2141E61B0(v295);
    if ((*((_BYTE *)v296 + 40) & 1) != 0)
    {
LABEL_138:
      v303 = *((_QWORD *)v296 + 3);
      *(_QWORD *)(v295 + 24) = v303;
      *(_QWORD *)(v295 + 32) = *((_QWORD *)v296 + 4);
      (**(void (***)(uint64_t, __int128 *))(v303 - 8))(v295, v296);
      *(_BYTE *)(v295 + 40) = 1;
      goto LABEL_141;
    }
    goto LABEL_140;
  }
LABEL_141:
  v305 = (__int128 *)(v295 + 48);
  v306 = v296 + 3;
  v307 = *((unsigned __int8 *)v296 + 88);
  if (*(unsigned __int8 *)(v295 + 88) == 255)
  {
    if (v307 == 255)
    {
      v310 = *v306;
      v311 = v296[4];
      *(_OWORD *)(v295 + 73) = *(__int128 *)((char *)v296 + 73);
      *v305 = v310;
      *(_OWORD *)(v295 + 64) = v311;
      goto LABEL_151;
    }
    goto LABEL_148;
  }
  if (v307 == 255)
  {
    sub_2141E625C(v295 + 48);
    v308 = *(__int128 *)((char *)v296 + 73);
    v309 = v296[4];
    *v305 = *v306;
    *(_OWORD *)(v295 + 64) = v309;
    *(_OWORD *)(v295 + 73) = v308;
    goto LABEL_151;
  }
  if (v415 != v416)
  {
    sub_2141E625C(v295 + 48);
    LOBYTE(v307) = *((_BYTE *)v296 + 88);
LABEL_148:
    v312 = *((_QWORD *)v296 + 9);
    *(_QWORD *)(v295 + 72) = v312;
    *(_QWORD *)(v295 + 80) = *((_QWORD *)v296 + 10);
    (**(void (***)(uint64_t, uint64_t))(v312 - 8))(v295 + 48, (uint64_t)(v296 + 3));
    *(_BYTE *)(v295 + 88) = (v307 & 1) != 0;
  }
LABEL_151:
  v313 = (__int128 *)(v295 + 96);
  v314 = v296 + 6;
  v315 = *((unsigned __int8 *)v296 + 136);
  if (*(unsigned __int8 *)(v295 + 136) == 255)
  {
    if (v315 == 255)
    {
      v318 = *v314;
      v319 = v296[7];
      *(_OWORD *)(v295 + 121) = *(__int128 *)((char *)v296 + 121);
      *v313 = v318;
      *(_OWORD *)(v295 + 112) = v319;
      goto LABEL_161;
    }
    goto LABEL_158;
  }
  if (v315 == 255)
  {
    sub_2141E61B0(v295 + 96);
    v316 = *(__int128 *)((char *)v296 + 121);
    v317 = v296[7];
    *v313 = *v314;
    *(_OWORD *)(v295 + 112) = v317;
    *(_OWORD *)(v295 + 121) = v316;
    goto LABEL_161;
  }
  if (v415 != v416)
  {
    sub_2141E61B0(v295 + 96);
    LOBYTE(v315) = *((_BYTE *)v296 + 136);
LABEL_158:
    v320 = *((_QWORD *)v296 + 15);
    *(_QWORD *)(v295 + 120) = v320;
    *(_QWORD *)(v295 + 128) = *((_QWORD *)v296 + 16);
    (**(void (***)(uint64_t, uint64_t))(v320 - 8))(v295 + 96, (uint64_t)(v296 + 6));
    *(_BYTE *)(v295 + 136) = (v315 & 1) != 0;
  }
LABEL_161:
  v321 = (__int128 *)(v295 + 144);
  v322 = v296 + 9;
  v323 = *((unsigned __int8 *)v296 + 184);
  if (*(unsigned __int8 *)(v295 + 184) == 255)
  {
    if (v323 == 255)
    {
      v326 = *v322;
      v327 = v296[10];
      *(_OWORD *)(v295 + 169) = *(__int128 *)((char *)v296 + 169);
      *v321 = v326;
      *(_OWORD *)(v295 + 160) = v327;
      goto LABEL_171;
    }
    goto LABEL_168;
  }
  if (v323 == 255)
  {
    sub_2141E625C(v295 + 144);
    v324 = *(__int128 *)((char *)v296 + 169);
    v325 = v296[10];
    *v321 = *v322;
    *(_OWORD *)(v295 + 160) = v325;
    *(_OWORD *)(v295 + 169) = v324;
    goto LABEL_171;
  }
  if (v415 != v416)
  {
    sub_2141E625C(v295 + 144);
    LOBYTE(v323) = *((_BYTE *)v296 + 184);
LABEL_168:
    v328 = *((_QWORD *)v296 + 21);
    *(_QWORD *)(v295 + 168) = v328;
    *(_QWORD *)(v295 + 176) = *((_QWORD *)v296 + 22);
    (**(void (***)(uint64_t, uint64_t))(v328 - 8))(v295 + 144, (uint64_t)(v296 + 9));
    *(_BYTE *)(v295 + 184) = (v323 & 1) != 0;
  }
LABEL_171:
  v329 = (__int128 *)(v295 + 192);
  v330 = v296 + 12;
  v331 = *((unsigned __int8 *)v296 + 232);
  if (*(unsigned __int8 *)(v295 + 232) == 255)
  {
    if (v331 == 255)
    {
      v334 = *v330;
      v335 = v296[13];
      *(_OWORD *)(v295 + 217) = *(__int128 *)((char *)v296 + 217);
      *v329 = v334;
      *(_OWORD *)(v295 + 208) = v335;
      goto LABEL_181;
    }
    goto LABEL_178;
  }
  if (v331 == 255)
  {
    sub_2141E61B0(v295 + 192);
    v332 = *(__int128 *)((char *)v296 + 217);
    v333 = v296[13];
    *v329 = *v330;
    *(_OWORD *)(v295 + 208) = v333;
    *(_OWORD *)(v295 + 217) = v332;
    goto LABEL_181;
  }
  if (v415 != v416)
  {
    sub_2141E61B0(v295 + 192);
    LOBYTE(v331) = *((_BYTE *)v296 + 232);
LABEL_178:
    v336 = *((_QWORD *)v296 + 27);
    *(_QWORD *)(v295 + 216) = v336;
    *(_QWORD *)(v295 + 224) = *((_QWORD *)v296 + 28);
    (**(void (***)(uint64_t, uint64_t))(v336 - 8))(v295 + 192, (uint64_t)(v296 + 12));
    *(_BYTE *)(v295 + 232) = (v331 & 1) != 0;
  }
LABEL_181:
  v337 = (__int128 *)(v295 + 240);
  v338 = v296 + 15;
  v339 = (BOOL *)(v295 + 280);
  v340 = *((unsigned __int8 *)v296 + 280);
  if (*(unsigned __int8 *)(v295 + 280) == 255)
  {
    if (v340 == 255)
    {
      v343 = *v338;
      v344 = v296[16];
      *(_OWORD *)(v295 + 265) = *(__int128 *)((char *)v296 + 265);
      *v337 = v343;
      *(_OWORD *)(v295 + 256) = v344;
      goto LABEL_191;
    }
  }
  else
  {
    if (v340 == 255)
    {
      sub_2141E625C(v295 + 240);
      v341 = *(__int128 *)((char *)v296 + 265);
      v342 = v296[16];
      *v337 = *v338;
      *(_OWORD *)(v295 + 256) = v342;
      *(_OWORD *)(v295 + 265) = v341;
      goto LABEL_191;
    }
    if (v415 == v416)
      goto LABEL_191;
    sub_2141E625C(v295 + 240);
    LOBYTE(v340) = *((_BYTE *)v296 + 280);
  }
  v345 = *((_QWORD *)v296 + 33);
  *(_QWORD *)(v295 + 264) = v345;
  *(_QWORD *)(v295 + 272) = *((_QWORD *)v296 + 34);
  (**(void (***)(uint64_t, uint64_t))(v345 - 8))(v295 + 240, (uint64_t)(v296 + 15));
  *v339 = (v340 & 1) != 0;
LABEL_191:
  *(_BYTE *)(v295 + 281) = *((_BYTE *)v296 + 281);
  *(_BYTE *)(v295 + 282) = *((_BYTE *)v296 + 282);
  return v415;
}

uint64_t initializeWithTake for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_21442462C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  memcpy((void *)(a1 + v7 + 32), (const void *)(a2 + v7 + 32), 0x170uLL);
  memcpy((void *)(v8 + 400), (const void *)(v9 + 400), 0x2C1uLL);
  *(_OWORD *)(v8 + 1112) = *(_OWORD *)(v9 + 1112);
  *(_OWORD *)(v8 + 1128) = *(_OWORD *)(v9 + 1128);
  *(_BYTE *)(v8 + 1144) = *(_BYTE *)(v9 + 1144);
  *(_OWORD *)(v8 + 1152) = *(_OWORD *)(v9 + 1152);
  *(_OWORD *)(v8 + 1168) = *(_OWORD *)(v9 + 1168);
  v11 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v12 = v11[14];
  v13 = v8 + v12;
  v14 = v9 + v12;
  v15 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_QWORD *)(v8 + v11[15]) = *(_QWORD *)(v9 + v11[15]);
  *(_QWORD *)(v8 + v11[16]) = *(_QWORD *)(v9 + v11[16]);
  memcpy((void *)(v8 + v11[17]), (const void *)(v9 + v11[17]), 0x11BuLL);
  return a1;
}

uint64_t assignWithTake for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;

  v6 = sub_21442462C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release();
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  swift_release();
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
  swift_release();
  if (a1 != a2)
  {
    sub_2141E0750(v8 + 32, &qword_253F15AE8);
    memcpy((void *)(v8 + 32), (const void *)(v9 + 32), 0x11CuLL);
  }
  *(_BYTE *)(v8 + 316) = *(_BYTE *)(v9 + 316);
  v10 = *(_QWORD *)(v9 + 320);
  if (*(_QWORD *)(v8 + 320))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(v9 + 328);
      *(_QWORD *)(v8 + 320) = v10;
      *(_QWORD *)(v8 + 328) = v11;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = *(_QWORD *)(v9 + 328);
    *(_QWORD *)(v8 + 320) = v10;
    *(_QWORD *)(v8 + 328) = v12;
    goto LABEL_10;
  }
  *(_OWORD *)(v8 + 320) = *(_OWORD *)(v9 + 320);
LABEL_10:
  v13 = *(_QWORD *)(v9 + 336);
  if (*(_QWORD *)(v8 + 336))
  {
    if (v13)
    {
      v14 = *(_QWORD *)(v9 + 344);
      *(_QWORD *)(v8 + 336) = v13;
      *(_QWORD *)(v8 + 344) = v14;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = *(_QWORD *)(v9 + 344);
    *(_QWORD *)(v8 + 336) = v13;
    *(_QWORD *)(v8 + 344) = v15;
    goto LABEL_17;
  }
  *(_OWORD *)(v8 + 336) = *(_OWORD *)(v9 + 336);
LABEL_17:
  v16 = *(_QWORD *)(v9 + 352);
  if (*(_QWORD *)(v8 + 352))
  {
    if (v16)
    {
      v17 = *(_QWORD *)(v9 + 360);
      *(_QWORD *)(v8 + 352) = v16;
      *(_QWORD *)(v8 + 360) = v17;
      swift_release();
      goto LABEL_24;
    }
    swift_release();
  }
  else if (v16)
  {
    v18 = *(_QWORD *)(v9 + 360);
    *(_QWORD *)(v8 + 352) = v16;
    *(_QWORD *)(v8 + 360) = v18;
    goto LABEL_24;
  }
  *(_OWORD *)(v8 + 352) = *(_OWORD *)(v9 + 352);
LABEL_24:
  v19 = *(_QWORD *)(v9 + 368);
  if (*(_QWORD *)(v8 + 368))
  {
    if (v19)
    {
      v20 = *(_QWORD *)(v9 + 376);
      *(_QWORD *)(v8 + 368) = v19;
      *(_QWORD *)(v8 + 376) = v20;
      swift_release();
      goto LABEL_31;
    }
    swift_release();
  }
  else if (v19)
  {
    v21 = *(_QWORD *)(v9 + 376);
    *(_QWORD *)(v8 + 368) = v19;
    *(_QWORD *)(v8 + 376) = v21;
    goto LABEL_31;
  }
  *(_OWORD *)(v8 + 368) = *(_OWORD *)(v9 + 368);
LABEL_31:
  v22 = *(_QWORD *)(v9 + 384);
  if (*(_QWORD *)(v8 + 384))
  {
    if (v22)
    {
      v23 = *(_QWORD *)(v9 + 392);
      *(_QWORD *)(v8 + 384) = v22;
      *(_QWORD *)(v8 + 392) = v23;
      swift_release();
      goto LABEL_38;
    }
    swift_release();
  }
  else if (v22)
  {
    v24 = *(_QWORD *)(v9 + 392);
    *(_QWORD *)(v8 + 384) = v22;
    *(_QWORD *)(v8 + 392) = v24;
    goto LABEL_38;
  }
  *(_OWORD *)(v8 + 384) = *(_OWORD *)(v9 + 384);
LABEL_38:
  if (*(unsigned __int8 *)(v8 + 504) == 255)
  {
LABEL_41:
    v26 = *(_OWORD *)(v9 + 480);
    *(_OWORD *)(v8 + 464) = *(_OWORD *)(v9 + 464);
    *(_OWORD *)(v8 + 480) = v26;
    *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
    v27 = *(_OWORD *)(v9 + 416);
    *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
    *(_OWORD *)(v8 + 416) = v27;
    v28 = *(_OWORD *)(v9 + 448);
    *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
    *(_OWORD *)(v8 + 448) = v28;
    goto LABEL_43;
  }
  v25 = *(unsigned __int8 *)(v9 + 504);
  if (v25 == 255)
  {
    sub_2141E0750(v8 + 400, &qword_253F13368);
    goto LABEL_41;
  }
  v29 = *(_QWORD *)(v9 + 496);
  v30 = *(_QWORD *)(v8 + 400);
  v31 = *(_QWORD *)(v8 + 408);
  v32 = *(_QWORD *)(v8 + 416);
  v33 = *(_QWORD *)(v8 + 424);
  v34 = *(_QWORD *)(v8 + 432);
  v35 = *(_QWORD *)(v8 + 440);
  v36 = *(_QWORD *)(v8 + 448);
  v37 = *(_QWORD *)(v8 + 456);
  v38 = *(_OWORD *)(v8 + 464);
  v39 = *(_OWORD *)(v9 + 416);
  *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
  *(_OWORD *)(v8 + 416) = v39;
  v40 = *(_OWORD *)(v9 + 448);
  *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
  *(_OWORD *)(v8 + 448) = v40;
  v41 = *(_OWORD *)(v9 + 480);
  *(_OWORD *)(v8 + 464) = *(_OWORD *)(v9 + 464);
  *(_OWORD *)(v8 + 480) = v41;
  *(_QWORD *)(v8 + 496) = v29;
  *(_BYTE *)(v8 + 504) = v25 & 1;
  sub_21421BB6C(v30, v31, v32, v33, v34, v35, v36, v37, v38);
LABEL_43:
  if (*(unsigned __int8 *)(v8 + 616) == 255)
  {
LABEL_46:
    v43 = *(_OWORD *)(v9 + 592);
    *(_OWORD *)(v8 + 576) = *(_OWORD *)(v9 + 576);
    *(_OWORD *)(v8 + 592) = v43;
    *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
    v44 = *(_OWORD *)(v9 + 528);
    *(_OWORD *)(v8 + 512) = *(_OWORD *)(v9 + 512);
    *(_OWORD *)(v8 + 528) = v44;
    v45 = *(_OWORD *)(v9 + 560);
    *(_OWORD *)(v8 + 544) = *(_OWORD *)(v9 + 544);
    *(_OWORD *)(v8 + 560) = v45;
    goto LABEL_48;
  }
  v42 = *(unsigned __int8 *)(v9 + 616);
  if (v42 == 255)
  {
    sub_2141E0750(v8 + 512, &qword_253F13368);
    goto LABEL_46;
  }
  v46 = *(_QWORD *)(v9 + 608);
  v47 = *(_QWORD *)(v8 + 512);
  v48 = *(_QWORD *)(v8 + 520);
  v49 = *(_QWORD *)(v8 + 528);
  v50 = *(_QWORD *)(v8 + 536);
  v51 = *(_QWORD *)(v8 + 544);
  v52 = *(_QWORD *)(v8 + 552);
  v53 = *(_QWORD *)(v8 + 560);
  v54 = *(_QWORD *)(v8 + 568);
  v55 = *(_OWORD *)(v8 + 576);
  v56 = *(_OWORD *)(v9 + 528);
  *(_OWORD *)(v8 + 512) = *(_OWORD *)(v9 + 512);
  *(_OWORD *)(v8 + 528) = v56;
  v57 = *(_OWORD *)(v9 + 560);
  *(_OWORD *)(v8 + 544) = *(_OWORD *)(v9 + 544);
  *(_OWORD *)(v8 + 560) = v57;
  v58 = *(_OWORD *)(v9 + 592);
  *(_OWORD *)(v8 + 576) = *(_OWORD *)(v9 + 576);
  *(_OWORD *)(v8 + 592) = v58;
  *(_QWORD *)(v8 + 608) = v46;
  *(_BYTE *)(v8 + 616) = v42 & 1;
  sub_21421BB6C(v47, v48, v49, v50, v51, v52, v53, v54, v55);
LABEL_48:
  if (*(unsigned __int8 *)(v8 + 720) == 255)
  {
LABEL_51:
    v60 = *(_OWORD *)(v9 + 704);
    *(_OWORD *)(v8 + 688) = *(_OWORD *)(v9 + 688);
    *(_OWORD *)(v8 + 704) = v60;
    *(_BYTE *)(v8 + 720) = *(_BYTE *)(v9 + 720);
    v61 = *(_OWORD *)(v9 + 640);
    *(_OWORD *)(v8 + 624) = *(_OWORD *)(v9 + 624);
    *(_OWORD *)(v8 + 640) = v61;
    v62 = *(_OWORD *)(v9 + 672);
    *(_OWORD *)(v8 + 656) = *(_OWORD *)(v9 + 656);
    *(_OWORD *)(v8 + 672) = v62;
    goto LABEL_53;
  }
  v59 = *(unsigned __int8 *)(v9 + 720);
  if (v59 == 255)
  {
    sub_2141E0750(v8 + 624, qword_253F10468);
    goto LABEL_51;
  }
  v63 = *(_QWORD *)(v8 + 624);
  v64 = *(_QWORD *)(v8 + 632);
  v65 = *(_QWORD *)(v8 + 640);
  v66 = *(_QWORD *)(v8 + 648);
  v67 = *(_QWORD *)(v8 + 656);
  v68 = *(_QWORD *)(v8 + 664);
  v69 = *(_QWORD *)(v8 + 672);
  v70 = *(_QWORD *)(v8 + 680);
  v71 = *(_OWORD *)(v9 + 640);
  *(_OWORD *)(v8 + 624) = *(_OWORD *)(v9 + 624);
  *(_OWORD *)(v8 + 640) = v71;
  v72 = *(_OWORD *)(v9 + 672);
  *(_OWORD *)(v8 + 656) = *(_OWORD *)(v9 + 656);
  *(_OWORD *)(v8 + 672) = v72;
  v73 = *(_OWORD *)(v9 + 704);
  *(_OWORD *)(v8 + 688) = *(_OWORD *)(v9 + 688);
  *(_OWORD *)(v8 + 704) = v73;
  *(_BYTE *)(v8 + 720) = v59 & 1;
  sub_21421B8A0(v63, v64, v65, v66, v67, v68, v69, v70);
LABEL_53:
  if (*(unsigned __int8 *)(v8 + 856) == 255)
  {
LABEL_57:
    v74 = *(_OWORD *)(v9 + 840);
    *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
    *(_OWORD *)(v8 + 840) = v74;
    *(_BYTE *)(v8 + 856) = *(_BYTE *)(v9 + 856);
    v75 = *(_OWORD *)(v9 + 776);
    *(_OWORD *)(v8 + 760) = *(_OWORD *)(v9 + 760);
    *(_OWORD *)(v8 + 776) = v75;
    v76 = *(_OWORD *)(v9 + 808);
    *(_OWORD *)(v8 + 792) = *(_OWORD *)(v9 + 792);
    *(_OWORD *)(v8 + 808) = v76;
    v77 = *(_OWORD *)(v9 + 744);
    *(_OWORD *)(v8 + 728) = *(_OWORD *)(v9 + 728);
    *(_OWORD *)(v8 + 744) = v77;
    goto LABEL_58;
  }
  if (*(unsigned __int8 *)(v9 + 856) == 255 || a1 != a2)
  {
    sub_2141E0750(v8 + 728, &qword_254D695C8);
    goto LABEL_57;
  }
LABEL_58:
  if (*(unsigned __int8 *)(v8 + 968) == 255)
  {
LABEL_61:
    v79 = *(_OWORD *)(v9 + 944);
    *(_OWORD *)(v8 + 928) = *(_OWORD *)(v9 + 928);
    *(_OWORD *)(v8 + 944) = v79;
    *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
    v80 = *(_OWORD *)(v9 + 880);
    *(_OWORD *)(v8 + 864) = *(_OWORD *)(v9 + 864);
    *(_OWORD *)(v8 + 880) = v80;
    v81 = *(_OWORD *)(v9 + 912);
    *(_OWORD *)(v8 + 896) = *(_OWORD *)(v9 + 896);
    *(_OWORD *)(v8 + 912) = v81;
    goto LABEL_63;
  }
  v78 = *(unsigned __int8 *)(v9 + 968);
  if (v78 == 255)
  {
    sub_2141E0750(v8 + 864, &qword_253F13368);
    goto LABEL_61;
  }
  v82 = *(_QWORD *)(v9 + 960);
  v83 = *(_QWORD *)(v8 + 864);
  v84 = *(_QWORD *)(v8 + 872);
  v85 = *(_QWORD *)(v8 + 880);
  v86 = *(_QWORD *)(v8 + 888);
  v87 = *(_QWORD *)(v8 + 896);
  v88 = *(_QWORD *)(v8 + 904);
  v89 = *(_QWORD *)(v8 + 912);
  v90 = *(_QWORD *)(v8 + 920);
  v91 = *(_OWORD *)(v8 + 928);
  v92 = *(_OWORD *)(v9 + 880);
  *(_OWORD *)(v8 + 864) = *(_OWORD *)(v9 + 864);
  *(_OWORD *)(v8 + 880) = v92;
  v93 = *(_OWORD *)(v9 + 912);
  *(_OWORD *)(v8 + 896) = *(_OWORD *)(v9 + 896);
  *(_OWORD *)(v8 + 912) = v93;
  v94 = *(_OWORD *)(v9 + 944);
  *(_OWORD *)(v8 + 928) = *(_OWORD *)(v9 + 928);
  *(_OWORD *)(v8 + 944) = v94;
  *(_QWORD *)(v8 + 960) = v82;
  *(_BYTE *)(v8 + 968) = v78 & 1;
  sub_21421BB6C(v83, v84, v85, v86, v87, v88, v89, v90, v91);
LABEL_63:
  if (*(unsigned __int8 *)(v8 + 1104) == 255)
  {
LABEL_66:
    v96 = *(_OWORD *)(v9 + 1088);
    *(_OWORD *)(v8 + 1072) = *(_OWORD *)(v9 + 1072);
    *(_OWORD *)(v8 + 1088) = v96;
    *(_BYTE *)(v8 + 1104) = *(_BYTE *)(v9 + 1104);
    v97 = *(_OWORD *)(v9 + 1024);
    *(_OWORD *)(v8 + 1008) = *(_OWORD *)(v9 + 1008);
    *(_OWORD *)(v8 + 1024) = v97;
    v98 = *(_OWORD *)(v9 + 1056);
    *(_OWORD *)(v8 + 1040) = *(_OWORD *)(v9 + 1040);
    *(_OWORD *)(v8 + 1056) = v98;
    v99 = *(_OWORD *)(v9 + 992);
    *(_OWORD *)(v8 + 976) = *(_OWORD *)(v9 + 976);
    *(_OWORD *)(v8 + 992) = v99;
    goto LABEL_68;
  }
  v95 = *(unsigned __int8 *)(v9 + 1104);
  if (v95 == 255)
  {
    sub_2141E0750(v8 + 976, &qword_254D695C0);
    goto LABEL_66;
  }
  v100 = *(_QWORD *)(v8 + 976);
  v101 = *(_QWORD *)(v8 + 984);
  v102 = *(_QWORD *)(v8 + 992);
  v103 = *(_QWORD *)(v8 + 1000);
  v104 = *(_QWORD *)(v8 + 1008);
  v105 = *(_QWORD *)(v8 + 1016);
  v106 = *(_QWORD *)(v8 + 1024);
  v107 = *(_QWORD *)(v8 + 1032);
  v108 = *(_OWORD *)(v8 + 1040);
  v109 = *(_OWORD *)(v8 + 1056);
  v110 = *(_OWORD *)(v9 + 992);
  *(_OWORD *)(v8 + 976) = *(_OWORD *)(v9 + 976);
  *(_OWORD *)(v8 + 992) = v110;
  v111 = *(_OWORD *)(v9 + 1024);
  *(_OWORD *)(v8 + 1008) = *(_OWORD *)(v9 + 1008);
  *(_OWORD *)(v8 + 1024) = v111;
  *(_OWORD *)(v8 + 1040) = *(_OWORD *)(v9 + 1040);
  *(_OWORD *)(v8 + 1056) = *(_OWORD *)(v9 + 1056);
  *(_OWORD *)(v8 + 1072) = *(_OWORD *)(v9 + 1072);
  *(_OWORD *)(v8 + 1088) = *(_OWORD *)(v9 + 1088);
  *(_BYTE *)(v8 + 1104) = v95 & 1;
  sub_21421BA80(v100, v101, v102, v103, v104, v105, v106, v107, v108, *((uint64_t *)&v108 + 1), v109, BYTE8(v109));
LABEL_68:
  *(_QWORD *)(v8 + 1112) = *(_QWORD *)(v9 + 1112);
  *(_OWORD *)(v8 + 1120) = *(_OWORD *)(v9 + 1120);
  *(_QWORD *)(v8 + 1136) = *(_QWORD *)(v9 + 1136);
  *(_BYTE *)(v8 + 1144) = *(_BYTE *)(v9 + 1144);
  *(_OWORD *)(v8 + 1152) = *(_OWORD *)(v9 + 1152);
  *(_OWORD *)(v8 + 1168) = *(_OWORD *)(v9 + 1168);
  v112 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v113 = v112[14];
  v114 = v8 + v113;
  v115 = v9 + v113;
  v116 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 40))(v114, v115, v116);
  *(_QWORD *)(v8 + v112[15]) = *(_QWORD *)(v9 + v112[15]);
  swift_release();
  *(_QWORD *)(v8 + v112[16]) = *(_QWORD *)(v9 + v112[16]);
  swift_release();
  v117 = v112[17];
  v118 = v8 + v117;
  v119 = v9 + v117;
  if (*(unsigned __int8 *)(v8 + v117 + 40) == 255)
  {
LABEL_72:
    v120 = *(_OWORD *)(v119 + 16);
    *(_OWORD *)v118 = *(_OWORD *)v119;
    *(_OWORD *)(v118 + 16) = v120;
    *(_OWORD *)(v118 + 25) = *(_OWORD *)(v119 + 25);
    goto LABEL_73;
  }
  if (*(unsigned __int8 *)(v119 + 40) == 255 || a1 != a2)
  {
    sub_2141E61B0(v118);
    goto LABEL_72;
  }
LABEL_73:
  if (*(unsigned __int8 *)(v118 + 88) == 255)
  {
LABEL_77:
    v121 = *(_OWORD *)(v119 + 64);
    *(_OWORD *)(v118 + 48) = *(_OWORD *)(v119 + 48);
    *(_OWORD *)(v118 + 64) = v121;
    *(_OWORD *)(v118 + 73) = *(_OWORD *)(v119 + 73);
    goto LABEL_78;
  }
  if (*(unsigned __int8 *)(v119 + 88) == 255 || a1 != a2)
  {
    sub_2141E625C(v118 + 48);
    goto LABEL_77;
  }
LABEL_78:
  if (*(unsigned __int8 *)(v118 + 136) == 255)
  {
LABEL_82:
    v122 = *(_OWORD *)(v119 + 112);
    *(_OWORD *)(v118 + 96) = *(_OWORD *)(v119 + 96);
    *(_OWORD *)(v118 + 112) = v122;
    *(_OWORD *)(v118 + 121) = *(_OWORD *)(v119 + 121);
    goto LABEL_83;
  }
  if (*(unsigned __int8 *)(v119 + 136) == 255 || a1 != a2)
  {
    sub_2141E61B0(v118 + 96);
    goto LABEL_82;
  }
LABEL_83:
  if (*(unsigned __int8 *)(v118 + 184) == 255)
  {
LABEL_87:
    v123 = *(_OWORD *)(v119 + 160);
    *(_OWORD *)(v118 + 144) = *(_OWORD *)(v119 + 144);
    *(_OWORD *)(v118 + 160) = v123;
    *(_OWORD *)(v118 + 169) = *(_OWORD *)(v119 + 169);
    goto LABEL_88;
  }
  if (*(unsigned __int8 *)(v119 + 184) == 255 || a1 != a2)
  {
    sub_2141E625C(v118 + 144);
    goto LABEL_87;
  }
LABEL_88:
  if (*(unsigned __int8 *)(v118 + 232) == 255)
  {
LABEL_92:
    v124 = *(_OWORD *)(v119 + 208);
    *(_OWORD *)(v118 + 192) = *(_OWORD *)(v119 + 192);
    *(_OWORD *)(v118 + 208) = v124;
    *(_OWORD *)(v118 + 217) = *(_OWORD *)(v119 + 217);
    goto LABEL_93;
  }
  if (*(unsigned __int8 *)(v119 + 232) == 255 || a1 != a2)
  {
    sub_2141E61B0(v118 + 192);
    goto LABEL_92;
  }
LABEL_93:
  if (*(unsigned __int8 *)(v118 + 280) == 255)
  {
LABEL_97:
    v125 = *(_OWORD *)(v119 + 256);
    *(_OWORD *)(v118 + 240) = *(_OWORD *)(v119 + 240);
    *(_OWORD *)(v118 + 256) = v125;
    *(_OWORD *)(v118 + 265) = *(_OWORD *)(v119 + 265);
    goto LABEL_98;
  }
  if (*(unsigned __int8 *)(v119 + 280) == 255 || a1 != a2)
  {
    sub_2141E625C(v118 + 240);
    goto LABEL_97;
  }
LABEL_98:
  *(_BYTE *)(v118 + 281) = *(_BYTE *)(v119 + 281);
  *(_BYTE *)(v118 + 282) = *(_BYTE *)(v119 + 282);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScrollTargetBehaviorContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C194C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_21442462C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for ChartProxy();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ChartScrollTargetBehaviorContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C19CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_21442462C();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for ChartProxy();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_2143C1A48()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_21442462C();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ChartModel.Scenegraph();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of ChartScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for ValueAlignedLimitBehavior()
{
  return &type metadata for ValueAlignedLimitBehavior;
}

uint64_t sub_2143C1AE8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MajorValueAlignmentStorage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2143C1B50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for ValueAlignment(0);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v9 = sub_214423960();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(v7 + 64));
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
    }
  }
  return a1;
}

void *sub_2143C1C68(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ValueAlignment(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    v6 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_214423960();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  return a1;
}

void *sub_2143C1D4C(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = type metadata accessor for ValueAlignment(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 2, v4);
  v8 = v6(a2, 2, v4);
  if (!v7)
  {
    if (!v8)
    {
      if (a1 == a2)
        return a1;
      sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v11 = sub_214423960();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v10 = *(_QWORD *)(v5 + 64);
      goto LABEL_8;
    }
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    v10 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v10);
    return a1;
  }
  if (v8)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_214423960();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  return a1;
}

void *sub_2143C1ECC(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ValueAlignment(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    v6 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_214423960();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  return a1;
}

void *sub_2143C1FB0(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = type metadata accessor for ValueAlignment(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 2, v4);
  v8 = v6(a2, 2, v4);
  if (!v7)
  {
    if (!v8)
    {
      if (a1 == a2)
        return a1;
      sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v11 = sub_214423960();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v10 = *(_QWORD *)(v5 + 64);
      goto LABEL_8;
    }
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    v10 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v10);
    return a1;
  }
  if (v8)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_214423960();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  return a1;
}

uint64_t sub_2143C2130()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C213C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MajorValueAlignmentStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_2143C2178()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C2184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MajorValueAlignmentStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueAlignedChartScrollTargetBehavior(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ValueAlignment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_214423960();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
      v14 = *(_QWORD *)(v7 - 8);
    }
    else
    {
      v14 = *(_QWORD *)(v7 - 8);
      memcpy(v11, v12, *(_QWORD *)(v14 + 64));
    }
    v15 = a3[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v18((char *)a2 + v15, 2, v7))
    {
      v19 = type metadata accessor for MajorValueAlignmentStorage(0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v20 = sub_214423960();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v16, v17, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v16, v17, *(_QWORD *)(v14 + 64));
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 2, v7);
    }
    v21 = a3[7];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    if (v18((char *)a2 + v21, 2, v7))
    {
      v24 = type metadata accessor for MajorValueAlignmentStorage(0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v25 = sub_214423960();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v22, v23, *(_QWORD *)(v14 + 64));
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v22, 0, 2, v7);
    }
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return a1;
}

uint64_t destroy for ValueAlignedChartScrollTargetBehavior(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = type metadata accessor for ValueAlignment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_214423960();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  v6 = a1 + a2[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_214423960();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  v8 = a1 + a2[6];
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v9(v8, 2, v4) && swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_214423960();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  v11 = a1 + a2[7];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v11, 2, v4);
  if (!(_DWORD)result)
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 1)
    {
      v13 = sub_214423960();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
    }
  }
  return result;
}

char *initializeWithCopy for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for ValueAlignment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
    v12 = *(_QWORD *)(v6 - 8);
  }
  else
  {
    v12 = *(_QWORD *)(v6 - 8);
    memcpy(v9, v10, *(_QWORD *)(v12 + 64));
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v16(&a2[v13], 2, v6))
  {
    v17 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(v12 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 2, v6);
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  if (v16(&a2[v19], 2, v6))
  {
    v22 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(v12 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v20, 0, 2, v6);
  }
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *assignWithCopy for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
    v6 = type metadata accessor for ValueAlignment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_2141DD370((uint64_t)&a1[v8], type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ValueAlignment(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 2, v15);
  v19 = v17(v14, 2, v15);
  if (!v18)
  {
    if (!v19)
    {
      if (a1 == a2)
        goto LABEL_21;
      sub_2141DD370((uint64_t)v13, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v22 = sub_214423960();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v13, v14, v22);
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
      v21 = *(_QWORD *)(v16 + 64);
LABEL_15:
      memcpy(v13, v14, v21);
      goto LABEL_21;
    }
    sub_2141DD370((uint64_t)v13, type metadata accessor for ValueAlignment);
LABEL_14:
    v21 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
    goto LABEL_15;
  }
  if (v19)
    goto LABEL_14;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v13, v14, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(v16 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
LABEL_21:
  v23 = a3[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = v17(&a1[v23], 2, v15);
  v27 = v17(v25, 2, v15);
  if (!v26)
  {
    if (!v27)
    {
      if (a1 == a2)
        goto LABEL_34;
      sub_2141DD370((uint64_t)v24, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v30 = sub_214423960();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v24, v25, v30);
        swift_storeEnumTagMultiPayload();
        goto LABEL_34;
      }
      v29 = *(_QWORD *)(v16 + 64);
      goto LABEL_28;
    }
    sub_2141DD370((uint64_t)v24, type metadata accessor for ValueAlignment);
LABEL_27:
    v29 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_28:
    memcpy(v24, v25, v29);
    goto LABEL_34;
  }
  if (v27)
    goto LABEL_27;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v28 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(v16 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 2, v15);
LABEL_34:
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *initializeWithTake for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for ValueAlignment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
    v12 = *(_QWORD *)(v6 - 8);
  }
  else
  {
    v12 = *(_QWORD *)(v6 - 8);
    memcpy(v9, v10, *(_QWORD *)(v12 + 64));
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v16(&a2[v13], 2, v6))
  {
    v17 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(v12 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 2, v6);
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  if (v16(&a2[v19], 2, v6))
  {
    v22 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(v12 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v20, 0, 2, v6);
  }
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *assignWithTake for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
    v6 = type metadata accessor for ValueAlignment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_2141DD370((uint64_t)&a1[v8], type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_214423960();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ValueAlignment(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 2, v15);
  v19 = v17(v14, 2, v15);
  if (!v18)
  {
    if (!v19)
    {
      if (a1 == a2)
        goto LABEL_21;
      sub_2141DD370((uint64_t)v13, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v22 = sub_214423960();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v13, v14, v22);
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
      v21 = *(_QWORD *)(v16 + 64);
LABEL_15:
      memcpy(v13, v14, v21);
      goto LABEL_21;
    }
    sub_2141DD370((uint64_t)v13, type metadata accessor for ValueAlignment);
LABEL_14:
    v21 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
    goto LABEL_15;
  }
  if (v19)
    goto LABEL_14;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(v16 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
LABEL_21:
  v23 = a3[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = v17(&a1[v23], 2, v15);
  v27 = v17(v25, 2, v15);
  if (!v26)
  {
    if (!v27)
    {
      if (a1 == a2)
        goto LABEL_34;
      sub_2141DD370((uint64_t)v24, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v30 = sub_214423960();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v24, v25, v30);
        swift_storeEnumTagMultiPayload();
        goto LABEL_34;
      }
      v29 = *(_QWORD *)(v16 + 64);
      goto LABEL_28;
    }
    sub_2141DD370((uint64_t)v24, type metadata accessor for ValueAlignment);
LABEL_27:
    v29 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_28:
    memcpy(v24, v25, v29);
    goto LABEL_34;
  }
  if (v27)
    goto LABEL_27;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v28 = sub_214423960();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v24, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(v16 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 2, v15);
LABEL_34:
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueAlignedChartScrollTargetBehavior()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C32AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for ValueAlignment(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for MajorValueAlignmentStorage(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 3)
    return v14 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ValueAlignedChartScrollTargetBehavior()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C335C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for ValueAlignment(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for MajorValueAlignmentStorage(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 2;
  return result;
}

uint64_t sub_2143C3400()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ValueAlignment(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MajorValueAlignmentStorage(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_2143C3490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  sub_2141D7924(&qword_254D6D970);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141D9054(&qword_254D6D978, &qword_254D6D970, MEMORY[0x24BDF1248]);
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

uint64_t sub_2143C3510(uint64_t a1)
{
  return sub_2143C3538(a1, &qword_254D6D970, &qword_254D6D978);
}

uint64_t sub_2143C3524(uint64_t a1)
{
  return sub_2143C3538(a1, &qword_254D6D970, &qword_254D6D978);
}

uint64_t sub_2143C3538(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v5 = *(_QWORD *)(a1 + 16);
  sub_2141D7924(a2);
  v6 = sub_214424110();
  v8[0] = v5;
  v8[1] = sub_2141D9054(a3, a2, MEMORY[0x24BDF1248]);
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v6, v8);
}

uint64_t sub_2143C35B8(uint64_t a1)
{
  return sub_2143C3538(a1, &qword_254D6D980, &qword_254D6D988);
}

uint64_t _s6Charts25ValueAlignedLimitBehaviorV4RoleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2143C3618 + 4 * byte_2144312D9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2143C364C + 4 * byte_2144312D4[v4]))();
}

uint64_t sub_2143C364C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143C3654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143C365CLL);
  return result;
}

uint64_t sub_2143C3668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143C3670);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2143C3674(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143C367C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ValueAlignedLimitBehavior.Role()
{
  return &type metadata for ValueAlignedLimitBehavior.Role;
}

uint64_t *sub_2143C3698(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    sub_2141D8BF8(&qword_254D6D990);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_214424488();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_2141D8BF8(&qword_253F15BE8);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = sub_214424488();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_2141D8BF8(&qword_253F15BE8);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_2143C38A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 24);
  sub_2141D8BF8(&qword_254D6D990);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_214424488();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v7 = a1 + *(int *)(a2 + 28);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v8 = sub_214424488();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_WORD *sub_2143C39C0(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  sub_2141D8BF8(&qword_254D6D990);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_214424488();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = sub_2141D8BF8(&qword_253F15BE8);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    *v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = sub_214424488();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_2141D8BF8(&qword_253F15BE8);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  else
  {
    *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_BYTE *sub_2143C3BA0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = &a1[v6];
    v8 = &a2[v6];
    sub_2141E0750((uint64_t)&a1[v6], &qword_254D6D990);
    sub_2141D8BF8(&qword_254D6D990);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = sub_214424488();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = sub_2141D8BF8(&qword_253F15BE8);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v12 = *(int *)(a3 + 28);
    v13 = &a1[v12];
    v14 = &a2[v12];
    sub_2141E0750((uint64_t)&a1[v12], &qword_254D6D990);
    sub_2141D8BF8(&qword_254D6D990);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = sub_214424488();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_2141D8BF8(&qword_253F15BE8);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
    }
    else
    {
      *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_WORD *sub_2143C3DC0(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2141D8BF8(&qword_254D6D990);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_214424488();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      v12 = sub_2141D8BF8(&qword_253F15BE8);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v13 = *(int *)(a3 + 28);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_214424488();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_2141D8BF8(&qword_253F15BE8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

_WORD *sub_2143C3F98(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_2141E0750((uint64_t)a1 + v6, &qword_254D6D990);
    v9 = sub_2141D8BF8(&qword_254D6D990);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_214424488();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        v12 = sub_2141D8BF8(&qword_253F15BE8);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    v13 = *(int *)(a3 + 28);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_2141E0750((uint64_t)a1 + v13, &qword_254D6D990);
    v16 = sub_2141D8BF8(&qword_254D6D990);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = sub_214424488();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      {
        v19 = sub_2141D8BF8(&qword_253F15BE8);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v15, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2143C41A8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C41B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 252)
  {
    if (*(unsigned __int8 *)(a1 + 1) <= 3u)
      v4 = 3;
    else
      v4 = *(unsigned __int8 *)(a1 + 1);
    v5 = v4 - 3;
    if (*(unsigned __int8 *)(a1 + 1) >= 3u)
      return v5;
    else
      return 0;
  }
  else
  {
    v9 = sub_2141D8BF8(qword_254D6D998);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t sub_2143C4238()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C4244(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 252)
  {
    *(_BYTE *)(result + 1) = a2 + 3;
  }
  else
  {
    v7 = sub_2141D8BF8(qword_254D6D998);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AutomaticScrollLimitModifier(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F152C0);
}

void sub_2143C42CC()
{
  unint64_t v0;

  sub_2143C434C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_2143C434C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F15B00)
  {
    sub_2141D7924(&qword_253F15BE8);
    v0 = sub_214423D5C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F15B00);
  }
}

ValueMetadata *type metadata accessor for AnyChartScrollTargetBehavior()
{
  return &type metadata for AnyChartScrollTargetBehavior;
}

uint64_t *sub_2143C43B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_214423960();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_2143C4468(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = sub_214423960();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *sub_2143C44B4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_214423960();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_2143C4540(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_214423960();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *sub_2143C45E4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_214423960();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_2143C4670(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_214423960();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2143C4714()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214423960();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_2143C4788(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ValueAlignment(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v10 = sub_214423960();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(v8 + 64));
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_2143C4894(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = type metadata accessor for ValueAlignment(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 1)
    {
      v4 = sub_214423960();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    }
  }
  return result;
}

void *sub_2143C4910(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for ValueAlignment(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_214423960();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_2143C49F8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ValueAlignment(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        return a1;
      sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v13 = sub_214423960();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v12 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v12);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_214423960();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_2143C4B7C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for ValueAlignment(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_214423960();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_2143C4C64(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ValueAlignment(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        return a1;
      sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v13 = sub_214423960();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v12 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_2141DD370((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v12);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_214423960();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_2143C4DE8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C4DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for ValueAlignment(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_2143C4E40()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143C4E4C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for ValueAlignment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_2143C4EA0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ValueAlignment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_2143C4ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ValueAlignment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t sub_2143C4F18()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ValueAlignment(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t destroy for ChartScrollPositionConfiguration(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = result;
  v2 = *(unsigned __int16 *)(result + 40);
  if (v2 >> 8 <= 0xFE)
  {
    if ((v2 & 0x100) != 0)
      result = _s6Charts15AnyChartContentVwxx_0(result);
    else
      result = sub_2141E60B8(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
  }
  v3 = *(unsigned __int16 *)(v1 + 88);
  if (v3 >> 8 <= 0xFE)
  {
    if ((v3 & 0x100) != 0)
      return _s6Charts15AnyChartContentVwxx_0(v1 + 48);
    else
      return sub_2141E60B8(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64));
  }
  return result;
}

uint64_t initializeWithCopy for ChartScrollPositionConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;

  v4 = *(unsigned __int16 *)(a2 + 40);
  if (v4 >> 8 <= 0xFE)
  {
    if ((v4 & 0x100) != 0)
    {
      v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = v4 & 1;
      *(_BYTE *)(a1 + 41) = 1;
    }
    else
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_BYTE *)(a2 + 16);
      sub_2141DD14C(*(_QWORD *)a2, v7, v8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 41) = 0;
    }
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  v10 = (_OWORD *)(a1 + 48);
  v11 = (_OWORD *)(a2 + 48);
  v12 = *(unsigned __int16 *)(a2 + 88);
  if (v12 >> 8 <= 0xFE)
  {
    if ((v12 & 0x100) != 0)
    {
      v17 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v17;
      (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v10, v11);
      *(_BYTE *)(a1 + 88) = v12 & 1;
      *(_BYTE *)(a1 + 89) = 1;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 48);
      v15 = *(_QWORD *)(a2 + 56);
      v16 = *(_BYTE *)(a2 + 64);
      sub_2141DD14C(v14, v15, v16);
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      *(_BYTE *)(a1 + 64) = v16;
      *(_BYTE *)(a1 + 89) = 0;
    }
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 64);
    *v10 = *v11;
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  }
  return a1;
}

uint64_t assignWithCopy for ChartScrollPositionConfiguration(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD *v15;
  _OWORD *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = *((unsigned __int16 *)a2 + 20);
  if (*(unsigned __int8 *)(a1 + 41) == 255)
  {
    if (v4 >> 8 > 0xFE)
    {
      v5 = *a2;
      v6 = a2[1];
      *(_OWORD *)(a1 + 26) = *(__int128 *)((char *)a2 + 26);
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v6;
      goto LABEL_13;
    }
    if ((v4 & 0x100) != 0)
    {
      v9 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = v4 & 1;
LABEL_11:
      *(_BYTE *)(a1 + 41) = 1;
      goto LABEL_13;
    }
LABEL_12:
    v12 = *(_QWORD *)a2;
    v13 = *((_QWORD *)a2 + 1);
    v14 = *((_BYTE *)a2 + 16);
    sub_2141DD14C(*(_QWORD *)a2, v13, v14);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 16) = v14;
    *(_BYTE *)(a1 + 41) = 0;
    goto LABEL_13;
  }
  if (v4 >> 8 > 0xFE)
  {
    sub_2143C535C(a1);
    v7 = *(__int128 *)((char *)a2 + 26);
    v8 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 26) = v7;
    goto LABEL_13;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2143C535C(a1);
    if ((*((_BYTE *)a2 + 41) & 1) != 0)
    {
      v10 = *((_BYTE *)a2 + 40);
      v11 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = v10;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
LABEL_13:
  v15 = (_OWORD *)(a1 + 48);
  v16 = a2 + 3;
  v17 = *((unsigned __int16 *)a2 + 44);
  if (*(unsigned __int8 *)(a1 + 89) != 255)
  {
    if (v17 >> 8 > 0xFE)
    {
      sub_2143C535C(a1 + 48);
      v20 = *(__int128 *)((char *)a2 + 74);
      v21 = a2[4];
      *v15 = *v16;
      *(_OWORD *)(a1 + 64) = v21;
      *(_OWORD *)(a1 + 74) = v20;
      return a1;
    }
    if ((__int128 *)a1 == a2)
      return a1;
    sub_2143C535C(a1 + 48);
    if ((*((_BYTE *)a2 + 89) & 1) != 0)
    {
      v23 = *((_BYTE *)a2 + 88);
      v24 = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 72) = v24;
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 48, (uint64_t)(a2 + 3));
      *(_BYTE *)(a1 + 88) = v23;
      goto LABEL_23;
    }
LABEL_24:
    v25 = *((_QWORD *)a2 + 6);
    v26 = *((_QWORD *)a2 + 7);
    v27 = *((_BYTE *)a2 + 64);
    sub_2141DD14C(v25, v26, v27);
    *(_QWORD *)(a1 + 48) = v25;
    *(_QWORD *)(a1 + 56) = v26;
    *(_BYTE *)(a1 + 64) = v27;
    *(_BYTE *)(a1 + 89) = 0;
    return a1;
  }
  if (v17 >> 8 <= 0xFE)
  {
    if ((v17 & 0x100) != 0)
    {
      v22 = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 72) = v22;
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 48, (uint64_t)(a2 + 3));
      *(_BYTE *)(a1 + 88) = v17 & 1;
LABEL_23:
      *(_BYTE *)(a1 + 89) = 1;
      return a1;
    }
    goto LABEL_24;
  }
  v18 = *v16;
  v19 = a2[4];
  *(_OWORD *)(a1 + 74) = *(__int128 *)((char *)a2 + 74);
  *v15 = v18;
  *(_OWORD *)(a1 + 64) = v19;
  return a1;
}

uint64_t sub_2143C535C(uint64_t a1)
{
  destroy for ChartScrollPosition(a1);
  return a1;
}

__n128 initializeWithTake for ChartScrollPositionConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ChartScrollPositionConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  __int128 v7;

  if (*(unsigned __int8 *)(a1 + 41) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 41) == 255 || a1 != a2)
  {
    sub_2143C535C(a1);
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  if (*(unsigned __int8 *)(a1 + 89) == 255)
  {
LABEL_14:
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
    return a1;
  }
  if (*(unsigned __int8 *)(a2 + 89) == 255 || a1 != a2)
  {
    sub_2143C535C(a1 + 48);
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScrollPositionConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 90))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartScrollPositionConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 90) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartScrollPositionConfiguration()
{
  return &type metadata for ChartScrollPositionConfiguration;
}

uint64_t destroy for ChartScrollPosition(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return _s6Charts15AnyChartContentVwxx_0(a1);
  else
    return sub_2141E60B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for ChartScrollPosition(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *((unsigned __int8 *)a2 + 41);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *((unsigned __int8 *)a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    if (v4 == 1)
    {
      v5 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v5;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v5 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v5;
    }
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = v6;
    v10 = 1;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    sub_2141DD14C(*a2, v8, v9);
    v10 = 0;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  *(_BYTE *)(a1 + 41) = v10;
  return a1;
}

uint64_t assignWithCopy for ChartScrollPosition(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      _s6Charts15AnyChartContentVwxx_0(a1);
    else
      sub_2141E60B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    v5 = *(unsigned __int8 *)(a2 + 41);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(unsigned __int8 *)(a2 + 40);
      if (v6 >= 2)
        v6 = *(_DWORD *)a2 + 2;
      if (v6 == 1)
      {
        v7 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v8 = 1;
      }
      else
      {
        v8 = 0;
        v7 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      }
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = v8;
      v12 = 1;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_BYTE *)(a2 + 16);
      sub_2141DD14C(v9, v10, v11);
      v12 = 0;
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v10;
      *(_BYTE *)(a1 + 16) = v11;
    }
    *(_BYTE *)(a1 + 41) = v12;
  }
  return a1;
}

__n128 initializeWithTake for ChartScrollPosition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ChartScrollPosition(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  char v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      _s6Charts15AnyChartContentVwxx_0(a1);
    else
      sub_2141E60B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    v5 = *(unsigned __int8 *)(a2 + 41);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(unsigned __int8 *)(a2 + 40);
      if (v6 >= 2)
        v6 = *(_DWORD *)a2 + 2;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = v6 == 1;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    }
    *(_BYTE *)(a1 + 41) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScrollPosition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ChartScrollPosition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t sub_2143C5870(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_2143C588C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChartScrollPosition()
{
  return &type metadata for ChartScrollPosition;
}

uint64_t destroy for ChartScrollZoomConfiguration(uint64_t result)
{
  if (*(_QWORD *)(result + 64))
    return _s6Charts15AnyChartContentVwxx_0(result + 40);
  return result;
}

uint64_t initializeWithCopy for ChartScrollZoomConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  v5 = a2 + 40;
  v6 = *(_QWORD *)(a2 + 64);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for ChartScrollZoomConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a1 + 40;
  v6 = (__int128 *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      sub_2141DEA14((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
    }
    else
    {
      sub_2141DEB7C(a1 + 40);
      v8 = *((_QWORD *)v6 + 4);
      v9 = v6[1];
      *(_OWORD *)v5 = *v6;
      *(_OWORD *)(v5 + 16) = v9;
      *(_QWORD *)(v5 + 32) = v8;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  }
  else
  {
    v10 = *v6;
    v11 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v5 = v10;
    *(_OWORD *)(a1 + 56) = v11;
  }
  return a1;
}

uint64_t assignWithTake for ChartScrollZoomConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  if (*(_QWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a2 + 64))
      _s6Charts15AnyChartContentVwxx_0(a1 + 40);
    else
      sub_2141DEB7C(a1 + 40);
  }
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScrollZoomConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartScrollZoomConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartScrollZoomConfiguration()
{
  return &type metadata for ChartScrollZoomConfiguration;
}

unint64_t sub_2143C5B8C(uint64_t a1)
{
  unint64_t result;

  result = sub_2143C5BB0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2143C5BB0()
{
  unint64_t result;

  result = qword_254D6DAC8;
  if (!qword_254D6DAC8)
  {
    result = MEMORY[0x2199CD934](&unk_214431678, &type metadata for AnyChartScrollTargetBehavior);
    atomic_store(result, (unint64_t *)&qword_254D6DAC8);
  }
  return result;
}

uint64_t sub_2143C5BF4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_2143C5C08()
{
  unint64_t result;

  result = qword_254D6DAD0;
  if (!qword_254D6DAD0)
  {
    result = MEMORY[0x2199CD934](&unk_214431784, &type metadata for ValueAlignedLimitBehavior.Role);
    atomic_store(result, (unint64_t *)&qword_254D6DAD0);
  }
  return result;
}

_OWORD *sub_2143C5C4C(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(__int128 *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_2143C5C64(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for ChartScrollPosition(a2, a1);
  return a2;
}

uint64_t sub_2143C5C98(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

uint64_t sub_2143C5CCC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

unint64_t sub_2143C5D08()
{
  unint64_t result;

  result = qword_254D6DB30;
  if (!qword_254D6DB30)
  {
    result = MEMORY[0x2199CD934](&unk_2144349A0, &type metadata for ChartScenegraphKey);
    atomic_store(result, (unint64_t *)&qword_254D6DB30);
  }
  return result;
}

uint64_t sub_2143C5D4C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ChartScrollPositionConfiguration(a2, a1);
  return a2;
}

unint64_t sub_2143C5D80()
{
  unint64_t result;

  result = qword_254D6DB38;
  if (!qword_254D6DB38)
  {
    result = MEMORY[0x2199CD934](&unk_2144318AC, &type metadata for ChartScrollPositionConfigurationKey);
    atomic_store(result, (unint64_t *)&qword_254D6DB38);
  }
  return result;
}

uint64_t sub_2143C5DC4(uint64_t a1)
{
  destroy for ChartScrollPositionConfiguration(a1);
  return a1;
}

uint64_t sub_2143C5DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)a2 = *(_BYTE *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = v5;
  v6 = a2 + 40;
  v7 = (__int128 *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 64) = v8;
    *(_QWORD *)(a2 + 72) = v9;
    (**(void (***)(uint64_t, __int128 *))(v8 - 8))(v6, v7);
  }
  else
  {
    v10 = *v7;
    v11 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(a1 + 72);
    *(_OWORD *)v6 = v10;
    *(_OWORD *)(v6 + 16) = v11;
  }
  return a2;
}

unint64_t sub_2143C5E74()
{
  unint64_t result;

  result = qword_253F154B0;
  if (!qword_253F154B0)
  {
    result = MEMORY[0x2199CD934](&unk_214431874, &type metadata for ChartScrollZoomConfigurationKey);
    atomic_store(result, (unint64_t *)&qword_253F154B0);
  }
  return result;
}

uint64_t sub_2143C5EB8()
{
  return sub_2144241E8();
}

uint64_t sub_2143C5ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2143B7818(a1, a2, a3, a4, MEMORY[0x24BDEE1E0]);
}

uint64_t sub_2143C5EF4()
{
  return sub_2144241DC();
}

uint64_t sub_2143C5F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2143B7818(a1, a2, a3, a4, MEMORY[0x24BDEE130]);
}

ValueMetadata *type metadata accessor for ChartScrollZoomConfigurationKey()
{
  return &type metadata for ChartScrollZoomConfigurationKey;
}

ValueMetadata *type metadata accessor for ChartScrollPositionConfigurationKey()
{
  return &type metadata for ChartScrollPositionConfigurationKey;
}

uint64_t destroy for ScrollViewMapping(uint64_t a1)
{
  return sub_21421BB6C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_OWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for ScrollViewMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_BYTE *)(a2 + 104);
  sub_21421BAE4(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  *(_BYTE *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for ScrollViewMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 88);
  v26 = *(_QWORD *)(a2 + 96);
  v27 = *(_BYTE *)(a2 + 104);
  sub_21421BAE4(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v22);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = v26;
  *(_BYTE *)(a1 + 104) = v27;
  sub_21421BB6C(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t assignWithTake for ScrollViewMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_QWORD *)(a2 + 96);
  v5 = *(_BYTE *)(a2 + 104);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 96) = v4;
  *(_BYTE *)(a1 + 104) = v5;
  sub_21421BB6C(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewMapping(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewMapping()
{
  return &type metadata for ScrollViewMapping;
}

unint64_t sub_2143C6320()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[3];
  uint64_t v3;

  result = qword_254D6DB48;
  if (!qword_254D6DB48)
  {
    v1 = sub_2141D7924(&qword_254D6DB50);
    v2[2] = sub_2141D7924(&qword_254D6DAD8);
    v3 = sub_2141D9054(&qword_254D6DAF8, &qword_254D6DAD8, MEMORY[0x24BDEFB78]);
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = v3;
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6DB48);
  }
  return result;
}

unint64_t sub_2143C63D0()
{
  unint64_t result;

  result = qword_254D6DB58;
  if (!qword_254D6DB58)
  {
    result = MEMORY[0x2199CD934](&unk_214431650, &type metadata for ChartScrollPositionConfiguration);
    atomic_store(result, (unint64_t *)&qword_254D6DB58);
  }
  return result;
}

unint64_t sub_2143C6414()
{
  unint64_t result;

  result = qword_254D6DB60;
  if (!qword_254D6DB60)
  {
    result = MEMORY[0x2199CD934](&unk_214431600, &type metadata for ChartScrollZoomConfiguration);
    atomic_store(result, (unint64_t *)&qword_254D6DB60);
  }
  return result;
}

uint64_t sub_2143C645C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_2143C64DC()
{
  swift_arrayDestroy();
  JUMPOUT(0x2199CDA48);
}

void sub_2143C6518()
{
  uint64_t v0;

  sub_2143C654C(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_2143C652C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ThreadSpecific(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThreadSpecific);
}

void sub_2143C654C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_2144254D8();
  type metadata accessor for ThreadSpecific(0, a1, v2, v3);
  sub_214425904();
  swift_bridgeObjectRelease();
  sub_214424F20();
  sub_214425628();
  __break(1u);
}

uint64_t static BuilderPair<>._layoutAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[10];

  v12 = type metadata accessor for BuilderPair(0, a3, a4, a4);
  v13 = *a2;
  v14 = sub_21436F864(v12, *(_QWORD *)(v12 + 8), (_QWORD *)(v12 + 8 * *(unsigned int *)(*(_QWORD *)(v12 + 8) + 24)), (_QWORD **)(v12 + 16));
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a5;
  v17[5] = a6;
  v17[6] = v13;
  v17[7] = v14;
  sub_2141DB52C(a1, (uint64_t)sub_2143C68C4, (uint64_t)v17, v12, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v15);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143C67B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v5 = result;
    v6 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = (_QWORD *)(a3 + 48);
    do
    {
      v15 = *(v8 - 2);
      v14 = *(_QWORD *)(v5 + *v8);
      v9 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v9 + 32);
      swift_retain();
      v11 = sub_21421F450(v7, v10);
      v12 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 32) = v11;
      v13 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v11;
      sub_2143C6C0C(v11, v15, v14);
      *(_QWORD *)(v6 + 24) = v13;
      *(_QWORD *)(v9 + 32) = v12;
      swift_release();
      v8 += 3;
      ++v7;
    }
    while (v3 != v7);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2143C68C4(uint64_t a1)
{
  uint64_t v1;

  return sub_2143C67B8(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t static BuilderPair<>._renderAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[10];

  v12 = type metadata accessor for BuilderPair(0, a3, a4, a4);
  v13 = *a2;
  v14 = sub_21436F864(v12, *(_QWORD *)(v12 + 8), (_QWORD *)(v12 + 8 * *(unsigned int *)(*(_QWORD *)(v12 + 8) + 24)), (_QWORD **)(v12 + 16));
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a5;
  v17[5] = a6;
  v17[6] = v13;
  v17[7] = v14;
  sub_2141DB52C(a1, (uint64_t)sub_2143C6BB4, (uint64_t)v17, v12, MEMORY[0x24BEE4078], (uint64_t)&type metadata for _AxisMarkRenderOutputs, MEMORY[0x24BEE40A8], v15);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143C69C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v30;
  uint64_t v31;

  v4 = a2;
  v5 = a4;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v10 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = (_QWORD *)(a3 + 48);
    do
    {
      v30 = *(_QWORD *)(a1 + *v12);
      v31 = *(v12 - 2);
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v13 + 32);
      swift_retain();
      v15 = sub_21421F450(v11, v14);
      v16 = *(_QWORD *)(v13 + 32);
      *(_QWORD *)(v13 + 32) = v15;
      v17 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = v15;
      sub_2143C6CC0(v15, v31, v30);
      *(_QWORD *)(v10 + 24) = v17;
      *(_QWORD *)(v13 + 32) = v16;
      swift_release();
      v12 += 3;
      ++v11;
    }
    while (v7 != v11);
    swift_bridgeObjectRelease();
    v5 = a4;
    v6 = MEMORY[0x24BEE4AF8];
    v4 = a2;
  }
  else
  {
    swift_retain();
  }
  v18 = (int *)type metadata accessor for SgGroup(0);
  v19 = swift_allocBox();
  v21 = v20;
  v22 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
  v23 = swift_bridgeObjectRetain();
  v24 = sub_214251F48(v23);
  swift_bridgeObjectRelease();
  v25 = (char *)v21 + v18[6];
  v26 = type metadata accessor for SgClipRect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *v21 = v22;
  v21[1] = v24;
  *(_QWORD *)((char *)v21 + v18[7]) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v21 + v18[8]) = 0;
  *(_QWORD *)((char *)v21 + v18[9]) = v6;
  *((_BYTE *)v21 + v18[10]) = 0;
  *v5 = v19;
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2143C6BB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2143C69C0(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_2143C6BD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderPair<>._layoutAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t sub_2143C6BE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderPair<>._renderAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

void sub_2143C6BF8()
{
  qword_253F1C978 = MEMORY[0x24BEE4B00];
}

uint64_t sub_2143C6C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 16))(v8, *v3 + v3[2], a2);
  v11 = v3[1];
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(a3 + 8))(v8, &v11, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_2143C6CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v7 + 16))(v10, *v4 + v4[2], a2, v8);
  v16 = v4[1];
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(a3 + 16))(&v17, v10, &v16, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
  v11 = v17;
  v12 = v4[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_214226A90(0, *(_QWORD *)(v12 + 16) + 1, 1, (char *)v12);
    v12 = result;
  }
  v15 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    result = (uint64_t)sub_214226A90((char *)(v14 > 1), v15 + 1, 1, (char *)v12);
    v12 = result;
  }
  *(_QWORD *)(v12 + 16) = v15 + 1;
  *(_QWORD *)(v12 + 8 * v15 + 32) = v11;
  v4[3] = v12;
  return result;
}

uint64_t SectorPlot<A>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2142D7304(v2, v4, (uint64_t)v7);
  sub_2142D6BB0((uint64_t)v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_2143C6E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SectorPlot<A>.body.getter(a1, a2);
}

uint64_t SectorPlot.init<A, B>(_:angle:innerRadius:outerRadius:angularInset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;

  v62 = a8;
  v68 = a6;
  v67 = a5;
  v70 = a1;
  v71 = a2;
  v69 = a9;
  v63 = a11;
  v59 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a11);
  v16 = *(_QWORD *)(v58 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v58);
  v19 = (char *)&v56 - v18;
  v61 = *(_QWORD *)(a7 - 8);
  v20 = v61;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v23;
  v25 = type metadata accessor for VectorizedSectorPlotContent(0, a7, a10, v24);
  v65 = *(_QWORD *)(v25 - 8);
  v66 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v64 = (uint64_t)&v56 - v26;
  v27 = a3[5];
  v76 = a3[4];
  v77 = v27;
  v78 = a3[6];
  v79 = *((_BYTE *)a3 + 112);
  v28 = a3[1];
  v72 = *a3;
  v73 = v28;
  v29 = a3[3];
  v74 = a3[2];
  v75 = v29;
  v30 = *a4;
  v31 = a4[1];
  v32 = a4[3];
  v82 = a4[2];
  v83 = v32;
  v80 = v30;
  v81 = v31;
  v33 = a4[4];
  v34 = a4[5];
  v35 = a4[6];
  v87 = *((_BYTE *)a4 + 112);
  v85 = v34;
  v86 = v35;
  v84 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v70, a7);
  v36 = v19;
  v37 = v19;
  v38 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v36, v71, v58);
  v39 = (*(unsigned __int8 *)(v16 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v57 = (v39 + v17 + 127) & 0xFFFFFFFFFFFFFFF8;
  v40 = (char *)swift_allocObject();
  v41 = v62;
  *((_QWORD *)v40 + 2) = a7;
  *((_QWORD *)v40 + 3) = v41;
  v42 = v59;
  v43 = v63;
  *((_QWORD *)v40 + 4) = v59;
  *((_QWORD *)v40 + 5) = v43;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v40[v39], v37, v38);
  v44 = &v40[(v39 + v17 + 7) & 0xFFFFFFFFFFFFFFF8];
  v45 = v75;
  *((_OWORD *)v44 + 2) = v74;
  *((_OWORD *)v44 + 3) = v45;
  v46 = v73;
  *(_OWORD *)v44 = v72;
  *((_OWORD *)v44 + 1) = v46;
  v44[112] = v79;
  v47 = v78;
  v48 = v76;
  *((_OWORD *)v44 + 5) = v77;
  *((_OWORD *)v44 + 6) = v47;
  *((_OWORD *)v44 + 4) = v48;
  v49 = &v40[v57];
  v50 = v85;
  *((_OWORD *)v49 + 4) = v84;
  *((_OWORD *)v49 + 5) = v50;
  *((_OWORD *)v49 + 6) = v86;
  v49[112] = v87;
  v51 = v81;
  *(_OWORD *)v49 = v80;
  *((_OWORD *)v49 + 1) = v51;
  v52 = v83;
  *((_OWORD *)v49 + 2) = v82;
  *((_OWORD *)v49 + 3) = v52;
  v53 = &v40[(v39 + v17 + 247) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v53 = v67;
  v53[8] = v68 & 1;
  v54 = v64;
  sub_2142868CC((uint64_t)v60, (uint64_t)sub_2143C76A4, (uint64_t)v40, a7, (uint64_t)&type metadata for SectorMark, v42, (uint64_t)&protocol witness table for SectorMark, v64);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v71, v38);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v70, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v69, v54, v66);
}

uint64_t type metadata accessor for VectorizedSectorPlotContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VectorizedSectorPlotContent);
}

void *sub_2143C71C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double a5@<X4>, char a6@<W5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  double v46;
  void *v47;
  uint64_t v48;
  _OWORD v49[22];

  v46 = a5;
  v47 = a8;
  v43 = a2;
  v45 = a6 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = a7;
  v15 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a10);
  v41 = *(_QWORD *)(v15 - 8);
  v42 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v41 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v41 - v20;
  v23 = type metadata accessor for PlottableValue(0, a7, a10, v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v41 - v25;
  v44 = (uint64_t)&v41 - v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v27(v21, a1, AssociatedTypeWitness, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v17, v43, v42);
  sub_214270F68((uint64_t)v21, (uint64_t)v17, v48, AssociatedTypeWitness, a10, (uint64_t)v26);
  v28 = a1;
  ((void (*)(char *, uint64_t, uint64_t))v27)(v21, a1, AssociatedTypeWitness);
  v29 = *(_OWORD *)(a3 + 80);
  v49[4] = *(_OWORD *)(a3 + 64);
  v49[5] = v29;
  v49[6] = *(_OWORD *)(a3 + 96);
  LOBYTE(v49[7]) = *(_BYTE *)(a3 + 112);
  v30 = *(_OWORD *)(a3 + 16);
  v49[0] = *(_OWORD *)a3;
  v49[1] = v30;
  v31 = *(_OWORD *)(a3 + 48);
  v49[2] = *(_OWORD *)(a3 + 32);
  v49[3] = v31;
  sub_2143C8718(a3);
  sub_2142712B0((uint64_t)v21, (uint64_t)v49);
  v33 = v32;
  LODWORD(a1) = v34;
  ((void (*)(char *, uint64_t, uint64_t))v27)(v21, v28, AssociatedTypeWitness);
  v35 = *(_OWORD *)(a4 + 80);
  v49[4] = *(_OWORD *)(a4 + 64);
  v49[5] = v35;
  v49[6] = *(_OWORD *)(a4 + 96);
  LOBYTE(v49[7]) = *(_BYTE *)(a4 + 112);
  v36 = *(_OWORD *)(a4 + 16);
  v49[0] = *(_OWORD *)a4;
  v49[1] = v36;
  v37 = *(_OWORD *)(a4 + 48);
  v49[2] = *(_OWORD *)(a4 + 32);
  v49[3] = v37;
  sub_2143C8718(a4);
  sub_2142712B0((uint64_t)v21, (uint64_t)v49);
  SectorMark.init<A>(angle:innerRadius:outerRadius:angularInset:)(v44, v33, a1, v38, v39, v46, v45, v48, v49, a10);
  return memcpy(v47, v49, 0x149uLL);
}

uint64_t sub_2143C7434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v0 + v6;
  sub_2141ED0BC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_BYTE *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v10, v1);
      break;
    case 1u:
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v11(v10, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v11(v10 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v13 = sub_214423C48();
      v14 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 48), v13);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 64), v14);
      break;
    default:
      break;
  }
  v16 = (v7 + 127) & 0xFFFFFFFFFFFFFFF8;
  v17 = v0 + v8;
  v18 = *(unsigned __int8 *)(v0 + v8 + 96);
  if (v18 != 255)
    sub_2142637C0(*(_QWORD *)(v17 + 88), v18 & 1);
  sub_2142637C0(*(_QWORD *)(v17 + 104), *(_BYTE *)(v17 + 112));
  v19 = v0 + v16;
  v20 = *(unsigned __int8 *)(v0 + v16 + 96);
  if (v20 != 255)
    sub_2142637C0(*(_QWORD *)(v19 + 88), v20 & 1);
  sub_2142637C0(*(_QWORD *)(v19 + 104), *(_BYTE *)(v19 + 112));
  return swift_deallocObject();
}

void *sub_2143C76A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;

  v5 = v2[3];
  v7 = v2[4];
  v6 = v2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_2143C71C0(a1, (uint64_t)v2 + v10, (uint64_t)v2 + ((v10 + *(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8), (uint64_t)v2 + ((v10 + *(_QWORD *)(v9 + 64) + 127) & 0xFFFFFFFFFFFFFFF8), *(double *)((char *)v2 + ((v10 + *(_QWORD *)(v9 + 64) + 247) & 0xFFFFFFFFFFFFFFF8)), *((_BYTE *)v2 + ((v10 + *(_QWORD *)(v9 + 64) + 247) & 0xFFFFFFFFFFFFFFF8) + 8), v5, a2, v7, v6);
}

uint64_t SectorPlot.init<A, B>(_:angle:innerRadius:outerRadius:angularInset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;

  v53 = a8;
  v56 = a7;
  v61 = a5;
  v62 = a9;
  v63 = a1;
  v64 = a2;
  v57 = a10;
  v52 = type metadata accessor for PlottableProjection(0, *(_QWORD *)(*a5 + *MEMORY[0x24BEE46A8]), a7, a10);
  v14 = *(_QWORD *)(v52 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v52);
  v17 = (char *)&v51 - v16;
  v55 = *(_QWORD *)(a6 - 8);
  v18 = v55;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v21;
  v23 = type metadata accessor for VectorizedSectorPlotContent(0, a6, a8, v22);
  v59 = *(_QWORD *)(v23 - 8);
  v60 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v58 = (uint64_t)&v51 - v24;
  v25 = a3[5];
  v69 = a3[4];
  v70 = v25;
  v71 = a3[6];
  v72 = *((_BYTE *)a3 + 112);
  v26 = a3[1];
  v65 = *a3;
  v66 = v26;
  v27 = a3[3];
  v67 = a3[2];
  v68 = v27;
  v28 = *a4;
  v29 = a4[1];
  v30 = a4[3];
  v75 = a4[2];
  v76 = v30;
  v73 = v28;
  v74 = v29;
  v31 = a4[4];
  v32 = a4[5];
  v33 = a4[6];
  v80 = *((_BYTE *)a4 + 112);
  v78 = v32;
  v79 = v33;
  v77 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v63, a6);
  v34 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v64, v52);
  v35 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v51 = (v35 + v15 + 127) & 0xFFFFFFFFFFFFFFF8;
  v36 = (char *)swift_allocObject();
  v37 = v56;
  *((_QWORD *)v36 + 2) = a6;
  *((_QWORD *)v36 + 3) = v37;
  v38 = v53;
  v39 = v57;
  *((_QWORD *)v36 + 4) = v53;
  *((_QWORD *)v36 + 5) = v39;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v36[v35], v17, v34);
  v40 = &v36[(v35 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  v41 = v68;
  *((_OWORD *)v40 + 2) = v67;
  *((_OWORD *)v40 + 3) = v41;
  v42 = v66;
  *(_OWORD *)v40 = v65;
  *((_OWORD *)v40 + 1) = v42;
  v40[112] = v72;
  v43 = v71;
  v44 = v69;
  *((_OWORD *)v40 + 5) = v70;
  *((_OWORD *)v40 + 6) = v43;
  *((_OWORD *)v40 + 4) = v44;
  v45 = &v36[v51];
  v46 = v78;
  *((_OWORD *)v45 + 4) = v77;
  *((_OWORD *)v45 + 5) = v46;
  *((_OWORD *)v45 + 6) = v79;
  v45[112] = v80;
  v47 = v74;
  *(_OWORD *)v45 = v73;
  *((_OWORD *)v45 + 1) = v47;
  v48 = v76;
  *((_OWORD *)v45 + 2) = v75;
  *((_OWORD *)v45 + 3) = v48;
  *(_QWORD *)&v36[(v35 + v15 + 247) & 0xFFFFFFFFFFFFFFF8] = v61;
  v49 = v58;
  sub_2142868CC((uint64_t)v54, (uint64_t)sub_2143C7F4C, (uint64_t)v36, a6, (uint64_t)&type metadata for SectorMark, v38, (uint64_t)&protocol witness table for SectorMark, v58);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v64, v34);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v63, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v62, v49, v60);
}

void *sub_2143C7A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  double v50;
  _OWORD v51[22];

  v48 = a5;
  v49 = a7;
  v44 = a1;
  v45 = a2;
  v11 = *(_QWORD *)(*a5 + *MEMORY[0x24BEE46A8]);
  v41 = a8;
  v12 = type metadata accessor for PlottableProjection(0, v11, a6, a8);
  v42 = *(_QWORD *)(v12 - 8);
  v43 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - v13;
  v15 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v41 - v17;
  v47 = a6;
  v20 = type metadata accessor for PlottableValue(0, a6, a8, v19);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v41 - v22;
  v46 = (uint64_t)&v41 - v22;
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
  v25 = v44;
  v24(v18, v44, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v14, v45, v43);
  v26 = a6;
  v27 = v41;
  sub_214270F68((uint64_t)v18, (uint64_t)v14, v26, v11, v41, (uint64_t)v23);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v18, v25, v11);
  v28 = *(_OWORD *)(a3 + 80);
  v51[4] = *(_OWORD *)(a3 + 64);
  v51[5] = v28;
  v51[6] = *(_OWORD *)(a3 + 96);
  LOBYTE(v51[7]) = *(_BYTE *)(a3 + 112);
  v29 = *(_OWORD *)(a3 + 16);
  v51[0] = *(_OWORD *)a3;
  v51[1] = v29;
  v30 = *(_OWORD *)(a3 + 48);
  v51[2] = *(_OWORD *)(a3 + 32);
  v51[3] = v30;
  sub_2143C8718(a3);
  sub_2142712B0((uint64_t)v18, (uint64_t)v51);
  v32 = v31;
  LODWORD(v14) = v33;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v18, v25, v11);
  v34 = *(_OWORD *)(a4 + 80);
  v51[4] = *(_OWORD *)(a4 + 64);
  v51[5] = v34;
  v51[6] = *(_OWORD *)(a4 + 96);
  LOBYTE(v51[7]) = *(_BYTE *)(a4 + 112);
  v35 = *(_OWORD *)(a4 + 16);
  v51[0] = *(_OWORD *)a4;
  v51[1] = v35;
  v36 = *(_OWORD *)(a4 + 48);
  v51[2] = *(_OWORD *)(a4 + 32);
  v51[3] = v36;
  sub_2143C8718(a4);
  sub_2142712B0((uint64_t)v18, (uint64_t)v51);
  v38 = v37;
  LODWORD(a4) = v39;
  swift_getAtKeyPath();
  SectorMark.init<A>(angle:innerRadius:outerRadius:angularInset:)(v46, v32, (int)v14, v38, a4, v50, 0, v47, v51, v27);
  return memcpy(v49, v51, 0x149uLL);
}

uint64_t sub_2143C7CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v0 + v6;
  sub_2141ED0BC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_BYTE *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v10, v1);
      break;
    case 1u:
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v11(v10, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v11(v10 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v13 = sub_214423C48();
      v14 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 48), v13);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 64), v14);
      break;
    default:
      break;
  }
  v16 = (v7 + 127) & 0xFFFFFFFFFFFFFFF8;
  v17 = v0 + v8;
  v18 = *(unsigned __int8 *)(v0 + v8 + 96);
  if (v18 != 255)
    sub_2142637C0(*(_QWORD *)(v17 + 88), v18 & 1);
  sub_2142637C0(*(_QWORD *)(v17 + 104), *(_BYTE *)(v17 + 112));
  v19 = v0 + v16;
  v20 = *(unsigned __int8 *)(v0 + v16 + 96);
  if (v20 != 255)
    sub_2142637C0(*(_QWORD *)(v19 + 88), v20 & 1);
  sub_2142637C0(*(_QWORD *)(v19 + 104), *(_BYTE *)(v19 + 112));
  swift_release();
  return swift_deallocObject();
}

void *sub_2143C7F4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_2143C7A70(a1, v2 + v9, v2 + ((v9 + *(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8), v2 + ((v9 + *(_QWORD *)(v8 + 64) + 127) & 0xFFFFFFFFFFFFFFF8), *(_QWORD **)(v2 + ((v9 + *(_QWORD *)(v8 + 64) + 247) & 0xFFFFFFFFFFFFF8)), v5, a2, v6);
}

uint64_t VectorizedSectorPlotContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = type metadata accessor for Vectorizer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  sub_2142D7304(v3, v5, (uint64_t)&v10 - v7);
  sub_2142D6BB0((uint64_t)v8, v5, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_2143C80D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2143C810C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <A> SectorPlot<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143C8150(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedSectorPlotContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143C817C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2143C81B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143C8264 + 4 * byte_21443199A[(v7 - 1)]))();
}

void sub_2143C82B4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for SectorPlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SectorPlot);
}

uint64_t sub_2143C8470(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2143C84F4 + 4 * byte_2144319A8[v10]))();
  }
}

void sub_2143C8578(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2143C8674()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2143C86ECLL);
}

void sub_2143C867C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2143C8684);
  JUMPOUT(0x2143C86ECLL);
}

void sub_2143C86C4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143C86ECLL);
}

void sub_2143C86CC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143C86ECLL);
}

uint64_t sub_2143C86D4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x2143C86ECLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x2143C86E8);
    JUMPOUT(0x2143C86E0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_2143C8704(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_UNKNOWN **sub_2143C870C()
{
  return &off_254D69CB8;
}

uint64_t sub_2143C8718(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_BYTE *)(a1 + 112);
  sub_21434CA34(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  sub_2142625F8(v2, v3);
  return a1;
}

uint64_t sub_2143C878C()
{
  return swift_deallocClassInstance();
}

void sub_2143C879C(double a1, double a2, uint64_t a3, uint64_t a4, double *a5)
{
  *a5 = a1;
  a5[1] = a2;
}

uint64_t sub_2143C87A4()
{
  return swift_release();
}

uint64_t sub_2143C87AC()
{
  swift_release();
  return swift_deallocClassInstance();
}

double sub_2143C87D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  _DWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v23 = a4;
  v20[1] = a3;
  v21 = a1;
  v5 = sub_2141D8BF8(&qword_253F11920);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2144247D0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2141D8BF8(&qword_253F15C28);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v4 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements;
  swift_beginAccess();
  sub_2143C8C2C(v15, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8))
  {
    sub_2141E0750((uint64_t)v14, &qword_253F15C28);
    return 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    sub_2141E0750((uint64_t)v14, &qword_253F15C28);
    v17 = sub_2144247AC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
    sub_2144247B8();
    v16 = v18;
    sub_2141E0750((uint64_t)v7, &qword_253F11920);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v16;
}

uint64_t sub_2143C89F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_2141E0750(v0 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements, &qword_253F15C28);
  v1 = v0 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
  v2 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2143C8A80()
{
  return type metadata accessor for SgMeasurements();
}

uint64_t type metadata accessor for SgMeasurements()
{
  uint64_t result;

  result = qword_253F14828;
  if (!qword_253F14828)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2143C8AC4()
{
  unint64_t v0;
  unint64_t v1;

  sub_2143C8B54();
  if (v0 <= 0x3F)
  {
    sub_214423F24();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_2143C8B54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F15C30)
  {
    sub_2144247D0();
    v0 = sub_214425388();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F15C30);
  }
}

uint64_t type metadata accessor for SgMeasurements.CacheContent()
{
  return objc_opt_self();
}

uint64_t sub_2143C8BC8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SgMeasurements.ImageRendererCacheContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SgMeasurements.ImageRendererCacheContent);
}

BOOL sub_2143C8C18(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2143C8C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F15C28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143C8C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[8];
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  char v35[8];
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  char *v45[3];
  _QWORD v46[5];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;

  v19 = a5;
  v20 = a4;
  v22 = a6;
  v9 = sub_2142C41F8(a2, (uint64_t)v46);
  v11 = v46[0];
  v10 = v46[1];
  v13 = v46[2];
  v12 = v46[3];
  v21 = v46[4];
  MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, a1, a3);
  v47 = 0uLL;
  LOWORD(v48) = 0;
  BYTE2(v48) = 1;
  v35[0] = 3;
  sub_2141F963C(a2);
  sub_2141F963C(a2);
  AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)((uint64_t)v15, 2, 0, 0, 1, 0, 0, 1, (uint64_t)v23, (uint64_t *)&v47, 2, v35, 0, 1, 0, 1, a3, v20, v19);
  v35[0] = 2;
  v36 = 0;
  v37 = -1;
  v38 = v11;
  v39 = v10;
  v40 = v13;
  v41 = v12;
  v42 = v21;
  v43 = 1;
  v44 = 0;
  v45[0] = v35;
  v25 = 2;
  v26 = 0;
  v27 = -1;
  v28 = v11;
  v29 = v10;
  v30 = v13;
  v31 = v12;
  v32 = v21;
  v33 = 0;
  v34 = 0;
  v45[1] = &v25;
  v45[2] = (char *)v23;
  sub_21423EA70(v45, v22);
  v53 = v23[6];
  v54 = v23[7];
  v55 = v24;
  v49 = v23[2];
  v50 = v23[3];
  v51 = v23[4];
  v52 = v23[5];
  v47 = v23[0];
  v48 = v23[1];
  sub_21424CBEC((uint64_t)&v47);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143C8E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  char *v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  _OWORD v45[8];
  char v46;

  sub_2142C41F8(a1, (uint64_t)&v35);
  v44 = 1;
  v43 = 1;
  v42 = 1;
  v41 = 1;
  v40 = 1;
  v24 = 2;
  v25 = 0;
  v26 = -1;
  v27 = v35;
  v28 = v36;
  v29 = v37;
  v30 = v38;
  v31 = v39;
  v32 = 1;
  v14 = 2;
  v15 = 0;
  v16 = -1;
  v17 = v35;
  v18 = v36;
  v19 = v37;
  v20 = v38;
  v21 = v39;
  v22 = 0;
  v23 = 0;
  v33 = 0;
  v34[0] = &v24;
  v34[1] = &v14;
  LOBYTE(v5) = 2;
  *((_QWORD *)&v5 + 1) = 0;
  *(_QWORD *)&v6 = 0;
  BYTE8(v6) = 1;
  v7 = 0uLL;
  LOBYTE(v8) = 1;
  *((_QWORD *)&v8 + 1) = 0;
  *(_QWORD *)&v9 = 0;
  WORD4(v9) = 0;
  BYTE10(v9) = 1;
  *(_WORD *)((char *)&v9 + 11) = 770;
  *(_QWORD *)&v10 = 0;
  BYTE8(v10) = 1;
  *(_QWORD *)&v11 = 0;
  BYTE8(v11) = 1;
  v12 = 0uLL;
  v13 = 2;
  v34[2] = (char *)&v5;
  sub_21423EA70(v34, a2);
  v45[6] = v11;
  v45[7] = v12;
  v46 = v13;
  v45[2] = v7;
  v45[3] = v8;
  v45[4] = v9;
  v45[5] = v10;
  v45[0] = v5;
  v45[1] = v6;
  sub_2141F963C(a1);
  sub_2141F963C(a1);
  sub_21424CBEC((uint64_t)v45);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143C8FE4(uint64_t a1)
{
  return sub_2143C9038(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_253F1C8A8);
}

void sub_2143C8FF8()
{
  qword_253F1C8C0 = 0x4010000000000000;
}

uint64_t sub_2143C9008()
{
  uint64_t result;

  result = sub_21442468C();
  qword_253F1C920 = result;
  return result;
}

uint64_t sub_2143C9024(uint64_t a1)
{
  return sub_2143C9038(a1, (SEL *)&selRef_secondaryLabelColor, &qword_253F1C938);
}

uint64_t sub_2143C9038(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(), *a2);
  result = MEMORY[0x2199CC278](v4);
  *a3 = result;
  return result;
}

void sub_2143C907C()
{
  qword_253F1C8A0 = 0x4010000000000000;
}

void sub_2143C908C()
{
  qword_253F1C918 = 0x4010000000000000;
}

void sub_2143C909C()
{
  qword_254D760A8 = 0x4020000000000000;
}

uint64_t sub_2143C90AC(uint64_t a1)
{
  return sub_2143C90F4(a1, &qword_253F10C00, &qword_253F1C920, &qword_254D760B0);
}

uint64_t sub_2143C90D0(uint64_t a1)
{
  return sub_2143C90F4(a1, &qword_253F10C08, &qword_253F1C938, &qword_254D760B8);
}

uint64_t sub_2143C90F4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (*a2 != -1)
    swift_once();
  *a4 = *a3;
  return swift_retain();
}

double sub_2143C9138@<D0>(char a1@<W0>, double *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  double result;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  if ((a1 & 0xFE) != 2)
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

    sub_2141D8BF8(&qword_253F13D68);
    v5 = swift_allocObject();
    if (v4 == (id)1)
      __asm { FMOV            V1.2D, #3.0 }
    else
      __asm { FMOV            V1.2D, #2.0 }
    *(_OWORD *)(v5 + 16) = xmmword_2144271D0;
    *(_OWORD *)(v5 + 32) = _Q1;
  }
  sub_214423D80();
  result = v14;
  *(_QWORD *)a2 = v12;
  *((_QWORD *)a2 + 1) = v13;
  a2[2] = v14;
  *((_QWORD *)a2 + 3) = v15;
  *((_QWORD *)a2 + 4) = v16;
  return result;
}

uint64_t sub_2143C9258(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  float64x2_t v4;
  double v5;
  float64x2_t v6;
  double v7;
  double v8;
  float64x2_t v11;
  float64x2_t v12;

  v4 = vsubq_f64(a1, a2);
  v5 = fabs(vmuld_lane_f64(a1.f64[0], a4, 1)+ vmuld_lane_f64(a3.f64[0], v4, 1)+ vmulq_laneq_f64(a2, vsubq_f64(a3, a1), 1).f64[0]);
  if (qword_253F10590 != -1)
  {
    v11 = v4;
    v12 = a4;
    swift_once();
    v4 = v11;
    a4 = v12;
  }
  if (v5 >= *(double *)&qword_253F1C8B0)
    return 0;
  v6 = vabsq_f64(a4);
  v7 = v4.f64[0] / (0.0 - a4.f64[0]);
  if ((vmovn_s64(vcgtq_f64(v6, (float64x2_t)vdupq_laneq_s64((int64x2_t)v6, 1))).u8[0] & 1) != 0)
    v8 = v7;
  else
    v8 = v4.f64[1] / (0.0 - a4.f64[1]);
  if (qword_253F11F48 != -1)
    swift_once();
  if (v8 > *(double *)&qword_253F1C980 + 1.0 || v8 < -*(double *)&qword_253F1C980)
    return 0;
  else
    return *(_QWORD *)&v8;
}

uint64_t sub_2143C9374(float64x2_t a1, float64x2_t a2, int64x2_t a3, float64x2_t a4, float64x2_t a5, int64x2_t a6)
{
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  double v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t inited;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  char *v49;
  char *v50;
  __int128 v51;
  double v52;
  float64x2_t v53;
  __int128 v54;
  int64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  __int128 v59;
  float64x2_t v61;
  int64x2_t v63;
  int64x2_t v64;
  float64x2_t v66;
  __int128 v67;
  float64x2_t v68;

  v7 = a2;
  v8 = a1;
  v9 = vmlad_n_f64(-*(double *)&a3.i64[1] * *(double *)a6.i64, *(double *)&a6.i64[1], *(double *)a3.i64);
  v10 = fabs(v9);
  if (qword_253F10590 != -1)
  {
    v64 = a6;
    v57 = a4;
    v52 = v9;
    v55 = a3;
    swift_once();
    v9 = v52;
    a3 = v55;
    v8 = a1;
    v7 = a2;
    a4 = v57;
    a6 = v64;
  }
  if (v10 >= *(double *)&qword_253F1C8B0)
  {
    v19 = vsubq_f64(a4, v8);
    v20 = vdivq_f64(vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(a6, a3), -v19.f64[1]), (float64x2_t)vzip2q_s64(a6, a3), v19.f64[0])), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0));
    if (qword_253F11F48 != -1)
    {
      v68 = v20;
      swift_once();
      v20 = v68;
    }
    v21 = (v20.f64[0] >= -*(double *)&qword_253F1C980) << 31 >> 31;
    if ((v20.f64[1] >= -*(double *)&qword_253F1C980) << 31 >> 31 > v21)
      LOBYTE(v21) = (v20.f64[1] >= -*(double *)&qword_253F1C980) << 31 >> 31;
    if ((v21 & 1) == 0)
      return MEMORY[0x24BEE4AF8];
    v22 = (v20.f64[0] <= *(double *)&qword_253F1C980 + 1.0) << 31 >> 31;
    if ((v20.f64[1] <= *(double *)&qword_253F1C980 + 1.0) << 31 >> 31 > v22)
      LOBYTE(v22) = (v20.f64[1] <= *(double *)&qword_253F1C980 + 1.0) << 31 >> 31;
    if ((v22 & 1) != 0)
    {
      v66 = v20;
      sub_2141D8BF8(&qword_253F103C8);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_214426EF0;
      *(float64x2_t *)(v16 + 32) = v66;
    }
    else
    {
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v61 = v7;
    v63 = a6;
    v56 = a4;
    v58 = v8;
    v53 = (float64x2_t)a3;
    v11 = sub_2143C9258(a4, v8, v7, (float64x2_t)a3);
    if ((v12 & 1) != 0)
    {
      v16 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v13 = v11;
      sub_2141D8BF8(&qword_253F15D48);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2144271D0;
      *(_QWORD *)(inited + 32) = v13;
      *(_QWORD *)(inited + 40) = 0;
      sub_21436F6CC(inited);
      v51 = v15;
      swift_setDeallocating();
      v16 = (uint64_t)sub_214224144(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if (v18 >= v17 >> 1)
        v16 = (uint64_t)sub_214224144((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
      *(_QWORD *)(v16 + 16) = v18 + 1;
      *(_OWORD *)(v16 + 16 * v18 + 32) = v51;
    }
    v23 = sub_2143C9258(a5, v58, v61, v53);
    if ((v24 & 1) != 0)
    {
      v30 = (float64x2_t)v63;
      v31 = v58;
    }
    else
    {
      v25 = v23;
      sub_2141D8BF8(&qword_253F15D48);
      v26 = swift_initStackObject();
      *(_OWORD *)(v26 + 16) = xmmword_2144271D0;
      *(_QWORD *)(v26 + 32) = v25;
      *(_QWORD *)(v26 + 40) = 0x3FF0000000000000;
      sub_21436F6CC(v26);
      v54 = v27;
      swift_setDeallocating();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = (uint64_t)sub_214224144(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
      v29 = *(_QWORD *)(v16 + 16);
      v28 = *(_QWORD *)(v16 + 24);
      v30 = (float64x2_t)v63;
      v31 = v58;
      if (v29 >= v28 >> 1)
      {
        v49 = sub_214224144((char *)(v28 > 1), v29 + 1, 1, (char *)v16);
        v31 = v58;
        v30 = (float64x2_t)v63;
        v16 = (uint64_t)v49;
      }
      *(_QWORD *)(v16 + 16) = v29 + 1;
      *(_OWORD *)(v16 + 16 * v29 + 32) = v54;
    }
    v32 = sub_2143C9258(v31, v56, a5, v30);
    if ((v33 & 1) != 0)
    {
      v39 = v61;
      v40 = (float64x2_t)v63;
    }
    else
    {
      v34 = v32;
      sub_2141D8BF8(&qword_253F15D48);
      v35 = swift_initStackObject();
      *(_OWORD *)(v35 + 16) = xmmword_2144271D0;
      *(_QWORD *)(v35 + 32) = 0;
      *(_QWORD *)(v35 + 40) = v34;
      sub_21436F6CC(v35);
      v59 = v36;
      swift_setDeallocating();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = (uint64_t)sub_214224144(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
      v38 = *(_QWORD *)(v16 + 16);
      v37 = *(_QWORD *)(v16 + 24);
      v39 = v61;
      v40 = (float64x2_t)v63;
      if (v38 >= v37 >> 1)
      {
        v50 = sub_214224144((char *)(v37 > 1), v38 + 1, 1, (char *)v16);
        v39 = v61;
        v40 = (float64x2_t)v63;
        v16 = (uint64_t)v50;
      }
      *(_QWORD *)(v16 + 16) = v38 + 1;
      *(_OWORD *)(v16 + 16 * v38 + 32) = v59;
    }
    v41 = sub_2143C9258(v39, v56, a5, v40);
    if ((v42 & 1) == 0)
    {
      v43 = v41;
      sub_2141D8BF8(&qword_253F15D48);
      v44 = swift_initStackObject();
      *(_OWORD *)(v44 + 16) = xmmword_2144271D0;
      *(_QWORD *)(v44 + 32) = 0x3FF0000000000000;
      *(_QWORD *)(v44 + 40) = v43;
      sub_21436F6CC(v44);
      v67 = v45;
      swift_setDeallocating();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = (uint64_t)sub_214224144(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
      v47 = *(_QWORD *)(v16 + 16);
      v46 = *(_QWORD *)(v16 + 24);
      if (v47 >= v46 >> 1)
        v16 = (uint64_t)sub_214224144((char *)(v46 > 1), v47 + 1, 1, (char *)v16);
      *(_QWORD *)(v16 + 16) = v47 + 1;
      *(_OWORD *)(v16 + 16 * v47 + 32) = v67;
    }
  }
  return v16;
}

uint64_t sub_2143C9840(uint64_t result)
{
  unint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  __int128 v18;

  v1 = *(_QWORD *)(result + 16);
  if (v1 > 1)
  {
    v3 = 0;
    v4 = result + 32;
    v2 = (char *)MEMORY[0x24BEE4AF8];
    v5 = 1;
LABEL_6:
    v6 = v5;
    v7 = (_OWORD *)(v4 + 48 * v3);
    v16 = *((float64x2_t *)v7 + 1);
    v17 = *(float64x2_t *)v7;
    v15 = *((int64x2_t *)v7 + 2);
    v14 = v6;
    while (v6 < v1)
    {
      v8 = sub_2143C9374(v17, v16, v15, *(float64x2_t *)(v4 + 48 * v6), *(float64x2_t *)(v4 + 48 * v6 + 16), *(int64x2_t *)(v4 + 48 * v6 + 32));
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = (__int128 *)(v8 + 32);
        do
        {
          v18 = *v10;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v2 = sub_2142246A8(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
          v12 = *((_QWORD *)v2 + 2);
          v11 = *((_QWORD *)v2 + 3);
          if (v12 >= v11 >> 1)
            v2 = sub_2142246A8((char *)(v11 > 1), v12 + 1, 1, v2);
          *((_QWORD *)v2 + 2) = v12 + 1;
          v13 = &v2[32 * v12];
          *((_QWORD *)v13 + 4) = v3;
          *((_QWORD *)v13 + 5) = v6;
          *((_OWORD *)v13 + 3) = v18;
          ++v10;
          --v9;
        }
        while (v9);
      }
      ++v6;
      result = swift_bridgeObjectRelease();
      if (v6 == v1)
      {
        v3 = v14;
        v5 = v14 + 1;
        if (v14 + 1 == v1)
          return (uint64_t)v2;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

__n128 _s11LineSegmentVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *_s11LineSegmentVMa()
{
  return &_s11LineSegmentVN;
}

uint64_t initializeWithCopy for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_2141DD140(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 48);
  sub_2141DD140(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  v15 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v12;
  sub_2141EF1B0(v13, v14, v15);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_2141ED0BC(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v8;
  sub_2141EF1B0(v9, v10, v11);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPlottableValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPlottableValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyPlottableValue()
{
  return &type metadata for AnyPlottableValue;
}

uint64_t sub_2143C9C38(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;

  v6 = "\t";
  v7 = &unk_214431E88;
  v8 = MEMORY[0x24BEE0190] + 64;
  v9 = &unk_214431EA0;
  result = type metadata accessor for PlottableProjection(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    v10 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v11 = &v5;
    swift_getTupleTypeLayout2();
    v12 = &v4;
    swift_getTupleTypeLayout2();
    v13 = &v3;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_2143C9D28(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD *, uint64_t);
  char v65;
  unint64_t v66;
  unint64_t v67;
  void (*v68)(unint64_t, unint64_t, uint64_t);
  char v69;
  void (*v70)(_QWORD *, _QWORD *, uint64_t);
  char v71;
  unint64_t v72;
  unint64_t v73;
  void (*v74)(unint64_t, unint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void (*v86)(unint64_t, unint64_t, uint64_t);
  unint64_t v87;
  char v88;
  void (*v89)(unint64_t, _QWORD *, uint64_t);
  unint64_t v90;
  unint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char v104;
  void (*v105)(unint64_t, _QWORD *, uint64_t);
  char v106;
  unint64_t v107;
  unint64_t v108;
  void (*v109)(unint64_t, unint64_t, uint64_t);
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(_QWORD *, _QWORD *, uint64_t);
  char v123;
  unint64_t v124;
  unint64_t v125;
  void (*v126)(unint64_t, unint64_t, uint64_t);
  unint64_t result;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v164 = *(_QWORD *)(a3 + 24);
  v3 = *(_QWORD *)(v164 - 8);
  v4 = *(_DWORD *)(v3 + 80);
  v162 = sub_214423C48();
  v5 = *(_QWORD *)(v162 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = sub_214423C54();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v6 | v10 | v4;
  v12 = v11 | 7;
  v13 = ~(v11 | 7);
  v14 = v11 + 32;
  v163 = v3;
  v15 = *(_QWORD *)(v3 + 64);
  v16 = v15 + v4;
  if ((v16 & ~(unint64_t)v4) + v15 > v15)
    v15 += (v15 + v4) & ~(unint64_t)v4;
  v161 = v5;
  v17 = *(_QWORD *)(v5 + 64) + v10;
  if (v15 <= ((v17 + ((v6 + 8) & ~(unint64_t)v6)) & ~v10)
            + *(_QWORD *)(v9 + 64))
    v15 = ((v17 + ((v6 + 8) & ~(unint64_t)v6)) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v15 <= 0x10)
    v15 = 16;
  v18 = v15;
  v19 = v15 + ((v11 + 32) & ~(v11 | 7));
  v20 = v19 + 1;
  v21 = v19 + 1 + v12;
  v22 = (v21 & ~v12) + v19 + 1;
  if (v19 + 1 > v22)
    v22 = v19 + 1;
  v23 = (v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v22 <= v23 + 113)
    v22 = v23 + 113;
  v24 = v23 + 49;
  if (v22 > v24)
    v24 = v22;
  v25 = 25;
  if (v24 > 0x19)
    v25 = v24;
  v26 = v11 <= 7 && ((v6 | *(_DWORD *)(v9 + 80) | v4) & 0x100000) == 0;
  if (v26 && (unint64_t)(v25 + 1) <= 0x18)
  {
    v27 = a2;
    v28 = *((unsigned __int8 *)a2 + v25);
    while (2)
    {
      v29 = ~v10;
      v10 = v28;
      switch(v28)
      {
        case 0u:
          v30 = a1;
          *(_QWORD *)a1 = *a2;
          *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
          *(_BYTE *)(a1 + v25) = 0;
          return v30;
        case 1u:
          v30 = a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
          *(_BYTE *)(a1 + v25) = 1;
          return v30;
        case 2u:
          v30 = a1;
          *(_QWORD *)a1 = *a2;
          *(_BYTE *)(a1 + v25) = 2;
          goto LABEL_26;
        case 3u:
          v32 = a2[1];
          v30 = a1;
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = v32;
          *(_BYTE *)(a1 + v25) = 3;
          swift_retain();
          goto LABEL_26;
        case 4u:
          v136 = ~v7;
          v140 = v29;
          v128 = ~(unint64_t)v4;
          v132 = v16;
          v33 = v7 + 8;
          v144 = v17;
          v148 = *(_QWORD *)(v8 - 8);
          v152 = v8;
          v159 = v25;
          v34 = *a2;
          v35 = a2[1];
          v36 = *((_BYTE *)a2 + 16);
          sub_2141DD130(*a2, v35, v36);
          v30 = a1;
          *(_QWORD *)a1 = v34;
          *(_QWORD *)(a1 + 8) = v35;
          *(_BYTE *)(a1 + 16) = v36;
          *(_QWORD *)(a1 + 24) = a2[3];
          v37 = (uint64_t)a2 + v12;
          v38 = (_QWORD *)((a1 + v12 + 32) & v13);
          v39 = (_QWORD *)((v37 + 32) & v13);
          v40 = *((unsigned __int8 *)v39 + v18);
          swift_bridgeObjectRetain();
          switch(v40)
          {
            case 0:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v163 + 16))(v38, v39, v164);
              *((_BYTE *)v38 + v18) = 0;
              goto LABEL_57;
            case 1:
              v64 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v163 + 16);
              v64(v38, v39, v164);
              v64((_QWORD *)(((unint64_t)v38 + v132) & v128), (_QWORD *)(((unint64_t)v39 + v132) & v128), v164);
              v65 = 1;
              goto LABEL_56;
            case 2:
              *v38 = *v39;
              *((_BYTE *)v38 + v18) = 2;
              swift_retain();
              goto LABEL_57;
            case 3:
              *v38 = *v39;
              v38[1] = v39[1];
              *((_BYTE *)v38 + v18) = 3;
              swift_retain();
              swift_retain();
              goto LABEL_57;
            case 4:
              *v38 = *v39;
              v66 = ((unint64_t)v38 + v33) & v136;
              v67 = ((unint64_t)v39 + v33) & v136;
              v68 = *(void (**)(unint64_t, unint64_t, uint64_t))(v161 + 16);
              swift_retain();
              v68(v66, v67, v162);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v148 + 16))((v144 + v66) & v140, (v144 + v67) & v140, v152);
              v65 = 4;
LABEL_56:
              *((_BYTE *)v38 + v18) = v65;
LABEL_57:
              v69 = 4;
              break;
            default:
              if (v18 <= 3)
                v41 = v18;
              else
                v41 = 4;
              __asm { BR              X11 }
              return result;
          }
          goto LABEL_104;
        case 5u:
          v137 = ~v7;
          v141 = v29;
          v129 = ~(unint64_t)v4;
          v133 = v16;
          v153 = v8;
          v156 = v7 + 8;
          v145 = v17;
          v149 = *(_QWORD *)(v8 - 8);
          v159 = v25;
          v42 = *a2;
          v43 = a2[1];
          v44 = *((_BYTE *)a2 + 16);
          sub_2141DD130(*a2, v43, v44);
          *(_QWORD *)a1 = v42;
          *(_QWORD *)(a1 + 8) = v43;
          *(_BYTE *)(a1 + 16) = v44;
          *(_QWORD *)(a1 + 24) = a2[3];
          v45 = (_QWORD *)((a1 + v12 + 32) & v13);
          v46 = (_QWORD *)(((unint64_t)a2 + v12 + 32) & v13);
          v47 = v18;
          v48 = *((unsigned __int8 *)v46 + v18);
          swift_bridgeObjectRetain();
          switch(v48)
          {
            case 0:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v163 + 16))(v45, v46, v164);
              *((_BYTE *)v45 + v18) = 0;
              goto LABEL_65;
            case 1:
              v70 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v163 + 16);
              v70(v45, v46, v164);
              v27 = a2;
              v70((_QWORD *)(((unint64_t)v45 + v133) & v129), (_QWORD *)(((unint64_t)v46 + v133) & v129), v164);
              v71 = 1;
              goto LABEL_64;
            case 2:
              *v45 = *v46;
              *((_BYTE *)v45 + v18) = 2;
              swift_retain();
              goto LABEL_65;
            case 3:
              *v45 = *v46;
              v45[1] = v46[1];
              *((_BYTE *)v45 + v18) = 3;
              swift_retain();
              swift_retain();
              goto LABEL_65;
            case 4:
              *v45 = *v46;
              v72 = ((unint64_t)v45 + v156) & v137;
              v73 = ((unint64_t)v46 + v156) & v137;
              v74 = *(void (**)(unint64_t, unint64_t, uint64_t))(v161 + 16);
              swift_retain();
              v74(v72, v73, v162);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v149 + 16))((v145 + v72) & v141, (v145 + v73) & v141, v153);
              v71 = 4;
LABEL_64:
              *((_BYTE *)v45 + v18) = v71;
LABEL_65:
              v75 = (v21 + a1) & v13;
              v76 = ((unint64_t)v27 + v21) & v13;
              v77 = *(_QWORD *)v76;
              v78 = *(_QWORD *)(v76 + 8);
              v79 = *(_BYTE *)(v76 + 16);
              sub_2141DD130(*(_QWORD *)v76, v78, v79);
              *(_QWORD *)v75 = v77;
              *(_QWORD *)(v75 + 8) = v78;
              *(_BYTE *)(v75 + 16) = v79;
              *(_QWORD *)(v75 + 24) = *(_QWORD *)(v76 + 24);
              v80 = (_QWORD *)((v14 + v75) & v13);
              v81 = (_QWORD *)((v14 + v76) & v13);
              v82 = *((unsigned __int8 *)v81 + v47);
              swift_bridgeObjectRetain();
              v30 = a1;
              switch(v82)
              {
                case 0:
                  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v163 + 16))(v80, v81, v164);
                  *((_BYTE *)v80 + v47) = 0;
                  break;
                case 1:
                  v122 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v163 + 16);
                  v122(v80, v81, v164);
                  v122((_QWORD *)(((unint64_t)v80 + v133) & v129), (_QWORD *)(((unint64_t)v81 + v133) & v129), v164);
                  v123 = 1;
                  goto LABEL_102;
                case 2:
                  *v80 = *v81;
                  *((_BYTE *)v80 + v47) = 2;
                  goto LABEL_100;
                case 3:
                  *v80 = *v81;
                  v80[1] = v81[1];
                  *((_BYTE *)v80 + v47) = 3;
                  swift_retain();
LABEL_100:
                  swift_retain();
                  break;
                case 4:
                  *v80 = *v81;
                  v124 = ((unint64_t)v80 + v156) & v137;
                  v125 = ((unint64_t)v81 + v156) & v137;
                  v126 = *(void (**)(unint64_t, unint64_t, uint64_t))(v161 + 16);
                  swift_retain();
                  v126(v124, v125, v162);
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v149 + 16))((v145 + v124) & v141, (v145 + v125) & v141, v153);
                  v123 = 4;
LABEL_102:
                  *((_BYTE *)v80 + v47) = v123;
                  break;
                default:
                  if (v47 <= 3)
                    v83 = v47;
                  else
                    v83 = 4;
                  __asm { BR              X11 }
                  return result;
              }
              v69 = 5;
              break;
            default:
              if (v18 <= 3)
                v49 = v18;
              else
                v49 = 4;
              __asm { BR              X11 }
              return result;
          }
          goto LABEL_104;
        case 6u:
          v138 = ~v7;
          v142 = v29;
          v130 = ~(unint64_t)v4;
          v134 = v16;
          v154 = v8;
          v157 = v7 + 8;
          v146 = v17;
          v150 = *(_QWORD *)(v8 - 8);
          v159 = v25;
          v50 = *a2;
          v51 = a2[1];
          v52 = *((_BYTE *)a2 + 16);
          sub_2141DD130(*a2, v51, v52);
          v30 = a1;
          *(_QWORD *)a1 = v50;
          *(_QWORD *)(a1 + 8) = v51;
          *(_BYTE *)(a1 + 16) = v52;
          *(_QWORD *)(a1 + 24) = a2[3];
          v53 = (_QWORD *)((a1 + v12 + 32) & v13);
          v54 = (_QWORD *)(((unint64_t)a2 + v12 + 32) & v13);
          v55 = *((unsigned __int8 *)v54 + v18);
          swift_bridgeObjectRetain();
          switch(v55)
          {
            case 0:
              (*(void (**)(unint64_t, _QWORD *, uint64_t))(v163 + 16))((a1 + v12 + 32) & v13, v54, v164);
              *((_BYTE *)v53 + v18) = 0;
              goto LABEL_77;
            case 1:
              v89 = *(void (**)(unint64_t, _QWORD *, uint64_t))(v163 + 16);
              v89((a1 + v12 + 32) & v13, v54, v164);
              v27 = a2;
              v89(((unint64_t)v53 + v134) & v130, (_QWORD *)(((unint64_t)v54 + v134) & v130), v164);
              v88 = 1;
              goto LABEL_76;
            case 2:
              *v53 = *v54;
              *((_BYTE *)v53 + v18) = 2;
              swift_retain();
              goto LABEL_77;
            case 3:
              *v53 = *v54;
              *(_QWORD *)(((a1 + v12 + 32) & v13) + 8) = *(_QWORD *)((((unint64_t)a2 + v12 + 32) & v13) + 8);
              *((_BYTE *)v53 + v18) = 3;
              swift_retain();
              v27 = a2;
              swift_retain();
              goto LABEL_77;
            case 4:
              *v53 = *v54;
              v84 = ((unint64_t)v53 + v157) & v138;
              v85 = ((unint64_t)v54 + v157) & v138;
              v86 = *(void (**)(unint64_t, unint64_t, uint64_t))(v161 + 16);
              swift_retain();
              v86(v84, v85, v162);
              v87 = v146 + v84;
              v27 = a2;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v150 + 16))(v87 & v142, (v146 + v85) & v142, v154);
              v88 = 4;
LABEL_76:
              *((_BYTE *)v53 + v18) = v88;
LABEL_77:
              v90 = (a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
              v91 = ((unint64_t)v27 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
              *(_BYTE *)v90 = *(_BYTE *)v91;
              v92 = (_OWORD *)(v90 + 8);
              v93 = (_OWORD *)(v91 + 8);
              if (*(unsigned __int8 *)(v91 + 96) == 255)
              {
                v99 = *(_OWORD *)(v91 + 24);
                *v92 = *v93;
                *(_OWORD *)(v90 + 24) = v99;
                v100 = *(_OWORD *)(v91 + 40);
                v101 = *(_OWORD *)(v91 + 56);
                v102 = *(_OWORD *)(v91 + 72);
                *(_OWORD *)(v90 + 81) = *(_OWORD *)(v91 + 81);
                *(_OWORD *)(v90 + 56) = v101;
                *(_OWORD *)(v90 + 72) = v102;
                *(_OWORD *)(v90 + 40) = v100;
              }
              else
              {
                *v92 = *v93;
                v94 = *(_OWORD *)(v91 + 24);
                v95 = *(_OWORD *)(v91 + 40);
                v96 = *(_OWORD *)(v91 + 72);
                *(_OWORD *)(v90 + 56) = *(_OWORD *)(v91 + 56);
                *(_OWORD *)(v90 + 72) = v96;
                *(_OWORD *)(v90 + 24) = v94;
                *(_OWORD *)(v90 + 40) = v95;
                v97 = *(_QWORD *)(v91 + 88);
                v98 = *(_BYTE *)(v91 + 96);
                sub_2142625F8(v97, v98);
                *(_QWORD *)(v90 + 88) = v97;
                *(_BYTE *)(v90 + 96) = v98;
              }
              v103 = *(_QWORD *)(v91 + 104);
              v104 = *(_BYTE *)(v91 + 112);
              sub_2142625F8(v103, v104);
              *(_QWORD *)(v90 + 104) = v103;
              *(_BYTE *)(v90 + 112) = v104;
              v69 = 6;
              break;
            default:
              if (v18 <= 3)
                v56 = v18;
              else
                v56 = 4;
              __asm { BR              X11 }
              return result;
          }
LABEL_104:
          v121 = v159;
          break;
        case 7u:
          v139 = ~v7;
          v143 = v29;
          v131 = ~(unint64_t)v4;
          v135 = v16;
          v155 = v8;
          v158 = v7 + 8;
          v147 = v17;
          v151 = *(_QWORD *)(v8 - 8);
          v160 = v25;
          v57 = *a2;
          v58 = a2[1];
          v59 = *((_BYTE *)a2 + 16);
          sub_2141DD130(*a2, v58, v59);
          v30 = a1;
          *(_QWORD *)a1 = v57;
          *(_QWORD *)(a1 + 8) = v58;
          *(_BYTE *)(a1 + 16) = v59;
          *(_QWORD *)(a1 + 24) = a2[3];
          v60 = (_QWORD *)((a1 + v12 + 32) & v13);
          v61 = (_QWORD *)(((unint64_t)a2 + v12 + 32) & v13);
          v62 = *((unsigned __int8 *)v61 + v18);
          swift_bridgeObjectRetain();
          switch(v62)
          {
            case 0:
              (*(void (**)(unint64_t, _QWORD *, uint64_t))(v163 + 16))((a1 + v12 + 32) & v13, v61, v164);
              *((_BYTE *)v60 + v18) = 0;
              goto LABEL_88;
            case 1:
              v105 = *(void (**)(unint64_t, _QWORD *, uint64_t))(v163 + 16);
              v105((a1 + v12 + 32) & v13, v61, v164);
              v27 = a2;
              v105(((unint64_t)v60 + v135) & v131, (_QWORD *)(((unint64_t)v61 + v135) & v131), v164);
              v106 = 1;
              goto LABEL_87;
            case 2:
              *v60 = *v61;
              *((_BYTE *)v60 + v18) = 2;
              swift_retain();
              goto LABEL_88;
            case 3:
              *v60 = *v61;
              *(_QWORD *)(((a1 + v12 + 32) & v13) + 8) = *(_QWORD *)((((unint64_t)a2 + v12 + 32) & v13) + 8);
              *((_BYTE *)v60 + v18) = 3;
              swift_retain();
              v27 = a2;
              swift_retain();
              goto LABEL_88;
            case 4:
              *v60 = *v61;
              v107 = ((unint64_t)v60 + v158) & v139;
              v108 = ((unint64_t)v61 + v158) & v139;
              v109 = *(void (**)(unint64_t, unint64_t, uint64_t))(v161 + 16);
              swift_retain();
              v109(v107, v108, v162);
              v110 = v147 + v107;
              v27 = a2;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v151 + 16))(v110 & v143, (v147 + v108) & v143, v155);
              v106 = 4;
LABEL_87:
              *((_BYTE *)v60 + v18) = v106;
LABEL_88:
              v111 = (a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
              v112 = ((unint64_t)v27 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
              *(_BYTE *)v111 = *(_BYTE *)v112;
              *(_BYTE *)(v111 + 1) = *(_BYTE *)(v112 + 1);
              *(_BYTE *)(v111 + 2) = *(_BYTE *)(v112 + 2);
              v113 = *(unsigned __int8 *)(v112 + 24);
              if (v113 <= 0xFB)
              {
                v115 = *(_QWORD *)(v112 + 8);
                v116 = *(_QWORD *)(v112 + 16);
                sub_2141DD140(v115, v116, *(_BYTE *)(v112 + 24));
                *(_QWORD *)(v111 + 8) = v115;
                *(_QWORD *)(v111 + 16) = v116;
                *(_BYTE *)(v111 + 24) = v113;
              }
              else
              {
                v114 = *(_OWORD *)(v112 + 8);
                *(_BYTE *)(v111 + 24) = *(_BYTE *)(v112 + 24);
                *(_OWORD *)(v111 + 8) = v114;
              }
              v117 = *(unsigned __int8 *)(v112 + 48);
              if (v117 <= 0xFB)
              {
                v119 = *(_QWORD *)(v112 + 32);
                v120 = *(_QWORD *)(v112 + 40);
                sub_2141DD140(v119, v120, *(_BYTE *)(v112 + 48));
                *(_QWORD *)(v111 + 32) = v119;
                *(_QWORD *)(v111 + 40) = v120;
                *(_BYTE *)(v111 + 48) = v117;
              }
              else
              {
                v118 = *(_OWORD *)(v112 + 32);
                *(_BYTE *)(v111 + 48) = *(_BYTE *)(v112 + 48);
                *(_OWORD *)(v111 + 32) = v118;
              }
              v121 = v160;
              v69 = 7;
              break;
            default:
              if (v18 <= 3)
                v63 = v18;
              else
                v63 = 4;
              __asm { BR              X11 }
              return result;
          }
          return result;
        default:
          v28 = *(_DWORD *)a2 + 8;
          continue;
      }
      break;
    }
    *(_BYTE *)(v30 + v121) = v69;
  }
  else
  {
    v31 = *a2;
    *(_QWORD *)a1 = *a2;
    v30 = v31 + ((v11 + 16) & v13);
LABEL_26:
    swift_retain();
  }
  return v30;
}

uint64_t sub_2143CAA98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  unint64_t v50;
  int v51;
  void (*v52)(uint64_t, uint64_t);
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;

  v83 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v83 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v81 = sub_214423C48();
  v5 = *(_QWORD *)(v81 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  result = sub_214423C54();
  v8 = *(_QWORD *)(result - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 | v9 | v4;
  v11 = v10 | 7;
  v12 = v10 + 32;
  v13 = (v10 + 32) & ~(v10 | 7);
  v14 = *(_QWORD *)(v3 + 64);
  v15 = v14 + v4;
  if (((v14 + v4) & ~v4) + v14 > v14)
    v14 += (v14 + v4) & ~v4;
  v16 = v6 + 8;
  v17 = *(_QWORD *)(v5 + 64) + v9;
  if (v14 <= ((v17 + ((v6 + 8) & ~v6)) & (unint64_t)~v9) + *(_QWORD *)(v8 + 64))
    v14 = ((v17 + ((v6 + 8) & ~v6)) & ~v9) + *(_QWORD *)(v8 + 64);
  if (v14 <= 0x10)
    v18 = 16;
  else
    v18 = v14;
  v19 = v18 + v13;
  v20 = v19 + 1;
  v21 = ((v19 + 1 + v11) & ~v11) + v19 + 1;
  if (v19 + 1 > v21)
    v21 = v19 + 1;
  v22 = (v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= v22 + 113)
    v21 = v22 + 113;
  v23 = v22 + 49;
  if (v21 > v23)
    v23 = v21;
  if (v23 <= 0x19)
    v23 = 25;
  v25 = ~v11;
  v26 = ~v4;
  v27 = ~v6;
  v28 = ~v9;
  switch(*(_BYTE *)(a1 + v23))
  {
    case 0:
    case 1:
      return result;
    case 2:
      goto LABEL_80;
    case 3:
LABEL_79:
      swift_release();
LABEL_80:
      result = swift_release();
      break;
    case 4:
      v29 = v26;
      v68 = ~v9;
      v71 = *(_QWORD *)(v5 + 64) + v9;
      v30 = v16;
      v31 = v15;
      v75 = *(_QWORD *)(result - 8);
      v78 = result;
      sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
      v32 = (a1 + v11 + 32) & v25;
      switch(*(_BYTE *)(v32 + v18))
      {
        case 0:
          goto LABEL_78;
        case 1:
          v82 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
          v44 = v83;
          v82(v32, v83);
          v45 = (v31 + v32) & v29;
          goto LABEL_82;
        case 2:
          goto LABEL_80;
        case 3:
          goto LABEL_79;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v30 + v32) & v27, v81);
          v45 = (v71 + ((v30 + v32) & v27)) & v68;
          goto LABEL_84;
        default:
          if (v18 <= 3)
            v33 = v18;
          else
            v33 = 4;
          __asm { BR              X12 }
          return result;
      }
    case 5:
      v62 = v26;
      v65 = v27;
      v60 = v16;
      v61 = v15;
      v72 = *(_QWORD *)(v5 + 64) + v9;
      v75 = *(_QWORD *)(result - 8);
      v78 = result;
      sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
      v34 = (a1 + v11 + 32) & v25;
      switch(*(_BYTE *)(v34 + v18))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v34, v83);
          break;
        case 1:
          v59 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
          v59(v34, v83);
          v59((v61 + v34) & v62, v83);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          v46 = (v60 + v34) & v65;
          (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v46, v81);
          (*(void (**)(uint64_t, uint64_t))(v75 + 8))((v72 + v46) & v28, v78);
          break;
        default:
          if (v18 <= 3)
            v35 = v18;
          else
            v35 = 4;
          __asm { BR              X12 }
          return result;
      }
      v47 = (v11 + a1 + v20) & v25;
      sub_2141ED0BC(*(_QWORD *)v47, *(_QWORD *)(v47 + 8), *(_BYTE *)(v47 + 0x10));
      swift_bridgeObjectRelease();
      v32 = (v12 + v47) & v25;
      switch(*(_BYTE *)(v32 + v18))
      {
        case 0:
LABEL_78:
          v56 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
          v45 = v32;
          v57 = v83;
          goto LABEL_85;
        case 1:
          v82 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
          v58 = (v12 + v47) & v25;
          v44 = v83;
          v82(v58, v83);
          v45 = (v61 + v32) & v62;
LABEL_82:
          v57 = v44;
          v56 = (uint64_t (*)(uint64_t, uint64_t))v82;
          goto LABEL_85;
        case 2:
          goto LABEL_80;
        case 3:
          goto LABEL_79;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v60 + v32) & v65, v81);
          v45 = (v72 + ((v60 + v32) & v65)) & v28;
LABEL_84:
          v57 = v78;
          v56 = *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8);
LABEL_85:
          result = v56(v45, v57);
          break;
        default:
          if (v18 <= 3)
            v48 = v18;
          else
            v48 = 4;
          __asm { BR              X12 }
          return result;
      }
      return result;
    case 6:
      v63 = v26;
      v66 = v27;
      v69 = ~v9;
      v73 = *(_QWORD *)(v5 + 64) + v9;
      v36 = v16;
      v37 = v15;
      v76 = *(_QWORD *)(result - 8);
      v79 = result;
      sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
      v38 = (a1 + v11 + 32) & v25;
      switch(*(_BYTE *)(v38 + v18))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v38, v83);
          break;
        case 1:
          v49 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
          v49(v38, v83);
          v49((v37 + v38) & v63, v83);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v36 + v38) & v66, v81);
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))((v73 + ((v36 + v38) & v66)) & v69, v79);
          break;
        default:
          if (v18 <= 3)
            v39 = v18;
          else
            v39 = 4;
          __asm { BR              X12 }
          return result;
      }
      v50 = (a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      v51 = *(unsigned __int8 *)(v50 + 96);
      if (v51 != 255)
        sub_2142637C0(*(_QWORD *)(v50 + 88), v51 & 1);
      result = sub_2142637C0(*(_QWORD *)(v50 + 104), *(_BYTE *)(v50 + 112));
      break;
    case 7:
      v64 = v26;
      v67 = v27;
      v70 = ~v9;
      v74 = *(_QWORD *)(v5 + 64) + v9;
      v40 = v16;
      v41 = v15;
      v77 = *(_QWORD *)(result - 8);
      v80 = result;
      sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
      v42 = (a1 + v11 + 32) & v25;
      switch(*(_BYTE *)(v42 + v18))
      {
        case 0:
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v42, v83);
          break;
        case 1:
          v52 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
          v52(v42, v83);
          result = ((uint64_t (*)(uint64_t, uint64_t))v52)((v41 + v42) & v64, v83);
          break;
        case 2:
          result = swift_release();
          break;
        case 3:
          swift_release();
          result = swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v40 + v42) & v67, v81);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))((v74 + ((v40 + v42) & v67)) & v70, v80);
          break;
        default:
          if (v18 <= 3)
            v43 = v18;
          else
            v43 = 4;
          __asm { BR              X12 }
          return result;
      }
      v53 = (a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      v54 = *(unsigned __int8 *)(v53 + 24);
      if (v54 <= 0xFB)
        result = sub_2141EF1B0(*(_QWORD *)(v53 + 8), *(_QWORD *)(v53 + 16), v54);
      v55 = *(unsigned __int8 *)(v53 + 48);
      if (v55 <= 0xFB)
        result = sub_2141EF1B0(*(_QWORD *)(v53 + 32), *(_QWORD *)(v53 + 40), v55);
      break;
    default:
      if (v23 <= 3)
        v24 = v23;
      else
        v24 = 4;
      __asm { BR              X14 }
      return result;
  }
  return result;
}

uint64_t sub_2143CB3B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  void (*v68)(_QWORD *, _QWORD *, uint64_t);
  char v69;
  unint64_t v70;
  unint64_t v71;
  void (*v72)(unint64_t, unint64_t, uint64_t);
  char v73;
  uint64_t v74;
  void (*v75)(_QWORD *, _QWORD *, uint64_t);
  char v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(unint64_t, unint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void (*v91)(unint64_t, unint64_t, uint64_t);
  char v92;
  void (*v93)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v94;
  unint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char v108;
  void (*v109)(_QWORD *, _QWORD *, uint64_t);
  char v110;
  unint64_t v111;
  unint64_t v112;
  void (*v113)(unint64_t, unint64_t, uint64_t);
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(_QWORD *, _QWORD *, uint64_t);
  char v126;
  unint64_t v127;
  unint64_t v128;
  void (*v129)(unint64_t, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v161 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v161 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v159 = sub_214423C48();
  v7 = *(_QWORD *)(v159 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = sub_214423C54();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 | v11 | v6;
  v13 = v12 | 7;
  v14 = v12 + 32;
  v15 = (v12 + 32) & ~(v12 | 7);
  v160 = v5;
  v16 = *(_QWORD *)(v5 + 64);
  v17 = v16 + v6;
  if (((v16 + v6) & ~v6) + v16 > v16)
    v16 += (v16 + v6) & ~v6;
  v157 = v8 + 8;
  v158 = v7;
  v18 = *(_QWORD *)(v7 + 64) + v11;
  if (v16 <= ((v18 + ((v8 + 8) & ~v8)) & (unint64_t)~v11) + *(_QWORD *)(v10 + 64))
    v16 = ((v18 + ((v8 + 8) & ~v8)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v16 <= 0x10)
    v16 = 16;
  v19 = v16;
  v20 = v16 + v15;
  v21 = v20 + 1;
  v22 = v20 + 1 + v13;
  v23 = (v22 & ~v13) + v20 + 1;
  if (v20 + 1 > v23)
    v23 = v20 + 1;
  v24 = (v20 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v23 <= v24 + 113)
    v23 = v24 + 113;
  v25 = v24 + 49;
  if (v23 > v25)
    v25 = v23;
  if (v25 <= 0x19)
    v26 = 25;
  else
    v26 = v25;
  v28 = ~v13;
  switch(*((_BYTE *)a2 + v26))
  {
    case 0:
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_BYTE *)(a1 + v26) = 0;
      return a1;
    case 1:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
      *(_BYTE *)(a1 + v26) = 1;
      return a1;
    case 2:
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + v26) = 2;
      swift_retain();
      return a1;
    case 3:
      v29 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v29;
      *(_BYTE *)(a1 + v26) = 3;
      swift_retain();
      swift_retain();
      return a1;
    case 4:
      v30 = ~v8;
      v135 = ~v6;
      v139 = ~v11;
      v31 = v17;
      v143 = v18;
      v147 = *(_QWORD *)(v9 - 8);
      v151 = v9;
      v155 = v26;
      v32 = *a2;
      v33 = a2[1];
      v34 = a1;
      v35 = *((_BYTE *)a2 + 16);
      sub_2141DD130(*a2, v33, v35);
      *(_QWORD *)v34 = v32;
      *(_QWORD *)(v34 + 8) = v33;
      *(_BYTE *)(v34 + 16) = v35;
      a1 = v34;
      *(_QWORD *)(v34 + 24) = a2[3];
      v36 = (uint64_t)a2 + v13;
      v37 = (_QWORD *)((v34 + v13 + 32) & v28);
      v38 = (_QWORD *)((v36 + 32) & v28);
      v39 = *((unsigned __int8 *)v38 + v19);
      swift_bridgeObjectRetain();
      switch(v39)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16))(v37, v38, v161);
          *((_BYTE *)v37 + v19) = 0;
          goto LABEL_52;
        case 1:
          v68 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16);
          v68(v37, v38, v161);
          v68((_QWORD *)(((unint64_t)v37 + v31) & v135), (_QWORD *)(((unint64_t)v38 + v31) & v135), v161);
          v69 = 1;
          goto LABEL_51;
        case 2:
          *v37 = *v38;
          *((_BYTE *)v37 + v19) = 2;
          swift_retain();
          goto LABEL_52;
        case 3:
          *v37 = *v38;
          v37[1] = v38[1];
          *((_BYTE *)v37 + v19) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_52;
        case 4:
          *v37 = *v38;
          v70 = ((unint64_t)v37 + v157) & v30;
          v71 = ((unint64_t)v38 + v157) & v30;
          v72 = *(void (**)(unint64_t, unint64_t, uint64_t))(v158 + 16);
          swift_retain();
          v72(v70, v71, v159);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v147 + 16))((v143 + v70) & v139, (v143 + v71) & v139, v151);
          v69 = 4;
LABEL_51:
          *((_BYTE *)v37 + v19) = v69;
LABEL_52:
          v73 = 4;
          break;
        default:
          if (v19 <= 3)
            v40 = v19;
          else
            v40 = 4;
          __asm { BR              X11 }
          return result;
      }
      goto LABEL_98;
    case 5:
      v131 = ~v8;
      v132 = v17;
      v136 = ~v6;
      v140 = ~v11;
      v144 = v18;
      v148 = *(_QWORD *)(v9 - 8);
      v152 = v9;
      v155 = v26;
      v41 = *a2;
      v42 = a2[1];
      v43 = *((_BYTE *)a2 + 16);
      sub_2141DD130(*a2, v42, v43);
      *(_QWORD *)a1 = v41;
      *(_QWORD *)(a1 + 8) = v42;
      *(_BYTE *)(a1 + 16) = v43;
      *(_QWORD *)(a1 + 24) = a2[3];
      v44 = a1;
      v45 = (_QWORD *)((a1 + v13 + 32) & v28);
      v46 = (_QWORD *)(((unint64_t)a2 + v13 + 32) & v28);
      v47 = v19;
      v48 = *((unsigned __int8 *)v46 + v19);
      swift_bridgeObjectRetain();
      v74 = v44;
      switch(v48)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16))(v45, v46, v161);
          *((_BYTE *)v45 + v47) = 0;
          goto LABEL_60;
        case 1:
          v75 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16);
          v75(v45, v46, v161);
          v75((_QWORD *)(((unint64_t)v45 + v132) & v136), (_QWORD *)(((unint64_t)v46 + v132) & v136), v161);
          v74 = v44;
          v76 = 1;
          goto LABEL_59;
        case 2:
          *v45 = *v46;
          *((_BYTE *)v45 + v47) = 2;
          swift_retain();
          goto LABEL_60;
        case 3:
          *v45 = *v46;
          v45[1] = v46[1];
          *((_BYTE *)v45 + v47) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_60;
        case 4:
          *v45 = *v46;
          v77 = ((unint64_t)v45 + v157) & v131;
          v78 = ((unint64_t)v46 + v157) & v131;
          v79 = *(void (**)(unint64_t, unint64_t, uint64_t))(v158 + 16);
          swift_retain();
          v79(v77, v78, v159);
          v74 = v44;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v148 + 16))((v144 + v77) & v140, (v144 + v78) & v140, v152);
          v76 = 4;
LABEL_59:
          *((_BYTE *)v45 + v47) = v76;
LABEL_60:
          v80 = (v22 + v74) & v28;
          v81 = ((unint64_t)a2 + v22) & v28;
          v82 = *(_QWORD *)v81;
          v83 = *(_QWORD *)(v81 + 8);
          v84 = *(_BYTE *)(v81 + 16);
          sub_2141DD130(*(_QWORD *)v81, v83, v84);
          *(_QWORD *)v80 = v82;
          *(_QWORD *)(v80 + 8) = v83;
          *(_BYTE *)(v80 + 16) = v84;
          *(_QWORD *)(v80 + 24) = *(_QWORD *)(v81 + 24);
          v85 = (_QWORD *)((v14 + v80) & v28);
          v86 = (_QWORD *)((v14 + v81) & v28);
          v87 = *((unsigned __int8 *)v86 + v47);
          swift_bridgeObjectRetain();
          a1 = v44;
          switch(v87)
          {
            case 0:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16))(v85, v86, v161);
              *((_BYTE *)v85 + v47) = 0;
              goto LABEL_97;
            case 1:
              v125 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16);
              v125(v85, v86, v161);
              v125((_QWORD *)(((unint64_t)v85 + v132) & v136), (_QWORD *)(((unint64_t)v86 + v132) & v136), v161);
              v126 = 1;
              goto LABEL_96;
            case 2:
              *v85 = *v86;
              *((_BYTE *)v85 + v47) = 2;
              swift_retain();
              goto LABEL_97;
            case 3:
              *v85 = *v86;
              v85[1] = v86[1];
              *((_BYTE *)v85 + v47) = 3;
              swift_retain();
              swift_retain();
              goto LABEL_97;
            case 4:
              *v85 = *v86;
              v127 = ((unint64_t)v85 + v157) & v131;
              v128 = ((unint64_t)v86 + v157) & v131;
              v129 = *(void (**)(unint64_t, unint64_t, uint64_t))(v158 + 16);
              swift_retain();
              v129(v127, v128, v159);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v148 + 16))((v144 + v127) & v140, (v144 + v128) & v140, v152);
              v126 = 4;
LABEL_96:
              *((_BYTE *)v85 + v47) = v126;
LABEL_97:
              v73 = 5;
              break;
            default:
              if (v47 <= 3)
                v88 = v47;
              else
                v88 = 4;
              __asm { BR              X11 }
              return result;
          }
          return result;
        default:
          if (v47 <= 3)
            v49 = v47;
          else
            v49 = 4;
          __asm { BR              X11 }
          return result;
      }
      goto LABEL_98;
    case 6:
      v50 = ~v8;
      v137 = ~v6;
      v141 = ~v11;
      v133 = v17;
      v145 = v18;
      v149 = *(_QWORD *)(v9 - 8);
      v153 = v9;
      v155 = v26;
      v51 = *a2;
      v52 = a2[1];
      v53 = a1;
      v54 = *((_BYTE *)a2 + 16);
      sub_2141DD130(*a2, v52, v54);
      *(_QWORD *)v53 = v51;
      *(_QWORD *)(v53 + 8) = v52;
      *(_BYTE *)(v53 + 16) = v54;
      a1 = v53;
      *(_QWORD *)(v53 + 24) = a2[3];
      v55 = (_QWORD *)((v53 + v13 + 32) & v28);
      v56 = (_QWORD *)(((unint64_t)a2 + v13 + 32) & v28);
      v57 = *((unsigned __int8 *)v56 + v19);
      swift_bridgeObjectRetain();
      switch(v57)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16))(v55, v56, v161);
          *((_BYTE *)v55 + v19) = 0;
          goto LABEL_72;
        case 1:
          v93 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16);
          v93(v55, v56, v161);
          v93((_QWORD *)(((unint64_t)v55 + v133) & v137), (_QWORD *)(((unint64_t)v56 + v133) & v137), v161);
          v92 = 1;
          goto LABEL_71;
        case 2:
          *v55 = *v56;
          *((_BYTE *)v55 + v19) = 2;
          swift_retain();
          goto LABEL_72;
        case 3:
          *v55 = *v56;
          v55[1] = *(_QWORD *)((((unint64_t)a2 + v13 + 32) & v28) + 8);
          *((_BYTE *)v55 + v19) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_72;
        case 4:
          *v55 = *v56;
          v89 = ((unint64_t)v55 + v157) & v50;
          v90 = ((unint64_t)v56 + v157) & v50;
          v91 = *(void (**)(unint64_t, unint64_t, uint64_t))(v158 + 16);
          swift_retain();
          v91(v89, v90, v159);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v149 + 16))((v145 + v89) & v141, (v145 + v90) & v141, v153);
          v92 = 4;
LABEL_71:
          *((_BYTE *)v55 + v19) = v92;
LABEL_72:
          v94 = (a1 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
          v95 = ((unint64_t)a2 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
          *(_BYTE *)v94 = *(_BYTE *)v95;
          v96 = (_OWORD *)(v94 + 8);
          v97 = (_OWORD *)(v95 + 8);
          if (*(unsigned __int8 *)(v95 + 96) == 255)
          {
            v103 = *(_OWORD *)(v95 + 24);
            *v96 = *v97;
            *(_OWORD *)(v94 + 24) = v103;
            v104 = *(_OWORD *)(v95 + 40);
            v105 = *(_OWORD *)(v95 + 56);
            v106 = *(_OWORD *)(v95 + 72);
            *(_OWORD *)(v94 + 81) = *(_OWORD *)(v95 + 81);
            *(_OWORD *)(v94 + 56) = v105;
            *(_OWORD *)(v94 + 72) = v106;
            *(_OWORD *)(v94 + 40) = v104;
          }
          else
          {
            *v96 = *v97;
            v98 = *(_OWORD *)(v95 + 24);
            v99 = *(_OWORD *)(v95 + 40);
            v100 = *(_OWORD *)(v95 + 72);
            *(_OWORD *)(v94 + 56) = *(_OWORD *)(v95 + 56);
            *(_OWORD *)(v94 + 72) = v100;
            *(_OWORD *)(v94 + 24) = v98;
            *(_OWORD *)(v94 + 40) = v99;
            v101 = *(_QWORD *)(v95 + 88);
            v102 = *(_BYTE *)(v95 + 96);
            sub_2142625F8(v101, v102);
            *(_QWORD *)(v94 + 88) = v101;
            *(_BYTE *)(v94 + 96) = v102;
          }
          v107 = *(_QWORD *)(v95 + 104);
          v108 = *(_BYTE *)(v95 + 112);
          sub_2142625F8(v107, v108);
          *(_QWORD *)(v94 + 104) = v107;
          *(_BYTE *)(v94 + 112) = v108;
          v73 = 6;
          break;
        default:
          if (v19 <= 3)
            v58 = v19;
          else
            v58 = 4;
          __asm { BR              X11 }
          return result;
      }
LABEL_98:
      v124 = v155;
      break;
    case 7:
      v59 = ~v8;
      v138 = ~v6;
      v142 = ~v11;
      v134 = v17;
      v146 = v18;
      v150 = *(_QWORD *)(v9 - 8);
      v154 = v9;
      v156 = v26;
      v60 = *a2;
      v61 = a2[1];
      v62 = a1;
      v63 = *((_BYTE *)a2 + 16);
      sub_2141DD130(*a2, v61, v63);
      *(_QWORD *)v62 = v60;
      *(_QWORD *)(v62 + 8) = v61;
      *(_BYTE *)(v62 + 16) = v63;
      a1 = v62;
      *(_QWORD *)(v62 + 24) = a2[3];
      v64 = (_QWORD *)((v62 + v13 + 32) & v28);
      v65 = (_QWORD *)(((unint64_t)a2 + v13 + 32) & v28);
      v66 = *((unsigned __int8 *)v65 + v19);
      swift_bridgeObjectRetain();
      switch(v66)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16))(v64, v65, v161);
          *((_BYTE *)v64 + v19) = 0;
          goto LABEL_83;
        case 1:
          v109 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v160 + 16);
          v109(v64, v65, v161);
          v109((_QWORD *)(((unint64_t)v64 + v134) & v138), (_QWORD *)(((unint64_t)v65 + v134) & v138), v161);
          v110 = 1;
          goto LABEL_82;
        case 2:
          *v64 = *v65;
          *((_BYTE *)v64 + v19) = 2;
          swift_retain();
          goto LABEL_83;
        case 3:
          *v64 = *v65;
          v64[1] = *(_QWORD *)((((unint64_t)a2 + v13 + 32) & v28) + 8);
          *((_BYTE *)v64 + v19) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_83;
        case 4:
          *v64 = *v65;
          v111 = ((unint64_t)v64 + v157) & v59;
          v112 = ((unint64_t)v65 + v157) & v59;
          v113 = *(void (**)(unint64_t, unint64_t, uint64_t))(v158 + 16);
          swift_retain();
          v113(v111, v112, v159);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v150 + 16))((v146 + v111) & v142, (v146 + v112) & v142, v154);
          v110 = 4;
LABEL_82:
          *((_BYTE *)v64 + v19) = v110;
LABEL_83:
          v114 = (a1 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
          v115 = ((unint64_t)a2 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
          *(_BYTE *)v114 = *(_BYTE *)v115;
          *(_BYTE *)(v114 + 1) = *(_BYTE *)(v115 + 1);
          *(_BYTE *)(v114 + 2) = *(_BYTE *)(v115 + 2);
          v116 = *(unsigned __int8 *)(v115 + 24);
          if (v116 <= 0xFB)
          {
            v118 = *(_QWORD *)(v115 + 8);
            v119 = *(_QWORD *)(v115 + 16);
            sub_2141DD140(v118, v119, *(_BYTE *)(v115 + 24));
            *(_QWORD *)(v114 + 8) = v118;
            *(_QWORD *)(v114 + 16) = v119;
            *(_BYTE *)(v114 + 24) = v116;
          }
          else
          {
            v117 = *(_OWORD *)(v115 + 8);
            *(_BYTE *)(v114 + 24) = *(_BYTE *)(v115 + 24);
            *(_OWORD *)(v114 + 8) = v117;
          }
          v120 = *(unsigned __int8 *)(v115 + 48);
          if (v120 <= 0xFB)
          {
            v122 = *(_QWORD *)(v115 + 32);
            v123 = *(_QWORD *)(v115 + 40);
            sub_2141DD140(v122, v123, *(_BYTE *)(v115 + 48));
            *(_QWORD *)(v114 + 32) = v122;
            *(_QWORD *)(v114 + 40) = v123;
            *(_BYTE *)(v114 + 48) = v120;
          }
          else
          {
            v121 = *(_OWORD *)(v115 + 32);
            *(_BYTE *)(v114 + 48) = *(_BYTE *)(v115 + 48);
            *(_OWORD *)(v114 + 32) = v121;
          }
          v124 = v156;
          v73 = 7;
          break;
        default:
          if (v19 <= 3)
            v67 = v19;
          else
            v67 = 4;
          __asm { BR              X11 }
          return result;
      }
      return result;
    default:
      if (v26 <= 3)
        v27 = v26;
      else
        v27 = 4;
      __asm { BR              X13 }
      return result;
  }
  *(_BYTE *)(a1 + v124) = v73;
  return a1;
}

uint64_t sub_2143CC134(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  unint64_t v42;
  int v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(_QWORD *, _QWORD *, uint64_t);
  char v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(unint64_t, unint64_t, uint64_t);
  void (*v101)(_QWORD *, _QWORD *, uint64_t);
  char v102;
  unint64_t v103;
  unint64_t v104;
  void (*v105)(unint64_t, unint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD *v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void (*v118)(unint64_t, unint64_t, uint64_t);
  char v119;
  void (*v120)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v121;
  unint64_t v122;
  _OWORD *v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  char v135;
  void (*v136)(_QWORD *, _QWORD *, uint64_t);
  char v137;
  unint64_t v138;
  unint64_t v139;
  void (*v140)(unint64_t, unint64_t, uint64_t);
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(_QWORD *, _QWORD *, uint64_t);
  char v152;
  unint64_t v153;
  unint64_t v154;
  void (*v155)(unint64_t, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;

  if ((__int128 *)a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v175 = sub_214423C48();
    v8 = *(_QWORD *)(v175 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = sub_214423C54();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned __int8 *)(v11 + 80);
    v13 = v9 | v12 | v7;
    v14 = v13 | 7;
    v168 = v13 + 32;
    v15 = (v13 + 32) & ~(v13 | 7);
    v176 = v11;
    v177 = v6;
    v16 = *(_QWORD *)(v6 + 64);
    v166 = v16 + v7;
    if (((v16 + v7) & ~v7) + v16 > v16)
      v16 += (v16 + v7) & ~v7;
    v172 = v9 + 8;
    v173 = v8;
    v174 = *(_QWORD *)(v8 + 64) + v12;
    if (v16 <= ((v174 + ((v9 + 8) & ~v9)) & (unint64_t)~v12) + *(_QWORD *)(v11 + 64))
      v16 = ((v174 + ((v9 + 8) & ~v9)) & ~v12) + *(_QWORD *)(v11 + 64);
    if (v16 <= 0x10)
      v17 = 16;
    else
      v17 = v16;
    v18 = v17 + v15;
    v167 = v18 + 1 + v14;
    v19 = (v167 & ~v14) + v18 + 1;
    v178 = v18 + 1;
    if (v18 + 1 > v19)
      v19 = v18 + 1;
    v20 = (v18 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v19 <= v20 + 113)
      v19 = v20 + 113;
    v21 = v20 + 49;
    if (v19 > v21)
      v21 = v19;
    if (v21 <= 0x19)
      v22 = 25;
    else
      v22 = v21;
    v24 = ~v14;
    v165 = ~v7;
    v171 = ~v9;
    v25 = ~v12;
    switch(*(_BYTE *)(a1 + v22))
    {
      case 0:
      case 1:
        break;
      case 2:
LABEL_23:
        swift_release();
        break;
      case 3:
LABEL_24:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v26 = (a1 + v14 + 32) & v24;
        switch(*(_BYTE *)(v26 + v17))
        {
          case 0:
            goto LABEL_78;
          case 1:
            goto LABEL_79;
          case 2:
            goto LABEL_23;
          case 3:
            goto LABEL_24;
          case 4:
            goto LABEL_80;
          default:
            if (v17 <= 3)
              v27 = v17;
            else
              v27 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v28 = (a1 + v14 + 32) & v24;
        switch(*(_BYTE *)(v28 + v17))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v28, v5);
            break;
          case 1:
            v157 = v17;
            v34 = v25;
            v35 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
            v35(v28, v5);
            v35((v166 + v28) & v165, v5);
            v25 = v34;
            v17 = v157;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v36 = (v172 + v28) & v171;
            (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v36, v175);
            (*(void (**)(uint64_t, uint64_t))(v176 + 8))((v174 + v36) & v25, v10);
            break;
          default:
            if (v17 <= 3)
              v29 = v17;
            else
              v29 = 4;
            __asm { BR              X12 }
            return result;
        }
        v37 = (v167 + a1) & v24;
        sub_2141ED0BC(*(_QWORD *)v37, *(_QWORD *)(v37 + 8), *(_BYTE *)(v37 + 0x10));
        swift_bridgeObjectRelease();
        v26 = (v168 + v37) & v24;
        switch(*(_BYTE *)(v26 + v17))
        {
          case 0:
LABEL_78:
            (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v26, v5);
            goto LABEL_86;
          case 1:
LABEL_79:
            v160 = v17;
            v50 = v25;
            v51 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
            v51(v26, v5);
            v51((v166 + v26) & v165, v5);
            v25 = v50;
            v17 = v160;
            goto LABEL_86;
          case 2:
            goto LABEL_23;
          case 3:
            goto LABEL_24;
          case 4:
LABEL_80:
            swift_release();
            v52 = (v172 + v26) & v171;
            (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v52, v175);
            (*(void (**)(uint64_t, uint64_t))(v176 + 8))((v174 + v52) & v25, v10);
            goto LABEL_86;
          default:
            if (v17 <= 3)
              v38 = v17;
            else
              v38 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v30 = (a1 + v14 + 32) & v24;
        switch(*(_BYTE *)(v30 + v17))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v30, v5);
            break;
          case 1:
            v158 = v17;
            v40 = v25;
            v41 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
            v41(v30, v5);
            v41((v166 + v30) & v165, v5);
            v25 = v40;
            v17 = v158;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v39 = (v172 + v30) & v171;
            (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v39, v175);
            (*(void (**)(uint64_t, uint64_t))(v176 + 8))((v174 + v39) & v25, v10);
            break;
          default:
            if (v17 <= 3)
              v31 = v17;
            else
              v31 = 4;
            __asm { BR              X12 }
            return result;
        }
        v42 = (a1 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
        v43 = *(unsigned __int8 *)(v42 + 96);
        if (v43 != 255)
          sub_2142637C0(*(_QWORD *)(v42 + 88), v43 & 1);
        sub_2142637C0(*(_QWORD *)(v42 + 104), *(_BYTE *)(v42 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v32 = (a1 + v14 + 32) & v24;
        switch(*(_BYTE *)(v32 + v17))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v32, v5);
            break;
          case 1:
            v159 = v17;
            v44 = v25;
            v45 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
            v45(v32, v5);
            v45((v166 + v32) & v165, v5);
            v25 = v44;
            v17 = v159;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v46 = (v172 + v32) & v171;
            (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v46, v175);
            (*(void (**)(uint64_t, uint64_t))(v176 + 8))((v174 + v46) & v25, v10);
            break;
          default:
            if (v17 <= 3)
              v33 = v17;
            else
              v33 = 4;
            __asm { BR              X12 }
            return result;
        }
        v47 = (a1 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
        v48 = *(unsigned __int8 *)(v47 + 24);
        if (v48 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v47 + 8), *(_QWORD *)(v47 + 16), v48);
        v49 = *(unsigned __int8 *)(v47 + 48);
        if (v49 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v47 + 32), *(_QWORD *)(v47 + 40), v49);
        break;
      default:
        if (v22 <= 3)
          v23 = v22;
        else
          v23 = 4;
        __asm { BR              X13 }
        return result;
    }
LABEL_86:
    switch(*((_BYTE *)a2 + v22))
    {
      case 0:
        v54 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = v54;
        *(_BYTE *)(a1 + v22) = 0;
        return a1;
      case 1:
        v55 = *a2;
        *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
        *(_OWORD *)a1 = v55;
        v56 = 1;
        goto LABEL_165;
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + v22) = 2;
        swift_retain();
        return a1;
      case 3:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_BYTE *)(a1 + v22) = 3;
        swift_retain();
        swift_retain();
        return a1;
      case 4:
        v161 = v25;
        v179 = v5;
        v57 = v10;
        v58 = *(_QWORD *)a2;
        v59 = *((_QWORD *)a2 + 1);
        v60 = *((_BYTE *)a2 + 16);
        sub_2141DD130(*(_QWORD *)a2, v59, v60);
        *(_QWORD *)a1 = v58;
        *(_QWORD *)(a1 + 8) = v59;
        *(_BYTE *)(a1 + 16) = v60;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v61 = (uint64_t)a2 + v14;
        v62 = (_QWORD *)((a1 + v14 + 32) & v24);
        v63 = (_QWORD *)((v61 + 32) & v24);
        v64 = *((unsigned __int8 *)v63 + v17);
        swift_bridgeObjectRetain();
        switch(v64)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16))(v62, v63, v179);
            *((_BYTE *)v62 + v17) = 0;
            v56 = 4;
            goto LABEL_165;
          case 1:
            v96 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16);
            v96(v62, v63, v179);
            v96((_QWORD *)(((unint64_t)v62 + v166) & v165), (_QWORD *)(((unint64_t)v63 + v166) & v165), v179);
            v97 = 1;
            goto LABEL_118;
          case 2:
            *v62 = *v63;
            *((_BYTE *)v62 + v17) = 2;
            goto LABEL_116;
          case 3:
            *v62 = *v63;
            v62[1] = v63[1];
            *((_BYTE *)v62 + v17) = 3;
            swift_retain();
LABEL_116:
            swift_retain();
            v56 = 4;
            break;
          case 4:
            *v62 = *v63;
            v98 = ((unint64_t)v62 + v172) & v171;
            v99 = ((unint64_t)v63 + v172) & v171;
            v100 = *(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 16);
            swift_retain();
            v100(v98, v99, v175);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v176 + 16))((v174 + v98) & v161, (v174 + v99) & v161, v57);
            v97 = 4;
LABEL_118:
            *((_BYTE *)v62 + v17) = v97;
            v56 = 4;
            break;
          default:
            if (v17 <= 3)
              v65 = v17;
            else
              v65 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_165;
      case 5:
        v162 = v25;
        v180 = v5;
        v66 = v10;
        v67 = *(_QWORD *)a2;
        v68 = *((_QWORD *)a2 + 1);
        v69 = *((_BYTE *)a2 + 16);
        sub_2141DD130(*(_QWORD *)a2, v68, v69);
        *(_QWORD *)a1 = v67;
        *(_QWORD *)(a1 + 8) = v68;
        *(_BYTE *)(a1 + 16) = v69;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v70 = (_QWORD *)((a1 + v14 + 32) & v24);
        v71 = (_QWORD *)(((unint64_t)a2 + v14 + 32) & v24);
        v72 = *((unsigned __int8 *)v71 + v17);
        swift_bridgeObjectRetain();
        v93 = v66;
        switch(v72)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16))(v70, v71, v180);
            *((_BYTE *)v70 + v17) = 0;
            goto LABEL_126;
          case 1:
            v101 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16);
            v101(v70, v71, v180);
            v101((_QWORD *)(((unint64_t)v70 + v166) & v165), (_QWORD *)(((unint64_t)v71 + v166) & v165), v180);
            v102 = 1;
            goto LABEL_125;
          case 2:
            *v70 = *v71;
            *((_BYTE *)v70 + v17) = 2;
            swift_retain();
            goto LABEL_126;
          case 3:
            *v70 = *v71;
            v70[1] = v71[1];
            *((_BYTE *)v70 + v17) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_126;
          case 4:
            *v70 = *v71;
            v103 = ((unint64_t)v70 + v172) & v171;
            v104 = ((unint64_t)v71 + v172) & v171;
            v105 = *(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 16);
            swift_retain();
            v105(v103, v104, v175);
            v106 = v174 + v103;
            v93 = v66;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v176 + 16))(v106 & v162, (v174 + v104) & v162, v66);
            v102 = 4;
LABEL_125:
            *((_BYTE *)v70 + v17) = v102;
LABEL_126:
            v107 = (v167 + a1) & v24;
            v108 = ((unint64_t)a2 + v167) & v24;
            v109 = *(_QWORD *)v108;
            v110 = *(_QWORD *)(v108 + 8);
            v111 = *(_BYTE *)(v108 + 16);
            sub_2141DD130(*(_QWORD *)v108, v110, v111);
            *(_QWORD *)v107 = v109;
            *(_QWORD *)(v107 + 8) = v110;
            *(_BYTE *)(v107 + 16) = v111;
            *(_QWORD *)(v107 + 24) = *(_QWORD *)(v108 + 24);
            v112 = (_QWORD *)((v168 + v107) & v24);
            v113 = (_QWORD *)((v168 + v108) & v24);
            v114 = *((unsigned __int8 *)v113 + v17);
            swift_bridgeObjectRetain();
            switch(v114)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16))(v112, v113, v180);
                *((_BYTE *)v112 + v17) = 0;
                break;
              case 1:
                v151 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16);
                v151(v112, v113, v180);
                v151((_QWORD *)(((unint64_t)v112 + v166) & v165), (_QWORD *)(((unint64_t)v113 + v166) & v165), v180);
                v152 = 1;
                goto LABEL_163;
              case 2:
                *v112 = *v113;
                *((_BYTE *)v112 + v17) = 2;
                goto LABEL_161;
              case 3:
                *v112 = *v113;
                v112[1] = v113[1];
                *((_BYTE *)v112 + v17) = 3;
                swift_retain();
LABEL_161:
                swift_retain();
                break;
              case 4:
                *v112 = *v113;
                v153 = ((unint64_t)v112 + v172) & v171;
                v154 = ((unint64_t)v113 + v172) & v171;
                v155 = *(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 16);
                swift_retain();
                v155(v153, v154, v175);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v176 + 16))((v174 + v153) & v162, (v174 + v154) & v162, v93);
                v152 = 4;
LABEL_163:
                *((_BYTE *)v112 + v17) = v152;
                break;
              default:
                if (v17 <= 3)
                  v115 = v17;
                else
                  v115 = 4;
                __asm { BR              X11 }
                return result;
            }
            v56 = 5;
            break;
          default:
            if (v17 <= 3)
              v73 = v17;
            else
              v73 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_165;
      case 6:
        v163 = v25;
        v169 = v22;
        v74 = v5;
        v75 = v10;
        v76 = *(_QWORD *)a2;
        v77 = *((_QWORD *)a2 + 1);
        v78 = *((_BYTE *)a2 + 16);
        sub_2141DD130(*(_QWORD *)a2, v77, v78);
        *(_QWORD *)a1 = v76;
        *(_QWORD *)(a1 + 8) = v77;
        *(_BYTE *)(a1 + 16) = v78;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v79 = (_QWORD *)((a1 + v14 + 32) & v24);
        v80 = (_QWORD *)(((unint64_t)a2 + v14 + 32) & v24);
        v81 = *((unsigned __int8 *)v80 + v17);
        swift_bridgeObjectRetain();
        v94 = v74;
        v22 = v169;
        switch(v81)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16))(v79, v80, v94);
            *((_BYTE *)v79 + v17) = 0;
            goto LABEL_138;
          case 1:
            v120 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16);
            v120(v79, v80, v94);
            v120((_QWORD *)(((unint64_t)v79 + v166) & v165), (_QWORD *)(((unint64_t)v80 + v166) & v165), v94);
            v119 = 1;
            goto LABEL_137;
          case 2:
            *v79 = *v80;
            *((_BYTE *)v79 + v17) = 2;
            swift_retain();
            goto LABEL_138;
          case 3:
            *v79 = *v80;
            v79[1] = v80[1];
            *((_BYTE *)v79 + v17) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_138;
          case 4:
            *v79 = *v80;
            v116 = ((unint64_t)v79 + v172) & v171;
            v117 = ((unint64_t)v80 + v172) & v171;
            v118 = *(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 16);
            swift_retain();
            v118(v116, v117, v175);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v176 + 16))((v174 + v116) & v163, (v174 + v117) & v163, v75);
            v119 = 4;
LABEL_137:
            *((_BYTE *)v79 + v17) = v119;
LABEL_138:
            v121 = (a1 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
            v122 = ((unint64_t)a2 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v121 = *(_BYTE *)v122;
            v123 = (_OWORD *)(v121 + 8);
            v124 = (_OWORD *)(v122 + 8);
            if (*(unsigned __int8 *)(v122 + 96) == 255)
            {
              v130 = *(_OWORD *)(v122 + 24);
              *v123 = *v124;
              *(_OWORD *)(v121 + 24) = v130;
              v131 = *(_OWORD *)(v122 + 40);
              v132 = *(_OWORD *)(v122 + 56);
              v133 = *(_OWORD *)(v122 + 72);
              *(_OWORD *)(v121 + 81) = *(_OWORD *)(v122 + 81);
              *(_OWORD *)(v121 + 56) = v132;
              *(_OWORD *)(v121 + 72) = v133;
              *(_OWORD *)(v121 + 40) = v131;
            }
            else
            {
              *v123 = *v124;
              v125 = *(_OWORD *)(v122 + 24);
              v126 = *(_OWORD *)(v122 + 40);
              v127 = *(_OWORD *)(v122 + 72);
              *(_OWORD *)(v121 + 56) = *(_OWORD *)(v122 + 56);
              *(_OWORD *)(v121 + 72) = v127;
              *(_OWORD *)(v121 + 24) = v125;
              *(_OWORD *)(v121 + 40) = v126;
              v128 = *(_QWORD *)(v122 + 88);
              v129 = *(_BYTE *)(v122 + 96);
              sub_2142625F8(v128, v129);
              *(_QWORD *)(v121 + 88) = v128;
              *(_BYTE *)(v121 + 96) = v129;
            }
            v134 = *(_QWORD *)(v122 + 104);
            v135 = *(_BYTE *)(v122 + 112);
            sub_2142625F8(v134, v135);
            *(_QWORD *)(v121 + 104) = v134;
            *(_BYTE *)(v121 + 112) = v135;
            v56 = 6;
            break;
          default:
            if (v17 <= 3)
              v82 = v17;
            else
              v82 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_165;
      case 7:
        v164 = v25;
        v170 = v22;
        v83 = v5;
        v84 = v17;
        v85 = v10;
        v86 = *(_QWORD *)a2;
        v87 = *((_QWORD *)a2 + 1);
        v88 = *((_BYTE *)a2 + 16);
        sub_2141DD130(*(_QWORD *)a2, v87, v88);
        *(_QWORD *)a1 = v86;
        *(_QWORD *)(a1 + 8) = v87;
        *(_BYTE *)(a1 + 16) = v88;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        v89 = (_QWORD *)((a1 + v14 + 32) & v24);
        v90 = (_QWORD *)(((unint64_t)a2 + v14 + 32) & v24);
        v91 = *((unsigned __int8 *)v90 + v84);
        swift_bridgeObjectRetain();
        v95 = v83;
        v22 = v170;
        switch(v91)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16))(v89, v90, v95);
            *((_BYTE *)v89 + v84) = 0;
            goto LABEL_149;
          case 1:
            v136 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16);
            v136(v89, v90, v95);
            v136((_QWORD *)(((unint64_t)v89 + v166) & v165), (_QWORD *)(((unint64_t)v90 + v166) & v165), v95);
            v137 = 1;
            goto LABEL_148;
          case 2:
            *v89 = *v90;
            *((_BYTE *)v89 + v84) = 2;
            swift_retain();
            goto LABEL_149;
          case 3:
            *v89 = *v90;
            v89[1] = v90[1];
            *((_BYTE *)v89 + v84) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_149;
          case 4:
            *v89 = *v90;
            v138 = ((unint64_t)v89 + v172) & v171;
            v139 = ((unint64_t)v90 + v172) & v171;
            v140 = *(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 16);
            swift_retain();
            v140(v138, v139, v175);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v176 + 16))((v174 + v138) & v164, (v174 + v139) & v164, v85);
            v137 = 4;
LABEL_148:
            *((_BYTE *)v89 + v84) = v137;
LABEL_149:
            v141 = (a1 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
            v142 = ((unint64_t)a2 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v141 = *(_BYTE *)v142;
            *(_BYTE *)(v141 + 1) = *(_BYTE *)(v142 + 1);
            *(_BYTE *)(v141 + 2) = *(_BYTE *)(v142 + 2);
            v143 = *(unsigned __int8 *)(v142 + 24);
            if (v143 <= 0xFB)
            {
              v145 = *(_QWORD *)(v142 + 8);
              v146 = *(_QWORD *)(v142 + 16);
              sub_2141DD140(v145, v146, *(_BYTE *)(v142 + 24));
              *(_QWORD *)(v141 + 8) = v145;
              *(_QWORD *)(v141 + 16) = v146;
              *(_BYTE *)(v141 + 24) = v143;
            }
            else
            {
              v144 = *(_OWORD *)(v142 + 8);
              *(_BYTE *)(v141 + 24) = *(_BYTE *)(v142 + 24);
              *(_OWORD *)(v141 + 8) = v144;
            }
            v147 = *(unsigned __int8 *)(v142 + 48);
            if (v147 <= 0xFB)
            {
              v149 = *(_QWORD *)(v142 + 32);
              v150 = *(_QWORD *)(v142 + 40);
              sub_2141DD140(v149, v150, *(_BYTE *)(v142 + 48));
              *(_QWORD *)(v141 + 32) = v149;
              *(_QWORD *)(v141 + 40) = v150;
              *(_BYTE *)(v141 + 48) = v147;
            }
            else
            {
              v148 = *(_OWORD *)(v142 + 32);
              *(_BYTE *)(v141 + 48) = *(_BYTE *)(v142 + 48);
              *(_OWORD *)(v141 + 32) = v148;
            }
            v56 = 7;
            break;
          default:
            if (v84 <= 3)
              v92 = v84;
            else
              v92 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_165:
        *(_BYTE *)(a1 + v22) = v56;
        break;
      default:
        if (v22 <= 3)
          v53 = v22;
        else
          v53 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

uint64_t sub_2143CD688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;
  void (*v56)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void (*v62)(unint64_t, unint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void (*v71)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  __int128 v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  void (*v80)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  void (*v87)(unint64_t, unint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  void (*v93)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void (*v106)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  char v110;
  void (*v111)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void (*v118)(unint64_t, unint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  char v130;
  void (*v131)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t result;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v155 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v155 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v154 = sub_214423C48();
  v7 = *(_QWORD *)(v154 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = sub_214423C54();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 | v11 | v6;
  v13 = v12 | 7;
  v14 = v12 + 32;
  v15 = (v12 + 32) & ~(v12 | 7);
  v16 = *(_QWORD *)(v5 + 64);
  v17 = v16 + v6;
  if (((v16 + v6) & ~v6) + v16 > v16)
    v16 += (v16 + v6) & ~v6;
  v18 = v8 + 8;
  v19 = *(_QWORD *)(v7 + 64) + v11;
  if (v16 <= ((v19 + ((v8 + 8) & ~v8)) & (unint64_t)~v11) + *(_QWORD *)(v10 + 64))
    v16 = ((v19 + ((v8 + 8) & ~v8)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v16 <= 0x10)
    v20 = 16;
  else
    v20 = v16;
  v21 = v20 + v15;
  v22 = v21 + 1;
  v23 = v21 + 1 + v13;
  v24 = (v23 & ~v13) + v21 + 1;
  if (v21 + 1 > v24)
    v24 = v21 + 1;
  v25 = (v21 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v24 <= v25 + 113)
    v24 = v25 + 113;
  v26 = v25 + 49;
  if (v24 > v26)
    v26 = v24;
  if (v26 <= 0x19)
    v27 = 25;
  else
    v27 = v26;
  v29 = ~v13;
  v30 = ~v6;
  v31 = ~v8;
  v32 = ~v11;
  switch(*(_BYTE *)(a2 + v27))
  {
    case 0:
      v33 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      break;
    case 1:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      v33 = 1;
      break;
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v33 = 2;
      break;
    case 3:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v33 = 3;
      break;
    case 4:
      v34 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v34;
      v35 = a1 + v13;
      v36 = a2 + v13;
      v37 = (_QWORD *)((v35 + 32) & v29);
      v38 = (_QWORD *)((v36 + 32) & v29);
      switch(*((_BYTE *)v38 + v20))
      {
        case 0:
          v52 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v53 = v27;
          v54 = v20;
          v52(v37, v38, v155);
          v20 = v54;
          v27 = v53;
          v55 = 0;
          break;
        case 1:
          v56 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v57 = v27;
          v58 = v20;
          v59 = v17;
          v56(v37, v38, v155);
          v56((_QWORD *)(((unint64_t)v37 + v59) & v30), (_QWORD *)(((unint64_t)v38 + v59) & v30), v155);
          v20 = v58;
          v27 = v57;
          v55 = 1;
          break;
        case 2:
          *v37 = *v38;
          v55 = 2;
          break;
        case 3:
          *(_OWORD *)v37 = *(_OWORD *)v38;
          v55 = 3;
          break;
        case 4:
          *v37 = *v38;
          v60 = ((unint64_t)v37 + v18) & v31;
          v61 = ((unint64_t)v38 + v18) & v31;
          v62 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32);
          v63 = v9;
          v64 = v10;
          v65 = v19;
          v66 = v27;
          v67 = v20;
          v62(v60, v61, v154);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v64 + 32))((v65 + v60) & v32, (v65 + v61) & v32, v63);
          v20 = v67;
          v27 = v66;
          v55 = 4;
          break;
        default:
          if (v20 <= 3)
            v39 = v20;
          else
            v39 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v37 + v20) = v55;
      v33 = 4;
      break;
    case 5:
      v40 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v40;
      v41 = (_QWORD *)((a1 + v13 + 32) & v29);
      v42 = (_QWORD *)((a2 + v13 + 32) & v29);
      v140 = v30;
      v141 = v17;
      v142 = v19;
      v143 = v10;
      v146 = v9;
      v149 = v27;
      v144 = v18;
      v145 = v31;
      switch(*((_BYTE *)v42 + v20))
      {
        case 0:
          v68 = v20;
          v69 = (a1 + v13 + 32) & v29;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 32))(v41, (a2 + v13 + 32) & v29, v155);
          v41 = (_QWORD *)v69;
          v20 = v68;
          v70 = 0;
          break;
        case 1:
          v71 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v136 = v20;
          v138 = (a1 + v13 + 32) & v29;
          v71(v41, v42, v155);
          v71((_QWORD *)((v141 + v138) & v140), (_QWORD *)(((unint64_t)v42 + v141) & v140), v155);
          v20 = v136;
          v41 = (_QWORD *)v138;
          v70 = 1;
          break;
        case 2:
          *v41 = *v42;
          v70 = 2;
          break;
        case 3:
          *(_OWORD *)v41 = *(_OWORD *)v42;
          v70 = 3;
          break;
        case 4:
          *v41 = *v42;
          v72 = ((unint64_t)v41 + v18) & v31;
          v73 = ((unint64_t)v42 + v18) & v31;
          v137 = v20;
          v139 = (a1 + v13 + 32) & v29;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v72, v73, v154);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v143 + 32))((v142 + v72) & v32, (v142 + v73) & v32, v146);
          v20 = v137;
          v41 = (_QWORD *)v139;
          v70 = 4;
          break;
        default:
          if (v20 <= 3)
            v43 = v20;
          else
            v43 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v41 + v20) = v70;
      v74 = (_OWORD *)((v23 + a1) & v29);
      v75 = (_OWORD *)((v23 + a2) & v29);
      v76 = v75[1];
      *v74 = *v75;
      v74[1] = v76;
      v77 = (_QWORD *)(((unint64_t)v74 + v14) & v29);
      v78 = (_QWORD *)(((unint64_t)v75 + v14) & v29);
      switch(*((_BYTE *)v78 + v20))
      {
        case 0:
          v129 = v20;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v77, v78, v155);
          v20 = v129;
          v130 = 0;
          break;
        case 1:
          v131 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v132 = v20;
          v131(v77, v78, v155);
          v131((_QWORD *)(((unint64_t)v77 + v141) & v140), (_QWORD *)(((unint64_t)v78 + v141) & v140), v155);
          v20 = v132;
          v130 = 1;
          break;
        case 2:
          *v77 = *v78;
          v130 = 2;
          break;
        case 3:
          *(_OWORD *)v77 = *(_OWORD *)v78;
          v130 = 3;
          break;
        case 4:
          *v77 = *v78;
          v133 = ((unint64_t)v78 + v144) & v145;
          v134 = v20;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v77 + v144) & v145, v133, v154);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v143 + 32))((v142 + (((unint64_t)v77 + v144) & v145)) & v32, (v142 + v133) & v32, v146);
          v20 = v134;
          v130 = 4;
          break;
        default:
          if (v20 <= 3)
            v79 = v20;
          else
            v79 = 4;
          __asm { BR              X12 }
          return result;
      }
      v27 = v149;
      *((_BYTE *)v77 + v20) = v130;
      v33 = 5;
      break;
    case 6:
      v44 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v44;
      v45 = (_QWORD *)((a1 + v13 + 32) & v29);
      v46 = (_QWORD *)((a2 + v13 + 32) & v29);
      switch(*((_BYTE *)v46 + v20))
      {
        case 0:
          v80 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v81 = v27;
          v82 = v20;
          v83 = v45;
          v80(v45, v46, v155);
          v45 = v83;
          v20 = v82;
          v27 = v81;
          v84 = 0;
          break;
        case 1:
          v93 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v151 = v27;
          v94 = v20;
          v95 = v30;
          v96 = v17;
          v97 = (a1 + v13 + 32) & v29;
          v93(v45, v46, v155);
          v93((_QWORD *)((v96 + v97) & v95), (_QWORD *)(((unint64_t)v46 + v96) & v95), v155);
          v45 = (_QWORD *)v97;
          v20 = v94;
          v27 = v151;
          v84 = 1;
          break;
        case 2:
          *v45 = *v46;
          v84 = 2;
          break;
        case 3:
          *(_OWORD *)v45 = *(_OWORD *)v46;
          v84 = 3;
          break;
        case 4:
          *v45 = *v46;
          v85 = ((unint64_t)v45 + v18) & v31;
          v86 = ((unint64_t)v46 + v18) & v31;
          v87 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32);
          v147 = v9;
          v150 = v27;
          v88 = v10;
          v89 = ~v11;
          v90 = v19;
          v91 = v20;
          v92 = v45;
          v87(v85, v86, v154);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 32))((v90 + v85) & v89, (v90 + v86) & v89, v147);
          v45 = v92;
          v20 = v91;
          v27 = v150;
          v84 = 4;
          break;
        default:
          if (v20 <= 3)
            v47 = v20;
          else
            v47 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v45 + v20) = v84;
      v98 = (a1 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v99 = (a2 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v100 = *(_OWORD *)v99;
      v101 = *(_OWORD *)(v99 + 16);
      v102 = *(_OWORD *)(v99 + 48);
      *(_OWORD *)(v98 + 32) = *(_OWORD *)(v99 + 32);
      *(_OWORD *)(v98 + 48) = v102;
      *(_OWORD *)v98 = v100;
      *(_OWORD *)(v98 + 16) = v101;
      v103 = *(_OWORD *)(v99 + 64);
      v104 = *(_OWORD *)(v99 + 80);
      v105 = *(_OWORD *)(v99 + 96);
      *(_BYTE *)(v98 + 112) = *(_BYTE *)(v99 + 112);
      *(_OWORD *)(v98 + 80) = v104;
      *(_OWORD *)(v98 + 96) = v105;
      *(_OWORD *)(v98 + 64) = v103;
      v33 = 6;
      break;
    case 7:
      v48 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v48;
      v49 = (_QWORD *)((a1 + v13 + 32) & v29);
      v50 = (_QWORD *)((a2 + v13 + 32) & v29);
      switch(*((_BYTE *)v50 + v20))
      {
        case 0:
          v106 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v107 = v27;
          v108 = v20;
          v109 = v49;
          v106(v49, v50, v155);
          v49 = v109;
          v20 = v108;
          v27 = v107;
          v110 = 0;
          break;
        case 1:
          v111 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
          v152 = v27;
          v112 = v20;
          v113 = v30;
          v114 = v17;
          v115 = (a1 + v13 + 32) & v29;
          v111(v49, v50, v155);
          v111((_QWORD *)((v114 + v115) & v113), (_QWORD *)(((unint64_t)v50 + v114) & v113), v155);
          v49 = (_QWORD *)v115;
          v20 = v112;
          v27 = v152;
          v110 = 1;
          break;
        case 2:
          *v49 = *v50;
          v110 = 2;
          break;
        case 3:
          *(_OWORD *)v49 = *(_OWORD *)v50;
          v110 = 3;
          break;
        case 4:
          *v49 = *v50;
          v116 = ((unint64_t)v49 + v18) & v31;
          v117 = ((unint64_t)v50 + v18) & v31;
          v118 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32);
          v148 = v9;
          v153 = v27;
          v119 = v10;
          v120 = ~v11;
          v121 = v19;
          v122 = v20;
          v123 = v49;
          v118(v116, v117, v154);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v119 + 32))((v121 + v116) & v120, (v121 + v117) & v120, v148);
          v49 = v123;
          v20 = v122;
          v27 = v153;
          v110 = 4;
          break;
        default:
          if (v20 <= 3)
            v51 = v20;
          else
            v51 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v49 + v20) = v110;
      v124 = (a1 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v125 = (a2 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v126 = *(_OWORD *)v125;
      v127 = *(_OWORD *)(v125 + 16);
      v128 = *(_OWORD *)(v125 + 32);
      *(_BYTE *)(v124 + 48) = *(_BYTE *)(v125 + 48);
      *(_OWORD *)(v124 + 16) = v127;
      *(_OWORD *)(v124 + 32) = v128;
      *(_OWORD *)v124 = v126;
      v33 = 7;
      break;
    default:
      if (v27 <= 3)
        v28 = v27;
      else
        v28 = 4;
      __asm { BR              X14 }
      return result;
  }
  *(_BYTE *)(a1 + v27) = v33;
  return a1;
}

uint64_t sub_2143CE1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  unint64_t v38;
  int v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  __int128 v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  void (*v67)(uint64_t, _QWORD *, uint64_t);
  unint64_t v68;
  char v69;
  void (*v70)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v71;
  _OWORD *v72;
  _OWORD *v73;
  __int128 v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  void (*v80)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;
  void (*v90)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char v97;
  void (*v98)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v99;
  uint64_t result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  if (a1 != a2)
  {
    v113 = *(_QWORD *)(a3 + 24);
    v5 = *(_QWORD *)(v113 - 8);
    v6 = *(unsigned __int8 *)(v5 + 80);
    v110 = sub_214423C48();
    v7 = *(_QWORD *)(v110 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v112 = sub_214423C54();
    v9 = *(_QWORD *)(v112 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = v8 | v10 | v6;
    v12 = v11 | 7;
    v104 = v11 + 32;
    v13 = (v11 + 32) & ~(v11 | 7);
    v14 = *(_QWORD *)(v5 + 64);
    v102 = v14 + v6;
    if (((v14 + v6) & ~v6) + v14 > v14)
      v14 += (v14 + v6) & ~v6;
    v107 = v8 + 8;
    v108 = v7;
    v109 = *(_QWORD *)(v7 + 64) + v10;
    v111 = *(_QWORD *)(v112 - 8);
    if (v14 <= ((v109 + ((v8 + 8) & ~v8)) & (unint64_t)~v10) + *(_QWORD *)(v9 + 64))
      v14 = ((v109 + ((v8 + 8) & ~v8)) & ~v10) + *(_QWORD *)(v9 + 64);
    if (v14 <= 0x10)
      v15 = 16;
    else
      v15 = v14;
    v16 = v15 + v13;
    v17 = v16 + 1;
    v103 = v16 + 1 + v12;
    v18 = (v103 & ~v12) + v16 + 1;
    if (v16 + 1 > v18)
      v18 = v16 + 1;
    v19 = (v16 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v18 <= v19 + 113)
      v18 = v19 + 113;
    v20 = v19 + 49;
    if (v18 > v20)
      v20 = v18;
    if (v20 <= 0x19)
      v21 = 25;
    else
      v21 = v20;
    v23 = ~v12;
    v101 = ~v6;
    v105 = ~v8;
    v106 = ~v10;
    switch(*(_BYTE *)(a1 + v21))
    {
      case 0:
      case 1:
        break;
      case 2:
LABEL_23:
        swift_release();
        break;
      case 3:
LABEL_24:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v24 = (a1 + v12 + 32) & v23;
        switch(*(_BYTE *)(v24 + v15))
        {
          case 0:
            goto LABEL_78;
          case 1:
            goto LABEL_79;
          case 2:
            goto LABEL_23;
          case 3:
            goto LABEL_24;
          case 4:
            goto LABEL_80;
          default:
            if (v15 <= 3)
              v25 = v15;
            else
              v25 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v26 = (a1 + v12 + 32) & v23;
        switch(*(_BYTE *)(v26 + v15))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v26, v113);
            break;
          case 1:
            v32 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
            v32(v26, v113);
            v32((v102 + v26) & v101, v113);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v33 = (v107 + v26) & v105;
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v33, v110);
            (*(void (**)(uint64_t, uint64_t))(v111 + 8))((v109 + v33) & v106, v112);
            break;
          default:
            if (v15 <= 3)
              v27 = v15;
            else
              v27 = 4;
            __asm { BR              X12 }
            return result;
        }
        v34 = (v103 + a1) & v23;
        sub_2141ED0BC(*(_QWORD *)v34, *(_QWORD *)(v34 + 8), *(_BYTE *)(v34 + 0x10));
        swift_bridgeObjectRelease();
        v24 = (v104 + v34) & v23;
        switch(*(_BYTE *)(v24 + v15))
        {
          case 0:
LABEL_78:
            (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v113);
            goto LABEL_86;
          case 1:
LABEL_79:
            v45 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
            v45(v24, v113);
            v45((v102 + v24) & v101, v113);
            goto LABEL_86;
          case 2:
            goto LABEL_23;
          case 3:
            goto LABEL_24;
          case 4:
LABEL_80:
            swift_release();
            v46 = (v107 + v24) & v105;
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v46, v110);
            (*(void (**)(uint64_t, uint64_t))(v111 + 8))((v109 + v46) & v106, v112);
            goto LABEL_86;
          default:
            if (v15 <= 3)
              v35 = v15;
            else
              v35 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v28 = (a1 + v12 + 32) & v23;
        switch(*(_BYTE *)(v28 + v15))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v28, v113);
            break;
          case 1:
            v37 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
            v37(v28, v113);
            v37((v102 + v28) & v101, v113);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v36 = (v107 + v28) & v105;
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v36, v110);
            (*(void (**)(uint64_t, uint64_t))(v111 + 8))((v109 + v36) & v106, v112);
            break;
          default:
            if (v15 <= 3)
              v29 = v15;
            else
              v29 = 4;
            __asm { BR              X12 }
            return result;
        }
        v38 = (a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
        v39 = *(unsigned __int8 *)(v38 + 96);
        if (v39 != 255)
          sub_2142637C0(*(_QWORD *)(v38 + 88), v39 & 1);
        sub_2142637C0(*(_QWORD *)(v38 + 104), *(_BYTE *)(v38 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        swift_bridgeObjectRelease();
        v30 = (a1 + v12 + 32) & v23;
        switch(*(_BYTE *)(v30 + v15))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v30, v113);
            break;
          case 1:
            v40 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
            v40(v30, v113);
            v40((v102 + v30) & v101, v113);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v41 = (v107 + v30) & v105;
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v41, v110);
            (*(void (**)(uint64_t, uint64_t))(v111 + 8))((v109 + v41) & v106, v112);
            break;
          default:
            if (v15 <= 3)
              v31 = v15;
            else
              v31 = 4;
            __asm { BR              X12 }
            return result;
        }
        v42 = (a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
        v43 = *(unsigned __int8 *)(v42 + 24);
        if (v43 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v42 + 8), *(_QWORD *)(v42 + 16), v43);
        v44 = *(unsigned __int8 *)(v42 + 48);
        if (v44 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v42 + 32), *(_QWORD *)(v42 + 40), v44);
        break;
      default:
        if (v21 <= 3)
          v22 = v21;
        else
          v22 = 4;
        __asm { BR              X13 }
        return result;
    }
LABEL_86:
    switch(*(_BYTE *)(a2 + v21))
    {
      case 0:
        v48 = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        break;
      case 1:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        v48 = 1;
        break;
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v48 = 2;
        break;
      case 3:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v48 = 3;
        break;
      case 4:
        v49 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v49;
        v50 = a2 + v12;
        v51 = (_QWORD *)((a1 + v12 + 32) & v23);
        v52 = (_QWORD *)((v50 + 32) & v23);
        switch(*((_BYTE *)v52 + v15))
        {
          case 0:
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(v5 + 32))((a1 + v12 + 32) & v23, v52, v113);
            v66 = 0;
            break;
          case 1:
            v67 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v5 + 32);
            v67((a1 + v12 + 32) & v23, v52, v113);
            v67(((unint64_t)v51 + v102) & v101, (_QWORD *)(((unint64_t)v52 + v102) & v101), v113);
            v66 = 1;
            break;
          case 2:
            *v51 = *v52;
            v66 = 2;
            break;
          case 3:
            *(_OWORD *)v51 = *(_OWORD *)v52;
            v66 = 3;
            break;
          case 4:
            *v51 = *v52;
            v68 = ((unint64_t)v52 + v107) & v105;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v108 + 32))(((unint64_t)v51 + v107) & v105, v68, v110);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v111 + 32))((v109 + (((unint64_t)v51 + v107) & v105)) & v106, (v109 + v68) & v106, v112);
            v66 = 4;
            break;
          default:
            if (v15 <= 3)
              v53 = v15;
            else
              v53 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)v51 + v15) = v66;
        v48 = 4;
        break;
      case 5:
        v54 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v54;
        v55 = (_QWORD *)((a1 + v12 + 32) & v23);
        v56 = (_QWORD *)((a2 + v12 + 32) & v23);
        switch(*((_BYTE *)v56 + v15))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v55, v56, v113);
            v69 = 0;
            break;
          case 1:
            v70 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
            v70(v55, v56, v113);
            v70((_QWORD *)(((unint64_t)v55 + v102) & v101), (_QWORD *)(((unint64_t)v56 + v102) & v101), v113);
            v69 = 1;
            break;
          case 2:
            *v55 = *v56;
            v69 = 2;
            break;
          case 3:
            *(_OWORD *)v55 = *(_OWORD *)v56;
            v69 = 3;
            break;
          case 4:
            *v55 = *v56;
            v71 = ((unint64_t)v56 + v107) & v105;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v108 + 32))(((unint64_t)v55 + v107) & v105, v71, v110);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v111 + 32))((v109 + (((unint64_t)v55 + v107) & v105)) & v106, (v109 + v71) & v106, v112);
            v69 = 4;
            break;
          default:
            if (v15 <= 3)
              v57 = v15;
            else
              v57 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)v55 + v15) = v69;
        v72 = (_OWORD *)((v103 + a1) & v23);
        v73 = (_OWORD *)((v103 + a2) & v23);
        v74 = v73[1];
        *v72 = *v73;
        v72[1] = v74;
        v75 = (_QWORD *)(((unint64_t)v72 + v104) & v23);
        v76 = (_QWORD *)(((unint64_t)v73 + v104) & v23);
        switch(*((_BYTE *)v76 + v15))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v75, v76, v113);
            v97 = 0;
            break;
          case 1:
            v98 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
            v98(v75, v76, v113);
            v98((_QWORD *)(((unint64_t)v75 + v102) & v101), (_QWORD *)(((unint64_t)v76 + v102) & v101), v113);
            v97 = 1;
            break;
          case 2:
            *v75 = *v76;
            v97 = 2;
            break;
          case 3:
            *(_OWORD *)v75 = *(_OWORD *)v76;
            v97 = 3;
            break;
          case 4:
            *v75 = *v76;
            v99 = ((unint64_t)v76 + v107) & v105;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v108 + 32))(((unint64_t)v75 + v107) & v105, v99, v110);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v111 + 32))((v109 + (((unint64_t)v75 + v107) & v105)) & v106, (v109 + v99) & v106, v112);
            v97 = 4;
            break;
          default:
            if (v15 <= 3)
              v77 = v15;
            else
              v77 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)v75 + v15) = v97;
        v48 = 5;
        break;
      case 6:
        v58 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v58;
        v59 = (_QWORD *)((a1 + v12 + 32) & v23);
        v60 = (_QWORD *)((a2 + v12 + 32) & v23);
        switch(*((_BYTE *)v60 + v15))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v59, v60, v113);
            v78 = 0;
            break;
          case 1:
            v80 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
            v80(v59, v60, v113);
            v80((_QWORD *)(((unint64_t)v59 + v102) & v101), (_QWORD *)(((unint64_t)v60 + v102) & v101), v113);
            v78 = 1;
            break;
          case 2:
            *v59 = *v60;
            v78 = 2;
            break;
          case 3:
            *(_OWORD *)v59 = *(_OWORD *)v60;
            v78 = 3;
            break;
          case 4:
            *v59 = *v60;
            v79 = ((unint64_t)v60 + v107) & v105;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v108 + 32))(((unint64_t)v59 + v107) & v105, v79, v110);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v111 + 32))((v109 + (((unint64_t)v59 + v107) & v105)) & v106, (v109 + v79) & v106, v112);
            v78 = 4;
            break;
          default:
            if (v15 <= 3)
              v61 = v15;
            else
              v61 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)v59 + v15) = v78;
        v81 = (a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
        v82 = (a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
        v83 = *(_OWORD *)v82;
        v84 = *(_OWORD *)(v82 + 16);
        v85 = *(_OWORD *)(v82 + 48);
        *(_OWORD *)(v81 + 32) = *(_OWORD *)(v82 + 32);
        *(_OWORD *)(v81 + 48) = v85;
        *(_OWORD *)v81 = v83;
        *(_OWORD *)(v81 + 16) = v84;
        v86 = *(_OWORD *)(v82 + 64);
        v87 = *(_OWORD *)(v82 + 80);
        v88 = *(_OWORD *)(v82 + 96);
        *(_BYTE *)(v81 + 112) = *(_BYTE *)(v82 + 112);
        *(_OWORD *)(v81 + 80) = v87;
        *(_OWORD *)(v81 + 96) = v88;
        *(_OWORD *)(v81 + 64) = v86;
        v48 = 6;
        break;
      case 7:
        v62 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v62;
        v63 = (_QWORD *)((a1 + v12 + 32) & v23);
        v64 = (_QWORD *)((a2 + v12 + 32) & v23);
        switch(*((_BYTE *)v64 + v15))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v63, v64, v113);
            v89 = 0;
            break;
          case 1:
            v90 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
            v90(v63, v64, v113);
            v90((_QWORD *)(((unint64_t)v63 + v102) & v101), (_QWORD *)(((unint64_t)v64 + v102) & v101), v113);
            v89 = 1;
            break;
          case 2:
            *v63 = *v64;
            v89 = 2;
            break;
          case 3:
            *(_OWORD *)v63 = *(_OWORD *)v64;
            v89 = 3;
            break;
          case 4:
            *v63 = *v64;
            v91 = ((unint64_t)v64 + v107) & v105;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v108 + 32))(((unint64_t)v63 + v107) & v105, v91, v110);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v111 + 32))((v109 + (((unint64_t)v63 + v107) & v105)) & v106, (v109 + v91) & v106, v112);
            v89 = 4;
            break;
          default:
            if (v15 <= 3)
              v65 = v15;
            else
              v65 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)v63 + v15) = v89;
        v92 = (a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
        v93 = (a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
        v94 = *(_OWORD *)v93;
        v95 = *(_OWORD *)(v93 + 16);
        v96 = *(_OWORD *)(v93 + 32);
        *(_BYTE *)(v92 + 48) = *(_BYTE *)(v93 + 48);
        *(_OWORD *)(v92 + 16) = v95;
        *(_OWORD *)(v92 + 32) = v96;
        *(_OWORD *)v92 = v94;
        v48 = 7;
        break;
      default:
        if (v21 <= 3)
          v47 = v21;
        else
          v47 = 4;
        __asm { BR              X12 }
        return result;
    }
    *(_BYTE *)(a1 + v21) = v48;
  }
  return a1;
}

uint64_t sub_2143CF3A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v25;
  int v26;
  unsigned int v27;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(sub_214423C48() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(sub_214423C54() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 | v10 | v6;
  v12 = v11 | 7;
  v13 = (v11 + 32) & ~(v11 | 7);
  v14 = *(_QWORD *)(v5 + 64);
  if (((v14 + v6) & ~v6) + v14 > v14)
    v14 += (v14 + v6) & ~v6;
  v15 = ((*(_QWORD *)(v7 + 64) + v10 + ((v8 + 8) & ~v8)) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v14 > v15)
    v15 = v14;
  if (v15 <= 0x10)
    v15 = 16;
  v16 = v15 + v13;
  if (v16 + 1 > ((v16 + 1 + v12) & ~v12) + v16 + 1)
    v17 = v16 + 1;
  else
    v17 = ((v16 + 1 + v12) & ~v12) + v16 + 1;
  v18 = (v16 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v17 <= v18 + 113)
    v17 = v18 + 113;
  v19 = v18 + 49;
  if (v17 > v19)
    v19 = v17;
  v20 = 25;
  if (v19 > 0x19)
    v20 = v19;
  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_34;
  v21 = v20 + 1;
  v22 = 8 * (v20 + 1);
  if ((v20 + 1) <= 3)
  {
    v25 = ((a2 + ~(-1 << v22) - 248) >> v22) + 1;
    if (HIWORD(v25))
    {
      v23 = *(_DWORD *)(a1 + v21);
      if (!v23)
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v25 > 0xFF)
    {
      v23 = *(unsigned __int16 *)(a1 + v21);
      if (!*(_WORD *)(a1 + v21))
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v25 < 2)
    {
LABEL_34:
      v27 = *(unsigned __int8 *)(a1 + v20);
      if (v27 >= 8)
        return (v27 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v23 = *(unsigned __int8 *)(a1 + v21);
  if (!*(_BYTE *)(a1 + v21))
    goto LABEL_34;
LABEL_27:
  v26 = (v23 - 1) << v22;
  if (v21 > 3)
    v26 = 0;
  if ((_DWORD)v21)
  {
    if (v21 > 3)
      LODWORD(v21) = 4;
    __asm { BR              X11 }
  }
  return (v26 + 249);
}

void sub_2143CF59C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(sub_214423C48() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(sub_214423C54() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v10 | v12 | v8;
  v14 = v13 | 7;
  v15 = (v13 + 32) & ~(v13 | 7);
  v16 = *(_QWORD *)(v7 + 64);
  if (((v16 + v8) & ~v8) + v16 > v16)
    v16 += (v16 + v8) & ~v8;
  v17 = ((*(_QWORD *)(v9 + 64) + v12 + ((v10 + 8) & ~v10)) & ~v12) + *(_QWORD *)(v11 + 64);
  if (v16 > v17)
    v17 = v16;
  if (v17 <= 0x10)
    v17 = 16;
  v18 = v17 + v15;
  if (v18 + 1 > ((v18 + 1 + v14) & ~v14) + v18 + 1)
    v19 = v18 + 1;
  else
    v19 = ((v18 + 1 + v14) & ~v14) + v18 + 1;
  v20 = (v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v19 <= v20 + 113)
    v19 = v20 + 113;
  v21 = v20 + 49;
  if (v19 > v21)
    v21 = v19;
  if (v21 <= 0x19)
    v21 = 25;
  v22 = v21 + 1;
  if (a3 < 0xF9)
  {
    v23 = 0;
  }
  else if (v22 <= 3)
  {
    v25 = ((a3 + ~(-1 << (8 * v22)) - 248) >> (8 * v22)) + 1;
    if (HIWORD(v25))
    {
      v23 = 4u;
    }
    else if (v25 >= 0x100)
    {
      v23 = 2;
    }
    else
    {
      v23 = v25 > 1;
    }
  }
  else
  {
    v23 = 1u;
  }
  if (a2 <= 0xF8)
    __asm { BR              X11 }
  v24 = a2 - 249;
  if (v22 < 4)
  {
    if ((_DWORD)v21 != -1)
    {
      v26 = v24 & ~(-1 << (8 * v22));
      bzero(a1, v22);
      if ((_DWORD)v22 == 3)
      {
        *(_WORD *)a1 = v26;
        a1[2] = BYTE2(v26);
      }
      else if ((_DWORD)v22 == 2)
      {
        *(_WORD *)a1 = v26;
      }
      else
      {
        *a1 = v26;
      }
    }
  }
  else
  {
    bzero(a1, v21 + 1);
    *(_DWORD *)a1 = v24;
  }
  __asm { BR              X10 }
}

uint64_t sub_2143CF810(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(sub_214423C48() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(sub_214423C54() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 | v8 | v4;
  v10 = v9 | 7;
  v11 = (v9 + 32) & ~(v9 | 7);
  v12 = *(_QWORD *)(v3 + 64);
  if (((v12 + v4) & ~v4) + v12 > v12)
    v12 += (v12 + v4) & ~v4;
  v13 = ((*(_QWORD *)(v5 + 64) + v8 + ((v6 + 8) & ~v6)) & ~v8) + *(_QWORD *)(v7 + 64);
  if (v12 > v13)
    v13 = v12;
  if (v13 <= 0x10)
    v13 = 16;
  v14 = v13 + v11;
  if (v14 + 1 > ((v14 + 1 + v10) & ~v10) + v14 + 1)
    v15 = v14 + 1;
  else
    v15 = ((v14 + 1 + v10) & ~v10) + v14 + 1;
  v16 = (v14 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v15 <= v16 + 113)
    v15 = v16 + 113;
  v17 = v16 + 49;
  if (v15 > v17)
    v17 = v15;
  if (v17 <= 0x19)
    v17 = 25;
  result = *(unsigned __int8 *)(a1 + v17);
  if (result >= 8)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_2143CF998(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;

  if (a2 > 7)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v25 = *(unsigned __int8 *)(v24 + 80);
    v26 = *(_QWORD *)(sub_214423C48() - 8);
    v27 = *(unsigned __int8 *)(v26 + 80);
    v28 = *(_QWORD *)(sub_214423C54() - 8);
    v29 = *(unsigned __int8 *)(v28 + 80);
    v30 = v27 | v29 | v25;
    v31 = v30 | 7;
    v32 = (v30 + 32) & ~(v30 | 7);
    v33 = *(_QWORD *)(v24 + 64);
    if (((v33 + v25) & ~v25) + v33 > v33)
      v33 += (v33 + v25) & ~v25;
    v34 = ((*(_QWORD *)(v26 + 64) + v29 + ((v27 + 8) & ~v27)) & ~v29) + *(_QWORD *)(v28 + 64);
    if (v33 > v34)
      v34 = v33;
    if (v34 <= 0x10)
      v34 = 16;
    v35 = v34 + v32;
    if (v35 + 1 > ((v35 + 1 + v31) & ~v31) + v35 + 1)
      v36 = v35 + 1;
    else
      v36 = ((v35 + 1 + v31) & ~v31) + v35 + 1;
    v37 = (v35 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v36 <= v37 + 113)
      v36 = v37 + 113;
    v38 = v37 + 49;
    if (v36 > v38)
      v38 = v36;
    if (v38 <= 0x19)
      v39 = 25;
    else
      v39 = v38;
    v40 = a2 - 8;
    if (v39 < 4)
    {
      v41 = v40 >> (8 * v39);
      v42 = v40 & ~(-1 << (8 * v39));
      a1[v39] = v41 + 8;
      bzero(a1, v39);
      if ((_DWORD)v39 == 3)
      {
        *(_WORD *)a1 = v42;
        a1[2] = BYTE2(v42);
      }
      else if ((_DWORD)v39 == 2)
      {
        *(_WORD *)a1 = v42;
      }
      else
      {
        *a1 = v42;
      }
    }
    else
    {
      a1[v39] = 8;
      bzero(a1, v39);
      *(_DWORD *)a1 = v40;
    }
  }
  else
  {
    v6 = sub_214423C48();
    v7 = sub_214423C54();
    v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v7 - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = *(_QWORD *)(v6 - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v14 = v11 | v13 | v9;
    v15 = v14 + 32;
    v16 = v14 | 7;
    v17 = v15 & ~v16;
    v18 = *(_QWORD *)(v8 + 64);
    v19 = ((v18 + v9) & ~v9) + v18;
    if (v19 > v18)
      v18 = v19;
    if (v18 <= ((*(_QWORD *)(v12 + 64) + v11 + ((v13 + 8) & ~v13)) & (unint64_t)~v11) + *(_QWORD *)(v10 + 64))
      v18 = ((*(_QWORD *)(v12 + 64) + v11 + ((v13 + 8) & ~v13)) & ~v11) + *(_QWORD *)(v10 + 64);
    if (v18 <= 0x10)
      v18 = 16;
    v20 = v18 + v17;
    if (v20 + 1 > ((v20 + 1 + v16) & ~v16) + v20 + 1)
      v21 = v20 + 1;
    else
      v21 = ((v20 + 1 + v16) & ~v16) + v20 + 1;
    v22 = (v20 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v21 <= v22 + 113)
      v21 = v22 + 113;
    v23 = v22 + 49;
    if (v21 > v23)
      v23 = v21;
    if (v23 <= 0x19)
      v23 = 25;
    a1[v23] = a2;
  }
}

uint64_t type metadata accessor for BoundingSectionSpecification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundingSectionSpecification);
}

uint64_t destroy for MarkPosition(uint64_t a1)
{
  return sub_2141EF040(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
}

uint64_t *initializeWithCopy for MarkPosition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  sub_2141DCFC0(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  return a1;
}

uint64_t assignWithCopy for MarkPosition(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v27 = a2[9];
  v28 = a2[10];
  v29 = a2[11];
  v30 = a2[12];
  v31 = a2[13];
  v32 = a2[14];
  v33 = a2[15];
  v34 = a2[16];
  v35 = a2[17];
  sub_2141DCFC0(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v28;
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v34;
  *(_QWORD *)(a1 + 136) = v35;
  sub_2141EF040(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, SBYTE8(v23), v24, v25);
  return a1;
}

__n128 initializeWithTake for MarkPosition(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for MarkPosition(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 136);
  v17 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v18;
  v19 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v19;
  v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = a2[8];
  sub_2141EF040(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, SBYTE8(v14), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MarkPosition(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 48) >> 3) & 0xFFFFFFE0 | (*(_QWORD *)(a1 + 48) >> 2) & 0x1F;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MarkPosition(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 136) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = (8 * -a2) & 0x7FFFFFF00 | (4 * (-a2 & 0x1FLL));
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_QWORD *)(a1 + 136) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

int8x16_t sub_2143D003C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t result;

  v2 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 64) = v2;
  result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_214427830);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MarkPosition()
{
  return &type metadata for MarkPosition;
}

uint64_t sub_2143D0094(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  double *v4;
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D4108(0, v2, 0);
    result = v9;
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D4108((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(int64x2_t *)(result + 16 * v8 + 32) = vdupq_lane_s64(COERCE__INT64((v5 + v6) * 0.5), 0);
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2143D016C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t result;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;

  v4 = sub_214423B70();
  v5 = *(_QWORD **)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v36 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v36 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v36 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v39 = (char *)&v36 - v14;
  v15 = sub_2141D8BF8(&qword_253F112C8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)a1;
  v37 = *(_QWORD *)(a1 + 8);
  v38 = v18;
  v41 = *(unsigned __int8 *)(a1 + 16);
  v40 = *(_QWORD *)(a1 + 24);
  v19 = sub_2141D8BF8(&qword_253F12168);
  sub_2141E070C(a1 + *(int *)(v19 + 36), (uint64_t)v17, &qword_253F112C8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = &v17[*(int *)(sub_2141D8BF8(&qword_253F10BF0) + 48)];
    v21 = (void (*)(char *, char *, uint64_t))v5[4];
    v22 = v39;
    v21(v39, v17, v4);
    v21(v13, v20, v4);
    v23 = (void (*)(char *, char *, uint64_t))v5[2];
    v23(v10, v22, v4);
    v24 = (uint64_t)v36;
    v23(v36, v13, v4);
    v26 = v37;
    v25 = v38;
    sub_2141DD130(v38, v37, v41);
    swift_bridgeObjectRetain();
    sub_2143D8F18((uint64_t)v10);
    v28 = v27;
    sub_2143D8F18(v24);
    v30 = v29;
    v31 = (void (*)(uint64_t, uint64_t))v5[1];
    v31(v24, v4);
    v31((uint64_t)v10, v4);
    sub_2141E0750(a1, &qword_253F12168);
    v31((uint64_t)v13, v4);
    v32 = -127;
  }
  else
  {
    v33 = v39;
    ((void (*)(char *, char *, uint64_t))v5[4])(v39, v17, v4);
    ((void (*)(char *, char *, uint64_t))v5[2])(v13, v33, v4);
    v26 = v37;
    v25 = v38;
    sub_2141DD130(v38, v37, v41);
    swift_bridgeObjectRetain();
    sub_2143D8F18((uint64_t)v13);
    v28 = v34;
    v31 = (void (*)(uint64_t, uint64_t))v5[1];
    v31((uint64_t)v13, v4);
    sub_2141E0750(a1, &qword_253F12168);
    v32 = 1;
    v30 = 0;
  }
  result = ((uint64_t (*)(char *, uint64_t))v31)(v39, v4);
  *(_QWORD *)a2 = v25;
  *(_QWORD *)(a2 + 8) = v26;
  *(_BYTE *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = v40;
  *(_QWORD *)(a2 + 32) = v28;
  *(_QWORD *)(a2 + 40) = v30;
  *(_BYTE *)(a2 + 48) = v32;
  *(_QWORD *)(a2 + 56) = v4;
  *(_QWORD *)(a2 + 64) = &protocol witness table for Date;
  return result;
}

uint64_t sub_2143D046C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t result;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v39 = *(_QWORD *)(a2 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v38 - v11;
  v16 = type metadata accessor for PlottableValue.Storage(0, v13, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v38 - v18;
  v20 = *(_QWORD *)a1;
  v42 = *(_QWORD *)(a1 + 8);
  v43 = v20;
  v41 = *(unsigned __int8 *)(a1 + 16);
  v40 = *(_QWORD *)(a1 + 24);
  v22 = type metadata accessor for PlottableValue(0, a2, a3, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1 + *(int *)(v22 + 36), v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v23 = &v19[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v38 = a3;
    v24 = v39;
    v25 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v25(v12, v19, a2);
    v25(v10, v23, a2);
    sub_2141DD130(v43, v42, v41);
    swift_bridgeObjectRetain();
    sub_214400BA0();
    v27 = v26;
    v29 = v28;
    LOBYTE(v25) = v30;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
    v31 = *(void (**)(char *, uint64_t))(v24 + 8);
    a3 = v38;
    v31(v10, a2);
    result = ((uint64_t (*)(char *, uint64_t))v31)(v12, a2);
    v33 = v25 & 1 | 0x80;
  }
  else
  {
    v34 = v39;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v19, a2);
    sub_2141DD130(v43, v42, v41);
    swift_bridgeObjectRetain();
    v27 = sub_214400B9C(v12, a2, a3);
    v29 = v35;
    v33 = v36;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
    result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v12, a2);
  }
  v37 = v42;
  *(_QWORD *)a4 = v43;
  *(_QWORD *)(a4 + 8) = v37;
  *(_BYTE *)(a4 + 16) = v41;
  *(_QWORD *)(a4 + 24) = v40;
  *(_QWORD *)(a4 + 32) = v27;
  *(_QWORD *)(a4 + 40) = v29;
  *(_BYTE *)(a4 + 48) = v33;
  *(_QWORD *)(a4 + 56) = a2;
  *(_QWORD *)(a4 + 64) = a3;
  return result;
}

void sub_2143D06EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t AssociatedTypeWitness;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v61 = a2;
  v62 = a1;
  v58 = a6;
  v37 = sub_2141D8BF8(&qword_253F15D60);
  v9 = MEMORY[0x24BDAC7A8](v37);
  v38 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v35[2] = (char *)v35 - v11;
  v47 = sub_2141D8BF8(&qword_253F105C0);
  v12 = MEMORY[0x24BDAC7A8](v47);
  v39 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v41 = (char *)v35 - v14;
  v36 = sub_2141D8BF8(&qword_253F12168);
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_214423B70();
  v46 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v42 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v43 = (char *)v35 - v19;
  v20 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v20);
  v45 = (char *)v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_214423900();
  v55 = *(_QWORD *)(v22 - 8);
  v56 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v48 = (char *)v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_214423C54();
  v53 = *(_QWORD *)(v24 - 8);
  v54 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v52 = (char *)v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_214423C48();
  v50 = *(_QWORD *)(v51 - 8);
  v26 = MEMORY[0x24BDAC7A8](v51);
  v49 = (char *)v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = type metadata accessor for PlottableValue(0, a4, a5, v28);
  MEMORY[0x24BDAC7A8](v29);
  v30 = type metadata accessor for PlottableProjection.Storage(0, a3, a4, a5);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)v35 - v32;
  v60 = a3;
  v57 = type metadata accessor for PlottableProjection(0, a3, a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, v62 + *(int *)(v57 + 44), v30);
  v34 = (char *)&loc_2143D0B00 + dword_2143D1154[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

__n128 sub_2143D0B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;

  v6 = *(_QWORD *)(v5 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v1, v0, v3);
  v7 = *(_QWORD *)(v5 - 184);
  static PlottableValue.value(_:_:)(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16), *(_QWORD *)(v7 + 24), v3, v4, v2);
  sub_2143D046C(v2, v3, v4, v5 - 160);
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v5 - 200) - 8) + 8))(*(_QWORD *)(v5 - 192));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v3);
  v8 = *(_QWORD *)(v5 - 216);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 - 224) - 8) + 8))(v7);
  v9 = *(_BYTE *)(v5 - 112);
  v10 = *(_BYTE *)(v5 - 144);
  v11 = *(_QWORD *)(v5 - 136);
  result = *(__n128 *)(v5 - 104);
  v13 = *(_OWORD *)(v5 - 128);
  *(_OWORD *)v8 = *(_OWORD *)(v5 - 160);
  *(_BYTE *)(v8 + 16) = v10 & 1;
  *(_QWORD *)(v8 + 24) = v11;
  *(_OWORD *)(v8 + 32) = v13;
  *(_BYTE *)(v8 + 48) = v9;
  *(__n128 *)(v8 + 56) = result;
  return result;
}

void sub_2143D10B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  void (*v4)(uint64_t, uint64_t);

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8);
  v4(v0 + *(int *)(TupleTypeMetadata2 + 48), v1);
  v4(v0, v1);
  sub_214425628();
  __break(1u);
  JUMPOUT(0x2143D1154);
}

void sub_2143D1168(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  _QWORD v25[78];

  v25[18] = a2;
  v25[20] = a6;
  v25[22] = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v25[14] = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PlottableProjection(0, v11, v12, v13);
  v25[21] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v17 = MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v25[15] = a5;
  v25[16] = (char *)v25 - v18;
  v19 = type metadata accessor for BoundingSectionSpecification(0, a3, a4, a5);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v25 - v20;
  v25[17] = v22;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v25[19] = a1;
  v23(v21, a1, v19);
  v24 = (char *)sub_2143D12FC + 4 * byte_214431DE0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2143D12FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 144), v1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 152), v3);
  v5 = *(_BYTE *)(v2 + 8);
  *(_QWORD *)(v0 + 328) = *(_QWORD *)v2;
  *(_BYTE *)(v0 + 336) = v5;
  sub_2143D90A4(v0 + 328);
  sub_2141EDFD8(v0 + 328, v4 - 232);
  return sub_2141EDFD8(v4 - 232, *(_QWORD *)(v0 + 160));
}

uint64_t sub_2143D17A8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v77;
  _QWORD v78[31];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t TupleTypeMetadata2;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[13];
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v119 = a1;
  v115 = a2;
  sub_2141E801C(a2, (uint64_t)v121, &qword_253F149D8);
  v96 = v121[0];
  v97 = v121[2];
  v102 = v121[1];
  v103 = v121[3];
  v98 = v121[4];
  v99 = v121[5];
  v100 = v121[6];
  v101 = v121[7];
  v95 = v121[8];
  v108 = v121[10];
  v109 = v121[9];
  v106 = v121[12];
  v107 = v121[11];
  v94 = v122;
  v9 = a3[2];
  v8 = a3[3];
  v120 = a3[4];
  v10 = type metadata accessor for PlottableProjection.Storage(255, v9, v8, v120);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v93 = (char *)v78 - v11;
  v12 = sub_2141D7924(&qword_254D6DDA0);
  v110 = a5;
  v118 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  v13 = *(_QWORD *)(v118 + 8);
  v14 = sub_2141D9054(&qword_254D6DDA8, &qword_254D6DDA0, MEMORY[0x24BEE2620]);
  v123 = a4;
  v78[9] = v14;
  v78[10] = v12;
  v124 = v12;
  v125 = v13;
  v126 = v14;
  v15 = sub_214425508();
  v78[17] = *(_QWORD *)(v15 - 8);
  v78[18] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v78[16] = (char *)v78 - v16;
  v17 = sub_2141D7924(&qword_254D6DDB0);
  v18 = MEMORY[0x24BEE12C8];
  v19 = sub_2141D9054(&qword_254D6DDB8, &qword_254D6DDB0, MEMORY[0x24BEE12C8]);
  v123 = a4;
  v78[7] = v19;
  v78[8] = v17;
  v124 = v17;
  v125 = v13;
  v126 = v19;
  v20 = sub_214425508();
  v78[14] = *(_QWORD *)(v20 - 8);
  v78[15] = v20;
  MEMORY[0x24BDAC7A8](v20);
  v78[13] = (char *)v78 - v21;
  v80 = sub_214423C54();
  v82 = *(_QWORD *)(v80 - 8);
  v22 = MEMORY[0x24BDAC7A8](v80);
  v78[6] = (char *)v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v78[30] = (char *)v78 - v24;
  v79 = sub_214423C48();
  v87 = *(_QWORD *)(v79 - 8);
  v25 = MEMORY[0x24BDAC7A8](v79);
  v78[5] = (char *)v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v78[29] = (char *)v78 - v28;
  v105 = *(_QWORD *)(v8 - 8);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v78[4] = (char *)v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v78[22] = (char *)v78 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v78[3] = (char *)v78 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v85 = (char *)v78 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v78[25] = (char *)v78 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v78[24] = (char *)v78 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v78[28] = (char *)v78 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v78[27] = (char *)v78 - v44;
  MEMORY[0x24BDAC7A8](v43);
  v78[26] = (char *)v78 - v45;
  v46 = sub_2141D7924(&qword_253F10C58);
  v47 = sub_2141D9054(&qword_254D6DDC0, &qword_253F10C58, v18);
  v123 = a4;
  v78[11] = v47;
  v78[12] = v46;
  v124 = v46;
  v81 = v13;
  v125 = v13;
  v126 = v47;
  v48 = sub_214425508();
  v78[20] = *(_QWORD *)(v48 - 8);
  v78[21] = v48;
  v49 = MEMORY[0x24BDAC7A8](v48);
  v78[19] = (char *)v78 - v50;
  v112 = v10;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v52 = MEMORY[0x24BDAC7A8](v51);
  v78[2] = (char *)v78 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v78[1] = (char *)v78 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v78[23] = (char *)v78 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v59 = MEMORY[0x24BDAC7A8](v58);
  v83 = (char *)v78 - v60;
  MEMORY[0x24BDAC7A8](v59);
  v91 = (char *)v78 - v61;
  v104 = v9;
  v114 = v8;
  v113 = type metadata accessor for PlottableProjection(0, v9, v8, v120);
  v117 = *(_QWORD *)(v113 - 8);
  v62 = MEMORY[0x24BDAC7A8](v113);
  v88 = (char *)v78 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = MEMORY[0x24BDAC7A8](v62);
  v90 = (char *)v78 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v89 = (char *)v78 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v86 = (char *)v78 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v92 = (char *)v78 - v71;
  v72 = a3;
  v73 = *(a3 - 1);
  MEMORY[0x24BDAC7A8](v70);
  v75 = (char *)v78 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = a4;
  if ((sub_2144251E4() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, _QWORD *))(v73 + 16))(v75, v116, v72);
    v77 = (char *)sub_2143D1EEC + 4 * word_214431DE8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return MEMORY[0x24BEE4AF8];
}

void sub_2143D1EEC()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    v4 = (v3 + v2) * 0.5;
  else
    v4 = *(double *)v0;
  v5 = v4 + v1;
  sub_2141D8BF8(&qword_253F105E8);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_214426EF0;
  *(double *)(v6 + 32) = v5;
  *(double *)(v6 + 40) = v5;
  JUMPOUT(0x2143D1E7CLL);
}

void sub_2143D2A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_2141E801C(v0 + 1056, v0 + 1280, &qword_253F13368);
  if ((*(_BYTE *)(v0 + 1384) & 1) == 0)
  {
    v5 = *(void (**)(uint64_t))(v0 + 1280);
    v6 = *(_QWORD *)(v0 + 1288);
    v7 = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 656) = v7;
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 1360);
    *(_QWORD *)(v0 + 688) = *(_QWORD *)(v0 + 1376);
    v8 = *(_OWORD *)(v0 + 1312);
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 1296);
    *(_OWORD *)(v0 + 624) = v8;
    *(_QWORD *)(v4 - 256) = 0;
    sub_21421BAE4(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 376));
    v5(v4 - 256);
    v9 = *(_QWORD *)(v0 + 1168);
    *(_QWORD *)(v0 + 1168) = v5;
    *(_QWORD *)(v0 + 1176) = v6;
    v10 = *(_OWORD *)(v0 + 656);
    *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 640);
    *(_OWORD *)(v0 + 1232) = v10;
    *(_OWORD *)(v0 + 1248) = *(_OWORD *)(v0 + 672);
    *(_QWORD *)(v0 + 1264) = *(_QWORD *)(v0 + 688);
    v11 = *(_OWORD *)(v0 + 624);
    *(_OWORD *)(v0 + 1184) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 1200) = v11;
    sub_2141D8BF8(&qword_254D6DDC8);
    sub_2142E1650();
    v13 = v12;
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      *(_QWORD *)(v0 + 1168) = v2;
      sub_2141D4108(0, v14, 0);
      v15 = 0;
      v16 = *(_QWORD *)(v0 + 1168);
      v17 = *(_QWORD *)(v16 + 16);
      v18 = 16 * v17;
      do
      {
        v19 = *(_QWORD *)(v13 + 32 + 8 * v15);
        *(_QWORD *)(v0 + 1168) = v16;
        v20 = *(_QWORD *)(v16 + 24);
        v21 = v17 + v15 + 1;
        if (v17 + v15 >= v20 >> 1)
        {
          sub_2141D4108((char *)(v20 > 1), v17 + v15 + 1, 1);
          v16 = *(_QWORD *)(v0 + 1168);
        }
        ++v15;
        *(_QWORD *)(v16 + 16) = v21;
        v22 = v16 + v18;
        *(_QWORD *)(v22 + 32) = v9;
        *(_QWORD *)(v22 + 40) = v19;
        v18 += 16;
      }
      while (v14 != v15);
      swift_release();
      sub_21421D004(*(_QWORD *)(v0 + 536), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
      swift_bridgeObjectRelease();
      v3 = *(_QWORD *)(v0 + 304);
    }
    else
    {
      swift_release();
      sub_21421D004(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 552) + 8))(v3, *(_QWORD *)(v0 + 520));
    JUMPOUT(0x2143D1E7CLL);
  }
  JUMPOUT(0x2143D5F2CLL);
}

void sub_2143D3324()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata3;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *v1;
  sub_2144258E0();
  v6 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 256);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v8 = (char *)v1 + *(int *)(TupleTypeMetadata3 + 64);
  v9 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v9, (char *)v1 + *(int *)(TupleTypeMetadata3 + 48), v6);
  v10 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v0 + 272) + 32))(v10, v8, v5);
  sub_2141E801C(v0 + 1056, v0 + 1280, &qword_253F13368);
  if ((*(_BYTE *)(v0 + 1384) & 1) == 0)
  {
    v11 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1232) = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1248) = v11;
    *(_QWORD *)(v0 + 1264) = *(_QWORD *)(v0 + 1376);
    v12 = *(_OWORD *)(v0 + 1296);
    *(_OWORD *)(v0 + 1168) = *(_OWORD *)(v0 + 1280);
    *(_OWORD *)(v0 + 1184) = v12;
    v13 = *(_OWORD *)(v0 + 1312);
    *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1200) = v13;
    sub_21421BAE4(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 376));
    v14 = sub_2141D8BF8(&qword_254D6DDC8);
    v15 = sub_2142E1368(*(_QWORD *)(v0 + 568), v4, v9, v10, v14, *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 496));
    sub_2143D0094(v15);
    swift_release();
    sub_21421D004(*(_QWORD *)(v0 + 536), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 8))(v10, v5);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v6);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 552) + 8))(*(_QWORD *)(v0 + 320), v3);
    JUMPOUT(0x2143D1E7CLL);
  }
  JUMPOUT(0x2143D6030);
}

void sub_2143D3B40()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata3;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[19];
  uint64_t v58;

  v6 = v1;
  v7 = *(uint64_t **)(v0 + 344);
  v8 = *v7;
  sub_2144258E0();
  v10 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 256);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v12 = (char *)v7 + *(int *)(TupleTypeMetadata3 + 48);
  v13 = (char *)v7 + *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v0 + 312) + 32))(*(_QWORD *)(v0 + 232), v12, v10);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v0 + 272) + 32))(*(_QWORD *)(v0 + 240), v13, v9);
  sub_2141E801C(v0 + 1056, v0 + 1280, &qword_253F13368);
  if ((*(_BYTE *)(v0 + 1384) & 1) == 0)
  {
    *(_QWORD *)(v0 + 560) = v8;
    v14 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1232) = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1248) = v14;
    *(_QWORD *)(v0 + 1264) = *(_QWORD *)(v0 + 1376);
    v15 = *(_OWORD *)(v0 + 1296);
    *(_OWORD *)(v0 + 1168) = *(_OWORD *)(v0 + 1280);
    *(_OWORD *)(v0 + 1184) = v15;
    v16 = *(_OWORD *)(v0 + 1312);
    *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1200) = v16;
    v17 = *(_QWORD *)(v0 + 536);
    if (v2 == 255)
    {
      sub_2142B1144(v0 + 736);
      v18 = *(_QWORD *)(v0 + 736);
      v19 = *(_QWORD *)(v0 + 744);
      v20 = *(_QWORD *)(v0 + 752);
      v22 = *(_QWORD *)(v0 + 760);
      v24 = *(_QWORD *)(v0 + 768);
      v26 = *(_QWORD *)(v0 + 776);
      v21 = *(_QWORD *)(v0 + 784);
      v29 = *(_QWORD *)(v0 + 792);
      v31 = *(_QWORD *)(v0 + 800);
      v32 = *(_QWORD *)(v0 + 808);
      v34 = *(_QWORD *)(v0 + 816);
      v33 = *(unsigned __int8 *)(v0 + 824);
      v35 = *(_QWORD *)(v0 + 200);
      v28 = *(_QWORD *)(v0 + 296);
      v27 = *(_QWORD *)(v0 + 304);
      v25 = *(_QWORD *)(v0 + 544);
      v23 = *(_QWORD *)(v0 + 280);
      v30 = *(_QWORD *)(v0 + 336);
    }
    else
    {
      v18 = v6;
      v19 = *(_QWORD *)(v0 + 288);
      v20 = *(_QWORD *)(v0 + 320);
      v21 = *(_QWORD *)(v0 + 328);
      v22 = *(_QWORD *)(v0 + 360);
      v23 = *(_QWORD *)(v0 + 280);
      v24 = v23;
      v25 = *(_QWORD *)(v0 + 544);
      v26 = v25;
      v27 = *(_QWORD *)(v0 + 304);
      v28 = *(_QWORD *)(v0 + 296);
      v29 = v28;
      v30 = *(_QWORD *)(v0 + 336);
      v31 = v30;
      v32 = v27;
      v33 = v2 & 1;
      v34 = *(_QWORD *)(v0 + 200);
      v35 = v34;
    }
    *(_QWORD *)(v0 + 488) = v34;
    *(_DWORD *)(v0 + 512) = v33;
    *(_QWORD *)(v3 - 256) = v18;
    *(_QWORD *)(v3 - 248) = v19;
    *(_QWORD *)(v3 - 240) = v20;
    *(_QWORD *)(v3 - 232) = v22;
    *(_QWORD *)(v3 - 224) = v24;
    *(_QWORD *)(v3 - 216) = v26;
    *(_QWORD *)(v3 - 208) = v21;
    *(_QWORD *)(v3 - 200) = v29;
    *(_QWORD *)(v3 - 192) = v31;
    *(_QWORD *)(v3 - 184) = v32;
    *(_QWORD *)(v3 - 176) = v34;
    *(_BYTE *)(v3 - 168) = v33;
    v36 = *(_OWORD *)(v0 + 1248);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 1232);
    *(_OWORD *)(v0 + 688) = v36;
    *(_QWORD *)(v0 + 704) = *(_QWORD *)(v0 + 1264);
    v37 = *(_OWORD *)(v0 + 1184);
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 1168);
    *(_OWORD *)(v0 + 624) = v37;
    v38 = *(_OWORD *)(v0 + 1216);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 1200);
    *(_OWORD *)(v0 + 656) = v38;
    sub_21421D004(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    sub_21421D004(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    v39 = v35;
    sub_21434CA34(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 360), v23, v25, *(_QWORD *)(v0 + 328), v28, v30, v27, v35, v2);
    v40 = sub_2141D8BF8(&qword_254D6DDC8);
    v41 = *(_QWORD *)(v0 + 496);
    v42 = *(_QWORD *)(v0 + 504);
    v43 = *(_QWORD *)(v0 + 576);
    v44 = v39;
    *(_QWORD *)(v0 + 608) = sub_2142E1368(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), v40, v42, v43, v41);
    v45 = *(_QWORD *)(v0 + 104);
    sub_2144257FC();
    v46 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v46);
    v47 = *(_QWORD *)(v0 + 528);
    v57[12] = *(_QWORD *)(v0 + 448);
    v57[13] = v47;
    v57[14] = v42;
    v57[15] = v43;
    v57[16] = v41;
    v57[17] = v3 - 256;
    v57[18] = v5;
    v58 = v4;
    MEMORY[0x24BDAC7A8](v48);
    v57[2] = v50;
    v57[3] = v49;
    v57[4] = v42;
    v57[5] = v43;
    v57[6] = v41;
    v57[7] = sub_2143D956C;
    v57[8] = v51;
    v52 = sub_2141D8BF8(&qword_253F101D8);
    v53 = *(_QWORD *)(v0 + 120);
    v54 = MEMORY[0x2199CD934](MEMORY[0x24BEE2620], v53);
    sub_21426FCD0((void (*)(char *, char *))sub_2143D9570, (uint64_t)v57, v53, v52, MEMORY[0x24BEE4078], v54, MEMORY[0x24BEE40A8], v55);
    v56 = *(_QWORD *)(v0 + 536);
    sub_21421D004(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    swift_release();
    sub_21421D004(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    sub_2142748FC(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304), v44, *(_DWORD *)(v0 + 192));
    sub_2142637C0(*(_QWORD *)(v0 + 48), *(_DWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 8))(v45, v53);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 256));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 248));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 552) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 520));
    sub_2142637C0(*(_QWORD *)(v0 + 488), *(_DWORD *)(v0 + 512));
    JUMPOUT(0x2143D1E7CLL);
  }
  LODWORD(v58) = 0;
  JUMPOUT(0x2143D60B8);
}

void sub_2143D3C6C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double (*v103)(uint64_t, double, uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[4];
  _QWORD v112[2];
  uint64_t v113;
  double (*v114)(uint64_t, double, uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double (*v118)(uint64_t, double, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  *(_QWORD *)(v0 + 560) = **(_QWORD **)(v0 + 344);
  sub_2141E801C(v0 + 1056, v0 + 1280, &qword_253F13368);
  if ((*(_BYTE *)(v0 + 1384) & 1) != 0)
  {
    v9 = v1;
    v10 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1232) = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1248) = v10;
    *(_QWORD *)(v0 + 1264) = *(_QWORD *)(v0 + 1376);
    v11 = *(_OWORD *)(v0 + 1296);
    *(_OWORD *)(v0 + 1168) = *(_OWORD *)(v0 + 1280);
    *(_OWORD *)(v0 + 1184) = v11;
    v12 = *(_OWORD *)(v0 + 1312);
    *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1200) = v12;
    v13 = *(_QWORD *)(v0 + 536);
    if (v2 == 255)
    {
      sub_2142B1144(v0 + 736);
      v14 = *(_QWORD *)(v0 + 736);
      v17 = *(_QWORD *)(v0 + 744);
      v18 = *(_QWORD *)(v0 + 752);
      v21 = *(_QWORD *)(v0 + 760);
      v22 = *(_QWORD *)(v0 + 768);
      v23 = *(_QWORD *)(v0 + 776);
      v19 = *(_QWORD *)(v0 + 784);
      v26 = *(_QWORD *)(v0 + 792);
      v27 = *(_QWORD *)(v0 + 800);
      v28 = *(_QWORD *)(v0 + 808);
      v30 = *(_QWORD *)(v0 + 816);
      v29 = *(unsigned __int8 *)(v0 + 824);
      v31 = *(_QWORD *)(v0 + 200);
      v15 = *(_QWORD *)(v0 + 280);
      v16 = *(_QWORD *)(v0 + 288);
      v25 = *(_QWORD *)(v0 + 296);
      v24 = *(_QWORD *)(v0 + 304);
      v20 = *(_QWORD *)(v0 + 360);
    }
    else
    {
      v14 = v9;
      v15 = *(_QWORD *)(v0 + 280);
      v16 = *(_QWORD *)(v0 + 288);
      v17 = v16;
      v18 = *(_QWORD *)(v0 + 320);
      v19 = *(_QWORD *)(v0 + 328);
      v20 = *(_QWORD *)(v0 + 360);
      v21 = v20;
      v22 = v15;
      v23 = *(_QWORD *)(v0 + 544);
      v24 = *(_QWORD *)(v0 + 304);
      v25 = *(_QWORD *)(v0 + 296);
      v26 = v25;
      v27 = *(_QWORD *)(v0 + 336);
      v28 = v24;
      v29 = v2 & 1;
      v30 = *(_QWORD *)(v0 + 200);
      v31 = v30;
    }
    *(_QWORD *)(v0 + 488) = v30;
    *(_DWORD *)(v0 + 512) = v29;
    *(_QWORD *)(v4 - 256) = v14;
    *(_QWORD *)(v4 - 248) = v17;
    *(_QWORD *)(v4 - 240) = v18;
    *(_QWORD *)(v4 - 232) = v21;
    *(_QWORD *)(v4 - 224) = v22;
    *(_QWORD *)(v4 - 216) = v23;
    *(_QWORD *)(v4 - 208) = v19;
    *(_QWORD *)(v4 - 200) = v26;
    *(_QWORD *)(v4 - 192) = v27;
    *(_QWORD *)(v4 - 184) = v28;
    *(_QWORD *)(v4 - 176) = v30;
    *(_BYTE *)(v4 - 168) = v29;
    v62 = *(_OWORD *)(v0 + 1248);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 1232);
    *(_OWORD *)(v0 + 688) = v62;
    *(_QWORD *)(v0 + 704) = *(_QWORD *)(v0 + 1264);
    v63 = *(_OWORD *)(v0 + 1184);
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 1168);
    *(_OWORD *)(v0 + 624) = v63;
    v64 = *(_OWORD *)(v0 + 1216);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 1200);
    *(_OWORD *)(v0 + 656) = v64;
    sub_21421D004(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    sub_21421D004(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    LOBYTE(v130) = v2;
    v128 = v24;
    v129 = v31;
    v127 = *(_QWORD *)(v0 + 336);
    v65 = v16;
    v66 = *(_QWORD *)(v0 + 320);
    sub_21434CA34(*(_QWORD *)(v0 + 184), v65, v66, v20, v15, *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 328), v25, v127, v24, v31, v2);
    v67 = sub_2141D8BF8(&qword_254D6DDD0);
    v68 = *(_QWORD *)(v0 + 496);
    v69 = *(_QWORD *)(v0 + 504);
    v70 = *(_QWORD *)(v0 + 576);
    v71 = v66;
    *(_QWORD *)(v0 + 608) = sub_2142E10E0(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 560), v67, v69, v70, v68);
    v72 = *(_QWORD *)(v0 + 152);
    sub_2144257FC();
    v73 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v73);
    v74 = *(_QWORD *)(v0 + 528);
    v119 = *(_QWORD *)(v0 + 448);
    v120 = v74;
    v121 = v69;
    v122 = v70;
    v123 = v68;
    v124 = v0 + 1168;
    v125 = v4 - 256;
    v126 = v6;
    v127 = v8;
    v128 = v7;
    v129 = v5;
    MEMORY[0x24BDAC7A8](v75);
    v111[2] = v77;
    v111[3] = v76;
    v112[0] = v69;
    v112[1] = v70;
    v113 = v68;
    v114 = sub_2143D97A4;
    v115 = v78;
    v79 = sub_2141D8BF8(&qword_253F101D8);
    v80 = *(_QWORD *)(v0 + 168);
    v81 = MEMORY[0x2199CD934](MEMORY[0x24BEE2620], v80);
    sub_21426FCD0((void (*)(char *, char *))sub_2143D983C, (uint64_t)v111, v80, v79, MEMORY[0x24BEE4078], v81, MEMORY[0x24BEE40A8], v82);
    swift_release();
    sub_2142748FC(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 288), v71, *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304), v31, *(_DWORD *)(v0 + 192));
    sub_2142637C0(*(_QWORD *)(v0 + 48), *(_DWORD *)(v0 + 176));
    v83 = *(_QWORD *)(v0 + 536);
    sub_21421D004(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 8))(v72, v80);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 552) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 520));
    sub_21421D004(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    JUMPOUT(0x2143D50D8);
  }
  v32 = *(_OWORD *)(v0 + 1360);
  *(_OWORD *)(v0 + 1232) = *(_OWORD *)(v0 + 1344);
  *(_OWORD *)(v0 + 1248) = v32;
  *(_QWORD *)(v0 + 1264) = *(_QWORD *)(v0 + 1376);
  v33 = *(_OWORD *)(v0 + 1296);
  *(_OWORD *)(v0 + 1168) = *(_OWORD *)(v0 + 1280);
  *(_OWORD *)(v0 + 1184) = v33;
  v34 = *(_OWORD *)(v0 + 1312);
  *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 1328);
  *(_OWORD *)(v0 + 1200) = v34;
  v35 = *(_QWORD *)(v0 + 544);
  v36 = *(_QWORD *)(v0 + 336);
  if (v2 == 255)
  {
    *(_DWORD *)(v0 + 512) = *(_DWORD *)(v0 + 372) & 1;
    v84 = *(_QWORD *)(v0 + 376);
    v85 = *(_QWORD *)(v0 + 384);
    v86 = *(_QWORD *)(v0 + 392);
    v87 = *(_QWORD *)(v0 + 432);
    v88 = *(_QWORD *)(v0 + 400);
    v89 = *(_QWORD *)(v0 + 408);
    v91 = *(_QWORD *)(v0 + 416);
    v90 = *(_QWORD *)(v0 + 424);
    sub_21421BAE4(v85, v87, v86, *(_QWORD *)(v0 + 440), v88, v89, v91, v90, v84);
    sub_21421BAE4(v85, v87, v86, *(_QWORD *)(v0 + 440), v88, v89, v91, v90, v84);
    sub_2142B10B0(v0 + 736);
    v58 = *(_QWORD *)(v0 + 736);
    v57 = *(_QWORD *)(v0 + 744);
    v56 = *(_QWORD *)(v0 + 752);
    v55 = *(_QWORD *)(v0 + 760);
    v37 = *(_QWORD *)(v0 + 768);
    v38 = *(_QWORD *)(v0 + 776);
    v39 = *(_QWORD *)(v0 + 784);
    v41 = *(_QWORD *)(v0 + 792);
    v42 = *(_QWORD *)(v0 + 800);
    v40 = *(_QWORD *)(v0 + 808);
    v53 = *(_QWORD *)(v0 + 320);
    v59 = *(_QWORD *)(v0 + 328);
    v61 = *(_QWORD *)(v0 + 816);
    *(_DWORD *)(v0 + 512) = *(unsigned __int8 *)(v0 + 824);
    v60 = *(_QWORD *)(v0 + 200);
  }
  else
  {
    *(_QWORD *)(v0 + 456) = v1;
    v37 = *(_QWORD *)(v0 + 280);
    *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 312) = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 360);
    v38 = v35;
    v39 = *(_QWORD *)(v0 + 328);
    v41 = *(_QWORD *)(v0 + 296);
    v40 = *(_QWORD *)(v0 + 304);
    v42 = v36;
    *(_DWORD *)(v0 + 512) = v2 & 1;
    v43 = *(_DWORD *)(v0 + 372) & 1;
    *(_DWORD *)(v0 + 372) = v43;
    LOBYTE(v130) = v43;
    v129 = *(_QWORD *)(v0 + 464);
    v128 = *(_QWORD *)(v0 + 472);
    v127 = *(_QWORD *)(v0 + 480);
    v126 = *(_QWORD *)(v0 + 488);
    v125 = *(_QWORD *)(v0 + 376);
    v44 = v125;
    v45 = *(_QWORD *)(v0 + 384);
    v46 = *(_QWORD *)(v0 + 392);
    v47 = *(_QWORD *)(v0 + 440);
    v48 = *(_QWORD *)(v0 + 400);
    v49 = *(_QWORD *)(v0 + 408);
    v51 = *(_QWORD *)(v0 + 416);
    v50 = *(_QWORD *)(v0 + 424);
    sub_21421BAE4(v45, *(_QWORD *)(v0 + 432), v46, v47, v48, v49, v51, v50, v125);
    LOBYTE(v130) = *(_DWORD *)(v0 + 372);
    v129 = *(_QWORD *)(v0 + 464);
    v128 = *(_QWORD *)(v0 + 472);
    v127 = *(_QWORD *)(v0 + 480);
    v52 = *(_QWORD *)(v0 + 488);
    v125 = v44;
    v126 = v52;
    v53 = *(_QWORD *)(v0 + 320);
    v54 = v47;
    v1 = v3;
    sub_21421BAE4(v45, *(_QWORD *)(v0 + 432), v46, v54, v48, v49, v51, v50, v125);
    v55 = *(_QWORD *)(v0 + 272);
    v56 = *(_QWORD *)(v0 + 312);
    v57 = *(_QWORD *)(v0 + 344);
    v58 = *(_QWORD *)(v0 + 456);
    v59 = *(_QWORD *)(v0 + 328);
    v60 = *(_QWORD *)(v0 + 200);
    v61 = v60;
  }
  *(_QWORD *)(v0 + 488) = v61;
  *(_QWORD *)(v4 - 256) = v58;
  *(_QWORD *)(v4 - 248) = v57;
  *(_QWORD *)(v4 - 240) = v56;
  *(_QWORD *)(v4 - 232) = v55;
  *(_QWORD *)(v4 - 224) = v37;
  *(_QWORD *)(v4 - 216) = v38;
  *(_QWORD *)(v4 - 208) = v39;
  *(_QWORD *)(v4 - 200) = v41;
  *(_QWORD *)(v4 - 192) = v42;
  *(_QWORD *)(v4 - 184) = v40;
  *(_QWORD *)(v4 - 176) = v61;
  *(_BYTE *)(v4 - 168) = *(_DWORD *)(v0 + 512);
  v92 = *(_OWORD *)(v0 + 1248);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 1232);
  *(_OWORD *)(v0 + 688) = v92;
  *(_QWORD *)(v0 + 704) = *(_QWORD *)(v0 + 1264);
  v93 = *(_OWORD *)(v0 + 1184);
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 1168);
  *(_OWORD *)(v0 + 624) = v93;
  v94 = *(_OWORD *)(v0 + 1216);
  *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 1200);
  *(_OWORD *)(v0 + 656) = v94;
  LOBYTE(v130) = *(_DWORD *)(v0 + 192);
  v129 = v60;
  v128 = *(_QWORD *)(v0 + 304);
  v127 = *(_QWORD *)(v0 + 336);
  v95 = *(_QWORD *)(v0 + 280);
  sub_21434CA34(v1, *(_QWORD *)(v0 + 288), v53, *(_QWORD *)(v0 + 360), v95, *(_QWORD *)(v0 + 544), v59, *(_QWORD *)(v0 + 296), v127, v128, v60, v130);
  sub_2141D8BF8(&qword_254D6DDC8);
  v96 = *(_QWORD *)(v0 + 496);
  v97 = *(_QWORD *)(v0 + 504);
  v98 = *(_QWORD *)(v0 + 576);
  sub_2142E1650();
  *(_QWORD *)(v0 + 608) = v99;
  sub_2144257FC();
  v100 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v100);
  v101 = *(_QWORD *)(v0 + 528);
  v123 = *(_QWORD *)(v0 + 448);
  v124 = v101;
  v125 = v97;
  v126 = v98;
  v127 = v96;
  v128 = v4 - 256;
  v129 = v6;
  v130 = v5;
  MEMORY[0x24BDAC7A8](v102);
  v113 = v104;
  v114 = v103;
  v115 = v97;
  v116 = v98;
  v117 = v96;
  v118 = sub_2143D9850;
  v119 = v105;
  v106 = sub_2141D8BF8(&qword_253F101D8);
  v107 = *(_QWORD *)(v0 + 168);
  v108 = MEMORY[0x2199CD934](MEMORY[0x24BEE2620], v107);
  sub_21426FCD0((void (*)(char *, char *))sub_2143D983C, (uint64_t)v112, v107, v106, MEMORY[0x24BEE4078], v108, MEMORY[0x24BEE40A8], v109);
  v110 = *(_QWORD *)(v0 + 536);
  sub_21421D004(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
  swift_release();
  sub_2142748FC(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 360), v95, *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 200), *(_DWORD *)(v0 + 192));
  sub_2142637C0(*(_QWORD *)(v0 + 48), *(_DWORD *)(v0 + 176));
  sub_21421D004(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
  JUMPOUT(0x2143D59DCLL);
}

void sub_2143D3D30()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[18];
  uint64_t v65;
  uint64_t v66;

  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(uint64_t **)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 544);
  v11 = *v6;
  v10 = v6[1];
  sub_2141E801C(v0 + 1056, v0 + 1280, &qword_253F13368);
  if ((*(_BYTE *)(v0 + 1384) & 1) == 0)
  {
    *(_QWORD *)(v0 + 512) = v10;
    *(_QWORD *)(v0 + 560) = v11;
    v12 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1232) = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1248) = v12;
    *(_QWORD *)(v0 + 1264) = *(_QWORD *)(v0 + 1376);
    v13 = *(_OWORD *)(v0 + 1296);
    *(_OWORD *)(v0 + 1168) = *(_OWORD *)(v0 + 1280);
    *(_OWORD *)(v0 + 1184) = v13;
    v14 = *(_OWORD *)(v0 + 1312);
    *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1200) = v14;
    v15 = *(_QWORD *)(v0 + 536);
    if (v2 == 255)
    {
      v33 = *(_QWORD *)(v0 + 296);
      sub_2142B1144(v0 + 736);
      v16 = *(_QWORD *)(v0 + 736);
      v18 = *(_QWORD *)(v0 + 744);
      v21 = *(_QWORD *)(v0 + 752);
      v22 = *(_QWORD *)(v0 + 760);
      v24 = *(_QWORD *)(v0 + 768);
      v25 = *(_QWORD *)(v0 + 776);
      v26 = *(_QWORD *)(v0 + 784);
      v27 = *(_QWORD *)(v0 + 792);
      v28 = *(_QWORD *)(v0 + 800);
      v30 = *(_QWORD *)(v0 + 808);
      v32 = *(_QWORD *)(v0 + 816);
      v31 = *(unsigned __int8 *)(v0 + 824);
      v20 = *(_QWORD *)(v0 + 320);
      v19 = *(_QWORD *)(v0 + 328);
      v23 = *(_QWORD *)(v0 + 280);
      v17 = *(_QWORD *)(v0 + 288);
      v29 = *(_QWORD *)(v0 + 304);
    }
    else
    {
      v16 = v1;
      v17 = *(_QWORD *)(v0 + 288);
      v18 = v17;
      v20 = *(_QWORD *)(v0 + 320);
      v19 = *(_QWORD *)(v0 + 328);
      v21 = v20;
      v22 = v8;
      v23 = *(_QWORD *)(v0 + 280);
      v24 = v23;
      v25 = v9;
      v26 = v19;
      v27 = *(_QWORD *)(v0 + 296);
      v28 = v7;
      v29 = *(_QWORD *)(v0 + 304);
      v30 = v29;
      v31 = v2 & 1;
      v32 = *(_QWORD *)(v0 + 200);
      v33 = v27;
    }
    *(_QWORD *)(v0 + 480) = v32;
    *(_DWORD *)(v0 + 488) = v31;
    *(_QWORD *)(v3 - 256) = v16;
    *(_QWORD *)(v3 - 248) = v18;
    *(_QWORD *)(v3 - 240) = v21;
    *(_QWORD *)(v3 - 232) = v22;
    *(_QWORD *)(v3 - 224) = v24;
    *(_QWORD *)(v3 - 216) = v25;
    *(_QWORD *)(v3 - 208) = v26;
    *(_QWORD *)(v3 - 200) = v27;
    *(_QWORD *)(v3 - 192) = v28;
    *(_QWORD *)(v3 - 184) = v30;
    *(_QWORD *)(v3 - 176) = v32;
    *(_BYTE *)(v3 - 168) = v31;
    v34 = *(_OWORD *)(v0 + 1248);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 1232);
    *(_OWORD *)(v0 + 688) = v34;
    *(_QWORD *)(v0 + 704) = *(_QWORD *)(v0 + 1264);
    v35 = *(_OWORD *)(v0 + 1184);
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 1168);
    *(_OWORD *)(v0 + 624) = v35;
    v36 = *(_OWORD *)(v0 + 1216);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 1200);
    *(_OWORD *)(v0 + 656) = v36;
    v37 = v15;
    v38 = v33;
    v39 = v1;
    v40 = v15;
    v41 = v19;
    v42 = v29;
    sub_21421D004(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    sub_21421D004(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    sub_21434CA34(v39, v17, v20, *(_QWORD *)(v0 + 360), v23, *(_QWORD *)(v0 + 544), v41, v38, *(_QWORD *)(v0 + 336), v42, *(_QWORD *)(v0 + 200), *(_DWORD *)(v0 + 192));
    sub_2141D8BF8(&qword_254D6DDC8);
    v44 = *(_QWORD *)(v0 + 496);
    v43 = *(_QWORD *)(v0 + 504);
    v45 = *(_QWORD *)(v0 + 576);
    sub_2142E1650();
    v47 = v46;
    v48 = *(_OWORD *)(v0 + 1248);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 1232);
    *(_OWORD *)(v0 + 688) = v48;
    *(_QWORD *)(v0 + 704) = *(_QWORD *)(v0 + 1264);
    v49 = *(_OWORD *)(v0 + 1184);
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 1168);
    *(_OWORD *)(v0 + 624) = v49;
    v50 = *(_OWORD *)(v0 + 1216);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 1200);
    *(_OWORD *)(v0 + 656) = v50;
    sub_2142E1650();
    *(_QWORD *)(v0 + 608) = v47;
    *(_QWORD *)(v0 + 616) = v51;
    v52 = *(_QWORD *)(v0 + 128);
    sub_2144257FC();
    swift_bridgeObjectRelease();
    v53 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v53);
    v54 = *(_QWORD *)(v0 + 528);
    v64[12] = *(_QWORD *)(v0 + 448);
    v64[13] = v54;
    v64[14] = v43;
    v64[15] = v45;
    v64[16] = v44;
    v64[17] = v3 - 256;
    v65 = v5;
    v66 = v4;
    MEMORY[0x24BDAC7A8](v55);
    v64[2] = v57;
    v64[3] = v56;
    v64[4] = v43;
    v64[5] = v45;
    v64[6] = v44;
    v64[7] = sub_2143D956C;
    v64[8] = v58;
    v59 = sub_2141D8BF8(&qword_253F101D8);
    v60 = *(_QWORD *)(v0 + 144);
    v61 = MEMORY[0x2199CD934](MEMORY[0x24BEE2620], v60);
    sub_21426FCD0((void (*)(char *, char *))sub_2143D9570, (uint64_t)v64, v60, v59, MEMORY[0x24BEE4078], v61, MEMORY[0x24BEE40A8], v62);
    v63 = *(_QWORD *)(v0 + 536);
    sub_21421D004(v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    swift_release();
    swift_release();
    sub_21421D004(v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    sub_2142748FC(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 200), *(_DWORD *)(v0 + 192));
    sub_2142637C0(*(_QWORD *)(v0 + 48), *(_DWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 8))(v52, v60);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 552) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 520));
    sub_2142637C0(*(_QWORD *)(v0 + 480), *(_DWORD *)(v0 + 488));
    JUMPOUT(0x2143D1E7CLL);
  }
  LODWORD(v66) = 0;
  v65 = 386;
  JUMPOUT(0x2143D6050);
}

void sub_2143D3DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD);
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_QWORD, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  _QWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;

  v16 = *(_QWORD *)(v9 + 288);
  v17 = *(_QWORD *)(v9 + 360);
  v18 = *(_QWORD *)(v9 + 344) + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v19 = *(void (**)(_QWORD))(*(_QWORD *)(v9 + 456) + 32);
  v19(*(_QWORD *)(v9 + 216));
  ((void (*)(_QWORD, uint64_t, uint64_t))v19)(*(_QWORD *)(v9 + 224), v18, v10);
  v20 = sub_2141E801C(v9 + 1056, v9 + 1280, &qword_253F13368);
  if ((*(_BYTE *)(v9 + 1384) & 1) == 0)
  {
    v21 = *(_OWORD *)(v9 + 1360);
    *(_OWORD *)(v9 + 1232) = *(_OWORD *)(v9 + 1344);
    *(_OWORD *)(v9 + 1248) = v21;
    *(_QWORD *)(v9 + 1264) = *(_QWORD *)(v9 + 1376);
    v22 = *(_OWORD *)(v9 + 1296);
    *(_OWORD *)(v9 + 1168) = *(_OWORD *)(v9 + 1280);
    *(_OWORD *)(v9 + 1184) = v22;
    v23 = *(_OWORD *)(v9 + 1312);
    *(_OWORD *)(v9 + 1216) = *(_OWORD *)(v9 + 1328);
    *(_OWORD *)(v9 + 1200) = v23;
    v24 = v12;
    v25 = *(_QWORD *)(v9 + 536);
    v26 = *(_QWORD *)(v9 + 448);
    if (v12 == 255)
    {
      v44 = -1;
      sub_2142B1144(v13 - 256);
      v27 = *(_QWORD *)(v13 - 256);
      v29 = *(_QWORD *)(v13 - 248);
      v30 = *(_QWORD *)(v13 - 240);
      v32 = *(_QWORD *)(v13 - 232);
      v33 = *(_QWORD *)(v13 - 224);
      v35 = *(_QWORD *)(v13 - 216);
      v31 = *(_QWORD *)(v13 - 208);
      v36 = *(_QWORD *)(v13 - 200);
      v38 = *(_QWORD *)(v13 - 192);
      v40 = *(_QWORD *)(v13 - 184);
      v43 = *(_QWORD *)(v13 - 176);
      v41 = *(unsigned __int8 *)(v13 - 168);
      v34 = *(_QWORD *)(v9 + 544);
      v28 = v16;
      v37 = *(_QWORD *)(v9 + 336);
      v39 = *(_QWORD *)(v9 + 304);
      v42 = *(_QWORD *)(v9 + 200);
    }
    else
    {
      v27 = v11;
      v28 = v16;
      v29 = v16;
      v30 = *(_QWORD *)(v9 + 320);
      v31 = *(_QWORD *)(v9 + 328);
      v32 = v17;
      v33 = *(_QWORD *)(v9 + 280);
      v34 = *(_QWORD *)(v9 + 544);
      v35 = v34;
      v36 = *(_QWORD *)(v9 + 296);
      v37 = *(_QWORD *)(v9 + 336);
      v38 = v37;
      v39 = *(_QWORD *)(v9 + 304);
      v40 = v39;
      v41 = v24 & 1;
      v42 = *(_QWORD *)(v9 + 200);
      v43 = v42;
      v44 = v24;
    }
    *(_QWORD *)(v9 + 480) = v43;
    *(_DWORD *)(v9 + 488) = v41;
    *(_QWORD *)(v9 + 512) = &a9;
    *(_QWORD *)(v9 + 608) = v27;
    *(_QWORD *)(v9 + 616) = v29;
    *(_QWORD *)(v9 + 624) = v30;
    *(_QWORD *)(v9 + 632) = v32;
    *(_QWORD *)(v9 + 640) = v33;
    *(_QWORD *)(v9 + 648) = v35;
    *(_QWORD *)(v9 + 656) = v31;
    *(_QWORD *)(v9 + 664) = v36;
    *(_QWORD *)(v9 + 672) = v38;
    *(_QWORD *)(v9 + 680) = v40;
    *(_QWORD *)(v9 + 688) = v43;
    *(_BYTE *)(v9 + 696) = v41;
    MEMORY[0x24BDAC7A8](v20);
    *(_QWORD *)(v9 + 472) = v64;
    v45 = *(_QWORD *)(v9 + 528);
    v64[2] = v26;
    v64[3] = v45;
    v46 = *(_QWORD *)(v9 + 496);
    v48 = *(_QWORD *)(v9 + 576);
    v65 = *(_QWORD *)(v9 + 504);
    v47 = v65;
    v66 = v48;
    v67 = v46;
    v68 = v9 + 608;
    v69 = v9 + 1168;
    v49 = *(_QWORD *)(v9 + 224);
    v70 = *(_QWORD *)(v9 + 216);
    v71 = v49;
    v72 = v15;
    v73 = v14;
    sub_21421D004(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    sub_21421D004(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C7C0);
    v63 = v44;
    v61 = v39;
    v62 = v42;
    v60 = v37;
    v50 = *(_QWORD *)(v9 + 184);
    v51 = *(_QWORD *)(v9 + 320);
    v52 = *(_QWORD *)(v9 + 360);
    v53 = *(_QWORD *)(v9 + 280);
    v54 = v34;
    v55 = *(_QWORD *)(v9 + 296);
    sub_21434CA34(v50, v28, v51, v52, v53, v54, *(_QWORD *)(v9 + 328), v55, v60, v61, v62, v63);
    v56 = sub_2141D8BF8(&qword_253F101D8);
    sub_2141D0320((void (*)(char *, char *))sub_2143D952C, *(_QWORD *)(v9 + 472), v47, v56, MEMORY[0x24BEE4078], *(_QWORD *)(v9 + 560), MEMORY[0x24BEE40A8], v57);
    sub_21421D004(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    sub_2142748FC(v50, v28, v51, v52, v53, *(_QWORD *)(v9 + 544), *(_QWORD *)(v9 + 328), v55, *(_QWORD *)(v9 + 336), *(_QWORD *)(v9 + 304), *(_QWORD *)(v9 + 200), *(_DWORD *)(v9 + 192));
    sub_2142637C0(*(_QWORD *)(v9 + 48), *(_DWORD *)(v9 + 176));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 + 552) + 8))(*(_QWORD *)(v9 + 352), *(_QWORD *)(v9 + 520));
    sub_2142637C0(*(_QWORD *)(v9 + 480), *(_DWORD *)(v9 + 488));
    sub_21421D004(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB38);
    v58 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v9 + 456) + 8);
    v59 = *(_QWORD *)(v9 + 528);
    v58(*(_QWORD *)(v9 + 224), v59);
    v58(*(_QWORD *)(v9 + 216), v59);
    JUMPOUT(0x2143D1E7CLL);
  }
  v74 = 0;
  JUMPOUT(0x2143D60E4);
}

void sub_2143D5A4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  sub_21421BAE4(v0[48], v0[54], v0[49], v0[55], v0[50], v0[51], v0[52], v0[53], v0[47]);
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v5(v4, v1);
  v5(v3, v1);
  JUMPOUT(0x2143D6030);
}

void sub_2143D5C54()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v4 = v0[2];
  v2(v4, v0[45], v3);
  v5 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v6 = v4 + v5;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_21421BAE4(v0[48], v0[54], v0[49], v0[55], v0[50], v0[51], v0[52], v0[53], v0[47]);
    v7 = *(void (**)(uint64_t, uint64_t))(v0[57] + 8);
    v8 = v1 + v5;
    v9 = v0[66];
    v7(v8, v9);
    v7(v1, v9);
    v7(v6, v9);
    v7(v0[2], v9);
    (*(void (**)(_QWORD, _QWORD))(v0[70] + 8))(v0[45], v0[64]);
  }
  else
  {
    sub_21421BAE4(v0[48], v0[54], v0[49], v0[55], v0[50], v0[51], v0[52], v0[53], v0[47]);
    v10 = *(void (**)(uint64_t, uint64_t))(v0[57] + 8);
    v11 = v6;
    v12 = v0[66];
    v10(v11, v12);
    v10(v0[2], v12);
  }
  sub_214425628();
  __break(1u);
  JUMPOUT(0x2143D6064);
}

void sub_2143D5E14()
{
  _QWORD *v0;

  sub_21421BAE4(v0[48], v0[54], v0[49], v0[55], v0[50], v0[51], v0[52], v0[53], v0[47]);
  sub_214425628();
  __break(1u);
  JUMPOUT(0x2143D6064);
}

uint64_t sub_2143D611C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(char *)(v0 + 16);
  sub_214425874();
  sub_214425880();
  if (v3 < 0)
    sub_2143FD828();
  else
    sub_2143FD1BC((uint64_t)v5, v1, v2, v3);
  return sub_2144258B0();
}

uint64_t sub_2143D61AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(char *)(v1 + 16);
  sub_214425880();
  if (v5 < 0)
    return sub_2143FD828();
  else
    return sub_2143FD1BC(a1, v3, v4, v5);
}

uint64_t sub_2143D6234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(char *)(v0 + 16);
  sub_214425874();
  sub_214425880();
  if (v3 < 0)
    sub_2143FD828();
  else
    sub_2143FD1BC((uint64_t)v5, v1, v2, v3);
  return sub_2144258B0();
}

uint64_t sub_2143D62C0(uint64_t a1, uint64_t a2)
{
  return sub_2143D8994(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_2143D62DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(char *)(v0 + 48);
  sub_214425874();
  sub_214425880();
  if (v3 < 0)
    sub_2143FD828();
  else
    sub_2143FD1BC((uint64_t)v5, v1, v2, v3);
  return sub_2144258B0();
}

uint64_t sub_2143D636C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(char *)(v1 + 48);
  sub_214425880();
  if (v5 < 0)
    return sub_2143FD828();
  else
    return sub_2143FD1BC(a1, v3, v4, v5);
}

uint64_t sub_2143D63F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(char *)(v0 + 48);
  sub_214425874();
  sub_214425880();
  if (v3 < 0)
    sub_2143FD828();
  else
    sub_2143FD1BC((uint64_t)v5, v1, v2, v3);
  return sub_2144258B0();
}

BOOL sub_2143D6480(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v11;

  LOBYTE(v11) = *(_BYTE *)(a2 + 16);
  return sub_2143D8A9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48), *(_QWORD *)a2, *(double *)(a2 + 24), a4, a5, a6, a7, a8, a9, a10, *(_QWORD *)(a2 + 8), v11, *(_QWORD *)(a2 + 24),
           *(double *)(a2 + 32),
           *(double *)(a2 + 40),
           *(_BYTE *)(a2 + 48));
}

unint64_t sub_2143D64E8()
{
  unint64_t result;

  result = qword_254D6DD98;
  if (!qword_254D6DD98)
  {
    result = MEMORY[0x2199CD934](&unk_214431F08, &type metadata for AnyPlottableValue);
    atomic_store(result, (unint64_t *)&qword_254D6DD98);
  }
  return result;
}

void sub_2143D652C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD v37[4];
  uint64_t AssociatedTypeWitness;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = a2;
  v61 = a1;
  v56 = a6;
  v42 = sub_2141D8BF8(&qword_253F12168);
  v9 = MEMORY[0x24BDAC7A8](v42);
  v37[1] = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v37[2] = (char *)v37 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v37[0] = (char *)v37 - v13;
  v41 = sub_214423B70();
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v37[3] = (char *)v37 - v15;
  v16 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v16);
  v39 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_214423900();
  v50 = *(_QWORD *)(v18 - 8);
  v51 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v53 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_214423C54();
  v48 = *(_QWORD *)(v20 - 8);
  v49 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v47 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_214423C48();
  v45 = *(_QWORD *)(v22 - 8);
  v46 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v44 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for PlottableValue(0, a4, a5, v24);
  v54 = *(_QWORD *)(v25 - 8);
  v55 = v25;
  v26 = MEMORY[0x24BDAC7A8](v25);
  v52 = (char *)v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v58 = (char *)v37 - v29;
  v59 = *(_QWORD *)(a4 - 8);
  v30 = MEMORY[0x24BDAC7A8](v28);
  MEMORY[0x24BDAC7A8](v30);
  v31 = type metadata accessor for PlottableProjection.Storage(0, a3, a4, a5);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)v37 - v33;
  v57 = a3;
  v35 = type metadata accessor for PlottableProjection(0, a3, a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v61 + *(int *)(v35 + 44), v31);
  v36 = (char *)&loc_2143D68A4 + dword_2143D70B4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2143D68B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = v0[28];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, v2, v4);
  v8 = v0[32];
  v9 = v0[27];
  static PlottableValue.value(_:_:)(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16), *(_QWORD *)(v8 + 24), v4, v5, v9);
  sub_2143D8C7C(v9, v4, v5, v10, (uint64_t)(v0 + 62));
  sub_2141EDFD8((uint64_t)(v0 + 62), (uint64_t)(v0 + 39));
  (*(void (**)(uint64_t, _QWORD))(v0[23] + 8))(v9, v0[24]);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0[26] - 8) + 8))(v0[31]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v8, v3);
  sub_2141EDFD8((uint64_t)(v0 + 39), v6 - 232);
  return sub_2141EDFD8(v6 - 232, v0[25]);
}

void sub_2143D6C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata3;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int8x16_t v36;

  *(_QWORD *)(v0 + 176) = v3;
  v6 = *v2;
  sub_2144258E0();
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 120);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v10 = (char *)v2 + *(int *)(TupleTypeMetadata3 + 48);
  v11 = (char *)v2 + *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 80), v10, v7);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 104), v11, v8);
  *(_QWORD *)(v0 + 216) = v6;
  swift_getAtKeyPath();
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8))(v1, v4);
  v12 = *(_QWORD *)(v0 + 48);
  v13 = *(_QWORD *)(v0 + 56);
  swift_dynamicCast();
  v14 = *(_QWORD *)(v0 + 40);
  sub_214423BB8();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 8);
  *(_QWORD *)(v0 + 224) = v15;
  v15(v12, v13);
  v16 = *(_QWORD *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v16 + 48))(v14, 1, *(_QWORD *)(v0 + 136)) != 1)
  {
    (*(void (**)(void))(v16 + 32))();
    v17 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    sub_2144238F4();
    v22 = *(_QWORD *)v0;
    v23 = *(_QWORD *)v0 + *(int *)(*(_QWORD *)(v0 + 64) + 36);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 16);
    *(_QWORD *)(v0 + 192) = v24;
    v24(v23, v12, v13);
    *(_QWORD *)v22 = v18;
    *(_QWORD *)(v22 + 8) = v19;
    *(_BYTE *)(v22 + 16) = v20;
    *(_QWORD *)(v22 + 24) = v21;
    *(_QWORD *)(v0 + 184) = sub_2141D8BF8(&qword_253F112C8);
    swift_storeEnumTagMultiPayload();
    sub_2141DD130(v18, v19, v20);
    swift_bridgeObjectRetain();
    (*(void (**)(uint64_t, uint64_t))(v0 + 224))(v12, v13);
    v25 = *(_QWORD *)v17;
    v26 = *(_QWORD *)(v17 + 8);
    v27 = *(_BYTE *)(v17 + 16);
    v28 = *(_QWORD *)(v17 + 24);
    sub_2144238E8();
    v29 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 192))(v29 + *(int *)(*(_QWORD *)(v0 + 64) + 36), v12, v13);
    *(_QWORD *)v29 = v25;
    *(_QWORD *)(v29 + 8) = v26;
    *(_BYTE *)(v29 + 16) = v27;
    *(_QWORD *)(v29 + 24) = v28;
    swift_storeEnumTagMultiPayload();
    sub_2141DD130(v25, v26, v27);
    swift_bridgeObjectRetain();
    (*(void (**)(uint64_t, uint64_t))(v0 + 224))(v12, v13);
    v30 = *(_QWORD *)(v0 + 8);
    sub_2141E070C(v22, v30, &qword_253F12168);
    sub_2143D016C(v30, v0 + 640);
    *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 640);
    v31 = *(_QWORD *)(v0 + 648);
    v32 = *(_BYTE *)(v0 + 656);
    *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 664);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 680);
    *(_DWORD *)(v0 + 184) = *(unsigned __int8 *)(v0 + 688);
    sub_2141E070C(v29, v30, &qword_253F12168);
    sub_2143D016C(v30, v0 + 312);
    v33 = *(_QWORD *)(v0 + 312);
    v34 = *(_QWORD *)(v0 + 320);
    v35 = *(_BYTE *)(v0 + 328);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 336);
    *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 352);
    *(_DWORD *)(v0 + 64) = *(unsigned __int8 *)(v0 + 360);
    sub_2141E0750(v29, &qword_253F12168);
    sub_2141E0750(v22, &qword_253F12168);
    swift_release();
    *(_BYTE *)(v0 + 488) = v32;
    *(_BYTE *)(v0 + 472) = v35;
    *(_QWORD *)(v0 + 496) = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 504) = v31;
    *(_BYTE *)(v0 + 512) = v32;
    *(_DWORD *)(v0 + 513) = *(_DWORD *)(v0 + 481);
    *(_DWORD *)(v0 + 516) = *(_DWORD *)(v0 + 484);
    *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 224);
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 192);
    *(_BYTE *)(v0 + 544) = *(_DWORD *)(v0 + 184);
    *(_DWORD *)(v0 + 545) = *(_DWORD *)(v0 + 474);
    *(_DWORD *)(v0 + 548) = *(_DWORD *)(v0 + 477);
    *(_OWORD *)(v0 + 552) = *(_OWORD *)(v0 + 696);
    *(_QWORD *)(v0 + 568) = v33;
    *(_QWORD *)(v0 + 576) = v34;
    *(_BYTE *)(v0 + 584) = *(_BYTE *)(v0 + 472);
    *(_DWORD *)(v0 + 585) = *(_DWORD *)(v0 + 465);
    *(_DWORD *)(v0 + 588) = *(_DWORD *)(v0 + 468);
    *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 608) = *(_QWORD *)(v0 + 72);
    *(_BYTE *)(v0 + 616) = *(_DWORD *)(v0 + 64);
    *(_DWORD *)(v0 + 617) = *(_DWORD *)(v0 + 458);
    *(_DWORD *)(v0 + 620) = *(_DWORD *)(v0 + 461);
    *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 368);
    v36 = sub_21428FB04(v0 + 496);
    (*(void (**)(_QWORD, __n128))(*(_QWORD *)(*(_QWORD *)(v0 + 208) - 8) + 8))(*(_QWORD *)(v0 + 248), (__n128)v36);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 120));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 96));
    (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 176) - 8) + 8))(*(_QWORD *)(v0 + 256));
    JUMPOUT(0x2143D6C64);
  }
  __break(1u);
  JUMPOUT(0x2143D70B4);
}

void sub_2143D70C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  _QWORD v32[16];
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v32[15] = a3;
  v33 = a2;
  v35 = a1;
  v32[12] = a7;
  v10 = type metadata accessor for PlottableValue(0, a5, a6, a4);
  v32[8] = *(_QWORD *)(v10 - 8);
  v32[9] = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v32[7] = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v32[14] = (char *)v32 - v14;
  v32[13] = *(_QWORD *)(a5 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v32[2] = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v32[6] = (char *)v32 - v17;
  v18 = type metadata accessor for PlottableProjection.Storage(0, a4, a5, a6);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v32[1] = (char *)v32 - v22;
  MEMORY[0x24BDAC7A8](v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v25 = (char *)v32 - v24;
  v32[10] = a4;
  v32[4] = a6;
  v32[5] = a5;
  v26 = type metadata accessor for PlottableProjection(0, a4, a5, a6);
  v27 = *(int *)(v26 + 44);
  v28 = v33 + v27;
  v29 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
  v32[11] = v19;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v30(v25, v35 + v27, v18);
  v30(v29, v28, v18);
  v34 = v25;
  v31 = (char *)sub_2143D7314 + 4 * word_214431E20[swift_getEnumCaseMultiPayload()];
  v32[3] = v26;
  __asm { BR              X10 }
}

uint64_t sub_2143D7314()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t result;

  v2(v1, v0[17], v3);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(v0[13] + 8))(v1, v0[5]);
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[13] + 32);
    v8 = v0[5];
    v7 = v0[6];
    v6(v7, v1, v8);
    v9 = v0[2];
    v6(v9, v4, v8);
    v10 = v0[18];
    v11 = v0[14];
    v12 = v7;
    v13 = v0[4];
    static PlottableValue.value(_:_:)(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16), *(_QWORD *)(v10 + 24), v8, v13, v11);
    v14 = v0[16];
    v15 = v0[7];
    static PlottableValue.value(_:_:)(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16), *(_QWORD *)(v14 + 24), v8, v13, v15);
    sub_2143D8D5C(v11, v15, v8, v13, (uint64_t)(v0 + 41));
    sub_2141EDFD8((uint64_t)(v0 + 41), (uint64_t)(v0 + 23));
    v16 = *(void (**)(uint64_t, uint64_t))(v0[8] + 8);
    v17 = v15;
    v18 = v0[9];
    v16(v17, v18);
    v16(v11, v18);
    (*(void (**)(_QWORD))(*(_QWORD *)(v0[10] - 8) + 8))(v0[15]);
    v19 = *(void (**)(uint64_t, uint64_t))(v0[13] + 8);
    v19(v9, v8);
    v19(v12, v8);
    v20 = v0[3];
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
    v21(v14, v20);
    v21(v10, v20);
    sub_2141EDFD8((uint64_t)(v0 + 23), v5 - 232);
    v22 = v0[12];
    (*(void (**)(_QWORD, uint64_t))(v0[11] + 8))(v0[17], v3);
    return sub_2141EDFD8(v5 - 232, v22);
  }
  return result;
}

void sub_2143D77F8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t AssociatedTypeWitness;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = a3;
  v93 = a1;
  v89 = a7;
  v68 = sub_2141D8BF8(&qword_253F12168);
  v11 = MEMORY[0x24BDAC7A8](v68);
  v58[0] = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v58[1] = (char *)v58 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v69 = (char *)v58 - v15;
  v16 = sub_214423B70();
  v70 = *(_QWORD *)(v16 - 8);
  v71 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v61 = (char *)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v58[2] = (char *)v58 - v18;
  v19 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v19);
  v60 = (char *)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_214423900();
  v76 = *(_QWORD *)(v21 - 8);
  v77 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v80 = (char *)v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_214423C54();
  v91 = *(_QWORD *)(v23 - 8);
  v92 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v75 = (char *)v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_214423C48();
  v73 = *(_QWORD *)(v25 - 8);
  v74 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v72 = (char *)v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for PlottableValue(0, a5, a6, v27);
  v81 = *(_QWORD *)(v28 - 8);
  v82 = v28;
  v29 = MEMORY[0x24BDAC7A8](v28);
  v79 = (char *)v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v90 = (char *)v58 - v32;
  v94 = *(_QWORD *)(a5 - 8);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v78 = (char *)v58 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v95 = (char *)v58 - v35;
  v96 = a6;
  v36 = a4;
  v88 = a5;
  v37 = type metadata accessor for PlottableProjection.Storage(0, a4, a5, a6);
  v85 = *(_QWORD *)(v37 - 8);
  v86 = v37;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)v58 - v38;
  v41 = *((_QWORD *)a2 + 1);
  v40 = *((_QWORD *)a2 + 2);
  v42 = *((_QWORD *)a2 + 3);
  v43 = *((_QWORD *)a2 + 4);
  v44 = *((_QWORD *)a2 + 5);
  v45 = *((_QWORD *)a2 + 6);
  v46 = *((_QWORD *)a2 + 7);
  v47 = *((_QWORD *)a2 + 8);
  v49 = *((_QWORD *)a2 + 9);
  v48 = *((_QWORD *)a2 + 10);
  v50 = *((_QWORD *)a2 + 11);
  v51 = a2[96];
  v52 = *((_QWORD *)a2 + 13);
  v53 = a2[112];
  v97 = v36;
  if (v51 != 255)
  {
    v64 = v53;
    v54 = *a2;
    v62 = v40;
    v63 = v52;
    v83 = v42;
    v84 = v43;
    v87 = v44;
    v65 = v45;
    v66 = v46;
    v67 = v47;
    __asm { BR              X10 }
  }
  v57 = v48;
  v55 = v52;
  sub_2142748FC(v41, v40, v42, v43, v44, v45, v46, v47, v49, v57, v50, 0xFFu);
  sub_2142637C0(v55, v53);
  v87 = type metadata accessor for PlottableProjection(0, v97, v88, v96);
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v39, v93 + *(int *)(v87 + 44), v86);
  v56 = (char *)&loc_2143D7E38 + dword_2143D8694[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2143D7E4C()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = v0[40];
  v7 = v0[41];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v4, v3);
  v8 = v0[36];
  v9 = v0[42];
  static PlottableValue.value(_:_:)(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16), *(_QWORD *)(v5 + 24), v3, v9, v8);
  sub_2143D90EC(v8, v2, v1, v3, v9, (uint64_t)(v0 + 94));
  sub_2141EDFD8((uint64_t)(v0 + 94), (uint64_t)(v0 + 53));
  (*(void (**)(uint64_t, _QWORD))(v0[25] + 8))(v8, v0[26]);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0[45] - 8) + 8))(v0[46]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v0[31] - 8) + 8))(v5);
  sub_2141EDFD8((uint64_t)(v0 + 53), (uint64_t)(v0 + 76));
  return sub_2141EDFD8((uint64_t)(v0 + 76), v0[35]);
}

void sub_2143D8640()
{
  sub_214425628();
  __break(1u);
  JUMPOUT(0x2143D8684);
}

void sub_2143D86A8()
{
  uint64_t v0;
  char *v1;
  _BYTE v2[320];

  sub_2141EDFD8(v0, (uint64_t)v2);
  v1 = (char *)sub_2143D86EC + 4 * byte_214431E2A[sub_2141EF1D0((uint64_t)v2)];
  __asm { BR              X10 }
}

uint64_t sub_2143D86EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = sub_2141EF754((uint64_t)&v5);
  v1 = *(char *)(v0 + 48);
  if ((v1 & 0x80000000) != 0)
    return *(_BYTE *)(v0 + 48) & 1;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  if (*(_BYTE *)(v0 + 48))
  {
    if (*(_BYTE *)(v0 + 48) == 1)
    {
      v1 = 1;
      sub_2141EF1B0(*(_QWORD *)(v0 + 32), v3, 1);
      sub_2141EF1B0(v2, v3, 1);
    }
  }
  else
  {
    sub_2141EF1B0(*(_QWORD *)(v0 + 32), v3, 0);
    sub_2141EF1B0(v2, v3, 0);
    return 0;
  }
  return v1;
}

double sub_2143D8858@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, double *a6@<X8>, double a7@<D0>, double a8@<D1>, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  double v20;
  double v22;
  double v23;

  v16 = sub_2141D8BF8(&qword_254D6DDC8);
  sub_2142E107C(a2, v16, a5, a9);
  sub_2142E107C(a3, v16, a5, a9);
  type metadata accessor for MappedCoefficients(0, a4, v17, v18);
  result = sub_2142B11B0(a1, v23, v22) + a7;
  *a6 = result;
  a6[1] = v20 + a8;
  return result;
}

uint64_t sub_2143D8994(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 < 0)
  {
    if (a6 < 0)
    {
      if ((a3 & 1) != 0)
      {
        if ((a6 & 1) != 0 && *(double *)&a1 == *(double *)&a4 && *(double *)&a2 == *(double *)&a5)
          return 1;
      }
      else if ((a6 & 1) == 0 && *(double *)&a1 == *(double *)&a4 && *(double *)&a2 == *(double *)&a5)
      {
        return 1;
      }
    }
  }
  else if ((a6 & 0x80) == 0)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        if (a6 == 1 && *(double *)&a1 == *(double *)&a4)
          return 1;
      }
      else if (a6 == 2)
      {
        if (a1 == a4 && a2 == a5)
          return 1;
        if ((sub_214425790() & 1) != 0)
          return 1;
      }
    }
    else if (!a6 && *(double *)&a1 == *(double *)&a4)
    {
      return 1;
    }
  }
  return 0;
}

BOOL sub_2143D8A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, double a20,double a21,char a22)
{
  if ((sub_2144247F4() & 1) == 0)
    return 0;
  if (a7 < 0)
  {
    if (a22 < 0)
    {
      if ((a7 & 1) != 0)
      {
        if ((a22 & 1) == 0)
          return 0;
      }
      else if ((a22 & 1) != 0)
      {
        return 0;
      }
      return *(double *)&a5 == a20 && *(double *)&a6 == a21;
    }
    return 0;
  }
  if (a22 < 0)
    return 0;
  if (!a7)
  {
    if (!a22)
      return *(double *)&a5 == a20;
    return 0;
  }
  if (a7 != 1)
    return a22 == 2 && (a5 == *(_QWORD *)&a20 && a6 == *(_QWORD *)&a21 || (sub_214425790() & 1) != 0);
  if (a22 != 1)
    return 0;
  return *(double *)&a5 == a20;
}

uint64_t sub_2143D8BA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  swift_getAtKeyPath();
  v4 = v3;
  v5 = 0;
  sub_2143D90A4((uint64_t)&v4);
  return sub_2141EDFD8((uint64_t)&v4, a1);
}

uint64_t sub_2143D8BFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  swift_getAtKeyPath();
  swift_getAtKeyPath();
  v5 = v4;
  v6 = 0;
  v7 = v3;
  v8 = 0;
  sub_2141EFF40((uint64_t)&v5);
  return sub_2141EDFD8((uint64_t)&v5, a1);
}

uint64_t sub_2143D8C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  __int128 v25;

  v9 = type metadata accessor for PlottableValue(0, a2, a3, a4);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v14 - v10, a1);
  sub_2143D046C((uint64_t)v11, a2, a3, (uint64_t)&v14);
  v20 = v14;
  v21 = v15;
  v22 = v16;
  v23 = v17;
  v24 = v18;
  v25 = v19;
  sub_21428F980((uint64_t)&v20);
  return sub_2141EDFD8((uint64_t)&v20, a5);
}

uint64_t sub_2143D8D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v17[4];
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  __int128 v35;
  _BYTE v36[7];
  _BYTE v37[7];
  char v38;
  _BYTE v39[7];
  _BYTE v40[7];
  char v41;
  _QWORD v42[2];
  char v43;
  _BYTE v44[7];
  __int128 v45;
  uint64_t v46;
  char v47;
  _BYTE v48[7];
  __int128 v49;
  __int128 v50;
  char v51;
  _BYTE v52[7];
  uint64_t v53;
  __int128 v54;
  char v55;
  _BYTE v56[7];
  __int128 v57;

  v22 = a2;
  v23 = a5;
  v8 = type metadata accessor for PlottableValue(0, a3, a4, a4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v17[-v9];
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16);
  v12(&v17[-v9], a1, v8);
  sub_2143D046C((uint64_t)v10, a3, a4, (uint64_t)v24);
  v14 = v24[0];
  v13 = v24[1];
  v15 = v25;
  v19 = v27;
  v18 = v28;
  v20 = v26;
  v21 = v29;
  v12(v10, v22, v8);
  sub_2143D046C((uint64_t)v10, a3, a4, (uint64_t)&v30);
  v41 = v15;
  v38 = v31;
  v42[0] = v14;
  v42[1] = v13;
  v43 = v15;
  *(_DWORD *)v44 = *(_DWORD *)v40;
  *(_DWORD *)&v44[3] = *(_DWORD *)&v40[3];
  v45 = v20;
  v46 = v19;
  v47 = v18;
  *(_DWORD *)&v48[3] = *(_DWORD *)&v39[3];
  *(_DWORD *)v48 = *(_DWORD *)v39;
  v49 = v21;
  v50 = v30;
  v51 = v31;
  *(_DWORD *)v52 = *(_DWORD *)v37;
  *(_DWORD *)&v52[3] = *(_DWORD *)&v37[3];
  v53 = v32;
  v54 = v33;
  v55 = v34;
  *(_DWORD *)&v56[3] = *(_DWORD *)&v36[3];
  *(_DWORD *)v56 = *(_DWORD *)v36;
  v57 = v35;
  sub_21428FB04((uint64_t)v42);
  return sub_2141EDFD8((uint64_t)v42, v23);
}

uint64_t sub_2143D8F18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v14)(char *, uint64_t);
  uint64_t v15;

  v2 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_214423B70();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v5);
  v12(v4, (uint64_t)v11, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    result = sub_2141E0750((uint64_t)v4, &qword_253F13340);
    if (v7 == 8)
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    else
      __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    sub_2144239F0();
    v14 = *(void (**)(char *, uint64_t))(v6 + 8);
    v14(v9, v5);
    return ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  }
  return result;
}

int8x16_t sub_2143D90A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | 0x2000000000000000;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 64) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_214427830);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = v2;
  return result;
}

uint64_t sub_2143D90EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  char v30;

  v12 = type metadata accessor for PlottableValue(0, a4, a5, a4);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v17 - v13, a1);
  sub_2143D046C((uint64_t)v14, a4, a5, (uint64_t)&v17);
  v23 = v17;
  v24 = v18;
  v25 = v19;
  v26 = v20;
  v27 = v21;
  v28 = v22;
  v29 = a2;
  v30 = a3;
  sub_21439A440((uint64_t)&v23);
  return sub_2141EDFD8((uint64_t)&v23, a6);
}

double sub_2143D91F4@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double v3;
  double v4;
  double result;
  double v6;

  v3 = *(double *)(v1 + 64);
  v4 = *(double *)(v1 + 72);
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  result = v4 + v6;
  *a1 = v3 + v6;
  a1[1] = v4 + v6;
  return result;
}

double sub_2143D926C@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double v3;
  double result;
  double v5;

  v3 = *(double *)(v1 + 56);
  swift_getAtKeyPath();
  result = v3 + v5;
  *a1 = v3 + v5;
  a1[1] = v3 + v5;
  return result;
}

double sub_2143D92B4(double a1)
{
  uint64_t v1;

  return *(double *)(v1 + 24) + a1 + *(double *)(v1 + 40);
}

void sub_2143D92EC(uint64_t a1, uint64_t a2, double (*a3)(uint64_t, double, double))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v39;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v39 = MEMORY[0x24BEE4AF8];
  sub_2141D4108(0, v7, 0);
  v33 = v6;
  v35 = a2;
  v36 = a1;
  v34 = v5;
  v32 = v7;
  if (v7)
  {
    v8 = v5;
    v9 = (double *)(a1 + 32);
    v10 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v12 = v6;
    v13 = v8;
    while (v13)
    {
      if (!v12)
        goto LABEL_26;
      v14 = a3(v11, *v9, *v10);
      v16 = v15;
      v18 = *(_QWORD *)(v39 + 16);
      v17 = *(_QWORD *)(v39 + 24);
      if (v18 >= v17 >> 1)
        v11 = (uint64_t)sub_2141D4108((char *)(v17 > 1), v18 + 1, 1);
      *(_QWORD *)(v39 + 16) = v18 + 1;
      v19 = v39 + 16 * v18;
      --v12;
      *(double *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v16;
      --v13;
      ++v10;
      ++v9;
      if (!--v7)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
LABEL_13:
    if (v34 <= v33)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v20 = 0;
    if (v32 <= v33)
      v21 = v33;
    else
      v21 = v32;
    v37 = v21 - v32;
    v22 = v34 - v32;
    v23 = 8 * v32 + 32;
    v24 = v36 + v23;
    v25 = v35 + v23;
    while (v22 != v20)
    {
      if (v33 - v32 == v20)
        goto LABEL_24;
      if (v37 == v20)
        goto LABEL_28;
      v26 = a3(v11, *(double *)(v24 + 8 * v20), *(double *)(v25 + 8 * v20));
      v28 = v27;
      v30 = *(_QWORD *)(v39 + 16);
      v29 = *(_QWORD *)(v39 + 24);
      if (v30 >= v29 >> 1)
        v11 = (uint64_t)sub_2141D4108((char *)(v29 > 1), v30 + 1, 1);
      *(_QWORD *)(v39 + 16) = v30 + 1;
      v31 = v39 + 16 * v30;
      *(double *)(v31 + 32) = v26;
      *(_QWORD *)(v31 + 40) = v28;
      if (v22 == ++v20)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

double sub_2143D952C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return sub_2143D8858(a1, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, *(double *)(v2 + 88), *(double *)(v2 + 96), *(_QWORD *)(v2 + 40));
}

void sub_2143D9570(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2143D95F4(a1, a2);
}

double sub_2143D9584(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  double v10;

  v10 = *(double *)(v6 + 64);
  type metadata accessor for MappedCoefficients(0, *(_QWORD *)(v6 + 16), a5, a6);
  return v10 + sub_2142B11B0(a1, a2, a3);
}

void sub_2143D95F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double (*v5)(uint64_t, double, double);
  uint64_t TupleTypeMetadata2;
  uint64_t v7;

  v5 = *(double (**)(uint64_t, double, double))(v2 + 56);
  sub_2141D7924(&qword_253F101D8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(double *)a2 = v5(a1, *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48)), *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48) + 8));
  *(_QWORD *)(a2 + 8) = v7;
}

double sub_2143D9670@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;
  double v16;

  v7 = *(_QWORD *)(v4 + 56);
  v8 = *(double *)(v4 + 72);
  v9 = *(double *)(v4 + 80);
  v10 = *(double *)(v4 + 88);
  v11 = *(double *)(v4 + 96);
  v12 = *(double *)(v4 + 104);
  v13 = *(double *)(v7 + 16);
  if (*(_BYTE *)(v7 + 24))
    v13 = 0.0;
  v14 = v8 + v13;
  type metadata accessor for MappedCoefficients(0, *(_QWORD *)(v4 + 16), a2, a3);
  result = v10 + v9 + sub_2142B11B0(a1, v8, v14);
  *a4 = result;
  a4[1] = v12 + v16 - v11;
  return result;
}

double sub_2143D9720@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  uint64_t v4;
  double v7;
  double v8;
  double v9;
  double result;
  double v11;

  v7 = *(double *)(v4 + 64);
  v8 = *(double *)(v4 + 72);
  v9 = *(double *)(v4 + 80);
  type metadata accessor for MappedCoefficients(0, *(_QWORD *)(v4 + 16), a2, a3);
  result = v8 + sub_2142B11B0(a1, v7, v7);
  *a4 = result;
  a4[1] = v9 + v11;
  return result;
}

double sub_2143D97A4(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v8 = *(_QWORD *)(v5 + 56);
  v9 = *(double *)(v5 + 72);
  v10 = *(double *)(v5 + 80);
  v11 = *(double *)(v8 + 16);
  if (*(_BYTE *)(v8 + 24))
    v11 = 0.0;
  v12 = v11 + a2;
  type metadata accessor for MappedCoefficients(0, *(_QWORD *)(v5 + 16), a4, a5);
  return v10 + v9 + sub_2142B11B0(a1, a2, v12);
}

void sub_2143D983C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2143D98BC(a1, a2);
}

double sub_2143D9850(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  double v8;

  v8 = *(double *)(v5 + 64);
  type metadata accessor for MappedCoefficients(0, *(_QWORD *)(v5 + 16), a4, a5);
  return v8 + sub_2142B11B0(a1, a2, a2);
}

void sub_2143D98BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double (*v5)(uint64_t, double);
  uint64_t TupleTypeMetadata2;
  uint64_t v7;

  v5 = *(double (**)(uint64_t, double))(v2 + 56);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(double *)a2 = v5(a1, *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48)));
  *(_QWORD *)(a2 + 8) = v7;
}

uint64_t destroy for AnyPlottableValue.Storage(uint64_t a1)
{
  return sub_2141EF1B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s6Charts17AnyPlottableValueV7StorageOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2141DD140(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnyPlottableValue.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2141DD140(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_2141EF1B0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyPlottableValue.Storage(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_2141EF1B0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPlottableValue.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 63);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnyPlottableValue.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 63;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_2143D9AC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t sub_2143D9AD0(uint64_t result)
{
  *(_BYTE *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t sub_2143D9AE0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 3 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for AnyPlottableValue.Storage()
{
  return &type metadata for AnyPlottableValue.Storage;
}

unint64_t sub_2143D9B08()
{
  unint64_t result;

  result = qword_254D6DDD8;
  if (!qword_254D6DDD8)
  {
    result = MEMORY[0x2199CD934](&unk_214431F78, &type metadata for AnyPlottableValue.Storage);
    atomic_store(result, (unint64_t *)&qword_254D6DDD8);
  }
  return result;
}

uint64_t LinePlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)&v14 = sub_21442480C();
  *((_QWORD *)&v14 + 1) = v6;
  v15 = v7 & 1;
  v16 = v8;
  v17 = sub_21442480C();
  v18 = v9;
  v19 = v10 & 1;
  v20 = v11;
  v21 = a2;
  v22 = a3;
  v23 = a4 & 1;
  v24 = a5;
  v25 = a6;
  sub_2143A567C((uint64_t)&v14);
  return sub_2143A5698(&v14, a1);
}

uint64_t LinePlot<A>.init(x:y:t:domain:function:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)&v22 = sub_21442480C();
  *((_QWORD *)&v22 + 1) = v11;
  v23 = v12 & 1;
  v24 = v13;
  v25 = sub_21442480C();
  v26 = v14;
  v27 = v15 & 1;
  v28 = v16;
  v29 = sub_21442480C();
  v30 = v17;
  v31 = v18 & 1;
  v32 = v19;
  v33 = a2;
  v34 = a3;
  v35 = a8;
  v36 = a9;
  sub_2143A56D4((uint64_t)&v22);
  return sub_2143A5698(&v22, a1);
}

uint64_t LinePlot<A>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2142D7304(v2, v4, (uint64_t)v7);
  sub_2142D6BB0((uint64_t)v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_2143D9E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LinePlot<A>.body.getter(a1, a2);
}

uint64_t LinePlot.init<A, B, C>(_:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v52 = a8;
  v53 = a6;
  v50 = a5;
  v59 = a3;
  v60 = a2;
  v57 = a9;
  v58 = a1;
  v55 = a10;
  v45 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a10);
  v16 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v46 = (char *)&v43 - v17;
  v18 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a5, a8);
  v19 = *(_QWORD *)(v18 - 8);
  v44 = v18;
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - v21;
  v51 = *(_QWORD *)(a4 - 8);
  v23 = v51;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v26;
  v54 = type metadata accessor for VectorizedLinePlotContent(0, a4, a7, v27);
  v56 = *(_QWORD *)(v54 - 8);
  v28 = MEMORY[0x24BDAC7A8](v54);
  v48 = (uint64_t)&v43 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))(v26, v58, a4, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v60, v18);
  v30 = v46;
  v31 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v46, v59, v49);
  v32 = (*(unsigned __int8 *)(v19 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v33 = (v20 + *(unsigned __int8 *)(v16 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v34 = (char *)swift_allocObject();
  v35 = v50;
  *((_QWORD *)v34 + 2) = a4;
  *((_QWORD *)v34 + 3) = v35;
  v36 = v45;
  *((_QWORD *)v34 + 4) = v53;
  *((_QWORD *)v34 + 5) = v36;
  v37 = v55;
  *((_QWORD *)v34 + 6) = v52;
  *((_QWORD *)v34 + 7) = v37;
  v38 = &v34[v32];
  v39 = v44;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v38, v22, v44);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v34[v33], v30, v31);
  v40 = v48;
  sub_2142868CC((uint64_t)v47, (uint64_t)sub_2143DB1F0, (uint64_t)v34, a4, (uint64_t)&type metadata for LineMark, v36, (uint64_t)&protocol witness table for LineMark, v48);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v59, v31);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v60, v39);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v58, a4);
  v41 = v54;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedLinePlotContent<A>, v54);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v57, v40, v41);
}

void *sub_2143DA1A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _BYTE v50[320];

  v42 = a5;
  v47 = a2;
  v48 = a3;
  v45 = a1;
  v49 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = a8;
  v46 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a5, a8);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v41 = (char *)&v38 - v12;
  v14 = type metadata accessor for PlottableValue(0, a5, a8, v13);
  MEMORY[0x24BDAC7A8](v14);
  v39 = a6;
  v40 = (uint64_t)&v38 - v15;
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a4, a6);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v38 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v38 - v22;
  v25 = type metadata accessor for PlottableValue(0, a4, a6, v24);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v38 - v27;
  v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  v30 = v45;
  v29(v23, v45, AssociatedTypeWitness, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v47, v16);
  v31 = v39;
  sub_214270F68((uint64_t)v23, (uint64_t)v19, a4, AssociatedTypeWitness, v39, (uint64_t)v28);
  ((void (*)(char *, uint64_t, uint64_t))v29)(v23, v30, AssociatedTypeWitness);
  v32 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v41, v48, v46);
  v33 = v40;
  v34 = (uint64_t)v32;
  v35 = v42;
  v36 = v43;
  sub_214270F68((uint64_t)v23, v34, v42, AssociatedTypeWitness, v43, v40);
  LineMark.init<A, B>(x:y:)((uint64_t)v28, v33, a4, v35, v31, v36, v50);
  return memcpy(v49, v50, 0x131uLL);
}

uint64_t LinePlot.init<A, B, C, D>(_:x:y:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v63 = a6;
  v81 = a4;
  v82 = a3;
  v79 = a1;
  v80 = a2;
  v74 = a9;
  v68 = a7;
  v69 = a12;
  v72 = a8;
  v73 = a13;
  v65 = a11;
  v76 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a13);
  v75 = *(_QWORD *)(v64 - 8);
  v66 = *(_QWORD *)(v75 + 64);
  MEMORY[0x24BDAC7A8](v64);
  v78 = (char *)&v58 - v18;
  v77 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v19 = *(_QWORD *)(v77 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v77);
  v22 = (char *)&v58 - v21;
  v60 = (char *)&v58 - v21;
  v23 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a11);
  v24 = *(_QWORD *)(v23 - 8);
  v59 = v23;
  v25 = *(_QWORD *)(v24 + 64);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v58 - v26;
  v67 = *(_QWORD *)(a5 - 8);
  v28 = v67;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v31;
  v33 = type metadata accessor for VectorizedLinePlotContent(0, a5, v76, v32);
  v34 = *(_QWORD *)(v33 - 8);
  v70 = v33;
  v71 = v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v62 = (uint64_t)&v58 - v36;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16))(v31, v79, a5, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v80, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v82, v77);
  v37 = v75;
  v38 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v78, v81, v64);
  v39 = (*(unsigned __int8 *)(v24 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v40 = (v25 + *(unsigned __int8 *)(v19 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v41 = (v20 + *(unsigned __int8 *)(v37 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v42 = (char *)swift_allocObject();
  v43 = v63;
  *((_QWORD *)v42 + 2) = a5;
  *((_QWORD *)v42 + 3) = v43;
  v44 = v72;
  *((_QWORD *)v42 + 4) = v68;
  *((_QWORD *)v42 + 5) = v44;
  v45 = v76;
  v46 = v65;
  *((_QWORD *)v42 + 6) = v76;
  *((_QWORD *)v42 + 7) = v46;
  v47 = v73;
  *((_QWORD *)v42 + 8) = v69;
  *((_QWORD *)v42 + 9) = v47;
  v48 = v27;
  v49 = v59;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v42[v39], v48, v59);
  v50 = &v42[v40];
  v51 = v77;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v50, v60, v77);
  v52 = &v42[v41];
  v53 = v75;
  v54 = v38;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v52, v78, v38);
  v55 = v62;
  sub_2142868CC((uint64_t)v61, (uint64_t)sub_2143DB84C, (uint64_t)v42, a5, (uint64_t)&type metadata for LineMark, v45, (uint64_t)&protocol witness table for LineMark, v62);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v81, v54);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v82, v51);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v80, v49);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v79, a5);
  v56 = v70;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedLinePlotContent<A>, v70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 32))(v74, v55, v56);
}

void *sub_2143DA7F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _BYTE v73[320];

  v66 = a7;
  v70 = a3;
  v71 = a4;
  v63 = a1;
  v64 = a2;
  v72 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v67 = a12;
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v68 = *(_QWORD *)(v16 - 8);
  v69 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v65 = (char *)&v51 - v17;
  v19 = type metadata accessor for PlottableValue(0, a7, a12, v18);
  MEMORY[0x24BDAC7A8](v19);
  v62 = (uint64_t)&v51 - v20;
  v58 = a6;
  v59 = a11;
  v21 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a11);
  v60 = *(_QWORD *)(v21 - 8);
  v61 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v57 = (char *)&v51 - v22;
  v24 = type metadata accessor for PlottableValue(0, a6, a11, v23);
  MEMORY[0x24BDAC7A8](v24);
  v56 = (uint64_t)&v51 - v25;
  v26 = a5;
  v52 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a5, a10);
  v27 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v29 = (char *)&v51 - v28;
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v51 - v32;
  v54 = v26;
  v55 = a10;
  v35 = type metadata accessor for PlottableValue(0, v26, a10, v34);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v51 - v37;
  v53 = (uint64_t)&v51 - v37;
  v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 16);
  v40 = v63;
  v39(v33, v63, AssociatedTypeWitness, v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v64, v52);
  sub_214270F68((uint64_t)v33, (uint64_t)v29, v26, AssociatedTypeWitness, a10, (uint64_t)v38);
  ((void (*)(char *, uint64_t, uint64_t))v39)(v33, v40, AssociatedTypeWitness);
  v41 = (uint64_t)v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v57, v70, v61);
  v42 = v56;
  v43 = v58;
  v44 = v59;
  sub_214270F68((uint64_t)v33, v41, v58, AssociatedTypeWitness, v59, v56);
  ((void (*)(char *, uint64_t, uint64_t))v39)(v33, v40, AssociatedTypeWitness);
  v45 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v65, v71, v69);
  v46 = v62;
  v47 = v66;
  v48 = AssociatedTypeWitness;
  v49 = v67;
  sub_214270F68((uint64_t)v33, v45, v66, v48, v67, v62);
  LineMark.init<A, B, C>(x:y:series:)(v53, v42, v46, v54, v43, v47, v55, v44, v73, v49);
  return memcpy(v72, v73, 0x131uLL);
}

uint64_t LinePlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  v17 = a3 & 1;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7 & 1;
  v22 = a8;
  v23 = a10;
  v24 = a11;
  v25 = a12 & 1;
  v26 = a13;
  v27 = a14;
  sub_2143A567C((uint64_t)&v16);
  return sub_2143A5698(&v16, a9);
}

uint64_t LinePlot<A>.init<A, B>(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  v40 = a6;
  v41 = a7;
  v39 = a5;
  v38 = a4;
  v37 = a3;
  v36 = a1;
  v42 = a9;
  v12 = *(_QWORD *)(a10 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  (*(void (**)(char *, __n128))(v16 + 16))((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  v34 = sub_214424818();
  v33 = v20;
  v22 = v21;
  v35 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a10);
  v24 = sub_214424818();
  v26 = v25;
  v28 = v27;
  v30 = v29;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a10);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v36, a8);
  *(_QWORD *)&v43 = v34;
  *((_QWORD *)&v43 + 1) = v33;
  v44 = v22 & 1;
  v45 = v35;
  v46 = v24;
  v47 = v26;
  v48 = v28 & 1;
  v49 = v30;
  v50 = v37;
  v51 = v38;
  v52 = v39 & 1;
  v53 = v40;
  v54 = v41;
  sub_2143A567C((uint64_t)&v43);
  return sub_2143A5698(&v43, v42);
}

uint64_t LinePlot<A>.init(x:y:t:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  v20 = a3 & 1;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7 & 1;
  v25 = a8;
  v26 = a12;
  v27 = a13;
  v28 = a14 & 1;
  v29 = a15;
  v30 = a10;
  v31 = a11;
  v32 = a16;
  v33 = a17;
  sub_2143A56D4((uint64_t)&v19);
  return sub_2143A5698(&v19, a9);
}

uint64_t type metadata accessor for VectorizedLinePlotContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VectorizedLinePlotContent);
}

uint64_t sub_2143DAE48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata3;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0[3];
  v2 = v0[4];
  v4 = v0[6];
  v3 = v0[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v3);
  v11 = (v8 + v9 + *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (char *)v0 + v8;
  sub_2141ED0BC(*(_QWORD *)v12, *((_QWORD *)v12 + 1), v12[16]);
  swift_bridgeObjectRelease();
  v13 = &v12[*(int *)(v6 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v13, v1);
      break;
    case 1u:
      v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v14(v13, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v14(&v13[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v16 = sub_214423C48();
      v17 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 48)], v16);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 64)], v17);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v11), *(_QWORD *)((char *)v0 + v11 + 8), *((_BYTE *)v0 + v11 + 16));
  swift_bridgeObjectRelease();
  v19 = (char *)v0 + v11 + *(int *)(v10 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v2, v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v19, v2);
      break;
    case 1u:
      v20 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
      v20(v19, v2);
      v21 = swift_getTupleTypeMetadata2();
      v20(&v19[*(int *)(v21 + 48)], v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v22 = sub_214423C48();
      v23 = sub_214423C54();
      v24 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(&v19[*(int *)(v24 + 48)], v22);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(&v19[*(int *)(v24 + 64)], v23);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_2143DB1F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[6];
  v6 = v2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v5) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v6)- 8)+ 80);
  return sub_2143DA1A0(a1, (uint64_t)v2 + v9, (uint64_t)v2 + ((v9 + v10 + v11) & ~v11), v3, v4, v5, a2, v6);
}

uint64_t sub_2143DB2E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata3;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = v0[3];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[7];
  v5 = v0[8];
  v47 = v0[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v49 = v5;
  v50 = v3;
  v48 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v5);
  v11 = *(_QWORD *)(v48 - 8);
  v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v52 = v2;
  v14 = v2;
  v15 = v47;
  v51 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v14, v47);
  v16 = *(_QWORD *)(v51 - 8);
  v17 = v13 + *(unsigned __int8 *)(v16 + 80);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = v12 + v17;
  v20 = (char *)v0 + v9;
  sub_2141ED0BC(*(_QWORD *)v20, *((_QWORD *)v20 + 1), v20[16]);
  swift_bridgeObjectRelease();
  v21 = &v20[*(int *)(v7 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v21, v1);
      break;
    case 1u:
      v22 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v22(v21, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v22(&v21[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v24 = v19;
      v25 = sub_214423C48();
      v26 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v29 = v25;
      v19 = v24;
      v28(&v21[*(int *)(TupleTypeMetadata3 + 48)], v29);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(&v21[*(int *)(TupleTypeMetadata3 + 64)], v26);
      break;
    default:
      break;
  }
  v30 = v19 & ~v18;
  v31 = (char *)v0 + v12;
  sub_2141ED0BC(*(_QWORD *)v31, *((_QWORD *)v31 + 1), v31[16]);
  swift_bridgeObjectRelease();
  v32 = &v31[*(int *)(v48 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v50, v49);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v32, v50);
      break;
    case 1u:
      v33 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
      v33(v32, v50);
      v34 = swift_getTupleTypeMetadata2();
      v33(&v32[*(int *)(v34 + 48)], v50);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v35 = sub_214423C48();
      v36 = sub_214423C54();
      v37 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(&v32[*(int *)(v37 + 48)], v35);
      v38 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8);
      v39 = v36;
      v15 = v47;
      v38(&v32[*(int *)(v37 + 64)], v39);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v30), *(_QWORD *)((char *)v0 + v30 + 8), *((_BYTE *)v0 + v30 + 16));
  swift_bridgeObjectRelease();
  v40 = (char *)v0 + v30 + *(int *)(v51 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v52, v15);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v40, v52);
      break;
    case 1u:
      v41 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8);
      v41(v40, v52);
      v42 = swift_getTupleTypeMetadata2();
      v41(&v40[*(int *)(v42 + 48)], v52);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v43 = sub_214423C48();
      v44 = sub_214423C54();
      v45 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(&v40[*(int *)(v45 + 48)], v43);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(&v40[*(int *)(v45 + 64)], v44);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_2143DB84C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2[3];
  v19 = v3;
  v4 = v2[4];
  v18 = v2[5];
  v5 = v2[6];
  v6 = v2[7];
  v7 = v2[8];
  v8 = v2[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v6) - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v7) - 8);
  v14 = (v11 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 64);
  v16 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v18, v8)- 8)+ 80);
  return sub_2143DA7F8(a1, (uint64_t)v2 + v11, (uint64_t)v2 + v14, (uint64_t)v2 + ((v14 + v15 + v16) & ~v16), v19, v4, v18, a2, v5, v6, v7, v8);
}

uint64_t LinePlot<A>.init<A, B, C>(x:y:t:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;

  v60 = a5;
  v59 = a4;
  v57 = a3;
  v52 = a2;
  v51 = a1;
  v61 = a9;
  v58 = a14;
  v56 = a13;
  v19 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x24BDAC7A8](v29);
  (*(void (**)(char *, __n128))(v28 + 16))((char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
  v55 = sub_214424818();
  v54 = v32;
  v50 = v33;
  v53 = v34;
  v35 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v52, a7);
  v56 = sub_214424818();
  v49 = v36;
  v47 = v37;
  v48 = v38;
  v39 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v57, a8);
  v40 = sub_214424818();
  v58 = v41;
  v43 = v42;
  v46 = v44;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v39, a8);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v35, a7);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v51, a6);
  v64 = v50 & 1;
  v63 = v47 & 1;
  v62 = v43 & 1;
  *(_QWORD *)&v65 = v55;
  *((_QWORD *)&v65 + 1) = v54;
  v66 = v50 & 1;
  v67 = v53;
  v68 = v56;
  v69 = v49;
  v70 = v47 & 1;
  v71 = v48;
  v72 = v40;
  v73 = v58;
  v74 = v43 & 1;
  v75 = v46;
  v76 = a10;
  v77 = a11;
  v78 = v59;
  v79 = v60;
  sub_2143A56D4((uint64_t)&v65);
  return sub_2143A5698(&v65, v61);
}

uint64_t LinePlot<A>.init(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v4 = a1;
  v6 = 1;
  sub_2143DBCBC((uint64_t)&v4);
  return sub_2143A5698(&v4, a2);
}

uint64_t sub_2143DBCBC(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 80) & 1 | 0x8000000000000000;
  *(_QWORD *)(result + 48) &= 1uLL;
  *(_QWORD *)(result + 80) = v1;
  return result;
}

uint64_t LinePlot<A>.init(_:domain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = a2;
  v8 = a3;
  v9 = a4 & 1;
  sub_2143DBCBC((uint64_t)&v7);
  return sub_2143A5698(&v7, a5);
}

uint64_t static FunctionLinePlotContent._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8);
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  double *v43;
  double v44;
  double v45;
  _QWORD *v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  float64_t v53;
  uint64_t v54;
  char v55;
  __n128 v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(__n128);
  double v67;
  float64x2_t v68;
  uint64_t v69;
  double v70;
  float64x2_t v71;
  uint64_t *v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  __int128 v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  void (*v158)(__n128);
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  float64x2_t v162;
  float64x2_t v163;
  uint64_t v164;
  __int128 v165;
  _QWORD *v166;
  uint64_t *v167;
  uint64_t v168;
  char *KeyPath;
  uint64_t v170;
  int v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  __n128 v198;
  uint64_t v199;
  char *v200;
  __n128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  _BYTE v211[128];
  _QWORD v212[16];
  _BYTE v213[128];
  _OWORD v214[2];
  char v215;
  __int128 v216[8];

  v6 = sub_2141D8BF8(qword_254D6A2A0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))((char *)&v156
                                                                                   - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (_QWORD *)type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2143A5698((__int128 *)a1, (uint64_t)v216);
  v17 = *((_QWORD *)a2 + 1);
  v18 = *(double *)(v17 + 24);
  v19 = *(double *)(v17 + 32);
  if (v19 >= v18)
    v20 = *(double *)(v17 + 24);
  else
    v20 = *(double *)(v17 + 32);
  if (v18 > v19)
    v21 = *(double *)(v17 + 24);
  else
    v21 = *(double *)(v17 + 32);
  if (v20 > v21)
  {
    __break(1u);
    goto LABEL_65;
  }
  v200 = v12;
  v22 = (uint64_t *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale);
  v23 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 104);
  if ((v23 & 1) != 0)
    goto LABEL_12;
  v24 = (uint64_t *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale);
  v25 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 104);
  if ((v25 & 1) != 0)
    goto LABEL_12;
  v26 = v22[10];
  if (*((_BYTE *)v22 + 80) == 0xFF)
    goto LABEL_12;
  v27 = v24[10];
  if (*((_BYTE *)v24 + 80) == 0xFF)
    goto LABEL_12;
  v168 = v17;
  KeyPath = v15;
  v166 = v10;
  v197 = v26;
  v29 = *a2;
  v30 = v22[1];
  v184 = *v22;
  v185 = v30;
  v31 = v22[3];
  v186 = v22[2];
  v187 = v31;
  v32 = v22[5];
  v188 = v22[4];
  v189 = v32;
  v190 = v22[6];
  v191 = v22[7];
  v192 = v27;
  v183 = v22[8];
  v195 = v22[9];
  v34 = v22[11];
  v33 = v22[12];
  v174 = *v24;
  v175 = v24[1];
  v176 = v24[2];
  v177 = v24[3];
  v178 = v24[4];
  v179 = v24[5];
  v180 = v24[6];
  v181 = v24[7];
  v35 = v24[11];
  v15 = *((char **)v24 + 12);
  v193 = v33;
  v194 = v34;
  v36 = *(double *)&v34;
  v37 = *(double *)&v33;
  v38 = *(double *)&v35;
  v39 = *(double *)&v15;
  v41 = v24[8];
  v40 = v24[9];
  v173 = v41;
  v196 = (char *)v40;
  sub_2143A5698(v216, (uint64_t)v213);
  v42 = sub_2143DD818((uint64_t)v213);
  v171 = v23;
  v182 = v25;
  v170 = v35;
  v172 = v15;
  *(_QWORD *)&v165 = v7;
  LODWORD(v199) = v29;
  if (!v42)
  {
    v49 = sub_2143DD824((uint64_t)v213);
    v51 = *(_QWORD *)(v49 + 64);
    v50 = *(_QWORD *)(v49 + 72);
    v52 = *(_BYTE *)(v49 + 80);
    v53 = *(double *)(v49 + 96);
    v158 = *(void (**)(__n128))(v49 + 88);
    v162.f64[0] = v53;
    v54 = v195;
    v55 = v197;
    sub_2143DD0E0(v51, v50, v52, v195, v197, v36, v37);
    v198 = v56;
    v201 = v57;
    v161 = &v156;
    MEMORY[0x24BDAC7A8](v58);
    v159 = &v156 - 12;
    *(&v156 - 10) = v54;
    *((_BYTE *)&v156 - 72) = v55;
    v60 = v193;
    v59 = v194;
    *(&v156 - 8) = v194;
    *(&v156 - 7) = v60;
    v61 = v192;
    v62 = (uint64_t)v172;
    v63 = swift_allocObject();
    v157 = (char *)v63;
    v64 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v63 + 16) = MEMORY[0x24BEE4AF8];
    v160 = v63 + 16;
    *(_QWORD *)(v63 + 24) = v64;
    v164 = swift_allocObject();
    *(_QWORD *)(v164 + 16) = 0x78ABBF7B5AEAE776;
    v154 = (char *)v60;
    LOBYTE(v60) = v197;
    sub_21421C7C0(v184, v185, v186, v187, v188, v189, v190, v191, v183, v54, v197, v59, (uint64_t)v154, v171);
    v153 = v35;
    v65 = (uint64_t)v196;
    sub_21421C7C0(v174, v175, v176, v177, v178, v179, v180, v181, v173, (uint64_t)v196, v61, v153, v62, v182);
    v66 = v158;
    v7 = *(_QWORD *)&v162.f64[0];
    v67 = sub_21428DEAC(v54, v60, v158, v198, v36, v37, v38, v39, *(uint64_t *)&v162.f64[0], v65, v61);
    *(_QWORD *)&v68.f64[0] = v198.n128_u64[0];
    v68.f64[1] = v67;
    v163 = v68;
    v69 = v54;
    v15 = v157;
    v70 = sub_21428DEAC(v69, v60, v66, v201, v36, v37, v38, v39, v7, v65, v61);
    *(_QWORD *)&v71.f64[0] = v201.n128_u64[0];
    v71.f64[1] = v70;
    v162 = v71;
    sub_21437C614((uint64_t)v15, 1, v163, 0.190983006);
    sub_21437CB1C(1, v164, 4, 7, 11, (uint64_t)v15, 1, (void (*)(void))sub_2143DD9A0, v198.n128_f64[0], v163, v201.n128_f64[0], v162, 0.00137046525, 20.0, v198.n128_f64[0], v201.n128_f64[0], 0.190983006, (uint64_t)v159);
    sub_21437C614((uint64_t)v15, 1, v162, 0.190983006);
    v72 = (uint64_t *)v160;
    swift_beginAccess();
    a1 = *v72;
    v10 = (_QWORD *)*((_QWORD *)v15 + 3);
    if (*(_QWORD *)(*v72 + 16))
    {
      swift_bridgeObjectRetain();
      v7 = (uint64_t)a3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_19;
      goto LABEL_70;
    }
    v73 = v199;
    goto LABEL_49;
  }
  if (v42 == 1)
  {
    v43 = (double *)sub_2143DD824((uint64_t)v213);
    v44 = v43[12];
    v45 = v43[13];
    a1 = *((_QWORD *)v43 + 14);
    v46 = (_QWORD *)*((_QWORD *)v43 + 15);
    LOBYTE(v155) = v23;
    v47 = v197;
    v7 = v195;
    sub_21421C7C0(v184, v185, v186, v187, v188, v189, v190, v191, v183, v195, v197, v194, v193, v155);
    v153 = v35;
    v154 = v15;
    v48 = v192;
    v15 = v196;
    sub_21421C7C0(v174, v175, v176, v177, v178, v179, v180, v181, v173, (uint64_t)v196, v192, v153, (uint64_t)v154, v182);
    swift_retain();
    v10 = sub_21437E808(4, 7, 1, a1, v46, v7, v47, (uint64_t)v15, v44, v45, v36, v37, v38, v39, v48);
    swift_release();
  }
  else
  {
    v76 = sub_2143DD824((uint64_t)v213);
    v7 = v195;
    a1 = v197;
    sub_2143DD0E0(*(_QWORD *)(v76 + 8), *(_QWORD *)(v76 + 16), *(_BYTE *)(v76 + 24), v195, v197, v36, v37);
    v78 = v77;
    v80 = v79;
    sub_21421C7C0(v184, v185, v186, v187, v188, v189, v190, v191, v183, v7, a1, v194, v193, v23);
    v153 = v35;
    v81 = v192;
    v82 = (uint64_t)v196;
    sub_21421C7C0(v174, v175, v176, v177, v178, v179, v180, v181, v173, (uint64_t)v196, v192, v153, (uint64_t)v15, v182);
    sub_21424D26C(v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2143A56F4);
    v10 = (_QWORD *)sub_21436B118(v7, a1, v82, v81, v78, v80, v36, v37, v38, *(float64_t *)&v15);
    sub_21424D26C(v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2143A5868);
  }
  v201.n128_u64[0] = (unint64_t)v10;
  if ((v199 & 1) == 0)
    goto LABEL_50;
  while (1)
  {
    v83 = v10[2];
    v167 = a3;
    if (!v83)
      break;
    swift_bridgeObjectRetain();
    v84 = 0;
    v85 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      a1 = v10[v84 + 4];
      v7 = *(_QWORD *)(a1 + 16);
      v10 = (_QWORD *)*((_QWORD *)v85 + 2);
      v15 = (char *)v10 + v7;
      if (__OFADD__(v10, v7))
        break;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t)v15 > *((_QWORD *)v85 + 3) >> 1)
      {
        if ((uint64_t)v10 <= (uint64_t)v15)
          v87 = (int64_t)v10 + v7;
        else
          v87 = (int64_t)v10;
        v85 = sub_214224144(isUniquelyReferenced_nonNull_native, v87, 1, v85);
      }
      v10 = (_QWORD *)v201.n128_u64[0];
      if (*(_QWORD *)(a1 + 16))
      {
        v88 = *((_QWORD *)v85 + 2);
        if ((*((_QWORD *)v85 + 3) >> 1) - v88 < v7)
          goto LABEL_68;
        memcpy(&v85[16 * v88 + 32], (const void *)(a1 + 32), 16 * v7);
        if (v7)
        {
          v89 = *((_QWORD *)v85 + 2);
          v90 = __OFADD__(v89, v7);
          v91 = v89 + v7;
          if (v90)
            goto LABEL_69;
          *((_QWORD *)v85 + 2) = v91;
        }
      }
      else if (v7)
      {
        goto LABEL_66;
      }
      swift_bridgeObjectRelease();
      if (v83 == ++v84)
      {
        swift_bridgeObjectRelease();
        a3 = v167;
        goto LABEL_42;
      }
    }
    while (2)
    {
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      v10 = sub_21422423C(0, v10[2] + 1, 1, v10);
LABEL_19:
      v73 = v199;
      v75 = v10[2];
      v74 = v10[3];
      if (v75 >= v74 >> 1)
        v10 = sub_21422423C((_QWORD *)(v74 > 1), v75 + 1, 1, v10);
      v10[2] = v75 + 1;
      v10[v75 + 4] = a1;
      *((_QWORD *)v15 + 3) = v10;
      a3 = (uint64_t *)v7;
LABEL_49:
      *((_QWORD *)v15 + 2) = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v201.n128_u64[0] = (unint64_t)v10;
      if ((v73 & 1) == 0)
      {
LABEL_50:
        sub_214424770();
        v199 = v10[2];
        if (!v199)
        {
          swift_bridgeObjectRelease();
LABEL_63:
          v198.n128_u64[0] = type metadata accessor for SgPath(0);
          v201.n128_u64[0] = swift_allocBox();
          v140 = v139;
          v199 = *(_QWORD *)(*(_QWORD *)(v168 + 16) + 24);
          v142 = v206;
          v141 = v207;
          v143 = v208;
          v144 = v209;
          v164 = v207;
          *(_QWORD *)&v165 = v208;
          v145 = v168 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
          v146 = v210;
          swift_beginAccess();
          v147 = (uint64_t)v200;
          sub_2141EEEC4(v145, (uint64_t)v200);
          sub_2141FE3EC(v142, v141, v143, v144, v146);
          sub_2141FFC88(v147, (uint64_t)KeyPath);
          sub_21421BB38(v174, v175, v176, v177, v178, v179, v180, v181, v173, (uint64_t)v196, v192, v170, (uint64_t)v172, v182);
          sub_21421BB38(v184, v185, v186, v187, v188, v189, v190, v191, v183, v195, v197, v194, v193, v171);
          v148 = v164;
          v149 = v165;
          sub_2141EEF3C(v142, v164, v165, v144, v146);
          v150 = *(_QWORD *)(v145 + *((int *)v166 + 16));
          v151 = *(_QWORD *)(v145 + *((int *)v166 + 17));
          *(_QWORD *)v140 = v199;
          *(_QWORD *)(v140 + 8) = v142;
          *(_QWORD *)(v140 + 16) = v148;
          *(_QWORD *)(v140 + 24) = v149;
          *(_QWORD *)(v140 + 32) = v144;
          *(_BYTE *)(v140 + 40) = v146;
          v152 = (int *)v198.n128_u64[0];
          result = sub_21428EC0C((uint64_t)KeyPath, v140 + *(int *)(v198.n128_u64[0] + 24));
          *(_QWORD *)(v140 + v152[7]) = v150;
          *(_QWORD *)(v140 + v152[8]) = v151;
          *(_BYTE *)(v140 + v152[9]) = 1;
          v28 = v201.n128_u64[0] | 0x9000000000000000;
          goto LABEL_13;
        }
        v167 = a3;
        v134 = 0;
        v212[0] = 0x3FF0000000000000;
        v212[1] = 0;
        v212[2] = 0;
        v212[3] = 0x3FF0000000000000;
        v198.n128_u64[0] = (unint64_t)(v10 + 4);
        v212[5] = 0;
        v212[4] = 0;
        v9 = sub_2141EEF3C;
        while (v134 < v10[2])
        {
          a1 = *(_QWORD *)(v198.n128_u64[0] + 8 * v134);
          swift_bridgeObjectRetain();
          sub_214424770();
          v6 = *(_QWORD *)(a1 + 16);
          if (v6)
          {
            v202 = MEMORY[0x24BEE4AF8];
            sub_2141D3BD0(0, v6, 0);
            v135 = 0;
            v7 = v202;
            v136 = *(_QWORD *)(v202 + 16);
            do
            {
              v137 = *(_OWORD *)(a1 + 16 * v135 + 32);
              v202 = v7;
              v138 = *(_QWORD *)(v7 + 24);
              v15 = (char *)(v136 + 1);
              if (v136 >= v138 >> 1)
              {
                v165 = v137;
                sub_2141D3BD0((char *)(v138 > 1), v136 + 1, 1);
                v137 = v165;
                v7 = v202;
              }
              ++v135;
              *(double *)(v7 + 16) = *(double *)&v15;
              *(_OWORD *)(v7 + 16 * v136++ + 32) = v137;
            }
            while (v6 != v135);
            swift_bridgeObjectRelease();
            v10 = (_QWORD *)v201.n128_u64[0];
          }
          else
          {
            swift_bridgeObjectRelease();
            v7 = MEMORY[0x24BEE4AF8];
          }
          ++v134;
          sub_214424740();
          swift_bridgeObjectRelease();
          v214[0] = v203;
          v214[1] = v204;
          v215 = v205;
          sub_2141FE3B0((uint64_t)v214, (uint64_t)v211);
          sub_2141FE404((uint64_t)v211, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
          sub_2144246A4();
          sub_2141FE404((uint64_t)v214, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
          sub_2141FE404((uint64_t)v214, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
          if (v134 == v199)
          {
            swift_bridgeObjectRelease();
            a3 = v167;
            goto LABEL_63;
          }
        }
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        continue;
      }
      break;
    }
  }
  v85 = (char *)MEMORY[0x24BEE4AF8];
LABEL_42:
  swift_bridgeObjectRelease();
  sub_2143A5698(v216, (uint64_t)v212);
  v92 = sub_2143DD818((uint64_t)v212);
  if (v92)
  {
    if (v92 == 1)
    {
      v93 = sub_2143DD824((uint64_t)v212);
      v94 = *(_QWORD *)v93;
      v201.n128_u64[0] = *(_QWORD *)(v93 + 8);
      LODWORD(v200) = *(unsigned __int8 *)(v93 + 16);
      v95 = *(_QWORD *)(v93 + 24);
      v164 = *(_QWORD *)(v93 + 32);
      v163.f64[0] = *(float64_t *)(v93 + 40);
      LODWORD(v162.f64[0]) = *(unsigned __int8 *)(v93 + 48);
      v96 = *(_QWORD *)(v93 + 64);
      v166 = *(_QWORD **)(v93 + 56);
      v97 = *(_QWORD *)(v93 + 72);
      v98 = *(_BYTE *)(v93 + 80);
      KeyPath = *(char **)(v93 + 88);
      sub_2143A5698(v216, (uint64_t)v211);
      v99 = sub_2143DD824((uint64_t)v211);
      sub_2143DD834(v99);
      swift_release();
      sub_2141ED0BC(v96, v97, v98);
      swift_bridgeObjectRelease();
      v100 = *((_QWORD *)v85 + 2);
      KeyPath = (char *)swift_getKeyPath();
      v101 = swift_allocObject();
      *(_QWORD *)(v101 + 16) = v85;
      v102 = v94;
      v199 = v94;
      v103 = v201.n128_u64[0];
      *(_QWORD *)(v101 + 24) = v94;
      *(_QWORD *)(v101 + 32) = v103;
      v104 = (char)v200;
      *(_BYTE *)(v101 + 40) = (_BYTE)v200;
      v198.n128_u64[0] = v95;
      v105 = v195;
      *(_QWORD *)(v101 + 48) = v95;
      *(_QWORD *)(v101 + 56) = v105;
      *(_BYTE *)(v101 + 64) = v197;
      v106 = v193;
      *(_QWORD *)(v101 + 72) = v194;
      *(_QWORD *)(v101 + 80) = v106;
      v107 = v164;
      v108 = *(_QWORD *)&v163.f64[0];
      *(_QWORD *)(v101 + 88) = v164;
      *(_QWORD *)(v101 + 96) = v108;
      LOBYTE(v97) = LOBYTE(v162.f64[0]);
      *(_BYTE *)(v101 + 104) = LOBYTE(v162.f64[0]);
      v109 = (uint64_t)v196;
      *(_QWORD *)(v101 + 112) = v166;
      *(_QWORD *)(v101 + 120) = v109;
      *(_BYTE *)(v101 + 128) = v192;
      v110 = (uint64_t)v172;
      *(_QWORD *)(v101 + 136) = v170;
      *(_QWORD *)(v101 + 144) = v110;
      *(_QWORD *)&v214[0] = 0;
      *((_QWORD *)&v214[0] + 1) = v100;
      sub_2141DD130(v102, v103, v104);
      swift_bridgeObjectRetain();
      sub_2141DD130(v107, v108, v97);
      swift_bridgeObjectRetain();
      sub_2141D8BF8(&qword_253F13548);
      sub_2141FE010();
      sub_214424B54();
      swift_release();
      swift_release();
      sub_21428D9F4((uint64_t)v9, 1, v168, v167);
      sub_2141ED0BC(v107, v108, v97);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v199, v201.n128_i64[0], (char)v200);
      goto LABEL_46;
    }
    sub_2143DD824((uint64_t)v212);
    swift_bridgeObjectRelease();
    sub_21421BB38(v184, v185, v186, v187, v188, v189, v190, v191, v183, v195, v197, v194, v193, v171);
    result = sub_21421BB38(v174, v175, v176, v177, v178, v179, v180, v181, v173, (uint64_t)v196, v192, v170, (uint64_t)v172, v182);
LABEL_12:
    v28 = 0xE000000000000000;
LABEL_13:
    *a3 = v28;
  }
  else
  {
    v111 = sub_2143DD824((uint64_t)v212);
    v112 = *(_QWORD *)v111;
    v201.n128_u64[0] = *(_QWORD *)(v111 + 8);
    LODWORD(v200) = *(unsigned __int8 *)(v111 + 16);
    v113 = *(double *)(v111 + 24);
    v198.n128_u64[0] = *(_QWORD *)(v111 + 32);
    KeyPath = *(char **)(v111 + 40);
    LODWORD(v166) = *(unsigned __int8 *)(v111 + 48);
    v199 = *(_QWORD *)(v111 + 56);
    v162.f64[0] = *(float64_t *)(v111 + 96);
    sub_2143A5698(v216, (uint64_t)v211);
    v114 = sub_2143DD824((uint64_t)v211);
    v116 = *(_QWORD *)v114;
    v115 = *(_QWORD *)(v114 + 8);
    v117 = *(_BYTE *)(v114 + 16);
    v118 = *(_QWORD *)(v114 + 32);
    v119 = *(_QWORD *)(v114 + 40);
    v120 = *(_BYTE *)(v114 + 48);
    v121 = *(uint64_t **)(v114 + 96);
    v160 = *(_QWORD *)(v114 + 56);
    v161 = v121;
    sub_2141DD130(v116, v115, v117);
    swift_bridgeObjectRetain();
    sub_2141DD130(v118, v119, v120);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v122 = *((_QWORD *)v85 + 2);
    *(_QWORD *)&v162.f64[0] = swift_getKeyPath();
    v123 = swift_allocObject();
    *(_QWORD *)(v123 + 16) = v85;
    v124 = v112;
    v164 = v112;
    v125 = v201.n128_u64[0];
    *(_QWORD *)(v123 + 24) = v112;
    *(_QWORD *)(v123 + 32) = v125;
    v126 = (char)v200;
    *(_BYTE *)(v123 + 40) = (_BYTE)v200;
    v163.f64[0] = v113;
    v127 = v195;
    *(float64_t *)(v123 + 48) = v113;
    *(_QWORD *)(v123 + 56) = v127;
    v128 = v198.n128_u64[0];
    *(_BYTE *)(v123 + 64) = v197;
    v129 = v193;
    *(_QWORD *)(v123 + 72) = v194;
    *(_QWORD *)(v123 + 80) = v129;
    v130 = (uint64_t)KeyPath;
    *(_QWORD *)(v123 + 88) = v128;
    *(_QWORD *)(v123 + 96) = v130;
    v131 = (char)v166;
    *(_BYTE *)(v123 + 104) = (_BYTE)v166;
    v132 = (uint64_t)v196;
    *(_QWORD *)(v123 + 112) = v199;
    *(_QWORD *)(v123 + 120) = v132;
    *(_BYTE *)(v123 + 128) = v192;
    v133 = (uint64_t)v172;
    *(_QWORD *)(v123 + 136) = v170;
    *(_QWORD *)(v123 + 144) = v133;
    *(_QWORD *)&v214[0] = 0;
    *((_QWORD *)&v214[0] + 1) = v122;
    sub_2141DD130(v124, v125, v126);
    swift_bridgeObjectRetain();
    sub_2141DD130(v128, v130, v131);
    swift_bridgeObjectRetain();
    sub_2141D8BF8(&qword_253F13548);
    sub_2141FE010();
    sub_214424B54();
    swift_release();
    swift_release();
    sub_21428D9F4((uint64_t)v9, 1, v168, v167);
    sub_2141ED0BC(v128, v130, v131);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v164, v201.n128_i64[0], (char)v200);
LABEL_46:
    swift_bridgeObjectRelease();
    sub_21421BB38(v174, v175, v176, v177, v178, v179, v180, v181, v173, (uint64_t)v196, v192, v170, (uint64_t)v172, v182);
    sub_21421BB38(v184, v185, v186, v187, v188, v189, v190, v191, v183, v195, v197, v194, v193, v171);
    return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8), int64_t))(v165 + 8))(v9, v6);
  }
  return result;
}

unint64_t *sub_2143DCF28@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v19;
  double v25[3];
  _BYTE v27[144];
  _BYTE v28[144];
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  double v32;
  char v33;
  _QWORD v34[2];
  char v35;
  uint64_t v36;
  double v37;
  char v38;
  _BYTE v39[144];
  _BYTE v40[144];
  _QWORD __src[40];

  v19 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v19 < *(_QWORD *)(a2 + 16))
  {
    *(_OWORD *)v25 = *(_OWORD *)(a2 + 16 * v19 + 32);
    v34[0] = a3;
    v34[1] = a4;
    v35 = a5 & 1;
    v36 = a6;
    v37 = sub_21421EAA4(a7, a8, v25[0], a10, a11);
    v38 = 0;
    v29[0] = a14;
    v29[1] = a15;
    v30 = a16 & 1;
    v31 = a17;
    v32 = sub_21421EAA4(a18, a19, v25[1], a12, a13);
    v33 = 0;
    sub_2143DE094((uint64_t)v34, (uint64_t)v27);
    sub_2141EDFD8((uint64_t)v27, (uint64_t)v39);
    sub_2143DE094((uint64_t)v29, (uint64_t)v28);
    sub_2141EDFD8((uint64_t)v28, (uint64_t)v40);
    sub_2141DD130(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_21428F944((uint64_t)v29);
    sub_21428F944((uint64_t)v34);
    sub_2141EDFD8((uint64_t)v39, (uint64_t)__src);
    sub_2141EDFD8((uint64_t)v40, (uint64_t)&__src[18]);
    __src[37] = 0;
    __src[36] = 0;
    LOBYTE(__src[38]) = -1;
    return (unint64_t *)memcpy(a9, __src, 0x131uLL);
  }
  __break(1u);
  return result;
}

void sub_2143DD0E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7)
{
  long double v10;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  if ((a3 & 1) != 0)
    return;
  v10 = *(double *)&a2;
  if (a5)
  {
    if (a5 == 1)
    {
      v12 = *(double *)&a1 * *(double *)&a4;
      if (a1 < 0)
        v13 = a7 - log(1.0 - v12) * a6;
      else
        v13 = log(v12 + 1.0) * a6 + a7;
      v16 = v10 * *(double *)&a4;
      if (a2 < 0)
      {
        v10 = -log(1.0 - v16);
        goto LABEL_15;
      }
      v15 = v16 + 1.0;
    }
    else
    {
      if (*(double *)&a4 == 0.0)
      {
        v13 = *(double *)&a1 * a6 + a7;
        goto LABEL_15;
      }
      v13 = log(*(long double *)&a1) * a6 + a7;
      v15 = v10;
    }
    v10 = log(v15);
  }
  else
  {
    v13 = pow(*(long double *)&a1, *(long double *)&a4) * a6 + a7;
    v10 = pow(v10, *(long double *)&a4);
  }
LABEL_15:
  v17 = v10 * a6 + a7;
  if (v17 >= v13)
    v18 = v13;
  else
    v18 = v10 * a6 + a7;
  if (v13 > v17)
    v19 = v13;
  else
    v19 = v10 * a6 + a7;
  if (v18 > v19)
    __break(1u);
}

uint64_t VectorizedLinePlotContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = type metadata accessor for Vectorizer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  sub_2142D7304(v3, v5, (uint64_t)&v10 - v7);
  sub_2142D6BB0((uint64_t)v8, v5, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_2143DD2C0(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t _s6Charts23FunctionLinePlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0(__int128 *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  char v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double (*v50)(double);
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  _BOOL4 v63;
  BOOL v64;
  BOOL v65;
  _BYTE v66[128];
  _BYTE v67[128];
  __int128 v68[8];

  sub_2143A5698(a1, (uint64_t)v68);
  v4 = *a2;
  v3 = a2[1];
  if (!*(_QWORD *)(v3 + 16))
  {
    v6 = 0;
    goto LABEL_11;
  }
  v5 = sub_214336B74(0);
  v6 = 0;
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v8 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 56) + 72 * v5 + 40);
  if (v8 >> 8 <= 0xFE)
  {
    v6 = (v8 & 0xFF00) != 768;
    if (*(_QWORD *)(v3 + 16))
      goto LABEL_9;
LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  v6 = 0;
LABEL_5:
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_11;
LABEL_9:
  v9 = sub_214336B74(1u);
  if ((v10 & 1) == 0)
    goto LABEL_11;
  v11 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 56) + 72 * v9 + 40);
  if (v11 >> 8 > 0xFE)
    goto LABEL_11;
  v12 = (v11 & 0xFF00) != 768;
LABEL_12:
  sub_2143A5698(v68, (uint64_t)v67);
  v13 = sub_2143DD818((uint64_t)v67);
  if (v13)
  {
    if (v13 != 1)
      return sub_2143DD824((uint64_t)v67);
    v64 = v12;
    v14 = sub_2143DD824((uint64_t)v67);
    v56 = *(_QWORD *)(v14 + 8);
    v58 = *(_QWORD *)v14;
    v54 = *(_BYTE *)(v14 + 16);
    v15 = *(_QWORD *)(v14 + 32);
    v16 = *(_QWORD *)(v14 + 40);
    v17 = *(_BYTE *)(v14 + 48);
    v18 = *(_QWORD *)(v14 + 64);
    v19 = *(_QWORD *)(v14 + 72);
    v20 = *(_BYTE *)(v14 + 80);
    v21 = *(double *)(v14 + 96);
    v22 = *(double *)(v14 + 104);
    v60 = *(_QWORD *)(v14 + 112);
    v62 = v6;
    v23 = *(_QWORD *)(v14 + 120);
    sub_2143A5698(v68, (uint64_t)v66);
    v24 = sub_2143DD824((uint64_t)v66);
    sub_2143DD834(v24);
    sub_2141ED0BC(v18, v19, v20);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v15, v16, v17);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v58, v56, v54);
    swift_bridgeObjectRelease();
    if (!v62)
    {
      swift_retain();
      v25 = sub_21437C60C(0, 0, 0, 1, v60, v23, v21, v22);
      v27 = v26;
      swift_release();
      sub_214203104(v25, 0, 0, 1);
      sub_214203104(v27, 0, 0, 1);
    }
    if (!v64)
    {
      v37 = sub_21437C610(0, 0, 0, 1, v60, v23, v21, v22);
      v39 = v38;
      swift_release();
      sub_214203104(0, 1, v37, 0);
      return sub_214203104(0, 1, v39, 0);
    }
  }
  else
  {
    v65 = v12;
    v28 = sub_2143DD824((uint64_t)v67);
    v57 = *(_QWORD *)(v28 + 8);
    v59 = *(_QWORD *)v28;
    v55 = *(_BYTE *)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 32);
    v63 = v6;
    v30 = *(_QWORD *)(v28 + 40);
    v53 = *(_BYTE *)(v28 + 48);
    v51 = *(_QWORD *)(v28 + 72);
    v52 = *(_QWORD *)(v28 + 64);
    v31 = *(unsigned __int8 *)(v28 + 80);
    v50 = *(double (**)(double))(v28 + 88);
    v61 = *(_QWORD *)(v28 + 96);
    sub_2143A5698(v68, (uint64_t)v66);
    v32 = sub_2143DD824((uint64_t)v66);
    v33 = *(_QWORD *)(v32 + 32);
    v34 = *(_QWORD *)(v32 + 40);
    v35 = *(_BYTE *)(v32 + 48);
    sub_2141DD130(*(_QWORD *)v32, *(_QWORD *)(v32 + 8), *(_BYTE *)(v32 + 16));
    swift_bridgeObjectRetain();
    sub_2141DD130(v33, v34, v35);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_2141ED0BC(v29, v30, v53);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v59, v57, v55);
    swift_bridgeObjectRelease();
    if (((v63 | v31) & 1) == 0)
    {
      sub_214203104(v52, 0, 0, 1);
      sub_214203104(v51, 0, 0, 1);
    }
    if (!v65)
    {
      if ((v31 & 1) != 0)
      {
        v40 = swift_allocObject();
        *(_QWORD *)(v40 + 16) = v50;
        *(_QWORD *)(v40 + 24) = v61;
        v41 = swift_allocObject();
        *(_QWORD *)(v41 + 16) = v50;
        *(_QWORD *)(v41 + 24) = v61;
        v42 = *(char **)(v4 + 168);
        swift_retain_n();
        swift_retain();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v4 + 168) = v42;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v42 = sub_214221E04(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
          *(_QWORD *)(v4 + 168) = v42;
        }
        v45 = *((_QWORD *)v42 + 2);
        v44 = *((_QWORD *)v42 + 3);
        if (v45 >= v44 >> 1)
        {
          v42 = sub_214221E04((char *)(v44 > 1), v45 + 1, 1, v42);
          *(_QWORD *)(v4 + 168) = v42;
        }
        *((_QWORD *)v42 + 2) = v45 + 1;
        v46 = &v42[32 * v45];
        *((_QWORD *)v46 + 4) = sub_21428FBF8;
        *((_QWORD *)v46 + 5) = v40;
        *((_QWORD *)v46 + 6) = sub_21428FC10;
        *((_QWORD *)v46 + 7) = v41;
        swift_release();
        swift_release();
      }
      else
      {
        sub_21437C100(0, 0, 0, 1, v50, *(double *)&v52, *(double *)&v51);
        v48 = v47;
        sub_214203104(0, 1, v49, 0);
        sub_214203104(0, 1, v48, 0);
      }
    }
  }
  return swift_release();
}

uint64_t sub_2143DD818(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) >> 62;
}

uint64_t sub_2143DD824(uint64_t result)
{
  *(_QWORD *)(result + 80) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_2143DD834(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_BYTE *)(a1 + 80);
  sub_2141DD130(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  sub_2141DD130(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_2141DD130(v5, v6, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_2143DD8FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t *sub_2143DD948@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_2143DCF28(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64), a2, *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 136), *(double *)(v2 + 144), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_BYTE *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_BYTE *)(v2 + 128));
}

double sub_2143DD9A0(__n128 a1)
{
  uint64_t v1;

  return sub_21428DEAC(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(void (**)(__n128))(v1 + 48), a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 80), *(double *)(v1 + 88), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
}

uint64_t sub_2143DD9C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2143DD9EC()
{
  return swift_deallocObject();
}

uint64_t sub_2143DD9FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2143DDA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <A> LinePlot<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143DDA78(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedLinePlotContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143DDAA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2143DDAD8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143DDB88 + 4 * byte_214431FF9[(v7 - 1)]))();
}

void sub_2143DDBD8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for LinePlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LinePlot);
}

ValueMetadata *type metadata accessor for FunctionLinePlotContent()
{
  return &type metadata for FunctionLinePlotContent;
}

uint64_t sub_2143DDDBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2143DDE40 + 4 * byte_214432007[v10]))();
  }
}

void sub_2143DDEC4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2143DDFC0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2143DE038);
}

void sub_2143DDFC8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2143DDFD0);
  JUMPOUT(0x2143DE038);
}

void sub_2143DE010()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143DE038);
}

void sub_2143DE018()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143DE038);
}

uint64_t sub_2143DE020(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x2143DE038);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x2143DE034);
    JUMPOUT(0x2143DE02CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_2143DE050(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_UNKNOWN **sub_2143DE058()
{
  return &off_254D69CB8;
}

uint64_t sub_2143DE064(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 80) & 1 | (a2 << 62);
  *(_QWORD *)(result + 48) &= 1uLL;
  *(_QWORD *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for FunctionLinePlotContent.FunctionLineRepresentation()
{
  return &type metadata for FunctionLinePlotContent.FunctionLineRepresentation;
}

uint64_t sub_2143DE094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 48) == 1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 0x80;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  sub_2141DD130(*(_QWORD *)a1, v4, v5);
  swift_bridgeObjectRetain();
  v11[0] = v3;
  v11[1] = v4;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = MEMORY[0x24BEE13C8];
  v18 = &protocol witness table for Double;
  sub_21428F980((uint64_t)v11);
  return sub_2141EDFD8((uint64_t)v11, a2);
}

uint64_t sub_2143DE150()
{
  swift_release();
  return swift_deallocObject();
}

void AxisContent.compositingLayer()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v8[2] = a1;
  v8[3] = a2;
  v6 = sub_214424440();
  v7 = MEMORY[0x2199CD934](MEMORY[0x24BDEFDC0], v6);
  AxisContent.compositingLayer<A>(style:)((uint64_t)v8, a1, v6, a2, v7, a3);
}

uint64_t sub_2143DE1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = sub_214424440();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - v7;
  MEMORY[0x2199CD934](MEMORY[0x24BDEFDC0], v4, v6);
  sub_2142D7304(a1, v4, (uint64_t)v8);
  sub_2142D6BB0((uint64_t)v8, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_2143DE2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2143DE1FC(a1, a2);
}

void AxisContent.compositingLayer<A>(style:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t OpaqueTypeConformance2;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = v6;
  v19 = a6;
  v20 = a4;
  v18[1] = a1;
  v21 = a2;
  v22 = a3;
  v23 = a5;
  v11 = MEMORY[0x2199CD8C8](0, &v21, MEMORY[0x24BDEFDA8], 0);
  MEMORY[0x24BDAC7A8](v11);
  v12 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v16, v7, a2, v14);
  sub_214424434();
  v21 = a2;
  v22 = a3;
  v23 = a5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19, v16, a2);
  v21 = a2;
  v22 = v11;
  v23 = v20;
  v24 = OpaqueTypeConformance2;
  type metadata accessor for CompositingLayerContent();
}

uint64_t sub_2143DE3EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1 + *(int *)(a1 + 52), v3, v2);
}

_UNKNOWN **sub_2143DE424()
{
  return &off_24D18BD98;
}

_UNKNOWN **sub_2143DE430()
{
  return &off_24D18BD98;
}

uint64_t sub_2143DE43C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143DE518 + 4 * byte_214432190[v17 - 1]))();
}

void sub_2143DE594(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for CompositingLayerContent()
{
  JUMPOUT(0x2199CD874);
}

_QWORD *sub_2143DE7A0@<X0>(uint64_t a1@<X4>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(a1 + 8))(&v4);
  if (*(_QWORD *)(v4 + 16))
    type metadata accessor for CompositingLayerContent();
  *a2 = v4;
  return result;
}

_QWORD *sub_2143DE8D4@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  return sub_2143DE7A0(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_2143DE8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F11E60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for Spec()
{
  return &type metadata for Spec;
}

uint64_t storeEnumTagSinglePayload for Spec.Channel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_2143DE988 + 4 * byte_2144321E5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_2143DE9BC + 4 * byte_2144321E0[v4]))();
}

uint64_t sub_2143DE9BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143DE9C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143DE9CCLL);
  return result;
}

uint64_t sub_2143DE9D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143DE9E0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_2143DE9E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143DE9EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Spec.Channel()
{
  return &type metadata for Spec.Channel;
}

uint64_t sub_2143DEA08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  _BYTE v10[264];
  _BYTE v11[264];
  _BYTE __src[264];

  v2 = v1;
  sub_2141E801C(a1, (uint64_t)v10, &qword_253F14B70);
  result = sub_2141E801C((uint64_t)v10, (uint64_t)v11, &qword_253F14B70);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v6;
    v9[3] = sub_2141D8BF8(&qword_253F13010);
    v9[4] = &off_24D17F2F8;
    v7 = swift_allocObject();
    v8 = (void *)(v7 + 16);
    v9[0] = v7;
    sub_2141E801C((uint64_t)v11, (uint64_t)__src, &qword_253F14B70);
    memcpy(v8, __src, 0x102uLL);
    swift_beginAccess();
    sub_21424DDD8(a1);
    sub_214233D18((uint64_t)v9, v6);
    swift_endAccess();
    return *(_QWORD *)(v2 + 16);
  }
  return result;
}

uint64_t sub_2143DEB0C(uint64_t a1, uint64_t a2)
{
  return sub_2143DEC44(a1, a2, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
}

uint64_t sub_2143DEB20(uint64_t a1, uint64_t a2)
{
  return sub_2143DEC44(a1, a2, &qword_254D6DFD8, (void (*)(uint64_t, uint64_t))sub_2141D975C);
}

uint64_t sub_2143DEB34(uint64_t a1)
{
  return sub_2143DEDA4(a1, &qword_253F10398);
}

uint64_t sub_2143DEB40(uint64_t a1)
{
  return sub_2143DEDA4(a1, &qword_254D6DFE8);
}

uint64_t sub_2143DEB4C(uint64_t a1, uint64_t a2)
{
  return sub_2143DEB7C(a1, a2, &qword_254D6E000);
}

uint64_t sub_2143DEB58(uint64_t a1, uint64_t a2)
{
  return sub_2143DEB7C(a1, a2, &qword_254D6E008);
}

uint64_t sub_2143DEB64(uint64_t a1, uint64_t a2)
{
  return sub_2143DEB7C(a1, a2, &qword_254D6E010);
}

uint64_t sub_2143DEB70(uint64_t a1, uint64_t a2)
{
  return sub_2143DEB7C(a1, a2, &qword_254D6E018);
}

uint64_t sub_2143DEB7C(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[5];

  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    *(_QWORD *)(v4 + 16) = v6;
    v9[3] = sub_2141D8BF8(a3);
    v9[4] = &off_24D17F2F8;
    v9[0] = v8;
    v9[1] = a2;
    swift_beginAccess();
    swift_retain();
    sub_214233D18((uint64_t)v9, v6);
    swift_endAccess();
    return *(_QWORD *)(v4 + 16);
  }
  return result;
}

uint64_t sub_2143DEC18(uint64_t a1)
{
  return sub_2143DEDA4(a1, &qword_253F13028);
}

uint64_t sub_2143DEC24(uint64_t a1)
{
  return sub_2143DEDA4(a1, &qword_253F103A0);
}

uint64_t sub_2143DEC30(uint64_t a1, uint64_t a2)
{
  return sub_2143DEC44(a1, a2, &qword_253F13018, (void (*)(uint64_t, uint64_t))sub_21421C4E4);
}

uint64_t sub_2143DEC44(uint64_t result, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _QWORD v11[5];

  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    *(_QWORD *)(v5 + 16) = v7;
    v11[3] = sub_2141D8BF8(a3);
    v11[4] = &off_24D17F2F8;
    v11[0] = v10;
    v11[1] = a2;
    swift_beginAccess();
    a4(v10, a2);
    sub_214233D18((uint64_t)v11, v7);
    swift_endAccess();
    return *(_QWORD *)(v5 + 16);
  }
  return result;
}

uint64_t sub_2143DECF0(uint64_t a1)
{
  return sub_2143DEDA4(a1, &qword_254D6DFE0);
}

uint64_t sub_2143DECFC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    *(_QWORD *)(v2 + 16) = v4;
    v6[3] = sub_2141D8BF8(&qword_254D6DFF0);
    v6[4] = &off_24D17F2F8;
    v6[0] = v5;
    swift_beginAccess();
    swift_retain();
    sub_214233D18((uint64_t)v6, v4);
    swift_endAccess();
    return *(_QWORD *)(v2 + 16);
  }
  return result;
}

uint64_t sub_2143DED98(uint64_t a1)
{
  return sub_2143DEDA4(a1, &qword_254D6DFF8);
}

uint64_t sub_2143DEDA4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v3 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    *(_QWORD *)(v3 + 16) = v5;
    v7[3] = sub_2141D8BF8(a2);
    v7[4] = &off_24D17F2F8;
    v7[0] = v6;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_214233D18((uint64_t)v7, v5);
    swift_endAccess();
    return *(_QWORD *)(v3 + 16);
  }
  return result;
}

BOOL sub_2143DEE3C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_2143E07F8((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_2143DEE94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v2 = MEMORY[0x24BEE4B00];
  v3 = a1 + 64;
  v30 = MEMORY[0x24BEE4B00];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_6:
    v12 = HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 72 * v11 + 40));
    if (v12 <= 0xFE && v12 <= 2)
    {
      v18 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v11);
      v19 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v19)
      {
        sub_21429C1DC(v19 + 1, 1);
        v2 = v30;
      }
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v20 = v2 + 64;
      v21 = -1 << *(_BYTE *)(v2 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v2 + 64 + 8 * (v22 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v21) >> 6;
        v25 = v18;
        while (++v23 != v27 || (v26 & 1) == 0)
        {
          v28 = v23 == v27;
          if (v23 == v27)
            v23 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v20 + 8 * v23);
          if (v29 != -1)
          {
            v24 = __clz(__rbit64(~v29)) + (v23 << 6);
            goto LABEL_40;
          }
        }
        goto LABEL_43;
      }
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v2 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      v25 = v18;
LABEL_40:
      *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v24) = v25;
      *(_BYTE *)(*(_QWORD *)(v2 + 56) + v24) = v12;
      ++*(_QWORD *)(v2 + 16);
    }
  }
  v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v14 >= v7)
    goto LABEL_41;
  v15 = *(_QWORD *)(v3 + 8 * v14);
  v16 = v9 + 1;
  if (v15)
    goto LABEL_27;
  v16 = v9 + 2;
  if (v9 + 2 >= v7)
    goto LABEL_41;
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
    goto LABEL_27;
  v16 = v9 + 3;
  if (v9 + 3 >= v7)
    goto LABEL_41;
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
    goto LABEL_27;
  v16 = v9 + 4;
  if (v9 + 4 >= v7)
    goto LABEL_41;
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
LABEL_27:
    v6 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
    goto LABEL_6;
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_41:
    sub_2141E9120();
    return v2;
  }
  v15 = *(_QWORD *)(v3 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v7)
      goto LABEL_41;
    v15 = *(_QWORD *)(v3 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_2143DF160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_2143E02B0(a1, (uint64_t)sub_2143E0540, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_2143DF1DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (qword_254D68EE8 != -1)
    result = swift_once();
  v2 = *(_QWORD *)(qword_254D760C8 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2144255B0();
    v4 = 0;
    do
    {
      v5 = v4 + 1;
      swift_retain();
      sub_214423E10();
      sub_21442558C();
      sub_2144255BC();
      sub_2144255C8();
      sub_214425598();
      v4 = v5;
    }
    while (v2 != v5);
    v3 = v7;
    result = swift_bridgeObjectRelease();
  }
  *a1 = v3;
  return result;
}

uint64_t sub_2143DF304@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 80) & 1) == 0)
  {
    if (qword_253F101E0 == -1)
      goto LABEL_5;
    goto LABEL_6;
  }
  if (qword_254D68F00 != -1)
LABEL_6:
    swift_once();
LABEL_5:
  result = swift_bridgeObjectRetain();
  *a2 = result;
  return result;
}

uint64_t sub_2143DF398@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (a1 == 2)
  {
    if (qword_254D68F08 == -1)
      goto LABEL_5;
    goto LABEL_6;
  }
  if (qword_254D68F10 != -1)
LABEL_6:
    swift_once();
LABEL_5:
  result = swift_bridgeObjectRetain();
  *a2 = result;
  return result;
}

uint64_t sub_2143DF430(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  _UNKNOWN **v9;

  v1 = *(_QWORD *)(result + 16);
  v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    *(_QWORD *)(result + 16) = v2;
    v4 = sub_2141D8BF8(&qword_253F13008);
    v8 = v4;
    v9 = &off_24D17F2F8;
    v7[0] = 0;
    swift_beginAccess();
    result = sub_214233D18((uint64_t)v7, v2);
    v5 = *(_QWORD *)(v3 + 16);
    v6 = v5 + 1;
    if (!__OFADD__(v5, 1))
    {
      *(_QWORD *)(v3 + 16) = v6;
      v8 = v4;
      v9 = &off_24D17F2F8;
      v7[0] = 0;
      sub_214233D18((uint64_t)v7, v6);
      swift_endAccess();
      return v5;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_2143DF4F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_2143DF508(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_2143DF51C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_2143DF530(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

unint64_t sub_2143DF548()
{
  unint64_t result;

  result = qword_253F15560;
  if (!qword_253F15560)
  {
    result = MEMORY[0x2199CD934](&unk_214432210, &type metadata for Spec.Channel);
    atomic_store(result, (unint64_t *)&qword_253F15560);
  }
  return result;
}

uint64_t sub_2143DF58C()
{
  _BYTE *v0;

  if (v0[8] == 1)
  {
    sub_21442588C();
  }
  else
  {
    sub_21442588C();
    sub_214425880();
  }
  if (v0[24] == 1)
  {
    sub_21442588C();
  }
  else
  {
    sub_21442588C();
    sub_214425880();
  }
  if (v0[40] == 1)
  {
    sub_21442588C();
  }
  else
  {
    sub_21442588C();
    sub_214425880();
  }
  if (v0[56] == 1)
  {
    sub_21442588C();
  }
  else
  {
    sub_21442588C();
    sub_214425880();
  }
  if (v0[72] == 1)
    return sub_21442588C();
  sub_21442588C();
  return sub_214425880();
}

uint64_t sub_2143DF690()
{
  sub_214425874();
  sub_2143DF58C();
  return sub_2144258B0();
}

uint64_t sub_2143DF6D0()
{
  sub_214425874();
  sub_2143DF58C();
  return sub_2144258B0();
}

BOOL sub_2143DF708(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[2];
  _OWORD v9[3];
  _OWORD v10[2];

  v2 = a1[3];
  v7[2] = a1[2];
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a1 + 57);
  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  v4 = a2[3];
  v9[2] = a2[2];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 57);
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return sub_2143E0724((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_2143DF760()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_214425874();
  sub_21442588C();
  if (v1 != 9)
    sub_214425880();
  if (v0[16] == 1)
  {
    sub_21442588C();
  }
  else
  {
    sub_21442588C();
    sub_214425880();
  }
  if (v0[32] == 1)
  {
    sub_21442588C();
  }
  else
  {
    sub_21442588C();
    sub_214425880();
  }
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_2143DF850()
{
  _BYTE *v0;
  int v1;
  int v2;

  v1 = v0[16];
  v2 = v0[32];
  if (*v0 == 9)
  {
    sub_21442588C();
    if (!v1)
      goto LABEL_3;
LABEL_6:
    sub_21442588C();
    if (!v2)
      goto LABEL_4;
LABEL_7:
    sub_21442588C();
    return sub_214425880();
  }
  sub_21442588C();
  sub_214425880();
  if (v1)
    goto LABEL_6;
LABEL_3:
  sub_21442588C();
  sub_214425880();
  if (v2)
    goto LABEL_7;
LABEL_4:
  sub_21442588C();
  sub_214425880();
  return sub_214425880();
}

uint64_t sub_2143DF90C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  int v3;

  v1 = *v0;
  v2 = v0[16];
  v3 = v0[32];
  sub_214425874();
  if (v1 == 9)
  {
    sub_21442588C();
    if (!v2)
      goto LABEL_3;
LABEL_6:
    sub_21442588C();
    if (!v3)
      goto LABEL_4;
LABEL_7:
    sub_21442588C();
    goto LABEL_8;
  }
  sub_21442588C();
  sub_214425880();
  if (v2)
    goto LABEL_6;
LABEL_3:
  sub_21442588C();
  sub_214425880();
  if (v3)
    goto LABEL_7;
LABEL_4:
  sub_21442588C();
  sub_214425880();
LABEL_8:
  sub_214425880();
  return sub_2144258B0();
}

BOOL sub_2143DF9FC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_2143E0674((unsigned __int8 *)v7, (unsigned __int8 *)v8);
}

uint64_t sub_2143DFA40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  sub_214425874();
  sub_21442588C();
  sub_21442588C();
  if (v2)
    sub_21420F8D0((uint64_t)v4, v2);
  sub_21420F7E4((uint64_t)v4, v1);
  return sub_2144258B0();
}

uint64_t sub_2143DFAC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  sub_21442588C();
  sub_21442588C();
  if (v4)
    sub_21420F8D0(a1, v4);
  return sub_21420F7E4(a1, v3);
}

uint64_t sub_2143DFB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  sub_214425874();
  sub_21442588C();
  sub_21442588C();
  if (v2)
    sub_21420F8D0((uint64_t)v4, v2);
  sub_21420F7E4((uint64_t)v4, v1);
  return sub_2144258B0();
}

uint64_t sub_2143DFBAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1 != *a2)
    return 0;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  if (v5)
  {
    if (v7 && (sub_21420EB54(v5, v7) & 1) != 0)
      return sub_21420EC78(v6, v8);
    return 0;
  }
  if (v7)
    return 0;
  return sub_21420EC78(v6, v8);
}

uint64_t sub_2143DFC2C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  void (*v9)(uint64_t *__return_ptr, char *);
  uint64_t result;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v6);
    v8 = *(_BYTE *)(*(_QWORD *)(v1 + 56) + v6);
    v0[3] = v4;
    v0[4] = v5;
    v9 = (void (*)(uint64_t *__return_ptr, char *))v0[5];
    BYTE2(v17) = v7;
    BYTE3(v17) = v8;
    v9(&v17, (char *)&v17 + 2);
    return (unsigned __int16)v17;
  }
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = (unint64_t)(v0[2] + 64) >> 6;
    if (v11 < v12)
    {
      v13 = v0[1];
      v14 = *(_QWORD *)(v13 + 8 * v11);
      if (v14)
      {
LABEL_7:
        v5 = (v14 - 1) & v14;
        v6 = __clz(__rbit64(v14)) + (v11 << 6);
        v4 = v11;
        goto LABEL_3;
      }
      v15 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v12)
      {
        v14 = *(_QWORD *)(v13 + 8 * v15);
        if (v14)
        {
LABEL_10:
          v11 = v15;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * (v3 + 3));
          if (v14)
          {
            v11 = v3 + 3;
            goto LABEL_7;
          }
          v15 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v12)
          {
            v14 = *(_QWORD *)(v13 + 8 * v15);
            if (v14)
              goto LABEL_10;
            v11 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v12)
            {
              v14 = *(_QWORD *)(v13 + 8 * v11);
              if (v14)
                goto LABEL_7;
              v4 = v12 - 1;
              v16 = v3 + 6;
              while (v12 != v16)
              {
                v14 = *(_QWORD *)(v13 + 8 * v16++);
                if (v14)
                {
                  v11 = v16 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
    return 768;
  }
  return result;
}

_QWORD *sub_2143DFD84(uint64_t a1)
{
  _QWORD *result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  sub_2141D8BF8(&qword_253F15D18);
  result = (_QWORD *)sub_2144256B8();
  v3 = 0;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + i);
    v15 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    *(_QWORD *)((char *)result + ((i >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << i;
    *(_BYTE *)(result[6] + i) = v14;
    *(_BYTE *)(result[7] + i) = v15;
    v16 = result[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    result[2] = v18;
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v11 >= v8)
      return result;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        return result;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          return result;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v8)
    return result;
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      return result;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_2143DFF08(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  id v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v6 = swift_bridgeObjectRetain();
  v7 = *(_BYTE *)(v6 + 32);
  v8 = *(_QWORD *)(v6 + 48);
  v9 = *(_QWORD *)(v6 + 56);
  v51 = v6;
  v52 = a3;
  v10 = *(_BYTE *)(v6 + 40);
  v11 = *a3;
  v12 = sub_214336B74(v7);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v13 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_24;
  v17 = v12;
  v18 = v13;
  v19 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v18 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_2142A785C();
      if ((v18 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v24 = v52;
    v25 = (_QWORD *)*v52;
    *(_QWORD *)(*v52 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    *(_BYTE *)(v25[6] + v17) = v7;
    v26 = v25[7] + 24 * v17;
    *(_BYTE *)v26 = v10;
    *(_QWORD *)(v26 + 8) = v8;
    *(_QWORD *)(v26 + 16) = v9;
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v25[2] = v29;
    v30 = v3 - 1;
    if (v3 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v31 = (_QWORD *)(v51 + 88);
    while (1)
    {
      v32 = *((_BYTE *)v31 - 24);
      v33 = *(v31 - 1);
      v34 = *v31;
      v35 = *((_BYTE *)v31 - 16);
      v36 = *v24;
      v37 = sub_214336B74(v32);
      v39 = *(_QWORD *)(v36 + 16);
      v40 = (v38 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
        break;
      v42 = v37;
      v43 = v38;
      v44 = *(_QWORD *)(v36 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v44 < v41)
      {
        sub_21429BEDC(v41, 1);
        v45 = sub_214336B74(v32);
        if ((v43 & 1) != (v46 & 1))
          goto LABEL_26;
        v42 = v45;
      }
      if ((v43 & 1) != 0)
        goto LABEL_10;
      v24 = v52;
      v47 = (_QWORD *)*v52;
      *(_QWORD *)(*v52 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      *(_BYTE *)(v47[6] + v42) = v32;
      v48 = v47[7] + 24 * v42;
      *(_BYTE *)v48 = v35;
      *(_QWORD *)(v48 + 8) = v33;
      *(_QWORD *)(v48 + 16) = v34;
      v49 = v47[2];
      v28 = __OFADD__(v49, 1);
      v50 = v49 + 1;
      if (v28)
        goto LABEL_25;
      v47[2] = v50;
      v31 += 4;
      if (!--v30)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_21429BEDC(v16, a2 & 1);
  v20 = sub_214336B74(v7);
  if ((v18 & 1) == (v21 & 1))
  {
    v17 = v20;
    if ((v18 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v22 = (void *)swift_allocError();
    swift_willThrow();
    v23 = v22;
    sub_2141D8BF8(&qword_254D6A958);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  sub_214425820();
  __break(1u);
LABEL_27:
  sub_2144254D8();
  sub_214424F20();
  sub_2144255F8();
  sub_214424F20();
  sub_214425628();
  __break(1u);
}

uint64_t sub_2143E02B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v5;
  __int16 v8;
  __int16 v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  swift_bridgeObjectRetain();
  swift_retain();
  v8 = sub_2143DFC2C();
  if ((v8 & 0xFF00) == 0x300)
    goto LABEL_11;
  v9 = v8;
  v10 = (_QWORD *)*a5;
  v11 = sub_214336B74(v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
    goto LABEL_21;
  v5 = v12;
  if (v10[3] >= v16)
    goto LABEL_6;
  sub_21429C1DC(v16, a4 & 1);
  v11 = sub_214336B74(v9);
  if ((v5 & 1) != (v17 & 1))
  {
LABEL_5:
    v11 = sub_214425820();
    __break(1u);
LABEL_6:
    if ((a4 & 1) == 0)
      goto LABEL_22;
  }
  if ((v5 & 1) == 0)
    goto LABEL_8;
LABEL_10:
  while (1)
  {
    v21 = sub_2143DFC2C();
    if ((v21 & 0xFF00) == 0x300)
      break;
    v9 = v21;
    v23 = HIBYTE(v21);
    v5 = 1;
    while (1)
    {
      v24 = (_QWORD *)*a5;
      v11 = sub_214336B74(v9);
      v26 = v24[2];
      v27 = (v25 & 1) == 0;
      v15 = __OFADD__(v26, v27);
      v28 = v26 + v27;
      if (v15)
        break;
      a4 = v25;
      if (v24[3] < v28)
      {
        sub_21429C1DC(v28, 1);
        v11 = sub_214336B74(v9);
        if ((a4 & 1) != (v29 & 1))
          goto LABEL_5;
      }
      if ((a4 & 1) == 0)
      {
        v30 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v11 >> 6) + 64) |= 1 << v11;
        *(_BYTE *)(v30[6] + v11) = v9;
        *(_BYTE *)(v30[7] + v11) = v23;
        v31 = v30[2];
        v15 = __OFADD__(v31, 1);
        v32 = v31 + 1;
        if (v15)
          goto LABEL_20;
        v30[2] = v32;
      }
      v9 = sub_2143DFC2C();
      v23 = HIBYTE(v9);
      if ((v9 & 0xFF00) == 0x300)
        goto LABEL_11;
    }
LABEL_21:
    while (1)
    {
      __break(1u);
LABEL_22:
      v33 = v11;
      sub_2142A7A18();
      v11 = v33;
      if ((v5 & 1) != 0)
        break;
LABEL_8:
      v18 = (_QWORD *)*a5;
      *(_QWORD *)(*a5 + 8 * (v11 >> 6) + 64) |= 1 << v11;
      *(_BYTE *)(v18[6] + v11) = v9;
      *(_BYTE *)(v18[7] + v11) = HIBYTE(v9);
      v19 = v18[2];
      v15 = __OFADD__(v19, 1);
      v20 = v19 + 1;
      if (!v15)
      {
        v18[2] = v20;
        goto LABEL_10;
      }
LABEL_20:
      __break(1u);
    }
  }
LABEL_11:
  swift_release();
  swift_bridgeObjectRelease();
  sub_2141E9120();
  return swift_release();
}

_WORD *sub_2143E0540@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_2143E054C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_2143E0554@<X0>(_QWORD *a1@<X8>)
{
  if (qword_253F101E8 != -1)
    swift_once();
  *a1 = qword_253F1C780;
  return swift_bridgeObjectRetain();
}

double sub_2143E05A4@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  sub_2141D8BF8(&qword_253F13D68);
  v2 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v2 + 16) = xmmword_2144271D0;
  *(_OWORD *)(v2 + 32) = xmmword_21442DAE0;
  *a1 = v2;
  return result;
}

uint64_t sub_2143E05F0@<X0>(_QWORD *a1@<X8>)
{
  if (qword_254D68EF0 != -1)
    swift_once();
  *a1 = qword_254D760D0;
  return swift_retain();
}

uint64_t sub_2143E0640@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2143DF1DC(&v3);
  *a1 = v3;
  return result;
}

BOOL sub_2143E0674(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v6;
  char v7;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 9)
  {
    if (v3 != 9)
      return 0;
  }
  else if (v3 == 9 || v2 != v3)
  {
    return 0;
  }
  v6 = a2[16];
  if ((a1[16] & 1) != 0)
  {
    if (!a2[16])
      return 0;
  }
  else
  {
    if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  v7 = a2[32];
  if ((a1[32] & 1) != 0)
  {
    if (!a2[32])
      return 0;
  }
  else
  {
    if (*((_QWORD *)a1 + 3) != *((_QWORD *)a2 + 3))
      v7 = 1;
    if ((v7 & 1) != 0)
      return 0;
  }
  return *((_QWORD *)a1 + 5) == *((_QWORD *)a2 + 5);
}

BOOL sub_2143E0724(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  v4 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  v5 = *(_BYTE *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  v6 = *(_BYTE *)(a2 + 72);
  if ((*(_BYTE *)(a1 + 72) & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      v6 = 1;
    return (v6 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 72) & 1) != 0;
}

BOOL sub_2143E07F8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0
      && (sub_214352D10(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0
      && (sub_214352EE4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)) & 1) != 0
      && ((*(_WORD *)(a1 + 48) ^ *(_WORD *)(a2 + 48)) & 1) == 0
      && ((*(_WORD *)(a1 + 48) ^ *(_WORD *)(a2 + 48)) & 0x100) == 0
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
      && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
}

uint64_t sub_2143E08B4(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_2141D399C(0, v2, 0);
    v3 = v23;
    v6 = (unsigned __int8 *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    v22 = (*(_BYTE *)(a2 + 81) & 1) == 0;
    do
    {
      v9 = *v6++;
      v8 = v9;
      if (*(_QWORD *)(v7 + 16))
      {
        v10 = v6;
        v11 = sub_214336B74(v8);
        if ((v12 & 1) != 0)
        {
          v13 = *(_QWORD *)(v7 + 56) + 24 * v11;
          v14 = *(_BYTE *)v13;
          v15 = *(_QWORD *)(v13 + 8);
          v16 = *(_QWORD *)(v13 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v15 = 0;
          v16 = MEMORY[0x24BEE4AF8];
          v14 = v22;
        }
        v6 = v10;
      }
      else
      {
        v15 = 0;
        v16 = MEMORY[0x24BEE4AF8];
        v14 = v22;
      }
      v24 = v3;
      v18 = *(_QWORD *)(v3 + 16);
      v17 = *(_QWORD *)(v3 + 24);
      if (v18 >= v17 >> 1)
      {
        v20 = v6;
        sub_2141D399C((_QWORD *)(v17 > 1), v18 + 1, 1);
        v6 = v20;
        v3 = v24;
      }
      *(_QWORD *)(v3 + 16) = v18 + 1;
      v19 = v3 + 32 * v18;
      *(_BYTE *)(v19 + 32) = v8;
      *(_BYTE *)(v19 + 40) = v14;
      *(_QWORD *)(v19 + 48) = v15;
      *(_QWORD *)(v19 + 56) = v16;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_2143E0A1C@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  int64x2_t v40;
  _QWORD *v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _UNKNOWN **v53;
  char v54[16];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned __int8 v64;
  _OWORD v65[4];
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char v71;
  _BYTE v72[24];
  __n128 v73;
  unsigned __int8 v74;
  __n128 v75;
  __n128 v76;
  int v78;
  int v79;

  v78 = a5;
  sub_2141E801C(a1, (uint64_t)v54, &qword_253F143A0);
  v14 = v55;
  v13 = v56;
  LOWORD(v15) = v58;
  v47 = v57;
  sub_2141E801C(a1, (uint64_t)v65, &qword_253F143A0);
  if (BYTE8(v65[0]) != 254)
  {
    v69 = v65[2];
    v70 = v65[3];
    v71 = v66;
    v67 = v65[0];
    v68 = v65[1];
    sub_2141E801C((uint64_t)&v70, (uint64_t)v72, &qword_253F12448);
    sub_2141E801C((uint64_t)v72, (uint64_t)&v73, &qword_253F12448);
    if (v74 != 255)
    {
      sub_2143E4928(&v73, &v75);
      sub_2143E4928(&v75, &v76);
      __asm { BR              X10 }
    }
  }
  v49 = sub_2143DF430(a7);
  v50 = v16;
  v79 = v17;
  if (!(_BYTE)a3)
  {
    sub_2141E801C(a1, (uint64_t)&v59, &qword_253F143A0);
    LODWORD(v18) = 2;
    if (v60 == 254)
    {
      v15 = 0;
    }
    else
    {
      if (v60 == 255)
        v20 = 0;
      else
        v20 = v59;
      if (v60 == 255)
        v18 = 2;
      else
        v18 = v60;
      if ((~(_WORD)v15 & 0xFF00) != 0)
      {
        if (BYTE1(v15) != 3)
        {
          if (!BYTE1(v15))
          {
            result = swift_release();
            a3 = 0;
            v28 = 0;
            v40 = (int64x2_t)xmmword_2144325C0;
            goto LABEL_77;
          }
          goto LABEL_79;
        }
        v44 = v15;
        if (!(_BYTE)v15)
        {
          a3 = v14;
          v32 = v47;
          v14 = a4;
          v15 = v20;
          goto LABEL_40;
        }
        v15 = v20;
        if (v44 != 255)
        {
          sub_2143E4C18(v49, v50, v79, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
LABEL_88:
          v45 = v15;
          if (v15 == 2)
          {
            v39 = v78;
            v19 = v20;
            v25 = v47;
            v14 = a4;
LABEL_56:
            if ((v39 & 0xFF00) == 0x200 || v39 != 2)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F103A0);
            a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
            result = swift_release();
            v28 = 0;
            v29 = 0x4000000000000100;
            goto LABEL_60;
          }
          v19 = v20;
          if (v45 == 255)
          {
LABEL_55:
            v25 = sub_2143DEC44(0, 0, &qword_254D6DFD8, (void (*)(uint64_t, uint64_t))sub_2141D975C);
            v14 = a4;
            v39 = v78;
            goto LABEL_56;
          }
          sub_2143E4C18(v49, v50, v79, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
          goto LABEL_91;
        }
LABEL_39:
        v32 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
        a3 = v14;
        v14 = a4;
LABEL_40:
        v47 = v32;
        a4 = v13;
        if ((_DWORD)v18 == 1 || (_DWORD)v18 == 2 && v15 == 2)
        {
          LOBYTE(v13) = v18;
          v18 = v15;
          a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
          v33 = 0;
          v34 = 0;
          goto LABEL_64;
        }
        LOBYTE(v13) = v18;
        v18 = v15;
        if (a2 <= 7u)
        {
          v33 = 1;
          if (((1 << a2) & 0xC3) != 0)
          {
LABEL_63:
            v34 = 512;
LABEL_64:
            if ((v78 & 0xFF00) == 0x200 || (_BYTE)v78)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
            result = swift_release();
            v28 = v34 | v33;
            v40 = vdupq_n_s64(0x100uLL);
            v25 = v47;
            v40.i64[0] = a4;
            v19 = v18;
            LOBYTE(v18) = v13;
            goto LABEL_78;
          }
        }
LABEL_91:
        v33 = 0;
        goto LABEL_63;
      }
      v15 = v20;
    }
    v30 = *(_QWORD *)(a6 + 16);
    v31 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    *(_QWORD *)(a6 + 16) = v31;
    v52 = sub_2141D8BF8(&qword_253F119D8);
    v53 = &off_24D17F2F8;
    LOBYTE(v51) = 2;
    swift_beginAccess();
    sub_214233D18((uint64_t)&v51, v31);
    v14 = *(_QWORD *)(a6 + 16);
    if (__OFADD__(v14, 1))
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    *(_QWORD *)(a6 + 16) = v14 + 1;
    v52 = sub_2141D8BF8(&qword_253F119D0);
    v53 = &off_24D17F2F8;
    LOBYTE(v51) = 0;
    sub_214233D18((uint64_t)&v51, v14 + 1);
    swift_endAccess();
    v13 = *(_QWORD *)(a6 + 16);
    goto LABEL_39;
  }
  if (a3 != 1)
  {
    sub_2141E801C(a1, (uint64_t)&v63, &qword_253F143A0);
    LOBYTE(v18) = 2;
    if (v64 == 254)
    {
      v19 = 0;
LABEL_52:
      v35 = *(_QWORD *)(a6 + 16);
      v36 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      *(_QWORD *)(a6 + 16) = v36;
      v52 = sub_2141D8BF8(&qword_253F119D8);
      v53 = &off_24D17F2F8;
      LOBYTE(v51) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v51, v36);
      v37 = *(_QWORD *)(a6 + 16);
      v38 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
LABEL_100:
        __break(1u);
        JUMPOUT(0x2143E1374);
      }
      *(_QWORD *)(a6 + 16) = v38;
      v52 = sub_2141D8BF8(&qword_253F119D0);
      v53 = &off_24D17F2F8;
      LOBYTE(v51) = 0;
      sub_214233D18((uint64_t)&v51, v38);
      swift_endAccess();
      v13 = *(_QWORD *)(a6 + 16);
      goto LABEL_55;
    }
    if (v64 == 255)
      v20 = 0;
    else
      v20 = v63;
    if (v64 == 255)
      v18 = 2;
    else
      v18 = v64;
    if ((~(_WORD)v15 & 0xFF00) == 0)
    {
      v19 = v20;
      goto LABEL_52;
    }
    if (BYTE1(v15) != 3)
    {
      if (BYTE1(v15) == 2)
      {
        result = swift_release();
        a3 = 0;
        v28 = 0;
        v40 = (int64x2_t)xmmword_2144325A0;
        goto LABEL_77;
      }
LABEL_79:
      sub_2143E48E4();
      swift_allocError();
      *v41 = 0xD00000000000003BLL;
      v42 = 0x800000021445B710;
      goto LABEL_84;
    }
    goto LABEL_88;
  }
  sub_2141E801C(a1, (uint64_t)&v61, &qword_253F143A0);
  LOBYTE(v18) = 2;
  if (v62 == 254)
  {
    v19 = 0;
LABEL_20:
    v21 = *(_QWORD *)(a6 + 16);
    v22 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      *(_QWORD *)(a6 + 16) = v22;
      v52 = sub_2141D8BF8(&qword_253F119D8);
      v53 = &off_24D17F2F8;
      LOBYTE(v51) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v51, v22);
      v23 = *(_QWORD *)(a6 + 16);
      v24 = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
        *(_QWORD *)(a6 + 16) = v24;
        v52 = sub_2141D8BF8(&qword_253F119D0);
        v53 = &off_24D17F2F8;
        LOBYTE(v51) = 0;
        sub_214233D18((uint64_t)&v51, v24);
        swift_endAccess();
        v13 = *(_QWORD *)(a6 + 16);
        goto LABEL_23;
      }
      goto LABEL_98;
    }
    __break(1u);
    goto LABEL_96;
  }
  if (v62 == 255)
    v20 = 0;
  else
    v20 = v61;
  if (v62 == 255)
    LOBYTE(v18) = 2;
  else
    LOBYTE(v18) = v62;
  if ((~(_WORD)v15 & 0xFF00) == 0)
  {
    v19 = v20;
    goto LABEL_20;
  }
  if (BYTE1(v15) == 3)
  {
    v43 = v15;
    if (v15 == 1)
    {
      v26 = v78;
      v19 = v20;
      v25 = v47;
      v14 = a4;
LABEL_24:
      if ((v26 & 0xFF00) == 0x200 || v26 != 1)
        v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
      a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
      result = swift_release();
      v28 = 0;
      v29 = 0x2000000000000100;
LABEL_60:
      v40 = vdupq_n_s64(v29);
      v40.i64[0] = v13;
LABEL_78:
      *(_QWORD *)a8 = v19;
      *(_BYTE *)(a8 + 8) = v18;
      *(_QWORD *)(a8 + 16) = v14;
      *(_QWORD *)(a8 + 24) = a3;
      *(_QWORD *)(a8 + 32) = v28;
      *(int64x2_t *)(a8 + 40) = v40;
      *(_QWORD *)(a8 + 56) = v25;
      *(_QWORD *)(a8 + 64) = v49;
      *(_QWORD *)(a8 + 72) = v50;
      *(_BYTE *)(a8 + 80) = v79;
      return result;
    }
    v19 = v20;
    if (v43 == 255)
    {
LABEL_23:
      v25 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      v14 = a4;
      v26 = v78;
      goto LABEL_24;
    }
    sub_2143E4C18(v49, v50, v79, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
    __break(1u);
  }
  else if (BYTE1(v15) == 1)
  {
    result = swift_release();
    a3 = 0;
    v28 = 0;
    v40 = (int64x2_t)xmmword_2144325B0;
LABEL_77:
    v19 = v20;
    v25 = 0;
    goto LABEL_78;
  }
  sub_2144254D8();
  sub_214424F20();
  sub_2144255F8();
  v42 = 0xE000000000000000;
  sub_2143E48E4();
  swift_allocError();
  *v41 = 0;
LABEL_84:
  v41[1] = v42;
  swift_willThrow();
  swift_release();
  return sub_2143E4C18(v49, v50, v79, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t sub_2143E1394@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  int64x2_t v38;
  _QWORD *v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  char v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  _OWORD v62[4];
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  _BYTE v69[24];
  __n128 v70;
  unsigned __int8 v71;
  __n128 v72;
  __n128 v73;
  int v75;
  int v76;

  v75 = a5;
  sub_2141E801C(a1, (uint64_t)v51, &qword_253F143A0);
  v14 = v52;
  v13 = v53;
  LOWORD(v15) = v55;
  v45 = v54;
  sub_2141E801C(a1, (uint64_t)v62, &qword_253F143A0);
  if (BYTE8(v62[0]) != 254)
  {
    v66 = v62[2];
    v67 = v62[3];
    v68 = v63;
    v64 = v62[0];
    v65 = v62[1];
    sub_2141E801C((uint64_t)&v67, (uint64_t)v69, &qword_253F12448);
    sub_2141E801C((uint64_t)v69, (uint64_t)&v70, &qword_253F12448);
    if (v71 != 255)
    {
      sub_2143E4928(&v70, &v72);
      sub_2143E4928(&v72, &v73);
      __asm { BR              X10 }
    }
  }
  v47 = sub_21423EE74(MEMORY[0x24BEE4AF8], a7, 0);
  v76 = 32;
  if (!(_BYTE)a3)
  {
    sub_2141E801C(a1, (uint64_t)&v56, &qword_253F143A0);
    LODWORD(v16) = 2;
    if (v57 == 254)
    {
      v15 = 0;
    }
    else
    {
      if (v57 == 255)
        v18 = 0;
      else
        v18 = v56;
      if (v57 == 255)
        v16 = 2;
      else
        v16 = v57;
      if ((~(_WORD)v15 & 0xFF00) != 0)
      {
        if (BYTE1(v15) != 3)
        {
          if (!BYTE1(v15))
          {
            result = swift_release();
            a3 = 0;
            v26 = 0;
            v38 = (int64x2_t)xmmword_2144325C0;
            goto LABEL_77;
          }
          goto LABEL_79;
        }
        v42 = v15;
        if (!(_BYTE)v15)
        {
          a3 = v14;
          v30 = v45;
          v14 = a4;
          v15 = v18;
          goto LABEL_40;
        }
        v15 = v18;
        if (v42 != 255)
        {
          sub_2143E4C18(v47, 0, v76, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
LABEL_88:
          v43 = v15;
          if (v15 == 2)
          {
            v37 = v75;
            v17 = v18;
            v23 = v45;
            v14 = a4;
LABEL_56:
            if ((v37 & 0xFF00) == 0x200 || v37 != 2)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F103A0);
            a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
            result = swift_release();
            v26 = 0;
            v27 = 0x4000000000000100;
            goto LABEL_60;
          }
          v17 = v18;
          if (v43 == 255)
          {
LABEL_55:
            v23 = sub_2143DEC44(0, 0, &qword_254D6DFD8, (void (*)(uint64_t, uint64_t))sub_2141D975C);
            v14 = a4;
            v37 = v75;
            goto LABEL_56;
          }
          sub_2143E4C18(v47, 0, v76, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
          goto LABEL_91;
        }
LABEL_39:
        v30 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
        a3 = v14;
        v14 = a4;
LABEL_40:
        v45 = v30;
        a4 = v13;
        if ((_DWORD)v16 == 1 || (_DWORD)v16 == 2 && v15 == 2)
        {
          LOBYTE(v13) = v16;
          v16 = v15;
          a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
          v31 = 0;
          v32 = 0;
          goto LABEL_64;
        }
        LOBYTE(v13) = v16;
        v16 = v15;
        if (a2 <= 7u)
        {
          v31 = 1;
          if (((1 << a2) & 0xC3) != 0)
          {
LABEL_63:
            v32 = 512;
LABEL_64:
            if ((v75 & 0xFF00) == 0x200 || (_BYTE)v75)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
            result = swift_release();
            v26 = v32 | v31;
            v38 = vdupq_n_s64(0x100uLL);
            v23 = v45;
            v38.i64[0] = a4;
            v17 = v16;
            LOBYTE(v16) = v13;
            goto LABEL_78;
          }
        }
LABEL_91:
        v31 = 0;
        goto LABEL_63;
      }
      v15 = v18;
    }
    v28 = *(_QWORD *)(a6 + 16);
    v29 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    *(_QWORD *)(a6 + 16) = v29;
    v49 = sub_2141D8BF8(&qword_253F119D8);
    v50 = &off_24D17F2F8;
    LOBYTE(v48) = 2;
    swift_beginAccess();
    sub_214233D18((uint64_t)&v48, v29);
    v14 = *(_QWORD *)(a6 + 16);
    if (__OFADD__(v14, 1))
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    *(_QWORD *)(a6 + 16) = v14 + 1;
    v49 = sub_2141D8BF8(&qword_253F119D0);
    v50 = &off_24D17F2F8;
    LOBYTE(v48) = 0;
    sub_214233D18((uint64_t)&v48, v14 + 1);
    swift_endAccess();
    v13 = *(_QWORD *)(a6 + 16);
    goto LABEL_39;
  }
  if (a3 != 1)
  {
    sub_2141E801C(a1, (uint64_t)&v60, &qword_253F143A0);
    LOBYTE(v16) = 2;
    if (v61 == 254)
    {
      v17 = 0;
LABEL_52:
      v33 = *(_QWORD *)(a6 + 16);
      v34 = v33 + 1;
      if (__OFADD__(v33, 1))
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      *(_QWORD *)(a6 + 16) = v34;
      v49 = sub_2141D8BF8(&qword_253F119D8);
      v50 = &off_24D17F2F8;
      LOBYTE(v48) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v48, v34);
      v35 = *(_QWORD *)(a6 + 16);
      v36 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
LABEL_100:
        __break(1u);
        JUMPOUT(0x2143E1CF8);
      }
      *(_QWORD *)(a6 + 16) = v36;
      v49 = sub_2141D8BF8(&qword_253F119D0);
      v50 = &off_24D17F2F8;
      LOBYTE(v48) = 0;
      sub_214233D18((uint64_t)&v48, v36);
      swift_endAccess();
      v13 = *(_QWORD *)(a6 + 16);
      goto LABEL_55;
    }
    if (v61 == 255)
      v18 = 0;
    else
      v18 = v60;
    if (v61 == 255)
      v16 = 2;
    else
      v16 = v61;
    if ((~(_WORD)v15 & 0xFF00) == 0)
    {
      v17 = v18;
      goto LABEL_52;
    }
    if (BYTE1(v15) != 3)
    {
      if (BYTE1(v15) == 2)
      {
        result = swift_release();
        a3 = 0;
        v26 = 0;
        v38 = (int64x2_t)xmmword_2144325A0;
        goto LABEL_77;
      }
LABEL_79:
      sub_2143E48E4();
      swift_allocError();
      *v39 = 0xD00000000000003BLL;
      v40 = 0x800000021445B710;
      goto LABEL_84;
    }
    goto LABEL_88;
  }
  sub_2141E801C(a1, (uint64_t)&v58, &qword_253F143A0);
  LOBYTE(v16) = 2;
  if (v59 == 254)
  {
    v17 = 0;
LABEL_20:
    v19 = *(_QWORD *)(a6 + 16);
    v20 = v19 + 1;
    if (!__OFADD__(v19, 1))
    {
      *(_QWORD *)(a6 + 16) = v20;
      v49 = sub_2141D8BF8(&qword_253F119D8);
      v50 = &off_24D17F2F8;
      LOBYTE(v48) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v48, v20);
      v21 = *(_QWORD *)(a6 + 16);
      v22 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
        *(_QWORD *)(a6 + 16) = v22;
        v49 = sub_2141D8BF8(&qword_253F119D0);
        v50 = &off_24D17F2F8;
        LOBYTE(v48) = 0;
        sub_214233D18((uint64_t)&v48, v22);
        swift_endAccess();
        v13 = *(_QWORD *)(a6 + 16);
        goto LABEL_23;
      }
      goto LABEL_98;
    }
    __break(1u);
    goto LABEL_96;
  }
  if (v59 == 255)
    v18 = 0;
  else
    v18 = v58;
  if (v59 == 255)
    LOBYTE(v16) = 2;
  else
    LOBYTE(v16) = v59;
  if ((~(_WORD)v15 & 0xFF00) == 0)
  {
    v17 = v18;
    goto LABEL_20;
  }
  if (BYTE1(v15) == 3)
  {
    v41 = v15;
    if (v15 == 1)
    {
      v24 = v75;
      v17 = v18;
      v23 = v45;
      v14 = a4;
LABEL_24:
      if ((v24 & 0xFF00) == 0x200 || v24 != 1)
        v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
      a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
      result = swift_release();
      v26 = 0;
      v27 = 0x2000000000000100;
LABEL_60:
      v38 = vdupq_n_s64(v27);
      v38.i64[0] = v13;
LABEL_78:
      *(_QWORD *)a8 = v17;
      *(_BYTE *)(a8 + 8) = v16;
      *(_QWORD *)(a8 + 16) = v14;
      *(_QWORD *)(a8 + 24) = a3;
      *(_QWORD *)(a8 + 32) = v26;
      *(int64x2_t *)(a8 + 40) = v38;
      *(_QWORD *)(a8 + 56) = v23;
      *(_QWORD *)(a8 + 64) = v47;
      *(_QWORD *)(a8 + 72) = 0;
      *(_BYTE *)(a8 + 80) = v76;
      return result;
    }
    v17 = v18;
    if (v41 == 255)
    {
LABEL_23:
      v23 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      v14 = a4;
      v24 = v75;
      goto LABEL_24;
    }
    sub_2143E4C18(v47, 0, v76, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
    __break(1u);
  }
  else if (BYTE1(v15) == 1)
  {
    result = swift_release();
    a3 = 0;
    v26 = 0;
    v38 = (int64x2_t)xmmword_2144325B0;
LABEL_77:
    v17 = v18;
    v23 = 0;
    goto LABEL_78;
  }
  sub_2144254D8();
  sub_214424F20();
  sub_2144255F8();
  v40 = 0xE000000000000000;
  sub_2143E48E4();
  swift_allocError();
  *v39 = 0;
LABEL_84:
  v39[1] = v40;
  swift_willThrow();
  swift_release();
  return sub_2143E4C18(v47, 0, v76, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t sub_2143E1D18@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int64x2_t v39;
  _QWORD *v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _UNKNOWN **v51;
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unsigned __int8 v62;
  _OWORD v63[4];
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  _BYTE v70[24];
  __n128 v71;
  unsigned __int8 v72;
  __n128 v73;
  __n128 v74;
  int v76;
  int v77;

  v76 = a5;
  sub_2141E801C(a1, (uint64_t)v52, &qword_253F143A0);
  v14 = v53;
  v13 = v54;
  LOWORD(v15) = v56;
  v46 = v55;
  sub_2141E801C(a1, (uint64_t)v63, &qword_253F143A0);
  if (BYTE8(v63[0]) != 254)
  {
    v67 = v63[2];
    v68 = v63[3];
    v69 = v64;
    v65 = v63[0];
    v66 = v63[1];
    sub_2141E801C((uint64_t)&v68, (uint64_t)v70, &qword_253F12448);
    sub_2141E801C((uint64_t)v70, (uint64_t)&v71, &qword_253F12448);
    if (v72 != 255)
    {
      sub_2143E4928(&v71, &v73);
      sub_2143E4928(&v73, &v74);
      __asm { BR              X10 }
    }
  }
  if (a7 == 2)
  {
    v48 = sub_21423F4A8(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E0640, 0);
    v16 = 96;
  }
  else
  {
    v48 = sub_21423F484(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E05F0, 0);
    v16 = 160;
  }
  v77 = v16;
  if (!(_BYTE)a3)
  {
    sub_2141E801C(a1, (uint64_t)&v57, &qword_253F143A0);
    v17 = 2;
    if (v58 == 254)
    {
      v15 = 0;
    }
    else
    {
      if (v58 == 255)
        v19 = 0;
      else
        v19 = v57;
      if (v58 == 255)
        v17 = 2;
      else
        v17 = v58;
      if ((~(_WORD)v15 & 0xFF00) != 0)
      {
        if (BYTE1(v15) != 3)
        {
          if (!BYTE1(v15))
          {
            result = swift_release();
            a3 = 0;
            v27 = 0;
            v39 = (int64x2_t)xmmword_2144325C0;
            goto LABEL_80;
          }
          goto LABEL_82;
        }
        v43 = v15;
        if (!(_BYTE)v15)
        {
          a3 = v14;
          v31 = v46;
          v14 = a4;
          v15 = v19;
          goto LABEL_43;
        }
        v15 = v19;
        if (v43 != 255)
        {
          sub_2143E4C18(v48, 0, v77, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
LABEL_91:
          v44 = v15;
          if (v15 == 2)
          {
            v38 = v76;
            v18 = v19;
            v24 = v46;
            v14 = a4;
LABEL_59:
            if ((v38 & 0xFF00) == 0x200 || v38 != 2)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F103A0);
            a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
            result = swift_release();
            v27 = 0;
            v28 = 0x4000000000000100;
            goto LABEL_63;
          }
          v18 = v19;
          if (v44 == 255)
          {
LABEL_58:
            v24 = sub_2143DEC44(0, 0, &qword_254D6DFD8, (void (*)(uint64_t, uint64_t))sub_2141D975C);
            v14 = a4;
            v38 = v76;
            goto LABEL_59;
          }
          sub_2143E4C18(v48, 0, v77, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
          goto LABEL_94;
        }
LABEL_42:
        v31 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
        a3 = v14;
        v14 = a4;
LABEL_43:
        v46 = v31;
        a4 = v13;
        if (v17 == 1 || v17 == 2 && v15 == 2)
        {
          v13 = v15;
          a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
          v32 = 0;
          v33 = 0;
          goto LABEL_67;
        }
        v13 = v15;
        if (a2 <= 7u)
        {
          v32 = 1;
          if (((1 << a2) & 0xC3) != 0)
          {
LABEL_66:
            v33 = 512;
LABEL_67:
            if ((v76 & 0xFF00) == 0x200 || (_BYTE)v76)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
            result = swift_release();
            v27 = v33 | v32;
            v39 = vdupq_n_s64(0x100uLL);
            v24 = v46;
            v39.i64[0] = a4;
            v18 = v13;
            goto LABEL_81;
          }
        }
LABEL_94:
        v32 = 0;
        goto LABEL_66;
      }
      v15 = v19;
    }
    v29 = *(_QWORD *)(a6 + 16);
    v30 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    *(_QWORD *)(a6 + 16) = v30;
    v50 = sub_2141D8BF8(&qword_253F119D8);
    v51 = &off_24D17F2F8;
    LOBYTE(v49) = 2;
    swift_beginAccess();
    sub_214233D18((uint64_t)&v49, v30);
    v14 = *(_QWORD *)(a6 + 16);
    if (__OFADD__(v14, 1))
    {
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    *(_QWORD *)(a6 + 16) = v14 + 1;
    v50 = sub_2141D8BF8(&qword_253F119D0);
    v51 = &off_24D17F2F8;
    LOBYTE(v49) = 0;
    sub_214233D18((uint64_t)&v49, v14 + 1);
    swift_endAccess();
    v13 = *(_QWORD *)(a6 + 16);
    goto LABEL_42;
  }
  if (a3 != 1)
  {
    sub_2141E801C(a1, (uint64_t)&v61, &qword_253F143A0);
    LOBYTE(v17) = 2;
    if (v62 == 254)
    {
      v18 = 0;
LABEL_55:
      v34 = *(_QWORD *)(a6 + 16);
      v35 = v34 + 1;
      if (__OFADD__(v34, 1))
      {
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      *(_QWORD *)(a6 + 16) = v35;
      v50 = sub_2141D8BF8(&qword_253F119D8);
      v51 = &off_24D17F2F8;
      LOBYTE(v49) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v49, v35);
      v36 = *(_QWORD *)(a6 + 16);
      v37 = v36 + 1;
      if (__OFADD__(v36, 1))
      {
LABEL_103:
        __break(1u);
        JUMPOUT(0x2143E269CLL);
      }
      *(_QWORD *)(a6 + 16) = v37;
      v50 = sub_2141D8BF8(&qword_253F119D0);
      v51 = &off_24D17F2F8;
      LOBYTE(v49) = 0;
      sub_214233D18((uint64_t)&v49, v37);
      swift_endAccess();
      v13 = *(_QWORD *)(a6 + 16);
      goto LABEL_58;
    }
    if (v62 == 255)
      v19 = 0;
    else
      v19 = v61;
    if (v62 == 255)
      LOBYTE(v17) = 2;
    else
      LOBYTE(v17) = v62;
    if ((~(_WORD)v15 & 0xFF00) == 0)
    {
      v18 = v19;
      goto LABEL_55;
    }
    if (BYTE1(v15) != 3)
    {
      if (BYTE1(v15) == 2)
      {
        result = swift_release();
        a3 = 0;
        v27 = 0;
        v39 = (int64x2_t)xmmword_2144325A0;
        goto LABEL_80;
      }
LABEL_82:
      sub_2143E48E4();
      swift_allocError();
      *v40 = 0xD00000000000003BLL;
      v41 = 0x800000021445B710;
      goto LABEL_87;
    }
    goto LABEL_91;
  }
  sub_2141E801C(a1, (uint64_t)&v59, &qword_253F143A0);
  LOBYTE(v17) = 2;
  if (v60 == 254)
  {
    v18 = 0;
LABEL_23:
    v20 = *(_QWORD *)(a6 + 16);
    v21 = v20 + 1;
    if (!__OFADD__(v20, 1))
    {
      *(_QWORD *)(a6 + 16) = v21;
      v50 = sub_2141D8BF8(&qword_253F119D8);
      v51 = &off_24D17F2F8;
      LOBYTE(v49) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v49, v21);
      v22 = *(_QWORD *)(a6 + 16);
      v23 = v22 + 1;
      if (!__OFADD__(v22, 1))
      {
        *(_QWORD *)(a6 + 16) = v23;
        v50 = sub_2141D8BF8(&qword_253F119D0);
        v51 = &off_24D17F2F8;
        LOBYTE(v49) = 0;
        sub_214233D18((uint64_t)&v49, v23);
        swift_endAccess();
        v13 = *(_QWORD *)(a6 + 16);
        goto LABEL_26;
      }
      goto LABEL_101;
    }
    __break(1u);
    goto LABEL_99;
  }
  if (v60 == 255)
    v19 = 0;
  else
    v19 = v59;
  if (v60 == 255)
    LOBYTE(v17) = 2;
  else
    LOBYTE(v17) = v60;
  if ((~(_WORD)v15 & 0xFF00) == 0)
  {
    v18 = v19;
    goto LABEL_23;
  }
  if (BYTE1(v15) == 3)
  {
    v42 = v15;
    if (v15 == 1)
    {
      v25 = v76;
      v18 = v19;
      v24 = v46;
      v14 = a4;
LABEL_27:
      if ((v25 & 0xFF00) == 0x200 || v25 != 1)
        v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
      a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
      result = swift_release();
      v27 = 0;
      v28 = 0x2000000000000100;
LABEL_63:
      v39 = vdupq_n_s64(v28);
      v39.i64[0] = v13;
LABEL_81:
      *(_QWORD *)a8 = v18;
      *(_BYTE *)(a8 + 8) = v17;
      *(_QWORD *)(a8 + 16) = v14;
      *(_QWORD *)(a8 + 24) = a3;
      *(_QWORD *)(a8 + 32) = v27;
      *(int64x2_t *)(a8 + 40) = v39;
      *(_QWORD *)(a8 + 56) = v24;
      *(_QWORD *)(a8 + 64) = v48;
      *(_QWORD *)(a8 + 72) = 0;
      *(_BYTE *)(a8 + 80) = v77;
      return result;
    }
    v18 = v19;
    if (v42 == 255)
    {
LABEL_26:
      v24 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      v14 = a4;
      v25 = v76;
      goto LABEL_27;
    }
    sub_2143E4C18(v48, 0, v77, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
    __break(1u);
  }
  else if (BYTE1(v15) == 1)
  {
    result = swift_release();
    a3 = 0;
    v27 = 0;
    v39 = (int64x2_t)xmmword_2144325B0;
LABEL_80:
    v18 = v19;
    v24 = 0;
    goto LABEL_81;
  }
  sub_2144254D8();
  sub_214424F20();
  sub_2144255F8();
  v41 = 0xE000000000000000;
  sub_2143E48E4();
  swift_allocError();
  *v40 = 0;
LABEL_87:
  v40[1] = v41;
  swift_willThrow();
  swift_release();
  return sub_2143E4C18(v48, 0, v77, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t sub_2143E26BC@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int64x2_t v41;
  _QWORD *v42;
  unint64_t v43;
  int v44;
  uint64_t v46;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _UNKNOWN **v52;
  char v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  _OWORD v64[4];
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  _BYTE v71[24];
  __n128 v72;
  unsigned __int8 v73;
  __n128 v74;
  __n128 v75;
  uint64_t v77;

  v13 = a1;
  sub_2141E801C(a1, (uint64_t)v53, &qword_253F143A0);
  v15 = v54;
  v77 = v55;
  v16 = v57;
  v46 = v56;
  sub_2141E801C(v13, (uint64_t)v64, &qword_253F143A0);
  if (BYTE8(v64[0]) != 254)
  {
    v68 = v64[2];
    v69 = v64[3];
    v70 = v65;
    v66 = v64[0];
    v67 = v64[1];
    sub_2141E801C((uint64_t)&v69, (uint64_t)v71, &qword_253F12448);
    sub_2141E801C((uint64_t)v71, (uint64_t)&v72, &qword_253F12448);
    if (v73 != 255)
    {
      sub_2143E4928(&v72, &v74);
      sub_2143E4928(&v74, &v75);
      __asm { BR              X10 }
    }
  }
  if (a7 != 2)
  {
LABEL_97:
    sub_214425628();
    __break(1u);
    JUMPOUT(0x2143E30E4);
  }
  v17 = swift_allocObject();
  v18 = *(_OWORD *)(a8 + 48);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(a8 + 32);
  *(_OWORD *)(v17 + 64) = v18;
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(a8 + 64);
  *(_WORD *)(v17 + 96) = *(_WORD *)(a8 + 80);
  v19 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a8;
  *(_OWORD *)(v17 + 32) = v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = sub_2143E4998;
  *(_QWORD *)(v20 + 24) = v17;
  sub_2142DFEF4(a8);
  v49 = sub_21423FDA0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E49A0, v20);
  if (!(_BYTE)a3)
  {
    sub_2141E801C(v13, (uint64_t)&v58, &qword_253F143A0);
    v21 = 2;
    if (v59 == 254)
    {
      v22 = 0;
    }
    else
    {
      if (v59 == 255)
        v22 = 0;
      else
        v22 = v58;
      if (v59 == 255)
        v21 = 2;
      else
        v21 = v59;
      if ((~v16 & 0xFF00) != 0)
      {
        if (HIBYTE(v16) == 3)
        {
LABEL_80:
          if (!(_BYTE)v16)
            goto LABEL_39;
          if (v16 != 255)
          {
            sub_2143E4C18(v49, 0, 0x80u, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
            __break(1u);
LABEL_83:
            sub_2144254D8();
            sub_214424F20();
            sub_2144255F8();
            v43 = 0xE000000000000000;
            sub_2143E48E4();
            swift_allocError();
            *v42 = 0;
            goto LABEL_84;
          }
LABEL_38:
          v46 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
LABEL_39:
          a3 = v15;
          v13 = a4;
          if (v21 == 1 || v21 == 2 && v22 == 2)
          {
            a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
            v34 = 0;
            v35 = 0;
            goto LABEL_62;
          }
          if (a2 <= 7u)
          {
            v34 = 1;
            if (((1 << a2) & 0xC3) != 0)
            {
LABEL_61:
              v35 = 512;
LABEL_62:
              if ((a5 & 0xFF00) == 0x200 || (_BYTE)a5)
                v13 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
              result = swift_release();
              v30 = v35 | v34;
              v41 = vdupq_n_s64(0x100uLL);
              v41.i64[0] = v77;
              v15 = v13;
              v27 = v46;
              goto LABEL_75;
            }
          }
LABEL_88:
          v34 = 0;
          goto LABEL_61;
        }
        if (!HIBYTE(v16))
        {
          result = swift_release();
          a3 = 0;
          v30 = 0;
          v27 = 0;
          v41 = (int64x2_t)xmmword_2144325C0;
          goto LABEL_75;
        }
        goto LABEL_76;
      }
    }
    v32 = *(_QWORD *)(a6 + 16);
    v33 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    *(_QWORD *)(a6 + 16) = v33;
    v51 = sub_2141D8BF8(&qword_253F119D8);
    v52 = &off_24D17F2F8;
    LOBYTE(v50) = 2;
    swift_beginAccess();
    sub_214233D18((uint64_t)&v50, v33);
    v15 = *(_QWORD *)(a6 + 16);
    if (__OFADD__(v15, 1))
    {
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    *(_QWORD *)(a6 + 16) = v15 + 1;
    v51 = sub_2141D8BF8(&qword_253F119D0);
    v52 = &off_24D17F2F8;
    LOBYTE(v50) = 0;
    sub_214233D18((uint64_t)&v50, v15 + 1);
    swift_endAccess();
    v77 = *(_QWORD *)(a6 + 16);
    goto LABEL_38;
  }
  if (a3 == 1)
  {
    sub_2141E801C(v13, (uint64_t)&v60, &qword_253F143A0);
    LOBYTE(v21) = 2;
    if (v61 == 254)
    {
      v22 = 0;
LABEL_20:
      v23 = *(_QWORD *)(a6 + 16);
      v24 = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
        *(_QWORD *)(a6 + 16) = v24;
        v51 = sub_2141D8BF8(&qword_253F119D8);
        v52 = &off_24D17F2F8;
        LOBYTE(v50) = 2;
        swift_beginAccess();
        sub_214233D18((uint64_t)&v50, v24);
        v25 = *(_QWORD *)(a6 + 16);
        v26 = v25 + 1;
        if (!__OFADD__(v25, 1))
        {
          *(_QWORD *)(a6 + 16) = v26;
          v51 = sub_2141D8BF8(&qword_253F119D0);
          v52 = &off_24D17F2F8;
          LOBYTE(v50) = 0;
          sub_214233D18((uint64_t)&v50, v26);
          swift_endAccess();
          v77 = *(_QWORD *)(a6 + 16);
          goto LABEL_23;
        }
        goto LABEL_94;
      }
      __break(1u);
      goto LABEL_92;
    }
    if (v61 == 255)
      v22 = 0;
    else
      v22 = v60;
    if (v61 == 255)
      v21 = 2;
    else
      v21 = v61;
    if ((~v16 & 0xFF00) == 0)
      goto LABEL_20;
    if (HIBYTE(v16) != 3)
    {
      if (HIBYTE(v16) == 1)
      {
        result = swift_release();
        a3 = 0;
        v30 = 0;
        v27 = 0;
        v41 = (int64x2_t)xmmword_2144325B0;
        goto LABEL_75;
      }
      goto LABEL_83;
    }
    v44 = v16;
    if (v16 == 1)
    {
      v15 = a4;
      v28 = a5;
      v27 = v46;
LABEL_24:
      if ((v28 & 0xFF00) == 0x200 || v28 != 1)
        v15 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
      a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
      result = swift_release();
      v30 = 0;
      v31 = 0x2000000000000100;
LABEL_58:
      v41 = vdupq_n_s64(v31);
      v41.i64[0] = v77;
LABEL_75:
      *(_QWORD *)a9 = v22;
      *(_BYTE *)(a9 + 8) = v21;
      *(_QWORD *)(a9 + 16) = v15;
      *(_QWORD *)(a9 + 24) = a3;
      *(_QWORD *)(a9 + 32) = v30;
      *(int64x2_t *)(a9 + 40) = v41;
      *(_QWORD *)(a9 + 56) = v27;
      *(_QWORD *)(a9 + 64) = v49;
      *(_QWORD *)(a9 + 72) = 0;
      *(_BYTE *)(a9 + 80) = 0x80;
      return result;
    }
    LOBYTE(v16) = 0;
    if (v44 == 255)
    {
LABEL_23:
      v27 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      v15 = a4;
      v28 = a5;
      goto LABEL_24;
    }
    sub_2143E4C18(v49, 0, 0x80u, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
    __break(1u);
    goto LABEL_80;
  }
  sub_2141E801C(v13, (uint64_t)&v62, &qword_253F143A0);
  LOBYTE(v21) = 2;
  if (v63 == 254)
  {
    v22 = 0;
LABEL_50:
    v36 = *(_QWORD *)(a6 + 16);
    v37 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    *(_QWORD *)(a6 + 16) = v37;
    v51 = sub_2141D8BF8(&qword_253F119D8);
    v52 = &off_24D17F2F8;
    LOBYTE(v50) = 2;
    swift_beginAccess();
    sub_214233D18((uint64_t)&v50, v37);
    v38 = *(_QWORD *)(a6 + 16);
    v39 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    *(_QWORD *)(a6 + 16) = v39;
    v51 = sub_2141D8BF8(&qword_253F119D0);
    v52 = &off_24D17F2F8;
    LOBYTE(v50) = 0;
    sub_214233D18((uint64_t)&v50, v39);
    swift_endAccess();
    v77 = *(_QWORD *)(a6 + 16);
    goto LABEL_53;
  }
  if (v63 == 255)
    v22 = 0;
  else
    v22 = v62;
  if (v63 == 255)
    LOBYTE(v21) = 2;
  else
    LOBYTE(v21) = v63;
  if ((~v16 & 0xFF00) == 0)
    goto LABEL_50;
  if (HIBYTE(v16) == 3)
  {
    if (v16 == 2)
    {
      v15 = a4;
      v40 = a5;
      v27 = v46;
LABEL_54:
      if ((v40 & 0xFF00) == 0x200 || v40 != 2)
        v15 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F103A0);
      a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
      result = swift_release();
      v30 = 0;
      v31 = 0x4000000000000100;
      goto LABEL_58;
    }
    if (v16 != 255)
    {
      sub_2143E4C18(v49, 0, 0x80u, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
      __break(1u);
      goto LABEL_88;
    }
LABEL_53:
    v27 = sub_2143DEC44(0, 0, &qword_254D6DFD8, (void (*)(uint64_t, uint64_t))sub_2141D975C);
    v15 = a4;
    v40 = a5;
    goto LABEL_54;
  }
  if (HIBYTE(v16) == 2)
  {
    result = swift_release();
    a3 = 0;
    v30 = 0;
    v27 = 0;
    v41 = (int64x2_t)xmmword_2144325A0;
    goto LABEL_75;
  }
LABEL_76:
  sub_2143E48E4();
  swift_allocError();
  *v42 = 0xD00000000000003BLL;
  v43 = 0x800000021445B710;
LABEL_84:
  v42[1] = v43;
  swift_willThrow();
  swift_release();
  return sub_2143E4C18(v49, 0, 0x80u, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t sub_2143E3104@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  int64x2_t v40;
  _QWORD *v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _UNKNOWN **v52;
  char v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  _OWORD v64[4];
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  _BYTE v71[24];
  __n128 v72;
  unsigned __int8 v73;
  __n128 v74;
  __n128 v75;
  int v77;
  int v78;

  v77 = a5;
  sub_2141E801C(a1, (uint64_t)v53, &qword_253F143A0);
  v14 = v54;
  v13 = v55;
  LOWORD(v15) = v57;
  v47 = v56;
  sub_2141E801C(a1, (uint64_t)v64, &qword_253F143A0);
  if (BYTE8(v64[0]) != 254)
  {
    v68 = v64[2];
    v69 = v64[3];
    v70 = v65;
    v66 = v64[0];
    v67 = v64[1];
    sub_2141E801C((uint64_t)&v69, (uint64_t)v71, &qword_253F12448);
    sub_2141E801C((uint64_t)v71, (uint64_t)&v72, &qword_253F12448);
    if (v73 != 255)
    {
      sub_2143E4928(&v72, &v74);
      sub_2143E4928(&v74, &v75);
      __asm { BR              X10 }
    }
  }
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = a7;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_2143E49B4;
  *(_QWORD *)(v17 + 24) = v16;
  v49 = sub_21423F460(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E49A0, v17);
  v78 = 192;
  if (!(_BYTE)a3)
  {
    sub_2141E801C(a1, (uint64_t)&v58, &qword_253F143A0);
    v18 = 2;
    if (v59 == 254)
    {
      v15 = 0;
    }
    else
    {
      if (v59 == 255)
        v20 = 0;
      else
        v20 = v58;
      if (v59 == 255)
        v18 = 2;
      else
        v18 = v59;
      if ((~(_WORD)v15 & 0xFF00) != 0)
      {
        if (BYTE1(v15) != 3)
        {
          if (!BYTE1(v15))
          {
            result = swift_release();
            a3 = 0;
            v28 = 0;
            v40 = (int64x2_t)xmmword_2144325C0;
            goto LABEL_77;
          }
          goto LABEL_79;
        }
        v44 = v15;
        if (!(_BYTE)v15)
        {
          a3 = v14;
          v32 = v47;
          v14 = a4;
          v15 = v20;
          goto LABEL_40;
        }
        v15 = v20;
        if (v44 != 255)
        {
          sub_2143E4C18(v49, 0, v78, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
LABEL_88:
          v45 = v15;
          if (v15 == 2)
          {
            v39 = v77;
            v19 = v20;
            v25 = v47;
            v14 = a4;
LABEL_56:
            if ((v39 & 0xFF00) == 0x200 || v39 != 2)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F103A0);
            a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
            result = swift_release();
            v28 = 0;
            v29 = 0x4000000000000100;
            goto LABEL_60;
          }
          v19 = v20;
          if (v45 == 255)
          {
LABEL_55:
            v25 = sub_2143DEC44(0, 0, &qword_254D6DFD8, (void (*)(uint64_t, uint64_t))sub_2141D975C);
            v14 = a4;
            v39 = v77;
            goto LABEL_56;
          }
          sub_2143E4C18(v49, 0, v78, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          __break(1u);
          goto LABEL_91;
        }
LABEL_39:
        v32 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
        a3 = v14;
        v14 = a4;
LABEL_40:
        v47 = v32;
        a4 = v13;
        if (v18 == 1 || v18 == 2 && v15 == 2)
        {
          v13 = v15;
          a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
          v33 = 0;
          v34 = 0;
          goto LABEL_64;
        }
        v13 = v15;
        if (a2 <= 7u)
        {
          v33 = 1;
          if (((1 << a2) & 0xC3) != 0)
          {
LABEL_63:
            v34 = 512;
LABEL_64:
            if ((v77 & 0xFF00) == 0x200 || (_BYTE)v77)
              v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
            result = swift_release();
            v28 = v34 | v33;
            v40 = vdupq_n_s64(0x100uLL);
            v25 = v47;
            v40.i64[0] = a4;
            v19 = v13;
            goto LABEL_78;
          }
        }
LABEL_91:
        v33 = 0;
        goto LABEL_63;
      }
      v15 = v20;
    }
    v30 = *(_QWORD *)(a6 + 16);
    v31 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    *(_QWORD *)(a6 + 16) = v31;
    v51 = sub_2141D8BF8(&qword_253F119D8);
    v52 = &off_24D17F2F8;
    LOBYTE(v50) = 2;
    swift_beginAccess();
    sub_214233D18((uint64_t)&v50, v31);
    v14 = *(_QWORD *)(a6 + 16);
    if (__OFADD__(v14, 1))
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    *(_QWORD *)(a6 + 16) = v14 + 1;
    v51 = sub_2141D8BF8(&qword_253F119D0);
    v52 = &off_24D17F2F8;
    LOBYTE(v50) = 0;
    sub_214233D18((uint64_t)&v50, v14 + 1);
    swift_endAccess();
    v13 = *(_QWORD *)(a6 + 16);
    goto LABEL_39;
  }
  if (a3 != 1)
  {
    sub_2141E801C(a1, (uint64_t)&v62, &qword_253F143A0);
    LOBYTE(v18) = 2;
    if (v63 == 254)
    {
      v19 = 0;
LABEL_52:
      v35 = *(_QWORD *)(a6 + 16);
      v36 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      *(_QWORD *)(a6 + 16) = v36;
      v51 = sub_2141D8BF8(&qword_253F119D8);
      v52 = &off_24D17F2F8;
      LOBYTE(v50) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v50, v36);
      v37 = *(_QWORD *)(a6 + 16);
      v38 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
LABEL_100:
        __break(1u);
        JUMPOUT(0x2143E3A9CLL);
      }
      *(_QWORD *)(a6 + 16) = v38;
      v51 = sub_2141D8BF8(&qword_253F119D0);
      v52 = &off_24D17F2F8;
      LOBYTE(v50) = 0;
      sub_214233D18((uint64_t)&v50, v38);
      swift_endAccess();
      v13 = *(_QWORD *)(a6 + 16);
      goto LABEL_55;
    }
    if (v63 == 255)
      v20 = 0;
    else
      v20 = v62;
    if (v63 == 255)
      LOBYTE(v18) = 2;
    else
      LOBYTE(v18) = v63;
    if ((~(_WORD)v15 & 0xFF00) == 0)
    {
      v19 = v20;
      goto LABEL_52;
    }
    if (BYTE1(v15) != 3)
    {
      if (BYTE1(v15) == 2)
      {
        result = swift_release();
        a3 = 0;
        v28 = 0;
        v40 = (int64x2_t)xmmword_2144325A0;
        goto LABEL_77;
      }
LABEL_79:
      sub_2143E48E4();
      swift_allocError();
      *v41 = 0xD00000000000003BLL;
      v42 = 0x800000021445B710;
      goto LABEL_84;
    }
    goto LABEL_88;
  }
  sub_2141E801C(a1, (uint64_t)&v60, &qword_253F143A0);
  LOBYTE(v18) = 2;
  if (v61 == 254)
  {
    v19 = 0;
LABEL_20:
    v21 = *(_QWORD *)(a6 + 16);
    v22 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      *(_QWORD *)(a6 + 16) = v22;
      v51 = sub_2141D8BF8(&qword_253F119D8);
      v52 = &off_24D17F2F8;
      LOBYTE(v50) = 2;
      swift_beginAccess();
      sub_214233D18((uint64_t)&v50, v22);
      v23 = *(_QWORD *)(a6 + 16);
      v24 = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
        *(_QWORD *)(a6 + 16) = v24;
        v51 = sub_2141D8BF8(&qword_253F119D0);
        v52 = &off_24D17F2F8;
        LOBYTE(v50) = 0;
        sub_214233D18((uint64_t)&v50, v24);
        swift_endAccess();
        v13 = *(_QWORD *)(a6 + 16);
        goto LABEL_23;
      }
      goto LABEL_98;
    }
    __break(1u);
    goto LABEL_96;
  }
  if (v61 == 255)
    v20 = 0;
  else
    v20 = v60;
  if (v61 == 255)
    LOBYTE(v18) = 2;
  else
    LOBYTE(v18) = v61;
  if ((~(_WORD)v15 & 0xFF00) == 0)
  {
    v19 = v20;
    goto LABEL_20;
  }
  if (BYTE1(v15) == 3)
  {
    v43 = v15;
    if (v15 == 1)
    {
      v26 = v77;
      v19 = v20;
      v25 = v47;
      v14 = a4;
LABEL_24:
      if ((v26 & 0xFF00) == 0x200 || v26 != 1)
        v14 = sub_2143DEDA4(MEMORY[0x24BEE4AF8], &qword_253F13028);
      a3 = sub_21423EBC0(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143E054C, 0);
      result = swift_release();
      v28 = 0;
      v29 = 0x2000000000000100;
LABEL_60:
      v40 = vdupq_n_s64(v29);
      v40.i64[0] = v13;
LABEL_78:
      *(_QWORD *)a8 = v19;
      *(_BYTE *)(a8 + 8) = v18;
      *(_QWORD *)(a8 + 16) = v14;
      *(_QWORD *)(a8 + 24) = a3;
      *(_QWORD *)(a8 + 32) = v28;
      *(int64x2_t *)(a8 + 40) = v40;
      *(_QWORD *)(a8 + 56) = v25;
      *(_QWORD *)(a8 + 64) = v49;
      *(_QWORD *)(a8 + 72) = 0;
      *(_BYTE *)(a8 + 80) = v78;
      return result;
    }
    v19 = v20;
    if (v43 == 255)
    {
LABEL_23:
      v25 = sub_2143DEC44(0, 0, &qword_253F119C8, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      v14 = a4;
      v26 = v77;
      goto LABEL_24;
    }
    sub_2143E4C18(v49, 0, v78, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
    __break(1u);
  }
  else if (BYTE1(v15) == 1)
  {
    result = swift_release();
    a3 = 0;
    v28 = 0;
    v40 = (int64x2_t)xmmword_2144325B0;
LABEL_77:
    v19 = v20;
    v25 = 0;
    goto LABEL_78;
  }
  sub_2144254D8();
  sub_214424F20();
  sub_2144255F8();
  v42 = 0xE000000000000000;
  sub_2143E48E4();
  swift_allocError();
  *v41 = 0;
LABEL_84:
  v41[1] = v42;
  swift_willThrow();
  swift_release();
  return sub_2143E4C18(v49, 0, v78, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t sub_2143E3ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  int64_t v14;

  v13 = (_QWORD *)(a2 + 64);
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v14 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = __clz(__rbit64(v6));
    goto LABEL_17;
  }
  v8 = 1;
  if (v14 > 1)
  {
    v9 = v13[1];
    if (v9)
    {
LABEL_16:
      v7 = __clz(__rbit64(v9)) + (v8 << 6);
LABEL_17:
      v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v7);
      if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 16))
        sub_214336B74(v11);
      if (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16))
        sub_214336B74(v11);
      __asm { BR              X8 }
    }
    v10 = 2;
    if (v14 > 2)
    {
      v9 = v13[2];
      if (v9)
        goto LABEL_15;
      v10 = 3;
      if (v14 <= 3)
        goto LABEL_26;
      v9 = v13[3];
      if (v9)
        goto LABEL_15;
      v10 = 4;
      if (v14 <= 4)
        goto LABEL_26;
      v9 = v13[4];
      if (v9)
      {
LABEL_15:
        v8 = v10;
        goto LABEL_16;
      }
      v10 = 5;
      if (v14 > 5)
      {
        v9 = v13[5];
        if (v9)
          goto LABEL_15;
        while (1)
        {
          v8 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            JUMPOUT(0x2143E4114);
          }
          if (v8 >= v14)
            break;
          v9 = v13[v8];
          ++v10;
          if (v9)
            goto LABEL_16;
        }
      }
    }
  }
LABEL_26:
  swift_release();
  return a1;
}

uint64_t sub_2143E4144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  unsigned int v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v4 = MEMORY[0x24BEE4AF8];
  sub_21436C414(MEMORY[0x24BEE4AF8]);
  v39 = *(_QWORD *)(a1 + 8);
  v40 = *(_QWORD *)a1;
  v38 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v42 = *(_BYTE *)(a1 + 48);
  v44 = *(_BYTE *)(a1 + 49);
  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v8 = sub_2143DFD84(v5);
  v9 = sub_2143DEE94(*(_QWORD *)(a1 + 72));
  v10 = sub_2143DF160(v9, (uint64_t)v8);
  v11 = sub_21436C414(v4);
  sub_2142DFEF4(a1);
  swift_retain();
  v12 = sub_2143E3ABC(v11, v10, a1);
  v13 = v2;
  swift_release();
  sub_21424C35C(a1);
  if (v2)
  {
    swift_release();
    sub_21424C35C(a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v36 = v6;
  v37 = v7;
  v43 = v42 & 1;
  v35 = v44 & 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = v12 + 64;
  v16 = 1 << *(_BYTE *)(v12 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v12 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = MEMORY[0x24BEE4AF8];
  v45 = v5;
  if (!v18)
    goto LABEL_9;
LABEL_6:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v21 | (v13 << 6); ; i = __clz(__rbit64(v25)) + (v13 << 6))
  {
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 48) + i);
    if (v23 <= 1)
    {
      v46 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D39B8(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v46;
      }
      v28 = *(_QWORD *)(v20 + 16);
      v27 = *(_QWORD *)(v20 + 24);
      v29 = v28 + 1;
      if (v28 >= v27 >> 1)
      {
        sub_2141D39B8((char *)(v27 > 1), v28 + 1, 1);
        v29 = v28 + 1;
        v20 = v46;
      }
      *(_QWORD *)(v20 + 16) = v29;
      *(_BYTE *)(v20 + v28 + 32) = v23;
      if (v18)
        goto LABEL_6;
    }
    else if (v18)
    {
      goto LABEL_6;
    }
LABEL_9:
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    if (v24 >= v19)
      goto LABEL_33;
    v25 = *(_QWORD *)(v15 + 8 * v24);
    ++v13;
    if (!v25)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v19)
        goto LABEL_33;
      v25 = *(_QWORD *)(v15 + 8 * v13);
      if (!v25)
      {
        v13 = v24 + 2;
        if (v24 + 2 >= v19)
          goto LABEL_33;
        v25 = *(_QWORD *)(v15 + 8 * v13);
        if (!v25)
        {
          v13 = v24 + 3;
          if (v24 + 3 >= v19)
            goto LABEL_33;
          v25 = *(_QWORD *)(v15 + 8 * v13);
          if (!v25)
          {
            v13 = v24 + 4;
            if (v24 + 4 >= v19)
              goto LABEL_33;
            v25 = *(_QWORD *)(v15 + 8 * v13);
            if (!v25)
              break;
          }
        }
      }
    }
LABEL_32:
    v18 = (v25 - 1) & v25;
  }
  v26 = v24 + 5;
  if (v26 < v19)
  {
    v25 = *(_QWORD *)(v15 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        v13 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_38;
        if (v13 >= v19)
          goto LABEL_33;
        v25 = *(_QWORD *)(v15 + 8 * v13);
        ++v26;
        if (v25)
          goto LABEL_32;
      }
    }
    v13 = v26;
    goto LABEL_32;
  }
LABEL_33:
  swift_release();
  sub_2142DFEF4(a1);
  v30 = sub_2143E08B4(v20, a1);
  sub_21424C35C(a1);
  swift_release();
  if (*(_QWORD *)(v30 + 16))
  {
    sub_2141D8BF8(&qword_253F15D20);
    v31 = sub_2144256D0();
  }
  else
  {
    v31 = MEMORY[0x24BEE4B00];
  }
  v46 = v31;
  v32 = swift_bridgeObjectRetain();
  sub_2143DFF08(v32, 1, &v46);
  swift_bridgeObjectRelease();
  v33 = *(_BYTE *)(a1 + 81);
  swift_release();
  sub_21424C35C(a1);
  result = swift_bridgeObjectRelease();
  v34 = v46;
  *(_QWORD *)a2 = v40;
  *(_QWORD *)(a2 + 8) = v39;
  *(_QWORD *)(a2 + 16) = v38;
  *(_BYTE *)(a2 + 24) = v33;
  *(_QWORD *)(a2 + 32) = v45;
  *(_QWORD *)(a2 + 40) = v34;
  *(_BYTE *)(a2 + 48) = v43;
  *(_BYTE *)(a2 + 49) = v35;
  *(_QWORD *)(a2 + 56) = v37;
  *(_QWORD *)(a2 + 64) = v36;
  *(_QWORD *)(a2 + 72) = v12;
  return result;
}

unint64_t sub_2143E457C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[33];
  _BYTE v27[32];
  uint64_t v28;

  result = sub_21436C414(MEMORY[0x24BEE4AF8]);
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = result;
  *(_QWORD *)(a1 + 16) = v6;
  v26[3] = sub_2141D8BF8(&qword_253F13020);
  v26[4] = &off_24D17F2F8;
  v26[0] = swift_allocObject();
  sub_2143E47CC((uint64_t)v27, v26[0] + 16);
  swift_beginAccess();
  sub_214233D18((uint64_t)v26, v6);
  swift_endAccess();
  v8 = *(_QWORD *)(a1 + 16);
  sub_214357968((uint64_t)v27);
  v9 = sub_2143DEC44(0, 0, &qword_253F13018, (void (*)(uint64_t, uint64_t))sub_21421C4E4);
  sub_2143E4814((uint64_t)v27);
  sub_2141E801C((uint64_t)v27, (uint64_t)v26, &qword_253F14B70);
  v10 = sub_2143DEA08((uint64_t)v26);
  v11 = MEMORY[0x24BEE4AF8];
  v12 = sub_21436C324(MEMORY[0x24BEE4AF8]);
  result = sub_21436C9AC(v11);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v19 = result;
  v20 = v12;
  v21 = v7;
  *(_QWORD *)(a1 + 16) = v14;
  v15 = sub_2141D8BF8(&qword_253F13030);
  v24 = v15;
  v25 = &off_24D17F2F8;
  v22 = 0;
  v23 = 1;
  swift_beginAccess();
  result = sub_214233D18((uint64_t)&v22, v14);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    *(_QWORD *)(a1 + 16) = v17;
    v24 = v15;
    v25 = &off_24D17F2F8;
    v22 = 0;
    v23 = 1;
    sub_214233D18((uint64_t)&v22, v17);
    result = swift_endAccess();
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v20;
    *(_QWORD *)(a2 + 40) = v19;
    *(_WORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = v16;
    *(_QWORD *)(a2 + 64) = v18;
    *(_QWORD *)(a2 + 72) = v21;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2143E47A0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_2143E47CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F12F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_2143E4814(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_WORD *)(a1 + 256) = 0;
  return result;
}

uint64_t sub_2143E4848()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    if (v1 == 1)
      return swift_deallocObject();
    sub_2141ED0BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
    sub_2141EF1B0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
    sub_2141EF1B0(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_BYTE *)(v0 + 152));
  }
  if (*(_QWORD *)(v0 + 216))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_BYTE *)(v0 + 208));
    swift_bridgeObjectRelease();
    sub_2141EF1B0(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_BYTE *)(v0 + 240));
  }
  return swift_deallocObject();
}

unint64_t sub_2143E48E4()
{
  unint64_t result;

  result = qword_254D6DFD0;
  if (!qword_254D6DFD0)
  {
    result = MEMORY[0x2199CD934](&unk_21443251C, &type metadata for ScaleResolutionFailure);
    atomic_store(result, (unint64_t *)&qword_254D6DFD0);
  }
  return result;
}

__n128 *sub_2143E4928(__n128 *a1, __n128 *a2)
{
  initializeWithTake for AnyPrimitivePlottableTransform(a2, a1);
  return a2;
}

uint64_t sub_2143E4964()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2143E4998@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_2143DF304(v1 + 16, a1);
}

uint64_t sub_2143E49A4()
{
  return swift_deallocObject();
}

uint64_t sub_2143E49B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_2143DF398(*(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_2143E49BC()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_2143E49E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for Spec.Axis.Label(unsigned __int8 *a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && a1[48])
    return (*(_DWORD *)a1 + 247);
  if (*a1 <= 9u)
    v3 = 9;
  else
    v3 = *a1;
  v4 = v3 - 10;
  if (*a1 < 9u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Spec.Axis.Label(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 247;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 9;
  }
  return result;
}

ValueMetadata *type metadata accessor for Spec.Axis.Label()
{
  return &type metadata for Spec.Axis.Label;
}

uint64_t getEnumTagSinglePayload for Spec.Axis.Marks(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Spec.Axis.Marks(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 73) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Spec.Axis.Marks()
{
  return &type metadata for Spec.Axis.Marks;
}

uint64_t storeEnumTagSinglePayload for Spec.ScaleDomainType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2143E4B88 + 4 * byte_2144321EF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2143E4BBC + 4 * byte_2144321EA[v4]))();
}

uint64_t sub_2143E4BBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143E4BC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143E4BCCLL);
  return result;
}

uint64_t sub_2143E4BD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143E4BE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2143E4BE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143E4BEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Spec.ScaleDomainType()
{
  return &type metadata for Spec.ScaleDomainType;
}

ValueMetadata *type metadata accessor for ScaleResolutionFailure()
{
  return &type metadata for ScaleResolutionFailure;
}

uint64_t sub_2143E4C18(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD), uint64_t (*a5)(uint64_t, uint64_t, _QWORD))
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      result = a4(result, a2, a3 & 0x1F);
      break;
    case 5:
      result = a5(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for Spec.Scale(uint64_t a1)
{
  sub_2141E7E88(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
  return sub_2143E4C18(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t initializeWithCopy for Spec.Scale(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  sub_2141E7E88(v4, v5, v6, v7, v8, v9, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(v2 + 64);
  v11 = *(_QWORD *)(v2 + 72);
  LOBYTE(v2) = *(_BYTE *)(v2 + 80);
  sub_2143E4C18(v10, v11, v2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v2;
  return a1;
}

uint64_t assignWithCopy for Spec.Scale(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v2 = a2;
  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  sub_2141E7E88(v5, v6, v7, v8, v9, v10, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  sub_2141E7E88(v11, v12, v13, v14, v15, v16, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
  v17 = v2[8];
  v18 = v2[9];
  LOBYTE(v2) = *((_BYTE *)v2 + 80);
  sub_2143E4C18(v17, v18, v2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  v21 = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = (_BYTE)v2;
  sub_2143E4C18(v19, v20, v21, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return a1;
}

uint64_t assignWithTake for Spec.Scale(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_2141E7E88(v4, v5, v6, v7, v8, v9, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
  v11 = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v14 = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = v11;
  sub_2143E4C18(v12, v13, v14, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return a1;
}

uint64_t getEnumTagSinglePayload for Spec.Scale(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32) >> 10;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Spec.Scale(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = (unint64_t)-a2 << 10;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Spec.Scale()
{
  return &type metadata for Spec.Scale;
}

ValueMetadata *type metadata accessor for Spec.Axis()
{
  return &type metadata for Spec.Axis;
}

uint64_t destroy for Spec.ScaleRange(uint64_t a1)
{
  return sub_2143E4C18(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t _s6Charts4SpecO10ScaleRangeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2143E4C18(*(_QWORD *)a2, v4, v5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Spec.ScaleRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2143E4C18(*(_QWORD *)a2, v4, v5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_2143E4C18(v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return a1;
}

uint64_t assignWithTake for Spec.ScaleRange(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_2143E4C18(v4, v5, v6, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return a1;
}

ValueMetadata *type metadata accessor for Spec.ScaleRange()
{
  return &type metadata for Spec.ScaleRange;
}

uint64_t destroy for Spec.ScaleDomain(_QWORD *a1, uint64_t a2)
{
  return sub_2143E512C(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7E88);
}

uint64_t sub_2143E512C(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  return a3(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], sub_2141E7F20);
}

_QWORD *initializeWithCopy for Spec.ScaleDomain(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_2143E5168(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7E88);
}

_QWORD *sub_2143E5168(_QWORD *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  a4(*a2, v6, v7, v8, v9, v10, sub_2141E7DC4);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  return a1;
}

uint64_t *assignWithCopy for Spec.ScaleDomain(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_2143E51EC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7E88);
}

uint64_t *sub_2143E51EC(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  a4(*a2, v7, v8, v9, v10, v11, sub_2141E7DC4);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a4(v12, v13, v14, v15, v16, v17, sub_2141E7F20);
  return a1;
}

_QWORD *assignWithTake for Spec.ScaleDomain(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  return sub_2143E5288(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7E88);
}

_QWORD *sub_2143E5288(_QWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = *a1;
  v8 = a1[1];
  v7 = a1[2];
  v9 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v12;
  *((_OWORD *)a1 + 2) = a2[2];
  a4(v6, v8, v7, v9, v10, v11, sub_2141E7F20);
  return a1;
}

uint64_t sub_2143E52E4(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 32) >> 61) & 3;
}

uint64_t sub_2143E52F0(uint64_t result)
{
  *(_QWORD *)(result + 32) &= 0x9FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_2143E5300(uint64_t result, char a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 32) & 0x80000000000003FFLL | ((unint64_t)(a2 & 3) << 61);
  *(_QWORD *)(result + 16) &= 0x3FFuLL;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

ValueMetadata *type metadata accessor for Spec.ScaleDomain()
{
  return &type metadata for Spec.ScaleDomain;
}

uint64_t sub_2143E5334(_QWORD *a1, uint64_t a2)
{
  return sub_2143E512C(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7EB8);
}

_QWORD *sub_2143E5340(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_2143E5168(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7EB8);
}

uint64_t *sub_2143E534C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_2143E51EC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7EB8);
}

_QWORD *sub_2143E5358(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  return sub_2143E5288(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_2141E7EB8);
}

uint64_t _s6Charts4SpecO11ScaleDomainOwet_0(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 10;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t sub_2143E53B4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)-a2 << 10;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_2143E540C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) >> 63;
}

uint64_t sub_2143E5418(uint64_t result)
{
  *(_QWORD *)(result + 32) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_2143E5428(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32) & 0x3FFLL | (a2 << 63);
  *(_QWORD *)(result + 16) &= 0x3FFuLL;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

uint64_t type metadata accessor for Spec.GenericScaleDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Spec.GenericScaleDomain);
}

uint64_t destroy for BaseSpec()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BaseSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BaseSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for BaseSpec(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseSpec(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseSpec()
{
  return &type metadata for BaseSpec;
}

unint64_t sub_2143E568C()
{
  unint64_t result;

  result = qword_254D6E020;
  if (!qword_254D6E020)
  {
    result = MEMORY[0x2199CD934](&unk_21443237C, &type metadata for Spec.Axis);
    atomic_store(result, (unint64_t *)&qword_254D6E020);
  }
  return result;
}

unint64_t sub_2143E56D4()
{
  unint64_t result;

  result = qword_254D6E028;
  if (!qword_254D6E028)
  {
    result = MEMORY[0x2199CD934](&unk_214432424, &type metadata for Spec.ScaleDomainType);
    atomic_store(result, (unint64_t *)&qword_254D6E028);
  }
  return result;
}

unint64_t sub_2143E571C()
{
  unint64_t result;

  result = qword_254D6E030;
  if (!qword_254D6E030)
  {
    result = MEMORY[0x2199CD934](&unk_21443244C, &type metadata for Spec.Axis.Marks);
    atomic_store(result, (unint64_t *)&qword_254D6E030);
  }
  return result;
}

unint64_t sub_2143E5764()
{
  unint64_t result;

  result = qword_254D6E038[0];
  if (!qword_254D6E038[0])
  {
    result = MEMORY[0x2199CD934](&unk_2144324B4, &type metadata for Spec.Axis.Label);
    atomic_store(result, qword_254D6E038);
  }
  return result;
}

uint64_t sub_2143E57A8(uint64_t a1)
{
  sub_2141E7F20(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  return sub_2141E7F20(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_BYTE *)(a1 + 33));
}

uint64_t sub_2143E57E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141E7DC4(v4, v6, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v5;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 33);
  v9 = *(_BYTE *)(a2 + 32);
  sub_2141E7DC4(v7, v9, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 33) = v8;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_2143E5870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141E7DC4(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  v9 = *(_BYTE *)(a1 + 17);
  *(_BYTE *)(a1 + 17) = v5;
  sub_2141E7F20(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(_BYTE *)(a2 + 32);
  sub_2141E7DC4(v10, v12, v11);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  v14 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v12;
  v15 = *(_BYTE *)(a1 + 33);
  *(_BYTE *)(a1 + 33) = v11;
  sub_2141E7F20(v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_2143E5924(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *(_WORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 17);
  v7 = *(unsigned __int8 *)(a1 + 16);
  *(_WORD *)(a1 + 16) = v4;
  sub_2141E7F20(v5, v7, v6);
  v8 = *(_WORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a1 + 33);
  v11 = *(unsigned __int8 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v8;
  sub_2141E7F20(v9, v11, v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_2143E5990(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_2143E59D8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for Spec.GenericScaleDomain.InferredDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Spec.GenericScaleDomain.InferredDomain);
}

uint64_t sub_2143E5A38()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;

  sub_2143D86A8();
  v1 = v0;
  v2 = v0;
  sub_2143D86A8();
  if (v2 == 3)
  {
    v4 = 1;
    if (v3 && v3 != 3)
      return v3 != 1;
  }
  else
  {
    if (v3 != 3 && v1 == v3)
      return 1;
    if (!v1)
      return 0;
    if (v3 == 3)
    {
      v4 = v1;
      if (v1 == 1)
        return v4;
      return v3 != 1;
    }
    v4 = 1;
    if (v3 && v1 != 1)
      return v3 != 1;
  }
  return v4;
}

uint64_t sub_2143E5B08()
{
  uint64_t result;

  result = sub_214424968();
  qword_253F1CA28 = result;
  return result;
}

double sub_2143E5B24()
{
  double result;
  __int128 v1;
  __int128 v2;
  uint64_t v3;

  sub_214423D80();
  result = *(double *)&v1;
  xmmword_253F1C9E0 = v1;
  *(_OWORD *)&qword_253F1C9F0 = v2;
  qword_253F1CA00 = v3;
  return result;
}

void sub_2143E5B7C()
{
  qword_253F1C948 = 0x404921FB54442D18;
}

uint64_t sub_2143E5B98()
{
  if (qword_253F10D60 != -1)
    swift_once();
  return sub_2141F9E40((uint64_t)&qword_253F1C950, (uint64_t)&unk_253F1C8C8);
}

void sub_2143E5BE0()
{
  qword_254D760C0 = 0x4020000000000000;
}

void sub_2143E5BF0()
{
  qword_253F1C940 = 0x4000000000000000;
}

void sub_2143E5C00()
{
  qword_253F1C878 = 0;
}

uint64_t sub_2143E5C0C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_214424308();
  sub_2143E5C74(v0, qword_253F1C998);
  v1 = sub_2141EEE6C(v0, (uint64_t)qword_253F1C998);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, *MEMORY[0x24BDEEB68], v0);
}

void sub_2143E5C64()
{
  qword_253F1C930 = 0x4010000000000000;
}

uint64_t *sub_2143E5C74(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_2143E5CB4@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(uint64_t, char *, uint64_t);
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  _QWORD v59[3];
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  unint64_t v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  char *v70;
  void (*v71)(uint64_t, char *, uint64_t);

  v67 = a1;
  v2 = sub_2141D8BF8(&qword_253F13340);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)v59 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v59 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v59 - v10;
  v12 = sub_214423B70();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v59 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v61 = (char *)v59 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v59 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v70 = (char *)v59 - v26;
  v27 = *(_QWORD *)(v25 + 16);
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_6;
  }
  v28 = *(unsigned __int8 *)(v13 + 80);
  v59[2] = v25;
  v29 = v25 + ((v28 + 32) & ~v28);
  v30 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
  v65 = v29;
  v71 = v30;
  ((void (*)(char *))v30)(v11);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v69(v11, 0, 1, v12);
  v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v64(v11, 1, v12) == 1)
  {
LABEL_6:
    sub_2143E6C38((uint64_t)v11);
    v31 = sub_2141D8BF8(&qword_253F103F0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v67, 1, 1, v31);
  }
  v68 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v68(v70, v11, v12);
  if (v27 == 1)
  {
    v69(v9, 1, 1, v12);
LABEL_8:
    sub_2143E6C38((uint64_t)v9);
    v33 = sub_2141D8BF8(&qword_253F103F0);
    v34 = v67;
    v35 = &v67[*(int *)(v33 + 48)];
    v36 = v70;
    v71((uint64_t)v67, v70, v12);
    v68(v35, v36, v12);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v34, 0, 1, v33);
  }
  v60 = *(_QWORD *)(v13 + 72);
  v71((uint64_t)v9, (char *)(v65 + v60), v12);
  v69(v9, 0, 1, v12);
  if (v64(v9, 1, v12) == 1)
    goto LABEL_8;
  v59[1] = v1;
  v37 = v9;
  v38 = v24;
  v68(v24, v37, v12);
  v39 = sub_21424CC2C();
  swift_bridgeObjectRetain();
  v66 = v39;
  result = sub_214424E6C();
  if ((result & 1) != 0)
  {
    v40 = v61;
    v41 = v70;
    v42 = v68;
    v68(v61, v70, v12);
    v42(v41, v38, v12);
    result = ((uint64_t (*)(char *, char *, uint64_t))v42)(v38, v40, v12);
  }
  v43 = (uint64_t)v63;
  if (v27 == 2)
  {
LABEL_12:
    v69((char *)v43, 1, 1, v12);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_2143E6C38(v43);
    v44 = sub_2141D8BF8(&qword_253F103F0);
    v45 = v38;
    v46 = v67;
    v47 = (void (*)(uint64_t, char *, uint64_t))v68;
    v48 = &v67[*(int *)(v44 + 48)];
    v68(v67, v70, v12);
    v47((uint64_t)v48, v45, v12);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v46, 0, 1, v44);
  }
  v49 = 2;
  while (v49 < v27)
  {
    v71(v43, (char *)(v65 + v49 * v60), v12);
    v69((char *)v43, 0, 1, v12);
    if (v64((char *)v43, 1, v12) == 1)
      goto LABEL_13;
    v50 = v49 + 1;
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v68)(v19, v43, v12);
    if (v49 + 1 == v27)
    {
      v51 = (uint64_t)v62;
      v69(v62, 1, 1, v12);
      v49 = v27;
    }
    else
    {
      if (v50 >= v27)
        goto LABEL_32;
      v52 = (char *)(v65 + v50 * v60);
      v51 = (uint64_t)v62;
      v71((uint64_t)v62, v52, v12);
      v49 += 2;
      v69((char *)v51, 0, 1, v12);
      if (v64((char *)v51, 1, v12) != 1)
      {
        v68(v16, (char *)v51, v12);
        goto LABEL_25;
      }
    }
    v71((uint64_t)v16, v19, v12);
    sub_2143E6C38(v51);
LABEL_25:
    if ((sub_214424E6C() & 1) != 0)
    {
      v53 = v61;
      v54 = v68;
      v68(v61, v19, v12);
      v54(v19, v16, v12);
      v54(v16, v53, v12);
    }
    if ((sub_214424E6C() & 1) != 0)
    {
      v55 = v70;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v70, v12);
      v71((uint64_t)v55, v19, v12);
    }
    v56 = sub_214424E6C();
    v57 = v38;
    v58 = *(void (**)(char *, uint64_t))(v13 + 8);
    v58(v19, v12);
    if ((v56 & 1) != 0)
    {
      result = ((uint64_t (*)(char *, uint64_t))v58)(v16, v12);
    }
    else
    {
      v58(v57, v12);
      result = ((uint64_t (*)(char *, char *, uint64_t))v68)(v57, v16, v12);
    }
    v38 = v57;
    v43 = (uint64_t)v63;
    if (v49 == v27)
      goto LABEL_12;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_2143E635C@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t AssociatedConformanceWitness;
  uint64_t v35;
  unsigned int (*v36)(_QWORD, _QWORD, _QWORD);
  uint64_t TupleTypeMetadata2;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  unsigned int (*v48)(_QWORD, _QWORD, _QWORD);
  char v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  unsigned int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t (*v67)(char *, char *);
  char *v68;
  char v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, char *, uint64_t);
  _QWORD v76[2];
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t (*v82)(char *, char *);
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  unsigned int (*v87)(_QWORD, _QWORD, _QWORD);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;

  v92 = a2;
  v82 = a1;
  v85 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v88 = AssociatedTypeWitness;
  v6 = sub_214425388();
  v90 = *(_QWORD *)(v6 - 8);
  v91 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v81 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v84 = (char *)v76 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v86 = (char *)v76 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v76 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](v13);
  v93 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v95 = (char *)v76 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v83 = (char *)v76 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v94 = (char *)v76 - v24;
  v25 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v76 - v30;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v33 = v31;
  v32(v27, v89, a3);
  sub_214424F38();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_214425394();
  v35 = v88;
  v36 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v16 + 48);
  if (v36(v15, 1, v88) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v15, v91);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v85, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    v89 = v29;
    v39 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v39(v94, v15, v35);
    v40 = v86;
    v41 = v35;
    sub_214425394();
    if (v36(v40, 1, v35) == 1)
    {
      (*(void (**)(char *, uint64_t))(v89 + 8))(v33, v28);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v86, v91);
      v42 = swift_getTupleTypeMetadata2();
      v43 = v85;
      v44 = &v85[*(int *)(v42 + 48)];
      v45 = v94;
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v85, v94, v41);
      v39(v44, v45, v41);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v43, 0, 1, v42);
    }
    else
    {
      v79 = v28;
      v80 = v16;
      v46 = v83;
      v39(v83, v86, v35);
      v47 = v94;
      v48 = v87;
      v49 = v82(v46, v94);
      if (v48)
      {
        v50 = *(void (**)(char *, uint64_t))(v80 + 8);
        v50(v46, v35);
        v50(v47, v35);
        return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v33, v79);
      }
      else
      {
        v51 = v39;
        v87 = v36;
        if ((v49 & 1) != 0)
          sub_214425808();
        v52 = v84;
        sub_214425394();
        v53 = v52;
        v54 = v41;
        v55 = (unsigned int (*)(char *, uint64_t, uint64_t))v87;
        v56 = v87(v52, 1, v41);
        v57 = AssociatedConformanceWitness;
        v58 = v95;
        if (v56 == 1)
        {
          v59 = v79;
        }
        else
        {
          v77 = v33;
          v78 = v51;
          v76[1] = v57;
          do
          {
            v51(v58, v53, v54);
            v63 = v81;
            sub_214425394();
            v64 = v63;
            v65 = v54;
            if (v55(v63, 1, v54) == 1)
            {
              v66 = v93;
              (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v93, v58, v54);
              (*(void (**)(char *, uint64_t))(v90 + 8))(v64, v91);
            }
            else
            {
              v66 = v93;
              v78(v93, v64, v54);
            }
            v67 = v82;
            v68 = v83;
            v69 = v82(v66, v58);
            v70 = v93;
            v71 = v94;
            if ((v69 & 1) != 0)
              sub_214425808();
            if ((v67(v95, v71) & 1) != 0)
            {
              v72 = v80;
              (*(void (**)(char *, uint64_t))(v80 + 8))(v71, v65);
              (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v95, v65);
            }
            v73 = v67(v70, v68);
            v74 = *(void (**)(char *, uint64_t))(v80 + 8);
            v74(v95, v65);
            v33 = v77;
            if ((v73 & 1) != 0)
            {
              v74(v93, v65);
              v58 = v95;
              v51 = v78;
            }
            else
            {
              v74(v68, v65);
              v75 = v78;
              v78(v68, v93, v65);
              v51 = v75;
              v58 = v95;
            }
            v54 = v65;
            v59 = v79;
            sub_214425394();
            v53 = v84;
            v55 = (unsigned int (*)(char *, uint64_t, uint64_t))v87;
          }
          while (v87(v84, 1, v65) != 1);
        }
        (*(void (**)(char *, uint64_t))(v89 + 8))(v33, v59);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v53, v91);
        v60 = swift_getTupleTypeMetadata2();
        v61 = v85;
        v62 = &v85[*(int *)(v60 + 48)];
        v51(v85, v94, v54);
        v51(v62, v83, v54);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v61, 0, 1, v60);
      }
    }
  }
}

uint64_t sub_2143E6B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_2143E635C((uint64_t (*)(char *, char *))sub_2143E6BC8, (uint64_t)&v6, v7, a4);
}

uint64_t sub_2143E6BC8()
{
  swift_getAssociatedTypeWitness();
  return sub_214424E6C() & 1;
}

uint64_t sub_2143E6C38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_253F13340);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143E6C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, char a4@<W4>, uint64_t a5@<X5>, int64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  if (MEMORY[0x2199CC98C](a2, a5) == 1)
    return sub_2144250B8();
  v43 = a1;
  *(_QWORD *)&v46 = a2;
  v15 = sub_214425094();
  v16 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v15);
  result = sub_21442525C();
  if ((result & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v39 = a7;
  v49 = a2;
  MEMORY[0x24BDAC7A8](result);
  v33 = a5;
  v34 = a6;
  v35 = v43;
  v41 = a3 & 1;
  LOBYTE(v36) = a3 & 1;
  v40 = a6;
  v17 = a4 & 1;
  BYTE1(v36) = a4 & 1;
  v42 = v18;
  v37 = v18;
  v19 = sub_2141D8BF8(&qword_254D6E0D0);
  v21 = sub_2141D0320((void (*)(char *, char *))sub_2143E7104, (uint64_t)v32, v15, v19, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v20);
  v22 = sub_214331198(v21);
  v23 = sub_2143EDE94(v22);
  v25 = v24;
  result = swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)&v45 = a2;
  MEMORY[0x2199CD934](MEMORY[0x24BEE12D8], v15);
  v26 = MEMORY[0x24BEE17A8];
  v27 = sub_214425184();
  v45 = v46;
  MEMORY[0x24BDAC7A8](v27);
  v32[0] = a5;
  v32[1] = v40;
  v33 = v21;
  v34 = v23;
  v35 = a2;
  v36 = v43;
  LOBYTE(v37) = v41;
  BYTE1(v37) = v17;
  v38 = v42;
  v28 = sub_2141D8BF8(&qword_253F13548);
  v29 = sub_2141FE07C();
  v44[0] = v26;
  v44[1] = v29;
  MEMORY[0x2199CD934](MEMORY[0x24BEE1BB8], v28, v44);
  v30 = sub_2143E71A8();
  sub_214250190((void (*)(char *))sub_2143E7170, (uint64_t)&v31, (uint64_t)&type metadata for DiffToDesiredCount, v30, (char *)&v47);
  result = swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
    return sub_2144250B8();
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_2143E6F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __OFSUB__(a2, a1);
  result = a2 - a1;
  if (result < 0 == v4)
  {
    if (!v4)
    {
      if (!__OFSUB__(a3, a1))
      {
        if (a3 - a1 >= result)
          return result;
        goto LABEL_21;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  result = a1 - a3;
  if (a1 < a3)
  {
    v6 = a1 - a2;
    if (!__OFSUB__(a1, a2))
    {
      v4 = __OFSUB__(a1, a3);
      v7 = a1 - a3;
      if (!v4)
      {
        if (v7 <= v6)
          v8 = v6;
        else
          v8 = v7;
        if ((v8 & 0x8000000000000000) == 0)
          return 0;
        goto LABEL_24;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFSUB__(a1, a3))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v4 = __OFSUB__(a1, a2);
  v9 = a1 - a2;
  if (v4)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  if (v9 < result)
  {
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

unint64_t sub_2143E6FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, char a3@<W5>, char a4@<W6>, int64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t result;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  BOOL v23;
  uint64_t v24;

  v13 = *(_QWORD *)(a7 - 8);
  v14 = (unint64_t *)MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = *v14;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (result >= *(_QWORD *)(v15 + 16))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(_QWORD *)(v15 + 16 * result + 32) > v16)
  {
    v21 = qword_254D6E0C0;
    v20 = unk_254D6E0C8;
LABEL_11:
    *a6 = v21;
    a6[1] = v20;
    return result;
  }
  sub_2144250B8();
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a8 + 32))(a2, a3 & 1, a4 & 1, a7, a8);
  v21 = result - a5;
  if (__OFSUB__(result, a5))
    goto LABEL_14;
  v22 = result;
  if ((v21 & 0x8000000000000000) == 0 || (v23 = __OFSUB__(0, v21), v21 = a5 - result, !v23))
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, a7);
    if (v22 >= a5)
      v20 = 0;
    else
      v20 = -1;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

BOOL sub_2143E70E4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return a2[1] < a1[1];
  else
    return *a1 < *a2;
}

uint64_t sub_2143E7104@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 48);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 24) + 40))(*(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(_QWORD *)(v1 + 16));
  result = sub_2143E6F34(v3, v4, v5);
  *a1 = result;
  a1[1] = v7;
  return result;
}

unint64_t sub_2143E7170@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2143E6FBC(a1, *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64), *(_BYTE *)(v2 + 65), *(_QWORD *)(v2 + 72), a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_2143E71A8()
{
  unint64_t result;

  result = qword_254D6E0D8;
  if (!qword_254D6E0D8)
  {
    result = MEMORY[0x2199CD934](&unk_21443262C, &type metadata for DiffToDesiredCount);
    atomic_store(result, (unint64_t *)&qword_254D6E0D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DiffToDesiredCount()
{
  return &type metadata for DiffToDesiredCount;
}

BOOL sub_2143E71FC(_QWORD *a1, _QWORD *a2)
{
  if (*a2 == *a1)
    return a1[1] >= a2[1];
  else
    return *a2 >= *a1;
}

BOOL sub_2143E721C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return a2[1] >= a1[1];
  else
    return *a1 >= *a2;
}

BOOL sub_2143E723C(_QWORD *a1, _QWORD *a2)
{
  if (*a2 == *a1)
    return a1[1] < a2[1];
  else
    return *a2 < *a1;
}

unint64_t sub_2143E7260()
{
  unint64_t result;

  result = qword_254D6E0E0;
  if (!qword_254D6E0E0)
  {
    result = MEMORY[0x2199CD934](&unk_214432604, &type metadata for DiffToDesiredCount);
    atomic_store(result, (unint64_t *)&qword_254D6E0E0);
  }
  return result;
}

uint64_t sub_2143E72A4()
{
  uint64_t v0;
  uint64_t result;

  sub_2141D8BF8(&qword_254D6E0E8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_214432680;
  *(_QWORD *)(v0 + 32) = sub_214424998();
  *(_QWORD *)(v0 + 40) = sub_2144249D4();
  *(_QWORD *)(v0 + 48) = sub_2144249E0();
  *(_QWORD *)(v0 + 56) = sub_2144249EC();
  *(_QWORD *)(v0 + 64) = sub_21442498C();
  *(_QWORD *)(v0 + 72) = sub_2144249B0();
  *(_QWORD *)(v0 + 80) = sub_2144249F8();
  result = sub_214424FF8();
  qword_254D760C8 = v0;
  return result;
}

uint64_t sub_2143E733C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_214424BCC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141D8BF8(&qword_254D6E0E8);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2144271D0;
  if (qword_254D68EF8 != -1)
    swift_once();
  *(_QWORD *)(v4 + 32) = qword_254D760D8;
  swift_retain();
  *(_QWORD *)(v4 + 40) = sub_214424998();
  v8 = v4;
  sub_214424FF8();
  MEMORY[0x2199CC500](v8);
  sub_214424BC0();
  v5 = sub_214424BD8();
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_254D760D0 = v5;
  return result;
}

double sub_2143E745C()
{
  uint64_t v0;
  double result;

  sub_2141D8BF8(&qword_253F13D68);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_2144271D0;
  *(_OWORD *)(v0 + 32) = xmmword_214432690;
  qword_253F1C780 = v0;
  return result;
}

uint64_t sub_2143E74A0()
{
  uint64_t v0;
  uint64_t result;

  sub_2141D8BF8(&qword_253F10278);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_214432680;
  if (qword_253F10D60 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C950, v0 + 32);
  if (qword_253F10230 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C7B0, v0 + 72);
  if (qword_253F10250 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C850, v0 + 112);
  if (qword_253F10228 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C788, v0 + 152);
  if (qword_253F10238 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C7D8, v0 + 192);
  if (qword_253F10248 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C828, v0 + 232);
  if (qword_253F10240 != -1)
    swift_once();
  result = sub_2141F9E40((uint64_t)&qword_253F1C800, v0 + 272);
  qword_253F1C778 = v0;
  return result;
}

id sub_2143E7688(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = objc_msgSend(a1, sel_accessibilityContrast);
  v11 = objc_msgSend(a1, sel_userInterfaceStyle);
  v12 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
  if (v11 == (id)2)
    v13 = a2;
  else
    v13 = a3;
  if (v11 == (id)2)
    v14 = a4;
  else
    v14 = a5;
  if (v10 == (id)1)
    v15 = v13;
  else
    v15 = v14;
  return objc_msgSend(v12, sel_initWithCGColor_, v15);
}

void sub_2143E7710()
{
  CGColorRef SRGB;
  CGColorRef v1;
  CGColorRef v2;
  CGColorRef v3;
  _QWORD *v4;
  id v5;
  void *v6;
  CGColor *v7;
  CGColor *v8;
  CGColor *v9;
  CGColor *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[6];

  SRGB = CGColorCreateSRGB(0.82745098, 0.905882353, 1.0, 1.0);
  v1 = CGColorCreateSRGB(0.031372549, 0.0549019608, 0.129411765, 1.0);
  v2 = CGColorCreateSRGB(0.803921569, 0.870588235, 0.992156863, 1.0);
  v3 = CGColorCreateSRGB(0.0, 0.0431372549, 0.105882353, 1.0);
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v4[5] = SRGB;
  v5 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
  v13[4] = sub_2143E78EC;
  v13[5] = v4;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_2143E7D60;
  v13[3] = &unk_24D18C5E8;
  v6 = _Block_copy(v13);
  v7 = v3;
  v8 = v2;
  v9 = v1;
  v10 = SRGB;
  v11 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  v12 = MEMORY[0x2199CC278](v11);

  qword_254D760D8 = v12;
}

uint64_t sub_2143E78B0()
{
  id *v0;

  return swift_deallocObject();
}

id sub_2143E78EC(void *a1)
{
  uint64_t *v1;

  return sub_2143E7688(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_2143E78F8()
{
  uint64_t v0;
  uint64_t result;

  sub_2141D8BF8(&qword_253F10278);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_214428BE0;
  if (qword_253F10D60 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C950, v0 + 32);
  if (qword_253F10238 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C7D8, v0 + 72);
  if (qword_253F10250 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C850, v0 + 112);
  if (qword_253F10240 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&qword_253F1C800, v0 + 152);
  if (qword_254D68F18 != -1)
    swift_once();
  result = sub_2141F9E40((uint64_t)&qword_254D760F8, v0 + 192);
  qword_254D760E0 = v0;
  return result;
}

double sub_2143E7A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  sub_2141D8BF8(&qword_254D690D8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_214428BE0;
  if (qword_253F13350 != -1)
    swift_once();
  sub_214423D80();
  *(_OWORD *)(v0 + 32) = v11;
  *(_OWORD *)(v0 + 48) = v12;
  *(_QWORD *)(v0 + 64) = v13;
  sub_2141D8BF8(&qword_253F13D68);
  v1 = swift_allocObject();
  __asm { FMOV            V0.2D, #4.0 }
  *(_OWORD *)(v1 + 16) = xmmword_2144271D0;
  *(_OWORD *)(v1 + 32) = _Q0;
  sub_214423D80();
  *(_OWORD *)(v0 + 72) = v14;
  *(_OWORD *)(v0 + 88) = v15;
  *(_QWORD *)(v0 + 104) = v16;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2144271D0;
  *(_OWORD *)(v7 + 32) = xmmword_2144326A0;
  sub_214423D80();
  *(_OWORD *)(v0 + 112) = v17;
  *(_OWORD *)(v0 + 128) = v18;
  *(_QWORD *)(v0 + 144) = v19;
  v8 = (_OWORD *)swift_allocObject();
  v8[1] = xmmword_21442C470;
  v8[2] = xmmword_2144308B0;
  v8[3] = xmmword_2144326A0;
  sub_214423D80();
  *(_OWORD *)(v0 + 152) = v20;
  *(_OWORD *)(v0 + 168) = v21;
  *(_QWORD *)(v0 + 184) = v22;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2144271D0;
  *(_OWORD *)(v9 + 32) = xmmword_2144326B0;
  sub_214423D80();
  result = *(double *)&v23;
  *(_OWORD *)(v0 + 192) = v23;
  *(_OWORD *)(v0 + 208) = v24;
  *(_QWORD *)(v0 + 224) = v25;
  qword_254D760E8 = v0;
  return result;
}

double sub_2143E7CA0()
{
  uint64_t v0;
  double result;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_2141D8BF8(&qword_254D690D8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2144271D0;
  sub_214423D80();
  *(_OWORD *)(v0 + 32) = v2;
  *(_OWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 64) = v4;
  sub_214423D80();
  result = *(double *)&v5;
  *(_OWORD *)(v0 + 72) = v5;
  *(_OWORD *)(v0 + 88) = v6;
  *(_QWORD *)(v0 + 104) = v7;
  qword_254D760F0 = v0;
  return result;
}

id sub_2143E7D60(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t sub_2143E7DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_2143E7DC0()
{
  return swift_release();
}

uint64_t _s4StepVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = v3;
  return a1;
}

uint64_t _s4StepVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t _s4StepVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *_s4StepVMa()
{
  return &_s4StepVN;
}

void sub_2143E7ED0()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  BOOL v3;
  uint64_t v4;

  v1 = v0;
  v2 = *(double *)(v0 + 24);
  v3 = v2 > 0.0 && v2 < 1.0;
  if (v3 && *(_QWORD *)(v0 + 8) == 2)
    sub_21442531C();
  v4 = *(_QWORD *)(v0 + 16);
  if (v4 == 1)
  {
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
  }
  else if (!v4)
  {
    if (*(_QWORD *)(v1 + 8) == 1)
      CGPathCloseSubpath(*(CGMutablePathRef *)v1);
    return;
  }
  if (__OFSUB__(0, v4))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 16) = -v4;
    *(double *)(v1 + 24) = 1.0 - v2;
  }
}

uint64_t sub_2143E7F94(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v2 + 8))
  {
    *(_QWORD *)(v2 + 8) = 2;
    sub_21442531C();
  }
  else
  {
    *(_QWORD *)(v2 + 8) = 1;
    if (*(_QWORD *)(v2 + 16) != 1)
    {
      result = sub_214425310();
      goto LABEL_6;
    }
  }
  result = sub_21442531C();
LABEL_6:
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
  return result;
}

int64x2_t sub_2143E80B8()
{
  int64x2_t *v0;
  int64x2_t result;

  v0->i64[1] = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  v0[2] = result;
  return result;
}

uint64_t AnyChartSymbolShape.init(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2141D8DC0(a1, a2);
}

double AnyChartSymbolShape.path(in:)@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  double result;
  __int128 v4;
  __int128 v5;
  char v6;

  sub_2141E88D0(v1, v1[3]);
  sub_214424A10();
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_2143E817C@<X0>(uint64_t a1@<X8>)
{
  const CGPath *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v7;
  uint64_t result;
  const CGPath *v9;
  const CGPath *v10;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  const CGPath *v20;
  const CGPath *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  double v26;
  double v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void *v29;
  char v30;
  __int128 v31;
  __int128 aBlock;
  uint64_t (*v33)(uint64_t, uint64_t);
  void *v34;
  uint64_t (*v35)();
  uint64_t v36;
  CGMutablePathRef Mutable;
  unint64_t v38;
  CGRect PathBoundingBox;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  v38 = MEMORY[0x24BEE4AF8];
  Mutable = CGPathCreateMutable();
  v2 = (const CGPath *)sub_214424698();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = &Mutable;
  *(_QWORD *)(v3 + 24) = &v38;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = sub_2143EA5DC;
  *(_QWORD *)(v4 + 24) = v3;
  v35 = sub_2143EA5F4;
  v36 = v4;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v33 = sub_2143E8BE8;
  v34 = &unk_24D18C980;
  v5 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v2, v5);

  _Block_release(v5);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    isEscapingClosureAtFileLocation = v38;
    if (!(v38 >> 62))
    {
      v7 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n();
      if (v7)
        goto LABEL_4;
LABEL_21:
      swift_bridgeObjectRelease_n();
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRetain_n();
  result = sub_2144256AC();
  v7 = result;
  if (!result)
    goto LABEL_21;
LABEL_4:
  if (v7 >= 1)
  {
    if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0)
      v9 = (const CGPath *)MEMORY[0x2199CCE3C](0, isEscapingClosureAtFileLocation);
    else
      v9 = (const CGPath *)*(id *)(isEscapingClosureAtFileLocation + 32);
    v10 = v9;
    PathBoundingBox = CGPathGetPathBoundingBox(v9);
    x = PathBoundingBox.origin.x;
    y = PathBoundingBox.origin.y;
    width = PathBoundingBox.size.width;
    height = PathBoundingBox.size.height;
    v15 = CGRectGetWidth(PathBoundingBox);
    v40.origin.x = x;
    v40.origin.y = y;
    v40.size.width = width;
    v40.size.height = height;
    v16 = CGRectGetHeight(v40);
    v17 = v7 - 1;
    if (v7 != 1)
    {
      v18 = 0;
      v19 = -(v15 * v16);
      do
      {
        if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0)
          v20 = (const CGPath *)MEMORY[0x2199CCE3C](v18 + 1, isEscapingClosureAtFileLocation);
        else
          v20 = (const CGPath *)*(id *)(isEscapingClosureAtFileLocation + 8 * v18 + 40);
        v21 = v20;
        v41 = CGPathGetPathBoundingBox(v20);
        v22 = v41.origin.x;
        v23 = v41.origin.y;
        v24 = v41.size.width;
        v25 = v41.size.height;
        v26 = CGRectGetWidth(v41);
        v42.origin.x = v22;
        v42.origin.y = v23;
        v42.size.width = v24;
        v42.size.height = v25;
        v27 = -(v26 * CGRectGetHeight(v42));
        if (v27 < v19)
        {

          v10 = v21;
          v19 = v27;
        }
        else
        {

        }
        ++v18;
      }
      while (v17 != v18);
    }
    swift_bridgeObjectRelease_n();
    if (v10)
    {
      sub_214424788();
LABEL_23:
      v31 = aBlock;
      v28 = v33;
      v29 = v34;
      v30 = (char)v35;

      swift_release();
      result = swift_bridgeObjectRelease();
      *(_OWORD *)a1 = v31;
      *(_QWORD *)(a1 + 16) = v28;
      *(_QWORD *)(a1 + 24) = v29;
      *(_BYTE *)(a1 + 32) = v30;
      return result;
    }
LABEL_22:
    sub_214424770();
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t AnyChartSymbolShape.perceptualUnitRect.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_2141E88D0(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

double ChartSymbolShape<>.strokeBorder(lineWidth:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double result;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a1);
  sub_214423D80();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a1);
  v12 = a4 + *(int *)(type metadata accessor for StrokedSymbolShape(0, a1, a2, a3) + 44);
  result = *(double *)&v16;
  v14 = v17;
  *(_OWORD *)v12 = v16;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = v18;
  return result;
}

uint64_t ChartSymbolShape<>.strokeBorder(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v18;

  v11 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v5, a2, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a2);
  v15 = a5 + *(int *)(type metadata accessor for StrokedSymbolShape(0, a2, a3, a4) + 44);
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v15 = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

double sub_2143E869C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v20 - v5;
  swift_getAssociatedConformanceWitness();
  v7 = sub_214423ED0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - v9;
  v11 = (uint64_t *)(v2 + *(int *)(a1 + 44));
  v12 = *v11;
  sub_2144240BC();
  v13 = v11[3];
  v14 = v11[4];
  v16 = v11[1];
  v15 = v11[2];
  v25 = v12;
  v26 = v16;
  v27 = v15;
  v28 = v13;
  v29 = v14;
  sub_214424A58();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, AssociatedTypeWitness);
  sub_214423EC4();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  result = *(double *)&v22;
  v18 = v23;
  v19 = v21;
  *v21 = v22;
  v19[1] = v18;
  *((_BYTE *)v19 + 32) = v24;
  return result;
}

double sub_2143E8878@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  sub_2143E869C(a1, v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_2143E88C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a2, a3);
}

uint64_t sub_2143E88CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_214432B44, a3);
  return sub_214424A64();
}

uint64_t sub_2143E8928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_214432B44, a3);
  return sub_214424A28();
}

uint64_t sub_2143E8984(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_214432B44, a1);
  return sub_214424A40();
}

void sub_2143E89C8(_DWORD *a1, id *a2, _QWORD *a3)
{
  id v4;
  id v6;
  CGMutablePathRef Mutable;
  id v8;
  id v9;
  id v10;
  id v11;

  switch(*a1)
  {
    case 0:
      v8 = *a2;
      sub_214425310();
      v4 = v8;
      break;
    case 1:
      v9 = *a2;
      sub_21442531C();
      v4 = v9;
      break;
    case 2:
      v10 = *a2;
      sub_214425304();
      v4 = v10;
      break;
    case 3:
      v11 = *a2;
      sub_214425328();
      v4 = v11;
      break;
    case 4:
      CGPathCloseSubpath((CGMutablePathRef)*a2);
      if (!CGPathIsEmpty((CGPathRef)*a2))
      {
        v6 = *a2;
        MEMORY[0x2199CC8E4]();
        if (*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21442501C();
        sub_214425064();
        sub_214424FF8();
      }
      Mutable = CGPathCreateMutable();
      v4 = *a2;
      *a2 = Mutable;
      break;
    default:
      __break(1u);
      JUMPOUT(0x2143E8BD4);
  }

}

uint64_t sub_2143E8BE8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

unint64_t sub_2143E8C0C()
{
  unint64_t result;

  qword_253F1C968 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_253F1C970 = result;
  qword_253F1C950 = 0;
  byte_253F1C958 = 5;
  return result;
}

void static ChartSymbolShape<>.circle.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 5;
}

unint64_t sub_2143E8C5C()
{
  unint64_t result;

  qword_253F1C7F0 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_253F1C7F8 = result;
  qword_253F1C7D8 = 1;
  byte_253F1C7E0 = 5;
  return result;
}

void static ChartSymbolShape<>.square.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 5;
}

unint64_t sub_2143E8CB4()
{
  unint64_t result;

  qword_253F1C868 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_253F1C870 = result;
  qword_253F1C850 = 3;
  byte_253F1C858 = 5;
  return result;
}

void static ChartSymbolShape<>.triangle.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 3;
  *(_BYTE *)(a1 + 8) = 5;
}

unint64_t sub_2143E8D0C()
{
  unint64_t result;

  qword_253F1C818 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_253F1C820 = result;
  qword_253F1C800 = 2;
  byte_253F1C808 = 5;
  return result;
}

void static ChartSymbolShape<>.diamond.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 5;
}

unint64_t sub_2143E8D64()
{
  unint64_t result;

  qword_254D76110 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_254D76118 = result;
  qword_254D760F8 = 4;
  byte_254D76100 = 5;
  return result;
}

void static ChartSymbolShape<>.pentagon.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 4;
  *(_BYTE *)(a1 + 8) = 5;
}

unint64_t sub_2143E8DBC()
{
  unint64_t result;

  qword_253F1C7A0 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_253F1C7A8 = result;
  qword_253F1C788 = 6;
  byte_253F1C790 = 5;
  return result;
}

void static ChartSymbolShape<>.plus.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 6;
  *(_BYTE *)(a1 + 8) = 5;
}

unint64_t sub_2143E8E14()
{
  unint64_t result;

  qword_253F1C7C8 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_253F1C7D0 = result;
  qword_253F1C7B0 = 5;
  byte_253F1C7B8 = 5;
  return result;
}

void static ChartSymbolShape<>.cross.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 5;
  *(_BYTE *)(a1 + 8) = 5;
}

unint64_t sub_2143E8E64()
{
  unint64_t result;

  qword_253F1C840 = (uint64_t)&type metadata for BasicChartSymbolShape;
  result = sub_214303A14();
  qword_253F1C848 = result;
  qword_253F1C828 = 7;
  byte_253F1C830 = 5;
  return result;
}

void static ChartSymbolShape<>.asterisk.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 7;
  *(_BYTE *)(a1 + 8) = 5;
}

uint64_t sub_2143E8EBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_2141E88D0(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

double sub_2143E8F00@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  double result;
  __int128 v4;
  __int128 v5;
  char v6;

  sub_2141E88D0(v1, v1[3]);
  sub_214424A10();
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_2143E8F94()
{
  sub_2143E9BB4();
  return sub_214424A64();
}

uint64_t sub_2143E8FE4()
{
  sub_2143E9BB4();
  return sub_214424A28();
}

uint64_t sub_2143E9034()
{
  sub_2143E9BB4();
  return sub_214424A40();
}

double Circle.perceptualUnitRect.getter()
{
  return -0.0641895835;
}

double sub_2143E9088()
{
  return -0.0641895835;
}

uint64_t sub_2143E90A4(uint64_t a1)
{
  return sub_2143E9A10(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

void BasicChartSymbolShape.path(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  uint64_t v9;
  CGRect v10;
  CGRect v11;
  CGRect v12;

  v9 = *(unsigned __int8 *)(v4 + 8);
  CGRectGetWidth(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetHeight(v10);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  CGRectGetMidX(v11);
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectGetMidY(v12);
  __asm { BR              X9 }
}

__n128 sub_2143E9170()
{
  __n128 *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  __n128 result;
  __n128 v10;
  double v11[30];

  if (qword_254D68F58 != -1)
    swift_once();
  v5 = v4 * *(double *)&qword_254D76248;
  if (qword_253F10828 != -1)
    swift_once();
  v11[5] = v5 / *(double *)&qword_253F1C890;
  v11[6] = 0.0;
  v11[7] = 0.0;
  v11[8] = v5 / *(double *)&qword_253F1C890;
  v11[9] = v3;
  v11[10] = v2;
  sub_2143F33BC((uint64_t)v11);
  sub_21442474C();
  v10 = *(__n128 *)(v1 - 136);
  v6 = *(_QWORD *)(v1 - 120);
  v7 = *(_QWORD *)(v1 - 112);
  v8 = *(_BYTE *)(v1 - 104);
  sub_2141FE404((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
  result = v10;
  *v0 = v10;
  v0[1].n128_u64[0] = v6;
  v0[1].n128_u64[1] = v7;
  v0[2].n128_u8[0] = v8;
  return result;
}

double BasicChartSymbolShape.perceptualUnitRect.getter()
{
  return -0.0641895835;
}

uint64_t BasicChartSymbolShape.strokeBorder(lineWidth:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t result;

  v2 = *v1;
  v3 = *((unsigned __int8 *)v1 + 8);
  if (v3 >= 5)
    return ((uint64_t (*)(void))((char *)&loc_2143E98B4 + 4 * byte_21443276E[v2]))();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

double sub_2143E98F8@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v7;
  __int128 v8;
  char v9;

  BasicChartSymbolShape.path(in:)(a2, a3, a4, a5);
  result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

uint64_t sub_2143E9938()
{
  sub_2143E9D38();
  return sub_214424A64();
}

uint64_t sub_2143E9988()
{
  sub_2143E9D38();
  return sub_214424A28();
}

uint64_t sub_2143E99D8()
{
  sub_2143E9D38();
  return sub_214424A40();
}

uint64_t sub_2143E9A10(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_2143E9A2C + 4 * byte_214432776[a2]))();
}

BOOL sub_2143E9A2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return !a4 && *(double *)&a1 == *(double *)&a3;
}

unint64_t sub_2143E9B90(uint64_t a1)
{
  unint64_t result;

  result = sub_2143E9BB4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2143E9BB4()
{
  unint64_t result;

  result = qword_253F10148;
  if (!qword_253F10148)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for AnyChartSymbolShape, &type metadata for AnyChartSymbolShape);
    atomic_store(result, (unint64_t *)&qword_253F10148);
  }
  return result;
}

unint64_t sub_2143E9BFC()
{
  unint64_t result;

  result = qword_253F10150;
  if (!qword_253F10150)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for AnyChartSymbolShape, &type metadata for AnyChartSymbolShape);
    atomic_store(result, (unint64_t *)&qword_253F10150);
  }
  return result;
}

unint64_t sub_2143E9C44()
{
  unint64_t result;

  result = qword_253F10158;
  if (!qword_253F10158)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for AnyChartSymbolShape, &type metadata for AnyChartSymbolShape);
    atomic_store(result, (unint64_t *)&qword_253F10158);
  }
  return result;
}

uint64_t sub_2143E9C88()
{
  return sub_2143E9E30(&qword_254D6E0F0, &qword_254D6E0F8);
}

unint64_t sub_2143E9CAC(uint64_t a1)
{
  unint64_t result;

  result = sub_2143E9CD0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2143E9CD0()
{
  unint64_t result;

  result = qword_253F0FF70;
  if (!qword_253F0FF70)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BDF4440], MEMORY[0x24BDF4458]);
    atomic_store(result, (unint64_t *)&qword_253F0FF70);
  }
  return result;
}

unint64_t sub_2143E9D14(uint64_t a1)
{
  unint64_t result;

  result = sub_2143E9D38();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2143E9D38()
{
  unint64_t result;

  result = qword_253F10838;
  if (!qword_253F10838)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for BasicChartSymbolShape, &type metadata for BasicChartSymbolShape);
    atomic_store(result, (unint64_t *)&qword_253F10838);
  }
  return result;
}

unint64_t sub_2143E9D80()
{
  unint64_t result;

  result = qword_253F10840;
  if (!qword_253F10840)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for BasicChartSymbolShape, &type metadata for BasicChartSymbolShape);
    atomic_store(result, (unint64_t *)&qword_253F10840);
  }
  return result;
}

unint64_t sub_2143E9DC8()
{
  unint64_t result;

  result = qword_253F10848;
  if (!qword_253F10848)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for BasicChartSymbolShape, &type metadata for BasicChartSymbolShape);
    atomic_store(result, (unint64_t *)&qword_253F10848);
  }
  return result;
}

uint64_t sub_2143E9E0C()
{
  return sub_2143E9E30(&qword_254D6E100, &qword_254D6E108);
}

uint64_t sub_2143E9E30(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_2141D7924(a2);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEB358], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of ChartSymbolShape.perceptualUnitRect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for AnyChartSymbolShape()
{
  return &type metadata for AnyChartSymbolShape;
}

ValueMetadata *type metadata accessor for BasicChartSymbolShape()
{
  return &type metadata for BasicChartSymbolShape;
}

void sub_2143E9EA0(uint64_t *a1)
{
  type metadata accessor for StrokedSymbolShape(255, *a1, a1[1], a1[2]);
  JUMPOUT(0x2199CD934);
}

uint64_t type metadata accessor for StrokedSymbolShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StrokedSymbolShape);
}

uint64_t sub_2143E9EDC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2143E9F50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_2143EA02C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143EA06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2143EA0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  return a1;
}

uint64_t sub_2143EA188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  return a1;
}

uint64_t sub_2143EA214(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2143EA290 + 4 * byte_214432784[v10]))();
  }
}

void sub_2143EA314(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2143EA408()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2143EA48CLL);
}

void sub_2143EA410(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2143EA418);
  JUMPOUT(0x2143EA48CLL);
}

void sub_2143EA45C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143EA48CLL);
}

void sub_2143EA464()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143EA48CLL);
}

uint64_t sub_2143EA46C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x2143EA478);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x2143EA48CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t _s6Charts21BasicChartSymbolShapeV9ShapeTypeOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6Charts21BasicChartSymbolShapeV9ShapeTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_2143EA530(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 4u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_2143EA548(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BasicChartSymbolShape.ShapeType()
{
  return &type metadata for BasicChartSymbolShape.ShapeType;
}

void sub_2143EA570()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143EA580()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143EA590()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2143EA5A0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&unk_214432B44);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143EA5CC()
{
  return swift_deallocObject();
}

void sub_2143EA5DC(_DWORD *a1)
{
  uint64_t v1;

  sub_2143E89C8(a1, *(id **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_2143EA5E4()
{
  return swift_deallocObject();
}

uint64_t sub_2143EA5F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2143EA614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_2143EA624()
{
  return swift_release();
}

uint64_t sub_2143EA62C(unint64_t a1)
{
  return sub_2143EA674(a1, &qword_253F11C98, &qword_254D6E118, &qword_254D6E110, (uint64_t *)sub_214247E4C);
}

uint64_t sub_2143EA650(unint64_t a1)
{
  return sub_2143EA674(a1, &qword_253F15838, &qword_254D6E128, &qword_254D6E120, (uint64_t *)sub_214247DF4);
}

uint64_t sub_2143EA674(unint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_2144256AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_2144256AC();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = (uint64_t *)a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x2199CCE48](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = sub_2143EC784(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = sub_2144256AC();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_214424FF8();
  }
  __break(1u);
  return result;
}

uint64_t sub_2143EA884(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_214223CD8((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2143EA970(uint64_t a1)
{
  return sub_2143EB408(a1, (uint64_t (*)(void))sub_214223DF0, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
}

uint64_t sub_2143EA984(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_214222074((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2143EAA6C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_2142248A0((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 40 * v7 + 32), (const void *)(v6 + 32), 40 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2143EAB54(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_214224D10((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 48 * v7 + 32), (const void *)(v6 + 32), 48 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2143EAC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t (*v22)();
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t (*v36)();
  uint64_t *v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v6 = v5 + a1;
  if (__OFADD__(v5, a1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v10 = v4[3] >> 1, v10 < v6))
  {
    if (v5 <= v6)
      v11 = v6;
    else
      v11 = v5;
    v4 = sub_214224BD8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v10 = v4[3] >> 1;
  }
  v12 = v4[2];
  v13 = (uint64_t *)(v10 - v12);
  v14 = sub_2143EBE58(&v43, &v4[v12 + 4], v10 - v12, a1, a2);
  if ((uint64_t)v14 < a1)
    goto LABEL_15;
  if ((uint64_t)v14 >= 1)
  {
    v15 = v4[2];
    v16 = __OFADD__(v15, v14);
    v17 = (char *)v14 + v15;
    if (v16)
    {
      __break(1u);
LABEL_34:
      v30 = v38 + v3 + 1;
      goto LABEL_35;
    }
    v4[2] = v17;
  }
  if (v14 != v13)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v2 = v4;
    return result;
  }
LABEL_16:
  v19 = v45;
  v20 = v43;
  if (v45 == v43)
    goto LABEL_13;
  v21 = v4[2];
  v40 = v44;
  v41 = v43;
  v22 = sub_2143EC928((uint64_t (*)())v42, v45, v43, v44);
  v24 = *v23;
  swift_bridgeObjectRetain();
  result = ((uint64_t (*)(_BYTE *, _QWORD))v22)(v42, 0);
  v25 = v20;
  if (v19 < 0 || v19 >= v20)
    goto LABEL_38;
  v26 = v19 + 1;
  v27 = -v20;
LABEL_21:
  while (1)
  {
    v28 = v4[3];
    v29 = v28 >> 1;
    v30 = v21 + 1;
    if ((uint64_t)(v28 >> 1) < v21 + 1)
      break;
    if (v21 < v29)
      goto LABEL_23;
LABEL_20:
    v4[2] = v21;
  }
  v4 = sub_214224BD8((_QWORD *)(v28 > 1), v21 + 1, 1, v4);
  v29 = v4[3] >> 1;
  if (v21 >= v29)
    goto LABEL_20;
LABEL_23:
  v39 = v29;
  v31 = &v4[v21];
  v31[4] = v24;
  v32 = v40;
  if (v26 == v25)
  {
LABEL_35:
    v4[2] = v30;
    goto LABEL_13;
  }
  v3 = 0;
  v33 = v27 + v26;
  v38 = v21;
  v34 = ~v21 + v29;
  v35 = v31 + 5;
  while (1)
  {
    v36 = sub_2143EC928((uint64_t (*)())v42, v26 + v3, v25, v32);
    v24 = *v37;
    swift_bridgeObjectRetain();
    result = ((uint64_t (*)(_BYTE *, _QWORD))v36)(v42, 0);
    v25 = v41;
    if (v26 < 0 || v26 + v3 >= v41)
      break;
    if (v34 == v3)
    {
      v26 += v3 + 1;
      v21 = v39;
      v27 = -v41;
      v4[2] = v39;
      goto LABEL_21;
    }
    v35[v3++] = v24;
    v32 = v40;
    if (!(v33 + v3))
      goto LABEL_34;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_2143EAEC0(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_214224AE0((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2143EAFA0(uint64_t a1)
{
  return sub_2143EB408(a1, (uint64_t (*)(void))sub_214225680, type metadata accessor for AnyVectorizedRenderer);
}

size_t sub_2143EAFB4(size_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  size_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = sub_2142259F8(result, v10, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_2141D8BF8(&qword_253F134A8);
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v7 = v3[2];
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2143EB0B8(uint64_t result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v8;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t *v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v10 = *((_QWORD *)v4 + 3) >> 1, v10 < v6))
  {
    if (v5 <= v6)
      v11 = v6;
    else
      v11 = v5;
    v4 = sub_214224894(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v10 = *((_QWORD *)v4 + 3) >> 1;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = v10 - v12;
  result = (uint64_t)sub_2143EC69C(&v38, (unint64_t *)&v4[8 * v12 + 32], v10 - v12, v8, a2);
  if (result < v8)
    goto LABEL_15;
  if (result >= 1)
  {
    v14 = *((_QWORD *)v4 + 2);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      v27 = v34 + v3 + 1;
      goto LABEL_35;
    }
    *((_QWORD *)v4 + 2) = v16;
  }
  if (result != v13)
  {
LABEL_13:
    *v2 = v4;
    return result;
  }
LABEL_16:
  v17 = v40;
  v18 = v38;
  if (v40 == v38)
    goto LABEL_13;
  v19 = *((_QWORD *)v4 + 2);
  v36 = v39;
  v20 = sub_2143EC970(v37, v40, v38, v39);
  v22 = *v21;
  result = ((uint64_t (*)(_QWORD *, _QWORD))v20)(v37, 0);
  if (v17 < 0 || v17 >= v18)
    goto LABEL_37;
  v23 = v17 + 1;
  v24 = -v18;
LABEL_21:
  while (1)
  {
    v25 = *((_QWORD *)v4 + 3);
    v26 = v25 >> 1;
    v27 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1)
      break;
    if (v19 < v26)
      goto LABEL_23;
LABEL_20:
    *((_QWORD *)v4 + 2) = v19;
  }
  result = (uint64_t)sub_214224894((char *)(v25 > 1), v19 + 1, 1, v4);
  v4 = (char *)result;
  v26 = *(_QWORD *)(result + 24) >> 1;
  if (v19 >= v26)
    goto LABEL_20;
LABEL_23:
  v28 = &v4[8 * v19];
  *((_QWORD *)v28 + 4) = v22;
  if (v23 == v18)
  {
LABEL_35:
    *((_QWORD *)v4 + 2) = v27;
    goto LABEL_13;
  }
  v3 = 0;
  v29 = v24 + v23;
  v34 = v19;
  v35 = v26;
  v30 = ~v19 + v26;
  v31 = v28 + 40;
  while (1)
  {
    v32 = sub_2143EC970(v37, v23 + v3, v18, v36);
    v22 = *v33;
    result = ((uint64_t (*)(_QWORD *, _QWORD))v32)(v37, 0);
    if (v23 < 0 || v23 + v3 >= v18)
      break;
    if (v30 == v3)
    {
      v23 += v3 + 1;
      v19 = v35;
      v24 = -v18;
      *((_QWORD *)v4 + 2) = v35;
      goto LABEL_21;
    }
    *(_QWORD *)&v31[8 * v3++] = v22;
    if (!(v29 + v3))
      goto LABEL_34;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2143EB30C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_21422636C((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2143EB3F4(uint64_t a1)
{
  return sub_2143EB408(a1, (uint64_t (*)(void))sub_2142266D0, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
}

uint64_t sub_2143EB408(uint64_t result, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v4 = *(_QWORD *)(result + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v5 = result;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_10:
    if (!v4)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  v10 = (*(_QWORD *)(v5 + 24) >> 1) - *(_QWORD *)(v5 + 16);
  result = a3(0);
  if (v10 < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v11 = *(_QWORD *)(v5 + 16);
  v12 = __OFADD__(v11, v4);
  v13 = v11 + v4;
  if (!v12)
  {
    *(_QWORD *)(v5 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

_QWORD *static BuilderTuple<each A>._makeAxisContent(_:_:)@<X0>(uint64_t TupleTypeMetadata@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(__n128);
  uint64_t v26;
  uint64_t *v27;
  _DWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  _QWORD *result;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  v6 = a2;
  v52 = a5;
  v7 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    v8 = *v7;
  }
  else
  {
    MEMORY[0x24BDAC7A8](TupleTypeMetadata);
    v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v11 = 0;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)(v10 - (char *)v7) < 0x20)
        goto LABEL_9;
      v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v7 + 2);
      v13 = v10 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v11 != v6)
      {
LABEL_9:
        v16 = v6 - v11;
        v17 = v11;
        v18 = &v10[8 * v11];
        v19 = &v7[v17];
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v8 = TupleTypeMetadata;
  }
  v21 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v24;
  v25 = *(uint64_t (**)(__n128))(v24 + 16);
  v54 = v23;
  v26 = v25(v21);
  v51 = v8;
  if (!v6)
  {
    v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_33:
    v48 = v51;
    *v52 = v29;
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v54, v48);
  }
  v27 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  v28 = (_DWORD *)(v8 + 32);
  v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v53 = v6;
  while (1)
  {
    v57 = v7;
    v30 = *v7;
    v31 = *v27;
    v33 = MEMORY[0x24BDAC7A8](v26);
    v35 = (char *)&v49 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
    v56 = v36;
    v37 = v53 == 1 ? 0 : *v28;
    v55 = v32;
    (*(void (**)(char *, char *, uint64_t, __n128))(v32 + 16))(v35, &v54[v37], v30, v33);
    swift_getDynamicType();
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, char *))(v31 + 8))(&v58, v35);
    v39 = v58;
    v40 = *(_QWORD *)(v58 + 16);
    v41 = v29[2];
    v42 = v41 + v40;
    if (__OFADD__(v41, v40))
      break;
    result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v42 <= v29[3] >> 1)
    {
      if (*(_QWORD *)(v39 + 16))
        goto LABEL_28;
    }
    else
    {
      if (v41 <= v42)
        v43 = v41 + v40;
      else
        v43 = v41;
      result = (_QWORD *)sub_214223DF0((size_t)result, v43, 1, v29);
      v29 = result;
      if (*(_QWORD *)(v39 + 16))
      {
LABEL_28:
        v44 = (v29[3] >> 1) - v29[2];
        result = (_QWORD *)type metadata accessor for AxisMarksConfiguration();
        if (v44 < v40)
          goto LABEL_36;
        result = (_QWORD *)swift_arrayInitWithCopy();
        if (v40)
        {
          v45 = v29[2];
          v46 = __OFADD__(v45, v40);
          v47 = v45 + v40;
          if (v46)
            goto LABEL_37;
          v29[2] = v47;
        }
        goto LABEL_15;
      }
    }
    if (v40)
      goto LABEL_35;
LABEL_15:
    swift_bridgeObjectRelease();
    v26 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v35, v30);
    v28 += 4;
    ++v27;
    v7 = v57 + 1;
    if (!--v6)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

_QWORD *sub_2143EB858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return static BuilderTuple<each A>._makeAxisContent(_:_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4);
}

uint64_t sub_2143EB868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v32 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v32);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_2141D8BF8(&qword_253F13358);
  v31 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  v16 = sub_2141D8BF8(qword_254D6AD58);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2143EC9D8(v4, (uint64_t)v18);
  v20 = *(int *)(v16 + 36);
  *(_QWORD *)&v18[v20] = 0;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
LABEL_18:
    sub_2141E801C((uint64_t)v18, a1, qword_254D6AD58);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v28 = a3;
    v29 = a1;
    v21 = 0;
    v22 = 0;
    v30 = a3 - 1;
    while (1)
    {
      sub_2143ECA1C((uint64_t)v18, (uint64_t)v9);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v24 = *(_QWORD *)((char *)v9 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
          sub_2143ECA60((uint64_t)v9);
          if (v21 == v24)
            goto LABEL_16;
        }
        else
        {
          v25 = *(_QWORD *)(*v9 + 16);
          swift_bridgeObjectRelease();
          if (v21 == v25 - 1)
          {
LABEL_16:
            a3 = v22;
            a1 = v29;
            goto LABEL_18;
          }
        }
      }
      else if (v21 == v9[2])
      {
        goto LABEL_16;
      }
      result = DateBins.subscript.getter(v21, (uint64_t)v13);
      v26 = *(_QWORD *)&v18[v20];
      v21 = v26 + 1;
      if (__OFADD__(v26, 1))
        break;
      *(_QWORD *)&v18[v20] = v21;
      sub_2141E801C((uint64_t)v13, (uint64_t)v15, &qword_253F13358);
      sub_2141E801C((uint64_t)v15, a2, &qword_253F13358);
      if (v30 == v22)
      {
        a3 = v28;
        a1 = v29;
        goto LABEL_18;
      }
      a2 += *(_QWORD *)(v31 + 72);
      ++v22;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2143EBACC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_2143EBCC4(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t *sub_2143EBE58(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v7 = result;
  if (!a2)
  {
    v9 = 0;
    result = 0;
    goto LABEL_16;
  }
  v8 = a3;
  if (!a3)
  {
    v9 = 0;
LABEL_15:
    result = (uint64_t *)v8;
    goto LABEL_16;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v9 = a4;
  result = (uint64_t *)a4;
  if (!a4)
  {
LABEL_16:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v9;
    return result;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      v11 = 1;
      while (a4 != v11)
      {
        v12 = v11 + 1;
        a2[v11] = a5;
        swift_bridgeObjectRetain();
        v11 = v12;
        if (v8 == v12)
          goto LABEL_14;
      }
      v8 = a4;
    }
LABEL_14:
    swift_bridgeObjectRetain();
    v9 = v8;
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
  return result;
}

int64_t *sub_2143EBF24(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  _QWORD *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5))
      v7 = ~a4 + a5;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 > 4)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 = v8 - v11 + 1;
      v13 = v5 + v12;
      v10 = &a2[v12];
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_214426BB0);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 1;
      v10 = a2;
    }
    v17 = v10 + 1;
    v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5)
        goto LABEL_30;
      ++v9;
      v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_2143EC054(_QWORD *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD __src[99];
  _BYTE __dst[785];

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
LABEL_36:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v12;
  }
  if (!a3)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v10 = a2;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v21 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  while (v8)
  {
    v14 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v15 = v14 | (v11 << 6);
LABEL_9:
    ++v12;
    v16 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v15);
    sub_2142AAF2C(*(_QWORD *)(a4 + 56) + 784 * v15, (uint64_t)&__src[1]);
    __src[0] = v16;
    memcpy(__dst, __src, sizeof(__dst));
    result = memcpy(v10, __dst, 0x311uLL);
    v10 += 792;
    if (v12 == a3)
    {
      v12 = a3;
LABEL_35:
      v6 = v20;
      result = v21;
      goto LABEL_36;
    }
  }
  v17 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v13)
    goto LABEL_34;
  v18 = *(_QWORD *)(v5 + 8 * v17);
  if (v18)
    goto LABEL_23;
  v19 = v11 + 2;
  ++v11;
  if (v17 + 1 >= v13)
    goto LABEL_34;
  v18 = *(_QWORD *)(v5 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v11 = v17 + 1;
  if (v17 + 2 >= v13)
    goto LABEL_34;
  v18 = *(_QWORD *)(v5 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_23;
  }
  v11 = v17 + 2;
  if (v17 + 3 >= v13)
    goto LABEL_34;
  v18 = *(_QWORD *)(v5 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_23;
  }
  v19 = v17 + 4;
  v11 = v17 + 3;
  if (v17 + 4 >= v13)
  {
LABEL_34:
    v8 = 0;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v5 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v17 = v19;
LABEL_23:
    v8 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v11 = v17;
    goto LABEL_9;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v13)
    {
      v11 = v13 - 1;
      goto LABEL_34;
    }
    v18 = *(_QWORD *)(v5 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_2143EC278(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_2143EC478(_QWORD *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  const void *v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE __dst[312];

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v21 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (const void *)(*(_QWORD *)(a4 + 56) + 304 * v15);
    memcpy(__dst, v19, 0x130uLL);
    memmove(v10, v19, 0x130uLL);
    if (v12 == v9)
    {
      sub_21422F46C((uint64_t)__dst);
      goto LABEL_38;
    }
    v10 += 304;
    result = (_QWORD *)sub_21422F46C((uint64_t)__dst);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v20;
      result = v21;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t *sub_2143EC69C(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t *v14;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = a4;
  if (!a4)
  {
LABEL_23:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (uint64_t *)v5;
  }
  v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6)
        v6 = a3 - 2;
      if (v6 >= a3 - 1)
        v6 = a3 - 1;
      v7 = v6 + 1;
      if (v7 > 4)
      {
        v10 = v7 & 3;
        if ((v7 & 3) == 0)
          v10 = 4;
        v11 = v7 - v10;
        v8 = v7 - v10 + 1;
        v9 = &a2[v11];
        v12 = vdupq_n_s64(a5);
        v13 = (int64x2_t *)(a2 + 3);
        do
        {
          v13[-1] = v12;
          *v13 = v12;
          v13 += 2;
          v11 -= 4;
        }
        while (v11);
      }
      else
      {
        v8 = 1;
        v9 = a2;
      }
      v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8)
          goto LABEL_22;
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for AxisContentBuilder()
{
  return &type metadata for AxisContentBuilder;
}

uint64_t sub_2143EC784(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  void (*v20)(_BYTE *, _QWORD);
  uint64_t *v21;
  uint64_t v22;
  _BYTE v23[32];

  v13 = result;
  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_2144256AC();
    result = swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (v13)
  {
    if (v14)
    {
      swift_bridgeObjectRetain();
      v16 = sub_2144256AC();
      result = swift_bridgeObjectRelease();
      if (v16 <= a2)
      {
        if (v15 >= 1)
        {
          v17 = sub_2143EC998(a5, a6);
          swift_bridgeObjectRetain();
          for (i = 0; i != v15; ++i)
          {
            v19 = sub_2141D8BF8(a6);
            v20 = (void (*)(_BYTE *, _QWORD))a7(v23, i, a3, v19, v17);
            v22 = *v21;
            swift_retain();
            v20(v23, 0);
            *(_QWORD *)(v13 + 8 * i) = v22;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_2141D8BF8(a4);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*sub_2143EC928(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = a4;
    swift_bridgeObjectRetain();
    return destroy for AnyPrimitivePlottableArray;
  }
  return result;
}

_QWORD *sub_2143EC970(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *result = a4;
    return nullsub_1;
  }
  return result;
}

uint64_t sub_2143EC998(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_2141D7924(a2);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2143EC9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DateBins(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143ECA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DateBins.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143ECA60(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CalendarBinningUnit(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143ECA9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char v35;
  char v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  char v42;
  char *v43;
  uint64_t v44;
  char v45;
  char v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  _QWORD v52[2];
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  void (*v60)(char *, uint64_t, uint64_t);

  v2 = sub_214423960();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v57 = (char *)v52 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v56 = (char *)v52 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v52 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v52 - v14;
  v16 = sub_2141D8BF8(&qword_253F10FD8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  v52[1] = a1;
  if (v19)
  {
    v55 = v6;
    v20 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v53 = *(_QWORD *)(v3 + 72);
    v60 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    v54 = v18;
    while (1)
    {
      v60(v18, v20, v2);
      v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56);
      v21(v18, 0, 1, v2);
      v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v18, 1, v2);
      v23 = v22 == 1;
      if (v22 == 1)
        goto LABEL_28;
      v59 = 0;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v15, v18, v2);
      v24 = sub_214423930();
      if ((v25 & 1) != 0)
        break;
      v26 = v24;
      v52[0] = v21;
      v60(v13, (uint64_t)v15, v2);
      v27 = v56;
      if (v26 != 1)
        goto LABEL_19;
      v58 = v20;
      v28 = v15;
      v29 = sub_21442390C();
      v31 = v30;
      v32 = v3;
      v33 = *(void (**)(char *, uint64_t))(v3 + 8);
      v33(v13, v2);
      if ((v31 & 1) != 0)
      {
        v15 = v28;
        goto LABEL_21;
      }
      v15 = v28;
      v60(v27, (uint64_t)v28, v2);
      if (v29 != 1)
        goto LABEL_22;
      v34 = sub_214423918();
      v36 = v35;
      v33(v27, v2);
      if ((v36 & 1) != 0)
      {
        v49 = v55;
        v15 = v28;
        goto LABEL_23;
      }
      v37 = v57;
      v15 = v28;
      v60(v57, (uint64_t)v28, v2);
      if (v34)
      {
        v50 = v37;
        v49 = v55;
        goto LABEL_24;
      }
      v38 = sub_214423948();
      v39 = v37;
      v40 = v38;
      v42 = v41;
      v33(v39, v2);
      if ((v42 & 1) != 0)
      {
        v49 = v55;
        v15 = v28;
        goto LABEL_25;
      }
      v43 = v55;
      v15 = v28;
      v60(v55, (uint64_t)v28, v2);
      if (v40)
      {
        v49 = v43;
        goto LABEL_26;
      }
      v44 = sub_214423954();
      v46 = v45;
      v33(v43, v2);
      if ((v46 & 1) != 0)
      {
        v15 = v28;
        goto LABEL_27;
      }
      v15 = v28;
      v33(v28, v2);
      v23 = v59;
      if (v44)
        goto LABEL_28;
      v20 = v58 + v53;
      --v19;
      v3 = v32;
      v18 = v54;
      if (!v19)
      {
        v47 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v52[0];
        goto LABEL_17;
      }
    }
    v60(v13, (uint64_t)v15, v2);
    v27 = v56;
LABEL_19:
    v33 = *(void (**)(char *, uint64_t))(v3 + 8);
    v33(v13, v2);
LABEL_21:
    v60(v27, (uint64_t)v15, v2);
LABEL_22:
    v48 = v27;
    v49 = v55;
    v33(v48, v2);
LABEL_23:
    v50 = v57;
    v60(v57, (uint64_t)v15, v2);
LABEL_24:
    v33(v50, v2);
LABEL_25:
    v60(v49, (uint64_t)v15, v2);
LABEL_26:
    v33(v49, v2);
LABEL_27:
    v33(v15, v2);
    v23 = 0;
    goto LABEL_28;
  }
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  swift_bridgeObjectRetain();
LABEL_17:
  v23 = 1;
  v47(v18, 1, 1, v2);
LABEL_28:
  swift_bridgeObjectRelease();
  return v23;
}

BOOL sub_2143ECEE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char v42;
  char v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v46[3];
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  void (*v54)(char *, uint64_t, uint64_t);

  v2 = v1;
  v4 = sub_214423960();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v46 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v50 = (char *)v46 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v46 - v14;
  v16 = sub_2141D8BF8(&qword_253F10FD8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  v46[1] = a1;
  v46[2] = v2;
  if (v19)
  {
    v20 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v48 = *(_QWORD *)(v5 + 72);
    v49 = v8;
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v21 = v20;
    swift_bridgeObjectRetain();
    while (1)
    {
      v52 = v19;
      v54(v18, v21, v4);
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v22(v18, 0, 1, v4);
      v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v18, 1, v4);
      v53 = v23 == 1;
      if (v23 == 1)
        goto LABEL_24;
      v51 = v21;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v18, v4);
      v24 = sub_21442390C();
      if ((v25 & 1) != 0)
        break;
      v26 = v24;
      v27 = v50;
      v54(v50, (uint64_t)v15, v4);
      if (v26 != 1)
        goto LABEL_17;
      v47 = v22;
      v28 = v18;
      v29 = sub_214423918();
      v31 = v30;
      v32 = v5;
      v33 = *(void (**)(char *, uint64_t))(v5 + 8);
      v33(v27, v4);
      if ((v31 & 1) != 0)
        goto LABEL_18;
      v54(v11, (uint64_t)v15, v4);
      if (v29)
        goto LABEL_19;
      v34 = v11;
      v35 = v15;
      v36 = sub_214423948();
      v38 = v37;
      v39 = v34;
      v33(v34, v4);
      if ((v38 & 1) != 0)
      {
        v40 = v49;
        v15 = v35;
        goto LABEL_21;
      }
      v40 = v49;
      v54(v49, (uint64_t)v35, v4);
      if (v36)
      {
        v15 = v35;
        goto LABEL_22;
      }
      v41 = sub_214423954();
      v43 = v42;
      v33(v40, v4);
      if ((v43 & 1) != 0)
      {
        v15 = v35;
        goto LABEL_23;
      }
      v33(v35, v4);
      if (v41)
        goto LABEL_24;
      v21 = v51 + v48;
      v19 = v52 - 1;
      v15 = v35;
      v11 = v39;
      v5 = v32;
      v18 = v28;
      if (v52 == 1)
      {
        v44 = v47;
        goto LABEL_15;
      }
    }
    v27 = v50;
    v54(v50, (uint64_t)v15, v4);
LABEL_17:
    v33 = *(void (**)(char *, uint64_t))(v5 + 8);
    v33(v27, v4);
LABEL_18:
    v54(v11, (uint64_t)v15, v4);
LABEL_19:
    v40 = v49;
    v33(v11, v4);
LABEL_21:
    v54(v40, (uint64_t)v15, v4);
LABEL_22:
    v33(v40, v4);
LABEL_23:
    v33(v15, v4);
    v53 = 0;
    goto LABEL_24;
  }
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  swift_bridgeObjectRetain();
LABEL_15:
  v53 = 1;
  v44(v18, 1, 1, v4);
LABEL_24:
  swift_bridgeObjectRelease();
  return v53;
}

BOOL sub_2143ED27C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);

  v2 = sub_214423960();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v35 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v35 - v10;
  v12 = sub_2141D8BF8(&qword_253F10FD8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v35 = a1;
  if (v15)
  {
    v38 = v6;
    v16 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v37 = *(_QWORD *)(v3 + 72);
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v41 = v15;
      v42(v14, v16, v2);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v17(v14, 0, 1, v2);
      v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2);
      v39 = v18 == 1;
      if (v18 == 1)
        goto LABEL_19;
      v40 = v16;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v14, v2);
      v19 = sub_214423918();
      if ((v20 & 1) != 0)
        break;
      v21 = v19;
      v42(v9, (uint64_t)v11, v2);
      if (v21)
        goto LABEL_15;
      v36 = v17;
      v22 = v14;
      v23 = v11;
      v24 = sub_214423948();
      v26 = v25;
      v27 = v3;
      v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v9, v2);
      if ((v26 & 1) != 0)
        goto LABEL_16;
      v29 = v38;
      v42(v38, (uint64_t)v11, v2);
      if (v24)
        goto LABEL_17;
      v30 = sub_214423954();
      v32 = v31;
      v28(v29, v2);
      if ((v32 & 1) != 0)
      {
        v11 = v23;
        goto LABEL_18;
      }
      v11 = v23;
      v28(v23, v2);
      if (v30)
        goto LABEL_19;
      v16 = v40 + v37;
      v15 = v41 - 1;
      v3 = v27;
      v14 = v22;
      if (v41 == 1)
      {
        v33 = v36;
        goto LABEL_13;
      }
    }
    v42(v9, (uint64_t)v11, v2);
LABEL_15:
    v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v9, v2);
LABEL_16:
    v29 = v38;
    v42(v38, (uint64_t)v11, v2);
LABEL_17:
    v28(v29, v2);
LABEL_18:
    v28(v11, v2);
    v39 = 0;
    goto LABEL_19;
  }
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  swift_bridgeObjectRetain();
LABEL_13:
  v39 = 1;
  v33(v14, 1, 1, v2);
LABEL_19:
  swift_bridgeObjectRelease();
  return v39;
}

BOOL sub_2143ED584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;
  void (*v29)(char *, uint64_t);
  _QWORD v31[2];
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;

  v2 = sub_214423960();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)v31 - v7;
  v8 = sub_2141D8BF8(&qword_253F10FD8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v31[1] = a1;
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v33 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    v14 = v34;
    while (1)
    {
      v37 = v12;
      v13(v10, v12, v2);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v15(v10, 0, 1, v2);
      v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2);
      v35 = v16 == 1;
      if (v16 == 1)
        goto LABEL_16;
      v36 = v11;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v14, v10, v2);
      v17 = sub_214423948();
      if ((v18 & 1) != 0)
        break;
      v19 = v17;
      v13(v6, (uint64_t)v14, v2);
      if (v19)
        goto LABEL_13;
      v20 = v13;
      v21 = v10;
      v22 = sub_214423954();
      v24 = v23;
      v25 = v3;
      v26 = *(void (**)(char *, uint64_t))(v3 + 8);
      v26(v6, v2);
      if ((v24 & 1) != 0)
      {
        v26(v34, v2);
        goto LABEL_15;
      }
      v32 = v15;
      v14 = v34;
      v26(v34, v2);
      if (v22)
        goto LABEL_16;
      v12 = v37 + v33;
      v11 = v36 - 1;
      v3 = v25;
      v10 = v21;
      v13 = v20;
      if (v36 == 1)
      {
        v27 = v32;
        goto LABEL_11;
      }
    }
    v13(v6, (uint64_t)v14, v2);
LABEL_13:
    v28 = v14;
    v29 = *(void (**)(char *, uint64_t))(v3 + 8);
    v29(v6, v2);
    v29(v28, v2);
LABEL_15:
    v35 = 0;
    goto LABEL_16;
  }
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  swift_bridgeObjectRetain();
LABEL_11:
  v35 = 1;
  v27(v10, 1, 1, v2);
LABEL_16:
  swift_bridgeObjectRelease();
  return v35;
}

BOOL sub_2143ED818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  int v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);

  v2 = sub_214423960();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2141D8BF8(&qword_253F10FD8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v18[1] = a1;
  if (v9)
  {
    v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v19 = *(_QWORD *)(v3 + 72);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v20(v8, v10, v2);
      v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v11(v8, 0, 1, v2);
      v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
      v13 = v12 == 1;
      if (v12 == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      v14 = sub_214423954();
      if ((v15 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v13 = 0;
        break;
      }
      v16 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if (v16)
        break;
      v10 += v19;
      if (!--v9)
        goto LABEL_9;
    }
  }
  else
  {
    v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_9:
    v13 = 1;
    v11(v8, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_2143ED9E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v10 = sub_214423960();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2141D8BF8(&qword_253F10FD8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a4 >> 1;
  if (v17 == a3)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    swift_unknownObjectRetain();
    v31 = (char *)MEMORY[0x24BEE4AF8];
    v18(v16, 1, 1, v10);
LABEL_15:
    swift_unknownObjectRelease();
    return (uint64_t)v31;
  }
  else
  {
    v29 = a2;
    v27[1] = a1;
    result = swift_unknownObjectRetain();
    v31 = (char *)MEMORY[0x24BEE4AF8];
    v28 = a5;
    while (a3 < v17)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v29 + *(_QWORD *)(v11 + 72) * a3, v10);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v21(v16, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
        goto LABEL_15;
      v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
      v30 = a5(v22);
      v24 = v23;
      result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v24 & 1) == 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224894(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
          v31 = (char *)result;
        }
        v26 = *((_QWORD *)v31 + 2);
        v25 = *((_QWORD *)v31 + 3);
        if (v26 >= v25 >> 1)
        {
          result = (uint64_t)sub_214224894((char *)(v25 > 1), v26 + 1, 1, v31);
          v31 = (char *)result;
        }
        v20 = v31;
        *((_QWORD *)v31 + 2) = v26 + 1;
        *(_QWORD *)&v20[8 * v26 + 32] = v30;
        a5 = v28;
      }
      if (v17 == ++a3)
      {
        v21(v16, 1, 1, v10);
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  return result;
}

_QWORD *sub_2143EDC40(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = result[3];
  v23 = result[4] >> 1;
  if (!__OFSUB__(v23, v1))
  {
    v22 = result[3];
    v2 = *result;
    v21 = result[2];
    v3 = *(_QWORD *)(*result + 16);
    if (v23 - v1 >= v3)
      v4 = *(_QWORD *)(v2 + 16);
    else
      v4 = v23 - v1;
    v24 = MEMORY[0x24BEE4AF8];
    result = sub_2141D3AA0(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      goto LABEL_36;
    if (v4)
    {
      v5 = (double *)(v2 + 32);
      v6 = v22;
      if (v22 <= v23)
        v7 = v23;
      else
        v7 = v22;
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v8 = v4;
      v9 = v22;
      v10 = v21;
      while (v3)
      {
        if (v23 == v9)
          goto LABEL_31;
        if (v7 == v9)
          goto LABEL_32;
        v11 = *(double *)(v10 + 8 * v9);
        v12 = *v5;
        v14 = *(_QWORD *)(v24 + 16);
        v13 = *(_QWORD *)(v24 + 24);
        if (v14 >= v13 >> 1)
        {
          result = sub_2141D3AA0((char *)(v13 > 1), v14 + 1, 1);
          v10 = v21;
          v6 = v22;
        }
        *(_QWORD *)(v24 + 16) = v14 + 1;
        *(double *)(v24 + 8 * v14 + 32) = vabdd_f64(v11, v12);
        ++v5;
        ++v9;
        if (!--v8)
          goto LABEL_19;
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v10 = v21;
      v6 = v22;
      v9 = v22;
LABEL_19:
      v15 = *(_QWORD *)(v2 + 16);
      if (v4 == v15)
      {
LABEL_20:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return (_QWORD *)v24;
      }
      v16 = v9;
      while (v4 < v15)
      {
        if (v23 == v16)
          goto LABEL_20;
        if (v9 < v6 || v16 >= v23)
          goto LABEL_34;
        v17 = *(double *)(v2 + 32 + 8 * v4);
        v18 = *(double *)(v10 + 8 * v16);
        v20 = *(_QWORD *)(v24 + 16);
        v19 = *(_QWORD *)(v24 + 24);
        if (v20 >= v19 >> 1)
        {
          result = sub_2141D3AA0((char *)(v19 > 1), v20 + 1, 1);
          v10 = v21;
          v6 = v22;
        }
        ++v4;
        *(_QWORD *)(v24 + 16) = v20 + 1;
        *(double *)(v24 + 8 * v20 + 32) = vabdd_f64(v18, v17);
        v15 = *(_QWORD *)(v2 + 16);
        ++v16;
        if (v4 == v15)
          goto LABEL_20;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

int64_t sub_2143EDE94(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v6[-1], (int8x16_t)v5);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), *(int8x16_t *)v6, (int8x16_t)v8);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v8, v5), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v10, v9.i64[0]), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v14 < v2)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_2143EDF48(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

void sub_2143EDF8C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[6];

  v54 = a2;
  v53 = sub_2141D8BF8(&qword_253F10748);
  MEMORY[0x24BDAC7A8](v53);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2144239C0();
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_21442399C();
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_214423B94();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2141D8BF8(qword_253F13A80);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v48 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v52 = (char *)&v45 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v45 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  sub_2142B585C();
  sub_21442396C();
  v21 = swift_bridgeObjectRetain();
  v22 = sub_214231334(v21);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v22 + 16);
  v57[0] = v22;
  v57[1] = v22;
  v57[2] = v22 + 32;
  v57[3] = v23 != 0;
  v57[4] = (2 * v23) | 1;
  swift_bridgeObjectRetain();
  v24 = (double *)sub_2143EDC40(v57);
  swift_bridgeObjectRelease_n();
  v25 = *((_QWORD *)v24 + 2);
  if (v25)
  {
    v26 = v24[4];
    v27 = v25 - 1;
    if (v27)
    {
      v28 = v24 + 5;
      do
      {
        v29 = *v28++;
        v30 = v29;
        if (v29 < v26)
          v26 = v30;
        --v27;
      }
      while (v27);
    }
  }
  else
  {
    v26 = INFINITY;
  }
  swift_bridgeObjectRelease();
  v31 = v14;
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
    goto LABEL_32;
  if (v26 < 0.000001)
  {
    sub_214423990();
    v32 = v48;
    MEMORY[0x2199CB294](v8, v13);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v47);
    v33 = v49;
    sub_2144239A8();
    v34 = v52;
LABEL_30:
    MEMORY[0x2199CB2A0](v33, v13);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v33, v51);
    v41 = *(void (**)(char *, uint64_t))(v31 + 8);
    v41(v32, v13);
    v41(v20, v13);
    goto LABEL_31;
  }
  v34 = v52;
  if (v26 >= 1.0)
  {
    if (v26 >= 1000000.0)
    {
      sub_214423990();
      v32 = v48;
      MEMORY[0x2199CB294](v8, v13);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v47);
      v33 = v49;
      sub_2144239A8();
      goto LABEL_30;
    }
    v40 = v49;
    sub_2144239A8();
LABEL_28:
    MEMORY[0x2199CB2A0](v40, v13);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v40, v51);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
LABEL_31:
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v20, v34, v13);
LABEL_32:
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v4, v20, v13);
    sub_214423B7C();
    v42 = v53;
    sub_21442396C();
    *(_QWORD *)&v4[*(int *)(v42 + 80)] = 0;
    v43 = v54;
    *(_QWORD *)(v54 + 24) = v42;
    *(_QWORD *)(v43 + 32) = sub_2141D9054(&qword_253F10740, &qword_253F10748, (uint64_t)&unk_214432D00);
    v44 = sub_2141D8DD8((uint64_t *)v43);
    sub_2143F14A0((uint64_t)v4, (uint64_t)v44);
    *(_BYTE *)(v43 + 40) = 0;
    sub_2143F14E8((uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v13);
    return;
  }
  v35 = floor(1.0 - log10(v26) + -0.000000001);
  v36 = __exp10(-v35);
  if (vabdd_f64(v26 / v36, rint(v26 / v36)) <= 0.01)
    v37 = v35;
  else
    v37 = v35 + 1.0;
  if (v37 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v37 >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = v37 + 2.0;
  if ((*(_QWORD *)&v37 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (COERCE_UNSIGNED_INT64(v37 + 2.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_35;
  }
  if (v38 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v38 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((uint64_t)v38 >= (uint64_t)v37)
  {
    v55 = (uint64_t)v37;
    v56 = (uint64_t)v38;
    sub_2141D8BF8(&qword_254D6E0D0);
    sub_2141D9054(qword_254D6E130, &qword_254D6E0D0, MEMORY[0x24BEE08F8]);
    v40 = v49;
    sub_2144239B4();
    goto LABEL_28;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_2143EE560(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t result;
  char *v6[2];

  v2 = *(_QWORD *)(sub_214423B70() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_2143501C0(v3);
  v4 = (char *)v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_2143F0250(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_2143EE5E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  char v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  BOOL v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  BOOL v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;

  v139 = a2;
  v143 = a4;
  v112 = sub_214423B10();
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8](v112);
  v110 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_214423AF8();
  v114 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v113 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_214423AA4();
  v117 = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8](v118);
  v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_214423AB0();
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v119 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_214423A80();
  v124 = *(_QWORD *)(v125 - 8);
  MEMORY[0x24BDAC7A8](v125);
  v123 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_214423AE0();
  v126 = *(_QWORD *)(v128 - 8);
  MEMORY[0x24BDAC7A8](v128);
  v127 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_214423AC8();
  v131 = *(_QWORD *)(v12 - 8);
  v132 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v130 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2144239D8();
  MEMORY[0x24BDAC7A8](v14);
  v138 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_214423C6C();
  MEMORY[0x24BDAC7A8](v16);
  v137 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_214423C54();
  v135 = *(_QWORD *)(v18 - 8);
  v136 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_214423B94();
  v133 = *(_QWORD *)(v21 - 8);
  v134 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_2141D8BF8(&qword_253F12180);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_2141D8BF8(&qword_253F12188);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v110 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_214423B34();
  v141 = *(_QWORD *)(v30 - 8);
  v142 = v30;
  v31 = MEMORY[0x24BDAC7A8](v30);
  v122 = (char *)&v110 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v129 = (char *)&v110 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v140 = (char *)&v110 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v110 - v37;
  v144 = a1;
  swift_bridgeObjectRetain();
  v39 = sub_2143EE560(&v144);
  v40 = v144;
  MEMORY[0x24BDAC7A8](v39);
  *(&v110 - 2) = a3;
  v41 = sub_214234620((void (*)(uint64_t))sub_2143F1528, (uint64_t)(&v110 - 4), (uint64_t)v40);
  swift_release();
  v42 = sub_214423A08();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v29, 1, 1, v42);
  v43 = sub_2144239FC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v26, 1, 1, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v23, v139, v134);
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v20, a3, v136);
  sub_214423C60();
  sub_2144239CC();
  v44 = v41;
  sub_214423A2C();
  if ((sub_2143ECA9C(v41) & 1) == 0)
  {
    v50 = 1;
    v51 = sub_21431DCE8(1, v41);
    v53 = v52;
    v55 = v54;
    v57 = v56;
    swift_bridgeObjectRetain();
    v58 = sub_2143ED9E4(v51, v53, v55, v57, (uint64_t (*)(_QWORD))MEMORY[0x24BDCBD18]);
    v59 = *(_QWORD *)(v58 + 16);
    v60 = v140;
    if (v59)
    {
      v61 = (uint64_t *)(v58 + 32);
      v62 = *(_QWORD *)(v58 + 32);
      v63 = v59 - 1;
      v64 = v129;
      do
      {
        v66 = *v61++;
        v65 = v66;
        v67 = v63-- != 0;
        v68 = v67;
        v50 = v65 == v62;
      }
      while (v65 == v62 && (v68 & 1) != 0);
    }
    else
    {
      v64 = v129;
    }
    swift_bridgeObjectRelease();
    if (sub_2143ECEE0(v44))
    {
      swift_bridgeObjectRelease();
      if (v50)
      {
        v69 = v127;
        sub_214423AD4();
        sub_214423A50();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v126 + 8))(v69, v128);
        v48 = v141;
        v47 = v142;
        v49 = *(void (**)(char *, uint64_t))(v141 + 8);
        v49(v38, v142);
LABEL_50:
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v38, v60, v47);
        goto LABEL_51;
      }
      v72 = v130;
      sub_214423ABC();
      sub_214423A44();
      (*(void (**)(char *, uint64_t))(v131 + 8))(v72, v132);
      v73 = v127;
      sub_214423AD4();
      sub_214423A50();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v126 + 8))(v73, v128);
      goto LABEL_19;
    }
    if (sub_2143ED27C(v44))
    {
      swift_bridgeObjectRelease();
      if (v50)
      {
        v70 = v127;
        sub_214423AD4();
        sub_214423A50();
        (*(void (**)(char *, uint64_t))(v126 + 8))(v70, v128);
        v71 = v123;
        sub_214423A74();
        sub_214423A20();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v71, v125);
LABEL_19:
        v48 = v141;
        v47 = v142;
        v49 = *(void (**)(char *, uint64_t))(v141 + 8);
        v49(v64, v142);
LABEL_49:
        v49(v38, v47);
        goto LABEL_50;
      }
      v83 = v130;
      sub_214423ABC();
      v84 = v122;
      sub_214423A44();
      (*(void (**)(char *, uint64_t))(v131 + 8))(v83, v132);
      v85 = v127;
      sub_214423AD4();
      sub_214423A50();
      (*(void (**)(char *, uint64_t))(v126 + 8))(v85, v128);
      v48 = v141;
      v47 = v142;
      v49 = *(void (**)(char *, uint64_t))(v141 + 8);
      v49(v84, v142);
      v86 = v123;
      sub_214423A74();
      sub_214423A20();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v124 + 8))(v86, v125);
LABEL_48:
      v49(v64, v47);
      goto LABEL_49;
    }
    v139 = v44;
    v74 = sub_2143ED9E4(v51, v53, v55, v57, (uint64_t (*)(_QWORD))MEMORY[0x24BDCBD38]);
    v75 = *(_QWORD *)(v74 + 16);
    if (v75)
    {
      v76 = (uint64_t *)(v74 + 32);
      v77 = *(_QWORD *)(v74 + 32);
      v78 = v75 - 1;
      do
      {
        v80 = *v76++;
        v79 = v80;
        v67 = v78-- != 0;
        v81 = v67;
        v82 = v79 == v77;
      }
      while (v79 == v77 && (v81 & 1) != 0);
    }
    else
    {
      v82 = 1;
    }
    swift_bridgeObjectRelease();
    v87 = sub_2143ED9E4(v51, v53, v55, v57, (uint64_t (*)(_QWORD))MEMORY[0x24BDCBCC8]);
    v88 = *(_QWORD *)(v87 + 16);
    if (v88)
    {
      v89 = 0;
      v48 = v141;
      v47 = v142;
      while (*(_QWORD *)(v87 + 8 * v89 + 32) == *(_QWORD *)(v87 + 32))
      {
        if (v88 == ++v89)
        {
          swift_bridgeObjectRelease();
          if (v50)
            goto LABEL_37;
          goto LABEL_41;
        }
      }
      swift_bridgeObjectRelease();
      if (!v50)
        goto LABEL_41;
    }
    else
    {
      swift_bridgeObjectRelease();
      v48 = v141;
      v47 = v142;
      if (!v50)
      {
LABEL_41:
        v93 = v130;
        sub_214423ABC();
        v94 = v122;
        sub_214423A44();
        (*(void (**)(char *, uint64_t))(v131 + 8))(v93, v132);
        v95 = v127;
        sub_214423AD4();
        sub_214423A50();
        (*(void (**)(char *, uint64_t))(v126 + 8))(v95, v128);
        v92 = *(void (**)(char *, uint64_t))(v48 + 8);
        v92(v94, v47);
        v96 = v123;
        sub_214423A74();
        sub_214423A20();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v96, v125);
        v92(v64, v47);
        goto LABEL_42;
      }
LABEL_37:
      if (v82)
        goto LABEL_43;
    }
    v90 = v127;
    sub_214423AD4();
    sub_214423A50();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v90, v128);
    v91 = v123;
    sub_214423A74();
    sub_214423A20();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v91, v125);
    v92 = *(void (**)(char *, uint64_t))(v48 + 8);
    v92(v64, v47);
LABEL_42:
    v92(v38, v47);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v38, v60, v47);
LABEL_43:
    v97 = v139;
    if (sub_2143ED584(v139))
    {
      swift_bridgeObjectRelease();
      v98 = v116;
      sub_214423A98();
      v99 = v119;
      sub_214423A8C();
      (*(void (**)(char *, uint64_t))(v117 + 8))(v98, v118);
      sub_214423A38();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v99, v121);
      v49 = *(void (**)(char *, uint64_t))(v48 + 8);
      v49(v38, v47);
      goto LABEL_50;
    }
    v100 = sub_2143ED818(v97);
    swift_bridgeObjectRelease();
    v101 = v116;
    sub_214423A98();
    v102 = v119;
    sub_214423A8C();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v101, v118);
    if (v100)
    {
      sub_214423A38();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v102, v121);
      v103 = v113;
      sub_214423AEC();
      sub_214423B1C();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v103, v115);
      v49 = *(void (**)(char *, uint64_t))(v48 + 8);
      v49(v64, v47);
      goto LABEL_49;
    }
    v104 = v122;
    sub_214423A38();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v102, v121);
    v105 = v113;
    sub_214423AEC();
    sub_214423B1C();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v105, v115);
    v49 = *(void (**)(char *, uint64_t))(v48 + 8);
    v49(v104, v47);
    v106 = v110;
    sub_214423AEC();
    sub_214423B28();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v106, v112);
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  v45 = v130;
  sub_214423ABC();
  v46 = v140;
  sub_214423A44();
  (*(void (**)(char *, uint64_t))(v131 + 8))(v45, v132);
  v48 = v141;
  v47 = v142;
  v49 = *(void (**)(char *, uint64_t))(v141 + 8);
  v49(v38, v142);
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v38, v46, v47);
LABEL_51:
  v107 = v143;
  *(_QWORD *)(v143 + 24) = v47;
  *(_QWORD *)(v107 + 32) = sub_2141FED10((unint64_t *)&qword_253F12190, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE290]);
  v108 = sub_2141D8DD8((uint64_t *)v107);
  (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(v108, v38, v47);
  *(_BYTE *)(v107 + 40) = 1;
  return ((uint64_t (*)(char *, uint64_t))v49)(v38, v47);
}

uint64_t sub_2143EF2FC()
{
  swift_getAssociatedTypeWitness();
  sub_214424ED8();
  return sub_2144238C4();
}

uint64_t sub_2143EF3CC()
{
  sub_214424DC4();
  sub_214424DC4();
  swift_getAssociatedTypeWitness();
  return sub_214424DC4();
}

uint64_t sub_2143EF468()
{
  if ((sub_214424ED8() & 1) != 0)
    type metadata accessor for SpecialCaseFormatStyle();
  return 0;
}

BOOL sub_2143EF56C(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_2143EF57C()
{
  return sub_214425880();
}

uint64_t sub_2143EF5A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v2 || (sub_214425790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616963657073 && a2 == 0xE700000000000000 || (sub_214425790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x566C616963657073 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_214425790();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_2143EF6FC()
{
  sub_214425874();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_2143EF740(char a1)
{
  if (!a1)
    return 1702060386;
  if (a1 == 1)
    return 0x6C616963657073;
  return 0x566C616963657073;
}

BOOL sub_2143EF798(char *a1, char *a2)
{
  return sub_2143EF56C(*a1, *a2);
}

uint64_t sub_2143EF7D8()
{
  return sub_2143EF6FC();
}

uint64_t sub_2143EF7F0()
{
  return sub_2143EF57C();
}

uint64_t sub_2143EF824()
{
  sub_214425874();
  sub_2143EF57C();
  return sub_2144258B0();
}

uint64_t sub_2143EF878()
{
  char *v0;

  return sub_2143EF740(*v0);
}

uint64_t sub_2143EF890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2143EF5A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2143EF8D4()
{
  return 0;
}

uint64_t sub_2143EF8E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2143F2398();
  *a1 = result;
  return result;
}

uint64_t sub_2143EF918(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_214432E30, a1);
  return sub_2144258EC();
}

uint64_t sub_2143EF94C(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_214432E30, a1);
  return sub_2144258F8();
}

void sub_2143EF980()
{
  type metadata accessor for SpecialCaseFormatStyle.CodingKeys();
}

uint64_t sub_2143EF9E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x2199CD934](&unk_214432E30, a1);
  v3 = sub_214425724();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  sub_2141E88D0(v1, v1[3]);
  sub_2144258D4();
  *(_BYTE *)(v2 - 136) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  sub_214425718();
  if (v7)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(_QWORD *)(v2 - 72) = v4;
  *(_BYTE *)(v2 - 136) = 1;
  sub_214425718();
  *(_BYTE *)(v2 - 136) = 2;
  swift_getAssociatedTypeWitness();
  sub_214425718();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v6, v3);
}

uint64_t sub_2143EFB84()
{
  sub_214425874();
  sub_2143EF3CC();
  return sub_2144258B0();
}

void sub_2143EFBC8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v27 = a1;
  v21[3] = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21[2] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21[4] = (char *)v21 - v16;
  v23 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v25 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v26 = (char *)v21 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a2;
  v29 = a3;
  v30 = a4;
  v31 = a5;
  v32 = a6;
  v33 = a7;
  v34 = a8;
  type metadata accessor for SpecialCaseFormatStyle.CodingKeys();
}

void sub_2143EFCF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 - 160) = MEMORY[0x2199CD934](&unk_214432E30, a1);
  v9 = sub_21442570C();
  *(_QWORD *)(v8 - 168) = v9;
  *(_QWORD *)(v8 - 232) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v8 - 192) = v3;
  *(_QWORD *)(v8 - 184) = v1;
  *(_QWORD *)(v8 - 144) = v1;
  *(_QWORD *)(v8 - 136) = v6;
  *(_QWORD *)(v8 - 208) = v2;
  *(_QWORD *)(v8 - 200) = v6;
  *(_QWORD *)(v8 - 128) = v3;
  *(_QWORD *)(v8 - 120) = v2;
  *(_QWORD *)(v8 - 264) = v7;
  *(_QWORD *)(v8 - 112) = v7;
  *(_QWORD *)(v8 - 104) = v4;
  *(_QWORD *)(v8 - 96) = v5;
  type metadata accessor for SpecialCaseFormatStyle();
}

uint64_t sub_2143EFD78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v20 - v5;
  v7 = *(_QWORD **)(v2 - 152);
  sub_2141E88D0(v7, v7[3]);
  *(_QWORD *)(v2 - 176) = v1;
  v8 = *(_QWORD *)(v2 - 72);
  sub_2144258C8();
  if (v8)
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  *(_QWORD *)(v2 - 296) = v4;
  v10 = *(_QWORD *)(v2 - 232);
  v9 = *(_QWORD *)(v2 - 224);
  *(_QWORD *)(v2 - 72) = v6;
  *(_QWORD *)(v2 - 160) = a1;
  v11 = *(_QWORD *)(v2 - 200);
  *(_BYTE *)(v2 - 144) = 0;
  v12 = *(_QWORD *)(v2 - 184);
  v13 = *(_QWORD *)(v2 - 216);
  sub_214425700();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 240) + 32))(*(_QWORD *)(v2 - 72), v13, v12);
  *(_BYTE *)(v2 - 144) = 1;
  sub_214425700();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 248) + 32))(*(_QWORD *)(v2 - 72) + *(int *)(*(_QWORD *)(v2 - 160) + 76), v9, v11);
  *(_BYTE *)(v2 - 144) = 2;
  v14 = *(_QWORD *)(v2 - 272);
  v15 = *(_QWORD *)(v2 - 256);
  sub_214425700();
  (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v2 - 176), *(_QWORD *)(v2 - 168));
  v16 = *(_QWORD *)(v2 - 160);
  v17 = *(_QWORD *)(v2 - 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 32))(v17 + *(int *)(v16 + 80), v14, v15);
  v18 = *(_QWORD *)(v2 - 296);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v18 + 16))(*(_QWORD *)(v2 - 280), v17, v16);
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v16);
}

void sub_2143F0000(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_2143EFBC8(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3);
}

void sub_2143F0028()
{
  sub_2143EF980();
}

uint64_t sub_2143F0044()
{
  sub_214425874();
  sub_2143EF3CC();
  return sub_2144258B0();
}

uint64_t sub_2143F0084()
{
  return sub_2143EF468() & 1;
}

uint64_t sub_2143F00BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);

  sub_2141D8BF8(&qword_253F122A0);
  v0 = sub_214423C48();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21442F360;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x24BDCF240], v0);
  v6(v5 + v2, *MEMORY[0x24BDCF250], v0);
  v6(v5 + 2 * v2, *MEMORY[0x24BDCF220], v0);
  v6(v5 + 3 * v2, *MEMORY[0x24BDCF230], v0);
  v6(v5 + 4 * v2, *MEMORY[0x24BDCF258], v0);
  v6(v5 + 5 * v2, *MEMORY[0x24BDCF260], v0);
  sub_2143F1544(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_214423BDC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143F0250(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char **v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  char *v136;
  char *v137;
  uint64_t v138;
  char **v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v3 = sub_214423B70();
  v143 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v129 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v140 = (char *)&v125 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v137 = (char *)&v125 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v136 = (char *)&v125 - v10;
  v11 = (uint64_t)a1[1];
  result = sub_214425730();
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_142;
    if (v11)
      return sub_2143F0C7C(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_141;
  v139 = a1;
  v126 = result;
  v132 = v1;
  if (v11 > 1)
  {
    v14 = v13 >> 1;
    result = sub_21442504C();
    *(_QWORD *)(result + 16) = v14;
    v15 = *(unsigned __int8 *)(v143 + 80);
    v125 = result;
    v131 = result + ((v15 + 32) & ~v15);
LABEL_12:
    v17 = 0;
    v16 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v19 = v17;
      v20 = v17 + 1;
      v130 = v17;
      if (v17 + 1 >= v11)
      {
        v31 = v17 + 1;
        v40 = v132;
        goto LABEL_58;
      }
      v21 = *v139;
      v141 = v11;
      v22 = v143;
      v23 = *(_QWORD *)(v143 + 72);
      v24 = *(void (**)(_QWORD, _QWORD, _QWORD))(v143 + 16);
      v25 = v136;
      v24(v136, &v21[v23 * v20], v3);
      v26 = &v21[v23 * v19];
      v27 = v137;
      v24(v137, v26, v3);
      v138 = sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      LODWORD(v135) = sub_214424E6C();
      v28 = *(void (**)(_QWORD, _QWORD))(v22 + 8);
      v29 = v27;
      v19 = v130;
      v28(v29, v3);
      result = ((uint64_t (*)(char *, uint64_t))v28)(v25, v3);
      v30 = v21;
      v31 = v19 + 2;
      v133 = v30;
      v142 = v23;
      if (v19 + 2 >= v141)
      {
        v40 = v132;
        v39 = v141;
        v38 = v23;
        if ((v135 & 1) == 0)
          goto LABEL_38;
      }
      else
      {
        v127 = v16;
        v134 = v23 * v20;
        v32 = v30;
        v33 = v23 * v31;
        do
        {
          v34 = v31;
          v35 = v136;
          v24(v136, &v32[v33], v3);
          v36 = v137;
          v24(v137, &v32[v134], v3);
          v37 = sub_214424E6C();
          v28(v36, v3);
          result = ((uint64_t (*)(char *, uint64_t))v28)(v35, v3);
          if (((v135 ^ v37) & 1) != 0)
          {
            v40 = v132;
            v16 = v127;
            v31 = v34;
            v19 = v130;
            v39 = v141;
            v38 = v142;
            if ((v135 & 1) == 0)
              goto LABEL_38;
            goto LABEL_26;
          }
          v31 = v34 + 1;
          v38 = v142;
          v32 += v142;
        }
        while (v141 != v34 + 1);
        v39 = v141;
        v31 = v141;
        v40 = v132;
        v16 = v127;
        v19 = v130;
        if ((v135 & 1) == 0)
          goto LABEL_38;
      }
LABEL_26:
      if (v31 < v19)
        goto LABEL_143;
      if (v19 >= v31)
      {
LABEL_38:
        v46 = v139;
        if (v31 >= v39)
          goto LABEL_58;
      }
      else
      {
        v127 = v16;
        v41 = 0;
        v42 = v38 * (v31 - 1);
        v43 = v31 * v38;
        v44 = v19;
        v45 = v19 * v38;
        v46 = v139;
        v138 = v31;
        do
        {
          if (v44 != v31 + v41 - 1)
          {
            if (!v133)
              goto LABEL_148;
            v47 = v40;
            v48 = &v133[v45];
            v49 = &v133[v42];
            v135 = *(char **)(v143 + 32);
            ((void (*)(char *, char *, uint64_t))v135)(v129, &v133[v45], v3);
            if (v45 < v42 || v48 >= &v133[v43])
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v45 != v42)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            result = ((uint64_t (*)(char *, char *, uint64_t))v135)(v49, v129, v3);
            v40 = v47;
            v31 = v138;
            v46 = v139;
            v38 = v142;
          }
          ++v44;
          --v41;
          v42 -= v38;
          v43 -= v38;
          v45 += v38;
        }
        while (v44 < v31 + v41);
        v16 = v127;
        v19 = v130;
        v39 = v141;
        if (v31 >= v141)
          goto LABEL_58;
      }
      if (__OFSUB__(v31, v19))
        goto LABEL_140;
      if (v31 - v19 < v126)
      {
        if (__OFADD__(v19, v126))
          goto LABEL_144;
        if (v19 + v126 >= v39)
          v50 = v39;
        else
          v50 = v19 + v126;
        if (v50 < v19)
        {
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          return result;
        }
        if (v31 != v50)
        {
          v127 = v16;
          v128 = v50;
          v51 = *(_QWORD *)(v143 + 72);
          v52 = *(char **)(v143 + 16);
          v132 = v40;
          v133 = v52;
          v53 = v51 * (v31 - 1);
          v134 = v51;
          v142 = v31 * v51;
          do
          {
            v55 = 0;
            v138 = v31;
            v135 = (char *)v53;
            while (1)
            {
              v141 = v19;
              v56 = *v46;
              v57 = v136;
              v58 = v46;
              v59 = (void (*)(_QWORD, _QWORD, _QWORD))v133;
              ((void (*)(char *, char *, uint64_t))v133)(v136, &(*v46)[v142 + v55], v3);
              v60 = &v56[v53 + v55];
              v61 = v137;
              v59(v137, v60, v3);
              sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
              LOBYTE(v56) = sub_214424E6C();
              v62 = *(void (**)(_QWORD, _QWORD))(v143 + 8);
              v62(v61, v3);
              result = ((uint64_t (*)(char *, uint64_t))v62)(v57, v3);
              if ((v56 & 1) == 0)
                break;
              v63 = *v58;
              if (!*v58)
                goto LABEL_146;
              v53 = (uint64_t)v135;
              v64 = &v135[(_QWORD)v63 + v55];
              v65 = *(void (**)(_QWORD, _QWORD, _QWORD))(v143 + 32);
              v65(v140, &v63[v142 + v55], v3);
              swift_arrayInitWithTakeFrontToBack();
              result = ((uint64_t (*)(char *, char *, uint64_t))v65)(v64, v140, v3);
              v55 -= v134;
              v19 = v141 + 1;
              v54 = v138;
              v46 = v139;
              if (v138 == v141 + 1)
                goto LABEL_51;
            }
            v54 = v138;
            v46 = v58;
            v53 = (uint64_t)v135;
LABEL_51:
            v31 = v54 + 1;
            v53 += v134;
            v142 += v134;
            v19 = v130;
          }
          while (v31 != v128);
          v31 = v128;
          v40 = v132;
          v16 = v127;
        }
      }
LABEL_58:
      if (v31 < v19)
        goto LABEL_135;
      result = swift_isUniquelyReferenced_nonNull_native();
      v132 = v40;
      v138 = v31;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
        v16 = result;
      }
      v67 = *(_QWORD *)(v16 + 16);
      v66 = *(_QWORD *)(v16 + 24);
      v18 = v67 + 1;
      if (v67 >= v66 >> 1)
      {
        result = (uint64_t)sub_214224E24((char *)(v66 > 1), v67 + 1, 1, (char *)v16);
        v16 = result;
      }
      *(_QWORD *)(v16 + 16) = v18;
      v68 = v16 + 32;
      v69 = (uint64_t *)(v16 + 32 + 16 * v67);
      v70 = v138;
      *v69 = v19;
      v69[1] = v70;
      if (v67)
      {
        while (1)
        {
          v71 = v18 - 1;
          if (v18 >= 4)
          {
            v76 = v68 + 16 * v18;
            v77 = *(_QWORD *)(v76 - 64);
            v78 = *(_QWORD *)(v76 - 56);
            v82 = __OFSUB__(v78, v77);
            v79 = v78 - v77;
            if (v82)
              goto LABEL_124;
            v81 = *(_QWORD *)(v76 - 48);
            v80 = *(_QWORD *)(v76 - 40);
            v82 = __OFSUB__(v80, v81);
            v74 = v80 - v81;
            v75 = v82;
            if (v82)
              goto LABEL_125;
            v83 = v18 - 2;
            v84 = (uint64_t *)(v68 + 16 * (v18 - 2));
            v86 = *v84;
            v85 = v84[1];
            v82 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v82)
              goto LABEL_126;
            v82 = __OFADD__(v74, v87);
            v88 = v74 + v87;
            if (v82)
              goto LABEL_128;
            if (v88 >= v79)
            {
              v106 = (uint64_t *)(v68 + 16 * v71);
              v108 = *v106;
              v107 = v106[1];
              v82 = __OFSUB__(v107, v108);
              v109 = v107 - v108;
              if (v82)
                goto LABEL_134;
              v99 = v74 < v109;
              goto LABEL_95;
            }
          }
          else
          {
            if (v18 != 3)
            {
              v100 = *(_QWORD *)(v16 + 32);
              v101 = *(_QWORD *)(v16 + 40);
              v82 = __OFSUB__(v101, v100);
              v93 = v101 - v100;
              v94 = v82;
              goto LABEL_89;
            }
            v73 = *(_QWORD *)(v16 + 32);
            v72 = *(_QWORD *)(v16 + 40);
            v82 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            v75 = v82;
          }
          if ((v75 & 1) != 0)
            goto LABEL_127;
          v83 = v18 - 2;
          v89 = (uint64_t *)(v68 + 16 * (v18 - 2));
          v91 = *v89;
          v90 = v89[1];
          v92 = __OFSUB__(v90, v91);
          v93 = v90 - v91;
          v94 = v92;
          if (v92)
            goto LABEL_129;
          v95 = (uint64_t *)(v68 + 16 * v71);
          v97 = *v95;
          v96 = v95[1];
          v82 = __OFSUB__(v96, v97);
          v98 = v96 - v97;
          if (v82)
            goto LABEL_131;
          if (__OFADD__(v93, v98))
            goto LABEL_133;
          if (v93 + v98 >= v74)
          {
            v99 = v74 < v98;
LABEL_95:
            if (v99)
              v71 = v83;
            goto LABEL_97;
          }
LABEL_89:
          if ((v94 & 1) != 0)
            goto LABEL_130;
          v102 = (uint64_t *)(v68 + 16 * v71);
          v104 = *v102;
          v103 = v102[1];
          v82 = __OFSUB__(v103, v104);
          v105 = v103 - v104;
          if (v82)
            goto LABEL_132;
          if (v105 < v93)
            goto LABEL_14;
LABEL_97:
          v110 = v71 - 1;
          if (v71 - 1 >= v18)
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
          if (!*v139)
            goto LABEL_147;
          v111 = v16;
          v112 = (uint64_t *)(v68 + 16 * v110);
          v113 = *v112;
          v114 = (_QWORD *)(v68 + 16 * v71);
          v115 = v114[1];
          v116 = v132;
          result = sub_2143F0EF4((unint64_t)&(*v139)[*(_QWORD *)(v143 + 72) * *v112], (unint64_t)&(*v139)[*(_QWORD *)(v143 + 72) * *v114], (unint64_t)&(*v139)[*(_QWORD *)(v143 + 72) * v115], v131);
          v132 = v116;
          if (v116)
            goto LABEL_118;
          if (v115 < v113)
            goto LABEL_121;
          if (v71 > *(_QWORD *)(v111 + 16))
            goto LABEL_122;
          *v112 = v113;
          *(_QWORD *)(v68 + 16 * v110 + 8) = v115;
          v117 = *(_QWORD *)(v111 + 16);
          if (v71 >= v117)
            goto LABEL_123;
          v16 = v111;
          v18 = v117 - 1;
          result = (uint64_t)memmove((void *)(v68 + 16 * v71), v114 + 2, 16 * (v117 - 1 - v71));
          *(_QWORD *)(v111 + 16) = v117 - 1;
          if (v117 <= 2)
            goto LABEL_14;
        }
      }
      v18 = 1;
LABEL_14:
      v11 = (uint64_t)v139[1];
      v17 = v138;
      if (v138 >= v11)
        goto LABEL_107;
    }
  }
  v16 = MEMORY[0x24BEE4AF8];
  v131 = MEMORY[0x24BEE4AF8]
       + ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80));
  v125 = MEMORY[0x24BEE4AF8];
  if (v11 == 1)
    goto LABEL_12;
  v18 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_107:
  if (v18 >= 2)
  {
    v118 = *v139;
    do
    {
      v119 = v18 - 2;
      if (v18 < 2)
        goto LABEL_136;
      if (!v118)
        goto LABEL_149;
      v120 = *(_QWORD *)(v16 + 32 + 16 * v119);
      v121 = *(_QWORD *)(v16 + 32 + 16 * (v18 - 1) + 8);
      v122 = v132;
      result = sub_2143F0EF4((unint64_t)&v118[*(_QWORD *)(v143 + 72) * v120], (unint64_t)&v118[*(_QWORD *)(v143 + 72) * *(_QWORD *)(v16 + 32 + 16 * (v18 - 1))], (unint64_t)&v118[*(_QWORD *)(v143 + 72) * v121], v131);
      v132 = v122;
      if (v122)
        break;
      if (v121 < v120)
        goto LABEL_137;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_21435010C(v16);
        v16 = result;
      }
      if (v119 >= *(_QWORD *)(v16 + 16))
        goto LABEL_138;
      v123 = (_QWORD *)(v16 + 32 + 16 * v119);
      *v123 = v120;
      v123[1] = v121;
      v124 = *(_QWORD *)(v16 + 16);
      if (v18 > v124)
        goto LABEL_139;
      result = (uint64_t)memmove((void *)(v16 + 32 + 16 * (v18 - 1)), (const void *)(v16 + 32 + 16 * v18), 16 * (v124 - v18));
      *(_QWORD *)(v16 + 16) = v124 - 1;
      v18 = v124 - 1;
    }
    while (v124 > 2);
  }
LABEL_118:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v125 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2143F0C7C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v28 = a1;
  v7 = sub_214423B70();
  v36 = *(_QWORD **)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v32 = (char *)&v26 - v11;
  result = MEMORY[0x24BDAC7A8](v10);
  v31 = (char *)&v26 - v13;
  v34 = a3;
  v27 = a2;
  if (a3 != a2)
  {
    v14 = v36[9];
    v29 = (void (*)(char *, uint64_t, uint64_t))v36[2];
    v30 = a4;
    v38 = v14 * (v34 - 1);
    v33 = v14;
    v37 = v14 * v34;
LABEL_5:
    v15 = 0;
    v16 = v28;
    while (1)
    {
      v17 = *a4;
      v18 = v31;
      v19 = v29;
      v29(v31, v37 + v15 + *a4, v7);
      v20 = v32;
      v19(v32, v38 + v15 + v17, v7);
      sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      LOBYTE(v17) = sub_214424E6C();
      v21 = (void (*)(char *, uint64_t))v36[1];
      v22 = v20;
      a4 = v30;
      v21(v22, v7);
      result = ((uint64_t (*)(char *, uint64_t))v21)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v38 += v33;
        v37 += v33;
        if (++v34 == v27)
          return result;
        goto LABEL_5;
      }
      v23 = *a4;
      if (!*a4)
        break;
      v24 = v23 + v38 + v15;
      v25 = (void (*)(char *, uint64_t, uint64_t))v36[4];
      v25(v35, v23 + v37 + v15, v7);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v24, v35, v7);
      v15 -= v33;
      if (v34 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2143F0EF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char *v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, unint64_t, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v8 = sub_214423B70();
  v9 = *(_QWORD **)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v10);
  v49 = (char *)&v44 - v13;
  v51 = v9[9];
  if (!v51)
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    return result;
  }
  if (a2 - a1 == 0x8000000000000000 && v51 == -1)
    goto LABEL_60;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v51 == -1)
    goto LABEL_61;
  v15 = (uint64_t)(a2 - a1) / v51;
  v54 = a1;
  v53 = a4;
  if (v15 >= v14 / v51)
  {
    v17 = v14 / v51 * v51;
    if (a4 < a2 || a2 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v29 = a4 + v17;
    v52 = a4 + v17;
    v54 = a2;
    if (v17 >= 1 && a1 < a2)
    {
      v31 = -v51;
      v32 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      v47 = a4;
      v48 = v32;
      v45 = v9;
      v46 = a1;
      do
      {
        v51 = a3 + v31;
        v34 = v48;
        v33 = v49;
        v48(v49, v29 + v31, v8);
        v35 = a2 + v31;
        v36 = v31;
        v37 = v50;
        v34(v50, v35, v8);
        sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        LOBYTE(v34) = sub_214424E6C();
        v38 = (void (*)(char *, uint64_t))v9[1];
        v38(v37, v8);
        v38(v33, v8);
        if ((v34 & 1) != 0)
        {
          if (a3 < a2 || v51 >= a2)
          {
            v43 = v51;
            swift_arrayInitWithTakeFrontToBack();
            v9 = v45;
            v39 = v46;
            v40 = v47;
            v31 = v36;
            v41 = v43;
          }
          else
          {
            v9 = v45;
            v39 = v46;
            v40 = v47;
            v31 = v36;
            v41 = v51;
            if (a3 != a2)
              swift_arrayInitWithTakeBackToFront();
          }
          v54 += v31;
        }
        else
        {
          v42 = v52;
          v52 += v36;
          v31 = v36;
          v41 = v51;
          if (a3 < v42 || v51 >= v42)
          {
            swift_arrayInitWithTakeFrontToBack();
            v35 = a2;
            v9 = v45;
            v39 = v46;
            v40 = v47;
          }
          else
          {
            v9 = v45;
            v39 = v46;
            v40 = v47;
            if (a3 != v42)
              swift_arrayInitWithTakeBackToFront();
            v35 = a2;
          }
        }
        v29 = v52;
        if (v52 <= v40)
          break;
        a2 = v35;
        a3 = v41;
      }
      while (v35 > v39);
    }
  }
  else
  {
    v16 = v15 * v51;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v48 = (void (*)(char *, unint64_t, uint64_t))(a4 + v16);
    v52 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v49;
        v19(v49, a2, v8);
        v22 = v50;
        v19(v50, a4, v8);
        sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        v23 = sub_214424E6C();
        v24 = (void (*)(char *, uint64_t))v9[1];
        v24(v22, v8);
        v24(v21, v8);
        v25 = v54;
        if ((v23 & 1) != 0)
        {
          v26 = v51;
          v27 = a2 + v51;
          if (v54 < a2 || v54 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 == a2)
              v25 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v26 = v51;
          v28 = v53 + v51;
          if (v54 < v53 || v54 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 != v53)
              swift_arrayInitWithTakeBackToFront();
          }
          v53 = v28;
          v27 = a2;
        }
        v54 = v25 + v26;
        a4 = v53;
        if (v53 >= (unint64_t)v48)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
  }
  sub_2143F13F0(&v54, &v53, (uint64_t *)&v52);
  return 1;
}

uint64_t sub_2143F13F0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_214423B70();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_13;
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t sub_2143F14A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F10748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143F14E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_253F10748);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143F1528()
{
  return sub_2143F00BC();
}

uint64_t sub_2143F1544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_214423C48();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12280);
    v10 = sub_2144254CC();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_2141FED10(&qword_253F121C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2A8]);
      v14 = sub_214424DB8();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_2141FED10(&qword_253F10FF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2C0]);
          v20 = sub_214424ED8();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_2143F17AC()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v4 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_2143F1884(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v25 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v25 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v5 + 64) + v7;
  v9 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (v7 | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v11 + 80));
  if (v14 <= 7
    && ((v13 + (v8 & ~(unint64_t)v7)) & ~v12) + *(_QWORD *)(v11 + 64) <= 0x18
    && ((v7 | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v11 + 80)) & 0x100000) == 0)
  {
    v18 = ~(unint64_t)v7;
    v19 = ~v12;
    v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v21 = AssociatedTypeWitness;
    v20(a1, a2, v4);
    v22 = ((unint64_t)a1 + v8) & v18;
    v23 = ((unint64_t)a2 + v8) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v22, v23, v25);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v22 + v13) & v19, (v23 + v13) & v19, v21);
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_2143F19DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v7 + v8 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t sub_2143F1A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))((v12 + *(unsigned __int8 *)(v14 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v12 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143F1B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 24))((v12 + *(unsigned __int8 *)(v14 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v12 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143F1C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))((v12 + *(unsigned __int8 *)(v14 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v12 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143F1CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 40))((v12 + *(unsigned __int8 *)(v14 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v12 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2143F1DB0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned int *)(v13 + 84);
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = *(_DWORD *)(v13 + 84);
  if (!a2)
    return 0;
  v16 = AssociatedTypeWitness;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = *(_QWORD *)(v7 + 64) + v17;
  v19 = *(_QWORD *)(v9 + 64);
  v20 = *(unsigned __int8 *)(v13 + 80);
  if (a2 <= v15)
    goto LABEL_26;
  v21 = ((v19 + v20 + (v18 & ~v17)) & ~v20) + *(_QWORD *)(v13 + 64);
  v22 = 8 * v21;
  if (v21 <= 3)
  {
    v24 = ((a2 - v15 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v24))
    {
      v23 = *(_DWORD *)(a1 + v21);
      if (!v23)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v24 > 0xFF)
    {
      v23 = *(unsigned __int16 *)(a1 + v21);
      if (!*(_WORD *)(a1 + v21))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v24 < 2)
    {
LABEL_26:
      if (v15)
      {
        if ((_DWORD)v8 == v15)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, v6);
        v27 = (v18 + a1) & ~v17;
        if ((_DWORD)v10 == v15)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v27, v10, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v27 + v19 + v20) & ~v20, v14, v16);
      }
      return 0;
    }
  }
  v23 = *(unsigned __int8 *)(a1 + v21);
  if (!*(_BYTE *)(a1 + v21))
    goto LABEL_26;
LABEL_17:
  v25 = (v23 - 1) << v22;
  if (v21 > 3)
    v25 = 0;
  if ((_DWORD)v21)
  {
    if (v21 <= 3)
      v26 = v21;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  return v15 + v25 + 1;
}

void sub_2143F1FC4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v7 + 84))
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = ((*(_QWORD *)(v8 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void type metadata accessor for SpecialCaseFormatStyle()
{
  JUMPOUT(0x2199CD874);
}

void sub_2143F2260()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F2270()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F2280()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F2290()
{
  JUMPOUT(0x2199CD934);
}

void type metadata accessor for SpecialCaseFormatStyle.CodingKeys()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_2143F22AC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2143F22F8 + 4 * byte_214432C13[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2143F232C + 4 * byte_214432C0E[v4]))();
}

uint64_t sub_2143F232C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143F2334(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143F233CLL);
  return result;
}

uint64_t sub_2143F2348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143F2350);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2143F2354(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143F235C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_2143F2368()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F2378()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F2388()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2143F2398()
{
  return 3;
}

void sub_2143F23A0()
{
  qword_253F1C890 = 0x4010000000000000;
}

double sub_2143F23B0()
{
  double result;
  __int128 v1;
  __int128 v2;
  char v3;

  sub_214424770();
  sub_2144246C8();
  result = *(double *)&v1;
  xmmword_253F1C8F0 = v1;
  unk_253F1C900 = v2;
  byte_253F1C910 = v3;
  return result;
}

double sub_2143F241C()
{
  double result;
  _OWORD v1[2];
  char v2;

  sub_2143F2458((uint64_t)v1);
  result = *(double *)v1;
  xmmword_254D76128 = v1[0];
  unk_254D76138 = v1[1];
  byte_254D76148 = v2;
  return result;
}

double sub_2143F2458@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  sub_214424770();
  sub_2144246F8();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double sub_2143F2704()
{
  double result;
  __int128 v1;
  __int128 v2;
  char v3;

  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v1;
  xmmword_254D76150 = v1;
  unk_254D76160 = v2;
  byte_254D76170 = v3;
  return result;
}

double sub_2143F2840()
{
  double result;
  _OWORD v1[2];
  char v2;

  sub_2143F287C((uint64_t)v1);
  result = *(double *)v1;
  xmmword_254D76178 = v1[0];
  unk_254D76188 = v1[1];
  byte_254D76198 = v2;
  return result;
}

double sub_2143F287C@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  sub_214424770();
  sub_2144246F8();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double sub_2143F2B00()
{
  double result;
  __int128 v1;
  __int128 v2;
  char v3;

  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v1;
  xmmword_254D761A0 = v1;
  *(_OWORD *)algn_254D761B0 = v2;
  byte_254D761C0 = v3;
  return result;
}

double sub_2143F2C38()
{
  double result;
  _OWORD v1[2];
  char v2;

  sub_2143F2C74((uint64_t)v1);
  result = *(double *)v1;
  xmmword_254D761C8 = v1[0];
  unk_254D761D8 = v1[1];
  byte_254D761E8 = v2;
  return result;
}

double sub_2143F2C74@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  sub_214424770();
  sub_2144246F8();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double sub_2143F3060()
{
  double result;
  __int128 v1;
  __int128 v2;
  char v3;

  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v1;
  xmmword_254D761F0 = v1;
  unk_254D76200 = v2;
  byte_254D76210 = v3;
  return result;
}

double sub_2143F31C0()
{
  double result;
  __int128 v1;
  __int128 v2;
  char v3;

  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v1;
  xmmword_254D76220 = v1;
  *(_OWORD *)algn_254D76230 = v2;
  byte_254D76240 = v3;
  return result;
}

void sub_2143F33AC()
{
  qword_254D76248 = 0x4010000000000000;
}

double sub_2143F33BC@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double sub_2143F35E0@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double v3;
  double result;
  __int128 v5;
  __int128 v6;
  char v7;

  if (a2 <= 0.0)
    a2 = 0.0;
  if (a2 <= 1.0)
    v3 = a2;
  else
    v3 = 1.0;
  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  sub_2144246F8();
  if (v3 >= 0.271820972)
  {
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
  }
  else
  {
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
  }
  sub_2144246E0();
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

double sub_2143F38B8@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double v3;
  double result;
  __int128 v5;
  __int128 v6;
  char v7;

  if (a2 <= 0.0)
    a2 = 0.0;
  if (a2 <= 1.0)
    v3 = a2;
  else
    v3 = 1.0;
  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  sub_2144246F8();
  if (v3 >= 0.338203119)
  {
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
  }
  else
  {
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
  }
  sub_2144246E0();
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

double sub_2143F3C1C@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result;
  double v4;
  __int128 v5;
  __int128 v6;
  char v7;

  if (a2 <= 0.0)
    a2 = 0.0;
  if (a2 > 1.0)
    a2 = 1.0;
  v4 = a2;
  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  sub_2144246F8();
  if (v4 >= 0.292355541)
  {
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
  }
  else
  {
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
  }
  sub_2144246E0();
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

double sub_2143F3F7C@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double v3;
  double result;
  __int128 v5;
  __int128 v6;
  char v7;

  if (a2 <= 0.0)
    a2 = 0.0;
  if (a2 <= 1.0)
    v3 = a2;
  else
    v3 = 1.0;
  sub_214424770();
  sub_2144246F8();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_21442471C();
  sub_214424734();
  sub_2144246E0();
  sub_2144246F8();
  if (v3 >= 0.258937054)
  {
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
    sub_21442471C();
  }
  else
  {
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
    sub_21442471C();
    sub_214424734();
  }
  sub_2144246E0();
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

uint64_t destroy for AnyFormatStyle(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (v1 <= 2)
    return _s6Charts15AnyChartContentVwxx_0(a1);
  return a1;
}

uint64_t initializeWithCopy for AnyFormatStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t))(v6 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AnyFormatStyle(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 <= 2)
      _s6Charts15AnyChartContentVwxx_0(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v7 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      v8 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v9 = *a2;
      v10 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for AnyFormatStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 <= 2)
      _s6Charts15AnyChartContentVwxx_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyFormatStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnyFormatStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_2143F4818(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_2143F4834(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyFormatStyle()
{
  return &type metadata for AnyFormatStyle;
}

uint64_t sub_2143F486C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[3];
  uint64_t v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unsigned __int8 v27;

  v18[0] = a2;
  v19 = a1;
  v5 = sub_214423B34();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_214423B70();
  v18[1] = *(_QWORD *)(v6 - 8);
  v18[2] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_214423B94();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_2141D8BF8(qword_253F13A80);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    if (a3 == 1)
    {
      sub_2144239E4();
      sub_21422F3FC(v3, (uint64_t)&v24);
      __asm { BR              X10 }
    }
    sub_21422F3FC(v3, (uint64_t)&v24);
    if (v27 < 2u)
      goto LABEL_8;
    if (v27 == 2)
    {
      v21 = v24;
      v22 = v25;
      v23 = v26;
      v14 = v19;
      v15 = v18[0];
      v20[0] = v19;
      v20[1] = v18[0];
      v16 = sub_2141E88D0(&v21, *((uint64_t *)&v25 + 1));
      swift_bridgeObjectRetain();
      v13 = sub_2143F54C0((uint64_t)v16, (uint64_t)v20, MEMORY[0x24BEE0D00]);
      sub_2141E0750((uint64_t)&v21, qword_254D6E1B8);
      sub_2141E60B8(v14, v15, 2);
    }
    else
    {
      swift_bridgeObjectRetain();
      return v19;
    }
  }
  else
  {
    sub_21422F3FC(v3, (uint64_t)&v24);
    if (v27 - 1 < 2)
    {
LABEL_8:
      sub_21422F27C((uint64_t)&v24);
      return 0;
    }
    if (v27)
    {
      v20[0] = v19;
      sub_214423B7C();
      sub_2142B585C();
      sub_21442396C();
      sub_2141D9054((unint64_t *)&qword_253F12438, qword_253F13A80, MEMORY[0x24BDCD4C0]);
      sub_214424D04();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return v21;
    }
    else
    {
      v21 = v24;
      v22 = v25;
      v23 = v26;
      v20[0] = v19;
      v12 = sub_2141E88D0(&v21, *((uint64_t *)&v25 + 1));
      v13 = sub_2143F54C0((uint64_t)v12, (uint64_t)v20, MEMORY[0x24BEE13C8]);
      sub_2141E0750((uint64_t)&v21, qword_253F12450);
    }
  }
  return v13;
}

uint64_t sub_2143F4C74(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t inited;
  void (*v22)(char *, uint64_t);
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[25];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  unsigned __int8 v35;

  v25 = sub_214423B34();
  v24[1] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24[2] = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_214423B70();
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_214423B94();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_2141D8BF8(qword_253F13A80);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    sub_2144239E4();
    sub_2144239E4();
    sub_21422F3FC(v28, (uint64_t)v33);
    __asm { BR              X10 }
  }
  v27 = a2;
  sub_21422F3FC(v28, (uint64_t)v33);
  if (v35 - 1 >= 2)
  {
    if (v35)
    {
      sub_2141D8BF8(&qword_253F126B0);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2144271D0;
      v28 = inited + 32;
      *(_QWORD *)&v30 = a1;
      sub_214423B7C();
      sub_2142B585C();
      sub_21442396C();
      sub_2141D9054((unint64_t *)&qword_253F12438, qword_253F13A80, MEMORY[0x24BDCD4C0]);
      sub_214424D04();
      v22 = *(void (**)(char *, uint64_t))(v11 + 8);
      v22(v13, v10);
      *(_QWORD *)&v30 = v27;
      sub_214423B7C();
      sub_21442396C();
      sub_214424D04();
      v22(v13, v10);
      v14 = sub_21438EEA0(0x4025204F54204025, 0xE800000000000000, inited);
      swift_setDeallocating();
      swift_arrayDestroy();
    }
    else
    {
      v30 = v33[0];
      v31 = v33[1];
      v32 = v34;
      sub_2141D8BF8(&qword_253F126B0);
      v15 = swift_initStackObject();
      *(_OWORD *)(v15 + 16) = xmmword_2144271D0;
      v29[0] = a1;
      v16 = sub_2141E88D0(&v30, *((uint64_t *)&v31 + 1));
      v17 = MEMORY[0x24BEE13C8];
      *(_QWORD *)(v15 + 32) = sub_2143F54C0((uint64_t)v16, (uint64_t)v29, MEMORY[0x24BEE13C8]);
      *(_QWORD *)(v15 + 40) = v18;
      v29[0] = v27;
      v19 = sub_2141E88D0(&v30, *((uint64_t *)&v31 + 1));
      *(_QWORD *)(v15 + 48) = sub_2143F54C0((uint64_t)v19, (uint64_t)v29, v17);
      *(_QWORD *)(v15 + 56) = v20;
      v14 = sub_21438EEA0(0x4025204F54204025, 0xE800000000000000, v15);
      swift_setDeallocating();
      swift_arrayDestroy();
      sub_2141E0750((uint64_t)&v30, qword_253F12450);
    }
  }
  else
  {
    sub_21422F27C((uint64_t)v33);
    return 0;
  }
  return v14;
}

uint64_t sub_2143F52B4()
{
  uint64_t result;

  qword_253F1C760 = sub_2141D8BF8(&qword_253F0FF30);
  result = sub_2141D9054(&qword_253F0FF28, &qword_253F0FF30, (uint64_t)&unk_214433570);
  qword_253F1C768 = result;
  byte_253F1C770 = 2;
  return result;
}

uint64_t sub_2143F530C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = a1[3];
  v6 = sub_2141E88D0(a1, v5);
  return sub_2143F5350((uint64_t)v6, a2, a3, v5);
}

uint64_t sub_2143F5350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  char v16;
  _BYTE v19[40];

  v6 = sub_214425388();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v19[-v9 - 8];
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_2141D7878(a2, (uint64_t)v19);
  sub_2141D8BF8(&qword_253F12430);
  v14 = swift_dynamicCast();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v14)
  {
    v15(v10, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a4);
    v16 = sub_214424ED8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }
  else
  {
    v15(v10, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_2143F54C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a3;
  v17 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v16 - v6;
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  result = MEMORY[0x24BDAC7A8](v8);
  v13 = (uint64_t *)((char *)&v16 - v12);
  if (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) == v5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v17, AssociatedTypeWitness);
    sub_2144238C4();
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
    if (v10 == 16)
    {
      v14 = *v13;
      v15 = *(void (**)(uint64_t *, uint64_t))(v9 + 8);
      swift_bridgeObjectRetain();
      v15(v13, v8);
      return v14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2143F5634(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2143F530C(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_2143F563C(uint64_t a1)
{
  return _s6Charts15AnyChartContentVwxx_0(a1);
}

uint64_t sub_2143F5660()
{
  return 0;
}

uint64_t sub_2143F566C@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  v2 = sub_2143F577C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 & 1;
  return result;
}

uint64_t sub_2143F56B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2143F577C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2143F56DC(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_214433638, a1);
  return sub_2144258EC();
}

uint64_t sub_2143F5710(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_214433638, a1);
  return sub_2144258F8();
}

uint64_t sub_2143F5744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2142D6BB0(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_2143F574C(uint64_t a1)
{
  return sub_2143F563C(a1);
}

uint64_t sub_2143F5764(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2143F5A0C(a1, *(_QWORD *)(a2 + 16), a3, a4);
}

uint64_t sub_2143F577C()
{
  return 1;
}

void sub_2143F5788(uint64_t a1, uint64_t a2)
{
  _BYTE v3[48];
  uint64_t v4;

  sub_21422F3FC(a1, (uint64_t)v3);
  sub_21422F3FC(a2, (uint64_t)&v4);
  __asm { BR              X10 }
}

uint64_t sub_2143F57D8()
{
  uint64_t v0;
  char v1;
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  _OWORD v6[2];
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  _BYTE v10[144];

  sub_21422F3FC((uint64_t)v10, (uint64_t)v8);
  if (v10[88])
  {
    sub_2141E0750((uint64_t)v8, qword_253F12450);
    sub_2141E0750((uint64_t)v10, qword_253F101F0);
    v1 = 0;
  }
  else
  {
    v2 = *(_OWORD *)(v0 + 16);
    v6[0] = *(_OWORD *)v0;
    v6[1] = v2;
    v7 = *(_QWORD *)(v0 + 32);
    v3 = v9;
    v4 = sub_2141E88D0(v8, v9);
    v1 = sub_2143F5350((uint64_t)v4, (uint64_t)v6, MEMORY[0x24BEE13C8], v3);
    sub_2141E0750((uint64_t)v6, qword_253F12450);
    sub_2141E0750((uint64_t)v8, qword_253F12450);
    sub_21422F27C((uint64_t)v10);
  }
  return v1 & 1;
}

uint64_t type metadata accessor for AnyFormatStyle.IdentityFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyFormatStyle.IdentityFormatStyle);
}

uint64_t type metadata accessor for AnyFormatStyle.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyFormatStyle.Wrapper);
}

void sub_2143F59CC()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F59DC()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F59EC()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F59FC()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2143F5A0C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for AnyFormatStyle.IdentityFormatStyle.CodingKeys(255, a2, a3, a4);
  MEMORY[0x2199CD934](&unk_214433638, v5);
  v6 = sub_214425724();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  sub_2141E88D0(a1, a1[3]);
  sub_2144258D4();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for AnyFormatStyle.IdentityFormatStyle.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyFormatStyle.IdentityFormatStyle.CodingKeys);
}

void sub_2143F5AFC()
{
  JUMPOUT(0x2199CD934);
}

void sub_2143F5B0C()
{
  JUMPOUT(0x2199CD934);
}

void ChartContent.id<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for ModifiedChartContent_ID();
}

uint64_t sub_2143F5C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

_UNKNOWN **sub_2143F5C38()
{
  return &off_254D6E2C0;
}

uint64_t sub_2143F5C44(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143F5D20 + 4 * byte_214433690[v17 - 1]))();
}

void sub_2143F5D9C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for ModifiedChartContent_ID()
{
  JUMPOUT(0x2199CD874);
}

void sub_2143F5FA8(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for ModifiedChartContent_ID();
}

uint64_t sub_2143F6028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5 + *(int *)(a1 + 52), v1);
  *(_QWORD *)(v8 - 160) = v4;
  *(_QWORD *)(v8 - 152) = v1;
  *(_QWORD *)(v8 - 144) = v3;
  *(_QWORD *)(v8 - 136) = v2;
  *(_QWORD *)(v8 - 128) = v5;
  *(_OWORD *)(v8 - 120) = *(_OWORD *)(v8 - 192);
  swift_retain();
  sub_214200E80(v6);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v1);
}

void sub_2143F60BC(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for ModifiedChartContent_ID();
}

uint64_t sub_2143F6140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v4 + *(int *)(a1 + 52), v1);
  *(_QWORD *)(v10 - 176) = v3;
  *(_QWORD *)(v10 - 168) = v1;
  *(_QWORD *)(v10 - 160) = v2;
  *(_QWORD *)(v10 - 152) = v7;
  *(_QWORD *)(v10 - 144) = v4;
  *(_BYTE *)(v10 - 136) = v9;
  *(_QWORD *)(v10 - 128) = v5;
  sub_214200E80(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v1);
}

void sub_2143F61C4(uint64_t a1)
{
  sub_2143F5FA8(a1);
}

void sub_2143F61D4(uint64_t a1)
{
  sub_2143F60BC(a1);
}

void *PointMark.init<A, B>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[288];
  _BYTE v21[144];
  _BYTE v22[144];
  _BYTE v23[144];
  _BYTE v24[144];
  _BYTE __src[288];

  sub_2143D8C7C(a1, a3, a5, a4, (uint64_t)v21);
  sub_2141EDFD8((uint64_t)v21, (uint64_t)v20);
  sub_2143D8C7C(a2, a4, a6, v14, (uint64_t)v22);
  sub_2141EDFD8((uint64_t)v22, (uint64_t)v23);
  v16 = type metadata accessor for PlottableValue(0, a4, a6, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  v18 = type metadata accessor for PlottableValue(0, a3, a5, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  sub_2141EDFD8((uint64_t)v20, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)&__src[144]);
  return memcpy(a7, __src, 0x120uLL);
}

void *PointMark.init<A>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[144];
  _BYTE v16[144];
  uint64_t v17;
  char v18;
  _BYTE __src[288];

  sub_2143D8C7C(a1, a4, a5, a4, (uint64_t)v15);
  sub_2141EDFD8((uint64_t)v15, (uint64_t)v16);
  v13 = type metadata accessor for PlottableValue(0, a4, a5, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  v17 = a2;
  v18 = a3 & 1;
  sub_2143D90A4((uint64_t)&v17);
  sub_2141EDFD8((uint64_t)v16, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)&v17, (uint64_t)&__src[144]);
  return memcpy(a6, __src, 0x120uLL);
}

void *PointMark.init<A>(x:y:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[288];
  _BYTE v15[144];
  uint64_t v16;
  char v17;
  _BYTE v18[144];
  _BYTE v19[144];
  _BYTE __src[288];

  v16 = a1;
  v17 = a2 & 1;
  sub_2143D90A4((uint64_t)&v16);
  sub_2141EDFD8((uint64_t)&v16, (uint64_t)v14);
  sub_2143D8C7C(a3, a4, a5, v10, (uint64_t)v15);
  sub_2141EDFD8((uint64_t)v15, (uint64_t)v18);
  v12 = type metadata accessor for PlottableValue(0, a4, a5, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a3, v12);
  sub_2141EDFD8((uint64_t)v14, (uint64_t)v19);
  sub_2141EDFD8((uint64_t)v19, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v18, (uint64_t)&__src[144]);
  return memcpy(a6, __src, 0x120uLL);
}

void static PointMark._layoutChartContent(_:_:)(uint64_t a1)
{
  _BYTE v2[144];
  _BYTE v3[144];

  sub_2141EDFD8(a1, (uint64_t)v3);
  sub_2141EDFD8(a1 + 144, (uint64_t)v2);
  swift_beginAccess();
  sub_214200BC0((uint64_t)v3);
  sub_214200BC0((uint64_t)v2);
  sub_214202388((uint64_t)v3);
  sub_214202388((uint64_t)v2);
}

void static PointMark._renderChartContent(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE v19[144];
  _BYTE v20[144];
  _BYTE v21[144];
  _BYTE v22[144];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[104];

  v18 = a3;
  v5 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v5);
  v17 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SgPoint(0);
  MEMORY[0x24BDAC7A8](v16);
  sub_2141EDFD8(a1, (uint64_t)v19);
  sub_2141EDFD8(a1 + 144, (uint64_t)v20);
  v7 = *(_QWORD *)(a2 + 8);
  sub_2141EDFD8((uint64_t)v19, (uint64_t)v22);
  v8 = sub_2141EF1D0((uint64_t)v22);
  if ((v8 - 2) >= 4)
  {
    if (v8)
    {
      sub_2141EF754((uint64_t)v22);
      swift_beginAccess();
      swift_retain();
    }
    else
    {
      v9 = sub_2141EF754((uint64_t)v22);
      v10 = *(_QWORD *)(v9 + 32);
      v11 = *(_QWORD *)(v9 + 40);
      v12 = *(_OWORD *)(v9 + 16);
      v23 = *(_OWORD *)v9;
      v24 = v12;
      v13 = *(unsigned __int8 *)(v9 + 48);
      sub_21421CC0C((uint64_t)&v23, (uint64_t)v26);
      v25 = *((_QWORD *)&v24 + 1);
      swift_retain_n();
      sub_2141F92E8((uint64_t)&v25);
      sub_21421CE7C((uint64_t)v26);
      sub_2141DD140(v10, v11, v13);
      sub_21421BBD8(0, v7, v10, v11, v13);
      swift_release();
      sub_21421CC48((uint64_t)v26);
      sub_2141F9244((uint64_t)&v25);
      sub_2141EF1B0(v10, v11, v13);
    }
  }
  else
  {
    sub_2141EF754((uint64_t)v22);
    swift_retain();
  }
  sub_2141EDFD8((uint64_t)v20, (uint64_t)v21);
  v14 = (char *)sub_2143F6798 + 4 * byte_2144336F8[sub_2141EF1D0((uint64_t)v21)];
  __asm { BR              X10 }
}

uint64_t sub_2143F6798()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_2141EF754(v0 + 448);
  if ((v2 & 1) != 0)
  {
    v6 = sub_2143F70AC((_QWORD *)(v0 + 160), (_QWORD *)(v0 + 304), v4);
    result = swift_release();
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
    v9 = v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    v10 = *(unsigned __int8 *)(v9 + 152);
    *(_QWORD *)(v0 + 8) = v8;
    v11 = v3;
    if (v10 == 255)
    {
      if (qword_253F10D28 != -1)
        swift_once();
      v12 = 0;
      v13 = 0;
      v14 = &qword_253F1C948;
    }
    else
    {
      v14 = (uint64_t *)(v9 + 136);
      v12 = *(_QWORD *)(v9 + 144);
      v13 = v10 & 1;
    }
    v15 = *v14;
    sub_2143912BC(v9 + 88, v0 + 40);
    if (*(unsigned __int8 *)(v0 + 80) == 255)
    {
      if (qword_253F10448 != -1)
        swift_once();
      sub_2141F9E40((uint64_t)&unk_253F1C8C8, v0 + 88);
      *(_BYTE *)(v0 + 128) = 0;
      sub_214391304(v0 + 40);
    }
    else
    {
      sub_2142AAEF0(v0 + 40, v0 + 88);
    }
    v16 = *(_QWORD *)(v0 + 24);
    sub_2141FDEA0(v9, v16, type metadata accessor for ChartContentRenderContext.Environment);
    v17 = *(_QWORD *)(v0 + 16);
    sub_2141FFC88(v16, v1 + *(int *)(v17 + 36));
    v18 = *(_QWORD *)(v9 + *(int *)(v11 + 64));
    swift_release();
    *(_QWORD *)v1 = *(_QWORD *)(v0 + 8);
    *(_QWORD *)(v1 + 8) = v5;
    *(_QWORD *)(v1 + 16) = 0x7FF8000000000000;
    *(_QWORD *)(v1 + 24) = v15;
    *(_QWORD *)(v1 + 32) = v12;
    *(_BYTE *)(v1 + 40) = v13;
    sub_2142AAEF0(v0 + 88, v1 + 48);
    *(_QWORD *)(v1 + *(int *)(v17 + 40)) = v18;
    v19 = swift_allocBox();
    result = sub_2141FE1E0(v1, v20, type metadata accessor for SgPoint);
    v6 = v19 | 0x3000000000000000;
  }
  **(_QWORD **)(v0 + 32) = v6;
  return result;
}

uint64_t static PointMark._makeChartContent(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _DWORD v13[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2141D8BF8(&qword_254D6E300);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (_DWORD *)((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
  (*(void (**)(int *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if (v6 != 4)
    __break(1u);
  v8 = *v7;
  (*(void (**)(int *, uint64_t))(v5 + 8))(v7, v4);
  v9 = *(_DWORD *)(a2 + *(int *)(type metadata accessor for _ChartContentInputs(0) + 28));
  v13[3] = v8;
  v14 = v9;
  sub_2141DAC40();
  sub_2143F78E4();
  v10 = sub_214423C90();
  MEMORY[0x24BDAC7A8](v10);
  v13[-4] = v11;
  sub_2141DD324();
  return sub_2144244DC();
}

uint64_t static PointMark._chartContentCount(inputs:)()
{
  return 1;
}

uint64_t sub_2143F6C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *Value;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[288];
  _BYTE v55[288];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for ChartContentList.Item();
  v2 = *(_QWORD *)(v1 - 8);
  v47 = v1;
  v48 = v2;
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (uint64_t)&v44 - v6;
  v7 = sub_2141D8BF8(&qword_254D6E350);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v44 - v11;
  v13 = sub_214424530();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v46 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v50 = (char *)&v44 - v17;
  Value = (const void *)AGGraphGetValue();
  v20 = v19;
  memcpy(v55, Value, sizeof(v55));
  v21 = *(int *)(v7 + 48);
  v45 = v0;
  v22 = *(_DWORD *)(v0 + 4);
  v23 = *MEMORY[0x24BE096C0];
  v51 = v14;
  if (v22 == v23)
  {
    sub_2141EEF54((uint64_t)v55, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141DCFC0);
    sub_214424524();
    v24 = 0;
    v12[v21] = 0;
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  }
  else
  {
    v26 = AGGraphGetValue();
    v27 = v7;
    v28 = v20;
    v29 = v4;
    v31 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v9, v26, v13);
    v32 = v31 & 1;
    v4 = v29;
    v20 = v28;
    v9[v21] = v32;
    v33 = *(int *)(v27 + 48);
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v25(v12, v9, v13);
    v12[v21] = v9[v33];
    sub_2141EEF54((uint64_t)v55, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141DCFC0);
    v24 = v12[v21];
  }
  v34 = v50;
  v25(v50, v12, v13);
  if ((v20 & 1) != 0 || v24)
  {
    v36 = v46;
    v37 = *(_DWORD *)(v45 + 8) + 1;
    *(_DWORD *)(v45 + 8) = v37;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v36, v34, v13);
    memcpy(v54, v55, sizeof(v54));
    nullsub_1(v54, v38);
    sub_2141EEF54((uint64_t)v55, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141DCFC0);
    sub_214226D28();
    sub_21442453C();
    v39 = v52;
    if (!v52)
    {
      sub_2141D8BF8(qword_254D69850);
      v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_214426EF0;
      *(_QWORD *)(v39 + 32) = 0;
      *(_BYTE *)(v39 + 72) = 0;
    }
    *(_QWORD *)v4 = v39;
    v25(&v4[*(int *)(v47 + 28)], v36, v13);
    *((_DWORD *)v4 + 2) = v37;
    sub_21439775C(v54, v4 + 16);
    v40 = v49;
    sub_2141FE1E0((uint64_t)v4, v49, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
    sub_2141D8BF8(&qword_254D69808);
    v41 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_214426EF0;
    sub_2141FDEA0(v40, v42 + v41, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
    v52 = sub_2143987A8(v42);
    v53 = v43;
    AGGraphSetOutputValue();
    sub_2141EEF54((uint64_t)v55, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141EF040);
    swift_bridgeObjectRelease();
    sub_2143F79B4(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v34, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v13);
    return sub_2141EEF54((uint64_t)v55, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141EF040);
  }
}

uint64_t (*sub_2143F707C())()
{
  return sub_2143F708C;
}

uint64_t sub_2143F708C()
{
  return sub_2143F6C44();
}

unint64_t sub_2143F70AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _BYTE *v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE v120[152];
  _BYTE v121[152];
  _BYTE v122[152];
  _QWORD __src[76];
  _BYTE v124[144];
  _BYTE v125[168];
  double v126;
  double v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  _BYTE v137[144];
  _BYTE v138[152];
  _BYTE v139[152];
  _BYTE v140[152];
  char v141[152];
  char v142[152];
  _BYTE v143[144];
  _BYTE v144[89];
  _BYTE v145[144];
  __int128 v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  __int128 v152;
  _BYTE v153[144];
  _BYTE v154[144];
  _QWORD v155[18];
  _BYTE v156[144];
  _BYTE v157[152];

  sub_2141EDFD8((uint64_t)a2, (uint64_t)v144);
  v6 = v156;
  sub_2141EDFD8((uint64_t)v144, (uint64_t)v156);
  sub_2141EDFD8((uint64_t)a1, (uint64_t)v143);
  sub_2141EDFD8((uint64_t)v143, (uint64_t)v157);
  v7 = sub_2143E5A38();
  v9 = v7 & 1;
  v8 = (v7 & 1) == 0;
  if ((v7 & 1) != 0)
    v10 = v156;
  else
    v10 = v157;
  if (!v8)
    v6 = v157;
  sub_2141EDFD8((uint64_t)v10, (uint64_t)v154);
  sub_2141EDFD8((uint64_t)v6, (uint64_t)v155);
  sub_2141EDFD8((uint64_t)v154, (uint64_t)v153);
  sub_2141EDFD8((uint64_t)v155, (uint64_t)v145);
  sub_2141D8BF8(&qword_253F13588);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21442C470;
  sub_2141EF2E4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
  sub_2141EF2E4(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
  sub_2143036C0(v9, (uint64_t)v153);
  sub_2141E801C((uint64_t)v141, v11 + 32, &qword_253F13428);
  v12 = a3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v13 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v14 = (uint64_t *)(v12 + v13[18]);
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  v18 = v14[3];
  v19 = v14[4];
  v20 = v14[5];
  v21 = v14[6];
  v22 = v14[7];
  v23 = v14[8];
  v114 = *v14;
  v117 = v17;
  v108 = v18;
  v111 = v16;
  v103 = v19;
  v105 = v21;
  v101 = v20;
  if (v18)
  {
    LOBYTE(v126) = 4;
    v127 = *(double *)&v15;
    v128 = v16;
    v129 = v17 & 1;
    v130 = v18;
    v131 = v19;
    v132 = v20;
    v133 = v21;
    v134 = v22;
    v135 = v23;
    v136 = 3;
    sub_2141EF6F4((uint64_t)&v126);
    sub_2141EF6B8((uint64_t)&v126, (uint64_t)__src);
    nullsub_1(__src, v24);
  }
  else
  {
    sub_2141EF22C((uint64_t)__src);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v140, &qword_253F13428);
  sub_2141E801C((uint64_t)v140, v11 + 184, &qword_253F13428);
  v25 = (uint64_t *)(v12 + v13[19]);
  v26 = *v25;
  v27 = v25[1];
  v28 = v25[2];
  v29 = v25[3];
  v30 = v25[4];
  v31 = v25[5];
  v32 = v25[6];
  v33 = v25[7];
  v34 = v25[8];
  v88 = a3;
  v89 = v9;
  v96 = *v25;
  v98 = v28;
  v93 = v29;
  v94 = v27;
  v91 = v30;
  v92 = v32;
  v90 = v31;
  if (v29)
  {
    LOBYTE(v126) = 5;
    v127 = *(double *)&v26;
    v128 = v27;
    v129 = v28 & 1;
    v130 = v29;
    v131 = v30;
    v132 = v31;
    v133 = v32;
    v134 = v33;
    v135 = v34;
    v136 = 3;
    sub_2141EF6F4((uint64_t)&v126);
    sub_2141EF6B8((uint64_t)&v126, (uint64_t)__src);
    nullsub_1(__src, v35);
  }
  else
  {
    sub_2141EF22C((uint64_t)__src);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v139, &qword_253F13428);
  sub_2141E801C((uint64_t)v139, v11 + 336, &qword_253F13428);
  v86 = v13;
  v87 = v12;
  v36 = (uint64_t *)(v12 + v13[20]);
  v37 = *v36;
  v38 = v36[1];
  v40 = v36[2];
  v39 = v36[3];
  v42 = v36[4];
  v41 = v36[5];
  v43 = v36[6];
  v44 = v36[7];
  v45 = v36[8];
  if (v39)
  {
    LOBYTE(v126) = 6;
    v127 = *(double *)&v37;
    v128 = v38;
    v129 = v40 & 1;
    v130 = v39;
    v131 = v42;
    v132 = v41;
    v133 = v43;
    v134 = v44;
    v135 = v45;
    v136 = 3;
    sub_2141EF6F4((uint64_t)&v126);
    sub_2141EF6B8((uint64_t)&v126, (uint64_t)__src);
    nullsub_1(__src, v46);
  }
  else
  {
    sub_2141EF22C((uint64_t)__src);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v138, &qword_253F13428);
  sub_2141E801C((uint64_t)v138, v11 + 488, &qword_253F13428);
  sub_2141EF260(v114, v111, v117, v108, v103, v101, v105);
  sub_2141EF260(v96, v94, v98, v93, v91, v90, v92);
  sub_2141EF260(v37, v38, v40, v39, v42, v41, v43);
  v47 = sub_2142E91DC(v11);
  v49 = v48;
  swift_setDeallocating();
  sub_2141D8BF8(&qword_253F13428);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_2141EDFD8((uint64_t)v155, (uint64_t)v137);
  if (sub_2141EF1D0((uint64_t)v137))
  {
    sub_2141EF2E4(v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    return 0xE000000000000000;
  }
  v102 = v47;
  v104 = v49;
  v50 = sub_2141EF754((uint64_t)v137);
  v52 = *(_QWORD *)(v50 + 8);
  v53 = *(_BYTE *)(v50 + 16);
  v54 = *(_QWORD *)(v50 + 24);
  v55 = *(_QWORD *)(v50 + 32);
  v56 = *(_QWORD *)(v50 + 40);
  v57 = *(_BYTE *)(v50 + 48);
  *(_QWORD *)&v146 = *(_QWORD *)v50;
  v51 = v146;
  *((_QWORD *)&v146 + 1) = v52;
  v147 = v53;
  v148 = v54;
  v149 = v55;
  v150 = v56;
  v151 = v57;
  v152 = *(_OWORD *)(v50 + 56);
  sub_2141EDFD8((uint64_t)v155, (uint64_t)v124);
  v58 = sub_2141EF754((uint64_t)v124);
  v59 = *(_QWORD *)(v58 + 8);
  v109 = *(_QWORD *)v58;
  v106 = *(_BYTE *)(v58 + 16);
  v115 = *(_QWORD *)(v58 + 40);
  v118 = *(_QWORD *)(v58 + 32);
  v112 = *(_BYTE *)(v58 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  v60 = v55;
  v61 = v51;
  swift_bridgeObjectRetain();
  v95 = v53;
  sub_2141DD130(v51, v52, v53);
  v97 = v60;
  v99 = v56;
  v100 = v57;
  sub_2141DD140(v60, v56, v57);
  sub_2141DD130(v109, v59, v106);
  sub_2141DD140(v118, v115, v112);
  sub_214205DD8(v89 ^ 1, (_OWORD *)v88, v88, v89 ^ 1, &v146, (uint64_t)__src);
  sub_2141E801C((uint64_t)__src, (uint64_t)v125, qword_253F12398);
  sub_2141E801C((uint64_t)v125, (uint64_t)&v126, qword_253F12398);
  if (sub_2141EF214((uint64_t)&v126) == 1)
  {
    sub_2141EF2E4(v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
    sub_2141ED0BC(v51, v52, v53);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v60, v56, v57);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v119 = v52;
  if ((_BYTE)v89)
  {
    if (v127 >= v126)
      v65 = v126;
    else
      v65 = v127;
    v69 = *(double *)(v88 + 40);
    v70 = *(double *)(v88 + 48);
    if (v70 >= v69)
      v66 = *(double *)(v88 + 40);
    else
      v66 = *(double *)(v88 + 48);
    v67 = vabdd_f64(v127, v126);
    v68 = v70 - v69;
  }
  else
  {
    v63 = *(double *)(v88 + 24);
    v64 = *(double *)(v88 + 32);
    if (v64 >= v63)
      v65 = *(double *)(v88 + 24);
    else
      v65 = *(double *)(v88 + 32);
    if (v127 >= v126)
      v66 = v126;
    else
      v66 = v127;
    v67 = vabdd_f64(v64, v63);
    v68 = v127 - v126;
  }
  v71 = fabs(v68);
  v113 = *(_QWORD *)(*(_QWORD *)(v88 + 16) + 24);
  v72 = (uint64_t *)(v87 + v86[26]);
  v73 = v72[1];
  v116 = *v72;
  v74 = v86[25];
  v75 = (uint64_t *)(v87 + v86[24]);
  v76 = *v75;
  v77 = v75[1];
  v107 = *v75;
  v110 = v73;
  v79 = v75[2];
  v78 = v75[3];
  v81 = *(_QWORD *)(v87 + v74);
  v80 = *(_QWORD *)(v87 + v74 + 8);
  v82 = *(_QWORD *)(v87 + v74 + 16);
  v83 = *(_QWORD *)(v87 + v74 + 24);
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v76, v77, v79, v78);
  sub_2141EF2B4(v81, v80, v82, v83);
  swift_bridgeObjectRetain();
  sub_2143036C0(v89 ^ 1u, (uint64_t)v145);
  sub_2141E801C((uint64_t)v142, (uint64_t)v120, &qword_253F13428);
  sub_2141ED0BC(v61, v119, v95);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v97, v99, v100);
  swift_bridgeObjectRelease();
  sub_2141EF6B8((uint64_t)&v128, (uint64_t)v121);
  nullsub_1(v121, v84);
  sub_2141EF22C((uint64_t)v122);
  __src[0] = v113;
  *(double *)&__src[1] = v65;
  *(double *)&__src[2] = v66;
  *(double *)&__src[3] = v67;
  *(double *)&__src[4] = v71;
  __src[5] = v116;
  __src[6] = v110;
  __src[7] = v107;
  __src[8] = v77;
  __src[9] = v79;
  __src[10] = v78;
  __src[11] = v81;
  __src[12] = v80;
  __src[13] = v82;
  __src[14] = v83;
  __src[15] = v102;
  sub_2141E801C((uint64_t)v120, (uint64_t)&__src[16], &qword_253F13428);
  __src[35] = v104;
  sub_2141E801C((uint64_t)v121, (uint64_t)&__src[36], &qword_253F13428);
  sub_2141E801C((uint64_t)v122, (uint64_t)&__src[55], &qword_253F13428);
  LOWORD(__src[74]) = 0;
  __src[75] = 0;
  v85 = swift_allocObject();
  memcpy((void *)(v85 + 16), __src, 0x260uLL);
  return v85 | 0xC000000000000000;
}

unint64_t sub_2143F78E4()
{
  unint64_t result;

  result = qword_254D6E308;
  if (!qword_254D6E308)
  {
    result = MEMORY[0x2199CD934](&unk_214433788, &type metadata for PointMark.MakeList);
    atomic_store(result, (unint64_t *)&qword_254D6E308);
  }
  return result;
}

uint64_t sub_2143F7928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2142B67FC(*(_DWORD *)(v1 + 16), a1);
}

ValueMetadata *type metadata accessor for PointMark()
{
  return &type metadata for PointMark;
}

uint64_t initializeBufferWithCopyOfBuffer for PointMark.MakeList(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PointMark.MakeList(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PointMark.MakeList(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PointMark.MakeList()
{
  return &type metadata for PointMark.MakeList;
}

uint64_t sub_2143F79B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ChartContentList.Item();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143F79F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v3, v4, v5, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v7, *(_QWORD *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(_QWORD *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v9, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), v10, *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v11, v12, v13, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v14, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), v15, *(_QWORD *)(v0 + 440), v16);
  }
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(_QWORD *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v17, *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), v18, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), v19, v20, v21, *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), v22, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), v23, *(_QWORD *)(v0 + 592), v24);
  }
  return swift_deallocObject();
}

uint64_t sub_2143F7C48()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214425388();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_BYTE *sub_2143F7CC0(char *a1)
{
  swift_allocObject();
  return sub_2143F89E4(a1);
}

void sub_2143F7CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  _BYTE v18[24];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v4 = sub_214425388();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v18[-v9 - 8];
  v11 = *(_QWORD *)(v3 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(&v18[-v9 - 8], a1, v3);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v3);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v8, v10, v4);
  v12 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 248);
  swift_beginAccess();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v12, v8, v4);
  swift_endAccess();
  sub_2143F87CC();
  *(_BYTE *)(v1 + 16) = 1;
  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = v13 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_2143F8D74(v15, (uint64_t)v18);
      Strong = swift_weakLoadStrong();
      sub_2143F8DBC((uint64_t)v18);
      if (Strong)
      {
        *(_BYTE *)(Strong + 17) = 1;
        swift_release();
      }
      v15 += 8;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2143F7E84(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[8];

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 240);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 248), 1, 1, v7);
  v8 = (_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 256));
  *v8 = 0;
  v8[1] = 0;
  *(_WORD *)(v3 + 16) = 256;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v9;
  if (!(a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = v7;
    v24[3] = a2;
    v24[4] = a3;
    v25 = (uint64_t *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 256));
    v26 = *v25;
    *v25 = (uint64_t)sub_2143F8E9C;
    v25[1] = (uint64_t)v24;
    sub_2141D972C(v26);
    return v3;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v10 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v10 >= 1)
  {
    v27 = a2;
    v28 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v12 = 0;
      do
      {
        v13 = MEMORY[0x2199CCE3C](v12, a1);
        swift_weakInit();
        v14 = *(_QWORD **)(v13 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v13 + 32) = v14;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v14 = sub_214221F04(0, v14[2] + 1, 1, v14);
          *(_QWORD *)(v13 + 32) = v14;
        }
        v17 = v14[2];
        v16 = v14[3];
        if (v17 >= v16 >> 1)
        {
          v14 = sub_214221F04((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
          *(_QWORD *)(v13 + 32) = v14;
        }
        ++v12;
        v14[2] = v17 + 1;
        sub_2141E801C((uint64_t)v29, (uint64_t)&v14[v17 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v10 != v12);
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = *(_QWORD *)(a1 + 8 * v18 + 32);
        swift_weakInit();
        v20 = *(_QWORD **)(v19 + 32);
        swift_retain();
        v21 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v19 + 32) = v20;
        if ((v21 & 1) == 0)
        {
          v20 = sub_214221F04(0, v20[2] + 1, 1, v20);
          *(_QWORD *)(v19 + 32) = v20;
        }
        v23 = v20[2];
        v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          v20 = sub_214221F04((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
          *(_QWORD *)(v19 + 32) = v20;
        }
        ++v18;
        v20[2] = v23 + 1;
        sub_2141E801C((uint64_t)v29, (uint64_t)&v20[v23 + 4], &qword_253F13188);
        swift_release();
      }
      while (v10 != v18);
    }
    swift_bridgeObjectRelease();
    a2 = v27;
    a3 = v28;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_2143F8154(_QWORD *a1)
{
  if (qword_254D68EC8 != -1)
    swift_once();
  *a1 = qword_254D760A8;
  return 0;
}

double sub_2143F81A8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 104) = -1;
  return result;
}

double sub_2143F81C8@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 96) = -1;
  return result;
}

uint64_t sub_2143F81E4@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[136];

  sub_21421C37C((uint64_t)v3);
  return sub_2141E801C((uint64_t)v3, a1, &qword_253F149E8);
}

uint64_t sub_2143F8224@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v4 = sub_214425388();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - v6;
  sub_2143F8874();
  v8 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 248);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v3) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v7, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2143F8368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)@<X0>(uint64_t@<X8>);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v3 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 256));
  v4 = *v3;
  v5 = v3[1];
  if (*v3)
  {
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = *(_QWORD *)(v2 + 240);
    v6[3] = v4;
    v6[4] = v5;
    v7 = sub_2143F8EE0;
  }
  else
  {
    v7 = 0;
  }
  v11 = (uint64_t)v7;
  sub_2141D975C(v4);
  v8 = MEMORY[0x24BEE1328];
  swift_getTupleTypeMetadata2();
  swift_getFunctionTypeMetadata0();
  sub_214425388();
  sub_21440557C((void (*)(char *, char *))sub_2143F8EC4, v1, MEMORY[0x24BEE4078], v8, v9, (uint64_t)&v12);
  sub_2141D972C(v11);
  return (v12 == 2) | v12 & 1u;
}

uint64_t sub_2143F8474@<X0>(void (**a1)(__n128)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  v35 = a2;
  v36 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 240);
  v5 = sub_214425388();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31 = TupleTypeMetadata2;
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - v15;
  v18 = *(int *)(v17 + 48);
  (*a1)(v14);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v20(v16, v12, v4);
  v30 = v20;
  v21 = v12[v18];
  v16[v18] = v21;
  v22 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v12, v16, v4);
  v12[v22] = v21;
  v20(v9, v12, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v9, 0, 1, v4);
  v24 = v32;
  v23 = v33;
  v25 = v9;
  v26 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v32, v25, v34);
  v27 = v35 + *(_QWORD *)(*(_QWORD *)v35 + 248);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 40))(v27, v24, v26);
  swift_endAccess();
  v28 = *(int *)(v31 + 48);
  v30(v12, v16, v4);
  v12[v28] = v21;
  *v36 = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v4);
}

uint64_t sub_2143F86A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 248);
  v2 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return sub_2141D972C(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 256)));
}

uint64_t sub_2143F86F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 248);
  v2 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_2141D972C(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 256)));
  return v0;
}

uint64_t sub_2143F8768()
{
  sub_2143F86F0();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Signal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Signal);
}

uint64_t sub_2143F8798()
{
  return swift_initClassMetadata2();
}

void sub_2143F87CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[8];

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v1 = *(_QWORD *)(v0 + 32);
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      v3 = v1 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_2143F8D74(v3, (uint64_t)v4);
        if (swift_weakLoadStrong())
        {
          sub_2143F87CC();
          swift_release();
        }
        sub_2143F8DBC((uint64_t)v4);
        v3 += 8;
        --v2;
      }
      while (v2);
      swift_bridgeObjectRelease();
    }
    *(_WORD *)(v0 + 16) = 0;
  }
}

void sub_2143F8874()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  _BYTE v11[8];

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return;
  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_2144256AC();
    if (v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_4:
      if (v3 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v3; ++i)
      {
        if ((v2 & 0xC000000000000001) != 0)
          v5 = MEMORY[0x2199CCE3C](i, v2);
        else
          v5 = swift_retain();
        sub_2143F8874(v5);
        swift_release();
      }
    }
  }
  v6 = swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 17) == 1 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 224))(v6) & 1) == 0)
  {
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = v7 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_2143F8D74(v9, (uint64_t)v11);
        Strong = swift_weakLoadStrong();
        sub_2143F8DBC((uint64_t)v11);
        if (Strong)
        {
          *(_BYTE *)(Strong + 17) = 1;
          swift_release();
        }
        v9 += 8;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
  }
  *(_BYTE *)(v1 + 16) = 1;
}

_BYTE *sub_2143F89E4(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, char *, uint64_t);
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  void (*v21)(_BYTE *, char *, uint64_t);
  uint64_t v23;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v23 = sub_214425388();
  v4 = *(_QWORD *)(v23 - 8);
  v5 = MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(v3 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, a1, v3);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v3;
  v16 = v15 + v14;
  v17 = *(void (**)(unint64_t, char *, uint64_t))(v11 + 32);
  v17(v16, v13, v3);
  v18 = (_BYTE *)sub_2143F7E84(MEMORY[0x24BEE4AF8], (uint64_t)sub_2143F8E54, v15);
  v17((unint64_t)v10, a1, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v3);
  v19 = v23;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v10, v23);
  v20 = &v18[*(_QWORD *)(*(_QWORD *)v18 + 248)];
  swift_beginAccess();
  v21 = *(void (**)(_BYTE *, char *, uint64_t))(v4 + 40);
  swift_retain();
  v21(v20, v7, v19);
  swift_endAccess();
  v18[16] = 1;
  swift_release();
  return v18;
}

uint64_t type metadata accessor for SourceSignal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SourceSignal);
}

uint64_t sub_2143F8BC4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnySignal()
{
  return objc_opt_self();
}

uint64_t sub_2143F8C24(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2143F8C44(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Weak);
}

uint64_t sub_2143F8C78()
{
  sub_214425874();
  sub_214424ECC();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_2143F8CC0()
{
  sub_214424ECC();
  return sub_214425880();
}

uint64_t sub_2143F8CEC()
{
  sub_214425874();
  sub_214424ECC();
  sub_214425880();
  return sub_2144258B0();
}

unint64_t sub_2143F8D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D6E358;
  if (!qword_254D6E358)
  {
    v1 = type metadata accessor for AnySignal();
    result = MEMORY[0x2199CD934](&unk_2144338D0, v1);
    atomic_store(result, (unint64_t *)&qword_254D6E358);
  }
  return result;
}

uint64_t sub_2143F8D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F13188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143F8DBC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_253F13188);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143F8DFC()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_2143F8E54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80)));
}

uint64_t sub_2143F8E78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2143F8E9C()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 24))();
  return 0;
}

uint64_t sub_2143F8EC4@<X0>(void (**a1)(__n128)@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_2143F8474(a1, v2, a2);
}

uint64_t sub_2143F8EE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  v4 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  result = v3(a1);
  *(_BYTE *)(a1 + v4) = result & 1;
  return result;
}

uint64_t AnyAxisContent.init(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2141D8DC0(a1, a2);
}

uint64_t AnyAxisContent.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2141D7878(v1, a1);
}

uint64_t AnyAxisContent.init<A>(erasing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;

  a4[3] = a2;
  a4[4] = a3;
  v6 = sub_2141D8DD8(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v6, a1, a2);
}

uint64_t static AnyAxisContent._makeAxisContent(_:_:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[4];
  v2 = sub_2141E88D0(a1, a1[3]);
  return (*(uint64_t (**)(_QWORD *))(v1 + 8))(v2);
}

uint64_t sub_2143F8FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, a2, a2, a3);
}

uint64_t sub_2143F9004(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = a1[3];
  v2 = a1[4];
  v3 = sub_2141E88D0(a1, v1);
  return sub_2143F8FD8((uint64_t)v3, v1, v2);
}

uint64_t static Optional<A>._makeAxisContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;

  v8 = sub_214425388();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a2) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *a4 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a2);
    (*(void (**)(char *))(a3 + 8))(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a2);
  }
  return result;
}

uint64_t sub_2143F917C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return static Optional<A>._makeAxisContent(_:_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t static BuilderConditional<>._makeAxisContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD v26[2];

  v26[0] = a5;
  v26[1] = a6;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for BuilderConditional.Storage(0, v18, v19, v19);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))((char *)v26 - v22, a1, v20, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v23, a3);
    (*(void (**)(char *))(v26[0] + 8))(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v23, a2);
    (*(void (**)(char *))(a4 + 8))(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, a2);
  }
}

uint64_t sub_2143F9310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static BuilderConditional<>._makeAxisContent(_:_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

void static BuilderEmpty._makeAxisContent(_:_:)(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t dispatch thunk of static AxisContent._makeAxisContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for _AxisContentInputs()
{
  return &type metadata for _AxisContentInputs;
}

ValueMetadata *type metadata accessor for _AxisContentOutputs()
{
  return &type metadata for _AxisContentOutputs;
}

ValueMetadata *type metadata accessor for AnyAxisContent()
{
  return &type metadata for AnyAxisContent;
}

uint64_t Plot.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t static Plot._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;

  v5 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *))(a4 + 32))(a1, &v5);
}

uint64_t static Plot._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  uint64_t result;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ObjCClassFromMetadata;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[19];
  _QWORD __src[37];
  CGRect v83;

  v9 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)a2 & 1) == 0)
  {
    LOBYTE(__src[0]) = 0;
LABEL_13:
    __src[1] = v9;
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(a4 + 40))(a1, __src, a3, a4);
  }
  v10 = v9 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v12 = (uint64_t *)(v10 + v11[24]);
  v13 = (uint64_t *)(v10 + v11[25]);
  v14 = v13[3];
  v15 = (uint64_t *)(v10 + v11[26]);
  v16 = v15[1];
  if (v12[3])
    v17 = 0;
  else
    v17 = v14 == 0;
  if (v17 && v16 == 0)
  {
    LOBYTE(__src[0]) = 1;
    goto LABEL_13;
  }
  v19 = v11;
  v72 = a5;
  v73 = a1;
  v79 = v9;
  v80 = v12[3];
  v20 = v12[1];
  v22 = *v13;
  v21 = v13[1];
  v75 = *v13;
  v76 = v21;
  v77 = *v12;
  v23 = v13[2];
  v70 = v12[2];
  v71 = *v15;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  v78 = v14;
  swift_retain();
  sub_2141EF2B4(v22, v21, v23, v14);
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v77, v20, v70, v80);
  sub_21422F7F0(v77, v20, v70, v80);
  v24 = (uint64_t *)(v10 + v19[25]);
  v25 = *v24;
  v26 = v24[1];
  v27 = v24[2];
  v28 = v24[3];
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  sub_21422F7F0(v25, v26, v27, v28);
  v29 = (_QWORD *)(v10 + v19[26]);
  *v29 = 0;
  v29[1] = 0;
  swift_bridgeObjectRelease();
  LOBYTE(__src[0]) = 1;
  __src[1] = v79;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t))(a4 + 40))(v81, v73, __src, a3, a4);
  v74 = v81[0];
  v30 = (uint64_t *)(v10 + v19[24]);
  v31 = *v30;
  v32 = v30[1];
  v33 = v30[2];
  v34 = v30[3];
  *v30 = v77;
  v30[1] = v20;
  v30[2] = v70;
  v30[3] = v80;
  v35 = v80;
  sub_2141EF2B4(v77, v20, v70, v80);
  sub_21422F7F0(v31, v32, v33, v34);
  v36 = (uint64_t *)(v10 + v19[25]);
  v37 = *v36;
  v38 = v36[1];
  v39 = v36[2];
  v40 = v36[3];
  *v36 = v75;
  v36[1] = v76;
  v36[2] = v23;
  v36[3] = v78;
  sub_2141EF2B4(v75, v76, v23, v78);
  sub_21422F7F0(v37, v38, v39, v40);
  v41 = (_QWORD *)(v10 + v19[26]);
  v42 = v71;
  *v41 = v71;
  v41[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_2142E82A0(v74);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_release();
  v83.origin.x = v44;
  v83.origin.y = v46;
  v83.size.width = v48;
  v83.size.height = v50;
  if (CGRectEqualToRect(v83, *MEMORY[0x24BDBF070]))
  {
    sub_21422F7F0(v75, v76, v23, v78);
    sub_21422F7F0(v77, v20, v70, v80);
    swift_release();
    result = swift_bridgeObjectRelease();
    *v72 = v74;
  }
  else
  {
    v52 = v20;
    v68 = *(_QWORD *)(*(_QWORD *)(v79 + 16) + 24);
    v69 = v16;
    if (v80)
    {
      v53 = v70 & 1;
      v54 = v76;
      v55 = v75;
      v56 = v77;
    }
    else
    {
      sub_2144242CC();
      type metadata accessor for FindClass();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v58 = objc_opt_self();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59 = (void *)v58;
      v42 = v71;
      v60 = objc_msgSend(v59, sel_bundleForClass_, ObjCClassFromMetadata);
      v56 = sub_21442480C();
      v52 = v61;
      v63 = v62;
      v35 = v64;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 = v63 & 1;
      v54 = v76;
      v55 = v75;
    }
    v65 = v53;
    sub_2141EF22C((uint64_t)v81);
    sub_2141D8BF8(&qword_253F15D40);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_214426EF0;
    *(_QWORD *)(v66 + 32) = v74;
    swift_release();
    __src[0] = v68;
    *(CGFloat *)&__src[1] = v44;
    *(CGFloat *)&__src[2] = v46;
    *(CGFloat *)&__src[3] = v48;
    *(CGFloat *)&__src[4] = v50;
    __src[5] = v42;
    __src[6] = v69;
    __src[7] = v56;
    __src[8] = v52;
    __src[9] = v65;
    __src[10] = v35;
    __src[11] = v55;
    __src[12] = v54;
    __src[13] = v23;
    __src[14] = v78;
    sub_214251E04((uint64_t)v81, (uint64_t)&__src[15]);
    __src[34] = v66;
    __src[35] = 0;
    v67 = swift_allocObject();
    result = (uint64_t)memcpy((void *)(v67 + 16), __src, 0x120uLL);
    *v72 = v67 | 0xB000000000000000;
  }
  return result;
}

uint64_t sub_2143F98D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 280);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 272)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), v2, *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), v3, v4, v5, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), v6, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), v7, *(_QWORD *)(v0 + 272), v8);
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2143F99D8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return static Plot._layoutChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2143F99E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return static Plot._renderChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_2143F99F0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143F9AA0 + 4 * byte_214433A38[(v7 - 1)]))();
}

void sub_2143F9AF0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for Plot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Plot);
}

uint64_t sub_2143F9CAC()
{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  sub_2143FBA5C();
  v1 = v0;
  swift_release_n();
  return v1;
}

uint64_t sub_2143F9D1C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];
  char v21;

  v4 = v3;
  sub_214400960(v4, (uint64_t)v20);
  if ((v21 & 1) == 0)
  {
    sub_2141D8DC0(v20, (uint64_t)v17);
    if (a3 != 255)
    {
      if (a3 == 2)
      {
        v10 = v18;
        v11 = v19;
        sub_2141E88D0(v17, v18);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(a1, a2, v10, v11);
        return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
      }
      sub_2141E60A4(a1, a2, a3);
    }
    v14 = v18;
    v15 = v19;
    sub_2141E88D0(v17, v18);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v15 + 24))(0, 0, v14, v15);
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
  }
  sub_2141D8DC0(v20, (uint64_t)v17);
  if (a3 == 255)
  {
LABEL_9:
    v12 = v18;
    v13 = v19;
    sub_2141E88D0(v17, v18);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v13 + 24))(0, 1, v12, v13);
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
  }
  if (a3)
  {
    sub_2141E60A4(a1, a2, a3);
    goto LABEL_9;
  }
  v8 = v18;
  v9 = v19;
  sub_2141E88D0(v17, v18);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 24))(a1, 0, v8, v9);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
}

_QWORD *sub_2143F9E84(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  __int128 v21[3];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v7 = v6;
  sub_2141E6220(v7, (uint64_t)v21);
  sub_2141D8DC0(v21, (uint64_t)v22);
  if (a3 == 255)
    goto LABEL_7;
  if (a3)
  {
    sub_2141E60A4(a1, a2, a3);
    goto LABEL_7;
  }
  if (a6)
  {
    if (a6 == 255)
    {
LABEL_8:
      v14 = v23;
      v15 = v24;
      sub_2141E88D0(v22, v23);
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v15 + 24))(0, 0, 1, v14, v15);
      return (_QWORD *)_s6Charts15AnyChartContentVwxx_0((uint64_t)v22);
    }
LABEL_7:
    sub_2141E60A4(a4, a5, a6);
    goto LABEL_8;
  }
  v17 = v23;
  v18 = v24;
  result = sub_2141E88D0(v22, v23);
  if (*(double *)&a4 >= *(double *)&a1)
    v19 = *(double *)&a1;
  else
    v19 = *(double *)&a4;
  if (*(double *)&a1 > *(double *)&a4)
    v20 = *(double *)&a1;
  else
    v20 = *(double *)&a4;
  if (v19 <= v20)
  {
    (*(void (**)(double, double, _QWORD, uint64_t, uint64_t))(v18 + 24))(COERCE_DOUBLE(*(_QWORD *)&v19), COERCE_DOUBLE(*(_QWORD *)&v20), 0, v17, v18);
    return (_QWORD *)_s6Charts15AnyChartContentVwxx_0((uint64_t)v22);
  }
  __break(1u);
  return result;
}

uint64_t sub_2143F9FB8@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = a2(*a1);
  *a3 = result;
  return result;
}

void sub_2143F9FE4(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t AssociatedConformanceWitness;
  void (*v85)(uint64_t *__return_ptr, uint64_t, uint64_t);
  _QWORD v86[4];
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;

  v133 = a5;
  v132 = a3;
  v127 = a2;
  v130 = a6;
  v131 = a1;
  v87 = sub_214423B70();
  v86[3] = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v102 = v7;
  v104 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_214425388();
  v120 = *(_QWORD *)(v8 - 8);
  v121 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v86[2] = (char *)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v86[1] = (char *)v86 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v86[0] = (char *)v86 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v106 = (char *)v86 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v105 = (char *)v86 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v103 = (char *)v86 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v101 = (char *)v86 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v100 = (char *)v86 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v99 = (char *)v86 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v98 = (char *)v86 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v97 = (char *)v86 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v96 = (char *)v86 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v95 = (char *)v86 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v94 = (char *)v86 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v93 = (char *)v86 - v37;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = sub_214425388();
  v122 = *(_QWORD *)(v39 - 8);
  v123 = v39;
  v40 = MEMORY[0x24BDAC7A8](v39);
  v118 = (char *)v86 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x24BDAC7A8](v40);
  v117 = (char *)v86 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v116 = (char *)v86 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v115 = (char *)v86 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v114 = (char *)v86 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v113 = (char *)v86 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v112 = (char *)v86 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v111 = (char *)v86 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v110 = (char *)v86 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v109 = (char *)v86 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v108 = (char *)v86 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v107 = (char *)v86 - v63;
  v125 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v64 = *(_QWORD *)(v125 + 64);
  v65 = MEMORY[0x24BDAC7A8](v62);
  v92 = (char *)v86 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = MEMORY[0x24BDAC7A8](v65);
  v91 = (char *)v86 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v90 = (char *)v86 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v89 = (char *)v86 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v88 = (char *)v86 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  v75 = MEMORY[0x24BDAC7A8](v74);
  v76 = MEMORY[0x24BDAC7A8](v75);
  v77 = MEMORY[0x24BDAC7A8](v76);
  v78 = MEMORY[0x24BDAC7A8](v77);
  v79 = MEMORY[0x24BDAC7A8](v78);
  v80 = MEMORY[0x24BDAC7A8](v79);
  v124 = (char *)v86 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  v129 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v119 = (char *)v86 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v85 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v126 = AssociatedTypeWitness;
  v85(&v134, AssociatedTypeWitness, AssociatedConformanceWitness);
  __asm { BR              X10 }
}

uint64_t sub_2143FA6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  sub_21440148C();
  v2 = *(_QWORD *)(v1 - 336);
  v3 = *(_QWORD *)(v1 - 136);
  v4 = *(_QWORD *)(v1 - 168);
  v5 = *(_QWORD *)(v1 - 160);
  v6 = *(_DWORD *)(v1 - 124);
  v7 = *(_QWORD *)(v1 - 120);
  sub_2143FCBD4(v3, v2);
  sub_2141E60B8(v3, v4, v6);
  v9 = *(_QWORD *)(v1 - 184);
  v8 = *(_QWORD *)(v1 - 176);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v2, 1, v8) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 216) + 8))(v2, *(_QWORD *)(v1 - 208));
    v15 = *(_QWORD *)(v1 - 152);
    v17 = *(_QWORD *)(v1 - 144);
LABEL_7:
    v14 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, v14, 1, v5);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v0, v2, v8);
  v10 = *(_QWORD *)(v1 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v0, v8);
  v11 = *(_QWORD *)(v1 - 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10, v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0, v8);
  v15 = *(_QWORD *)(v1 - 152);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v11, 1, v5);
  v17 = *(_QWORD *)(v1 - 144);
  if (v16)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 232) + 8))(v11, *(_QWORD *)(v1 - 224));
    goto LABEL_7;
  }
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v13 = *(_QWORD *)(v1 - 240);
  v12(v13, v11, v5);
  v12(v17, v13, v5);
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, v14, 1, v5);
}

uint64_t sub_2143FB404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v10, v9);
  v12 = *(_QWORD *)(a3 - 8);
  if (v8 == *(_QWORD *)(v12 + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a4, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2143FB4C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = v17;
  if (v17 == 14)
  {
    v12 = type metadata accessor for CategoryOptionalValueBindingBox(0, a2, a3, v10);
    *(_QWORD *)(a4 + 24) = v12;
    v13 = &unk_214434418;
  }
  else
  {
    v12 = type metadata accessor for NumberOptionalValueBindingBox(0, a2, a3, v10);
    *(_QWORD *)(a4 + 24) = v12;
    v13 = &unk_214434434;
  }
  *(_QWORD *)(a4 + 32) = MEMORY[0x2199CD934](v13, v12);
  v14 = sub_2141D8DD8((uint64_t *)a4);
  sub_214425388();
  v15 = sub_214424B3C();
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a1, v15);
  *(_BYTE *)(a4 + 40) = v11 != 14;
  return result;
}

uint64_t sub_2143FB5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = v16 != 13;
  v13 = type metadata accessor for NumberOptionalRangeBindingBox(0, a2, a3, a4);
  *(_QWORD *)(a5 + 24) = v13;
  *(_QWORD *)(a5 + 32) = MEMORY[0x2199CD934](&unk_2144343FC, v13);
  v14 = sub_2141D8DD8((uint64_t *)a5);
  result = sub_2143FF638(a1, (uint64_t)v14);
  *(_BYTE *)(a5 + 40) = v12;
  return result;
}

uint64_t sub_2143FB6FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = v17;
  if (v17 == 14)
  {
    v12 = type metadata accessor for CategoryValueBindingBox(0, a2, a3, v10);
    *(_QWORD *)(a4 + 24) = v12;
    v13 = &unk_214434450;
  }
  else
  {
    v12 = type metadata accessor for NumberValueBindingBox(0, a2, a3, v10);
    *(_QWORD *)(a4 + 24) = v12;
    v13 = &unk_21443446C;
  }
  *(_QWORD *)(a4 + 32) = MEMORY[0x2199CD934](v13, v12);
  v14 = sub_2141D8DD8((uint64_t *)a4);
  v15 = sub_214424B3C();
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a1, v15);
  *(_BYTE *)(a4 + 40) = v11 != 14;
  return result;
}

uint64_t sub_2143FB82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];
  char v11;

  sub_21440092C(v0, (uint64_t)v10);
  if ((v11 & 1) != 0)
  {
    sub_2141D8DC0(v10, (uint64_t)v7);
    v1 = v8;
    v2 = v9;
    sub_2141E88D0(v7, v8);
    v3 = (*(double (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  }
  else
  {
    sub_2141D8DC0(v10, (uint64_t)v7);
    v4 = v8;
    v5 = v9;
    sub_2141E88D0(v7, v8);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  return v3;
}

uint64_t PrimitivePlottableProtocol.primitivePlottable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t PrimitivePlottableProtocol.init(primitivePlottable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a3, a1, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a3, 0, 1, a2);
}

void sub_2143FB968(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;

  v6 = sub_214423B70();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  if (v10 == a1)
  {
    sub_2144239E4();
    v12 = *(_QWORD *)(a1 - 8);
    if (v8 == *(_QWORD *)(v12 + 64))
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a2, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
      (*(void (**)(char *, uint64_t))(v7 + 8))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
      return;
    }
  }
  else
  {
    v14 = a3;
    v11 = *(_QWORD *)(a1 - 8);
    if (*(_QWORD *)(v11 + 64) == 8)
    {
      (*(void (**)(uint64_t, double *, uint64_t, __n128))(v11 + 16))(a2, &v14, a1, v9);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_2143FBA5C()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  __asm { BR              X10 }
}

uint64_t (*sub_2143FBAFC())(uint64_t a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = sub_21440148C();
  v5 = (_QWORD *)swift_allocObject();
  v6 = MEMORY[0x24BEE3E50];
  v5[2] = v3;
  v5[3] = v6;
  v5[4] = v2;
  v5[5] = &protocol witness table for Int8;
  v5[6] = v4;
  v5[7] = v1;
  v5[8] = v0;
  swift_retain();
  return sub_214401524;
}

void sub_2143FBD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = sub_214401228();
  v4 = (_QWORD *)swift_allocObject();
  v5 = MEMORY[0x24BEE4678];
  v4[2] = v2;
  v4[3] = v5;
  v4[4] = v1;
  v4[5] = &protocol witness table for Float16;
  v4[6] = v3;
  v4[7] = v0;
  JUMPOUT(0x2143FBD64);
}

void sub_2143FBE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)swift_allocObject();
  v4 = MEMORY[0x24BEE13C8];
  v3[2] = v2;
  v3[3] = v4;
  v3[4] = v1;
  v3[5] = &protocol witness table for Double;
  v3[6] = v0;
  JUMPOUT(0x2143FBD64);
}

uint64_t sub_2143FBEE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v9[1] = round(*(double *)MEMORY[0x24BDAC7A8](a1));
  sub_2142B585C();
  sub_214424D34();
  result = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(result - 8);
  if (v6 == *(_QWORD *)(v8 + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a3, (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), result);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2143FBFEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, double *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  double v11;
  char v12;
  uint64_t v13;
  _QWORD v14[2];

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, a2, (uint64_t)v8);
  if (sub_2144253DC() < 65)
  {
    v12 = sub_2144253E8();
    v13 = sub_2144253D0();
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    if ((v12 & 1) != 0)
      v11 = (double)v13;
    else
      v11 = (double)(unint64_t)v13;
  }
  else
  {
    sub_2142B585C();
    sub_21438CF18();
    sub_214424D1C();
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    v11 = *(double *)&v14[1];
  }
  *a3 = v11;
  return result;
}

uint64_t sub_2143FC160(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(char *, char *), uint64_t a10, void (*a11)(char *, char *))
{
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a1;
  v42 = a4;
  v43 = a5;
  v44 = a6;
  v45 = a7;
  v46 = a8;
  v16 = sub_2141D8BF8(&qword_253F12170);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = sub_21440155C();
  v47 = sub_2141D0320(a9, (uint64_t)v41, v16, AssociatedTypeWitness, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
  v35 = a4;
  v36 = a5;
  v37 = a6;
  v38 = a7;
  v39 = a8;
  v40 = a4;
  v20 = sub_214425094();
  MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v20);
  v21 = sub_214424F50();
  swift_bridgeObjectRelease();
  v22 = a2(v21);
  swift_bridgeObjectRelease();
  v47 = v22;
  v30 = a4;
  v31 = a5;
  v32 = a6;
  v33 = a7;
  v34 = a8;
  v23 = sub_214425094();
  v24 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v23);
  v26 = sub_2141D0320(a11, (uint64_t)v29, v23, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v24, MEMORY[0x24BEE40A8], v25);
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_2143FC31C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  sub_214424D28();
  result = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(result - 8);
  if (v6 == *(_QWORD *)(v8 + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a3, (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), result);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2143FC400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)v13 - v9, a1);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32))(v10, a3, a5);
}

uint64_t sub_2143FC4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, a3, (uint64_t)v6);
  sub_2142B585C();
  return sub_214424D10();
}

uint64_t sub_2143FC5A4(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[14];
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v12 = sub_214425094();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v12);
  v30 = sub_2141D0320((void (*)(char *, char *))sub_2144016E8, (uint64_t)v25, v12, AssociatedTypeWitness, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v15);
  v24[8] = a4;
  v24[9] = a5;
  v24[10] = a6;
  v24[11] = a7;
  v24[12] = a4;
  v16 = sub_214425094();
  MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v16);
  v17 = sub_214424F50();
  swift_bridgeObjectRelease();
  v18 = a2(v17);
  swift_bridgeObjectRelease();
  v30 = v18;
  v24[2] = a4;
  v24[3] = a5;
  v24[4] = a6;
  v24[5] = a7;
  v19 = sub_214425094();
  v20 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v19);
  v22 = sub_2141D0320((void (*)(char *, char *))sub_214401728, (uint64_t)v24, v19, a5, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v21);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_2143FC760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(result - 8);
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) == *(_QWORD *)(v7 + 64))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3, a1, result);
  __break(1u);
  return result;
}

uint64_t sub_2143FC7E8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[10];
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v24 = a4;
  v25 = a5;
  v8 = sub_2141D8BF8(&qword_253F12170);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_21440155C();
  v11 = MEMORY[0x24BEE4078];
  v12 = MEMORY[0x24BEE40A8];
  v26 = sub_2141D0320((void (*)(char *, char *))sub_2144017A4, (uint64_t)v23, v8, AssociatedTypeWitness, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v13);
  v22[6] = a4;
  v22[7] = a5;
  v22[8] = a4;
  v14 = sub_214425094();
  MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v14);
  v15 = sub_214424F50();
  swift_bridgeObjectRelease();
  v16 = a2(v15);
  swift_bridgeObjectRelease();
  v26 = v16;
  v22[2] = a4;
  v22[3] = a5;
  v17 = sub_214425094();
  v18 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v17);
  v20 = sub_2141D0320((void (*)(char *, char *))sub_214400FE4, (uint64_t)v22, v17, MEMORY[0x24BEE13C8], v11, v18, v12, v19);
  swift_bridgeObjectRelease();
  return v20;
}

void sub_2143FC988(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t AssociatedTypeWitness;

  v3 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB968(AssociatedTypeWitness, a2, v3);
}

uint64_t sub_2143FC9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v13 - v9;
  (*(void (**)(char *, uint64_t, __n128))(v11 + 16))((char *)v13 - v9, a1, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 32))(v10, a3, a4);
}

uint64_t Plottable<>.primitivePlottable.getter()
{
  uint64_t v1;

  sub_214424FB0();
  return v1;
}

uint64_t Plottable<>.init(primitivePlottable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v8 = sub_214425388();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v15 - v10;
  v15[0] = a1;
  v15[1] = a2;
  sub_214424FBC();
  v12 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4, v11, a3);
    v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4, v13, 1, a3);
}

uint64_t sub_2143FCBD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  if (v3)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    sub_2142B585C();
    sub_214424D34();
    v6 = swift_getAssociatedTypeWitness();
    if (swift_dynamicCast())
    {
      v7 = a2;
      v8 = 0;
    }
    else
    {
      v7 = a2;
      v8 = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v7, v8, 1, v6);
  }
}

uint64_t sub_2143FCD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  if (v3)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    sub_214424D28();
    v6 = swift_getAssociatedTypeWitness();
    if (swift_dynamicCast())
    {
      v7 = a2;
      v8 = 0;
    }
    else
    {
      v7 = a2;
      v8 = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v7, v8, 1, v6);
  }
}

void sub_2143FCE70()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  __asm { BR              X10 }
}

uint64_t sub_2143FCF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3;

  sub_2143FB404(v1, v0, MEMORY[0x24BEE3E50], (uint64_t)&v3);
  *(double *)&result = (double)v3;
  return result;
}

void sub_2143FD0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10)
{
  uint64_t v10;
  uint64_t v11;

  sub_2143FB404(v11, v10, MEMORY[0x24BEE4678], (uint64_t)&a10);
  _H0 = a10;
  __asm { FCVT            D0, H0 }
  JUMPOUT(0x2143FD0B8);
}

void sub_2143FD108(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  sub_2143FB404(v2, v1, MEMORY[0x24BEE14E8], (uint64_t)va);
  JUMPOUT(0x2143FD0B8);
}

void sub_2143FD13C(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  sub_2143FB404(v2, v1, MEMORY[0x24BEE13C8], (uint64_t)va);
  JUMPOUT(0x2143FD0BCLL);
}

void sub_2143FD16C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_214400994(v3, v1, v2, v0);
  JUMPOUT(0x2143FD0BCLL);
}

void sub_2143FD190(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  sub_2143FB404(v2, v1, MEMORY[0x24BEE0D00], (uint64_t)va);
  JUMPOUT(0x2143FD0BCLL);
}

uint64_t sub_2143FD1BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 > 1u)
  {
    sub_214425880();
    return sub_214424F14();
  }
  else
  {
    sub_214425880();
    return sub_214425898();
  }
}

uint64_t sub_2143FD238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  sub_214425874();
  sub_2143FD1BC((uint64_t)v5, v1, v2, v3);
  return sub_2144258B0();
}

uint64_t sub_2143FD290(uint64_t a1)
{
  uint64_t v1;

  return sub_2143FD1BC(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

uint64_t sub_2143FD29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  sub_214425874();
  sub_2143FD1BC((uint64_t)v5, v1, v2, v3);
  return sub_2144258B0();
}

uint64_t sub_2143FD2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142AFB5C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2144002E4);
}

void sub_2143FD2FC()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  __asm { BR              X10 }
}

uint64_t sub_2143FD398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  _BYTE v6[96];

  v3 = MEMORY[0x24BEE3E50];
  sub_2143FB404(v2, v0, MEMORY[0x24BEE3E50], (uint64_t)v6);
  v4 = (double)v6[0];
  sub_2143FB404(v1, v0, v3, (uint64_t)v6);
  return *(_QWORD *)&v4;
}

void sub_2143FD7DC()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_2143FD828()
{
  sub_214425880();
  sub_214425898();
  return sub_214425898();
}

uint64_t sub_2143FD874()
{
  sub_214425874();
  sub_2143FD828();
  return sub_2144258B0();
}

uint64_t sub_2143FD8CC()
{
  return sub_2143FD828();
}

uint64_t sub_2143FD8D8()
{
  sub_214425874();
  sub_2143FD828();
  return sub_2144258B0();
}

BOOL sub_2143FD92C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  if (*(double *)a1 == *(double *)a2)
    return *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return 0;
}

void sub_2143FD978()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  __asm { BR              X10 }
}

uint64_t sub_2143FDA14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 - 64) = v3;
  MEMORY[0x24BDAC7A8](a1);
  v10 = v1;
  v11 = v2;
  v5 = sub_214425094();
  v6 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v5);
  return sub_2141D0320((void (*)(char *, char *))sub_2144011C8, (uint64_t)&v9, v5, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

void sub_2143FDED4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 - 64) = v1;
  MEMORY[0x24BDAC7A8](a1);
  v3 = sub_214425094();
  v4 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v3);
  sub_2141D0320((void (*)(char *, char *))sub_214400FE4, (uint64_t)&v6, v3, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  JUMPOUT(0x2143FDEBCLL);
}

void sub_2143FDF60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 - 64) = v1;
  MEMORY[0x24BDAC7A8](a1);
  v3 = sub_214425094();
  v4 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v3);
  sub_2141D0320((void (*)(char *, char *))sub_214400F68, (uint64_t)&v6, v3, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  JUMPOUT(0x2143FDEBCLL);
}

double sub_2143FDFEC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  double result;
  char v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE3E50], (uint64_t)&v6);
  result = (double)v6;
  *a2 = result;
  return result;
}

double sub_2143FE078@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  int16x4_t v5;
  double result;
  __int16 v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE3F30], (uint64_t)&v7);
  v5.i16[0] = v7;
  result = (double)vmovl_s16(v5).i32[0];
  *a2 = result;
  return result;
}

double sub_2143FE10C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  double result;
  int v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE3F88], (uint64_t)&v6);
  result = (double)v6;
  *a2 = result;
  return result;
}

double sub_2143FE19C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X4>, double *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  double result;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, a2, (uint64_t)&v8);
  result = (double)v8;
  *a3 = (double)v8;
  return result;
}

double sub_2143FE230@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  double result;
  char v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE4260], (uint64_t)&v7);
  LOBYTE(v5) = v7;
  result = (double)v5;
  *a2 = result;
  return result;
}

double sub_2143FE2BC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  double result;
  __int16 v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE4478], (uint64_t)&v7);
  LOWORD(v5) = v7;
  result = (double)v5;
  *a2 = result;
  return result;
}

double sub_2143FE348@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  double result;
  int v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE44F0], (uint64_t)&v7);
  LODWORD(v5) = v7;
  result = (double)v5;
  *a2 = result;
  return result;
}

double sub_2143FE3D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X4>, double *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  double result;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, a2, (uint64_t)&v8);
  result = (double)v8;
  *a3 = (double)v8;
  return result;
}

double sub_2143FE468@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  double result;
  __int16 v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE4678], (uint64_t)&v11);
  _H0 = v11;
  __asm { FCVT            D0, H0 }
  *a2 = result;
  return result;
}

double sub_2143FE4F4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  double result;
  float v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE14E8], (uint64_t)&v6);
  result = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_2143FE580(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  int v7;

  v4 = *(_QWORD **)a1;
  v5 = *(unsigned __int8 *)(a1 + 8);
  v6 = *(_QWORD **)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      if (v7 != 1)
        return 0;
      return sub_21420ED58((uint64_t)v4, (uint64_t)v6);
    }
    if (v7 == 2)
      return sub_21420EDC4(v4, v6);
  }
  else if (!v7)
  {
    return sub_21420ED58((uint64_t)v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t sub_2143FE5CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_214424B3C();
  MEMORY[0x2199CC440](v5);
  sub_2143FCE70();
  v7 = v6;
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v9 >= 2)
    return v7;
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2143FE6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_214425388();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v19 - v16;
  sub_2143F9FE4(a1, a2, 2, v6, *(_QWORD *)(a3 + 24), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v10, v6);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v6);
  sub_214424B3C();
  sub_214424B30();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v6);
}

uint64_t sub_2143FE83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2143FEAD4(a1, a2, *(_QWORD *)(a3 + 16), a4, (uint64_t)sub_2144041B0) & 1;
}

uint64_t sub_2143FE860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_214424B3C();
  MEMORY[0x2199CC440](v5);
  sub_2143FCE70();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v11 >= 2)
  {
    sub_2141E60B8(v7, v9, 2);
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2143FE960(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_214425388();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - v7;
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v17 - v14;
  sub_2143F9FE4(*(uint64_t *)&a2, 0, 0, v4, *(_QWORD *)(a1 + 24), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v8, v4);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v15, v4);
  sub_214424B3C();
  sub_214424B30();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v4);
}

uint64_t sub_2143FEAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;

  v11 = sub_214424B3C();
  v12 = a2;
  v13 = 3;
  sub_2141DB52C(a1, a5, (uint64_t)&v10, v11, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v8);
  return v14;
}

uint64_t sub_2143FEB60(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18[3];
  _BYTE v19[48];
  uint64_t v20;
  uint64_t v21;
  char v22;

  v4 = v3;
  sub_21440092C(v4, (uint64_t)v19);
  v20 = a1;
  v21 = a2;
  v22 = a3;
  if ((v19[40] & 1) != 0)
  {
    sub_21440092C((uint64_t)v19, (uint64_t)v18);
    if (!a3)
    {
      v8 = *(double *)&a1;
      sub_2141D8DC0(v18, (uint64_t)v15);
      v9 = v16;
      v10 = v17;
      sub_2141E88D0(v15, v16);
      (*(void (**)(uint64_t, uint64_t, double))(v10 + 24))(v9, v10, v8);
LABEL_6:
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v15);
      sub_2141E60B8(v20, v21, v22);
      return sub_2143C5C98((uint64_t)v19);
    }
  }
  else
  {
    sub_21440092C((uint64_t)v19, (uint64_t)v18);
    if (a3 == 2)
    {
      sub_2141D8DC0(v18, (uint64_t)v15);
      v11 = v16;
      v12 = v17;
      sub_2141E88D0(v15, v16);
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24);
      swift_bridgeObjectRetain();
      v13(a1, a2, v11, v12);
      goto LABEL_6;
    }
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v18);
  return sub_2141E0750((uint64_t)v19, &qword_254D6E698);
}

uint64_t sub_2143FECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = sub_214425388();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-v9];
  v11 = sub_214424B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = &v19[-v14];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v12 + 16))(&v19[-v14], v3, v11, v13);
  v22 = a1;
  v23 = a2;
  v16 = *(_QWORD *)(a3 + 24);
  v20 = v7;
  v21 = v16;
  sub_2141D8BF8(&qword_253F12230);
  sub_2142B6920((void (*)(char *, char *))sub_21440412C, (uint64_t)v19, MEMORY[0x24BEE4078], v7, v17, (uint64_t)v10);
  swift_bridgeObjectRelease();
  sub_214424B30();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_2143FEDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2143FEF5C(a1, a2, *(_QWORD *)(a3 + 16), a4, (uint64_t)sub_2144041B0) & 1;
}

uint64_t sub_2143FEE18(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = sub_214425388();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-v9];
  v11 = sub_214424B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = &v19[-v14];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v12 + 16))(&v19[-v14], v3, v11, v13);
  v22 = a1;
  v23 = a2 & 1;
  v16 = *(_QWORD *)(a3 + 24);
  v20 = v7;
  v21 = v16;
  sub_2141D8BF8(&qword_254D6EA48);
  sub_2142B6920((void (*)(char *, char *))sub_2144040F4, (uint64_t)v19, MEMORY[0x24BEE4078], v7, v17, (uint64_t)v10);
  sub_214424B30();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_2143FEF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;

  sub_214425388();
  v11 = sub_214424B3C();
  v12 = a2;
  v13 = 3;
  sub_2141DB52C(a1, a5, (uint64_t)&v10, v11, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v8);
  return v14;
}

uint64_t sub_2143FEFEC(uint64_t a1, char a2, uint64_t a3)
{
  return sub_2143FEE18(a1, a2 & 1, a3);
}

uint64_t sub_2143FEFF4(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v5 = v4;
  v23 = a3;
  v22 = a2;
  v8 = a4[2];
  v9 = a4[4];
  v10 = sub_214424EC0();
  v11 = sub_214425388();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - v12;
  v14 = sub_214424B3C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v22 - v17, v5, v14, v16);
  v28 = a1;
  v29 = v22;
  v30 = v23 & 1;
  v19 = a4[3];
  v25 = v8;
  v26 = v19;
  v27 = v9;
  sub_2141D8BF8(&qword_254D6EA50);
  sub_2142B6920((void (*)(char *, char *))sub_214404190, (uint64_t)v24, MEMORY[0x24BEE4078], v10, v20, (uint64_t)v13);
  sub_214424B30();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_2143FF164@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t TupleTypeMetadata2;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v58 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v56 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v49 - v11;
  v60 = a4;
  v57 = sub_214424EC0();
  v55 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v53 = (char *)&v49 - v12;
  v13 = sub_214425388();
  v50 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v49 - v17;
  v19 = *(_QWORD **)(a2 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v59 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v49 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v49 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v49 - v29;
  v31 = *a1;
  v61 = a1[1];
  v32 = a3;
  sub_2143F9FE4(v31, 0, 0, a2, a3, (uint64_t)v18);
  v62 = v19;
  v33 = (unsigned int (*)(char *, uint64_t, uint64_t))v19[6];
  if (v33(v18, 1, a2) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v18, v51);
    __break(1u);
    goto LABEL_7;
  }
  v34 = (void (*)(char *, char *, uint64_t))v62[4];
  v34(v30, v18, a2);
  sub_2143F9FE4(v61, 0, 0, a2, v32, v15);
  if (v33((char *)v15, 1, a2) != 1)
  {
    v34(v27, (char *)v15, a2);
    sub_2144257F0();
    v18 = v59;
    sub_2144257E4();
    v15 = sub_214424E84();
    v35 = (void (*)(char *, uint64_t))v62[1];
    v35(v27, a2);
    v35(v30, a2);
    if ((v15 & 1) != 0)
    {
      v36 = v18;
      v37 = TupleTypeMetadata2;
      v38 = v52;
      v39 = &v52[*(int *)(TupleTypeMetadata2 + 48)];
      v34(v52, v24, a2);
      v34(v39, v36, a2);
      v40 = v56;
      v41 = &v56[*(int *)(v37 + 48)];
      v42 = (void (*)(char *, char *, uint64_t))v62[2];
      v42(v56, v38, a2);
      v42(v41, v39, a2);
      v43 = v53;
      v34(v53, v40, a2);
      v35(v41, a2);
      v44 = &v40[*(int *)(v37 + 48)];
      v34(v40, v38, a2);
      v34(v44, v39, a2);
      v45 = v57;
      v34(&v43[*(int *)(v57 + 36)], v44, a2);
      v35(v40, a2);
      v46 = v55;
      v47 = v58;
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v58, v43, v45);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v45);
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v15, v51);
  __break(1u);
  return result;
}

uint64_t sub_2143FF598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;

  sub_214424EC0();
  sub_214425388();
  v7 = sub_214424B3C();
  v8 = a2;
  v9 = 3;
  sub_2141DB52C(a1, (uint64_t)sub_2144041B0, (uint64_t)&v6, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v4);
  return v10;
}

uint64_t sub_2143FF638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_214424EC0();
  sub_214425388();
  v4 = sub_214424B3C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_2143FF690(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_2143FEFF4(a1, a2, a3 & 1, a4);
}

uint64_t sub_2143FF698(uint64_t a1, uint64_t a2)
{
  return sub_2143FF598(a1, a2);
}

uint64_t sub_2143FF6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142AFB5C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2144005D8);
}

void static Never._primitivePlottableKind.getter()
{
  sub_214425628();
  __break(1u);
}

void Never.primitivePlottable.getter()
{
  sub_214425628();
  __break(1u);
}

void Never.init(primitivePlottable:)()
{
  sub_214425628();
  __break(1u);
}

void sub_2143FF794()
{
  sub_214425628();
  __break(1u);
}

void sub_2143FF7DC()
{
  sub_214425628();
  __break(1u);
}

void sub_2143FF824()
{
  sub_214425628();
  __break(1u);
}

void static Double._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

void sub_2143FF878(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

void static String._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

_QWORD *sub_2143FF890@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

void sub_2143FF89C(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

void static Date._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_2143FF8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t sub_2143FF8CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a3, a1, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a3, 0, 1, a2);
}

void sub_2143FF920(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

void static Float16._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

void sub_2143FF938(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

__int16 sub_2143FF944@<H0>(__int16 *a1@<X8>)
{
  __int16 *v1;
  __int16 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

void static Float._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

void sub_2143FF95C(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

float sub_2143FF968@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

_DWORD *sub_2143FF974@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

double NSDecimal.primitivePlottable.getter(uint64_t a1, uint64_t a2, int a3)
{
  id v3;
  double v4;
  double v5;
  _QWORD v7[2];
  int v8;

  v7[0] = a1;
  v7[1] = a2;
  v8 = a3;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1518]), sel_initWithDecimal_, v7);
  objc_msgSend(v3, sel_doubleValue);
  v5 = v4;

  return v5;
}

void __swiftcall NSDecimal.init(primitivePlottable:)(NSDecimal_optional *__return_ptr retstr, Swift::Double primitivePlottable)
{
  MEMORY[0x2199CCC8C](retstr, primitivePlottable);
}

void sub_2143FFA78(_QWORD *a1@<X8>)
{
  int *v1;
  int v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;

  v3 = *v1;
  v4 = objc_allocWithZone(MEMORY[0x24BDD1518]);
  v8 = v3;
  v9 = *(_OWORD *)(v1 + 1);
  v5 = objc_msgSend(v4, sel_initWithDecimal_, &v8);
  objc_msgSend(v5, sel_doubleValue);
  v7 = v6;

  *a1 = v7;
}

uint64_t sub_2143FFAF4@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = MEMORY[0x2199CCC8C](*a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

Swift::Int_optional __swiftcall Int.init(primitivePlottable:)(Swift::Int primitivePlottable)
{
  Swift::Bool v1;
  Swift::Int_optional result;

  v1 = 0;
  result.value = primitivePlottable;
  result.is_nil = v1;
  return result;
}

void static Int._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void sub_2143FFB3C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Int8._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_2143FFB50(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

unsigned __int8 *sub_2143FFB5C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int16_optional __swiftcall Int16.init(primitivePlottable:)(Swift::Int16 primitivePlottable)
{
  Swift::Int16_optional result;

  *(_DWORD *)&primitivePlottable = (unsigned __int16)primitivePlottable;
  result.value = primitivePlottable;
  return result;
}

void static Int16._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void sub_2143FFB8C(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

_WORD *sub_2143FFB98@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void static Int32._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void sub_2143FFBB4(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

void static Int64._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void sub_2143FFBD0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static UInt._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void sub_2143FFBE8(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

Swift::UInt8_optional __swiftcall UInt8.init(primitivePlottable:)(Swift::UInt8 primitivePlottable)
{
  Swift::UInt8_optional result;

  *(_WORD *)&primitivePlottable = primitivePlottable;
  result.value = primitivePlottable;
  return result;
}

void static UInt8._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void sub_2143FFC14(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static UInt16._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void sub_2143FFC2C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static UInt32._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void sub_2143FFC44(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static UInt64._primitivePlottableKind.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

_UNKNOWN **sub_2143FFC5C()
{
  return &protocol witness table for Never;
}

_UNKNOWN **sub_2143FFC68()
{
  return &protocol witness table for Double;
}

_UNKNOWN **sub_2143FFC74()
{
  return &protocol witness table for String;
}

_UNKNOWN **sub_2143FFC80()
{
  return &protocol witness table for Date;
}

_UNKNOWN **sub_2143FFC8C()
{
  return &protocol witness table for Float16;
}

_UNKNOWN **sub_2143FFC98()
{
  return &protocol witness table for Float;
}

_UNKNOWN **sub_2143FFCA4()
{
  return &protocol witness table for Int;
}

_UNKNOWN **sub_2143FFCB0()
{
  return &protocol witness table for Int8;
}

_UNKNOWN **sub_2143FFCBC()
{
  return &protocol witness table for Int16;
}

_UNKNOWN **sub_2143FFCC8()
{
  return &protocol witness table for Int32;
}

_UNKNOWN **sub_2143FFCD4()
{
  return &protocol witness table for Int64;
}

_UNKNOWN **sub_2143FFCE0()
{
  return &protocol witness table for UInt;
}

_UNKNOWN **sub_2143FFCEC()
{
  return &protocol witness table for UInt8;
}

_UNKNOWN **sub_2143FFCF8()
{
  return &protocol witness table for UInt16;
}

_UNKNOWN **sub_2143FFD04()
{
  return &protocol witness table for UInt32;
}

void sub_2143FFD10(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

_UNKNOWN **sub_2143FFD1C()
{
  return &protocol witness table for UInt64;
}

uint64_t dispatch thunk of Plottable.primitivePlottable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Plottable.init(primitivePlottable:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static PrimitivePlottableProtocol._primitivePlottableKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for _PrimitivePlottableKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PrimitivePlottableKind);
}

uint64_t storeEnumTagSinglePayload for PrimitivePlottableType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2143FFDA0 + 4 * byte_214433AFF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2143FFDD4 + 4 * byte_214433AFA[v4]))();
}

uint64_t sub_2143FFDD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143FFDDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143FFDE4);
  return result;
}

uint64_t sub_2143FFDF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143FFDF8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2143FFDFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143FFE04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrimitivePlottableType()
{
  return &type metadata for PrimitivePlottableType;
}

uint64_t sub_2143FFE20(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_2143FFEB0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_2143FFEFC + 4 * byte_214433B09[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_2143FFF30 + 4 * byte_214433B04[v4]))();
}

uint64_t sub_2143FFF30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143FFF38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143FFF40);
  return result;
}

uint64_t sub_2143FFF4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143FFF54);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_2143FFF58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143FFF60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for _PrimitivePlottableKind.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PrimitivePlottableKind.Storage);
}

uint64_t initializeBufferWithCopyOfBuffer for AnyPrimitivePlottableTransform(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0C58(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141D76BC);
}

uint64_t destroy for AnyPrimitivePlottableTransform(uint64_t a1)
{
  return sub_2141D7808(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for AnyPrimitivePlottableTransform(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0CB4(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141D76BC, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141D7808);
}

uint64_t *assignWithTake for AnyPrimitivePlottableTransform(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_2142B0D20(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141D7808);
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableTransform()
{
  return &type metadata for AnyPrimitivePlottableTransform;
}

uint64_t initializeWithCopy for AnyPrimitivePlottableRangeBinding(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  v4 = v3 == 1;
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  (**(void (***)(uint64_t))(v5 - 8))(a1);
  *(_BYTE *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for AnyPrimitivePlottableRangeBinding(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  if (a1 != a2)
  {
    _s6Charts15AnyChartContentVwxx_0(a1);
    v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = v4 == 1;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = v5;
  }
  return a1;
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableRangeBinding()
{
  return &type metadata for AnyPrimitivePlottableRangeBinding;
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableOptionalBinding()
{
  return &type metadata for AnyPrimitivePlottableOptionalBinding;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyPrimitivePlottable(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0C58(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141DD14C);
}

uint64_t *assignWithCopy for AnyPrimitivePlottable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0CB4(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141DD14C, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141E60B8);
}

uint64_t *assignWithTake for AnyPrimitivePlottable(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_2142B0D20(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141E60B8);
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottable()
{
  return &type metadata for AnyPrimitivePlottable;
}

unint64_t sub_214400114()
{
  unint64_t result;

  result = qword_254D6E680;
  if (!qword_254D6E680)
  {
    result = MEMORY[0x2199CD934](&unk_214433FB8, &type metadata for AnyPrimitivePlottable);
    atomic_store(result, (unint64_t *)&qword_254D6E680);
  }
  return result;
}

unint64_t sub_21440015C()
{
  unint64_t result;

  result = qword_254D6E688;
  if (!qword_254D6E688)
  {
    result = MEMORY[0x2199CD934](&unk_2144340D8, &type metadata for PrimitivePlottableType);
    atomic_store(result, (unint64_t *)&qword_254D6E688);
  }
  return result;
}

uint64_t sub_2144001A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[40];
  _BYTE v7[40];
  __int128 v8[3];
  _BYTE v9[48];
  __int128 v10[2];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_21440092C(a1, (uint64_t)v9);
  sub_21440092C(a2, (uint64_t)v10);
  if ((v9[40] & 1) != 0)
  {
    sub_21440092C((uint64_t)v9, (uint64_t)v8);
    if (v11 == 1)
    {
      sub_2141D8DC0(v8, (uint64_t)v7);
      sub_2141D8DC0(v10, (uint64_t)v6);
      v3 = (uint64_t *)&unk_254D6E6A8;
LABEL_7:
      sub_2141D8BF8(v3);
      v4 = AGCompareValues();
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v6);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
      sub_2143C5C98((uint64_t)v9);
      return v4;
    }
  }
  else
  {
    sub_21440092C((uint64_t)v9, (uint64_t)v8);
    if ((v11 & 1) == 0)
    {
      sub_2141D8DC0(v8, (uint64_t)v7);
      sub_2141D8DC0(v10, (uint64_t)v6);
      v3 = (uint64_t *)&unk_254D6E6B0;
      goto LABEL_7;
    }
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v8);
  sub_2141E0750((uint64_t)v9, &qword_254D6E6A0);
  return 0;
}

uint64_t sub_2144002E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      return a6 == 1 && *(double *)&a1 == *(double *)&a4;
    }
    else if (a6 == 2)
    {
      if (a1 == a4 && a2 == a5)
        return 1;
      else
        return sub_214425790();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return !a6 && *(double *)&a1 == *(double *)&a4;
  }
}

uint64_t sub_214400374(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[40];
  _BYTE v7[40];
  __int128 v8[3];
  _BYTE v9[48];
  __int128 v10[2];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_214400960(a1, (uint64_t)v9);
  sub_214400960(a2, (uint64_t)v10);
  if ((v9[40] & 1) != 0)
  {
    sub_214400960((uint64_t)v9, (uint64_t)v8);
    if (v11 == 1)
    {
      sub_2141D8DC0(v8, (uint64_t)v7);
      sub_2141D8DC0(v10, (uint64_t)v6);
      v3 = (uint64_t *)&unk_254D6E6C0;
LABEL_7:
      sub_2141D8BF8(v3);
      v4 = AGCompareValues();
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v6);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
      sub_2143C5C98((uint64_t)v9);
      return v4;
    }
  }
  else
  {
    sub_214400960((uint64_t)v9, (uint64_t)v8);
    if ((v11 & 1) == 0)
    {
      sub_2141D8DC0(v8, (uint64_t)v7);
      sub_2141D8DC0(v10, (uint64_t)v6);
      v3 = (uint64_t *)&unk_254D6E6C8;
      goto LABEL_7;
    }
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v8);
  sub_2141E0750((uint64_t)v9, &qword_254D6E6B8);
  return 0;
}

uint64_t sub_2144004B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[40];
  _BYTE v6[40];
  __int128 v7[3];
  _BYTE v8[48];
  __int128 v9[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_2141E6220(a1, (uint64_t)v8);
  sub_2141E6220(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    sub_2141E6220((uint64_t)v8, (uint64_t)v7);
    if ((v10 & 1) != 0)
      goto LABEL_3;
LABEL_5:
    sub_2141D8DC0(v7, (uint64_t)v6);
    sub_2141D8DC0(v9, (uint64_t)v5);
    sub_2141D8BF8(&qword_254D6E6D8);
    v3 = AGCompareValues();
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v5);
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v6);
    sub_2143C5C98((uint64_t)v8);
    return v3;
  }
  sub_2141E6220((uint64_t)v8, (uint64_t)v7);
  if (v10 == 1)
    goto LABEL_5;
LABEL_3:
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  sub_2141E0750((uint64_t)v8, &qword_254D6E6D0);
  return 0;
}

uint64_t sub_2144005D8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a3)
  {
    if (!a6)
    {
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = a1;
      *(_QWORD *)(v15 + 24) = a2;
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = a4;
      *(_QWORD *)(v16 + 24) = a5;
      sub_2141D8BF8(&qword_253F10430);
      sub_2141D76BC(a1, a2, 0);
      v12 = a4;
      v13 = a5;
      v14 = 0;
      goto LABEL_9;
    }
    return 0;
  }
  if (a3 != 1)
  {
    if (a6 == 2)
    {
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = a1;
      *(_QWORD *)(v17 + 24) = a2;
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = a4;
      *(_QWORD *)(v18 + 24) = a5;
      sub_2141D8BF8(&qword_254D6E690);
      sub_2141D76BC(a1, a2, 2u);
      v12 = a4;
      v13 = a5;
      v14 = 2;
      goto LABEL_9;
    }
    return 0;
  }
  if (a6 != 1)
    return 0;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  sub_2141D8BF8(&qword_253F10430);
  sub_2141D76BC(a1, a2, 1u);
  v12 = a4;
  v13 = a5;
  v14 = 1;
LABEL_9:
  sub_2141D76BC(v12, v13, v14);
  v19 = AGCompareValues();
  swift_release();
  swift_release();
  return v19;
}

uint64_t sub_214400834()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v3, AssociatedTypeWitness, AssociatedConformanceWitness);
  return word_2144344C2[(char)v3] | byte_2144344B2[(char)v3];
}

uint64_t sub_2144008DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_214400900@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_21440092C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPrimitivePlottableBinding(a2, a1, &type metadata for AnyPrimitivePlottableBinding);
  return a2;
}

uint64_t sub_214400960(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPrimitivePlottableBinding(a2, a1, &type metadata for AnyPrimitivePlottableOptionalBinding);
  return a2;
}

uint64_t sub_214400994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  char *v20;
  uint64_t result;
  char *v22;
  uint64_t v23;

  v23 = a3;
  v6 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_214423B70();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v22 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - v16;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(v23, a4);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v17, a2);
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v18)
  {
    v19(v8, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v20 = v22;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v22, v8, v9);
      sub_2144239F0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, a2);
    }
  }
  else
  {
    v19(v8, 1, 1, v9);
  }
  result = sub_2141E0750((uint64_t)v8, &qword_253F13340);
  if (v14 == 8)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, a2);
  __break(1u);
  return result;
}

void sub_214400BA0()
{
  sub_2143FD2FC();
}

uint64_t sub_214400BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v48 = a5;
  v42 = a2;
  v43 = a3;
  v8 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v8);
  v44 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_214423900();
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2141D8BF8(&qword_253F13340);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_214423B70();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v40 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v39 = (char *)&v39 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v47 = (char *)&v39 - v21;
  v22 = *(_QWORD *)(a4 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x24BDAC7A8](v24);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v39 - v27;
  (*(void (**)(uint64_t, uint64_t, __n128))(a6 + 24))(v48, a6, v26);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v28, a4);
  v29 = swift_dynamicCast();
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (!v29)
  {
    v30(v14, 1, 1, v15);
    goto LABEL_6;
  }
  v30(v14, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
LABEL_6:
    result = sub_2141E0750((uint64_t)v14, &qword_253F13340);
    if (v23 == 8)
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v28, a4);
    __break(1u);
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v47, v14, v15);
  v31 = v44;
  sub_214423BB8();
  v33 = v45;
  v32 = v46;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v31, 1, v46);
  if ((_DWORD)result != 1)
  {
    v35 = v41;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v41, v31, v32);
    v36 = v39;
    sub_2144238F4();
    sub_2144239F0();
    v37 = *(void (**)(char *, uint64_t))(v16 + 8);
    v37(v36, v15);
    v38 = v40;
    sub_2144238E8();
    sub_2144239F0();
    v37(v38, v15);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    v37(v47, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v28, a4);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NumberValueBindingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NumberValueBindingBox);
}

uint64_t type metadata accessor for CategoryValueBindingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CategoryValueBindingBox);
}

uint64_t type metadata accessor for NumberOptionalValueBindingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NumberOptionalValueBindingBox);
}

uint64_t type metadata accessor for CategoryOptionalValueBindingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CategoryOptionalValueBindingBox);
}

uint64_t type metadata accessor for NumberOptionalRangeBindingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NumberOptionalRangeBindingBox);
}

uint64_t sub_214400F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE0D00], a2);
}

uint64_t sub_214400FE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2144017DC(a1, a2);
}

uint64_t sub_214400FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_2143FB404(a1, AssociatedTypeWitness, MEMORY[0x24BEE13C8], a2);
}

double sub_214401074@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE4F4(a1, a2);
}

double sub_214401090@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE468(a1, a2);
}

double sub_2144010AC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE3D4(a1, MEMORY[0x24BEE1E88], a2);
}

double sub_2144010D0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE3D4(a1, MEMORY[0x24BEE4568], a2);
}

double sub_2144010F4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE348(a1, a2);
}

double sub_214401110@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE2BC(a1, a2);
}

double sub_21440112C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE230(a1, a2);
}

double sub_214401148@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE19C(a1, MEMORY[0x24BEE1768], a2);
}

double sub_21440116C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE19C(a1, MEMORY[0x24BEE4008], a2);
}

double sub_214401190@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE10C(a1, a2);
}

double sub_2144011AC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FE078(a1, a2);
}

double sub_2144011C8@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_2143FDFEC(a1, a2);
}

unint64_t sub_2144011E4()
{
  unint64_t result;

  result = qword_254D6E6E0;
  if (!qword_254D6E6E0)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&qword_254D6E6E0);
  }
  return result;
}

unint64_t sub_214401228()
{
  unint64_t result;

  result = qword_254D6E6E8;
  if (!qword_254D6E6E8)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4680], MEMORY[0x24BEE4678]);
    atomic_store(result, (unint64_t *)&qword_254D6E6E8);
  }
  return result;
}

unint64_t sub_21440126C()
{
  unint64_t result;

  result = qword_254D6E6F0;
  if (!qword_254D6E6F0)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE1EC0], MEMORY[0x24BEE1E88]);
    atomic_store(result, (unint64_t *)&qword_254D6E6F0);
  }
  return result;
}

unint64_t sub_2144012B0()
{
  unint64_t result;

  result = qword_254D6E6F8;
  if (!qword_254D6E6F8)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE45A0], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_254D6E6F8);
  }
  return result;
}

unint64_t sub_2144012F4()
{
  unint64_t result;

  result = qword_254D6E700;
  if (!qword_254D6E700)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&qword_254D6E700);
  }
  return result;
}

unint64_t sub_214401338()
{
  unint64_t result;

  result = qword_254D6E708;
  if (!qword_254D6E708)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE44B8], MEMORY[0x24BEE4478]);
    atomic_store(result, (unint64_t *)&qword_254D6E708);
  }
  return result;
}

unint64_t sub_21440137C()
{
  unint64_t result;

  result = qword_254D6E710;
  if (!qword_254D6E710)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&qword_254D6E710);
  }
  return result;
}

unint64_t sub_2144013C0()
{
  unint64_t result;

  result = qword_254D6E718;
  if (!qword_254D6E718)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4040], MEMORY[0x24BEE4008]);
    atomic_store(result, (unint64_t *)&qword_254D6E718);
  }
  return result;
}

unint64_t sub_214401404()
{
  unint64_t result;

  result = qword_254D6E720;
  if (!qword_254D6E720)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE3FC8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&qword_254D6E720);
  }
  return result;
}

unint64_t sub_214401448()
{
  unint64_t result;

  result = qword_254D6E728;
  if (!qword_254D6E728)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE3F58], MEMORY[0x24BEE3F30]);
    atomic_store(result, (unint64_t *)&qword_254D6E728);
  }
  return result;
}

unint64_t sub_21440148C()
{
  unint64_t result;

  result = qword_254D6E730;
  if (!qword_254D6E730)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE3E78], MEMORY[0x24BEE3E50]);
    atomic_store(result, (unint64_t *)&qword_254D6E730);
  }
  return result;
}

uint64_t sub_2144014D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2144014F4(uint64_t a1)
{
  uint64_t v1;

  return sub_2143FC7E8(a1, *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_214401500()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_214401524(uint64_t a1)
{
  return sub_2144015F4(a1, (void (*)(char *, char *))sub_214401540, (uint64_t)sub_2144015A8, (void (*)(char *, char *))sub_2144015BC);
}

uint64_t sub_214401540(uint64_t a1, uint64_t a2)
{
  return sub_214401650(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2143FBEE0);
}

unint64_t sub_21440155C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D6E738[0];
  if (!qword_254D6E738[0])
  {
    v1 = sub_2141D7924(&qword_253F12170);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, qword_254D6E738);
  }
  return result;
}

uint64_t sub_2144015A8(uint64_t a1)
{
  return sub_214401678(a1);
}

uint64_t sub_2144015BC(uint64_t a1, uint64_t a2)
{
  return sub_214401650(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2143FBFEC);
}

uint64_t sub_2144015D8(uint64_t a1)
{
  return sub_2144015F4(a1, (void (*)(char *, char *))sub_214401634, (uint64_t)sub_2144015A8, (void (*)(char *, char *))sub_214401698);
}

uint64_t sub_2144015F4(uint64_t a1, void (*a2)(char *, char *), uint64_t a3, void (*a4)(char *, char *))
{
  uint64_t v4;

  return sub_2143FC160(a1, *(uint64_t (**)(uint64_t))(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), a2, a3, a4);
}

uint64_t sub_214401634(uint64_t a1, uint64_t a2)
{
  return sub_214401650(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2143FC31C);
}

uint64_t sub_214401650(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;

  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], a2);
}

uint64_t sub_214401678(uint64_t a1)
{
  uint64_t *v1;

  return sub_2143FC400(a1, v1[7], v1[2], v1[3], v1[4]);
}

uint64_t sub_214401698(uint64_t a1, uint64_t a2)
{
  return sub_214401650(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2143FC4C0);
}

uint64_t sub_2144016B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2144016D8(uint64_t a1)
{
  uint64_t v1;

  return sub_2143FC5A4(a1, *(uint64_t (**)(uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_2144016E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2143FC760(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_214401708(uint64_t a1)
{
  uint64_t *v1;

  return sub_2143FC400(a1, v1[6], v1[2], v1[3], v1[4]);
}

uint64_t sub_214401728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(v2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_2143FB404(a1, AssociatedTypeWitness, v5, a2);
}

void sub_2144017A4(double *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2143FC988(a1, a2);
}

uint64_t sub_2144017C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_2143FC9E8(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_2144017DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v9;

  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = sub_214400994(a1, AssociatedTypeWitness, v6, v5);
  *a2 = v9;
  return result;
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableRange()
{
  return &type metadata for AnyPrimitivePlottableRange;
}

uint64_t sub_214401860()
{
  uint64_t result;
  unint64_t v1;

  sub_214424EC0();
  sub_214425388();
  result = sub_214424B3C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2144018E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _BYTE *v20;
  int v21;
  int v22;
  void (*v23)(void *, _BYTE *, uint64_t);
  uint64_t v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(unsigned int *)(v5 + 84);
  v8 = v6;
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v9 + v6;
  v11 = ((v9 + v8) & ~v8) + v9;
  if ((_DWORD)v7)
    v12 = ((v9 + v6) & ~(unint64_t)v6) + v9;
  else
    v12 = v11 + 1;
  v13 = v6 & 0x100000;
  v14 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v13 != 0 || v12 + ((v8 + 16) & ~v8) > 0x18)
  {
    a1 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
    return a1;
  }
  v17 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (void *)(((unint64_t)v17 + v8 + 8) & ~v8);
  v25 = ~v8;
  v20 = (_BYTE *)(((unint64_t)v18 + v8 + 8) & ~v8);
  swift_retain();
  swift_retain();
  if (!(_DWORD)v7)
  {
    if (!v20[v11])
      goto LABEL_26;
    v21 = (v20[v11] - 1) << (8 * v11);
    if (v11 > 3)
      v21 = 0;
    if ((_DWORD)v11)
    {
      if (v11 <= 3)
        v22 = v11;
      else
        v22 = 4;
      __asm { BR              X11 }
    }
    if (v21 == -1)
      goto LABEL_26;
LABEL_25:
    memcpy(v19, v20, v12);
    return a1;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v20, v7, v4))
    goto LABEL_25;
LABEL_26:
  v23 = *(void (**)(void *, _BYTE *, uint64_t))(v5 + 16);
  v23(v19, v20, v4);
  v23((void *)(((unint64_t)v19 + v10) & v25), (_BYTE *)((unint64_t)&v20[v10] & v25), v4);
  if (!(_DWORD)v7)
    *((_BYTE *)v19 + v11) = 0;
  return a1;
}

uint64_t sub_214401AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  void (*v14)(unint64_t, uint64_t);

  v3 = a1 + 15;
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((v3 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  v8 = *(unsigned int *)(v5 + 84);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v9 + v6;
  if ((_DWORD)v8)
  {
    result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v7, v8, v4);
    if (!(_DWORD)result)
    {
LABEL_13:
      v14 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
      v14(v7, v4);
      return ((uint64_t (*)(unint64_t, uint64_t))v14)((v10 + v7) & ~v6, v4);
    }
  }
  else
  {
    v12 = (v10 & ~v6) + v9;
    if (!*(_BYTE *)(v7 + v12))
      goto LABEL_13;
    v13 = (*(unsigned __int8 *)(v7 + v12) - 1) << (8 * v12);
    if (v12 > 3)
      v13 = 0;
    if ((_DWORD)v12)
    {
      if (v12 > 3)
        LODWORD(v12) = 4;
      __asm { BR              X11 }
    }
    result = (v13 + 1);
    if (v13 == -1)
      goto LABEL_13;
  }
  return result;
}

_QWORD *sub_214401C18(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  int v17;
  size_t v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (_BYTE *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v11 = (_BYTE *)((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  v12 = *(unsigned int *)(v8 + 84);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v13 + v9;
  v15 = ((v13 + v9) & ~v9) + v13;
  swift_retain();
  swift_retain();
  if ((_DWORD)v12)
  {
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v11, v12, v7))
    {
LABEL_17:
      v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
      v19(v10, v11, v7);
      v19((_BYTE *)((unint64_t)&v10[v14] & ~v9), (_BYTE *)((unint64_t)&v11[v14] & ~v9), v7);
      if (!(_DWORD)v12)
        v10[v15] = 0;
      return a1;
    }
  }
  else
  {
    if (!v11[v15])
      goto LABEL_17;
    v16 = (v11[v15] - 1) << (8 * v15);
    if (v15 > 3)
      v16 = 0;
    if ((_DWORD)v15)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    if (v16 == -1)
      goto LABEL_17;
  }
  if ((_DWORD)v12)
    v18 = v15;
  else
    v18 = v15 + 1;
  memcpy(v10, v11, v18);
  return a1;
}

_QWORD *sub_214401DA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  size_t v25;
  void *v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void (*v32)(uint64_t, uint64_t);
  void *v33;
  void (*v34)(uint64_t, _BYTE *, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t, _BYTE *, uint64_t);
  uint64_t v37;
  uint64_t v39;

  v4 = a1;
  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ~v10;
  v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v13 = (_BYTE *)((v10 + 8 + v7) & ~v10);
  v14 = *(unsigned int *)(v9 + 84);
  v15 = *(_QWORD *)(v9 + 64);
  v16 = v15 + v10;
  v17 = ((v15 + v10) & ~v10) + v15;
  v39 = v9;
  if ((_DWORD)v14)
  {
    v18 = v15 + v10;
    v19 = v4;
    v20 = ~v10;
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v22 = v12;
    v23 = v21(v12, v14, v8);
    v24 = v21((uint64_t)v13, v14, v8);
    v12 = v22;
    v11 = v20;
    v4 = v19;
    v16 = v18;
    if (v23)
    {
      if (v24)
        goto LABEL_4;
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  v27 = 8 * v17;
  if (!*(_BYTE *)(v12 + v17))
    goto LABEL_19;
  v28 = (*(unsigned __int8 *)(v12 + v17) - 1) << v27;
  if (v17 > 3)
    v28 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v29 = v17;
    else
      v29 = 4;
    __asm { BR              X12 }
  }
  if (v28 == -1)
  {
LABEL_19:
    if (!v13[v17])
      goto LABEL_34;
    v30 = (v13[v17] - 1) << v27;
    if (v17 > 3)
      v30 = 0;
    if ((_DWORD)v17)
    {
      if (v17 <= 3)
        v31 = v17;
      else
        v31 = 4;
      __asm { BR              X11 }
    }
    v24 = v30 + 1;
LABEL_28:
    v9 = v39;
    if (v24)
    {
      v32 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v33 = (void *)v12;
      v32(v12, v8);
      v32(((unint64_t)v33 + v16) & v11, v8);
      if ((_DWORD)v14)
        v25 = v17;
      else
        v25 = v17 + 1;
      v26 = v33;
      goto LABEL_33;
    }
LABEL_34:
    v34 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 24);
    v35 = v12;
    v34(v12, v13, v8);
    v34((v16 + v35) & v11, (_BYTE *)((unint64_t)&v13[v16] & v11), v8);
    return v4;
  }
  if (v13[v17] && (v13[v17] - 1) << v27 != -1)
  {
LABEL_4:
    if ((_DWORD)v14)
      v25 = v17;
    else
      v25 = v17 + 1;
    v26 = (void *)v12;
LABEL_33:
    memcpy(v26, v13, v25);
    return v4;
  }
LABEL_36:
  v36 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v39 + 16);
  v37 = v12;
  v36(v12, v13, v8);
  v36((v16 + v37) & v11, (_BYTE *)((unint64_t)&v13[v16] & v11), v8);
  if (!(_DWORD)v14)
    *(_BYTE *)(v37 + v17) = 0;
  return v4;
}

_QWORD *sub_2144020F8(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  int v17;
  size_t v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (_BYTE *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v11 = (_BYTE *)((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  v12 = *(_DWORD *)(v8 + 84);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v13 + v9;
  v15 = ((v13 + v9) & ~v9) + v13;
  if (v12)
  {
    if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v8 + 48))((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9, *(unsigned int *)(v8 + 84), *(_QWORD *)(a3 + 16)))
    {
LABEL_17:
      v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
      v19(v10, v11, v7);
      v19((_BYTE *)((unint64_t)&v10[v14] & ~v9), (_BYTE *)((unint64_t)&v11[v14] & ~v9), v7);
      if (!v12)
        v10[v15] = 0;
      return a1;
    }
  }
  else
  {
    if (!v11[v15])
      goto LABEL_17;
    v16 = (v11[v15] - 1) << (8 * v15);
    if (v15 > 3)
      v16 = 0;
    if ((_DWORD)v15)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    if (v16 == -1)
      goto LABEL_17;
  }
  if (v12)
    v18 = v15;
  else
    v18 = v15 + 1;
  memcpy(v10, v11, v18);
  return a1;
}

_QWORD *sub_214402278(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  size_t v25;
  void *v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void (*v32)(uint64_t, uint64_t);
  void *v33;
  void (*v34)(uint64_t, _BYTE *, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t, _BYTE *, uint64_t);
  uint64_t v37;
  uint64_t v39;

  v4 = a1;
  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ~v10;
  v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v13 = (_BYTE *)((v10 + 8 + v7) & ~v10);
  v14 = *(unsigned int *)(v9 + 84);
  v15 = *(_QWORD *)(v9 + 64);
  v16 = v15 + v10;
  v17 = ((v15 + v10) & ~v10) + v15;
  v39 = v9;
  if ((_DWORD)v14)
  {
    v18 = v15 + v10;
    v19 = v4;
    v20 = ~v10;
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v22 = v12;
    v23 = v21(v12, v14, v8);
    v24 = v21((uint64_t)v13, v14, v8);
    v12 = v22;
    v11 = v20;
    v4 = v19;
    v16 = v18;
    if (v23)
    {
      if (v24)
        goto LABEL_4;
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  v27 = 8 * v17;
  if (!*(_BYTE *)(v12 + v17))
    goto LABEL_19;
  v28 = (*(unsigned __int8 *)(v12 + v17) - 1) << v27;
  if (v17 > 3)
    v28 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v29 = v17;
    else
      v29 = 4;
    __asm { BR              X12 }
  }
  if (v28 == -1)
  {
LABEL_19:
    if (!v13[v17])
      goto LABEL_34;
    v30 = (v13[v17] - 1) << v27;
    if (v17 > 3)
      v30 = 0;
    if ((_DWORD)v17)
    {
      if (v17 <= 3)
        v31 = v17;
      else
        v31 = 4;
      __asm { BR              X11 }
    }
    v24 = v30 + 1;
LABEL_28:
    v9 = v39;
    if (v24)
    {
      v32 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v33 = (void *)v12;
      v32(v12, v8);
      v32(((unint64_t)v33 + v16) & v11, v8);
      if ((_DWORD)v14)
        v25 = v17;
      else
        v25 = v17 + 1;
      v26 = v33;
      goto LABEL_33;
    }
LABEL_34:
    v34 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 40);
    v35 = v12;
    v34(v12, v13, v8);
    v34((v16 + v35) & v11, (_BYTE *)((unint64_t)&v13[v16] & v11), v8);
    return v4;
  }
  if (v13[v17] && (v13[v17] - 1) << v27 != -1)
  {
LABEL_4:
    if ((_DWORD)v14)
      v25 = v17;
    else
      v25 = v17 + 1;
    v26 = (void *)v12;
LABEL_33:
    memcpy(v26, v13, v25);
    return v4;
  }
LABEL_36:
  v36 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v39 + 32);
  v37 = v12;
  v36(v12, v13, v8);
  v36((v16 + v37) & v11, (_BYTE *)((unint64_t)&v13[v16] & v11), v8);
  if (!(_DWORD)v14)
    *(_BYTE *)(v37 + v17) = 0;
  return v4;
}

uint64_t sub_2144025BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (v5)
    v9 = *(_QWORD *)(v4 + 64);
  else
    v9 = v8 + 1;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_27;
  v12 = v9 + ((v8 + v10) & ~v10) + ((v10 + 16) & ~v10);
  v13 = 8 * v12;
  if (v12 > 3)
    goto LABEL_13;
  v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
  if (HIWORD(v15))
  {
    v14 = *(_DWORD *)(a1 + v12);
    if (v14)
      goto LABEL_20;
LABEL_27:
    v17 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) == 0)
    {
      v18 = *v17;
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      return (v18 + 1);
    }
    if (v5)
    {
      v20 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v10 + 8) & ~v10);
      v21 = v20 != 0;
      result = (v20 - 1);
      if ((_DWORD)result != 0 && v21)
        return result;
    }
    return 0;
  }
  if (v15 > 0xFF)
  {
    v14 = *(unsigned __int16 *)(a1 + v12);
    if (*(_WORD *)(a1 + v12))
      goto LABEL_20;
    goto LABEL_27;
  }
  if (v15 < 2)
    goto LABEL_27;
LABEL_13:
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_27;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if ((_DWORD)v12)
  {
    if (v12 > 3)
      LODWORD(v12) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_214402744(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  if (v8)
    v12 = ((*(_QWORD *)(v7 + 64) + v11) & ~v11) + *(_QWORD *)(v7 + 64);
  else
    v12 = ((*(_QWORD *)(v7 + 64) + v11) & ~v11) + *(_QWORD *)(v7 + 64) + 1;
  v13 = v12 + ((v11 + 16) & ~v11);
  v14 = a3 >= v10;
  v15 = a3 - v10;
  if (v15 != 0 && v14)
  {
    if (v13 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_20;
      goto LABEL_14;
    }
    v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_20:
        v17 = ~v10 + a2;
        if (v13 < 4)
        {
          if ((_DWORD)v13)
          {
            v18 = v17 & ~(-1 << (8 * v13));
            bzero(a1, v13);
            if ((_DWORD)v13 == 3)
            {
              *a1 = v18;
              *((_BYTE *)a1 + 2) = BYTE2(v18);
            }
            else if ((_DWORD)v13 == 2)
            {
              *a1 = v18;
            }
            else
            {
              *(_BYTE *)a1 = v18;
            }
          }
        }
        else
        {
          bzero(a1, v12 + ((v11 + 16) & ~v11));
          *(_DWORD *)a1 = v17;
        }
        __asm { BR              X10 }
      }
LABEL_14:
      __asm { BR              X16 }
    }
    if (v16 >= 0x100)
      v6 = 2;
    else
      v6 = v16 > 1;
  }
  if (v10 < a2)
    goto LABEL_20;
  goto LABEL_14;
}

void sub_214402A34()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x2144029FCLL);
}

void sub_214402A44()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x2144029FCLL);
}

void sub_214402A4C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x2144029FCLL);
}

uint64_t sub_214402A7C()
{
  uint64_t result;
  unint64_t v1;

  sub_214425388();
  result = sub_214424B3C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_214402AF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  v10 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    a1 = (uint64_t *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = (void *)(((unint64_t)v13 + v7 + 8) & ~v7);
    v16 = (const void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v17(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_214402C20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

_QWORD *sub_214402CA8(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  size_t v13;

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v11 = (const void *)((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84))
      v13 = *(_QWORD *)(v8 + 64);
    else
      v13 = *(_QWORD *)(v8 + 64) + 1;
    memcpy(v10, v11, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  return a1;
}

_QWORD *sub_214402D8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  size_t v15;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  v12 = (void *)((v10 + 8 + v7) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v7) = v13(v11, 1, v8);
  v14 = v13(v12, 1, v8);
  if ((_DWORD)v7)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v15);
  return a1;
}

_QWORD *sub_214402ED0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_214402FA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  size_t v15;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  v12 = (void *)((v10 + 8 + v7) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v7) = v13(v11, 1, v8);
  v14 = v13(v12, 1, v8);
  if ((_DWORD)v7)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v15);
  return a1;
}

uint64_t sub_2144030D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *v17;
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_214403258(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_2144034B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2144034B8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2144034D8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_2144034E0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_2144034F0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_214403520()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214424B3C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_214403590(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
  }
  return a1;
}

uint64_t sub_214403668(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_2144036B8(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  return a1;
}

_QWORD *sub_214403744(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *sub_2144037E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_214403844(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)v5;
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_2144038C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21440399C + 4 * byte_214433B5E[(v9 - 1)]))();
}

void sub_214403A14(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void type metadata accessor for _PrimitivePlottableKind.TypeWitness()
{
  JUMPOUT(0x2199CD874);
}

uint64_t getEnumTagSinglePayload for PlottableHints(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlottableHints(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_214403D0C + 4 * byte_214433B71[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_214403D40 + 4 * byte_214433B6C[v4]))();
}

uint64_t sub_214403D40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_214403D48(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x214403D50);
  return result;
}

uint64_t sub_214403D5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x214403D64);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_214403D68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_214403D70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlottableHints()
{
  return &type metadata for PlottableHints;
}

uint64_t _s6Charts36AnyPrimitivePlottableOptionalBindingOwcp_0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
  }
  (**(void (***)(uint64_t))(v4 - 8))(a1);
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t _s6Charts36AnyPrimitivePlottableOptionalBindingOwca_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;

  if (a1 != a2)
  {
    _s6Charts15AnyChartContentVwxx_0(a1);
    v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    if (v4 == 1)
    {
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t _s6Charts36AnyPrimitivePlottableOptionalBindingOwta_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;

  if (a1 != a2)
  {
    _s6Charts15AnyChartContentVwxx_0(a1);
    v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v4 == 1;
  }
  return a1;
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableBinding()
{
  return &type metadata for AnyPrimitivePlottableBinding;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyPrimitivePlottableArray(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyPrimitivePlottableArray(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnyPrimitivePlottableArray(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableArray()
{
  return &type metadata for AnyPrimitivePlottableArray;
}

unint64_t sub_214403FD4()
{
  unint64_t result;

  result = qword_254D6EA40;
  if (!qword_254D6EA40)
  {
    result = MEMORY[0x2199CD934](&unk_214434394, &type metadata for AnyPrimitivePlottableRange);
    atomic_store(result, (unint64_t *)&qword_254D6EA40);
  }
  return result;
}

uint64_t sub_214404018(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&unk_21443436C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_214404044(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&unk_214434344);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_214404070(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&unk_21443431C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21440409C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&unk_2144342F4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2144040C8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&unk_2144342CC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_2144040F4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_2143F9FE4(*a1, 0, 0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_21440412C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  sub_2143F9FE4(v6, v7, 2, v5, v4, a2);
}

uint64_t sub_214404190@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_2143FF164(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_2144041B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_214404200(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2144041C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGCompareValues();
  *a1 = result;
  return result;
}

uint64_t sub_214404200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = a1;
  v15 = v10;
  return sub_2141DB52C(v9, (uint64_t)sub_2144041C4, (uint64_t)&v12, v13, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], a8);
}

void *RuleMark.init<A>(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[288];
  _BYTE v17[144];
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _BYTE v22[144];
  _BYTE v23[144];
  _BYTE __src[288];

  v18 = a1;
  v19 = a2 & 1;
  v20 = a3;
  v21 = a4 & 1;
  sub_2141EFF40((uint64_t)&v18);
  sub_2141EDFD8((uint64_t)&v18, (uint64_t)v16);
  sub_2143D8C7C(a5, a6, a7, v12, (uint64_t)v17);
  sub_2141EDFD8((uint64_t)v17, (uint64_t)v22);
  v14 = type metadata accessor for PlottableValue(0, a6, a7, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a5, v14);
  sub_2141EDFD8((uint64_t)v16, (uint64_t)v23);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v22, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A, B>(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  _BYTE v23[288];
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE v26[144];
  _BYTE v27[144];
  _BYTE __src[288];

  sub_2143D8D5C(a1, a2, a4, a6, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)v23);
  sub_2143D8C7C(a3, a5, a7, v16, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v26);
  v18 = type metadata accessor for PlottableValue(0, a5, a7, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a3, v18);
  v20 = type metadata accessor for PlottableValue(0, a4, a6, v19);
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v21(a2, v20);
  v21(a1, v20);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A>(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _BYTE v18[144];
  _BYTE v19[144];
  uint64_t v20;
  char v21;
  _BYTE __src[288];

  sub_2143D8D5C(a1, a2, a5, a6, (uint64_t)v18);
  sub_2141EDFD8((uint64_t)v18, (uint64_t)v19);
  v15 = type metadata accessor for PlottableValue(0, a5, a6, v14);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(a2, v15);
  v16(a1, v15);
  v20 = a3;
  v21 = a4 & 1;
  sub_2143D90A4((uint64_t)&v20);
  sub_2141EDFD8((uint64_t)v19, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)&v20, (uint64_t)&__src[144]);
  return memcpy(a7, __src, 0x120uLL);
}

void *RuleMark.init<A>(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[144];
  _BYTE v20[144];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _BYTE __src[288];

  sub_2143D8C7C(a1, a6, a7, a4, (uint64_t)v19);
  sub_2141EDFD8((uint64_t)v19, (uint64_t)v20);
  v17 = type metadata accessor for PlottableValue(0, a6, a7, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
  v21 = a2;
  v22 = a3 & 1;
  v23 = a4;
  v24 = a5 & 1;
  sub_2141EFF40((uint64_t)&v21);
  sub_2141EDFD8((uint64_t)v20, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)&v21, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A, B>(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[288];
  _BYTE v23[144];
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE v26[144];
  _BYTE __src[288];

  sub_2143D8C7C(a1, a4, a6, a4, (uint64_t)v23);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)v22);
  sub_2143D8D5C(a2, a3, a5, a7, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)v25);
  v17 = type metadata accessor for PlottableValue(0, a5, a7, v16);
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(a3, v17);
  v18(a2, v17);
  v20 = type metadata accessor for PlottableValue(0, a4, a6, v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
  sub_2141EDFD8((uint64_t)v22, (uint64_t)v26);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A>(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  _BYTE v16[288];
  _BYTE v17[144];
  uint64_t v18;
  char v19;
  _BYTE v20[144];
  _BYTE v21[144];
  _BYTE __src[288];

  v18 = a1;
  v19 = a2 & 1;
  sub_2143D90A4((uint64_t)&v18);
  sub_2141EDFD8((uint64_t)&v18, (uint64_t)v16);
  sub_2143D8D5C(a3, a4, a5, a6, (uint64_t)v17);
  sub_2141EDFD8((uint64_t)v17, (uint64_t)v20);
  v13 = type metadata accessor for PlottableValue(0, a5, a6, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(a4, v13);
  v14(a3, v13);
  sub_2141EDFD8((uint64_t)v16, (uint64_t)v21);
  sub_2141EDFD8((uint64_t)v21, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v20, (uint64_t)&__src[144]);
  return memcpy(a7, __src, 0x120uLL);
}

void static RuleMark._layoutChartContent(_:_:)(uint64_t a1)
{
  _BYTE v2[144];
  _BYTE v3[144];

  sub_2141EDFD8(a1, (uint64_t)v3);
  sub_2141EDFD8(a1 + 144, (uint64_t)v2);
  swift_beginAccess();
  sub_214200BC0((uint64_t)v3);
  sub_214200BC0((uint64_t)v2);
  sub_214202388((uint64_t)v3);
  sub_214202388((uint64_t)v2);
}

uint64_t static RuleMark._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[16];
  _BYTE v25[144];
  _BYTE v26[144];

  v6 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SgRule(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (_QWORD *)((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141EDFD8(a1, (uint64_t)v26);
  sub_2141EDFD8(a1 + 144, (uint64_t)v25);
  LOBYTE(a1) = *(_BYTE *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  swift_retain();
  if ((a1 & 1) != 0)
  {
    v13 = sub_214404B24((uint64_t)v26, (uint64_t)v25, v12);
    result = swift_release();
  }
  else
  {
    sub_2141FF3BC((uint64_t)v26);
    v15 = v24[4];
    v16 = v24[5];
    sub_2141FF3BC((uint64_t)v25);
    v17 = v24[10];
    v18 = v24[11];
    v19 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 24);
    v20 = v12 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    sub_2141EEEC4(v20, (uint64_t)v8);
    sub_2141FFC88((uint64_t)v8, (uint64_t)v11 + *(int *)(v9 + 36));
    v21 = *(_QWORD *)(v20 + *(int *)(v6 + 64));
    swift_release();
    *v11 = v19;
    v11[1] = v15;
    v11[2] = v17;
    v11[3] = v16;
    v11[4] = v18;
    *(_QWORD *)((char *)v11 + *(int *)(v9 + 40)) = v21;
    v22 = swift_allocBox();
    result = sub_214404E88((uint64_t)v11, v23);
    v13 = v22 | 0x6000000000000000;
  }
  *a3 = v13;
  return result;
}

unint64_t sub_214404B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _QWORD __src[76];
  _BYTE v59[152];
  double v60;
  double v61;
  double v62;
  double v63;
  char v64[152];
  char v65[160];

  sub_2141FF3BC(a1);
  v6 = v60;
  v7 = v61;
  sub_2141FF3BC(a2);
  v8 = v62;
  v9 = v63;
  sub_2141D8BF8(&qword_253F13588);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_214427810;
  sub_21439C044(a1);
  sub_2143036C0(0, a1);
  sub_214251E04((uint64_t)v64, v10 + 32);
  sub_21439C044(a2);
  sub_2143036C0(1, a2);
  sub_214251E04((uint64_t)v65, v10 + 184);
  v46 = a3;
  v11 = a3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v12 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v13 = (uint64_t *)(v11 + *(int *)(v12 + 72));
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v19 = v13[4];
  v18 = v13[5];
  v21 = v13[6];
  v20 = v13[7];
  v22 = v13[8];
  v43 = (int *)v12;
  if (v17)
  {
    v47[0] = 4;
    v48 = v14;
    v49 = v15;
    v50 = v16 & 1;
    v51 = v17;
    v52 = v19;
    v53 = v18;
    v54 = v21;
    v55 = v20;
    v56 = v22;
    v57 = 3;
    sub_2141EF6F4((uint64_t)v47);
    sub_2141EF6B8((uint64_t)v47, (uint64_t)__src);
    nullsub_1(__src, v23);
  }
  else
  {
    sub_2141EF22C((uint64_t)__src);
  }
  sub_214251E04((uint64_t)__src, (uint64_t)v59);
  v24 = vabdd_f64(v9, v8);
  v25 = vabdd_f64(v7, v6);
  if (v9 < v8)
    v8 = v9;
  if (v7 < v6)
    v6 = v7;
  sub_214251E04((uint64_t)v59, v10 + 336);
  sub_2141EF260(v14, v15, v16, v17, v19, v18, v21);
  v42 = sub_2142E91DC(v10);
  v44 = v26;
  swift_setDeallocating();
  sub_2141D8BF8(&qword_253F13428);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v27 = *(_QWORD *)(*(_QWORD *)(v46 + 16) + 24);
  v28 = (uint64_t *)(v11 + v43[26]);
  v29 = v28[1];
  v45 = *v28;
  v30 = (uint64_t *)(v11 + v43[24]);
  v32 = *v30;
  v31 = v30[1];
  v33 = v30[2];
  v34 = v30[3];
  v35 = (uint64_t *)(v11 + v43[25]);
  v37 = *v35;
  v36 = v35[1];
  v39 = v35[2];
  v38 = v35[3];
  sub_2141EF22C((uint64_t)v47);
  __src[0] = v27;
  *(double *)&__src[1] = v6;
  *(double *)&__src[2] = v8;
  *(double *)&__src[3] = v25;
  *(double *)&__src[4] = v24;
  __src[5] = v45;
  __src[6] = v29;
  __src[7] = v32;
  __src[8] = v31;
  __src[9] = v33;
  __src[10] = v34;
  __src[11] = v37;
  __src[12] = v36;
  __src[13] = v39;
  __src[14] = v38;
  __src[15] = v42;
  sub_214251E04((uint64_t)v47, (uint64_t)&__src[16]);
  __src[35] = v44;
  sub_214251E04((uint64_t)v47, (uint64_t)&__src[36]);
  sub_214251E04((uint64_t)v47, (uint64_t)&__src[55]);
  LOWORD(__src[74]) = 0;
  __src[75] = 0;
  v40 = swift_allocObject();
  memcpy((void *)(v40 + 16), __src, 0x260uLL);
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v32, v31, v33, v34);
  sub_2141EF2B4(v37, v36, v39, v38);
  return v40 | 0xC000000000000000;
}

uint64_t sub_214404E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SgRule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for RuleMark()
{
  return &type metadata for RuleMark;
}

uint64_t sub_214404EDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v3, v4, v5, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v7, *(_QWORD *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(_QWORD *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v9, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), v10, *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v11, v12, v13, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v14, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), v15, *(_QWORD *)(v0 + 440), v16);
  }
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(_QWORD *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v17, *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), v18, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), v19, v20, v21, *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), v22, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), v23, *(_QWORD *)(v0 + 592), v24);
  }
  return swift_deallocObject();
}

uint64_t *sub_214405134(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_214424500();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_2144051CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_214424500();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_214405214(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_214424500();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *sub_214405284(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_214424500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *sub_2144052F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_214424500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_214405354(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_214424500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_2144053C0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2144053CC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_214424500();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_214405448()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_214405454(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_214424500();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MultiPreferenceCombinerVisitor()
{
  uint64_t result;

  result = qword_254D6EAF0;
  if (!qword_254D6EAF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_214405504()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214424500();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21440557C@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t sub_21440570C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t WeakValue;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v36 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v36 - v11;
  v38 = a2;
  v39 = a3;
  sub_214423E94();
  v13 = sub_214423C84();
  v14 = swift_bridgeObjectRetain();
  if (MEMORY[0x2199CC9A4](v14, v13))
  {
    v15 = 0;
    v16 = a1 + 36;
    v17 = 1;
    do
    {
      v21 = sub_214425058();
      v22 = sub_214425010();
      if ((v21 & 1) != 0)
      {
        v23 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_14;
      }
      else
      {
        sub_214425514();
        v22 = swift_unknownObjectRelease();
        v23 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_14:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      if ((v17 & 1) != 0)
      {
        WeakValue = AGGraphGetWeakValue();
        if (WeakValue)
        {
          v25 = v37;
          v26 = v13;
          v27 = a1;
          v28 = a4;
          v29 = v12;
          v30 = v36;
          (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, WeakValue, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v28, AssociatedTypeWitness);
          v31 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
          v32 = v29;
          v33 = v30;
          v12 = v29;
          a4 = v28;
          a1 = v27;
          v13 = v26;
          v31(v32, v33, AssociatedTypeWitness);
        }
        else
        {
          sub_214423E94();
          v34 = v37;
          (*(void (**)(char *, uint64_t))(v37 + 8))(a4, AssociatedTypeWitness);
          v31 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        }
        v31(a4, v12, AssociatedTypeWitness);
      }
      else
      {
        MEMORY[0x24BDAC7A8](v22);
        v18 = v39;
        *(&v36 - 4) = v38;
        *(&v36 - 3) = v18;
        *((_DWORD *)&v36 - 4) = v19;
        *((_DWORD *)&v36 - 3) = v20;
        sub_214423EA0();
      }
      v17 = 0;
      v16 += 8;
      ++v15;
    }
    while (v23 != MEMORY[0x2199CC9A4](a1, v13));
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2144059C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t WeakValue;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, WeakValue, AssociatedTypeWitness);
  else
    return sub_214423E94();
}

uint64_t sub_214405A70@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_21440570C(*v2, *(char **)(a1 + 16), *(char **)(a1 + 24), a2);
}

uint64_t sub_214405A80()
{
  return sub_2144062F8();
}

uint64_t sub_214405A8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
  return sub_214423EA0();
}

uint64_t sub_214405B40@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t sub_214405BB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t sub_214405C04@<X0>(uint64_t a1@<X8>)
{
  return sub_214405A8C(a1);
}

uint64_t sub_214405C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  int v29;
  _QWORD v30[7];

  v4 = v3;
  v30[6] = *MEMORY[0x24BDAC8D0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_214423DA4();
  v9 = sub_214425388();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - v10;
  v30[0] = *v3;
  v30[3] = a2;
  v30[4] = a3;
  swift_bridgeObjectRetain();
  sub_2141D8BF8(&qword_254D6EB28);
  v12 = sub_214423C9C();
  sub_2144060FC();
  v13 = sub_214424F50();
  swift_bridgeObjectRelease();
  v14 = MEMORY[0x2199CC98C](v13, v12);
  if (v14 == 2)
  {
    sub_2144250B8();
    v16 = v30[0];
    sub_2144250B8();
    v17 = swift_bridgeObjectRelease();
    v27 = &v26;
    v30[0] = __PAIR64__(v30[0], v16);
    MEMORY[0x24BDAC7A8](v17);
    v28 = v4;
    *(&v26 - 4) = AssociatedTypeWitness;
    v19 = type metadata accessor for PairPreferenceCombiner(0, a2, a3, v18);
    *(&v26 - 3) = v19;
    *(&v26 - 2) = MEMORY[0x2199CD934](&unk_2144346A8, v19);
    sub_2141DB52C((uint64_t)v30, (uint64_t)sub_214406348, (uint64_t)(&v26 - 6), v19, MEMORY[0x24BEE4078], v12, MEMORY[0x24BEE40A8], v20);
LABEL_8:
    sub_2143B369C(v29, (uint64_t)v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v11, 0, 1, v8);
    type metadata accessor for MultiPreferenceCombinerVisitor();
    return sub_214424518();
  }
  if (v14 != 1)
  {
    if (!v14)
      return swift_bridgeObjectRelease();
    v21 = sub_214406148(v13, a2, a3);
    v22 = swift_bridgeObjectRelease();
    v27 = &v26;
    v30[0] = v21;
    MEMORY[0x24BDAC7A8](v22);
    v28 = v4;
    *(&v26 - 4) = AssociatedTypeWitness;
    v24 = type metadata accessor for PreferenceCombiner(0, a2, a3, v23);
    *(&v26 - 3) = v24;
    *(&v26 - 2) = MEMORY[0x2199CD934](&unk_2144346E8, v24);
    sub_2141DB52C((uint64_t)v30, (uint64_t)sub_21433FD60, (uint64_t)(&v26 - 6), v24, MEMORY[0x24BEE4078], v12, MEMORY[0x24BEE40A8], v25);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_2144250B8();
  swift_bridgeObjectRelease();
  sub_2143B369C(v30[0], (uint64_t)v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v11, 0, 1, v8);
  type metadata accessor for MultiPreferenceCombinerVisitor();
  return sub_214424518();
}

uint64_t sub_214405FB4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;

  swift_getAssociatedTypeWitness();
  sub_214423DA4();
  v6 = sub_214425388();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v13[-v8];
  sub_21442450C();
  v14 = a1;
  v15 = a2;
  v10 = sub_214423C9C();
  sub_21440557C((void (*)(char *, char *))sub_214406258, (uint64_t)v13, MEMORY[0x24BEE4078], v10, v11, a3);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_2144060E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_214405FB4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_2144060FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D6EB30[0];
  if (!qword_254D6EB30[0])
  {
    v1 = sub_2141D7924(&qword_254D6EB28);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, qword_254D6EB30);
  }
  return result;
}

uint64_t sub_214406148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  swift_getAssociatedTypeWitness();
  sub_214423C9C();
  v3 = sub_214425094();
  v4 = sub_214423C84();
  v5 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v3);
  return sub_2141D0320((void (*)(char *, char *))sub_214406228, (uint64_t)v8, v3, v4, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
}

uint64_t type metadata accessor for PreferenceCombiner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreferenceCombiner);
}

uint64_t type metadata accessor for PairPreferenceCombiner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PairPreferenceCombiner);
}

uint64_t sub_214406228@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t sub_214406258@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  swift_getAssociatedTypeWitness();
  result = sub_2143B36F4(a1);
  *a2 = result;
  return result;
}

_QWORD *sub_2144062B4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void sub_2144062C0()
{
  JUMPOUT(0x2199CD934);
}

void sub_2144062D0()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2144062E0@<X0>(uint64_t a1@<X8>)
{
  return sub_2144059C0(a1);
}

uint64_t sub_2144062EC@<X0>(uint64_t a1@<X8>)
{
  return sub_214405B40(a1);
}

uint64_t sub_2144062F8()
{
  sub_214425904();
  sub_214424F20();
  swift_bridgeObjectRelease();
  return 548047074;
}

uint64_t sub_214406348@<X0>(_DWORD *a1@<X8>)
{
  return sub_21433FD60(a1);
}

unint64_t sub_21440635C(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char v33;
  _OWORD *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  _OWORD *v39;
  int v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  _OWORD *v44;
  int v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  int v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  _OWORD *v54;
  int v55;
  __int128 v56;
  __int128 v57;
  BOOL *v58;
  _OWORD *v59;
  _OWORD *v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  BOOL *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _OWORD *v118;
  _OWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t *v126;
  int v127;
  char v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t *v132;
  int v133;
  char v134;
  uint64_t v135;
  __int128 v136;
  int v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  __int128 v167;
  __int128 v168;
  _OWORD *v169;
  _OWORD *v170;
  int v171;
  __int128 v172;
  __int128 v173;
  _OWORD *v174;
  _OWORD *v175;
  int v176;
  __int128 v177;
  __int128 v178;
  _OWORD *v179;
  _OWORD *v180;
  int v181;
  __int128 v182;
  __int128 v183;
  _OWORD *v184;
  _OWORD *v185;
  int v186;
  __int128 v187;
  __int128 v188;
  _OWORD *v189;
  _OWORD *v190;
  int v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  BOOL *v195;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  char v225;
  char v226;
  char v227;
  char v228;
  void (*v229)(uint64_t, uint64_t, uint64_t);
  uint64_t v230;
  unint64_t v231;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v25 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return v25;
  }
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  sub_2144071EC(*(_QWORD *)a2, v8, v9, v10, v11);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v15 = sub_2144240D4();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v17 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_BYTE *)v18 = *(_BYTE *)v19;
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
  *(_BYTE *)(v18 + 32) = *(_BYTE *)(v19 + 32);
  v20 = (_OWORD *)(v18 + 40);
  v21 = (_OWORD *)(v19 + 40);
  v22 = *(_QWORD *)(v19 + 64);
  if (v22)
  {
    v23 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v18 + 64) = v22;
    *(_QWORD *)(v18 + 72) = v23;
    (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
  }
  else
  {
    v26 = *(_OWORD *)(v19 + 56);
    *v20 = *v21;
    *(_OWORD *)(v18 + 56) = v26;
    *(_QWORD *)(v18 + 72) = *(_QWORD *)(v19 + 72);
  }
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_QWORD *)(a2 + v27 + 8);
  *(_QWORD *)v28 = *(_QWORD *)(a2 + v27);
  *(_QWORD *)(v28 + 8) = v30;
  v31 = *(_QWORD *)(a2 + v27 + 24);
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(a2 + v27 + 16);
  *(_QWORD *)(v28 + 24) = v31;
  v32 = (_OWORD *)(a2 + v27 + 32);
  v33 = *(_BYTE *)(v29 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v33 & 1) != 0)
  {
    v34 = (_OWORD *)(v28 + 32);
    v35 = *(unsigned __int8 *)(v29 + 72);
    if (v35 == 255)
    {
      v36 = *(_OWORD *)(v29 + 48);
      *v34 = *v32;
      *(_OWORD *)(v28 + 48) = v36;
      *(_OWORD *)(v28 + 57) = *(_OWORD *)(v29 + 57);
    }
    else
    {
      v37 = *(_OWORD *)(v29 + 56);
      *(_OWORD *)(v28 + 56) = v37;
      (**(void (***)(_OWORD *, uint64_t))(v37 - 8))(v34, v29 + 32);
      *(_BYTE *)(v28 + 72) = (v35 & 1) != 0;
    }
    v38 = (_OWORD *)(v28 + 80);
    v39 = (_OWORD *)(v29 + 80);
    v40 = *(unsigned __int8 *)(v29 + 120);
    if (v40 == 255)
    {
      v41 = *(_OWORD *)(v29 + 96);
      *v38 = *v39;
      *(_OWORD *)(v28 + 96) = v41;
      *(_OWORD *)(v28 + 105) = *(_OWORD *)(v29 + 105);
    }
    else
    {
      v42 = *(_OWORD *)(v29 + 104);
      *(_OWORD *)(v28 + 104) = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v42 - 8))(v38, v39);
      *(_BYTE *)(v28 + 120) = (v40 & 1) != 0;
    }
    v43 = (_OWORD *)(v28 + 128);
    v44 = (_OWORD *)(v29 + 128);
    v45 = *(unsigned __int8 *)(v29 + 168);
    if (v45 == 255)
    {
      v46 = *(_OWORD *)(v29 + 144);
      *v43 = *v44;
      *(_OWORD *)(v28 + 144) = v46;
      *(_OWORD *)(v28 + 153) = *(_OWORD *)(v29 + 153);
    }
    else
    {
      v47 = *(_OWORD *)(v29 + 152);
      *(_OWORD *)(v28 + 152) = v47;
      (**(void (***)(_OWORD *, _OWORD *))(v47 - 8))(v43, v44);
      *(_BYTE *)(v28 + 168) = (v45 & 1) != 0;
    }
    v48 = (_OWORD *)(v28 + 176);
    v49 = (_OWORD *)(v29 + 176);
    v50 = *(unsigned __int8 *)(v29 + 216);
    if (v50 == 255)
    {
      v51 = *(_OWORD *)(v29 + 192);
      *v48 = *v49;
      *(_OWORD *)(v28 + 192) = v51;
      *(_OWORD *)(v28 + 201) = *(_OWORD *)(v29 + 201);
    }
    else
    {
      v52 = *(_OWORD *)(v29 + 200);
      *(_OWORD *)(v28 + 200) = v52;
      (**(void (***)(_OWORD *, _OWORD *))(v52 - 8))(v48, v49);
      *(_BYTE *)(v28 + 216) = (v50 & 1) != 0;
    }
    v53 = (_OWORD *)(v28 + 224);
    v54 = (_OWORD *)(v29 + 224);
    v55 = *(unsigned __int8 *)(v29 + 264);
    if (v55 == 255)
    {
      v56 = *(_OWORD *)(v29 + 240);
      *v53 = *v54;
      *(_OWORD *)(v28 + 240) = v56;
      *(_OWORD *)(v28 + 249) = *(_OWORD *)(v29 + 249);
    }
    else
    {
      v57 = *(_OWORD *)(v29 + 248);
      *(_OWORD *)(v28 + 248) = v57;
      (**(void (***)(_OWORD *, _OWORD *))(v57 - 8))(v53, v54);
      v58 = (BOOL *)(v28 + 264);
      *v58 = (v55 & 1) != 0;
    }
    v59 = (_OWORD *)(v28 + 272);
    v60 = (_OWORD *)(v29 + 272);
    v61 = *(unsigned __int8 *)(v29 + 312);
    if (v61 == 255)
    {
      v62 = *(_OWORD *)(v29 + 288);
      *v59 = *v60;
      *(_OWORD *)(v28 + 288) = v62;
      *(_OWORD *)(v28 + 297) = *(_OWORD *)(v29 + 297);
    }
    else
    {
      v63 = *(_QWORD *)(v29 + 296);
      v64 = *(_QWORD *)(v29 + 304);
      *(_QWORD *)(v28 + 296) = v63;
      *(_QWORD *)(v28 + 304) = v64;
      (**(void (***)(_OWORD *, _OWORD *))(v63 - 8))(v59, v60);
      v65 = (BOOL *)(v28 + 312);
      *v65 = (v61 & 1) != 0;
    }
    *(_WORD *)(v28 + 313) = *(_WORD *)(v29 + 313);
    *(_BYTE *)(v28 + 315) = 1;
  }
  else
  {
    *(_QWORD *)(v28 + 32) = *(_QWORD *)v32;
    *(_BYTE *)(v28 + 315) = 0;
    swift_retain();
  }
  *(_BYTE *)(v28 + 316) = *(_BYTE *)(v29 + 316);
  v66 = *(_QWORD *)(v29 + 320);
  if (v66)
  {
    v67 = *(_QWORD *)(v29 + 328);
    *(_QWORD *)(v28 + 320) = v66;
    *(_QWORD *)(v28 + 328) = v67;
    swift_retain();
    v68 = *(_QWORD *)(v29 + 336);
    if (v68)
      goto LABEL_41;
  }
  else
  {
    *(_OWORD *)(v28 + 320) = *(_OWORD *)(v29 + 320);
    v68 = *(_QWORD *)(v29 + 336);
    if (v68)
    {
LABEL_41:
      v69 = *(_QWORD *)(v29 + 344);
      *(_QWORD *)(v28 + 336) = v68;
      *(_QWORD *)(v28 + 344) = v69;
      swift_retain();
      v70 = *(_QWORD *)(v29 + 352);
      if (v70)
        goto LABEL_42;
      goto LABEL_47;
    }
  }
  *(_OWORD *)(v28 + 336) = *(_OWORD *)(v29 + 336);
  v70 = *(_QWORD *)(v29 + 352);
  if (v70)
  {
LABEL_42:
    v71 = *(_QWORD *)(v29 + 360);
    *(_QWORD *)(v28 + 352) = v70;
    *(_QWORD *)(v28 + 360) = v71;
    swift_retain();
    v72 = *(_QWORD *)(v29 + 368);
    if (v72)
      goto LABEL_43;
LABEL_48:
    *(_OWORD *)(v28 + 368) = *(_OWORD *)(v29 + 368);
    v74 = *(_QWORD *)(v29 + 384);
    if (v74)
      goto LABEL_44;
    goto LABEL_49;
  }
LABEL_47:
  *(_OWORD *)(v28 + 352) = *(_OWORD *)(v29 + 352);
  v72 = *(_QWORD *)(v29 + 368);
  if (!v72)
    goto LABEL_48;
LABEL_43:
  v73 = *(_QWORD *)(v29 + 376);
  *(_QWORD *)(v28 + 368) = v72;
  *(_QWORD *)(v28 + 376) = v73;
  swift_retain();
  v74 = *(_QWORD *)(v29 + 384);
  if (v74)
  {
LABEL_44:
    v75 = *(_QWORD *)(v29 + 392);
    *(_QWORD *)(v28 + 384) = v74;
    *(_QWORD *)(v28 + 392) = v75;
    swift_retain();
    goto LABEL_50;
  }
LABEL_49:
  *(_OWORD *)(v28 + 384) = *(_OWORD *)(v29 + 384);
LABEL_50:
  v76 = *(unsigned __int8 *)(v29 + 504);
  v230 = v15;
  v231 = a1;
  v229 = v16;
  if (v76 == 255)
  {
    v77 = *(_OWORD *)(v29 + 480);
    *(_OWORD *)(v28 + 464) = *(_OWORD *)(v29 + 464);
    *(_OWORD *)(v28 + 480) = v77;
    *(_OWORD *)(v28 + 489) = *(_OWORD *)(v29 + 489);
    v78 = *(_OWORD *)(v29 + 416);
    *(_OWORD *)(v28 + 400) = *(_OWORD *)(v29 + 400);
    *(_OWORD *)(v28 + 416) = v78;
    v79 = *(_OWORD *)(v29 + 448);
    *(_OWORD *)(v28 + 432) = *(_OWORD *)(v29 + 432);
    *(_OWORD *)(v28 + 448) = v79;
  }
  else
  {
    v224 = v76 & 1;
    v80 = *(_QWORD *)(v29 + 400);
    v81 = *(_QWORD *)(v29 + 408);
    v82 = *(_QWORD *)(v29 + 416);
    v83 = *(_QWORD *)(v29 + 424);
    v84 = *(_QWORD *)(v29 + 432);
    v85 = *(_QWORD *)(v29 + 440);
    v86 = *(_QWORD *)(v29 + 448);
    v87 = *(_QWORD *)(v29 + 456);
    v200 = *(_QWORD *)(v29 + 464);
    v204 = *(_QWORD *)(v29 + 472);
    v209 = *(_QWORD *)(v29 + 480);
    v214 = *(_QWORD *)(v29 + 488);
    v219 = *(_QWORD *)(v29 + 496);
    sub_21421BAE4(v80, v81, v82, v83, v84, v85, v86, v87, v200);
    *(_QWORD *)(v28 + 400) = v80;
    *(_QWORD *)(v28 + 408) = v81;
    *(_QWORD *)(v28 + 416) = v82;
    *(_QWORD *)(v28 + 424) = v83;
    *(_QWORD *)(v28 + 432) = v84;
    *(_QWORD *)(v28 + 440) = v85;
    *(_QWORD *)(v28 + 448) = v86;
    *(_QWORD *)(v28 + 456) = v87;
    *(_QWORD *)(v28 + 464) = v200;
    *(_QWORD *)(v28 + 472) = v204;
    *(_QWORD *)(v28 + 480) = v209;
    *(_QWORD *)(v28 + 488) = v214;
    *(_QWORD *)(v28 + 496) = v219;
    *(_BYTE *)(v28 + 504) = v224;
  }
  v88 = *(unsigned __int8 *)(v29 + 616);
  if (v88 == 255)
  {
    v89 = *(_OWORD *)(v29 + 592);
    *(_OWORD *)(v28 + 576) = *(_OWORD *)(v29 + 576);
    *(_OWORD *)(v28 + 592) = v89;
    *(_OWORD *)(v28 + 601) = *(_OWORD *)(v29 + 601);
    v90 = *(_OWORD *)(v29 + 528);
    *(_OWORD *)(v28 + 512) = *(_OWORD *)(v29 + 512);
    *(_OWORD *)(v28 + 528) = v90;
    v91 = *(_OWORD *)(v29 + 560);
    *(_OWORD *)(v28 + 544) = *(_OWORD *)(v29 + 544);
    *(_OWORD *)(v28 + 560) = v91;
  }
  else
  {
    v225 = v88 & 1;
    v92 = *(_QWORD *)(v29 + 512);
    v93 = *(_QWORD *)(v29 + 520);
    v94 = *(_QWORD *)(v29 + 528);
    v95 = *(_QWORD *)(v29 + 536);
    v96 = *(_QWORD *)(v29 + 544);
    v97 = *(_QWORD *)(v29 + 552);
    v98 = *(_QWORD *)(v29 + 560);
    v99 = *(_QWORD *)(v29 + 568);
    v201 = *(_QWORD *)(v29 + 576);
    v205 = *(_QWORD *)(v29 + 584);
    v210 = *(_QWORD *)(v29 + 592);
    v215 = *(_QWORD *)(v29 + 600);
    v220 = *(_QWORD *)(v29 + 608);
    sub_21421BAE4(v92, v93, v94, v95, v96, v97, v98, v99, v201);
    *(_QWORD *)(v28 + 512) = v92;
    *(_QWORD *)(v28 + 520) = v93;
    *(_QWORD *)(v28 + 528) = v94;
    *(_QWORD *)(v28 + 536) = v95;
    *(_QWORD *)(v28 + 544) = v96;
    *(_QWORD *)(v28 + 552) = v97;
    *(_QWORD *)(v28 + 560) = v98;
    *(_QWORD *)(v28 + 568) = v99;
    *(_QWORD *)(v28 + 576) = v201;
    *(_QWORD *)(v28 + 584) = v205;
    *(_QWORD *)(v28 + 592) = v210;
    *(_QWORD *)(v28 + 600) = v215;
    *(_QWORD *)(v28 + 608) = v220;
    *(_BYTE *)(v28 + 616) = v225;
  }
  v100 = *(unsigned __int8 *)(v29 + 720);
  if (v100 == 255)
  {
    v101 = *(_OWORD *)(v29 + 704);
    *(_OWORD *)(v28 + 688) = *(_OWORD *)(v29 + 688);
    *(_OWORD *)(v28 + 704) = v101;
    *(_BYTE *)(v28 + 720) = *(_BYTE *)(v29 + 720);
    v102 = *(_OWORD *)(v29 + 640);
    *(_OWORD *)(v28 + 624) = *(_OWORD *)(v29 + 624);
    *(_OWORD *)(v28 + 640) = v102;
    v103 = *(_OWORD *)(v29 + 672);
    *(_OWORD *)(v28 + 656) = *(_OWORD *)(v29 + 656);
    *(_OWORD *)(v28 + 672) = v103;
  }
  else
  {
    v226 = v100 & 1;
    v104 = *(_QWORD *)(v29 + 624);
    v105 = *(_QWORD *)(v29 + 632);
    v106 = *(_QWORD *)(v29 + 640);
    v107 = *(_QWORD *)(v29 + 648);
    v108 = *(_QWORD *)(v29 + 656);
    v109 = *(_QWORD *)(v29 + 664);
    v110 = *(_QWORD *)(v29 + 672);
    v111 = *(_QWORD *)(v29 + 680);
    v206 = *(_QWORD *)(v29 + 688);
    v211 = *(_QWORD *)(v29 + 696);
    v216 = *(_QWORD *)(v29 + 704);
    v221 = *(_QWORD *)(v29 + 712);
    sub_21421B808(v104, v105, v106, v107, v108, v109, v110, v111);
    *(_QWORD *)(v28 + 624) = v104;
    *(_QWORD *)(v28 + 632) = v105;
    *(_QWORD *)(v28 + 640) = v106;
    *(_QWORD *)(v28 + 648) = v107;
    *(_QWORD *)(v28 + 656) = v108;
    *(_QWORD *)(v28 + 664) = v109;
    *(_QWORD *)(v28 + 672) = v110;
    *(_QWORD *)(v28 + 680) = v111;
    *(_QWORD *)(v28 + 688) = v206;
    *(_QWORD *)(v28 + 696) = v211;
    *(_QWORD *)(v28 + 704) = v216;
    *(_QWORD *)(v28 + 712) = v221;
    *(_BYTE *)(v28 + 720) = v226;
  }
  v112 = *(unsigned __int8 *)(v29 + 856);
  if (v112 != 255)
  {
    v117 = *(_QWORD *)(v29 + 736);
    *(_QWORD *)(v28 + 728) = *(_QWORD *)(v29 + 728);
    *(_QWORD *)(v28 + 736) = v117;
    v118 = (_OWORD *)(v28 + 744);
    v119 = (_OWORD *)(v29 + 744);
    v120 = *(_QWORD *)(v29 + 768);
    swift_retain();
    if ((v112 & 1) == 0)
    {
      if (v120)
      {
        *(_QWORD *)(v28 + 768) = v120;
        *(_QWORD *)(v28 + 776) = *(_QWORD *)(v29 + 776);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v120 - 8))(v28 + 744, v29 + 744, v120);
        v121 = *(_QWORD *)(v29 + 784);
        if (v121)
        {
LABEL_64:
          v122 = *(_QWORD *)(v29 + 792);
          *(_QWORD *)(v28 + 784) = v121;
          *(_QWORD *)(v28 + 792) = v122;
          swift_retain();
LABEL_70:
          *(_QWORD *)(v28 + 800) = *(_QWORD *)(v29 + 800);
          v126 = (uint64_t *)(v29 + 808);
          v127 = *(unsigned __int8 *)(v29 + 816);
          swift_bridgeObjectRetain();
          if (v127 == 255)
          {
            *(_QWORD *)(v28 + 808) = *v126;
            *(_BYTE *)(v28 + 816) = *(_BYTE *)(v29 + 816);
          }
          else
          {
            v128 = v127 & 1;
            v129 = *v126;
            sub_2141E83F4(v129, v128);
            *(_QWORD *)(v28 + 808) = v129;
            *(_BYTE *)(v28 + 816) = v128;
          }
          v130 = *(_OWORD *)(v29 + 840);
          *(_OWORD *)(v28 + 824) = *(_OWORD *)(v29 + 824);
          *(_OWORD *)(v28 + 840) = v130;
          *(_BYTE *)(v28 + 856) = 0;
          goto LABEL_80;
        }
      }
      else
      {
        v125 = *(_OWORD *)(v29 + 760);
        *v118 = *v119;
        *(_OWORD *)(v28 + 760) = v125;
        *(_QWORD *)(v28 + 776) = *(_QWORD *)(v29 + 776);
        v121 = *(_QWORD *)(v29 + 784);
        if (v121)
          goto LABEL_64;
      }
      *(_OWORD *)(v28 + 784) = *(_OWORD *)(v29 + 784);
      goto LABEL_70;
    }
    if (v120)
    {
      *(_QWORD *)(v28 + 768) = v120;
      *(_QWORD *)(v28 + 776) = *(_QWORD *)(v29 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v120 - 8))(v28 + 744, v29 + 744, v120);
      v123 = *(_QWORD *)(v29 + 784);
      if (v123)
      {
LABEL_67:
        v124 = *(_QWORD *)(v29 + 792);
        *(_QWORD *)(v28 + 784) = v123;
        *(_QWORD *)(v28 + 792) = v124;
        swift_retain();
LABEL_76:
        *(_QWORD *)(v28 + 800) = *(_QWORD *)(v29 + 800);
        v132 = (uint64_t *)(v29 + 808);
        v133 = *(unsigned __int8 *)(v29 + 816);
        swift_bridgeObjectRetain();
        if (v133 == 255)
        {
          *(_QWORD *)(v28 + 808) = *v132;
          *(_BYTE *)(v28 + 816) = *(_BYTE *)(v29 + 816);
        }
        else
        {
          v134 = v133 & 1;
          v135 = *v132;
          sub_2141E83F4(v135, v134);
          *(_QWORD *)(v28 + 808) = v135;
          *(_BYTE *)(v28 + 816) = v134;
        }
        v136 = *(_OWORD *)(v29 + 840);
        *(_OWORD *)(v28 + 824) = *(_OWORD *)(v29 + 824);
        *(_OWORD *)(v28 + 840) = v136;
        *(_BYTE *)(v28 + 856) = 1;
        goto LABEL_80;
      }
    }
    else
    {
      v131 = *(_OWORD *)(v29 + 760);
      *v118 = *v119;
      *(_OWORD *)(v28 + 760) = v131;
      *(_QWORD *)(v28 + 776) = *(_QWORD *)(v29 + 776);
      v123 = *(_QWORD *)(v29 + 784);
      if (v123)
        goto LABEL_67;
    }
    *(_OWORD *)(v28 + 784) = *(_OWORD *)(v29 + 784);
    goto LABEL_76;
  }
  v113 = *(_OWORD *)(v29 + 840);
  *(_OWORD *)(v28 + 824) = *(_OWORD *)(v29 + 824);
  *(_OWORD *)(v28 + 840) = v113;
  *(_BYTE *)(v28 + 856) = *(_BYTE *)(v29 + 856);
  v114 = *(_OWORD *)(v29 + 776);
  *(_OWORD *)(v28 + 760) = *(_OWORD *)(v29 + 760);
  *(_OWORD *)(v28 + 776) = v114;
  v115 = *(_OWORD *)(v29 + 808);
  *(_OWORD *)(v28 + 792) = *(_OWORD *)(v29 + 792);
  *(_OWORD *)(v28 + 808) = v115;
  v116 = *(_OWORD *)(v29 + 744);
  *(_OWORD *)(v28 + 728) = *(_OWORD *)(v29 + 728);
  *(_OWORD *)(v28 + 744) = v116;
LABEL_80:
  v137 = *(unsigned __int8 *)(v29 + 968);
  if (v137 == 255)
  {
    v138 = *(_OWORD *)(v29 + 944);
    *(_OWORD *)(v28 + 928) = *(_OWORD *)(v29 + 928);
    *(_OWORD *)(v28 + 944) = v138;
    *(_OWORD *)(v28 + 953) = *(_OWORD *)(v29 + 953);
    v139 = *(_OWORD *)(v29 + 880);
    *(_OWORD *)(v28 + 864) = *(_OWORD *)(v29 + 864);
    *(_OWORD *)(v28 + 880) = v139;
    v140 = *(_OWORD *)(v29 + 912);
    *(_OWORD *)(v28 + 896) = *(_OWORD *)(v29 + 896);
    *(_OWORD *)(v28 + 912) = v140;
  }
  else
  {
    v227 = v137 & 1;
    v141 = *(_QWORD *)(v29 + 864);
    v142 = *(_QWORD *)(v29 + 872);
    v143 = *(_QWORD *)(v29 + 880);
    v144 = *(_QWORD *)(v29 + 888);
    v145 = *(_QWORD *)(v29 + 896);
    v146 = *(_QWORD *)(v29 + 904);
    v147 = *(_QWORD *)(v29 + 912);
    v148 = *(_QWORD *)(v29 + 920);
    v202 = *(_QWORD *)(v29 + 928);
    v207 = *(_QWORD *)(v29 + 936);
    v212 = *(_QWORD *)(v29 + 944);
    v217 = *(_QWORD *)(v29 + 952);
    v222 = *(_QWORD *)(v29 + 960);
    sub_21421BAE4(v141, v142, v143, v144, v145, v146, v147, v148, v202);
    *(_QWORD *)(v28 + 864) = v141;
    *(_QWORD *)(v28 + 872) = v142;
    *(_QWORD *)(v28 + 880) = v143;
    *(_QWORD *)(v28 + 888) = v144;
    *(_QWORD *)(v28 + 896) = v145;
    *(_QWORD *)(v28 + 904) = v146;
    *(_QWORD *)(v28 + 912) = v147;
    *(_QWORD *)(v28 + 920) = v148;
    *(_QWORD *)(v28 + 928) = v202;
    *(_QWORD *)(v28 + 936) = v207;
    *(_QWORD *)(v28 + 944) = v212;
    *(_QWORD *)(v28 + 952) = v217;
    *(_QWORD *)(v28 + 960) = v222;
    *(_BYTE *)(v28 + 968) = v227;
  }
  v149 = *(unsigned __int8 *)(v29 + 1104);
  if (v149 == 255)
  {
    v150 = *(_OWORD *)(v29 + 1088);
    *(_OWORD *)(v28 + 1072) = *(_OWORD *)(v29 + 1072);
    *(_OWORD *)(v28 + 1088) = v150;
    *(_BYTE *)(v28 + 1104) = *(_BYTE *)(v29 + 1104);
    v151 = *(_OWORD *)(v29 + 1024);
    *(_OWORD *)(v28 + 1008) = *(_OWORD *)(v29 + 1008);
    *(_OWORD *)(v28 + 1024) = v151;
    v152 = *(_OWORD *)(v29 + 1056);
    *(_OWORD *)(v28 + 1040) = *(_OWORD *)(v29 + 1040);
    *(_OWORD *)(v28 + 1056) = v152;
    v153 = *(_OWORD *)(v29 + 992);
    *(_OWORD *)(v28 + 976) = *(_OWORD *)(v29 + 976);
    *(_OWORD *)(v28 + 992) = v153;
  }
  else
  {
    v228 = v149 & 1;
    v154 = *(_QWORD *)(v29 + 976);
    v155 = *(_QWORD *)(v29 + 984);
    v156 = *(_QWORD *)(v29 + 992);
    v157 = *(_QWORD *)(v29 + 1000);
    v158 = *(_QWORD *)(v29 + 1008);
    v159 = *(_QWORD *)(v29 + 1016);
    v160 = *(_QWORD *)(v29 + 1024);
    v161 = *(_QWORD *)(v29 + 1032);
    v197 = *(_QWORD *)(v29 + 1040);
    v198 = *(_QWORD *)(v29 + 1048);
    v199 = *(_QWORD *)(v29 + 1056);
    v203 = *(_QWORD *)(v29 + 1064);
    v208 = *(_QWORD *)(v29 + 1072);
    v213 = *(_QWORD *)(v29 + 1080);
    v218 = *(_QWORD *)(v29 + 1088);
    v223 = *(_QWORD *)(v29 + 1096);
    sub_21421B980(v154, v155, v156, v157, v158, v159, v160, v161, v197, v198, v199, v203);
    *(_QWORD *)(v28 + 976) = v154;
    *(_QWORD *)(v28 + 984) = v155;
    *(_QWORD *)(v28 + 992) = v156;
    *(_QWORD *)(v28 + 1000) = v157;
    *(_QWORD *)(v28 + 1008) = v158;
    *(_QWORD *)(v28 + 1016) = v159;
    *(_QWORD *)(v28 + 1024) = v160;
    *(_QWORD *)(v28 + 1032) = v161;
    *(_QWORD *)(v28 + 1040) = v197;
    *(_QWORD *)(v28 + 1048) = v198;
    *(_QWORD *)(v28 + 1056) = v199;
    *(_QWORD *)(v28 + 1064) = v203;
    *(_QWORD *)(v28 + 1072) = v208;
    *(_QWORD *)(v28 + 1080) = v213;
    *(_QWORD *)(v28 + 1088) = v218;
    *(_QWORD *)(v28 + 1096) = v223;
    *(_BYTE *)(v28 + 1104) = v228;
  }
  v25 = v231;
  *(_OWORD *)(v28 + 1112) = *(_OWORD *)(v29 + 1112);
  *(_OWORD *)(v28 + 1128) = *(_OWORD *)(v29 + 1128);
  *(_BYTE *)(v28 + 1144) = *(_BYTE *)(v29 + 1144);
  *(_OWORD *)(v28 + 1152) = *(_OWORD *)(v29 + 1152);
  *(_OWORD *)(v28 + 1168) = *(_OWORD *)(v29 + 1168);
  v162 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v229(v28 + v162[14], v29 + v162[14], v230);
  *(_QWORD *)(v28 + v162[15]) = *(_QWORD *)(v29 + v162[15]);
  *(_QWORD *)(v28 + v162[16]) = *(_QWORD *)(v29 + v162[16]);
  v163 = v162[17];
  v164 = v28 + v163;
  v165 = v29 + v163;
  v166 = *(unsigned __int8 *)(v29 + v163 + 40);
  swift_retain();
  swift_retain();
  if (v166 == 255)
  {
    v167 = *(_OWORD *)(v165 + 16);
    *(_OWORD *)v164 = *(_OWORD *)v165;
    *(_OWORD *)(v164 + 16) = v167;
    *(_OWORD *)(v164 + 25) = *(_OWORD *)(v165 + 25);
  }
  else
  {
    v168 = *(_OWORD *)(v165 + 24);
    *(_OWORD *)(v164 + 24) = v168;
    (**(void (***)(uint64_t, uint64_t))(v168 - 8))(v164, v165);
    *(_BYTE *)(v164 + 40) = (v166 & 1) != 0;
  }
  v169 = (_OWORD *)(v164 + 48);
  v170 = (_OWORD *)(v165 + 48);
  v171 = *(unsigned __int8 *)(v165 + 88);
  if (v171 == 255)
  {
    v172 = *(_OWORD *)(v165 + 64);
    *v169 = *v170;
    *(_OWORD *)(v164 + 64) = v172;
    *(_OWORD *)(v164 + 73) = *(_OWORD *)(v165 + 73);
  }
  else
  {
    v173 = *(_OWORD *)(v165 + 72);
    *(_OWORD *)(v164 + 72) = v173;
    (**(void (***)(_OWORD *, _OWORD *))(v173 - 8))(v169, v170);
    *(_BYTE *)(v164 + 88) = (v171 & 1) != 0;
  }
  v174 = (_OWORD *)(v164 + 96);
  v175 = (_OWORD *)(v165 + 96);
  v176 = *(unsigned __int8 *)(v165 + 136);
  if (v176 == 255)
  {
    v177 = *(_OWORD *)(v165 + 112);
    *v174 = *v175;
    *(_OWORD *)(v164 + 112) = v177;
    *(_OWORD *)(v164 + 121) = *(_OWORD *)(v165 + 121);
  }
  else
  {
    v178 = *(_OWORD *)(v165 + 120);
    *(_OWORD *)(v164 + 120) = v178;
    (**(void (***)(_OWORD *, _OWORD *))(v178 - 8))(v174, v175);
    *(_BYTE *)(v164 + 136) = (v176 & 1) != 0;
  }
  v179 = (_OWORD *)(v164 + 144);
  v180 = (_OWORD *)(v165 + 144);
  v181 = *(unsigned __int8 *)(v165 + 184);
  if (v181 == 255)
  {
    v182 = *(_OWORD *)(v165 + 160);
    *v179 = *v180;
    *(_OWORD *)(v164 + 160) = v182;
    *(_OWORD *)(v164 + 169) = *(_OWORD *)(v165 + 169);
  }
  else
  {
    v183 = *(_OWORD *)(v165 + 168);
    *(_OWORD *)(v164 + 168) = v183;
    (**(void (***)(_OWORD *, _OWORD *))(v183 - 8))(v179, v180);
    *(_BYTE *)(v164 + 184) = (v181 & 1) != 0;
  }
  v184 = (_OWORD *)(v164 + 192);
  v185 = (_OWORD *)(v165 + 192);
  v186 = *(unsigned __int8 *)(v165 + 232);
  if (v186 == 255)
  {
    v187 = *(_OWORD *)(v165 + 208);
    *v184 = *v185;
    *(_OWORD *)(v164 + 208) = v187;
    *(_OWORD *)(v164 + 217) = *(_OWORD *)(v165 + 217);
  }
  else
  {
    v188 = *(_OWORD *)(v165 + 216);
    *(_OWORD *)(v164 + 216) = v188;
    (**(void (***)(_OWORD *, _OWORD *))(v188 - 8))(v184, v185);
    *(_BYTE *)(v164 + 232) = (v186 & 1) != 0;
  }
  v189 = (_OWORD *)(v164 + 240);
  v190 = (_OWORD *)(v165 + 240);
  v191 = *(unsigned __int8 *)(v165 + 280);
  if (v191 == 255)
  {
    v192 = *(_OWORD *)(v165 + 256);
    *v189 = *v190;
    *(_OWORD *)(v164 + 256) = v192;
    *(_OWORD *)(v164 + 265) = *(_OWORD *)(v165 + 265);
  }
  else
  {
    v193 = *(_QWORD *)(v165 + 264);
    v194 = *(_QWORD *)(v165 + 272);
    *(_QWORD *)(v164 + 264) = v193;
    *(_QWORD *)(v164 + 272) = v194;
    (**(void (***)(_OWORD *, _OWORD *))(v193 - 8))(v189, v190);
    v195 = (BOOL *)(v164 + 280);
    *v195 = (v191 & 1) != 0;
  }
  *(_WORD *)(v164 + 281) = *(_WORD *)(v165 + 281);
  return v25;
}

uint64_t sub_2144071EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_retain();
  sub_2141D975C(a1);
  return sub_2141D975C(a3);
}

uint64_t sub_214407220(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unsigned __int8 *v12;

  sub_214407638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v4 = a1 + a2[7];
  v5 = sub_2144240D4();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[9];
  if (*(_QWORD *)(v7 + 64))
    _s6Charts15AnyChartContentVwxx_0(v7 + 40);
  v8 = a1 + a2[10];
  swift_release();
  swift_release();
  swift_release();
  if ((*(_BYTE *)(v8 + 315) & 1) != 0)
  {
    if (*(unsigned __int8 *)(v8 + 72) != 255)
      _s6Charts15AnyChartContentVwxx_0(v8 + 32);
    if (*(unsigned __int8 *)(v8 + 120) != 255)
      _s6Charts15AnyChartContentVwxx_0(v8 + 80);
    if (*(unsigned __int8 *)(v8 + 168) != 255)
      _s6Charts15AnyChartContentVwxx_0(v8 + 128);
    if (*(unsigned __int8 *)(v8 + 216) != 255)
      _s6Charts15AnyChartContentVwxx_0(v8 + 176);
    if (*(unsigned __int8 *)(v8 + 264) != 255)
      _s6Charts15AnyChartContentVwxx_0(v8 + 224);
    if (*(unsigned __int8 *)(v8 + 312) != 255)
      _s6Charts15AnyChartContentVwxx_0(v8 + 272);
  }
  else
  {
    swift_release();
  }
  if (*(_QWORD *)(v8 + 320))
    swift_release();
  if (*(_QWORD *)(v8 + 336))
    swift_release();
  if (*(_QWORD *)(v8 + 352))
    swift_release();
  if (*(_QWORD *)(v8 + 368))
    swift_release();
  if (*(_QWORD *)(v8 + 384))
    swift_release();
  if (*(unsigned __int8 *)(v8 + 504) != 255)
    sub_21421BB6C(*(_QWORD *)(v8 + 400), *(_QWORD *)(v8 + 408), *(_QWORD *)(v8 + 416), *(_QWORD *)(v8 + 424), *(_QWORD *)(v8 + 432), *(_QWORD *)(v8 + 440), *(_QWORD *)(v8 + 448), *(_QWORD *)(v8 + 456), *(_OWORD *)(v8 + 464));
  if (*(unsigned __int8 *)(v8 + 616) != 255)
    sub_21421BB6C(*(_QWORD *)(v8 + 512), *(_QWORD *)(v8 + 520), *(_QWORD *)(v8 + 528), *(_QWORD *)(v8 + 536), *(_QWORD *)(v8 + 544), *(_QWORD *)(v8 + 552), *(_QWORD *)(v8 + 560), *(_QWORD *)(v8 + 568), *(_OWORD *)(v8 + 576));
  if (*(unsigned __int8 *)(v8 + 720) != 255)
    sub_21421B8A0(*(_QWORD *)(v8 + 624), *(_QWORD *)(v8 + 632), *(_QWORD *)(v8 + 640), *(_QWORD *)(v8 + 648), *(_QWORD *)(v8 + 656), *(_QWORD *)(v8 + 664), *(_QWORD *)(v8 + 672), *(_QWORD *)(v8 + 680));
  if (*(unsigned __int8 *)(v8 + 856) != 255)
  {
    swift_release();
    if (*(_QWORD *)(v8 + 768))
      _s6Charts15AnyChartContentVwxx_0(v8 + 744);
    if (*(_QWORD *)(v8 + 784))
      swift_release();
    swift_bridgeObjectRelease();
    v9 = *(unsigned __int8 *)(v8 + 816);
    if (v9 != 255)
      sub_2143ABBF8(*(_QWORD *)(v8 + 808), v9 & 1, MEMORY[0x24BEE4BC0], MEMORY[0x24BEE4EF8]);
  }
  if (*(unsigned __int8 *)(v8 + 968) != 255)
    sub_21421BB6C(*(_QWORD *)(v8 + 864), *(_QWORD *)(v8 + 872), *(_QWORD *)(v8 + 880), *(_QWORD *)(v8 + 888), *(_QWORD *)(v8 + 896), *(_QWORD *)(v8 + 904), *(_QWORD *)(v8 + 912), *(_QWORD *)(v8 + 920), *(_OWORD *)(v8 + 928));
  if (*(unsigned __int8 *)(v8 + 1104) != 255)
    sub_21421BA80(*(_QWORD *)(v8 + 976), *(_QWORD *)(v8 + 984), *(_QWORD *)(v8 + 992), *(_QWORD *)(v8 + 1000), *(_QWORD *)(v8 + 1008), *(_QWORD *)(v8 + 1016), *(_QWORD *)(v8 + 1024), *(_QWORD *)(v8 + 1032), *(_QWORD *)(v8 + 1040), *(_QWORD *)(v8 + 1048), *(_QWORD *)(v8 + 1056), *(_QWORD *)(v8 + 1064));
  v10 = type metadata accessor for ChartModel.Scenegraph();
  v6(v8 + *(int *)(v10 + 56), v5);
  swift_release();
  result = swift_release();
  v12 = (unsigned __int8 *)(v8 + *(int *)(v10 + 68));
  if (v12[40] != 255)
    result = _s6Charts15AnyChartContentVwxx_0(v8 + *(int *)(v10 + 68));
  if (v12[88] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v12 + 48));
  if (v12[136] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v12 + 96));
  if (v12[184] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v12 + 144));
  if (v12[232] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v12 + 192));
  if (v12[280] != 255)
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v12 + 240));
  return result;
}

uint64_t sub_214407638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release();
  sub_2141D972C(a1);
  return sub_2141D972C(a3);
}

uint64_t sub_21440766C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char v30;
  _OWORD *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  int v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  _OWORD *v51;
  int v52;
  __int128 v53;
  __int128 v54;
  BOOL *v55;
  _OWORD *v56;
  _OWORD *v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  BOOL *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _OWORD *v115;
  _OWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t *v123;
  int v124;
  char v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t *v129;
  int v130;
  char v131;
  uint64_t v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  __int128 v165;
  _OWORD *v166;
  _OWORD *v167;
  int v168;
  __int128 v169;
  __int128 v170;
  _OWORD *v171;
  _OWORD *v172;
  int v173;
  __int128 v174;
  __int128 v175;
  _OWORD *v176;
  _OWORD *v177;
  int v178;
  __int128 v179;
  __int128 v180;
  _OWORD *v181;
  _OWORD *v182;
  int v183;
  __int128 v184;
  __int128 v185;
  _OWORD *v186;
  _OWORD *v187;
  int v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  BOOL *v192;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char v222;
  char v223;
  char v224;
  char v225;
  void (*v226)(uint64_t, uint64_t, uint64_t);
  uint64_t v227;
  uint64_t v228;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_2144071EC(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v14 = sub_2144240D4();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)v17 = *(_BYTE *)v18;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
  v19 = (_OWORD *)(v17 + 40);
  v20 = (_OWORD *)(v18 + 40);
  v21 = *(_QWORD *)(v18 + 64);
  if (v21)
  {
    v22 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + 64) = v21;
    *(_QWORD *)(v17 + 72) = v22;
    (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v19, v20);
  }
  else
  {
    v23 = *(_OWORD *)(v18 + 56);
    *v19 = *v20;
    *(_OWORD *)(v17 + 56) = v23;
    *(_QWORD *)(v17 + 72) = *(_QWORD *)(v18 + 72);
  }
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)(a2 + v24 + 8);
  *(_QWORD *)v25 = *(_QWORD *)(a2 + v24);
  *(_QWORD *)(v25 + 8) = v27;
  v28 = *(_QWORD *)(a2 + v24 + 24);
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(a2 + v24 + 16);
  *(_QWORD *)(v25 + 24) = v28;
  v29 = (_OWORD *)(a2 + v24 + 32);
  v30 = *(_BYTE *)(v26 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v30 & 1) != 0)
  {
    v31 = (_OWORD *)(v25 + 32);
    v32 = *(unsigned __int8 *)(v26 + 72);
    if (v32 == 255)
    {
      v33 = *(_OWORD *)(v26 + 48);
      *v31 = *v29;
      *(_OWORD *)(v25 + 48) = v33;
      *(_OWORD *)(v25 + 57) = *(_OWORD *)(v26 + 57);
    }
    else
    {
      v34 = *(_OWORD *)(v26 + 56);
      *(_OWORD *)(v25 + 56) = v34;
      (**(void (***)(_OWORD *, uint64_t))(v34 - 8))(v31, v26 + 32);
      *(_BYTE *)(v25 + 72) = (v32 & 1) != 0;
    }
    v35 = (_OWORD *)(v25 + 80);
    v36 = (_OWORD *)(v26 + 80);
    v37 = *(unsigned __int8 *)(v26 + 120);
    if (v37 == 255)
    {
      v38 = *(_OWORD *)(v26 + 96);
      *v35 = *v36;
      *(_OWORD *)(v25 + 96) = v38;
      *(_OWORD *)(v25 + 105) = *(_OWORD *)(v26 + 105);
    }
    else
    {
      v39 = *(_OWORD *)(v26 + 104);
      *(_OWORD *)(v25 + 104) = v39;
      (**(void (***)(_OWORD *, _OWORD *))(v39 - 8))(v35, v36);
      *(_BYTE *)(v25 + 120) = (v37 & 1) != 0;
    }
    v40 = (_OWORD *)(v25 + 128);
    v41 = (_OWORD *)(v26 + 128);
    v42 = *(unsigned __int8 *)(v26 + 168);
    if (v42 == 255)
    {
      v43 = *(_OWORD *)(v26 + 144);
      *v40 = *v41;
      *(_OWORD *)(v25 + 144) = v43;
      *(_OWORD *)(v25 + 153) = *(_OWORD *)(v26 + 153);
    }
    else
    {
      v44 = *(_OWORD *)(v26 + 152);
      *(_OWORD *)(v25 + 152) = v44;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v40, v41);
      *(_BYTE *)(v25 + 168) = (v42 & 1) != 0;
    }
    v45 = (_OWORD *)(v25 + 176);
    v46 = (_OWORD *)(v26 + 176);
    v47 = *(unsigned __int8 *)(v26 + 216);
    if (v47 == 255)
    {
      v48 = *(_OWORD *)(v26 + 192);
      *v45 = *v46;
      *(_OWORD *)(v25 + 192) = v48;
      *(_OWORD *)(v25 + 201) = *(_OWORD *)(v26 + 201);
    }
    else
    {
      v49 = *(_OWORD *)(v26 + 200);
      *(_OWORD *)(v25 + 200) = v49;
      (**(void (***)(_OWORD *, _OWORD *))(v49 - 8))(v45, v46);
      *(_BYTE *)(v25 + 216) = (v47 & 1) != 0;
    }
    v50 = (_OWORD *)(v25 + 224);
    v51 = (_OWORD *)(v26 + 224);
    v52 = *(unsigned __int8 *)(v26 + 264);
    if (v52 == 255)
    {
      v53 = *(_OWORD *)(v26 + 240);
      *v50 = *v51;
      *(_OWORD *)(v25 + 240) = v53;
      *(_OWORD *)(v25 + 249) = *(_OWORD *)(v26 + 249);
    }
    else
    {
      v54 = *(_OWORD *)(v26 + 248);
      *(_OWORD *)(v25 + 248) = v54;
      (**(void (***)(_OWORD *, _OWORD *))(v54 - 8))(v50, v51);
      v55 = (BOOL *)(v25 + 264);
      *v55 = (v52 & 1) != 0;
    }
    v56 = (_OWORD *)(v25 + 272);
    v57 = (_OWORD *)(v26 + 272);
    v58 = *(unsigned __int8 *)(v26 + 312);
    if (v58 == 255)
    {
      v59 = *(_OWORD *)(v26 + 288);
      *v56 = *v57;
      *(_OWORD *)(v25 + 288) = v59;
      *(_OWORD *)(v25 + 297) = *(_OWORD *)(v26 + 297);
    }
    else
    {
      v60 = *(_QWORD *)(v26 + 296);
      v61 = *(_QWORD *)(v26 + 304);
      *(_QWORD *)(v25 + 296) = v60;
      *(_QWORD *)(v25 + 304) = v61;
      (**(void (***)(_OWORD *, _OWORD *))(v60 - 8))(v56, v57);
      v62 = (BOOL *)(v25 + 312);
      *v62 = (v58 & 1) != 0;
    }
    *(_WORD *)(v25 + 313) = *(_WORD *)(v26 + 313);
    *(_BYTE *)(v25 + 315) = 1;
  }
  else
  {
    *(_QWORD *)(v25 + 32) = *(_QWORD *)v29;
    *(_BYTE *)(v25 + 315) = 0;
    swift_retain();
  }
  *(_BYTE *)(v25 + 316) = *(_BYTE *)(v26 + 316);
  v63 = *(_QWORD *)(v26 + 320);
  if (v63)
  {
    v64 = *(_QWORD *)(v26 + 328);
    *(_QWORD *)(v25 + 320) = v63;
    *(_QWORD *)(v25 + 328) = v64;
    swift_retain();
    v65 = *(_QWORD *)(v26 + 336);
    if (v65)
      goto LABEL_39;
  }
  else
  {
    *(_OWORD *)(v25 + 320) = *(_OWORD *)(v26 + 320);
    v65 = *(_QWORD *)(v26 + 336);
    if (v65)
    {
LABEL_39:
      v66 = *(_QWORD *)(v26 + 344);
      *(_QWORD *)(v25 + 336) = v65;
      *(_QWORD *)(v25 + 344) = v66;
      swift_retain();
      v67 = *(_QWORD *)(v26 + 352);
      if (v67)
        goto LABEL_40;
      goto LABEL_45;
    }
  }
  *(_OWORD *)(v25 + 336) = *(_OWORD *)(v26 + 336);
  v67 = *(_QWORD *)(v26 + 352);
  if (v67)
  {
LABEL_40:
    v68 = *(_QWORD *)(v26 + 360);
    *(_QWORD *)(v25 + 352) = v67;
    *(_QWORD *)(v25 + 360) = v68;
    swift_retain();
    v69 = *(_QWORD *)(v26 + 368);
    if (v69)
      goto LABEL_41;
LABEL_46:
    *(_OWORD *)(v25 + 368) = *(_OWORD *)(v26 + 368);
    v71 = *(_QWORD *)(v26 + 384);
    if (v71)
      goto LABEL_42;
    goto LABEL_47;
  }
LABEL_45:
  *(_OWORD *)(v25 + 352) = *(_OWORD *)(v26 + 352);
  v69 = *(_QWORD *)(v26 + 368);
  if (!v69)
    goto LABEL_46;
LABEL_41:
  v70 = *(_QWORD *)(v26 + 376);
  *(_QWORD *)(v25 + 368) = v69;
  *(_QWORD *)(v25 + 376) = v70;
  swift_retain();
  v71 = *(_QWORD *)(v26 + 384);
  if (v71)
  {
LABEL_42:
    v72 = *(_QWORD *)(v26 + 392);
    *(_QWORD *)(v25 + 384) = v71;
    *(_QWORD *)(v25 + 392) = v72;
    swift_retain();
    goto LABEL_48;
  }
LABEL_47:
  *(_OWORD *)(v25 + 384) = *(_OWORD *)(v26 + 384);
LABEL_48:
  v73 = *(unsigned __int8 *)(v26 + 504);
  v227 = v14;
  v228 = a1;
  v226 = v15;
  if (v73 == 255)
  {
    v74 = *(_OWORD *)(v26 + 480);
    *(_OWORD *)(v25 + 464) = *(_OWORD *)(v26 + 464);
    *(_OWORD *)(v25 + 480) = v74;
    *(_OWORD *)(v25 + 489) = *(_OWORD *)(v26 + 489);
    v75 = *(_OWORD *)(v26 + 416);
    *(_OWORD *)(v25 + 400) = *(_OWORD *)(v26 + 400);
    *(_OWORD *)(v25 + 416) = v75;
    v76 = *(_OWORD *)(v26 + 448);
    *(_OWORD *)(v25 + 432) = *(_OWORD *)(v26 + 432);
    *(_OWORD *)(v25 + 448) = v76;
  }
  else
  {
    v221 = v73 & 1;
    v77 = *(_QWORD *)(v26 + 400);
    v78 = *(_QWORD *)(v26 + 408);
    v79 = *(_QWORD *)(v26 + 416);
    v80 = *(_QWORD *)(v26 + 424);
    v81 = *(_QWORD *)(v26 + 432);
    v82 = *(_QWORD *)(v26 + 440);
    v83 = *(_QWORD *)(v26 + 448);
    v84 = *(_QWORD *)(v26 + 456);
    v197 = *(_QWORD *)(v26 + 464);
    v201 = *(_QWORD *)(v26 + 472);
    v206 = *(_QWORD *)(v26 + 480);
    v211 = *(_QWORD *)(v26 + 488);
    v216 = *(_QWORD *)(v26 + 496);
    sub_21421BAE4(v77, v78, v79, v80, v81, v82, v83, v84, v197);
    *(_QWORD *)(v25 + 400) = v77;
    *(_QWORD *)(v25 + 408) = v78;
    *(_QWORD *)(v25 + 416) = v79;
    *(_QWORD *)(v25 + 424) = v80;
    *(_QWORD *)(v25 + 432) = v81;
    *(_QWORD *)(v25 + 440) = v82;
    *(_QWORD *)(v25 + 448) = v83;
    *(_QWORD *)(v25 + 456) = v84;
    *(_QWORD *)(v25 + 464) = v197;
    *(_QWORD *)(v25 + 472) = v201;
    *(_QWORD *)(v25 + 480) = v206;
    *(_QWORD *)(v25 + 488) = v211;
    *(_QWORD *)(v25 + 496) = v216;
    *(_BYTE *)(v25 + 504) = v221;
  }
  v85 = *(unsigned __int8 *)(v26 + 616);
  if (v85 == 255)
  {
    v86 = *(_OWORD *)(v26 + 592);
    *(_OWORD *)(v25 + 576) = *(_OWORD *)(v26 + 576);
    *(_OWORD *)(v25 + 592) = v86;
    *(_OWORD *)(v25 + 601) = *(_OWORD *)(v26 + 601);
    v87 = *(_OWORD *)(v26 + 528);
    *(_OWORD *)(v25 + 512) = *(_OWORD *)(v26 + 512);
    *(_OWORD *)(v25 + 528) = v87;
    v88 = *(_OWORD *)(v26 + 560);
    *(_OWORD *)(v25 + 544) = *(_OWORD *)(v26 + 544);
    *(_OWORD *)(v25 + 560) = v88;
  }
  else
  {
    v222 = v85 & 1;
    v89 = *(_QWORD *)(v26 + 512);
    v90 = *(_QWORD *)(v26 + 520);
    v91 = *(_QWORD *)(v26 + 528);
    v92 = *(_QWORD *)(v26 + 536);
    v93 = *(_QWORD *)(v26 + 544);
    v94 = *(_QWORD *)(v26 + 552);
    v95 = *(_QWORD *)(v26 + 560);
    v96 = *(_QWORD *)(v26 + 568);
    v198 = *(_QWORD *)(v26 + 576);
    v202 = *(_QWORD *)(v26 + 584);
    v207 = *(_QWORD *)(v26 + 592);
    v212 = *(_QWORD *)(v26 + 600);
    v217 = *(_QWORD *)(v26 + 608);
    sub_21421BAE4(v89, v90, v91, v92, v93, v94, v95, v96, v198);
    *(_QWORD *)(v25 + 512) = v89;
    *(_QWORD *)(v25 + 520) = v90;
    *(_QWORD *)(v25 + 528) = v91;
    *(_QWORD *)(v25 + 536) = v92;
    *(_QWORD *)(v25 + 544) = v93;
    *(_QWORD *)(v25 + 552) = v94;
    *(_QWORD *)(v25 + 560) = v95;
    *(_QWORD *)(v25 + 568) = v96;
    *(_QWORD *)(v25 + 576) = v198;
    *(_QWORD *)(v25 + 584) = v202;
    *(_QWORD *)(v25 + 592) = v207;
    *(_QWORD *)(v25 + 600) = v212;
    *(_QWORD *)(v25 + 608) = v217;
    *(_BYTE *)(v25 + 616) = v222;
  }
  v97 = *(unsigned __int8 *)(v26 + 720);
  if (v97 == 255)
  {
    v98 = *(_OWORD *)(v26 + 704);
    *(_OWORD *)(v25 + 688) = *(_OWORD *)(v26 + 688);
    *(_OWORD *)(v25 + 704) = v98;
    *(_BYTE *)(v25 + 720) = *(_BYTE *)(v26 + 720);
    v99 = *(_OWORD *)(v26 + 640);
    *(_OWORD *)(v25 + 624) = *(_OWORD *)(v26 + 624);
    *(_OWORD *)(v25 + 640) = v99;
    v100 = *(_OWORD *)(v26 + 672);
    *(_OWORD *)(v25 + 656) = *(_OWORD *)(v26 + 656);
    *(_OWORD *)(v25 + 672) = v100;
  }
  else
  {
    v223 = v97 & 1;
    v101 = *(_QWORD *)(v26 + 624);
    v102 = *(_QWORD *)(v26 + 632);
    v103 = *(_QWORD *)(v26 + 640);
    v104 = *(_QWORD *)(v26 + 648);
    v105 = *(_QWORD *)(v26 + 656);
    v106 = *(_QWORD *)(v26 + 664);
    v107 = *(_QWORD *)(v26 + 672);
    v108 = *(_QWORD *)(v26 + 680);
    v203 = *(_QWORD *)(v26 + 688);
    v208 = *(_QWORD *)(v26 + 696);
    v213 = *(_QWORD *)(v26 + 704);
    v218 = *(_QWORD *)(v26 + 712);
    sub_21421B808(v101, v102, v103, v104, v105, v106, v107, v108);
    *(_QWORD *)(v25 + 624) = v101;
    *(_QWORD *)(v25 + 632) = v102;
    *(_QWORD *)(v25 + 640) = v103;
    *(_QWORD *)(v25 + 648) = v104;
    *(_QWORD *)(v25 + 656) = v105;
    *(_QWORD *)(v25 + 664) = v106;
    *(_QWORD *)(v25 + 672) = v107;
    *(_QWORD *)(v25 + 680) = v108;
    *(_QWORD *)(v25 + 688) = v203;
    *(_QWORD *)(v25 + 696) = v208;
    *(_QWORD *)(v25 + 704) = v213;
    *(_QWORD *)(v25 + 712) = v218;
    *(_BYTE *)(v25 + 720) = v223;
  }
  v109 = *(unsigned __int8 *)(v26 + 856);
  if (v109 == 255)
  {
    v110 = *(_OWORD *)(v26 + 840);
    *(_OWORD *)(v25 + 824) = *(_OWORD *)(v26 + 824);
    *(_OWORD *)(v25 + 840) = v110;
    *(_BYTE *)(v25 + 856) = *(_BYTE *)(v26 + 856);
    v111 = *(_OWORD *)(v26 + 776);
    *(_OWORD *)(v25 + 760) = *(_OWORD *)(v26 + 760);
    *(_OWORD *)(v25 + 776) = v111;
    v112 = *(_OWORD *)(v26 + 808);
    *(_OWORD *)(v25 + 792) = *(_OWORD *)(v26 + 792);
    *(_OWORD *)(v25 + 808) = v112;
    v113 = *(_OWORD *)(v26 + 744);
    *(_OWORD *)(v25 + 728) = *(_OWORD *)(v26 + 728);
    *(_OWORD *)(v25 + 744) = v113;
    goto LABEL_78;
  }
  v114 = *(_QWORD *)(v26 + 736);
  *(_QWORD *)(v25 + 728) = *(_QWORD *)(v26 + 728);
  *(_QWORD *)(v25 + 736) = v114;
  v115 = (_OWORD *)(v25 + 744);
  v116 = (_OWORD *)(v26 + 744);
  v117 = *(_QWORD *)(v26 + 768);
  swift_retain();
  if ((v109 & 1) == 0)
  {
    if (v117)
    {
      *(_QWORD *)(v25 + 768) = v117;
      *(_QWORD *)(v25 + 776) = *(_QWORD *)(v26 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v117 - 8))(v25 + 744, v26 + 744, v117);
      v118 = *(_QWORD *)(v26 + 784);
      if (v118)
      {
LABEL_62:
        v119 = *(_QWORD *)(v26 + 792);
        *(_QWORD *)(v25 + 784) = v118;
        *(_QWORD *)(v25 + 792) = v119;
        swift_retain();
LABEL_68:
        *(_QWORD *)(v25 + 800) = *(_QWORD *)(v26 + 800);
        v123 = (uint64_t *)(v26 + 808);
        v124 = *(unsigned __int8 *)(v26 + 816);
        swift_bridgeObjectRetain();
        if (v124 == 255)
        {
          *(_QWORD *)(v25 + 808) = *v123;
          *(_BYTE *)(v25 + 816) = *(_BYTE *)(v26 + 816);
        }
        else
        {
          v125 = v124 & 1;
          v126 = *v123;
          sub_2141E83F4(v126, v125);
          *(_QWORD *)(v25 + 808) = v126;
          *(_BYTE *)(v25 + 816) = v125;
        }
        v127 = *(_OWORD *)(v26 + 840);
        *(_OWORD *)(v25 + 824) = *(_OWORD *)(v26 + 824);
        *(_OWORD *)(v25 + 840) = v127;
        *(_BYTE *)(v25 + 856) = 0;
        goto LABEL_78;
      }
    }
    else
    {
      v122 = *(_OWORD *)(v26 + 760);
      *v115 = *v116;
      *(_OWORD *)(v25 + 760) = v122;
      *(_QWORD *)(v25 + 776) = *(_QWORD *)(v26 + 776);
      v118 = *(_QWORD *)(v26 + 784);
      if (v118)
        goto LABEL_62;
    }
    *(_OWORD *)(v25 + 784) = *(_OWORD *)(v26 + 784);
    goto LABEL_68;
  }
  if (!v117)
  {
    v128 = *(_OWORD *)(v26 + 760);
    *v115 = *v116;
    *(_OWORD *)(v25 + 760) = v128;
    *(_QWORD *)(v25 + 776) = *(_QWORD *)(v26 + 776);
    v120 = *(_QWORD *)(v26 + 784);
    if (v120)
      goto LABEL_65;
LABEL_73:
    *(_OWORD *)(v25 + 784) = *(_OWORD *)(v26 + 784);
    goto LABEL_74;
  }
  *(_QWORD *)(v25 + 768) = v117;
  *(_QWORD *)(v25 + 776) = *(_QWORD *)(v26 + 776);
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v117 - 8))(v25 + 744, v26 + 744, v117);
  v120 = *(_QWORD *)(v26 + 784);
  if (!v120)
    goto LABEL_73;
LABEL_65:
  v121 = *(_QWORD *)(v26 + 792);
  *(_QWORD *)(v25 + 784) = v120;
  *(_QWORD *)(v25 + 792) = v121;
  swift_retain();
LABEL_74:
  *(_QWORD *)(v25 + 800) = *(_QWORD *)(v26 + 800);
  v129 = (uint64_t *)(v26 + 808);
  v130 = *(unsigned __int8 *)(v26 + 816);
  swift_bridgeObjectRetain();
  if (v130 == 255)
  {
    *(_QWORD *)(v25 + 808) = *v129;
    *(_BYTE *)(v25 + 816) = *(_BYTE *)(v26 + 816);
  }
  else
  {
    v131 = v130 & 1;
    v132 = *v129;
    sub_2141E83F4(v132, v131);
    *(_QWORD *)(v25 + 808) = v132;
    *(_BYTE *)(v25 + 816) = v131;
  }
  v133 = *(_OWORD *)(v26 + 840);
  *(_OWORD *)(v25 + 824) = *(_OWORD *)(v26 + 824);
  *(_OWORD *)(v25 + 840) = v133;
  *(_BYTE *)(v25 + 856) = 1;
LABEL_78:
  v134 = *(unsigned __int8 *)(v26 + 968);
  if (v134 == 255)
  {
    v135 = *(_OWORD *)(v26 + 944);
    *(_OWORD *)(v25 + 928) = *(_OWORD *)(v26 + 928);
    *(_OWORD *)(v25 + 944) = v135;
    *(_OWORD *)(v25 + 953) = *(_OWORD *)(v26 + 953);
    v136 = *(_OWORD *)(v26 + 880);
    *(_OWORD *)(v25 + 864) = *(_OWORD *)(v26 + 864);
    *(_OWORD *)(v25 + 880) = v136;
    v137 = *(_OWORD *)(v26 + 912);
    *(_OWORD *)(v25 + 896) = *(_OWORD *)(v26 + 896);
    *(_OWORD *)(v25 + 912) = v137;
  }
  else
  {
    v224 = v134 & 1;
    v138 = *(_QWORD *)(v26 + 864);
    v139 = *(_QWORD *)(v26 + 872);
    v140 = *(_QWORD *)(v26 + 880);
    v141 = *(_QWORD *)(v26 + 888);
    v142 = *(_QWORD *)(v26 + 896);
    v143 = *(_QWORD *)(v26 + 904);
    v144 = *(_QWORD *)(v26 + 912);
    v145 = *(_QWORD *)(v26 + 920);
    v199 = *(_QWORD *)(v26 + 928);
    v204 = *(_QWORD *)(v26 + 936);
    v209 = *(_QWORD *)(v26 + 944);
    v214 = *(_QWORD *)(v26 + 952);
    v219 = *(_QWORD *)(v26 + 960);
    sub_21421BAE4(v138, v139, v140, v141, v142, v143, v144, v145, v199);
    *(_QWORD *)(v25 + 864) = v138;
    *(_QWORD *)(v25 + 872) = v139;
    *(_QWORD *)(v25 + 880) = v140;
    *(_QWORD *)(v25 + 888) = v141;
    *(_QWORD *)(v25 + 896) = v142;
    *(_QWORD *)(v25 + 904) = v143;
    *(_QWORD *)(v25 + 912) = v144;
    *(_QWORD *)(v25 + 920) = v145;
    *(_QWORD *)(v25 + 928) = v199;
    *(_QWORD *)(v25 + 936) = v204;
    *(_QWORD *)(v25 + 944) = v209;
    *(_QWORD *)(v25 + 952) = v214;
    *(_QWORD *)(v25 + 960) = v219;
    *(_BYTE *)(v25 + 968) = v224;
  }
  v146 = *(unsigned __int8 *)(v26 + 1104);
  if (v146 == 255)
  {
    v147 = *(_OWORD *)(v26 + 1088);
    *(_OWORD *)(v25 + 1072) = *(_OWORD *)(v26 + 1072);
    *(_OWORD *)(v25 + 1088) = v147;
    *(_BYTE *)(v25 + 1104) = *(_BYTE *)(v26 + 1104);
    v148 = *(_OWORD *)(v26 + 1024);
    *(_OWORD *)(v25 + 1008) = *(_OWORD *)(v26 + 1008);
    *(_OWORD *)(v25 + 1024) = v148;
    v149 = *(_OWORD *)(v26 + 1056);
    *(_OWORD *)(v25 + 1040) = *(_OWORD *)(v26 + 1040);
    *(_OWORD *)(v25 + 1056) = v149;
    v150 = *(_OWORD *)(v26 + 992);
    *(_OWORD *)(v25 + 976) = *(_OWORD *)(v26 + 976);
    *(_OWORD *)(v25 + 992) = v150;
  }
  else
  {
    v225 = v146 & 1;
    v151 = *(_QWORD *)(v26 + 976);
    v152 = *(_QWORD *)(v26 + 984);
    v153 = *(_QWORD *)(v26 + 992);
    v154 = *(_QWORD *)(v26 + 1000);
    v155 = *(_QWORD *)(v26 + 1008);
    v156 = *(_QWORD *)(v26 + 1016);
    v157 = *(_QWORD *)(v26 + 1024);
    v158 = *(_QWORD *)(v26 + 1032);
    v194 = *(_QWORD *)(v26 + 1040);
    v195 = *(_QWORD *)(v26 + 1048);
    v196 = *(_QWORD *)(v26 + 1056);
    v200 = *(_QWORD *)(v26 + 1064);
    v205 = *(_QWORD *)(v26 + 1072);
    v210 = *(_QWORD *)(v26 + 1080);
    v215 = *(_QWORD *)(v26 + 1088);
    v220 = *(_QWORD *)(v26 + 1096);
    sub_21421B980(v151, v152, v153, v154, v155, v156, v157, v158, v194, v195, v196, v200);
    *(_QWORD *)(v25 + 976) = v151;
    *(_QWORD *)(v25 + 984) = v152;
    *(_QWORD *)(v25 + 992) = v153;
    *(_QWORD *)(v25 + 1000) = v154;
    *(_QWORD *)(v25 + 1008) = v155;
    *(_QWORD *)(v25 + 1016) = v156;
    *(_QWORD *)(v25 + 1024) = v157;
    *(_QWORD *)(v25 + 1032) = v158;
    *(_QWORD *)(v25 + 1040) = v194;
    *(_QWORD *)(v25 + 1048) = v195;
    *(_QWORD *)(v25 + 1056) = v196;
    *(_QWORD *)(v25 + 1064) = v200;
    *(_QWORD *)(v25 + 1072) = v205;
    *(_QWORD *)(v25 + 1080) = v210;
    *(_QWORD *)(v25 + 1088) = v215;
    *(_QWORD *)(v25 + 1096) = v220;
    *(_BYTE *)(v25 + 1104) = v225;
  }
  *(_OWORD *)(v25 + 1112) = *(_OWORD *)(v26 + 1112);
  *(_OWORD *)(v25 + 1128) = *(_OWORD *)(v26 + 1128);
  *(_BYTE *)(v25 + 1144) = *(_BYTE *)(v26 + 1144);
  *(_OWORD *)(v25 + 1152) = *(_OWORD *)(v26 + 1152);
  *(_OWORD *)(v25 + 1168) = *(_OWORD *)(v26 + 1168);
  v159 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v226(v25 + v159[14], v26 + v159[14], v227);
  *(_QWORD *)(v25 + v159[15]) = *(_QWORD *)(v26 + v159[15]);
  *(_QWORD *)(v25 + v159[16]) = *(_QWORD *)(v26 + v159[16]);
  v160 = v159[17];
  v161 = v25 + v160;
  v162 = v26 + v160;
  v163 = *(unsigned __int8 *)(v26 + v160 + 40);
  swift_retain();
  swift_retain();
  if (v163 == 255)
  {
    v164 = *(_OWORD *)(v162 + 16);
    *(_OWORD *)v161 = *(_OWORD *)v162;
    *(_OWORD *)(v161 + 16) = v164;
    *(_OWORD *)(v161 + 25) = *(_OWORD *)(v162 + 25);
  }
  else
  {
    v165 = *(_OWORD *)(v162 + 24);
    *(_OWORD *)(v161 + 24) = v165;
    (**(void (***)(uint64_t, uint64_t))(v165 - 8))(v161, v162);
    *(_BYTE *)(v161 + 40) = (v163 & 1) != 0;
  }
  v166 = (_OWORD *)(v161 + 48);
  v167 = (_OWORD *)(v162 + 48);
  v168 = *(unsigned __int8 *)(v162 + 88);
  if (v168 == 255)
  {
    v169 = *(_OWORD *)(v162 + 64);
    *v166 = *v167;
    *(_OWORD *)(v161 + 64) = v169;
    *(_OWORD *)(v161 + 73) = *(_OWORD *)(v162 + 73);
  }
  else
  {
    v170 = *(_OWORD *)(v162 + 72);
    *(_OWORD *)(v161 + 72) = v170;
    (**(void (***)(_OWORD *, _OWORD *))(v170 - 8))(v166, v167);
    *(_BYTE *)(v161 + 88) = (v168 & 1) != 0;
  }
  v171 = (_OWORD *)(v161 + 96);
  v172 = (_OWORD *)(v162 + 96);
  v173 = *(unsigned __int8 *)(v162 + 136);
  if (v173 == 255)
  {
    v174 = *(_OWORD *)(v162 + 112);
    *v171 = *v172;
    *(_OWORD *)(v161 + 112) = v174;
    *(_OWORD *)(v161 + 121) = *(_OWORD *)(v162 + 121);
  }
  else
  {
    v175 = *(_OWORD *)(v162 + 120);
    *(_OWORD *)(v161 + 120) = v175;
    (**(void (***)(_OWORD *, _OWORD *))(v175 - 8))(v171, v172);
    *(_BYTE *)(v161 + 136) = (v173 & 1) != 0;
  }
  v176 = (_OWORD *)(v161 + 144);
  v177 = (_OWORD *)(v162 + 144);
  v178 = *(unsigned __int8 *)(v162 + 184);
  if (v178 == 255)
  {
    v179 = *(_OWORD *)(v162 + 160);
    *v176 = *v177;
    *(_OWORD *)(v161 + 160) = v179;
    *(_OWORD *)(v161 + 169) = *(_OWORD *)(v162 + 169);
  }
  else
  {
    v180 = *(_OWORD *)(v162 + 168);
    *(_OWORD *)(v161 + 168) = v180;
    (**(void (***)(_OWORD *, _OWORD *))(v180 - 8))(v176, v177);
    *(_BYTE *)(v161 + 184) = (v178 & 1) != 0;
  }
  v181 = (_OWORD *)(v161 + 192);
  v182 = (_OWORD *)(v162 + 192);
  v183 = *(unsigned __int8 *)(v162 + 232);
  if (v183 == 255)
  {
    v184 = *(_OWORD *)(v162 + 208);
    *v181 = *v182;
    *(_OWORD *)(v161 + 208) = v184;
    *(_OWORD *)(v161 + 217) = *(_OWORD *)(v162 + 217);
  }
  else
  {
    v185 = *(_OWORD *)(v162 + 216);
    *(_OWORD *)(v161 + 216) = v185;
    (**(void (***)(_OWORD *, _OWORD *))(v185 - 8))(v181, v182);
    *(_BYTE *)(v161 + 232) = (v183 & 1) != 0;
  }
  v186 = (_OWORD *)(v161 + 240);
  v187 = (_OWORD *)(v162 + 240);
  v188 = *(unsigned __int8 *)(v162 + 280);
  if (v188 == 255)
  {
    v189 = *(_OWORD *)(v162 + 256);
    *v186 = *v187;
    *(_OWORD *)(v161 + 256) = v189;
    *(_OWORD *)(v161 + 265) = *(_OWORD *)(v162 + 265);
  }
  else
  {
    v190 = *(_QWORD *)(v162 + 264);
    v191 = *(_QWORD *)(v162 + 272);
    *(_QWORD *)(v161 + 264) = v190;
    *(_QWORD *)(v161 + 272) = v191;
    (**(void (***)(_OWORD *, _OWORD *))(v190 - 8))(v186, v187);
    v192 = (BOOL *)(v161 + 280);
    *v192 = (v188 & 1) != 0;
  }
  *(_WORD *)(v161 + 281) = *(_WORD *)(v162 + 281);
  return v228;
}

uint64_t sub_2144084D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  int v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  BOOL *v65;
  _OWORD *v66;
  __int128 *v67;
  int v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  BOOL *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  __int128 *v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  __int128 *v126;
  int v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 *v162;
  __int128 *v163;
  int v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD *v198;
  _OWORD *v199;
  _BYTE *v200;
  int v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  __int128 *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t *v226;
  int v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t *v234;
  int v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  __int128 v239;
  __int128 *v240;
  __int128 *v241;
  int v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _OWORD *v277;
  _OWORD *v278;
  int v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int *v317;
  uint64_t v318;
  uint64_t v319;
  __int128 *v320;
  int v321;
  int v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  __int128 *v329;
  __int128 *v330;
  int v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  __int128 *v337;
  __int128 *v338;
  int v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  __int128 *v345;
  __int128 *v346;
  int v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  __int128 *v353;
  __int128 *v354;
  int v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  uint64_t v360;
  __int128 *v361;
  __int128 *v362;
  BOOL *v363;
  int v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char v430;
  char v431;
  char v432;
  char v433;
  char v434;
  char v435;
  char v436;
  char v437;
  char v438;
  char v439;
  void (*v440)(uint64_t, uint64_t, uint64_t);
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_2144071EC(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v16 = a1;
  *(_BYTE *)(a1 + 32) = v10;
  sub_214407638(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_2144240D4();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24);
  v21(v18, v19, v20);
  *(_BYTE *)(v16 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v22 = a3[9];
  v23 = v16 + v22;
  v24 = a2 + v22;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = *(_QWORD *)(v24 + 8);
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  *(_QWORD *)(v23 + 8) = v25;
  LOBYTE(v25) = *(_BYTE *)(v24 + 32);
  *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
  *(_BYTE *)(v23 + 32) = v25;
  v26 = v23 + 40;
  v27 = (__int128 *)(v24 + 40);
  v28 = *(_QWORD *)(v24 + 64);
  v440 = v21;
  v441 = v20;
  if (*(_QWORD *)(v23 + 64))
  {
    if (v28)
    {
      sub_2141DEA14((uint64_t *)(v23 + 40), (uint64_t *)(v24 + 40));
    }
    else
    {
      sub_2141DEB7C(v23 + 40);
      v29 = *((_QWORD *)v27 + 4);
      v30 = v27[1];
      *(_OWORD *)v26 = *v27;
      *(_OWORD *)(v26 + 16) = v30;
      *(_QWORD *)(v26 + 32) = v29;
    }
  }
  else if (v28)
  {
    *(_QWORD *)(v23 + 64) = v28;
    *(_QWORD *)(v23 + 72) = *(_QWORD *)(v24 + 72);
    (**(void (***)(uint64_t, __int128 *))(v28 - 8))(v26, v27);
  }
  else
  {
    v31 = *v27;
    v32 = *(_OWORD *)(v24 + 56);
    *(_QWORD *)(v23 + 72) = *(_QWORD *)(v24 + 72);
    *(_OWORD *)v26 = v31;
    *(_OWORD *)(v23 + 56) = v32;
  }
  v33 = a3[10];
  v34 = v16 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(a2 + v33 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  swift_retain();
  swift_release();
  if (v16 != a2)
  {
    v36 = (__int128 *)(v35 + 32);
    sub_2141E0750(v34 + 32, &qword_253F15AE8);
    if ((*(_BYTE *)(v35 + 315) & 1) != 0)
    {
      v37 = *(unsigned __int8 *)(v35 + 72);
      if (v37 == 255)
      {
        v38 = *v36;
        v39 = *(_OWORD *)(v35 + 48);
        *(_OWORD *)(v34 + 57) = *(_OWORD *)(v35 + 57);
        *(_OWORD *)(v34 + 32) = v38;
        *(_OWORD *)(v34 + 48) = v39;
      }
      else
      {
        v40 = *(_QWORD *)(v35 + 56);
        *(_QWORD *)(v34 + 56) = v40;
        *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
        (**(void (***)(uint64_t, uint64_t))(v40 - 8))(v34 + 32, v35 + 32);
        *(_BYTE *)(v34 + 72) = (v37 & 1) != 0;
      }
      v41 = (_OWORD *)(v34 + 80);
      v42 = (__int128 *)(v35 + 80);
      v43 = *(unsigned __int8 *)(v35 + 120);
      if (v43 == 255)
      {
        v44 = *v42;
        v45 = *(_OWORD *)(v35 + 96);
        *(_OWORD *)(v34 + 105) = *(_OWORD *)(v35 + 105);
        *v41 = v44;
        *(_OWORD *)(v34 + 96) = v45;
      }
      else
      {
        v46 = *(_QWORD *)(v35 + 104);
        *(_QWORD *)(v34 + 104) = v46;
        *(_QWORD *)(v34 + 112) = *(_QWORD *)(v35 + 112);
        (**(void (***)(_OWORD *, __int128 *))(v46 - 8))(v41, v42);
        *(_BYTE *)(v34 + 120) = (v43 & 1) != 0;
      }
      v47 = (_OWORD *)(v34 + 128);
      v48 = (__int128 *)(v35 + 128);
      v49 = *(unsigned __int8 *)(v35 + 168);
      if (v49 == 255)
      {
        v50 = *v48;
        v51 = *(_OWORD *)(v35 + 144);
        *(_OWORD *)(v34 + 153) = *(_OWORD *)(v35 + 153);
        *v47 = v50;
        *(_OWORD *)(v34 + 144) = v51;
      }
      else
      {
        v52 = *(_QWORD *)(v35 + 152);
        *(_QWORD *)(v34 + 152) = v52;
        *(_QWORD *)(v34 + 160) = *(_QWORD *)(v35 + 160);
        (**(void (***)(_OWORD *, __int128 *))(v52 - 8))(v47, v48);
        *(_BYTE *)(v34 + 168) = (v49 & 1) != 0;
      }
      v53 = (_OWORD *)(v34 + 176);
      v54 = (__int128 *)(v35 + 176);
      v55 = *(unsigned __int8 *)(v35 + 216);
      if (v55 == 255)
      {
        v56 = *v54;
        v57 = *(_OWORD *)(v35 + 192);
        *(_OWORD *)(v34 + 201) = *(_OWORD *)(v35 + 201);
        *v53 = v56;
        *(_OWORD *)(v34 + 192) = v57;
      }
      else
      {
        v58 = *(_QWORD *)(v35 + 200);
        *(_QWORD *)(v34 + 200) = v58;
        *(_QWORD *)(v34 + 208) = *(_QWORD *)(v35 + 208);
        (**(void (***)(_OWORD *, __int128 *))(v58 - 8))(v53, v54);
        *(_BYTE *)(v34 + 216) = (v55 & 1) != 0;
      }
      v59 = (_OWORD *)(v34 + 224);
      v60 = (__int128 *)(v35 + 224);
      v61 = *(unsigned __int8 *)(v35 + 264);
      if (v61 == 255)
      {
        v62 = *v60;
        v63 = *(_OWORD *)(v35 + 240);
        *(_OWORD *)(v34 + 249) = *(_OWORD *)(v35 + 249);
        *v59 = v62;
        *(_OWORD *)(v34 + 240) = v63;
      }
      else
      {
        v64 = *(_QWORD *)(v35 + 248);
        *(_QWORD *)(v34 + 248) = v64;
        *(_QWORD *)(v34 + 256) = *(_QWORD *)(v35 + 256);
        (**(void (***)(_OWORD *, __int128 *))(v64 - 8))(v59, v60);
        v65 = (BOOL *)(v34 + 264);
        *v65 = (v61 & 1) != 0;
      }
      v66 = (_OWORD *)(v34 + 272);
      v67 = (__int128 *)(v35 + 272);
      v68 = *(unsigned __int8 *)(v35 + 312);
      if (v68 == 255)
      {
        v69 = *v67;
        v70 = *(_OWORD *)(v35 + 288);
        *(_OWORD *)(v34 + 297) = *(_OWORD *)(v35 + 297);
        *v66 = v69;
        *(_OWORD *)(v34 + 288) = v70;
      }
      else
      {
        v71 = *(_QWORD *)(v35 + 296);
        *(_QWORD *)(v34 + 296) = v71;
        *(_QWORD *)(v34 + 304) = *(_QWORD *)(v35 + 304);
        (**(void (***)(_OWORD *, __int128 *))(v71 - 8))(v66, v67);
        v72 = (BOOL *)(v34 + 312);
        *v72 = (v68 & 1) != 0;
      }
      *(_WORD *)(v34 + 313) = *(_WORD *)(v35 + 313);
      *(_BYTE *)(v34 + 315) = 1;
    }
    else
    {
      *(_QWORD *)(v34 + 32) = *(_QWORD *)v36;
      *(_BYTE *)(v34 + 315) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(v34 + 316) = *(_BYTE *)(v35 + 316);
  v73 = *(_QWORD *)(v35 + 320);
  if (*(_QWORD *)(v34 + 320))
  {
    if (v73)
    {
      v74 = *(_QWORD *)(v35 + 328);
      *(_QWORD *)(v34 + 320) = v73;
      *(_QWORD *)(v34 + 328) = v74;
      swift_retain();
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v73)
  {
    v75 = *(_QWORD *)(v35 + 328);
    *(_QWORD *)(v34 + 320) = v73;
    *(_QWORD *)(v34 + 328) = v75;
    swift_retain();
    goto LABEL_49;
  }
  *(_OWORD *)(v34 + 320) = *(_OWORD *)(v35 + 320);
LABEL_49:
  v76 = *(_QWORD *)(v35 + 336);
  if (*(_QWORD *)(v34 + 336))
  {
    if (v76)
    {
      v77 = *(_QWORD *)(v35 + 344);
      *(_QWORD *)(v34 + 336) = v76;
      *(_QWORD *)(v34 + 344) = v77;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    swift_release();
  }
  else if (v76)
  {
    v78 = *(_QWORD *)(v35 + 344);
    *(_QWORD *)(v34 + 336) = v76;
    *(_QWORD *)(v34 + 344) = v78;
    swift_retain();
    goto LABEL_56;
  }
  *(_OWORD *)(v34 + 336) = *(_OWORD *)(v35 + 336);
LABEL_56:
  v79 = *(_QWORD *)(v35 + 352);
  if (*(_QWORD *)(v34 + 352))
  {
    if (v79)
    {
      v80 = *(_QWORD *)(v35 + 360);
      *(_QWORD *)(v34 + 352) = v79;
      *(_QWORD *)(v34 + 360) = v80;
      swift_retain();
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  else if (v79)
  {
    v81 = *(_QWORD *)(v35 + 360);
    *(_QWORD *)(v34 + 352) = v79;
    *(_QWORD *)(v34 + 360) = v81;
    swift_retain();
    goto LABEL_63;
  }
  *(_OWORD *)(v34 + 352) = *(_OWORD *)(v35 + 352);
LABEL_63:
  v82 = *(_QWORD *)(v35 + 368);
  if (*(_QWORD *)(v34 + 368))
  {
    if (v82)
    {
      v83 = *(_QWORD *)(v35 + 376);
      *(_QWORD *)(v34 + 368) = v82;
      *(_QWORD *)(v34 + 376) = v83;
      swift_retain();
      swift_release();
      goto LABEL_70;
    }
    swift_release();
  }
  else if (v82)
  {
    v84 = *(_QWORD *)(v35 + 376);
    *(_QWORD *)(v34 + 368) = v82;
    *(_QWORD *)(v34 + 376) = v84;
    swift_retain();
    goto LABEL_70;
  }
  *(_OWORD *)(v34 + 368) = *(_OWORD *)(v35 + 368);
LABEL_70:
  v85 = *(_QWORD *)(v35 + 384);
  if (*(_QWORD *)(v34 + 384))
  {
    if (v85)
    {
      v86 = *(_QWORD *)(v35 + 392);
      *(_QWORD *)(v34 + 384) = v85;
      *(_QWORD *)(v34 + 392) = v86;
      swift_retain();
      swift_release();
      goto LABEL_77;
    }
    swift_release();
  }
  else if (v85)
  {
    v87 = *(_QWORD *)(v35 + 392);
    *(_QWORD *)(v34 + 384) = v85;
    *(_QWORD *)(v34 + 392) = v87;
    swift_retain();
    goto LABEL_77;
  }
  *(_OWORD *)(v34 + 384) = *(_OWORD *)(v35 + 384);
LABEL_77:
  v88 = (__int128 *)(v34 + 400);
  v89 = (__int128 *)(v35 + 400);
  v90 = *(unsigned __int8 *)(v35 + 504);
  v442 = v16;
  v443 = a2;
  if (*(unsigned __int8 *)(v34 + 504) == 255)
  {
    if (v90 == 255)
    {
      v96 = *v89;
      v97 = *(_OWORD *)(v35 + 432);
      *(_OWORD *)(v34 + 416) = *(_OWORD *)(v35 + 416);
      *(_OWORD *)(v34 + 432) = v97;
      *v88 = v96;
      v98 = *(_OWORD *)(v35 + 448);
      v99 = *(_OWORD *)(v35 + 464);
      v100 = *(_OWORD *)(v35 + 480);
      *(_OWORD *)(v34 + 489) = *(_OWORD *)(v35 + 489);
      *(_OWORD *)(v34 + 464) = v99;
      *(_OWORD *)(v34 + 480) = v100;
      *(_OWORD *)(v34 + 448) = v98;
    }
    else
    {
      v431 = v90 & 1;
      v117 = *(_QWORD *)(v35 + 400);
      v118 = *(_QWORD *)(v35 + 408);
      v119 = *(_QWORD *)(v35 + 416);
      v120 = *(_QWORD *)(v35 + 424);
      v121 = *(_QWORD *)(v35 + 432);
      v122 = *(_QWORD *)(v35 + 440);
      v123 = *(_QWORD *)(v35 + 448);
      v124 = *(_QWORD *)(v35 + 456);
      v382 = *(_QWORD *)(v35 + 464);
      v391 = *(_QWORD *)(v35 + 472);
      v401 = *(_QWORD *)(v35 + 480);
      v411 = *(_QWORD *)(v35 + 488);
      v421 = *(_QWORD *)(v35 + 496);
      sub_21421BAE4(v117, v118, v119, v120, v121, v122, v123, v124, v382);
      *(_QWORD *)(v34 + 400) = v117;
      *(_QWORD *)(v34 + 408) = v118;
      *(_QWORD *)(v34 + 416) = v119;
      *(_QWORD *)(v34 + 424) = v120;
      *(_QWORD *)(v34 + 432) = v121;
      *(_QWORD *)(v34 + 440) = v122;
      *(_QWORD *)(v34 + 448) = v123;
      *(_QWORD *)(v34 + 456) = v124;
      *(_QWORD *)(v34 + 464) = v382;
      *(_QWORD *)(v34 + 472) = v391;
      *(_QWORD *)(v34 + 480) = v401;
      *(_QWORD *)(v34 + 488) = v411;
      *(_QWORD *)(v34 + 496) = v421;
      *(_BYTE *)(v34 + 504) = v431;
    }
  }
  else if (v90 == 255)
  {
    sub_2141E0750(v34 + 400, &qword_253F13368);
    v92 = *(_OWORD *)(v35 + 416);
    v91 = *(_OWORD *)(v35 + 432);
    *v88 = *v89;
    *(_OWORD *)(v34 + 416) = v92;
    *(_OWORD *)(v34 + 432) = v91;
    v94 = *(_OWORD *)(v35 + 464);
    v93 = *(_OWORD *)(v35 + 480);
    v95 = *(_OWORD *)(v35 + 448);
    *(_OWORD *)(v34 + 489) = *(_OWORD *)(v35 + 489);
    *(_OWORD *)(v34 + 464) = v94;
    *(_OWORD *)(v34 + 480) = v93;
    *(_OWORD *)(v34 + 448) = v95;
  }
  else
  {
    v430 = v90 & 1;
    v101 = *(_QWORD *)(v35 + 400);
    v102 = *(_QWORD *)(v35 + 408);
    v103 = *(_QWORD *)(v35 + 416);
    v104 = *(_QWORD *)(v35 + 424);
    v105 = *(_QWORD *)(v35 + 432);
    v106 = *(_QWORD *)(v35 + 440);
    v107 = *(_QWORD *)(v35 + 448);
    v376 = *(_QWORD *)(v35 + 456);
    v381 = *(_QWORD *)(v35 + 464);
    v390 = *(_QWORD *)(v35 + 472);
    v400 = *(_QWORD *)(v35 + 480);
    v410 = *(_QWORD *)(v35 + 488);
    v420 = *(_QWORD *)(v35 + 496);
    sub_21421BAE4(v101, v102, v103, v104, v105, v106, v107, v376, v381);
    v108 = *(_QWORD *)(v34 + 400);
    v109 = *(_QWORD *)(v34 + 408);
    v110 = *(_QWORD *)(v34 + 416);
    v111 = *(_QWORD *)(v34 + 424);
    v112 = *(_QWORD *)(v34 + 432);
    v113 = *(_QWORD *)(v34 + 440);
    v114 = *(_QWORD *)(v34 + 448);
    v115 = *(_QWORD *)(v34 + 456);
    v116 = *(_OWORD *)(v34 + 464);
    *(_QWORD *)(v34 + 400) = v101;
    *(_QWORD *)(v34 + 408) = v102;
    *(_QWORD *)(v34 + 416) = v103;
    *(_QWORD *)(v34 + 424) = v104;
    *(_QWORD *)(v34 + 432) = v105;
    *(_QWORD *)(v34 + 440) = v106;
    *(_QWORD *)(v34 + 448) = v107;
    *(_QWORD *)(v34 + 456) = v376;
    *(_QWORD *)(v34 + 464) = v381;
    *(_QWORD *)(v34 + 472) = v390;
    *(_QWORD *)(v34 + 480) = v400;
    *(_QWORD *)(v34 + 488) = v410;
    *(_QWORD *)(v34 + 496) = v420;
    *(_BYTE *)(v34 + 504) = v430;
    sub_21421BB6C(v108, v109, v110, v111, v112, v113, v114, v115, v116);
  }
  v125 = (__int128 *)(v34 + 512);
  v126 = (__int128 *)(v35 + 512);
  v127 = *(unsigned __int8 *)(v35 + 616);
  if (*(unsigned __int8 *)(v34 + 616) == 255)
  {
    if (v127 == 255)
    {
      v133 = *v126;
      v134 = *(_OWORD *)(v35 + 544);
      *(_OWORD *)(v34 + 528) = *(_OWORD *)(v35 + 528);
      *(_OWORD *)(v34 + 544) = v134;
      *v125 = v133;
      v135 = *(_OWORD *)(v35 + 560);
      v136 = *(_OWORD *)(v35 + 576);
      v137 = *(_OWORD *)(v35 + 592);
      *(_OWORD *)(v34 + 601) = *(_OWORD *)(v35 + 601);
      *(_OWORD *)(v34 + 576) = v136;
      *(_OWORD *)(v34 + 592) = v137;
      *(_OWORD *)(v34 + 560) = v135;
    }
    else
    {
      v433 = v127 & 1;
      v154 = *(_QWORD *)(v35 + 512);
      v155 = *(_QWORD *)(v35 + 520);
      v156 = *(_QWORD *)(v35 + 528);
      v157 = *(_QWORD *)(v35 + 536);
      v158 = *(_QWORD *)(v35 + 544);
      v159 = *(_QWORD *)(v35 + 552);
      v160 = *(_QWORD *)(v35 + 560);
      v161 = *(_QWORD *)(v35 + 568);
      v384 = *(_QWORD *)(v35 + 576);
      v393 = *(_QWORD *)(v35 + 584);
      v403 = *(_QWORD *)(v35 + 592);
      v413 = *(_QWORD *)(v35 + 600);
      v423 = *(_QWORD *)(v35 + 608);
      sub_21421BAE4(v154, v155, v156, v157, v158, v159, v160, v161, v384);
      *(_QWORD *)(v34 + 512) = v154;
      *(_QWORD *)(v34 + 520) = v155;
      *(_QWORD *)(v34 + 528) = v156;
      *(_QWORD *)(v34 + 536) = v157;
      *(_QWORD *)(v34 + 544) = v158;
      *(_QWORD *)(v34 + 552) = v159;
      *(_QWORD *)(v34 + 560) = v160;
      *(_QWORD *)(v34 + 568) = v161;
      *(_QWORD *)(v34 + 576) = v384;
      *(_QWORD *)(v34 + 584) = v393;
      *(_QWORD *)(v34 + 592) = v403;
      *(_QWORD *)(v34 + 600) = v413;
      *(_QWORD *)(v34 + 608) = v423;
      *(_BYTE *)(v34 + 616) = v433;
    }
  }
  else if (v127 == 255)
  {
    sub_2141E0750(v34 + 512, &qword_253F13368);
    v129 = *(_OWORD *)(v35 + 528);
    v128 = *(_OWORD *)(v35 + 544);
    *v125 = *v126;
    *(_OWORD *)(v34 + 528) = v129;
    *(_OWORD *)(v34 + 544) = v128;
    v131 = *(_OWORD *)(v35 + 576);
    v130 = *(_OWORD *)(v35 + 592);
    v132 = *(_OWORD *)(v35 + 560);
    *(_OWORD *)(v34 + 601) = *(_OWORD *)(v35 + 601);
    *(_OWORD *)(v34 + 576) = v131;
    *(_OWORD *)(v34 + 592) = v130;
    *(_OWORD *)(v34 + 560) = v132;
  }
  else
  {
    v432 = v127 & 1;
    v138 = *(_QWORD *)(v35 + 520);
    v139 = *(_QWORD *)(v35 + 528);
    v140 = *(_QWORD *)(v35 + 536);
    v141 = *(_QWORD *)(v35 + 544);
    v142 = *(_QWORD *)(v35 + 552);
    v143 = *(_QWORD *)(v35 + 560);
    v144 = *(_QWORD *)(v35 + 568);
    v377 = *(_QWORD *)(v35 + 512);
    v383 = *(_QWORD *)(v35 + 576);
    v392 = *(_QWORD *)(v35 + 584);
    v402 = *(_QWORD *)(v35 + 592);
    v412 = *(_QWORD *)(v35 + 600);
    v422 = *(_QWORD *)(v35 + 608);
    sub_21421BAE4(v377, v138, v139, v140, v141, v142, v143, v144, *(_OWORD *)(v35 + 576));
    v145 = *(_QWORD *)(v34 + 512);
    v146 = *(_QWORD *)(v34 + 520);
    v147 = *(_QWORD *)(v34 + 528);
    v148 = *(_QWORD *)(v34 + 536);
    v149 = *(_QWORD *)(v34 + 544);
    v150 = *(_QWORD *)(v34 + 552);
    v151 = *(_QWORD *)(v34 + 560);
    v152 = *(_QWORD *)(v34 + 568);
    v153 = *(_OWORD *)(v34 + 576);
    *(_QWORD *)(v34 + 512) = v377;
    *(_QWORD *)(v34 + 520) = v138;
    *(_QWORD *)(v34 + 528) = v139;
    *(_QWORD *)(v34 + 536) = v140;
    *(_QWORD *)(v34 + 544) = v141;
    *(_QWORD *)(v34 + 552) = v142;
    *(_QWORD *)(v34 + 560) = v143;
    *(_QWORD *)(v34 + 568) = v144;
    *(_QWORD *)(v34 + 576) = v383;
    *(_QWORD *)(v34 + 584) = v392;
    *(_QWORD *)(v34 + 592) = v402;
    *(_QWORD *)(v34 + 600) = v412;
    *(_QWORD *)(v34 + 608) = v422;
    *(_BYTE *)(v34 + 616) = v432;
    sub_21421BB6C(v145, v146, v147, v148, v149, v150, v151, v152, v153);
  }
  v162 = (__int128 *)(v34 + 624);
  v163 = (__int128 *)(v35 + 624);
  v164 = *(unsigned __int8 *)(v35 + 720);
  if (*(unsigned __int8 *)(v34 + 720) == 255)
  {
    if (v164 == 255)
    {
      v170 = *v163;
      v171 = *(_OWORD *)(v35 + 656);
      *(_OWORD *)(v34 + 640) = *(_OWORD *)(v35 + 640);
      *(_OWORD *)(v34 + 656) = v171;
      *v162 = v170;
      v172 = *(_OWORD *)(v35 + 672);
      v173 = *(_OWORD *)(v35 + 688);
      v174 = *(_OWORD *)(v35 + 704);
      *(_BYTE *)(v34 + 720) = *(_BYTE *)(v35 + 720);
      *(_OWORD *)(v34 + 688) = v173;
      *(_OWORD *)(v34 + 704) = v174;
      *(_OWORD *)(v34 + 672) = v172;
    }
    else
    {
      v435 = v164 & 1;
      v190 = *(_QWORD *)(v35 + 624);
      v191 = *(_QWORD *)(v35 + 632);
      v192 = *(_QWORD *)(v35 + 640);
      v193 = *(_QWORD *)(v35 + 648);
      v194 = *(_QWORD *)(v35 + 656);
      v195 = *(_QWORD *)(v35 + 664);
      v196 = *(_QWORD *)(v35 + 672);
      v197 = *(_QWORD *)(v35 + 680);
      v395 = *(_QWORD *)(v35 + 688);
      v405 = *(_QWORD *)(v35 + 696);
      v415 = *(_QWORD *)(v35 + 704);
      v425 = *(_QWORD *)(v35 + 712);
      sub_21421B808(v190, v191, v192, v193, v194, v195, v196, v197);
      *(_QWORD *)(v34 + 624) = v190;
      *(_QWORD *)(v34 + 632) = v191;
      *(_QWORD *)(v34 + 640) = v192;
      *(_QWORD *)(v34 + 648) = v193;
      *(_QWORD *)(v34 + 656) = v194;
      *(_QWORD *)(v34 + 664) = v195;
      *(_QWORD *)(v34 + 672) = v196;
      *(_QWORD *)(v34 + 680) = v197;
      *(_QWORD *)(v34 + 688) = v395;
      *(_QWORD *)(v34 + 696) = v405;
      *(_QWORD *)(v34 + 704) = v415;
      *(_QWORD *)(v34 + 712) = v425;
      *(_BYTE *)(v34 + 720) = v435;
    }
  }
  else if (v164 == 255)
  {
    sub_2141E0750(v34 + 624, qword_253F10468);
    v166 = *(_OWORD *)(v35 + 640);
    v165 = *(_OWORD *)(v35 + 656);
    *v162 = *v163;
    *(_OWORD *)(v34 + 640) = v166;
    *(_OWORD *)(v34 + 656) = v165;
    v168 = *(_OWORD *)(v35 + 688);
    v167 = *(_OWORD *)(v35 + 704);
    v169 = *(_OWORD *)(v35 + 672);
    *(_BYTE *)(v34 + 720) = *(_BYTE *)(v35 + 720);
    *(_OWORD *)(v34 + 688) = v168;
    *(_OWORD *)(v34 + 704) = v167;
    *(_OWORD *)(v34 + 672) = v169;
  }
  else
  {
    v434 = v164 & 1;
    v175 = *(_QWORD *)(v35 + 632);
    v176 = *(_QWORD *)(v35 + 640);
    v177 = *(_QWORD *)(v35 + 648);
    v178 = *(_QWORD *)(v35 + 656);
    v179 = *(_QWORD *)(v35 + 664);
    v180 = *(_QWORD *)(v35 + 672);
    v181 = *(_QWORD *)(v35 + 680);
    v385 = *(_QWORD *)(v35 + 624);
    v394 = *(_QWORD *)(v35 + 688);
    v404 = *(_QWORD *)(v35 + 696);
    v414 = *(_QWORD *)(v35 + 704);
    v424 = *(_QWORD *)(v35 + 712);
    sub_21421B808(v385, v175, v176, v177, v178, v179, v180, v181);
    v182 = *(_QWORD *)(v34 + 624);
    v183 = *(_QWORD *)(v34 + 632);
    v184 = *(_QWORD *)(v34 + 640);
    v185 = *(_QWORD *)(v34 + 648);
    v186 = *(_QWORD *)(v34 + 656);
    v187 = *(_QWORD *)(v34 + 664);
    v188 = *(_QWORD *)(v34 + 672);
    v189 = *(_QWORD *)(v34 + 680);
    *(_QWORD *)(v34 + 624) = v385;
    *(_QWORD *)(v34 + 632) = v175;
    *(_QWORD *)(v34 + 640) = v176;
    *(_QWORD *)(v34 + 648) = v177;
    *(_QWORD *)(v34 + 656) = v178;
    *(_QWORD *)(v34 + 664) = v179;
    *(_QWORD *)(v34 + 672) = v180;
    *(_QWORD *)(v34 + 680) = v181;
    *(_QWORD *)(v34 + 688) = v394;
    *(_QWORD *)(v34 + 696) = v404;
    *(_QWORD *)(v34 + 704) = v414;
    *(_QWORD *)(v34 + 712) = v424;
    *(_BYTE *)(v34 + 720) = v434;
    sub_21421B8A0(v182, v183, v184, v185, v186, v187, v188, v189);
  }
  v198 = (_OWORD *)(v34 + 728);
  v199 = (_OWORD *)(v35 + 728);
  v200 = (_BYTE *)(v34 + 856);
  v201 = *(unsigned __int8 *)(v35 + 856);
  if (*(unsigned __int8 *)(v34 + 856) == 255)
  {
    if (v201 == 255)
    {
      *v198 = *v199;
      v208 = *(_OWORD *)(v35 + 744);
      v209 = *(_OWORD *)(v35 + 760);
      v210 = *(_OWORD *)(v35 + 792);
      *(_OWORD *)(v34 + 776) = *(_OWORD *)(v35 + 776);
      *(_OWORD *)(v34 + 792) = v210;
      *(_OWORD *)(v34 + 744) = v208;
      *(_OWORD *)(v34 + 760) = v209;
      v211 = *(_OWORD *)(v35 + 808);
      v212 = *(_OWORD *)(v35 + 824);
      v213 = *(_OWORD *)(v35 + 840);
      *(_BYTE *)(v34 + 856) = *(_BYTE *)(v35 + 856);
      *(_OWORD *)(v34 + 824) = v212;
      *(_OWORD *)(v34 + 840) = v213;
      *(_OWORD *)(v34 + 808) = v211;
      goto LABEL_124;
    }
    v221 = *(_QWORD *)(v35 + 736);
    *(_QWORD *)(v34 + 728) = *(_QWORD *)(v35 + 728);
    *(_QWORD *)(v34 + 736) = v221;
    v216 = v34 + 744;
    v217 = (__int128 *)(v35 + 744);
    v218 = *(_QWORD *)(v35 + 768);
    swift_retain();
    if ((v201 & 1) != 0)
    {
LABEL_105:
      if (v218)
      {
        *(_QWORD *)(v34 + 768) = v218;
        *(_QWORD *)(v34 + 776) = *(_QWORD *)(v35 + 776);
        (**(void (***)(uint64_t, __int128 *, uint64_t))(v218 - 8))(v216, v217, v218);
        v219 = *(_QWORD *)(v35 + 784);
        if (v219)
        {
LABEL_107:
          v220 = *(_QWORD *)(v35 + 792);
          *(_QWORD *)(v34 + 784) = v219;
          *(_QWORD *)(v34 + 792) = v220;
          swift_retain();
LABEL_114:
          *(_QWORD *)(v34 + 800) = *(_QWORD *)(v35 + 800);
          v226 = (uint64_t *)(v35 + 808);
          v227 = *(unsigned __int8 *)(v35 + 816);
          swift_bridgeObjectRetain();
          if (v227 == 255)
          {
            v228 = *v226;
            *(_BYTE *)(v34 + 816) = *(_BYTE *)(v35 + 816);
            *(_QWORD *)(v34 + 808) = v228;
          }
          else
          {
            v229 = v227 & 1;
            v230 = *v226;
            sub_2141E83F4(v230, v229);
            *(_QWORD *)(v34 + 808) = v230;
            *(_BYTE *)(v34 + 816) = v229;
          }
          v231 = *(_OWORD *)(v35 + 840);
          *(_OWORD *)(v34 + 824) = *(_OWORD *)(v35 + 824);
          *(_OWORD *)(v34 + 840) = v231;
          *v200 = 1;
          goto LABEL_124;
        }
      }
      else
      {
        v224 = *v217;
        v225 = v217[1];
        *(_QWORD *)(v216 + 32) = *((_QWORD *)v217 + 4);
        *(_OWORD *)v216 = v224;
        *(_OWORD *)(v216 + 16) = v225;
        v219 = *(_QWORD *)(v35 + 784);
        if (v219)
          goto LABEL_107;
      }
      *(_OWORD *)(v34 + 784) = *(_OWORD *)(v35 + 784);
      goto LABEL_114;
    }
LABEL_109:
    if (v218)
    {
      *(_QWORD *)(v34 + 768) = v218;
      *(_QWORD *)(v34 + 776) = *(_QWORD *)(v35 + 776);
      (**(void (***)(uint64_t, __int128 *, uint64_t))(v218 - 8))(v216, v217, v218);
      v222 = *(_QWORD *)(v35 + 784);
      if (v222)
      {
LABEL_111:
        v223 = *(_QWORD *)(v35 + 792);
        *(_QWORD *)(v34 + 784) = v222;
        *(_QWORD *)(v34 + 792) = v223;
        swift_retain();
LABEL_120:
        *(_QWORD *)(v34 + 800) = *(_QWORD *)(v35 + 800);
        v234 = (uint64_t *)(v35 + 808);
        v235 = *(unsigned __int8 *)(v35 + 816);
        swift_bridgeObjectRetain();
        if (v235 == 255)
        {
          v236 = *v234;
          *(_BYTE *)(v34 + 816) = *(_BYTE *)(v35 + 816);
          *(_QWORD *)(v34 + 808) = v236;
        }
        else
        {
          v237 = v235 & 1;
          v238 = *v234;
          sub_2141E83F4(v238, v237);
          *(_QWORD *)(v34 + 808) = v238;
          *(_BYTE *)(v34 + 816) = v237;
        }
        v239 = *(_OWORD *)(v35 + 840);
        *(_OWORD *)(v34 + 824) = *(_OWORD *)(v35 + 824);
        *(_OWORD *)(v34 + 840) = v239;
        *v200 = 0;
        goto LABEL_124;
      }
    }
    else
    {
      v232 = *v217;
      v233 = v217[1];
      *(_QWORD *)(v216 + 32) = *((_QWORD *)v217 + 4);
      *(_OWORD *)v216 = v232;
      *(_OWORD *)(v216 + 16) = v233;
      v222 = *(_QWORD *)(v35 + 784);
      if (v222)
        goto LABEL_111;
    }
    *(_OWORD *)(v34 + 784) = *(_OWORD *)(v35 + 784);
    goto LABEL_120;
  }
  if (v201 == 255)
  {
    sub_2141E0750(v34 + 728, &qword_254D695C8);
    *v198 = *v199;
    v202 = *(_OWORD *)(v35 + 792);
    v204 = *(_OWORD *)(v35 + 744);
    v203 = *(_OWORD *)(v35 + 760);
    *(_OWORD *)(v34 + 776) = *(_OWORD *)(v35 + 776);
    *(_OWORD *)(v34 + 792) = v202;
    *(_OWORD *)(v34 + 744) = v204;
    *(_OWORD *)(v34 + 760) = v203;
    v206 = *(_OWORD *)(v35 + 824);
    v205 = *(_OWORD *)(v35 + 840);
    v207 = *(_OWORD *)(v35 + 808);
    *(_BYTE *)(v34 + 856) = *(_BYTE *)(v35 + 856);
    *(_OWORD *)(v34 + 824) = v206;
    *(_OWORD *)(v34 + 840) = v205;
    *(_OWORD *)(v34 + 808) = v207;
    goto LABEL_124;
  }
  if (v442 != v443)
  {
    sub_2141E0750(v34 + 728, &qword_254D695C8);
    v214 = *(_BYTE *)(v35 + 856);
    v215 = *(_QWORD *)(v35 + 736);
    *(_QWORD *)(v34 + 728) = *(_QWORD *)(v35 + 728);
    *(_QWORD *)(v34 + 736) = v215;
    v216 = v34 + 744;
    v217 = (__int128 *)(v35 + 744);
    v218 = *(_QWORD *)(v35 + 768);
    swift_retain();
    if ((v214 & 1) != 0)
      goto LABEL_105;
    goto LABEL_109;
  }
LABEL_124:
  v240 = (__int128 *)(v34 + 864);
  v241 = (__int128 *)(v35 + 864);
  v242 = *(unsigned __int8 *)(v35 + 968);
  if (*(unsigned __int8 *)(v34 + 968) == 255)
  {
    if (v242 == 255)
    {
      v248 = *v241;
      v249 = *(_OWORD *)(v35 + 896);
      *(_OWORD *)(v34 + 880) = *(_OWORD *)(v35 + 880);
      *(_OWORD *)(v34 + 896) = v249;
      *v240 = v248;
      v250 = *(_OWORD *)(v35 + 912);
      v251 = *(_OWORD *)(v35 + 928);
      v252 = *(_OWORD *)(v35 + 944);
      *(_OWORD *)(v34 + 953) = *(_OWORD *)(v35 + 953);
      *(_OWORD *)(v34 + 928) = v251;
      *(_OWORD *)(v34 + 944) = v252;
      *(_OWORD *)(v34 + 912) = v250;
    }
    else
    {
      v437 = v242 & 1;
      v269 = *(_QWORD *)(v35 + 864);
      v270 = *(_QWORD *)(v35 + 872);
      v271 = *(_QWORD *)(v35 + 880);
      v272 = *(_QWORD *)(v35 + 888);
      v273 = *(_QWORD *)(v35 + 896);
      v274 = *(_QWORD *)(v35 + 904);
      v275 = *(_QWORD *)(v35 + 912);
      v276 = *(_QWORD *)(v35 + 920);
      v387 = *(_QWORD *)(v35 + 928);
      v397 = *(_QWORD *)(v35 + 936);
      v407 = *(_QWORD *)(v35 + 944);
      v417 = *(_QWORD *)(v35 + 952);
      v427 = *(_QWORD *)(v35 + 960);
      sub_21421BAE4(v269, v270, v271, v272, v273, v274, v275, v276, v387);
      *(_QWORD *)(v34 + 864) = v269;
      *(_QWORD *)(v34 + 872) = v270;
      *(_QWORD *)(v34 + 880) = v271;
      *(_QWORD *)(v34 + 888) = v272;
      *(_QWORD *)(v34 + 896) = v273;
      *(_QWORD *)(v34 + 904) = v274;
      *(_QWORD *)(v34 + 912) = v275;
      *(_QWORD *)(v34 + 920) = v276;
      *(_QWORD *)(v34 + 928) = v387;
      *(_QWORD *)(v34 + 936) = v397;
      *(_QWORD *)(v34 + 944) = v407;
      *(_QWORD *)(v34 + 952) = v417;
      *(_QWORD *)(v34 + 960) = v427;
      *(_BYTE *)(v34 + 968) = v437;
    }
  }
  else if (v242 == 255)
  {
    sub_2141E0750(v34 + 864, &qword_253F13368);
    v244 = *(_OWORD *)(v35 + 880);
    v243 = *(_OWORD *)(v35 + 896);
    *v240 = *v241;
    *(_OWORD *)(v34 + 880) = v244;
    *(_OWORD *)(v34 + 896) = v243;
    v246 = *(_OWORD *)(v35 + 928);
    v245 = *(_OWORD *)(v35 + 944);
    v247 = *(_OWORD *)(v35 + 912);
    *(_OWORD *)(v34 + 953) = *(_OWORD *)(v35 + 953);
    *(_OWORD *)(v34 + 928) = v246;
    *(_OWORD *)(v34 + 944) = v245;
    *(_OWORD *)(v34 + 912) = v247;
  }
  else
  {
    v436 = v242 & 1;
    v253 = *(_QWORD *)(v35 + 872);
    v254 = *(_QWORD *)(v35 + 880);
    v255 = *(_QWORD *)(v35 + 888);
    v256 = *(_QWORD *)(v35 + 896);
    v257 = *(_QWORD *)(v35 + 904);
    v258 = *(_QWORD *)(v35 + 912);
    v259 = *(_QWORD *)(v35 + 920);
    v378 = *(_QWORD *)(v35 + 864);
    v386 = *(_QWORD *)(v35 + 928);
    v396 = *(_QWORD *)(v35 + 936);
    v406 = *(_QWORD *)(v35 + 944);
    v416 = *(_QWORD *)(v35 + 952);
    v426 = *(_QWORD *)(v35 + 960);
    sub_21421BAE4(v378, v253, v254, v255, v256, v257, v258, v259, *(_OWORD *)(v35 + 928));
    v260 = *(_QWORD *)(v34 + 864);
    v261 = *(_QWORD *)(v34 + 872);
    v262 = *(_QWORD *)(v34 + 880);
    v263 = *(_QWORD *)(v34 + 888);
    v264 = *(_QWORD *)(v34 + 896);
    v265 = *(_QWORD *)(v34 + 904);
    v266 = *(_QWORD *)(v34 + 912);
    v267 = *(_QWORD *)(v34 + 920);
    v268 = *(_OWORD *)(v34 + 928);
    *(_QWORD *)(v34 + 864) = v378;
    *(_QWORD *)(v34 + 872) = v253;
    *(_QWORD *)(v34 + 880) = v254;
    *(_QWORD *)(v34 + 888) = v255;
    *(_QWORD *)(v34 + 896) = v256;
    *(_QWORD *)(v34 + 904) = v257;
    *(_QWORD *)(v34 + 912) = v258;
    *(_QWORD *)(v34 + 920) = v259;
    *(_QWORD *)(v34 + 928) = v386;
    *(_QWORD *)(v34 + 936) = v396;
    *(_QWORD *)(v34 + 944) = v406;
    *(_QWORD *)(v34 + 952) = v416;
    *(_QWORD *)(v34 + 960) = v426;
    *(_BYTE *)(v34 + 968) = v436;
    sub_21421BB6C(v260, v261, v262, v263, v264, v265, v266, v267, v268);
  }
  v277 = (_OWORD *)(v34 + 976);
  v278 = (_OWORD *)(v35 + 976);
  v279 = *(unsigned __int8 *)(v35 + 1104);
  if (*(unsigned __int8 *)(v34 + 1104) == 255)
  {
    if (v279 == 255)
    {
      *v277 = *v278;
      v286 = *(_OWORD *)(v35 + 992);
      v287 = *(_OWORD *)(v35 + 1008);
      v288 = *(_OWORD *)(v35 + 1040);
      *(_OWORD *)(v34 + 1024) = *(_OWORD *)(v35 + 1024);
      *(_OWORD *)(v34 + 1040) = v288;
      *(_OWORD *)(v34 + 992) = v286;
      *(_OWORD *)(v34 + 1008) = v287;
      v289 = *(_OWORD *)(v35 + 1056);
      v290 = *(_OWORD *)(v35 + 1072);
      v291 = *(_OWORD *)(v35 + 1088);
      *(_BYTE *)(v34 + 1104) = *(_BYTE *)(v35 + 1104);
      *(_OWORD *)(v34 + 1072) = v290;
      *(_OWORD *)(v34 + 1088) = v291;
      *(_OWORD *)(v34 + 1056) = v289;
    }
    else
    {
      v439 = v279 & 1;
      v309 = *(_QWORD *)(v35 + 976);
      v310 = *(_QWORD *)(v35 + 984);
      v311 = *(_QWORD *)(v35 + 992);
      v312 = *(_QWORD *)(v35 + 1000);
      v313 = *(_QWORD *)(v35 + 1008);
      v314 = *(_QWORD *)(v35 + 1016);
      v315 = *(_QWORD *)(v35 + 1024);
      v316 = *(_QWORD *)(v35 + 1032);
      v372 = *(_QWORD *)(v35 + 1040);
      v375 = *(_QWORD *)(v35 + 1048);
      v380 = *(_QWORD *)(v35 + 1056);
      v389 = *(_QWORD *)(v35 + 1064);
      v399 = *(_QWORD *)(v35 + 1072);
      v409 = *(_QWORD *)(v35 + 1080);
      v419 = *(_QWORD *)(v35 + 1088);
      v429 = *(_QWORD *)(v35 + 1096);
      sub_21421B980(v309, v310, v311, v312, v313, v314, v315, v316, v372, v375, v380, v389);
      *(_QWORD *)(v34 + 976) = v309;
      *(_QWORD *)(v34 + 984) = v310;
      *(_QWORD *)(v34 + 992) = v311;
      *(_QWORD *)(v34 + 1000) = v312;
      *(_QWORD *)(v34 + 1008) = v313;
      *(_QWORD *)(v34 + 1016) = v314;
      *(_QWORD *)(v34 + 1024) = v315;
      *(_QWORD *)(v34 + 1032) = v316;
      *(_QWORD *)(v34 + 1040) = v372;
      *(_QWORD *)(v34 + 1048) = v375;
      *(_QWORD *)(v34 + 1056) = v380;
      *(_QWORD *)(v34 + 1064) = v389;
      *(_QWORD *)(v34 + 1072) = v399;
      *(_QWORD *)(v34 + 1080) = v409;
      *(_QWORD *)(v34 + 1088) = v419;
      *(_QWORD *)(v34 + 1096) = v429;
      *(_BYTE *)(v34 + 1104) = v439;
    }
  }
  else if (v279 == 255)
  {
    sub_2141E0750(v34 + 976, &qword_254D695C0);
    *v277 = *v278;
    v280 = *(_OWORD *)(v35 + 1040);
    v282 = *(_OWORD *)(v35 + 992);
    v281 = *(_OWORD *)(v35 + 1008);
    *(_OWORD *)(v34 + 1024) = *(_OWORD *)(v35 + 1024);
    *(_OWORD *)(v34 + 1040) = v280;
    *(_OWORD *)(v34 + 992) = v282;
    *(_OWORD *)(v34 + 1008) = v281;
    v284 = *(_OWORD *)(v35 + 1072);
    v283 = *(_OWORD *)(v35 + 1088);
    v285 = *(_OWORD *)(v35 + 1056);
    *(_BYTE *)(v34 + 1104) = *(_BYTE *)(v35 + 1104);
    *(_OWORD *)(v34 + 1072) = v284;
    *(_OWORD *)(v34 + 1088) = v283;
    *(_OWORD *)(v34 + 1056) = v285;
  }
  else
  {
    v438 = v279 & 1;
    v292 = *(_QWORD *)(v35 + 976);
    v293 = *(_QWORD *)(v35 + 984);
    v294 = *(_QWORD *)(v35 + 992);
    v295 = *(_QWORD *)(v35 + 1000);
    v296 = *(_QWORD *)(v35 + 1008);
    v297 = *(_QWORD *)(v35 + 1016);
    v298 = *(_QWORD *)(v35 + 1024);
    v371 = *(_QWORD *)(v35 + 1032);
    v373 = *(_QWORD *)(v35 + 1040);
    v374 = *(_QWORD *)(v35 + 1048);
    v379 = *(_QWORD *)(v35 + 1056);
    v388 = *(_QWORD *)(v35 + 1064);
    v398 = *(_QWORD *)(v35 + 1072);
    v408 = *(_QWORD *)(v35 + 1080);
    v418 = *(_QWORD *)(v35 + 1088);
    v428 = *(_QWORD *)(v35 + 1096);
    sub_21421B980(v292, v293, v294, v295, v296, v297, v298, v371, v373, v374, v379, v388);
    v299 = *(_QWORD *)(v34 + 976);
    v300 = *(_QWORD *)(v34 + 984);
    v301 = *(_QWORD *)(v34 + 992);
    v302 = *(_QWORD *)(v34 + 1000);
    v303 = *(_QWORD *)(v34 + 1008);
    v304 = *(_QWORD *)(v34 + 1016);
    v305 = *(_QWORD *)(v34 + 1024);
    v306 = *(_QWORD *)(v34 + 1032);
    v307 = *(_OWORD *)(v34 + 1040);
    v308 = *(_OWORD *)(v34 + 1056);
    *(_QWORD *)(v34 + 976) = v292;
    *(_QWORD *)(v34 + 984) = v293;
    *(_QWORD *)(v34 + 992) = v294;
    *(_QWORD *)(v34 + 1000) = v295;
    *(_QWORD *)(v34 + 1008) = v296;
    *(_QWORD *)(v34 + 1016) = v297;
    *(_QWORD *)(v34 + 1024) = v298;
    *(_QWORD *)(v34 + 1032) = v371;
    *(_QWORD *)(v34 + 1040) = v373;
    *(_QWORD *)(v34 + 1048) = v374;
    *(_QWORD *)(v34 + 1056) = v379;
    *(_QWORD *)(v34 + 1064) = v388;
    *(_QWORD *)(v34 + 1072) = v398;
    *(_QWORD *)(v34 + 1080) = v408;
    *(_QWORD *)(v34 + 1088) = v418;
    *(_QWORD *)(v34 + 1096) = v428;
    *(_BYTE *)(v34 + 1104) = v438;
    sub_21421BA80(v299, v300, v301, v302, v303, v304, v305, v306, v307, *((uint64_t *)&v307 + 1), v308, BYTE8(v308));
  }
  *(_QWORD *)(v34 + 1112) = *(_QWORD *)(v35 + 1112);
  *(_QWORD *)(v34 + 1120) = *(_QWORD *)(v35 + 1120);
  *(_QWORD *)(v34 + 1128) = *(_QWORD *)(v35 + 1128);
  *(_QWORD *)(v34 + 1136) = *(_QWORD *)(v35 + 1136);
  *(_BYTE *)(v34 + 1144) = *(_BYTE *)(v35 + 1144);
  *(_QWORD *)(v34 + 1152) = *(_QWORD *)(v35 + 1152);
  *(_QWORD *)(v34 + 1160) = *(_QWORD *)(v35 + 1160);
  *(_QWORD *)(v34 + 1168) = *(_QWORD *)(v35 + 1168);
  *(_QWORD *)(v34 + 1176) = *(_QWORD *)(v35 + 1176);
  v317 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v440(v34 + v317[14], v35 + v317[14], v441);
  *(_QWORD *)(v34 + v317[15]) = *(_QWORD *)(v35 + v317[15]);
  swift_retain();
  swift_release();
  *(_QWORD *)(v34 + v317[16]) = *(_QWORD *)(v35 + v317[16]);
  swift_retain();
  swift_release();
  v318 = v317[17];
  v319 = v34 + v318;
  v320 = (__int128 *)(v35 + v318);
  v321 = *(unsigned __int8 *)(v34 + v318 + 40);
  v322 = *(unsigned __int8 *)(v35 + v318 + 40);
  if (v321 == 255)
  {
    if (v322 == 255)
    {
      v325 = *v320;
      v326 = v320[1];
      *(_OWORD *)(v319 + 25) = *(__int128 *)((char *)v320 + 25);
      *(_OWORD *)v319 = v325;
      *(_OWORD *)(v319 + 16) = v326;
      goto LABEL_148;
    }
    if ((v322 & 1) != 0)
      goto LABEL_145;
LABEL_147:
    v328 = *((_QWORD *)v320 + 3);
    *(_QWORD *)(v319 + 24) = v328;
    *(_QWORD *)(v319 + 32) = *((_QWORD *)v320 + 4);
    (**(void (***)(uint64_t, __int128 *))(v328 - 8))(v319, v320);
    *(_BYTE *)(v319 + 40) = 0;
    goto LABEL_148;
  }
  if (v322 == 255)
  {
    sub_2141E61B0(v319);
    v323 = *(__int128 *)((char *)v320 + 25);
    v324 = v320[1];
    *(_OWORD *)v319 = *v320;
    *(_OWORD *)(v319 + 16) = v324;
    *(_OWORD *)(v319 + 25) = v323;
    goto LABEL_148;
  }
  if (v442 != v443)
  {
    sub_2141E61B0(v319);
    if ((*((_BYTE *)v320 + 40) & 1) != 0)
    {
LABEL_145:
      v327 = *((_QWORD *)v320 + 3);
      *(_QWORD *)(v319 + 24) = v327;
      *(_QWORD *)(v319 + 32) = *((_QWORD *)v320 + 4);
      (**(void (***)(uint64_t, __int128 *))(v327 - 8))(v319, v320);
      *(_BYTE *)(v319 + 40) = 1;
      goto LABEL_148;
    }
    goto LABEL_147;
  }
LABEL_148:
  v329 = (__int128 *)(v319 + 48);
  v330 = v320 + 3;
  v331 = *((unsigned __int8 *)v320 + 88);
  if (*(unsigned __int8 *)(v319 + 88) == 255)
  {
    if (v331 == 255)
    {
      v334 = *v330;
      v335 = v320[4];
      *(_OWORD *)(v319 + 73) = *(__int128 *)((char *)v320 + 73);
      *v329 = v334;
      *(_OWORD *)(v319 + 64) = v335;
      goto LABEL_158;
    }
    goto LABEL_155;
  }
  if (v331 == 255)
  {
    sub_2141E625C(v319 + 48);
    v332 = *(__int128 *)((char *)v320 + 73);
    v333 = v320[4];
    *v329 = *v330;
    *(_OWORD *)(v319 + 64) = v333;
    *(_OWORD *)(v319 + 73) = v332;
    goto LABEL_158;
  }
  if (v442 != v443)
  {
    sub_2141E625C(v319 + 48);
    LOBYTE(v331) = *((_BYTE *)v320 + 88);
LABEL_155:
    v336 = *((_QWORD *)v320 + 9);
    *(_QWORD *)(v319 + 72) = v336;
    *(_QWORD *)(v319 + 80) = *((_QWORD *)v320 + 10);
    (**(void (***)(uint64_t, uint64_t))(v336 - 8))(v319 + 48, (uint64_t)(v320 + 3));
    *(_BYTE *)(v319 + 88) = (v331 & 1) != 0;
  }
LABEL_158:
  v337 = (__int128 *)(v319 + 96);
  v338 = v320 + 6;
  v339 = *((unsigned __int8 *)v320 + 136);
  if (*(unsigned __int8 *)(v319 + 136) == 255)
  {
    if (v339 == 255)
    {
      v342 = *v338;
      v343 = v320[7];
      *(_OWORD *)(v319 + 121) = *(__int128 *)((char *)v320 + 121);
      *v337 = v342;
      *(_OWORD *)(v319 + 112) = v343;
      goto LABEL_168;
    }
    goto LABEL_165;
  }
  if (v339 == 255)
  {
    sub_2141E61B0(v319 + 96);
    v340 = *(__int128 *)((char *)v320 + 121);
    v341 = v320[7];
    *v337 = *v338;
    *(_OWORD *)(v319 + 112) = v341;
    *(_OWORD *)(v319 + 121) = v340;
    goto LABEL_168;
  }
  if (v442 != v443)
  {
    sub_2141E61B0(v319 + 96);
    LOBYTE(v339) = *((_BYTE *)v320 + 136);
LABEL_165:
    v344 = *((_QWORD *)v320 + 15);
    *(_QWORD *)(v319 + 120) = v344;
    *(_QWORD *)(v319 + 128) = *((_QWORD *)v320 + 16);
    (**(void (***)(uint64_t, uint64_t))(v344 - 8))(v319 + 96, (uint64_t)(v320 + 6));
    *(_BYTE *)(v319 + 136) = (v339 & 1) != 0;
  }
LABEL_168:
  v345 = (__int128 *)(v319 + 144);
  v346 = v320 + 9;
  v347 = *((unsigned __int8 *)v320 + 184);
  if (*(unsigned __int8 *)(v319 + 184) == 255)
  {
    if (v347 == 255)
    {
      v350 = *v346;
      v351 = v320[10];
      *(_OWORD *)(v319 + 169) = *(__int128 *)((char *)v320 + 169);
      *v345 = v350;
      *(_OWORD *)(v319 + 160) = v351;
      goto LABEL_178;
    }
    goto LABEL_175;
  }
  if (v347 == 255)
  {
    sub_2141E625C(v319 + 144);
    v348 = *(__int128 *)((char *)v320 + 169);
    v349 = v320[10];
    *v345 = *v346;
    *(_OWORD *)(v319 + 160) = v349;
    *(_OWORD *)(v319 + 169) = v348;
    goto LABEL_178;
  }
  if (v442 != v443)
  {
    sub_2141E625C(v319 + 144);
    LOBYTE(v347) = *((_BYTE *)v320 + 184);
LABEL_175:
    v352 = *((_QWORD *)v320 + 21);
    *(_QWORD *)(v319 + 168) = v352;
    *(_QWORD *)(v319 + 176) = *((_QWORD *)v320 + 22);
    (**(void (***)(uint64_t, uint64_t))(v352 - 8))(v319 + 144, (uint64_t)(v320 + 9));
    *(_BYTE *)(v319 + 184) = (v347 & 1) != 0;
  }
LABEL_178:
  v353 = (__int128 *)(v319 + 192);
  v354 = v320 + 12;
  v355 = *((unsigned __int8 *)v320 + 232);
  if (*(unsigned __int8 *)(v319 + 232) == 255)
  {
    if (v355 == 255)
    {
      v358 = *v354;
      v359 = v320[13];
      *(_OWORD *)(v319 + 217) = *(__int128 *)((char *)v320 + 217);
      *v353 = v358;
      *(_OWORD *)(v319 + 208) = v359;
      goto LABEL_188;
    }
    goto LABEL_185;
  }
  if (v355 == 255)
  {
    sub_2141E61B0(v319 + 192);
    v356 = *(__int128 *)((char *)v320 + 217);
    v357 = v320[13];
    *v353 = *v354;
    *(_OWORD *)(v319 + 208) = v357;
    *(_OWORD *)(v319 + 217) = v356;
    goto LABEL_188;
  }
  if (v442 != v443)
  {
    sub_2141E61B0(v319 + 192);
    LOBYTE(v355) = *((_BYTE *)v320 + 232);
LABEL_185:
    v360 = *((_QWORD *)v320 + 27);
    *(_QWORD *)(v319 + 216) = v360;
    *(_QWORD *)(v319 + 224) = *((_QWORD *)v320 + 28);
    (**(void (***)(uint64_t, uint64_t))(v360 - 8))(v319 + 192, (uint64_t)(v320 + 12));
    *(_BYTE *)(v319 + 232) = (v355 & 1) != 0;
  }
LABEL_188:
  v361 = (__int128 *)(v319 + 240);
  v362 = v320 + 15;
  v363 = (BOOL *)(v319 + 280);
  v364 = *((unsigned __int8 *)v320 + 280);
  if (*(unsigned __int8 *)(v319 + 280) == 255)
  {
    if (v364 == 255)
    {
      v367 = *v362;
      v368 = v320[16];
      *(_OWORD *)(v319 + 265) = *(__int128 *)((char *)v320 + 265);
      *v361 = v367;
      *(_OWORD *)(v319 + 256) = v368;
      goto LABEL_198;
    }
  }
  else
  {
    if (v364 == 255)
    {
      sub_2141E625C(v319 + 240);
      v365 = *(__int128 *)((char *)v320 + 265);
      v366 = v320[16];
      *v361 = *v362;
      *(_OWORD *)(v319 + 256) = v366;
      *(_OWORD *)(v319 + 265) = v365;
      goto LABEL_198;
    }
    if (v442 == v443)
      goto LABEL_198;
    sub_2141E625C(v319 + 240);
    LOBYTE(v364) = *((_BYTE *)v320 + 280);
  }
  v369 = *((_QWORD *)v320 + 33);
  *(_QWORD *)(v319 + 264) = v369;
  *(_QWORD *)(v319 + 272) = *((_QWORD *)v320 + 34);
  (**(void (***)(uint64_t, uint64_t))(v369 - 8))(v319 + 240, (uint64_t)(v320 + 15));
  *v363 = (v364 & 1) != 0;
LABEL_198:
  *(_BYTE *)(v319 + 281) = *((_BYTE *)v320 + 281);
  *(_BYTE *)(v319 + 282) = *((_BYTE *)v320 + 282);
  return v442;
}

uint64_t sub_214409EF4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int *v21;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v10 = sub_2144240D4();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = v14[3];
  v13[2] = v14[2];
  v13[3] = v15;
  v13[4] = v14[4];
  v16 = v14[1];
  *v13 = *v14;
  v13[1] = v16;
  v17 = a3[10];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  memcpy((void *)(a1 + v17 + 32), (const void *)(v19 + 32), 0x170uLL);
  memcpy((void *)(v18 + 400), (const void *)(v19 + 400), 0x2C1uLL);
  *(_OWORD *)(v18 + 1112) = *(_OWORD *)(v19 + 1112);
  *(_OWORD *)(v18 + 1128) = *(_OWORD *)(v19 + 1128);
  *(_BYTE *)(v18 + 1144) = *(_BYTE *)(v19 + 1144);
  *(_OWORD *)(v18 + 1152) = *(_OWORD *)(v19 + 1152);
  *(_OWORD *)(v18 + 1168) = *(_OWORD *)(v19 + 1168);
  v21 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v11(v18 + v21[14], v19 + v21[14], v10);
  *(_QWORD *)(v18 + v21[15]) = *(_QWORD *)(v19 + v21[15]);
  *(_QWORD *)(v18 + v21[16]) = *(_QWORD *)(v19 + v21[16]);
  memcpy((void *)(v18 + v21[17]), (const void *)(v19 + v21[17]), 0x11BuLL);
  return a1;
}

uint64_t sub_21440A078(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_214407638(v7, v8, v9, v10, v11);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_2144240D4();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  v18 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v19 = a1 + v18;
  *(_BYTE *)v19 = *(_BYTE *)(a2 + v18);
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(a2 + v18 + 8);
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(a2 + v18 + 16);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(a2 + v18 + 24);
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(a2 + v18 + 32);
  v20 = a1 + v18 + 40;
  v21 = a2 + v18 + 40;
  if (*(_QWORD *)(a1 + v18 + 64))
  {
    if (*(_QWORD *)(a2 + v18 + 64))
      _s6Charts15AnyChartContentVwxx_0(v20);
    else
      sub_2141DEB7C(v20);
  }
  v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v22;
  *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  swift_release();
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  swift_release();
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
  swift_release();
  if (a1 != a2)
  {
    sub_2141E0750(v24 + 32, &qword_253F15AE8);
    memcpy((void *)(v24 + 32), (const void *)(v25 + 32), 0x11CuLL);
  }
  *(_BYTE *)(v24 + 316) = *(_BYTE *)(v25 + 316);
  v26 = *(_QWORD *)(v25 + 320);
  if (*(_QWORD *)(v24 + 320))
  {
    if (v26)
    {
      v27 = *(_QWORD *)(v25 + 328);
      *(_QWORD *)(v24 + 320) = v26;
      *(_QWORD *)(v24 + 328) = v27;
      swift_release();
      goto LABEL_14;
    }
    swift_release();
  }
  else if (v26)
  {
    v28 = *(_QWORD *)(v25 + 328);
    *(_QWORD *)(v24 + 320) = v26;
    *(_QWORD *)(v24 + 328) = v28;
    goto LABEL_14;
  }
  *(_OWORD *)(v24 + 320) = *(_OWORD *)(v25 + 320);
LABEL_14:
  v29 = *(_QWORD *)(v25 + 336);
  if (*(_QWORD *)(v24 + 336))
  {
    if (v29)
    {
      v30 = *(_QWORD *)(v25 + 344);
      *(_QWORD *)(v24 + 336) = v29;
      *(_QWORD *)(v24 + 344) = v30;
      swift_release();
      goto LABEL_21;
    }
    swift_release();
  }
  else if (v29)
  {
    v31 = *(_QWORD *)(v25 + 344);
    *(_QWORD *)(v24 + 336) = v29;
    *(_QWORD *)(v24 + 344) = v31;
    goto LABEL_21;
  }
  *(_OWORD *)(v24 + 336) = *(_OWORD *)(v25 + 336);
LABEL_21:
  v32 = *(_QWORD *)(v25 + 352);
  if (*(_QWORD *)(v24 + 352))
  {
    if (v32)
    {
      v33 = *(_QWORD *)(v25 + 360);
      *(_QWORD *)(v24 + 352) = v32;
      *(_QWORD *)(v24 + 360) = v33;
      swift_release();
      goto LABEL_28;
    }
    swift_release();
  }
  else if (v32)
  {
    v34 = *(_QWORD *)(v25 + 360);
    *(_QWORD *)(v24 + 352) = v32;
    *(_QWORD *)(v24 + 360) = v34;
    goto LABEL_28;
  }
  *(_OWORD *)(v24 + 352) = *(_OWORD *)(v25 + 352);
LABEL_28:
  v35 = *(_QWORD *)(v25 + 368);
  if (*(_QWORD *)(v24 + 368))
  {
    if (v35)
    {
      v36 = *(_QWORD *)(v25 + 376);
      *(_QWORD *)(v24 + 368) = v35;
      *(_QWORD *)(v24 + 376) = v36;
      swift_release();
      goto LABEL_35;
    }
    swift_release();
  }
  else if (v35)
  {
    v37 = *(_QWORD *)(v25 + 376);
    *(_QWORD *)(v24 + 368) = v35;
    *(_QWORD *)(v24 + 376) = v37;
    goto LABEL_35;
  }
  *(_OWORD *)(v24 + 368) = *(_OWORD *)(v25 + 368);
LABEL_35:
  v38 = *(_QWORD *)(v25 + 384);
  if (*(_QWORD *)(v24 + 384))
  {
    if (v38)
    {
      v39 = *(_QWORD *)(v25 + 392);
      *(_QWORD *)(v24 + 384) = v38;
      *(_QWORD *)(v24 + 392) = v39;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v38)
  {
    v40 = *(_QWORD *)(v25 + 392);
    *(_QWORD *)(v24 + 384) = v38;
    *(_QWORD *)(v24 + 392) = v40;
    goto LABEL_42;
  }
  *(_OWORD *)(v24 + 384) = *(_OWORD *)(v25 + 384);
LABEL_42:
  if (*(unsigned __int8 *)(v24 + 504) == 255)
  {
LABEL_45:
    v42 = *(_OWORD *)(v25 + 480);
    *(_OWORD *)(v24 + 464) = *(_OWORD *)(v25 + 464);
    *(_OWORD *)(v24 + 480) = v42;
    *(_OWORD *)(v24 + 489) = *(_OWORD *)(v25 + 489);
    v43 = *(_OWORD *)(v25 + 416);
    *(_OWORD *)(v24 + 400) = *(_OWORD *)(v25 + 400);
    *(_OWORD *)(v24 + 416) = v43;
    v44 = *(_OWORD *)(v25 + 448);
    *(_OWORD *)(v24 + 432) = *(_OWORD *)(v25 + 432);
    *(_OWORD *)(v24 + 448) = v44;
    goto LABEL_47;
  }
  v41 = *(unsigned __int8 *)(v25 + 504);
  if (v41 == 255)
  {
    sub_2141E0750(v24 + 400, &qword_253F13368);
    goto LABEL_45;
  }
  v45 = *(_QWORD *)(v25 + 496);
  v46 = *(_QWORD *)(v24 + 400);
  v47 = *(_QWORD *)(v24 + 408);
  v48 = *(_QWORD *)(v24 + 416);
  v49 = *(_QWORD *)(v24 + 424);
  v50 = *(_QWORD *)(v24 + 432);
  v51 = *(_QWORD *)(v24 + 440);
  v52 = *(_QWORD *)(v24 + 448);
  v53 = *(_QWORD *)(v24 + 456);
  v54 = *(_OWORD *)(v24 + 464);
  v55 = *(_OWORD *)(v25 + 416);
  *(_OWORD *)(v24 + 400) = *(_OWORD *)(v25 + 400);
  *(_OWORD *)(v24 + 416) = v55;
  v56 = *(_OWORD *)(v25 + 448);
  *(_OWORD *)(v24 + 432) = *(_OWORD *)(v25 + 432);
  *(_OWORD *)(v24 + 448) = v56;
  v57 = *(_OWORD *)(v25 + 480);
  *(_OWORD *)(v24 + 464) = *(_OWORD *)(v25 + 464);
  *(_OWORD *)(v24 + 480) = v57;
  *(_QWORD *)(v24 + 496) = v45;
  *(_BYTE *)(v24 + 504) = v41 & 1;
  sub_21421BB6C(v46, v47, v48, v49, v50, v51, v52, v53, v54);
LABEL_47:
  if (*(unsigned __int8 *)(v24 + 616) == 255)
  {
LABEL_50:
    v59 = *(_OWORD *)(v25 + 592);
    *(_OWORD *)(v24 + 576) = *(_OWORD *)(v25 + 576);
    *(_OWORD *)(v24 + 592) = v59;
    *(_OWORD *)(v24 + 601) = *(_OWORD *)(v25 + 601);
    v60 = *(_OWORD *)(v25 + 528);
    *(_OWORD *)(v24 + 512) = *(_OWORD *)(v25 + 512);
    *(_OWORD *)(v24 + 528) = v60;
    v61 = *(_OWORD *)(v25 + 560);
    *(_OWORD *)(v24 + 544) = *(_OWORD *)(v25 + 544);
    *(_OWORD *)(v24 + 560) = v61;
    goto LABEL_52;
  }
  v58 = *(unsigned __int8 *)(v25 + 616);
  if (v58 == 255)
  {
    sub_2141E0750(v24 + 512, &qword_253F13368);
    goto LABEL_50;
  }
  v62 = *(_QWORD *)(v25 + 608);
  v63 = *(_QWORD *)(v24 + 512);
  v64 = *(_QWORD *)(v24 + 520);
  v65 = *(_QWORD *)(v24 + 528);
  v66 = *(_QWORD *)(v24 + 536);
  v67 = *(_QWORD *)(v24 + 544);
  v68 = *(_QWORD *)(v24 + 552);
  v69 = *(_QWORD *)(v24 + 560);
  v70 = *(_QWORD *)(v24 + 568);
  v71 = *(_OWORD *)(v24 + 576);
  v72 = *(_OWORD *)(v25 + 528);
  *(_OWORD *)(v24 + 512) = *(_OWORD *)(v25 + 512);
  *(_OWORD *)(v24 + 528) = v72;
  v73 = *(_OWORD *)(v25 + 560);
  *(_OWORD *)(v24 + 544) = *(_OWORD *)(v25 + 544);
  *(_OWORD *)(v24 + 560) = v73;
  v74 = *(_OWORD *)(v25 + 592);
  *(_OWORD *)(v24 + 576) = *(_OWORD *)(v25 + 576);
  *(_OWORD *)(v24 + 592) = v74;
  *(_QWORD *)(v24 + 608) = v62;
  *(_BYTE *)(v24 + 616) = v58 & 1;
  sub_21421BB6C(v63, v64, v65, v66, v67, v68, v69, v70, v71);
LABEL_52:
  if (*(unsigned __int8 *)(v24 + 720) == 255)
  {
LABEL_55:
    v76 = *(_OWORD *)(v25 + 704);
    *(_OWORD *)(v24 + 688) = *(_OWORD *)(v25 + 688);
    *(_OWORD *)(v24 + 704) = v76;
    *(_BYTE *)(v24 + 720) = *(_BYTE *)(v25 + 720);
    v77 = *(_OWORD *)(v25 + 640);
    *(_OWORD *)(v24 + 624) = *(_OWORD *)(v25 + 624);
    *(_OWORD *)(v24 + 640) = v77;
    v78 = *(_OWORD *)(v25 + 672);
    *(_OWORD *)(v24 + 656) = *(_OWORD *)(v25 + 656);
    *(_OWORD *)(v24 + 672) = v78;
    goto LABEL_57;
  }
  v75 = *(unsigned __int8 *)(v25 + 720);
  if (v75 == 255)
  {
    sub_2141E0750(v24 + 624, qword_253F10468);
    goto LABEL_55;
  }
  v79 = *(_QWORD *)(v24 + 624);
  v80 = *(_QWORD *)(v24 + 632);
  v81 = *(_QWORD *)(v24 + 640);
  v82 = *(_QWORD *)(v24 + 648);
  v83 = *(_QWORD *)(v24 + 656);
  v84 = *(_QWORD *)(v24 + 664);
  v85 = *(_QWORD *)(v24 + 672);
  v86 = *(_QWORD *)(v24 + 680);
  v87 = *(_OWORD *)(v25 + 640);
  *(_OWORD *)(v24 + 624) = *(_OWORD *)(v25 + 624);
  *(_OWORD *)(v24 + 640) = v87;
  v88 = *(_OWORD *)(v25 + 672);
  *(_OWORD *)(v24 + 656) = *(_OWORD *)(v25 + 656);
  *(_OWORD *)(v24 + 672) = v88;
  v89 = *(_OWORD *)(v25 + 704);
  *(_OWORD *)(v24 + 688) = *(_OWORD *)(v25 + 688);
  *(_OWORD *)(v24 + 704) = v89;
  *(_BYTE *)(v24 + 720) = v75 & 1;
  sub_21421B8A0(v79, v80, v81, v82, v83, v84, v85, v86);
LABEL_57:
  if (*(unsigned __int8 *)(v24 + 856) == 255)
  {
LABEL_61:
    v90 = *(_OWORD *)(v25 + 840);
    *(_OWORD *)(v24 + 824) = *(_OWORD *)(v25 + 824);
    *(_OWORD *)(v24 + 840) = v90;
    *(_BYTE *)(v24 + 856) = *(_BYTE *)(v25 + 856);
    v91 = *(_OWORD *)(v25 + 776);
    *(_OWORD *)(v24 + 760) = *(_OWORD *)(v25 + 760);
    *(_OWORD *)(v24 + 776) = v91;
    v92 = *(_OWORD *)(v25 + 808);
    *(_OWORD *)(v24 + 792) = *(_OWORD *)(v25 + 792);
    *(_OWORD *)(v24 + 808) = v92;
    v93 = *(_OWORD *)(v25 + 744);
    *(_OWORD *)(v24 + 728) = *(_OWORD *)(v25 + 728);
    *(_OWORD *)(v24 + 744) = v93;
    goto LABEL_62;
  }
  if (*(unsigned __int8 *)(v25 + 856) == 255 || a1 != a2)
  {
    sub_2141E0750(v24 + 728, &qword_254D695C8);
    goto LABEL_61;
  }
LABEL_62:
  if (*(unsigned __int8 *)(v24 + 968) == 255)
  {
LABEL_65:
    v95 = *(_OWORD *)(v25 + 944);
    *(_OWORD *)(v24 + 928) = *(_OWORD *)(v25 + 928);
    *(_OWORD *)(v24 + 944) = v95;
    *(_OWORD *)(v24 + 953) = *(_OWORD *)(v25 + 953);
    v96 = *(_OWORD *)(v25 + 880);
    *(_OWORD *)(v24 + 864) = *(_OWORD *)(v25 + 864);
    *(_OWORD *)(v24 + 880) = v96;
    v97 = *(_OWORD *)(v25 + 912);
    *(_OWORD *)(v24 + 896) = *(_OWORD *)(v25 + 896);
    *(_OWORD *)(v24 + 912) = v97;
    goto LABEL_67;
  }
  v94 = *(unsigned __int8 *)(v25 + 968);
  if (v94 == 255)
  {
    sub_2141E0750(v24 + 864, &qword_253F13368);
    goto LABEL_65;
  }
  v98 = *(_QWORD *)(v25 + 960);
  v99 = *(_QWORD *)(v24 + 864);
  v100 = *(_QWORD *)(v24 + 872);
  v101 = *(_QWORD *)(v24 + 880);
  v102 = *(_QWORD *)(v24 + 888);
  v103 = *(_QWORD *)(v24 + 896);
  v104 = *(_QWORD *)(v24 + 904);
  v105 = *(_QWORD *)(v24 + 912);
  v106 = *(_QWORD *)(v24 + 920);
  v107 = *(_OWORD *)(v24 + 928);
  v108 = *(_OWORD *)(v25 + 880);
  *(_OWORD *)(v24 + 864) = *(_OWORD *)(v25 + 864);
  *(_OWORD *)(v24 + 880) = v108;
  v109 = *(_OWORD *)(v25 + 912);
  *(_OWORD *)(v24 + 896) = *(_OWORD *)(v25 + 896);
  *(_OWORD *)(v24 + 912) = v109;
  v110 = *(_OWORD *)(v25 + 944);
  *(_OWORD *)(v24 + 928) = *(_OWORD *)(v25 + 928);
  *(_OWORD *)(v24 + 944) = v110;
  *(_QWORD *)(v24 + 960) = v98;
  *(_BYTE *)(v24 + 968) = v94 & 1;
  sub_21421BB6C(v99, v100, v101, v102, v103, v104, v105, v106, v107);
LABEL_67:
  if (*(unsigned __int8 *)(v24 + 1104) == 255)
  {
LABEL_70:
    v112 = *(_OWORD *)(v25 + 1088);
    *(_OWORD *)(v24 + 1072) = *(_OWORD *)(v25 + 1072);
    *(_OWORD *)(v24 + 1088) = v112;
    *(_BYTE *)(v24 + 1104) = *(_BYTE *)(v25 + 1104);
    v113 = *(_OWORD *)(v25 + 1024);
    *(_OWORD *)(v24 + 1008) = *(_OWORD *)(v25 + 1008);
    *(_OWORD *)(v24 + 1024) = v113;
    v114 = *(_OWORD *)(v25 + 1056);
    *(_OWORD *)(v24 + 1040) = *(_OWORD *)(v25 + 1040);
    *(_OWORD *)(v24 + 1056) = v114;
    v115 = *(_OWORD *)(v25 + 992);
    *(_OWORD *)(v24 + 976) = *(_OWORD *)(v25 + 976);
    *(_OWORD *)(v24 + 992) = v115;
    goto LABEL_72;
  }
  v111 = *(unsigned __int8 *)(v25 + 1104);
  if (v111 == 255)
  {
    sub_2141E0750(v24 + 976, &qword_254D695C0);
    goto LABEL_70;
  }
  v116 = *(_QWORD *)(v24 + 976);
  v117 = *(_QWORD *)(v24 + 984);
  v118 = *(_QWORD *)(v24 + 992);
  v119 = *(_QWORD *)(v24 + 1000);
  v120 = *(_QWORD *)(v24 + 1008);
  v121 = *(_QWORD *)(v24 + 1016);
  v122 = *(_QWORD *)(v24 + 1024);
  v123 = *(_QWORD *)(v24 + 1032);
  v124 = *(_OWORD *)(v24 + 1040);
  v125 = *(_OWORD *)(v24 + 1056);
  v126 = *(_OWORD *)(v25 + 992);
  *(_OWORD *)(v24 + 976) = *(_OWORD *)(v25 + 976);
  *(_OWORD *)(v24 + 992) = v126;
  v127 = *(_OWORD *)(v25 + 1024);
  *(_OWORD *)(v24 + 1008) = *(_OWORD *)(v25 + 1008);
  *(_OWORD *)(v24 + 1024) = v127;
  *(_OWORD *)(v24 + 1040) = *(_OWORD *)(v25 + 1040);
  *(_OWORD *)(v24 + 1056) = *(_OWORD *)(v25 + 1056);
  *(_OWORD *)(v24 + 1072) = *(_OWORD *)(v25 + 1072);
  *(_OWORD *)(v24 + 1088) = *(_OWORD *)(v25 + 1088);
  *(_BYTE *)(v24 + 1104) = v111 & 1;
  sub_21421BA80(v116, v117, v118, v119, v120, v121, v122, v123, v124, *((uint64_t *)&v124 + 1), v125, BYTE8(v125));
LABEL_72:
  *(_QWORD *)(v24 + 1112) = *(_QWORD *)(v25 + 1112);
  *(_OWORD *)(v24 + 1120) = *(_OWORD *)(v25 + 1120);
  *(_QWORD *)(v24 + 1136) = *(_QWORD *)(v25 + 1136);
  *(_BYTE *)(v24 + 1144) = *(_BYTE *)(v25 + 1144);
  *(_OWORD *)(v24 + 1152) = *(_OWORD *)(v25 + 1152);
  *(_OWORD *)(v24 + 1168) = *(_OWORD *)(v25 + 1168);
  v128 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v17(v24 + v128[14], v25 + v128[14], v16);
  *(_QWORD *)(v24 + v128[15]) = *(_QWORD *)(v25 + v128[15]);
  swift_release();
  *(_QWORD *)(v24 + v128[16]) = *(_QWORD *)(v25 + v128[16]);
  swift_release();
  v129 = v128[17];
  v130 = v24 + v129;
  v131 = v25 + v129;
  if (*(unsigned __int8 *)(v24 + v129 + 40) == 255)
  {
LABEL_76:
    v132 = *(_OWORD *)(v131 + 16);
    *(_OWORD *)v130 = *(_OWORD *)v131;
    *(_OWORD *)(v130 + 16) = v132;
    *(_OWORD *)(v130 + 25) = *(_OWORD *)(v131 + 25);
    goto LABEL_77;
  }
  if (*(unsigned __int8 *)(v131 + 40) == 255 || a1 != a2)
  {
    sub_2141E61B0(v130);
    goto LABEL_76;
  }
LABEL_77:
  if (*(unsigned __int8 *)(v130 + 88) == 255)
  {
LABEL_81:
    v133 = *(_OWORD *)(v131 + 64);
    *(_OWORD *)(v130 + 48) = *(_OWORD *)(v131 + 48);
    *(_OWORD *)(v130 + 64) = v133;
    *(_OWORD *)(v130 + 73) = *(_OWORD *)(v131 + 73);
    goto LABEL_82;
  }
  if (*(unsigned __int8 *)(v131 + 88) == 255 || a1 != a2)
  {
    sub_2141E625C(v130 + 48);
    goto LABEL_81;
  }
LABEL_82:
  if (*(unsigned __int8 *)(v130 + 136) == 255)
  {
LABEL_86:
    v134 = *(_OWORD *)(v131 + 112);
    *(_OWORD *)(v130 + 96) = *(_OWORD *)(v131 + 96);
    *(_OWORD *)(v130 + 112) = v134;
    *(_OWORD *)(v130 + 121) = *(_OWORD *)(v131 + 121);
    goto LABEL_87;
  }
  if (*(unsigned __int8 *)(v131 + 136) == 255 || a1 != a2)
  {
    sub_2141E61B0(v130 + 96);
    goto LABEL_86;
  }
LABEL_87:
  if (*(unsigned __int8 *)(v130 + 184) == 255)
  {
LABEL_91:
    v135 = *(_OWORD *)(v131 + 160);
    *(_OWORD *)(v130 + 144) = *(_OWORD *)(v131 + 144);
    *(_OWORD *)(v130 + 160) = v135;
    *(_OWORD *)(v130 + 169) = *(_OWORD *)(v131 + 169);
    goto LABEL_92;
  }
  if (*(unsigned __int8 *)(v131 + 184) == 255 || a1 != a2)
  {
    sub_2141E625C(v130 + 144);
    goto LABEL_91;
  }
LABEL_92:
  if (*(unsigned __int8 *)(v130 + 232) == 255)
  {
LABEL_96:
    v136 = *(_OWORD *)(v131 + 208);
    *(_OWORD *)(v130 + 192) = *(_OWORD *)(v131 + 192);
    *(_OWORD *)(v130 + 208) = v136;
    *(_OWORD *)(v130 + 217) = *(_OWORD *)(v131 + 217);
    goto LABEL_97;
  }
  if (*(unsigned __int8 *)(v131 + 232) == 255 || a1 != a2)
  {
    sub_2141E61B0(v130 + 192);
    goto LABEL_96;
  }
LABEL_97:
  if (*(unsigned __int8 *)(v130 + 280) == 255)
  {
LABEL_101:
    v137 = *(_OWORD *)(v131 + 256);
    *(_OWORD *)(v130 + 240) = *(_OWORD *)(v131 + 240);
    *(_OWORD *)(v130 + 256) = v137;
    *(_OWORD *)(v130 + 265) = *(_OWORD *)(v131 + 265);
    goto LABEL_102;
  }
  if (*(unsigned __int8 *)(v131 + 280) == 255 || a1 != a2)
  {
    sub_2141E625C(v130 + 240);
    goto LABEL_101;
  }
LABEL_102:
  *(_BYTE *)(v130 + 281) = *(_BYTE *)(v131 + 281);
  *(_BYTE *)(v130 + 282) = *(_BYTE *)(v131 + 282);
  return a1;
}

uint64_t sub_21440A9D8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21440A9E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v6 = sub_2144240D4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = type metadata accessor for ChartModel.Scenegraph();
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[9] + 64);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t sub_21440AA98()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21440AAA4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_2144240D4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[9] + 64) = a2;
      return result;
    }
    v10 = type metadata accessor for ChartModel.Scenegraph();
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[10];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for ChartSeparateAxesContent(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F13918);
}

uint64_t sub_21440AB5C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_2144240D4();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ChartModel.Scenegraph();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21440AC0C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21440ACB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((((((v6 + ((v5 + 1) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
         + 186) & 0xFFFFFFFFFFFFFFF8)
       + 39) & 0xFFFFFFFFFFFFFFF8)
     + 32 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v10 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    goto LABEL_43;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v11 = ((unint64_t)a1 + v5 + 1) & ~v5;
  v12 = ((unint64_t)a2 + v5 + 1) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v11, v12);
  v13 = (v6 + v11) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v6 + v12) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v14 + 104);
  if (v15 > 1)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v24 = *(_OWORD *)(v14 + 16);
    v25 = *(_OWORD *)(v14 + 32);
    v26 = *(_OWORD *)(v14 + 64);
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
    *(_OWORD *)(v13 + 64) = v26;
    *(_OWORD *)(v13 + 16) = v24;
    *(_OWORD *)(v13 + 32) = v25;
    v27 = *(_OWORD *)(v14 + 80);
    v28 = *(_OWORD *)(v14 + 96);
    v29 = *(_OWORD *)(v14 + 112);
    *(_QWORD *)(v13 + 128) = *(_QWORD *)(v14 + 128);
    *(_OWORD *)(v13 + 96) = v28;
    *(_OWORD *)(v13 + 112) = v29;
    *(_OWORD *)(v13 + 80) = v27;
  }
  else
  {
    v16 = *(_QWORD *)v14;
    v17 = *(_QWORD *)(v14 + 8);
    v18 = *(_QWORD *)(v14 + 16);
    v19 = *(_QWORD *)(v14 + 24);
    v20 = *(_QWORD *)(v14 + 32);
    v21 = *(_QWORD *)(v14 + 40);
    v22 = *(_QWORD *)(v14 + 48);
    v23 = *(_QWORD *)(v14 + 56);
    v89 = *(_QWORD *)(v14 + 64);
    v91 = *(_QWORD *)(v14 + 72);
    v93 = *(_QWORD *)(v14 + 80);
    v95 = *(_QWORD *)(v14 + 88);
    v97 = *(_QWORD *)(v14 + 96);
    v87 = v15 != 0;
    sub_21421BAE4(*(_QWORD *)v14, v17, v18, v19, v20, v21, v22, v23, v89);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v17;
    *(_QWORD *)(v13 + 16) = v18;
    *(_QWORD *)(v13 + 24) = v19;
    *(_QWORD *)(v13 + 32) = v20;
    *(_QWORD *)(v13 + 40) = v21;
    *(_QWORD *)(v13 + 48) = v22;
    *(_QWORD *)(v13 + 56) = v23;
    *(_QWORD *)(v13 + 64) = v89;
    *(_QWORD *)(v13 + 72) = v91;
    *(_QWORD *)(v13 + 80) = v93;
    *(_QWORD *)(v13 + 88) = v95;
    *(_QWORD *)(v13 + 96) = v97;
    *(_BYTE *)(v13 + 104) = v87;
    *(_QWORD *)(v13 + 112) = *(_QWORD *)(v14 + 112);
    *(_QWORD *)(v13 + 120) = *(_QWORD *)(v14 + 120);
    *(_QWORD *)(v13 + 128) = *(_QWORD *)(v14 + 128);
  }
  v30 = (v13 + 143) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v14 + 143) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(unsigned __int8 *)(v31 + 104);
  if (v32 > 1)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v41 = *(_OWORD *)(v31 + 16);
    v42 = *(_OWORD *)(v31 + 32);
    v43 = *(_OWORD *)(v31 + 64);
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 64) = v43;
    *(_OWORD *)(v30 + 16) = v41;
    *(_OWORD *)(v30 + 32) = v42;
    v44 = *(_OWORD *)(v31 + 80);
    v45 = *(_OWORD *)(v31 + 96);
    v46 = *(_OWORD *)(v31 + 112);
    *(_QWORD *)(v30 + 128) = *(_QWORD *)(v31 + 128);
    *(_OWORD *)(v30 + 96) = v45;
    *(_OWORD *)(v30 + 112) = v46;
    *(_OWORD *)(v30 + 80) = v44;
  }
  else
  {
    v33 = *(_QWORD *)v31;
    v34 = *(_QWORD *)(v31 + 8);
    v35 = *(_QWORD *)(v31 + 16);
    v36 = *(_QWORD *)(v31 + 24);
    v37 = *(_QWORD *)(v31 + 32);
    v38 = *(_QWORD *)(v31 + 40);
    v39 = *(_QWORD *)(v31 + 48);
    v40 = *(_QWORD *)(v31 + 56);
    v90 = *(_QWORD *)(v31 + 64);
    v92 = *(_QWORD *)(v31 + 72);
    v94 = *(_QWORD *)(v31 + 80);
    v96 = *(_QWORD *)(v31 + 88);
    v98 = *(_QWORD *)(v31 + 96);
    v88 = v32 != 0;
    sub_21421BAE4(*(_QWORD *)v31, v34, v35, v36, v37, v38, v39, v40, v90);
    *(_QWORD *)v30 = v33;
    *(_QWORD *)(v30 + 8) = v34;
    *(_QWORD *)(v30 + 16) = v35;
    *(_QWORD *)(v30 + 24) = v36;
    *(_QWORD *)(v30 + 32) = v37;
    *(_QWORD *)(v30 + 40) = v38;
    *(_QWORD *)(v30 + 48) = v39;
    *(_QWORD *)(v30 + 56) = v40;
    *(_QWORD *)(v30 + 64) = v90;
    *(_QWORD *)(v30 + 72) = v92;
    *(_QWORD *)(v30 + 80) = v94;
    *(_QWORD *)(v30 + 88) = v96;
    *(_QWORD *)(v30 + 96) = v98;
    *(_BYTE *)(v30 + 104) = v88;
    *(_QWORD *)(v30 + 112) = *(_QWORD *)(v31 + 112);
    *(_QWORD *)(v30 + 120) = *(_QWORD *)(v31 + 120);
    *(_QWORD *)(v30 + 128) = *(_QWORD *)(v31 + 128);
  }
  v47 = (v30 + 143) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v31 + 143) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v48 + 90) & 1) == 0)
  {
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *(_BYTE *)(v47 + 90) = 0;
    swift_retain();
    v10 = a1;
    goto LABEL_30;
  }
  v49 = *(unsigned __int16 *)(v48 + 40);
  if (v49 >> 8 <= 0xFE)
  {
    if ((v49 & 0x100) != 0)
    {
      v10 = a1;
      v55 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)(v47 + 24) = v55;
      *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 32);
      (**(void (***)(unint64_t, unint64_t))(v55 - 8))((v30 + 143) & 0xFFFFFFFFFFFFFFF8, v48);
      *(_BYTE *)(v47 + 40) = v49 & 1;
      *(_BYTE *)(v47 + 41) = 1;
      goto LABEL_24;
    }
    v52 = *(_QWORD *)v48;
    v53 = *(_QWORD *)(v48 + 8);
    v54 = *(_BYTE *)(v48 + 16);
    sub_2141DD14C(*(_QWORD *)v48, v53, v54);
    *(_QWORD *)v47 = v52;
    *(_QWORD *)(v47 + 8) = v53;
    *(_BYTE *)(v47 + 16) = v54;
    *(_BYTE *)(v47 + 41) = 0;
  }
  else
  {
    v50 = *(_OWORD *)v48;
    v51 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)(v47 + 26) = *(_OWORD *)(v48 + 26);
    *(_OWORD *)v47 = v50;
    *(_OWORD *)(v47 + 16) = v51;
  }
  v10 = a1;
LABEL_24:
  v56 = (_OWORD *)(v47 + 48);
  v57 = (__int128 *)(v48 + 48);
  v58 = *(unsigned __int16 *)(v48 + 88);
  if (v58 >> 8 <= 0xFE)
  {
    if ((v58 & 0x100) != 0)
    {
      v64 = *(_QWORD *)(v48 + 72);
      *(_QWORD *)(v47 + 72) = v64;
      *(_QWORD *)(v47 + 80) = *(_QWORD *)(v48 + 80);
      (**(void (***)(_OWORD *, __int128 *))(v64 - 8))(v56, v57);
      *(_BYTE *)(v47 + 88) = v58 & 1;
      *(_BYTE *)(v47 + 89) = 1;
    }
    else
    {
      v61 = *(_QWORD *)(v48 + 48);
      v62 = *(_QWORD *)(v48 + 56);
      v63 = *(_BYTE *)(v48 + 64);
      sub_2141DD14C(v61, v62, v63);
      *(_QWORD *)(v47 + 48) = v61;
      *(_QWORD *)(v47 + 56) = v62;
      *(_BYTE *)(v47 + 64) = v63;
      *(_BYTE *)(v47 + 89) = 0;
    }
  }
  else
  {
    v59 = *v57;
    v60 = *(_OWORD *)(v48 + 64);
    *(_OWORD *)(v47 + 74) = *(_OWORD *)(v48 + 74);
    *v56 = v59;
    *(_OWORD *)(v47 + 64) = v60;
  }
  *(_BYTE *)(v47 + 90) = 1;
LABEL_30:
  v65 = (v47 + 98) & 0xFFFFFFFFFFFFFFF8;
  v66 = (v48 + 98) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v66 + 80) & 1) != 0)
  {
    *(_BYTE *)v65 = *(_BYTE *)v66;
    v67 = *(_QWORD *)(v66 + 8);
    *(_BYTE *)(v65 + 16) = *(_BYTE *)(v66 + 16);
    *(_QWORD *)(v65 + 8) = v67;
    v68 = *(_QWORD *)(v66 + 24);
    *(_BYTE *)(v65 + 32) = *(_BYTE *)(v66 + 32);
    *(_QWORD *)(v65 + 24) = v68;
    v69 = (_OWORD *)(v65 + 40);
    v70 = (__int128 *)(v66 + 40);
    v71 = *(_QWORD *)(v66 + 64);
    if (v71)
    {
      *(_QWORD *)(v65 + 64) = v71;
      *(_QWORD *)(v65 + 72) = *(_QWORD *)(v66 + 72);
      (**(void (***)(_OWORD *, __int128 *))(v71 - 8))(v69, v70);
    }
    else
    {
      v72 = *v70;
      v73 = *(_OWORD *)(v66 + 56);
      *(_QWORD *)(v65 + 72) = *(_QWORD *)(v66 + 72);
      *v69 = v72;
      *(_OWORD *)(v65 + 56) = v73;
    }
    *(_BYTE *)(v65 + 80) = 1;
  }
  else
  {
    *(_QWORD *)v65 = *(_QWORD *)v66;
    *(_BYTE *)(v65 + 80) = 0;
    swift_retain();
  }
  v74 = (v47 + 186) & 0xFFFFFFFFFFFFFFF8;
  v75 = (v48 + 186) & 0xFFFFFFFFFFFFFFF8;
  v76 = *(unsigned __int8 *)(v75 + 16);
  if (v76 == 255)
  {
    v79 = *(_OWORD *)v75;
    *(_BYTE *)(v74 + 16) = *(_BYTE *)(v75 + 16);
    *(_OWORD *)v74 = v79;
  }
  else
  {
    v77 = *(_QWORD *)v75;
    v78 = *(_QWORD *)(v75 + 8);
    sub_2141DD14C(*(_QWORD *)v75, v78, *(_BYTE *)(v75 + 16));
    *(_QWORD *)v74 = v77;
    *(_QWORD *)(v74 + 8) = v78;
    *(_BYTE *)(v74 + 16) = v76;
  }
  *(_QWORD *)(v74 + 24) = *(_QWORD *)(v75 + 24);
  v80 = (v74 + 39) & 0xFFFFFFFFFFFFFFF8;
  v81 = (v75 + 39) & 0xFFFFFFFFFFFFFFF8;
  v82 = *(unsigned __int8 *)(v81 + 16);
  swift_retain();
  if (v82 == 255)
  {
    v85 = *(_OWORD *)v81;
    *(_BYTE *)(v80 + 16) = *(_BYTE *)(v81 + 16);
    *(_OWORD *)v80 = v85;
  }
  else
  {
    v83 = *(_QWORD *)v81;
    v84 = *(_QWORD *)(v81 + 8);
    sub_2141DD14C(*(_QWORD *)v81, v84, v82);
    *(_QWORD *)v80 = v83;
    *(_QWORD *)(v80 + 8) = v84;
    *(_BYTE *)(v80 + 16) = v82;
  }
  *(_QWORD *)(v80 + 24) = *(_QWORD *)(v81 + 24);
LABEL_43:
  swift_retain();
  return v10;
}

uint64_t sub_21440B254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v4 + 104) <= 1u)
    sub_21421BB6C(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_OWORD *)(v4 + 64));
  v5 = (v4 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v5 + 104) <= 1u)
    sub_21421BB6C(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_OWORD *)(v5 + 64));
  v6 = (v5 + 143) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v6 + 90) & 1) != 0)
  {
    v7 = *(unsigned __int16 *)(v6 + 40);
    if (v7 >> 8 <= 0xFE)
    {
      if ((v7 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v6);
      else
        sub_2141E60B8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    }
    v8 = *(unsigned __int16 *)(v6 + 88);
    if (v8 >> 8 <= 0xFE)
    {
      if ((v8 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v6 + 48);
      else
        sub_2141E60B8(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56), *(_BYTE *)(v6 + 64));
    }
  }
  else
  {
    swift_release();
  }
  v9 = (v6 + 98) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v9 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v9 + 64))
      _s6Charts15AnyChartContentVwxx_0(v9 + 40);
  }
  else
  {
    swift_release();
  }
  v10 = (v6 + 186) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 != 255)
    sub_2141E60B8(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), v11);
  swift_release();
  v12 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v13 != 255)
    sub_2141E60B8(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), v13);
  return swift_release();
}

_BYTE *sub_21440B40C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  __int128 v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  *a1 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (unint64_t)&a1[v4 + 1] & ~v4;
  v6 = (unint64_t)&a2[v4 + 1] & ~v4;
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v5, v6);
  v7 = *(_QWORD *)(v3 + 64) + 7;
  v8 = (v7 + v5) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(v9 + 104);
  if (v10 > 1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
    v19 = *(_OWORD *)(v9 + 16);
    v20 = *(_OWORD *)(v9 + 32);
    v21 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v8 + 64) = v21;
    *(_OWORD *)(v8 + 16) = v19;
    *(_OWORD *)(v8 + 32) = v20;
    v22 = *(_OWORD *)(v9 + 80);
    v23 = *(_OWORD *)(v9 + 96);
    v24 = *(_OWORD *)(v9 + 112);
    *(_QWORD *)(v8 + 128) = *(_QWORD *)(v9 + 128);
    *(_OWORD *)(v8 + 96) = v23;
    *(_OWORD *)(v8 + 112) = v24;
    *(_OWORD *)(v8 + 80) = v22;
  }
  else
  {
    v11 = *(_QWORD *)v9;
    v12 = *(_QWORD *)(v9 + 8);
    v13 = *(_QWORD *)(v9 + 16);
    v14 = *(_QWORD *)(v9 + 24);
    v15 = *(_QWORD *)(v9 + 32);
    v16 = *(_QWORD *)(v9 + 40);
    v17 = *(_QWORD *)(v9 + 48);
    v18 = *(_QWORD *)(v9 + 56);
    v85 = *(_QWORD *)(v9 + 64);
    v87 = *(_QWORD *)(v9 + 72);
    v89 = *(_QWORD *)(v9 + 80);
    v91 = *(_QWORD *)(v9 + 88);
    v93 = *(_QWORD *)(v9 + 96);
    v83 = v10 != 0;
    sub_21421BAE4(*(_QWORD *)v9, v12, v13, v14, v15, v16, v17, v18, v85);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v12;
    *(_QWORD *)(v8 + 16) = v13;
    *(_QWORD *)(v8 + 24) = v14;
    *(_QWORD *)(v8 + 32) = v15;
    *(_QWORD *)(v8 + 40) = v16;
    *(_QWORD *)(v8 + 48) = v17;
    *(_QWORD *)(v8 + 56) = v18;
    *(_QWORD *)(v8 + 64) = v85;
    *(_QWORD *)(v8 + 72) = v87;
    *(_QWORD *)(v8 + 80) = v89;
    *(_QWORD *)(v8 + 88) = v91;
    *(_QWORD *)(v8 + 96) = v93;
    *(_BYTE *)(v8 + 104) = v83;
    *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 + 112);
    *(_QWORD *)(v8 + 120) = *(_QWORD *)(v9 + 120);
    *(_QWORD *)(v8 + 128) = *(_QWORD *)(v9 + 128);
  }
  v25 = (v8 + 143) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v9 + 143) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned __int8 *)(v26 + 104);
  if (v27 > 1)
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v36 = *(_OWORD *)(v26 + 16);
    v37 = *(_OWORD *)(v26 + 32);
    v38 = *(_OWORD *)(v26 + 64);
    *(_OWORD *)(v25 + 48) = *(_OWORD *)(v26 + 48);
    *(_OWORD *)(v25 + 64) = v38;
    *(_OWORD *)(v25 + 16) = v36;
    *(_OWORD *)(v25 + 32) = v37;
    v39 = *(_OWORD *)(v26 + 80);
    v40 = *(_OWORD *)(v26 + 96);
    v41 = *(_OWORD *)(v26 + 112);
    *(_QWORD *)(v25 + 128) = *(_QWORD *)(v26 + 128);
    *(_OWORD *)(v25 + 96) = v40;
    *(_OWORD *)(v25 + 112) = v41;
    *(_OWORD *)(v25 + 80) = v39;
  }
  else
  {
    v28 = *(_QWORD *)v26;
    v29 = *(_QWORD *)(v26 + 8);
    v30 = *(_QWORD *)(v26 + 16);
    v31 = *(_QWORD *)(v26 + 24);
    v32 = *(_QWORD *)(v26 + 32);
    v33 = *(_QWORD *)(v26 + 40);
    v34 = *(_QWORD *)(v26 + 48);
    v35 = *(_QWORD *)(v26 + 56);
    v86 = *(_QWORD *)(v26 + 64);
    v88 = *(_QWORD *)(v26 + 72);
    v90 = *(_QWORD *)(v26 + 80);
    v92 = *(_QWORD *)(v26 + 88);
    v94 = *(_QWORD *)(v26 + 96);
    v84 = v27 != 0;
    sub_21421BAE4(*(_QWORD *)v26, v29, v30, v31, v32, v33, v34, v35, v86);
    *(_QWORD *)v25 = v28;
    *(_QWORD *)(v25 + 8) = v29;
    *(_QWORD *)(v25 + 16) = v30;
    *(_QWORD *)(v25 + 24) = v31;
    *(_QWORD *)(v25 + 32) = v32;
    *(_QWORD *)(v25 + 40) = v33;
    *(_QWORD *)(v25 + 48) = v34;
    *(_QWORD *)(v25 + 56) = v35;
    *(_QWORD *)(v25 + 64) = v86;
    *(_QWORD *)(v25 + 72) = v88;
    *(_QWORD *)(v25 + 80) = v90;
    *(_QWORD *)(v25 + 88) = v92;
    *(_QWORD *)(v25 + 96) = v94;
    *(_BYTE *)(v25 + 104) = v84;
    *(_QWORD *)(v25 + 112) = *(_QWORD *)(v26 + 112);
    *(_QWORD *)(v25 + 120) = *(_QWORD *)(v26 + 120);
    *(_QWORD *)(v25 + 128) = *(_QWORD *)(v26 + 128);
  }
  v42 = (v25 + 143) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v26 + 143) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v43 + 90) & 1) != 0)
  {
    v44 = *(unsigned __int16 *)(v43 + 40);
    if (v44 >> 8 <= 0xFE)
    {
      if ((v44 & 0x100) != 0)
      {
        v47 = a1;
        v51 = *(_QWORD *)(v43 + 24);
        *(_QWORD *)(v42 + 24) = v51;
        *(_QWORD *)(v42 + 32) = *(_QWORD *)(v43 + 32);
        (**(void (***)(unint64_t, unint64_t))(v51 - 8))((v25 + 143) & 0xFFFFFFFFFFFFFFF8, v43);
        *(_BYTE *)(v42 + 40) = v44 & 1;
        *(_BYTE *)(v42 + 41) = 1;
        goto LABEL_15;
      }
      v48 = *(_QWORD *)v43;
      v49 = *(_QWORD *)(v43 + 8);
      v50 = *(_BYTE *)(v43 + 16);
      sub_2141DD14C(*(_QWORD *)v43, v49, v50);
      *(_QWORD *)v42 = v48;
      *(_QWORD *)(v42 + 8) = v49;
      *(_BYTE *)(v42 + 16) = v50;
      *(_BYTE *)(v42 + 41) = 0;
    }
    else
    {
      v45 = *(_OWORD *)v43;
      v46 = *(_OWORD *)(v43 + 16);
      *(_OWORD *)(v42 + 26) = *(_OWORD *)(v43 + 26);
      *(_OWORD *)v42 = v45;
      *(_OWORD *)(v42 + 16) = v46;
    }
    v47 = a1;
LABEL_15:
    v52 = (_OWORD *)(v42 + 48);
    v53 = (__int128 *)(v43 + 48);
    v54 = *(unsigned __int16 *)(v43 + 88);
    if (v54 >> 8 <= 0xFE)
    {
      if ((v54 & 0x100) != 0)
      {
        v60 = *(_QWORD *)(v43 + 72);
        *(_QWORD *)(v42 + 72) = v60;
        *(_QWORD *)(v42 + 80) = *(_QWORD *)(v43 + 80);
        (**(void (***)(_OWORD *, __int128 *))(v60 - 8))(v52, v53);
        *(_BYTE *)(v42 + 88) = v54 & 1;
        *(_BYTE *)(v42 + 89) = 1;
      }
      else
      {
        v57 = *(_QWORD *)(v43 + 48);
        v58 = *(_QWORD *)(v43 + 56);
        v59 = *(_BYTE *)(v43 + 64);
        sub_2141DD14C(v57, v58, v59);
        *(_QWORD *)(v42 + 48) = v57;
        *(_QWORD *)(v42 + 56) = v58;
        *(_BYTE *)(v42 + 64) = v59;
        *(_BYTE *)(v42 + 89) = 0;
      }
    }
    else
    {
      v55 = *v53;
      v56 = *(_OWORD *)(v43 + 64);
      *(_OWORD *)(v42 + 74) = *(_OWORD *)(v43 + 74);
      *v52 = v55;
      *(_OWORD *)(v42 + 64) = v56;
    }
    *(_BYTE *)(v42 + 90) = 1;
    goto LABEL_21;
  }
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 90) = 0;
  swift_retain();
  v47 = a1;
LABEL_21:
  v61 = (v42 + 98) & 0xFFFFFFFFFFFFFFF8;
  v62 = (v43 + 98) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v62 + 80) & 1) != 0)
  {
    *(_BYTE *)v61 = *(_BYTE *)v62;
    v63 = *(_QWORD *)(v62 + 8);
    *(_BYTE *)(v61 + 16) = *(_BYTE *)(v62 + 16);
    *(_QWORD *)(v61 + 8) = v63;
    v64 = *(_QWORD *)(v62 + 24);
    *(_BYTE *)(v61 + 32) = *(_BYTE *)(v62 + 32);
    *(_QWORD *)(v61 + 24) = v64;
    v65 = (_OWORD *)(v61 + 40);
    v66 = (__int128 *)(v62 + 40);
    v67 = *(_QWORD *)(v62 + 64);
    if (v67)
    {
      *(_QWORD *)(v61 + 64) = v67;
      *(_QWORD *)(v61 + 72) = *(_QWORD *)(v62 + 72);
      (**(void (***)(_OWORD *, __int128 *))(v67 - 8))(v65, v66);
    }
    else
    {
      v68 = *v66;
      v69 = *(_OWORD *)(v62 + 56);
      *(_QWORD *)(v61 + 72) = *(_QWORD *)(v62 + 72);
      *v65 = v68;
      *(_OWORD *)(v61 + 56) = v69;
    }
    *(_BYTE *)(v61 + 80) = 1;
  }
  else
  {
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *(_BYTE *)(v61 + 80) = 0;
    swift_retain();
  }
  v70 = (v42 + 186) & 0xFFFFFFFFFFFFFFF8;
  v71 = (v43 + 186) & 0xFFFFFFFFFFFFFFF8;
  v72 = *(unsigned __int8 *)(v71 + 16);
  if (v72 == 255)
  {
    v75 = *(_OWORD *)v71;
    *(_BYTE *)(v70 + 16) = *(_BYTE *)(v71 + 16);
    *(_OWORD *)v70 = v75;
  }
  else
  {
    v73 = *(_QWORD *)v71;
    v74 = *(_QWORD *)(v71 + 8);
    sub_2141DD14C(*(_QWORD *)v71, v74, *(_BYTE *)(v71 + 16));
    *(_QWORD *)v70 = v73;
    *(_QWORD *)(v70 + 8) = v74;
    *(_BYTE *)(v70 + 16) = v72;
  }
  *(_QWORD *)(v70 + 24) = *(_QWORD *)(v71 + 24);
  v76 = (v70 + 39) & 0xFFFFFFFFFFFFFFF8;
  v77 = (v71 + 39) & 0xFFFFFFFFFFFFFFF8;
  v78 = *(unsigned __int8 *)(v77 + 16);
  swift_retain();
  if (v78 == 255)
  {
    v81 = *(_OWORD *)v77;
    *(_BYTE *)(v76 + 16) = *(_BYTE *)(v77 + 16);
    *(_OWORD *)v76 = v81;
  }
  else
  {
    v79 = *(_QWORD *)v77;
    v80 = *(_QWORD *)(v77 + 8);
    sub_2141DD14C(*(_QWORD *)v77, v80, v78);
    *(_QWORD *)v76 = v79;
    *(_QWORD *)(v76 + 8) = v80;
    *(_BYTE *)(v76 + 16) = v78;
  }
  *(_QWORD *)(v76 + 24) = *(_QWORD *)(v77 + 24);
  swift_retain();
  return v47;
}

_BYTE *sub_21440B934(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  BOOL v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  BOOL v152;
  _BYTE *v153;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 104);
  v153 = a1;
  if (*(unsigned __int8 *)(v9 + 104) > 1u)
  {
    if (v11 <= 1)
    {
      v29 = *(_QWORD *)v10;
      v30 = *(_QWORD *)(v10 + 8);
      v31 = *(_QWORD *)(v10 + 16);
      v32 = *(_QWORD *)(v10 + 24);
      v33 = *(_QWORD *)(v10 + 32);
      v34 = *(_QWORD *)(v10 + 40);
      v35 = *(_QWORD *)(v10 + 48);
      v36 = *(_QWORD *)(v10 + 56);
      v132 = *(_QWORD *)(v10 + 64);
      v136 = *(_QWORD *)(v10 + 72);
      v140 = *(_QWORD *)(v10 + 80);
      v144 = *(_QWORD *)(v10 + 88);
      v148 = *(_QWORD *)(v10 + 96);
      v129 = v11 != 0;
      sub_21421BAE4(*(_QWORD *)v10, v30, v31, v32, v33, v34, v35, v36, v132);
      *(_QWORD *)v9 = v29;
      *(_QWORD *)(v9 + 8) = v30;
      *(_QWORD *)(v9 + 16) = v31;
      *(_QWORD *)(v9 + 24) = v32;
      *(_QWORD *)(v9 + 32) = v33;
      *(_QWORD *)(v9 + 40) = v34;
      *(_QWORD *)(v9 + 48) = v35;
      *(_QWORD *)(v9 + 56) = v36;
      *(_QWORD *)(v9 + 64) = v132;
      *(_QWORD *)(v9 + 72) = v136;
      *(_QWORD *)(v9 + 80) = v140;
      *(_QWORD *)(v9 + 88) = v144;
      *(_QWORD *)(v9 + 96) = v148;
      *(_BYTE *)(v9 + 104) = v129;
      *(_QWORD *)(v9 + 112) = *(_QWORD *)(v10 + 112);
      *(_QWORD *)(v9 + 120) = *(_QWORD *)(v10 + 120);
      *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 128);
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 <= 1)
    {
      v151 = v11 != 0;
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      v16 = *(_QWORD *)(v10 + 32);
      v17 = *(_QWORD *)(v10 + 40);
      v18 = *(_QWORD *)(v10 + 48);
      v19 = *(_QWORD *)(v10 + 56);
      v131 = *(_QWORD *)(v10 + 64);
      v135 = *(_QWORD *)(v10 + 72);
      v139 = *(_QWORD *)(v10 + 80);
      v143 = *(_QWORD *)(v10 + 88);
      v147 = *(_QWORD *)(v10 + 96);
      sub_21421BAE4(*(_QWORD *)v10, v13, v14, v15, v16, v17, v18, v19, v131);
      v20 = *(_QWORD *)v9;
      v21 = *(_QWORD *)(v9 + 8);
      v22 = *(_QWORD *)(v9 + 16);
      v23 = *(_QWORD *)(v9 + 24);
      v24 = *(_QWORD *)(v9 + 32);
      v25 = *(_QWORD *)(v9 + 40);
      v26 = *(_QWORD *)(v9 + 48);
      v27 = *(_QWORD *)(v9 + 56);
      v28 = *(_OWORD *)(v9 + 64);
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v13;
      *(_QWORD *)(v9 + 16) = v14;
      *(_QWORD *)(v9 + 24) = v15;
      *(_QWORD *)(v9 + 32) = v16;
      *(_QWORD *)(v9 + 40) = v17;
      *(_QWORD *)(v9 + 48) = v18;
      *(_QWORD *)(v9 + 56) = v19;
      *(_QWORD *)(v9 + 64) = v131;
      *(_QWORD *)(v9 + 72) = v135;
      *(_QWORD *)(v9 + 80) = v139;
      *(_QWORD *)(v9 + 88) = v143;
      *(_QWORD *)(v9 + 96) = v147;
      *(_BYTE *)(v9 + 104) = v151;
      sub_21421BB6C(v20, v21, v22, v23, v24, v25, v26, v27, v28);
      *(_QWORD *)(v9 + 112) = *(_QWORD *)(v10 + 112);
      *(_QWORD *)(v9 + 120) = *(_QWORD *)(v10 + 120);
      *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 128);
      goto LABEL_8;
    }
    sub_21421BB6C(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56), *(_OWORD *)(v9 + 64));
  }
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v37 = *(_OWORD *)(v10 + 16);
  v38 = *(_OWORD *)(v10 + 32);
  v39 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 64) = v39;
  *(_OWORD *)(v9 + 16) = v37;
  *(_OWORD *)(v9 + 32) = v38;
  v40 = *(_OWORD *)(v10 + 80);
  v41 = *(_OWORD *)(v10 + 96);
  v42 = *(_OWORD *)(v10 + 112);
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 96) = v41;
  *(_OWORD *)(v9 + 112) = v42;
  *(_OWORD *)(v9 + 80) = v40;
LABEL_8:
  v43 = (v9 + 143) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v10 + 143) & 0xFFFFFFFFFFFFFFF8;
  v45 = *(unsigned __int8 *)(v44 + 104);
  if (*(unsigned __int8 *)(v43 + 104) > 1u)
  {
    if (v45 <= 1)
    {
      v63 = *(_QWORD *)v44;
      v64 = *(_QWORD *)(v44 + 8);
      v65 = *(_QWORD *)(v44 + 16);
      v66 = *(_QWORD *)(v44 + 24);
      v67 = *(_QWORD *)(v44 + 32);
      v68 = *(_QWORD *)(v44 + 40);
      v69 = *(_QWORD *)(v44 + 48);
      v70 = *(_QWORD *)(v44 + 56);
      v134 = *(_QWORD *)(v44 + 64);
      v138 = *(_QWORD *)(v44 + 72);
      v142 = *(_QWORD *)(v44 + 80);
      v146 = *(_QWORD *)(v44 + 88);
      v150 = *(_QWORD *)(v44 + 96);
      v130 = v45 != 0;
      sub_21421BAE4(*(_QWORD *)v44, v64, v65, v66, v67, v68, v69, v70, v134);
      *(_QWORD *)v43 = v63;
      *(_QWORD *)(v43 + 8) = v64;
      *(_QWORD *)(v43 + 16) = v65;
      *(_QWORD *)(v43 + 24) = v66;
      *(_QWORD *)(v43 + 32) = v67;
      *(_QWORD *)(v43 + 40) = v68;
      *(_QWORD *)(v43 + 48) = v69;
      *(_QWORD *)(v43 + 56) = v70;
      *(_QWORD *)(v43 + 64) = v134;
      *(_QWORD *)(v43 + 72) = v138;
      *(_QWORD *)(v43 + 80) = v142;
      *(_QWORD *)(v43 + 88) = v146;
      *(_QWORD *)(v43 + 96) = v150;
      *(_BYTE *)(v43 + 104) = v130;
      *(_QWORD *)(v43 + 112) = *(_QWORD *)(v44 + 112);
      *(_QWORD *)(v43 + 120) = *(_QWORD *)(v44 + 120);
      *(_QWORD *)(v43 + 128) = *(_QWORD *)(v44 + 128);
      goto LABEL_15;
    }
  }
  else
  {
    if (v45 <= 1)
    {
      v152 = v45 != 0;
      v46 = *(_QWORD *)v44;
      v47 = *(_QWORD *)(v44 + 8);
      v48 = *(_QWORD *)(v44 + 16);
      v49 = *(_QWORD *)(v44 + 24);
      v50 = *(_QWORD *)(v44 + 32);
      v51 = *(_QWORD *)(v44 + 40);
      v52 = *(_QWORD *)(v44 + 48);
      v53 = *(_QWORD *)(v44 + 56);
      v133 = *(_QWORD *)(v44 + 64);
      v137 = *(_QWORD *)(v44 + 72);
      v141 = *(_QWORD *)(v44 + 80);
      v145 = *(_QWORD *)(v44 + 88);
      v149 = *(_QWORD *)(v44 + 96);
      sub_21421BAE4(*(_QWORD *)v44, v47, v48, v49, v50, v51, v52, v53, v133);
      v54 = *(_QWORD *)v43;
      v55 = *(_QWORD *)(v43 + 8);
      v56 = *(_QWORD *)(v43 + 16);
      v57 = *(_QWORD *)(v43 + 24);
      v58 = *(_QWORD *)(v43 + 32);
      v59 = *(_QWORD *)(v43 + 40);
      v60 = *(_QWORD *)(v43 + 48);
      v61 = *(_QWORD *)(v43 + 56);
      v62 = *(_OWORD *)(v43 + 64);
      *(_QWORD *)v43 = v46;
      *(_QWORD *)(v43 + 8) = v47;
      *(_QWORD *)(v43 + 16) = v48;
      *(_QWORD *)(v43 + 24) = v49;
      *(_QWORD *)(v43 + 32) = v50;
      *(_QWORD *)(v43 + 40) = v51;
      *(_QWORD *)(v43 + 48) = v52;
      *(_QWORD *)(v43 + 56) = v53;
      *(_QWORD *)(v43 + 64) = v133;
      *(_QWORD *)(v43 + 72) = v137;
      *(_QWORD *)(v43 + 80) = v141;
      *(_QWORD *)(v43 + 88) = v145;
      *(_QWORD *)(v43 + 96) = v149;
      *(_BYTE *)(v43 + 104) = v152;
      sub_21421BB6C(v54, v55, v56, v57, v58, v59, v60, v61, v62);
      *(_QWORD *)(v43 + 112) = *(_QWORD *)(v44 + 112);
      *(_QWORD *)(v43 + 120) = *(_QWORD *)(v44 + 120);
      *(_QWORD *)(v43 + 128) = *(_QWORD *)(v44 + 128);
      goto LABEL_15;
    }
    sub_21421BB6C(*(_QWORD *)v43, *(_QWORD *)(v43 + 8), *(_QWORD *)(v43 + 16), *(_QWORD *)(v43 + 24), *(_QWORD *)(v43 + 32), *(_QWORD *)(v43 + 40), *(_QWORD *)(v43 + 48), *(_QWORD *)(v43 + 56), *(_OWORD *)(v43 + 64));
  }
  *(_OWORD *)v43 = *(_OWORD *)v44;
  v71 = *(_OWORD *)(v44 + 16);
  v72 = *(_OWORD *)(v44 + 32);
  v73 = *(_OWORD *)(v44 + 64);
  *(_OWORD *)(v43 + 48) = *(_OWORD *)(v44 + 48);
  *(_OWORD *)(v43 + 64) = v73;
  *(_OWORD *)(v43 + 16) = v71;
  *(_OWORD *)(v43 + 32) = v72;
  v74 = *(_OWORD *)(v44 + 80);
  v75 = *(_OWORD *)(v44 + 96);
  v76 = *(_OWORD *)(v44 + 112);
  *(_QWORD *)(v43 + 128) = *(_QWORD *)(v44 + 128);
  *(_OWORD *)(v43 + 96) = v75;
  *(_OWORD *)(v43 + 112) = v76;
  *(_OWORD *)(v43 + 80) = v74;
LABEL_15:
  v77 = (v43 + 143) & 0xFFFFFFFFFFFFFFF8;
  v78 = (v44 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (v77 != v78)
  {
    sub_2141E0750((v43 + 143) & 0xFFFFFFFFFFFFFFF8, &qword_254D6EC40);
    if ((*(_BYTE *)(v78 + 90) & 1) != 0)
    {
      v79 = *(unsigned __int16 *)(v78 + 40);
      if (v79 >> 8 <= 0xFE)
      {
        if ((v79 & 0x100) != 0)
        {
          v85 = *(_QWORD *)(v78 + 24);
          *(_QWORD *)(v77 + 24) = v85;
          *(_QWORD *)(v77 + 32) = *(_QWORD *)(v78 + 32);
          (**(void (***)(unint64_t, unint64_t))(v85 - 8))((v43 + 143) & 0xFFFFFFFFFFFFFFF8, v78);
          *(_BYTE *)(v77 + 40) = v79 & 1;
          *(_BYTE *)(v77 + 41) = 1;
        }
        else
        {
          v82 = *(_QWORD *)v78;
          v83 = *(_QWORD *)(v78 + 8);
          v84 = *(_BYTE *)(v78 + 16);
          sub_2141DD14C(*(_QWORD *)v78, v83, v84);
          *(_QWORD *)v77 = v82;
          *(_QWORD *)(v77 + 8) = v83;
          *(_BYTE *)(v77 + 16) = v84;
          *(_BYTE *)(v77 + 41) = 0;
        }
      }
      else
      {
        v80 = *(_OWORD *)v78;
        v81 = *(_OWORD *)(v78 + 16);
        *(_OWORD *)(v77 + 26) = *(_OWORD *)(v78 + 26);
        *(_OWORD *)v77 = v80;
        *(_OWORD *)(v77 + 16) = v81;
      }
      v86 = (_OWORD *)(v77 + 48);
      v87 = (__int128 *)(v78 + 48);
      v88 = *(unsigned __int16 *)(v78 + 88);
      if (v88 >> 8 <= 0xFE)
      {
        if ((v88 & 0x100) != 0)
        {
          v94 = *(_QWORD *)(v78 + 72);
          *(_QWORD *)(v77 + 72) = v94;
          *(_QWORD *)(v77 + 80) = *(_QWORD *)(v78 + 80);
          (**(void (***)(_OWORD *, __int128 *))(v94 - 8))(v86, v87);
          *(_BYTE *)(v77 + 88) = v88 & 1;
          *(_BYTE *)(v77 + 89) = 1;
        }
        else
        {
          v91 = *(_QWORD *)(v78 + 48);
          v92 = *(_QWORD *)(v78 + 56);
          v93 = *(_BYTE *)(v78 + 64);
          sub_2141DD14C(v91, v92, v93);
          *(_QWORD *)(v77 + 48) = v91;
          *(_QWORD *)(v77 + 56) = v92;
          *(_BYTE *)(v77 + 64) = v93;
          *(_BYTE *)(v77 + 89) = 0;
        }
      }
      else
      {
        v89 = *v87;
        v90 = *(_OWORD *)(v78 + 64);
        *(_OWORD *)(v77 + 74) = *(_OWORD *)(v78 + 74);
        *v86 = v89;
        *(_OWORD *)(v77 + 64) = v90;
      }
      *(_BYTE *)(v77 + 90) = 1;
    }
    else
    {
      *(_QWORD *)v77 = *(_QWORD *)v78;
      *(_BYTE *)(v77 + 90) = 0;
      swift_retain();
    }
  }
  v95 = (v77 + 98) & 0xFFFFFFFFFFFFFFF8;
  v96 = (v78 + 98) & 0xFFFFFFFFFFFFFFF8;
  if (v95 != v96)
  {
    sub_2141E0750((v77 + 98) & 0xFFFFFFFFFFFFFFF8, &qword_253F15AF8);
    if ((*(_BYTE *)(v96 + 80) & 1) != 0)
    {
      *(_BYTE *)v95 = *(_BYTE *)v96;
      v97 = *(_QWORD *)(v96 + 8);
      *(_BYTE *)(v95 + 16) = *(_BYTE *)(v96 + 16);
      *(_QWORD *)(v95 + 8) = v97;
      v98 = *(_QWORD *)(v96 + 24);
      *(_BYTE *)(v95 + 32) = *(_BYTE *)(v96 + 32);
      *(_QWORD *)(v95 + 24) = v98;
      v99 = (_OWORD *)(v95 + 40);
      v100 = (__int128 *)(v96 + 40);
      v101 = *(_QWORD *)(v96 + 64);
      if (v101)
      {
        *(_QWORD *)(v95 + 64) = v101;
        *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
        (**(void (***)(_OWORD *, __int128 *))(v101 - 8))(v99, v100);
      }
      else
      {
        v102 = *v100;
        v103 = *(_OWORD *)(v96 + 56);
        *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
        *v99 = v102;
        *(_OWORD *)(v95 + 56) = v103;
      }
      *(_BYTE *)(v95 + 80) = 1;
    }
    else
    {
      *(_QWORD *)v95 = *(_QWORD *)v96;
      *(_BYTE *)(v95 + 80) = 0;
      swift_retain();
    }
  }
  v104 = (v77 + 186) & 0xFFFFFFFFFFFFFFF8;
  v105 = (v78 + 186) & 0xFFFFFFFFFFFFFFF8;
  v106 = *(unsigned __int8 *)(v105 + 16);
  if (*(unsigned __int8 *)(v104 + 16) == 255)
  {
    if (v106 == 255)
    {
      v115 = *(_OWORD *)v105;
      *(_BYTE *)(v104 + 16) = *(_BYTE *)(v105 + 16);
      *(_OWORD *)v104 = v115;
    }
    else
    {
      v112 = *(_QWORD *)v105;
      v113 = *(_QWORD *)(v105 + 8);
      sub_2141DD14C(*(_QWORD *)v105, v113, *(_BYTE *)(v105 + 16));
      *(_QWORD *)v104 = v112;
      *(_QWORD *)(v104 + 8) = v113;
      *(_BYTE *)(v104 + 16) = v106;
    }
  }
  else if (v106 == 255)
  {
    sub_21432CC7C(v104);
    v114 = *(_BYTE *)(v105 + 16);
    *(_OWORD *)v104 = *(_OWORD *)v105;
    *(_BYTE *)(v104 + 16) = v114;
  }
  else
  {
    v107 = *(_QWORD *)v105;
    v108 = *(_QWORD *)(v105 + 8);
    sub_2141DD14C(*(_QWORD *)v105, v108, *(_BYTE *)(v105 + 16));
    v109 = *(_QWORD *)v104;
    v110 = *(_QWORD *)(v104 + 8);
    *(_QWORD *)v104 = v107;
    *(_QWORD *)(v104 + 8) = v108;
    v111 = *(_BYTE *)(v104 + 16);
    *(_BYTE *)(v104 + 16) = v106;
    sub_2141E60B8(v109, v110, v111);
  }
  *(_QWORD *)(v104 + 24) = *(_QWORD *)(v105 + 24);
  swift_retain();
  swift_release();
  v116 = (v104 + 39) & 0xFFFFFFFFFFFFFFF8;
  v117 = (v105 + 39) & 0xFFFFFFFFFFFFFFF8;
  v118 = *(unsigned __int8 *)(v117 + 16);
  if (*(unsigned __int8 *)(v116 + 16) == 255)
  {
    if (v118 == 255)
    {
      v127 = *(_OWORD *)v117;
      *(_BYTE *)(v116 + 16) = *(_BYTE *)(v117 + 16);
      *(_OWORD *)v116 = v127;
    }
    else
    {
      v124 = *(_QWORD *)v117;
      v125 = *(_QWORD *)(v117 + 8);
      sub_2141DD14C(*(_QWORD *)v117, v125, *(_BYTE *)(v117 + 16));
      *(_QWORD *)v116 = v124;
      *(_QWORD *)(v116 + 8) = v125;
      *(_BYTE *)(v116 + 16) = v118;
    }
  }
  else if (v118 == 255)
  {
    sub_21432CC7C(v116);
    v126 = *(_BYTE *)(v117 + 16);
    *(_OWORD *)v116 = *(_OWORD *)v117;
    *(_BYTE *)(v116 + 16) = v126;
  }
  else
  {
    v119 = *(_QWORD *)v117;
    v120 = *(_QWORD *)(v117 + 8);
    sub_2141DD14C(*(_QWORD *)v117, v120, *(_BYTE *)(v117 + 16));
    v121 = *(_QWORD *)v116;
    v122 = *(_QWORD *)(v116 + 8);
    *(_QWORD *)v116 = v119;
    *(_QWORD *)(v116 + 8) = v120;
    v123 = *(_BYTE *)(v116 + 16);
    *(_BYTE *)(v116 + 16) = v118;
    sub_2141E60B8(v121, v122, v123);
  }
  *(_QWORD *)(v116 + 24) = *(_QWORD *)(v117 + 24);
  swift_retain();
  swift_release();
  return v153;
}

_BYTE *sub_21440C1B8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v11 = *(_OWORD *)(v10 + 64);
  v13 = *(_OWORD *)(v10 + 16);
  v12 = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 64) = v11;
  *(_OWORD *)(v9 + 16) = v13;
  *(_OWORD *)(v9 + 32) = v12;
  v15 = *(_OWORD *)(v10 + 96);
  v14 = *(_OWORD *)(v10 + 112);
  v16 = *(_OWORD *)(v10 + 80);
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 96) = v15;
  *(_OWORD *)(v9 + 112) = v14;
  *(_OWORD *)(v9 + 80) = v16;
  v17 = (v9 + 143) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v10 + 143) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)(v18 + 80);
  v20 = *(_OWORD *)(v18 + 96);
  v21 = *(_OWORD *)(v18 + 112);
  *(_QWORD *)(v17 + 128) = *(_QWORD *)(v18 + 128);
  *(_OWORD *)(v17 + 96) = v20;
  *(_OWORD *)(v17 + 112) = v21;
  *(_OWORD *)(v17 + 80) = v19;
  v22 = *(_OWORD *)(v18 + 16);
  v23 = *(_OWORD *)(v18 + 32);
  v24 = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v18 + 48);
  *(_OWORD *)(v17 + 64) = v24;
  *(_OWORD *)(v17 + 16) = v22;
  *(_OWORD *)(v17 + 32) = v23;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v25 = (_OWORD *)((v17 + 143) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_OWORD *)((v18 + 143) & 0xFFFFFFFFFFFFFFF8);
  v27 = v26[2];
  v28 = v26[3];
  v29 = v26[4];
  *(_OWORD *)((char *)v25 + 75) = *(_OWORD *)((char *)v26 + 75);
  v25[3] = v28;
  v25[4] = v29;
  v25[2] = v27;
  v30 = v26[1];
  *v25 = *v26;
  v25[1] = v30;
  v31 = ((unint64_t)v25 + 98) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v26 + 98) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  v35 = *(_OWORD *)(v32 + 48);
  v34 = *(_OWORD *)(v32 + 64);
  v36 = *(_OWORD *)(v32 + 32);
  *(_BYTE *)(v31 + 80) = *(_BYTE *)(v32 + 80);
  *(_OWORD *)(v31 + 48) = v35;
  *(_OWORD *)(v31 + 64) = v34;
  *(_OWORD *)(v31 + 32) = v36;
  v37 = (_OWORD *)(((unint64_t)v25 + 186) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_OWORD *)(((unint64_t)v26 + 186) & 0xFFFFFFFFFFFFFFF8);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = (_OWORD *)(((unint64_t)v37 + 39) & 0xFFFFFFFFFFFFFFF8);
  v41 = (_OWORD *)(((unint64_t)v38 + 39) & 0xFFFFFFFFFFFFFFF8);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  return a1;
}

_BYTE *sub_21440C328(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  char v87;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v9 + 104) > 1u)
    goto LABEL_8;
  v11 = *(unsigned __int8 *)(v10 + 104);
  if (v11 > 1)
  {
    sub_21421BB6C(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56), *(_OWORD *)(v9 + 64));
LABEL_8:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v29 = *(_OWORD *)(v10 + 16);
    v30 = *(_OWORD *)(v10 + 32);
    v31 = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 64) = v31;
    *(_OWORD *)(v9 + 16) = v29;
    *(_OWORD *)(v9 + 32) = v30;
    v32 = *(_OWORD *)(v10 + 80);
    v33 = *(_OWORD *)(v10 + 96);
    v34 = *(_OWORD *)(v10 + 112);
    *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 128);
    *(_OWORD *)(v9 + 96) = v33;
    *(_OWORD *)(v9 + 112) = v34;
    *(_OWORD *)(v9 + 80) = v32;
    goto LABEL_9;
  }
  v12 = v11 == 0;
  v13 = *(_QWORD *)(v10 + 96);
  v14 = !v12;
  v15 = *(_QWORD *)v9;
  v16 = *(_QWORD *)(v9 + 8);
  v17 = *(_QWORD *)(v9 + 16);
  v18 = *(_QWORD *)(v9 + 24);
  v19 = *(_QWORD *)(v9 + 32);
  v20 = *(_QWORD *)(v9 + 40);
  v21 = *(_QWORD *)(v9 + 48);
  v22 = *(_QWORD *)(v9 + 56);
  v23 = *(_OWORD *)(v9 + 64);
  v24 = *(_OWORD *)(v10 + 16);
  v25 = *(_OWORD *)(v10 + 32);
  v26 = *(_OWORD *)(v10 + 48);
  v27 = *(_OWORD *)(v10 + 64);
  v28 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v24;
  *(_OWORD *)(v9 + 32) = v25;
  *(_OWORD *)(v9 + 48) = v26;
  *(_OWORD *)(v9 + 64) = v27;
  *(_OWORD *)(v9 + 80) = v28;
  *(_QWORD *)(v9 + 96) = v13;
  *(_BYTE *)(v9 + 104) = v14;
  sub_21421BB6C(v15, v16, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(v10 + 112);
  *(_QWORD *)(v9 + 120) = *(_QWORD *)(v10 + 120);
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 128);
LABEL_9:
  v35 = (v9 + 143) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v10 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v35 + 104) > 1u)
  {
LABEL_16:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v54 = *(_OWORD *)(v36 + 16);
    v55 = *(_OWORD *)(v36 + 32);
    v56 = *(_OWORD *)(v36 + 64);
    *(_OWORD *)(v35 + 48) = *(_OWORD *)(v36 + 48);
    *(_OWORD *)(v35 + 64) = v56;
    *(_OWORD *)(v35 + 16) = v54;
    *(_OWORD *)(v35 + 32) = v55;
    v57 = *(_OWORD *)(v36 + 80);
    v58 = *(_OWORD *)(v36 + 96);
    v59 = *(_OWORD *)(v36 + 112);
    *(_QWORD *)(v35 + 128) = *(_QWORD *)(v36 + 128);
    *(_OWORD *)(v35 + 96) = v58;
    *(_OWORD *)(v35 + 112) = v59;
    *(_OWORD *)(v35 + 80) = v57;
    goto LABEL_17;
  }
  v37 = *(unsigned __int8 *)(v36 + 104);
  if (v37 > 1)
  {
    sub_21421BB6C(*(_QWORD *)v35, *(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 24), *(_QWORD *)(v35 + 32), *(_QWORD *)(v35 + 40), *(_QWORD *)(v35 + 48), *(_QWORD *)(v35 + 56), *(_OWORD *)(v35 + 64));
    goto LABEL_16;
  }
  v12 = v37 == 0;
  v38 = *(_QWORD *)(v36 + 96);
  v39 = !v12;
  v40 = *(_QWORD *)v35;
  v41 = *(_QWORD *)(v35 + 8);
  v42 = *(_QWORD *)(v35 + 16);
  v43 = *(_QWORD *)(v35 + 24);
  v44 = *(_QWORD *)(v35 + 32);
  v45 = *(_QWORD *)(v35 + 40);
  v46 = *(_QWORD *)(v35 + 48);
  v47 = *(_QWORD *)(v35 + 56);
  v48 = *(_OWORD *)(v35 + 64);
  v49 = *(_OWORD *)(v36 + 16);
  v50 = *(_OWORD *)(v36 + 32);
  v51 = *(_OWORD *)(v36 + 48);
  v52 = *(_OWORD *)(v36 + 64);
  v53 = *(_OWORD *)(v36 + 80);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v49;
  *(_OWORD *)(v35 + 32) = v50;
  *(_OWORD *)(v35 + 48) = v51;
  *(_OWORD *)(v35 + 64) = v52;
  *(_OWORD *)(v35 + 80) = v53;
  *(_QWORD *)(v35 + 96) = v38;
  *(_BYTE *)(v35 + 104) = v39;
  sub_21421BB6C(v40, v41, v42, v43, v44, v45, v46, v47, v48);
  *(_QWORD *)(v35 + 112) = *(_QWORD *)(v36 + 112);
  *(_QWORD *)(v35 + 120) = *(_QWORD *)(v36 + 120);
  *(_QWORD *)(v35 + 128) = *(_QWORD *)(v36 + 128);
LABEL_17:
  v60 = (_OWORD *)((v35 + 143) & 0xFFFFFFFFFFFFFFF8);
  v61 = (_OWORD *)((v36 + 143) & 0xFFFFFFFFFFFFFFF8);
  if (v60 != v61)
  {
    sub_2141E0750((uint64_t)v60, &qword_254D6EC40);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v64 = v61[3];
    v63 = v61[4];
    v65 = v61[2];
    *(_OWORD *)((char *)v60 + 75) = *(_OWORD *)((char *)v61 + 75);
    v60[3] = v64;
    v60[4] = v63;
    v60[2] = v65;
  }
  v66 = ((unint64_t)v60 + 98) & 0xFFFFFFFFFFFFFFF8;
  v67 = ((unint64_t)v61 + 98) & 0xFFFFFFFFFFFFFFF8;
  if (v66 != v67)
  {
    sub_2141E0750(((unint64_t)v60 + 98) & 0xFFFFFFFFFFFFFFF8, &qword_253F15AF8);
    v68 = *(_OWORD *)(v67 + 16);
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *(_OWORD *)(v66 + 16) = v68;
    v70 = *(_OWORD *)(v67 + 48);
    v69 = *(_OWORD *)(v67 + 64);
    v71 = *(_OWORD *)(v67 + 32);
    *(_BYTE *)(v66 + 80) = *(_BYTE *)(v67 + 80);
    *(_OWORD *)(v66 + 48) = v70;
    *(_OWORD *)(v66 + 64) = v69;
    *(_OWORD *)(v66 + 32) = v71;
  }
  v72 = ((unint64_t)v60 + 186) & 0xFFFFFFFFFFFFFFF8;
  v73 = ((unint64_t)v61 + 186) & 0xFFFFFFFFFFFFFFF8;
  v74 = *(unsigned __int8 *)(v72 + 16);
  if (v74 == 255)
  {
    v78 = *(_OWORD *)v73;
    *(_BYTE *)(v72 + 16) = *(_BYTE *)(v73 + 16);
    *(_OWORD *)v72 = v78;
  }
  else
  {
    v75 = *(unsigned __int8 *)(v73 + 16);
    if (v75 == 255)
    {
      sub_21432CC7C(v72);
      v79 = *(_BYTE *)(v73 + 16);
      *(_OWORD *)v72 = *(_OWORD *)v73;
      *(_BYTE *)(v72 + 16) = v79;
    }
    else
    {
      v76 = *(_QWORD *)v72;
      v77 = *(_QWORD *)(v72 + 8);
      *(_OWORD *)v72 = *(_OWORD *)v73;
      *(_BYTE *)(v72 + 16) = v75;
      sub_2141E60B8(v76, v77, v74);
    }
  }
  *(_QWORD *)(v72 + 24) = *(_QWORD *)(v73 + 24);
  swift_release();
  v80 = (v72 + 39) & 0xFFFFFFFFFFFFFFF8;
  v81 = (v73 + 39) & 0xFFFFFFFFFFFFFFF8;
  v82 = *(unsigned __int8 *)(v80 + 16);
  if (v82 == 255)
  {
    v86 = *(_OWORD *)v81;
    *(_BYTE *)(v80 + 16) = *(_BYTE *)(v81 + 16);
    *(_OWORD *)v80 = v86;
  }
  else
  {
    v83 = *(unsigned __int8 *)(v81 + 16);
    if (v83 == 255)
    {
      sub_21432CC7C(v80);
      v87 = *(_BYTE *)(v81 + 16);
      *(_OWORD *)v80 = *(_OWORD *)v81;
      *(_BYTE *)(v80 + 16) = v87;
    }
    else
    {
      v84 = *(_QWORD *)v80;
      v85 = *(_QWORD *)(v80 + 8);
      *(_OWORD *)v80 = *(_OWORD *)v81;
      *(_BYTE *)(v80 + 16) = v83;
      sub_2141E60B8(v84, v85, v82);
    }
  }
  *(_QWORD *)(v80 + 24) = *(_QWORD *)(v81 + 24);
  swift_release();
  return a1;
}

uint64_t sub_21440C718(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 1) & ~v7;
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)(((((((((v8 + v13) & 0xFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFF8)
                        + 186) & 0xFFFFFFFFFFFFF8)
                      + 0x18);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      v15 = v14 - 1;
      if (v15 < 0)
        v15 = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((((((((v8 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
             + 186) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 32) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21440C7C4 + 4 * byte_214434730[v11]))();
  }
}

void sub_21440C878(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 1) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8)
           + 186) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((((((((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 1) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8)
         + 186) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)+ 143) & 0xFFFFFFFFFFFFFFF8)+ 186) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_21440C9A0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21440CA40);
}

void sub_21440C9A8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21440C9B0);
  JUMPOUT(0x21440CA40);
}

void sub_21440CA14()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21440CA40);
}

void sub_21440CA1C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21440CA40);
}

uint64_t sub_21440CA24@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 1) & a3;
  if (a2 < 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x21440CA30);
    *(_QWORD *)(((((((((v6 + v3) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
                + 186) & 0xFFFFFFFFFFFFFFF8)
              + 24) = a1;
LABEL_6:
    JUMPOUT(0x21440CA40);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

uint64_t type metadata accessor for ChartScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChartScrollView);
}

uint64_t getEnumTagSinglePayload for ChartLayout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 248);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 9;
  v5 = v3 - 9;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 248;
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartLayout()
{
  return &type metadata for ChartLayout;
}

ValueMetadata *type metadata accessor for ChartScenegraphKey()
{
  return &type metadata for ChartScenegraphKey;
}

_QWORD *sub_21440CB20(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_214423B94();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_214423C54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_2144240D4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_214423F24();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_21440CC3C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[8];
  v10 = sub_214423F24();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t sub_21440CCE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_21440CDD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_21440CECC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_21440CFBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_21440D0AC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21440D0B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  v6 = sub_214423B94();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_214423C54();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_2144240D4();
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = sub_214423F24();
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_9;
  }
  v17 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v17 >= 2)
    return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_21440D1B8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21440D1C4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_214423B94();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_214423C54();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_2144240D4();
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = sub_214423F24();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + a4[9]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for ChartEnvironmentValues(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F14E00);
}

uint64_t sub_21440D2C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = sub_214423B94();
  if (v1 <= 0x3F)
  {
    result = sub_214423C54();
    if (v2 <= 0x3F)
    {
      result = sub_2144240D4();
      if (v3 <= 0x3F)
      {
        result = sub_214423F24();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_21440D394()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_21441078C(319, &qword_253F13D48, type metadata accessor for ChartEnvironmentValues, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
    {
      sub_21441078C(319, &qword_254D6EC50, (uint64_t (*)(uint64_t))type metadata accessor for ChartModel, MEMORY[0x24BDF51D0]);
      if (v2 <= 0x3F)
      {
        sub_2144247D0();
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_21440D4C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 *v83;
  int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  int v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 *v95;
  int v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _OWORD *v100;
  __int128 *v101;
  int v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  int v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  BOOL *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  void (*v133)(unint64_t, unint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v160;
  uint64_t v161;
  char *v162;

  v152 = *(_QWORD *)(a3 + 16);
  v3 = *(_QWORD *)(v152 - 8);
  v155 = *(_QWORD *)(v3 + 64);
  v147 = sub_214423B94();
  v4 = *(_QWORD *)(v147 - 8);
  v157 = *(_DWORD *)(v4 + 80);
  v149 = sub_214423C54();
  v5 = *(_QWORD *)(v149 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v148 = sub_2144240D4();
  v7 = *(_QWORD *)(v148 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v151 = sub_214423F24();
  v10 = *(_QWORD *)(v151 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v6 | v157 & 0xF8 | v8 | v11;
  v144 = v4;
  v145 = v7;
  v140 = v11;
  v141 = *(_QWORD *)(v4 + 64) + v6;
  v146 = v5;
  v13 = *(_QWORD *)(v5 + 64) + v8;
  v142 = *(_QWORD *)(v7 + 64) + 7;
  v143 = v11 + 8;
  v150 = v10;
  v14 = *(_QWORD *)(v10 + 64);
  v15 = v14
      + ((v143
        + ((v142 + ((v13 + (v141 & ~(unint64_t)v6)) & ~(unint64_t)v8)) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v11);
  if ((unint64_t)(v15 + 1) > 8)
    v16 = v15 + 1;
  else
    v16 = 8;
  v161 = v16;
  v17 = sub_2141D8BF8(&qword_254D6EC48);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 80);
  v153 = v18;
  v154 = v17;
  v20 = *(_QWORD *)(v18 + 64);
  v21 = sub_2144247D0();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 80);
  v24 = *(_DWORD *)(v3 + 80);
  v25 = (v19 | v24) & 0xF8 | v12 | v23;
  if (v25 > 7
    || ((v6 | v157 | v8 | v11 | v19 | *(_DWORD *)(v22 + 80) | v24) & 0x100000) != 0
    || (v26 = v3,
        v27 = v12 | 7u,
        v28 = v155 + v27,
        v29 = v161 + 1,
        ((((v20 + 7) & 0xFFFFFFFFFFFFFFF8)
        + v23
        + 8
        + (((v19 & 0xF8)
          + 88
          + ((((((v155 + v27) & ~v27) + v161 + 1 + 175) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)(v19 & 0xF8) & 0xFFFFFFFFFFFFFFF8)) & ~v23)
      + *(_QWORD *)(v22 + 64) > 0x18))
  {
    v35 = *a2;
    *a1 = *a2;
    v36 = v35 + (((v25 | 7) + 16) & ~(unint64_t)(v25 | 7));
    swift_retain();
  }
  else
  {
    v135 = *(_DWORD *)(v22 + 80);
    v136 = (v19 & 0xF8) + 88;
    v137 = ~(unint64_t)(v19 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
    v138 = v20 + 7;
    v139 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + v23 + 8;
    v156 = *(_QWORD *)(v21 - 8);
    v158 = v21;
    v30 = ~v27;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v26 + 16))(a1, a2, v152);
    v31 = (_QWORD *)(((unint64_t)a1 + v28) & v30);
    v32 = (_QWORD *)(((unint64_t)a2 + v28) & v30);
    v33 = *((unsigned __int8 *)v32 + v161);
    if (v33 >= 2)
    {
      if (v161 <= 3)
        v34 = v161;
      else
        v34 = 4;
      __asm { BR              X12 }
    }
    if (v33 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v144 + 16))(v31, v32, v147);
      v160 = v14;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v146 + 16))(((unint64_t)v31 + v141) & ~(unint64_t)v6, ((unint64_t)v32 + v141) & ~(unint64_t)v6, v149);
      v37 = (v13 + (((unint64_t)v31 + v141) & ~(unint64_t)v6)) & ~v9;
      v38 = (v13 + (((unint64_t)v32 + v141) & ~(unint64_t)v6)) & ~v9;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v145 + 16))(v37, v38, v148);
      v39 = (_QWORD *)((v142 + v37) & 0xFFFFFFFFFFFFFFF8);
      v40 = (_QWORD *)((v142 + v38) & 0xFFFFFFFFFFFFFFF8);
      *v39 = *v40;
      v41 = ((unint64_t)v39 + v143) & ~v140;
      v42 = ((unint64_t)v40 + v143) & ~v140;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v150 + 16))(v41, v42, v151);
      *(_BYTE *)(v41 + v160) = *(_BYTE *)(v42 + v160);
      v43 = 1;
    }
    else
    {
      *v31 = *v32;
      swift_retain();
      v43 = 0;
    }
    *((_BYTE *)v31 + v161) = v43;
    v44 = (char *)v31 + v29;
    v45 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    v46 = ((unint64_t)v32 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    v47 = *(_QWORD *)v46;
    v48 = *(_QWORD *)(v46 + 8);
    v49 = *(_BYTE *)(v46 + 16);
    sub_21440DDFC(*(_QWORD *)v46, v48, v49, (uint64_t (*)(void))sub_2141DD47C);
    *(_QWORD *)v45 = v47;
    *(_QWORD *)(v45 + 8) = v48;
    *(_BYTE *)(v45 + 16) = v49;
    v50 = ((unint64_t)v31 + v29 + 31) & 0xFFFFFFFFFFFFFFF8;
    v51 = ((unint64_t)v32 + v29 + 31) & 0xFFFFFFFFFFFFFFF8;
    v52 = *(_QWORD *)v51;
    v53 = *(_QWORD *)(v51 + 8);
    v54 = *(_BYTE *)(v51 + 16);
    sub_21440DDFC(*(_QWORD *)v51, v53, v54, (uint64_t (*)(void))sub_2141D975C);
    *(_QWORD *)v50 = v52;
    *(_QWORD *)(v50 + 8) = v53;
    *(_BYTE *)(v50 + 16) = v54;
    v55 = ((unint64_t)v31 + v29 + 55) & 0xFFFFFFFFFFFFFFF8;
    v56 = ((unint64_t)v32 + v29 + 55) & 0xFFFFFFFFFFFFFFF8;
    v57 = *(_QWORD *)v56;
    LOBYTE(v53) = *(_BYTE *)(v56 + 8);
    sub_2143A62F4(*(_QWORD *)v56, v53);
    *(_QWORD *)v55 = v57;
    *(_BYTE *)(v55 + 8) = v53;
    v58 = ((unint64_t)v31 + v29 + 71) & 0xFFFFFFFFFFFFFFF8;
    v59 = (char *)v32 + v29;
    v162 = (char *)v32 + v29;
    v60 = ((unint64_t)v32 + v29 + 71) & 0xFFFFFFFFFFFFFFF8;
    v61 = *(_QWORD *)v60;
    v62 = *(_QWORD *)(v60 + 8);
    v63 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    v65 = *(_BYTE *)(v60 + 32);
    sub_2144071EC(*(_QWORD *)v60, v62, v63, v64, v65);
    *(_QWORD *)v58 = v61;
    *(_QWORD *)(v58 + 8) = v62;
    *(_QWORD *)(v58 + 16) = v63;
    *(_QWORD *)(v58 + 24) = v64;
    *(_BYTE *)(v58 + 32) = v65;
    v66 = (unint64_t)(v44 + 111) & 0xFFFFFFFFFFFFFFF8;
    v67 = (unint64_t)(v59 + 111) & 0xFFFFFFFFFFFFFFF8;
    v68 = *(_QWORD *)v67;
    v69 = *(_QWORD *)(v67 + 8);
    v70 = *(_QWORD *)(v67 + 16);
    v71 = *(_QWORD *)(v67 + 24);
    v72 = *(_QWORD *)(v67 + 32);
    v73 = *(_QWORD *)(v67 + 40);
    v74 = *(_QWORD *)(v67 + 48);
    LOBYTE(v58) = *(_BYTE *)(v67 + 56);
    sub_21440DE08(*(_QWORD *)v67, v69, v70, v71, v72, v73, v74, v58);
    *(_QWORD *)v66 = v68;
    *(_QWORD *)(v66 + 8) = v69;
    *(_QWORD *)(v66 + 16) = v70;
    *(_QWORD *)(v66 + 24) = v71;
    *(_QWORD *)(v66 + 32) = v72;
    *(_QWORD *)(v66 + 40) = v73;
    *(_QWORD *)(v66 + 48) = v74;
    *(_BYTE *)(v66 + 56) = v58;
    v75 = (unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8;
    v76 = (unint64_t)(v162 + 175) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(v76 + 283) & 1) != 0)
    {
      v77 = *(unsigned __int8 *)(v76 + 40);
      if (v77 == 255)
      {
        v78 = *(_OWORD *)v76;
        v79 = *(_OWORD *)(v76 + 16);
        *(_OWORD *)(v75 + 25) = *(_OWORD *)(v76 + 25);
        *(_OWORD *)v75 = v78;
        *(_OWORD *)(v75 + 16) = v79;
      }
      else
      {
        v81 = *(_QWORD *)(v76 + 24);
        *(_QWORD *)(v75 + 24) = v81;
        *(_QWORD *)(v75 + 32) = *(_QWORD *)(v76 + 32);
        if ((v77 & 1) != 0)
        {
          (**(void (***)(unint64_t, unint64_t))(v81 - 8))((unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8, v76);
          *(_BYTE *)(v75 + 40) = 1;
        }
        else
        {
          (**(void (***)(unint64_t, unint64_t))(v81 - 8))((unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8, v76);
          *(_BYTE *)(v75 + 40) = 0;
        }
      }
      v82 = (_OWORD *)(v75 + 48);
      v83 = (__int128 *)(v76 + 48);
      v84 = *(unsigned __int8 *)(v76 + 88);
      if (v84 == 255)
      {
        v85 = *v83;
        v86 = *(_OWORD *)(v76 + 64);
        *(_OWORD *)(v75 + 73) = *(_OWORD *)(v76 + 73);
        *v82 = v85;
        *(_OWORD *)(v75 + 64) = v86;
      }
      else
      {
        v87 = *(_QWORD *)(v76 + 72);
        *(_QWORD *)(v75 + 72) = v87;
        *(_QWORD *)(v75 + 80) = *(_QWORD *)(v76 + 80);
        (**(void (***)(_OWORD *, __int128 *))(v87 - 8))(v82, v83);
        *(_BYTE *)(v75 + 88) = (v84 & 1) != 0;
      }
      v88 = (_OWORD *)(v75 + 96);
      v89 = (__int128 *)(v76 + 96);
      v90 = *(unsigned __int8 *)(v76 + 136);
      if (v90 == 255)
      {
        v91 = *v89;
        v92 = *(_OWORD *)(v76 + 112);
        *(_OWORD *)(v75 + 121) = *(_OWORD *)(v76 + 121);
        *v88 = v91;
        *(_OWORD *)(v75 + 112) = v92;
      }
      else
      {
        v93 = *(_QWORD *)(v76 + 120);
        *(_QWORD *)(v75 + 120) = v93;
        *(_QWORD *)(v75 + 128) = *(_QWORD *)(v76 + 128);
        (**(void (***)(_OWORD *, __int128 *))(v93 - 8))(v88, v89);
        *(_BYTE *)(v75 + 136) = (v90 & 1) != 0;
      }
      v94 = (_OWORD *)(v75 + 144);
      v95 = (__int128 *)(v76 + 144);
      v96 = *(unsigned __int8 *)(v76 + 184);
      if (v96 == 255)
      {
        v97 = *v95;
        v98 = *(_OWORD *)(v76 + 160);
        *(_OWORD *)(v75 + 169) = *(_OWORD *)(v76 + 169);
        *v94 = v97;
        *(_OWORD *)(v75 + 160) = v98;
      }
      else
      {
        v99 = *(_QWORD *)(v76 + 168);
        *(_QWORD *)(v75 + 168) = v99;
        *(_QWORD *)(v75 + 176) = *(_QWORD *)(v76 + 176);
        (**(void (***)(_OWORD *, __int128 *))(v99 - 8))(v94, v95);
        *(_BYTE *)(v75 + 184) = (v96 & 1) != 0;
      }
      v100 = (_OWORD *)(v75 + 192);
      v101 = (__int128 *)(v76 + 192);
      v102 = *(unsigned __int8 *)(v76 + 232);
      if (v102 == 255)
      {
        v103 = *v101;
        v104 = *(_OWORD *)(v76 + 208);
        *(_OWORD *)(v75 + 217) = *(_OWORD *)(v76 + 217);
        *v100 = v103;
        *(_OWORD *)(v75 + 208) = v104;
      }
      else
      {
        v105 = *(_QWORD *)(v76 + 216);
        *(_QWORD *)(v75 + 216) = v105;
        *(_QWORD *)(v75 + 224) = *(_QWORD *)(v76 + 224);
        (**(void (***)(_OWORD *, __int128 *))(v105 - 8))(v100, v101);
        *(_BYTE *)(v75 + 232) = (v102 & 1) != 0;
      }
      v106 = (_OWORD *)(v75 + 240);
      v107 = (__int128 *)(v76 + 240);
      v108 = *(unsigned __int8 *)(v76 + 280);
      if (v108 == 255)
      {
        v109 = *v107;
        v110 = *(_OWORD *)(v76 + 256);
        *(_OWORD *)(v75 + 265) = *(_OWORD *)(v76 + 265);
        *v106 = v109;
        *(_OWORD *)(v75 + 256) = v110;
      }
      else
      {
        v111 = *(_QWORD *)(v76 + 264);
        *(_QWORD *)(v75 + 264) = v111;
        *(_QWORD *)(v75 + 272) = *(_QWORD *)(v76 + 272);
        (**(void (***)(_OWORD *, __int128 *))(v111 - 8))(v106, v107);
        v112 = (BOOL *)(v75 + 280);
        *v112 = (v108 & 1) != 0;
      }
      v80 = v135;
      *(_WORD *)(v75 + 281) = *(_WORD *)(v76 + 281);
      *(_BYTE *)(v75 + 283) = 1;
    }
    else
    {
      *(_QWORD *)v75 = *(_QWORD *)v76;
      *(_BYTE *)(v75 + 283) = 0;
      swift_retain();
      v80 = v135;
    }
    v113 = ~v80;
    v114 = (v75 + 291) & 0xFFFFFFFFFFFFFFF8;
    v115 = (v76 + 291) & 0xFFFFFFFFFFFFFFF8;
    v116 = *(_QWORD *)v115;
    v117 = *(_BYTE *)(v115 + 8);
    sub_2143A62F4(*(_QWORD *)v115, v117);
    *(_QWORD *)v114 = v116;
    *(_BYTE *)(v114 + 8) = v117;
    v118 = (v75 + 307) & 0xFFFFFFFFFFFFFFF8;
    v119 = (v76 + 307) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(v119 + 80) & 1) != 0)
    {
      *(_BYTE *)v118 = *(_BYTE *)v119;
      v120 = *(_QWORD *)(v119 + 8);
      *(_BYTE *)(v118 + 16) = *(_BYTE *)(v119 + 16);
      *(_QWORD *)(v118 + 8) = v120;
      v121 = *(_QWORD *)(v119 + 24);
      *(_BYTE *)(v118 + 32) = *(_BYTE *)(v119 + 32);
      *(_QWORD *)(v118 + 24) = v121;
      v122 = (_OWORD *)(v118 + 40);
      v123 = (__int128 *)(v119 + 40);
      v124 = *(_QWORD *)(v119 + 64);
      if (v124)
      {
        *(_QWORD *)(v118 + 64) = v124;
        *(_QWORD *)(v118 + 72) = *(_QWORD *)(v119 + 72);
        (**(void (***)(_OWORD *, __int128 *))(v124 - 8))(v122, v123);
      }
      else
      {
        v127 = *v123;
        v128 = *(_OWORD *)(v119 + 56);
        *(_QWORD *)(v118 + 72) = *(_QWORD *)(v119 + 72);
        *v122 = v127;
        *(_OWORD *)(v118 + 56) = v128;
      }
      v126 = v136;
      v125 = v137;
      *(_BYTE *)(v118 + 80) = 1;
    }
    else
    {
      *(_QWORD *)v118 = *(_QWORD *)v119;
      *(_BYTE *)(v118 + 80) = 0;
      swift_retain();
      v126 = v136;
      v125 = v137;
    }
    v129 = (v126 + v118) & v125;
    v130 = (v126 + v119) & v125;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v153 + 16))(v129, v130, v154);
    *(_QWORD *)((v138 + v129) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v138 + v130) & 0xFFFFFFFFFFFFF8);
    v131 = (v139 + v129) & v113;
    v132 = (v139 + v130) & v113;
    v133 = *(void (**)(unint64_t, unint64_t, uint64_t))(v156 + 16);
    swift_retain();
    v133(v131, v132, v158);
    return a1;
  }
  return (uint64_t *)v36;
}

uint64_t sub_21440DDFC(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if ((a3 & 1) != 0)
    return a4();
  else
    return swift_retain();
}

uint64_t sub_21440DE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) != 0)
    return sub_2141DD1BC(a1, a2, a3, a4, a5, a6, a7);
  else
    return swift_retain();
}

uint64_t sub_21440DE14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  v5 = sub_214423B94();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v46 = sub_214423C54();
  v8 = *(_QWORD *)(v46 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v45 = sub_2144240D4();
  v10 = *(_QWORD *)(v45 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = sub_214423F24();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v7 | v9 | v11 | v14 | 7;
  v16 = (v4 + v15) & ~v15;
  v17 = *(_QWORD *)(v6 + 64) + v9;
  v18 = *(_QWORD *)(v8 + 64) + v11;
  v19 = v14 + 8;
  v20 = *(_QWORD *)(v13 + 64)
      + ((v14 + 8 + ((*(_QWORD *)(v10 + 64) + 7 + ((v18 + (v17 & ~v9)) & ~v11)) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
  if (v20 + 1 > 8)
    v21 = v20 + 1;
  else
    v21 = 8;
  v22 = *(unsigned __int8 *)(v16 + v21);
  if (v22 >= 2)
  {
    if (v21 <= 3)
      v23 = v21;
    else
      v23 = 4;
    __asm { BR              X13 }
  }
  if (v22 == 1)
  {
    v43 = v12;
    v44 = *(_QWORD *)(v12 - 8);
    v24 = v5;
    v25 = ~v11;
    v42 = ~v14;
    v26 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v27 = *(_QWORD *)(v10 + 64) + 7;
    v28 = v17;
    v26(v16, v24);
    v29 = (v28 + v16) & ~v9;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, v46);
    v30 = (v18 + v29) & v25;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v30, v45);
    (*(void (**)(unint64_t, uint64_t))(v44 + 8))((v19 + ((v27 + v30) & 0xFFFFFFFFFFFFFFF8)) & v42, v43);
  }
  else
  {
    swift_release();
  }
  v31 = (v16 | 1) + v21;
  sub_21440E240(*(_QWORD *)((v31 + 7) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t (*)(void))sub_2141FA1C4);
  sub_21440E240(*(_QWORD *)((v31 + 31) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v31 + 31) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v31 + 31) & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t (*)(void))sub_2141FA1C4);
  sub_2143ABBF8(*(_QWORD *)((v31 + 55) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v31 + 55) & 0xFFFFFFFFFFFFFFF8) + 8), MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  sub_214407638(*(_QWORD *)((v31 + 71) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v31 + 71) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(((v31 + 71) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(((v31 + 71) & 0xFFFFFFFFFFFFFFF8) + 24), *(_BYTE *)(((v31 + 71) & 0xFFFFFFFFFFFFFFF8) + 32));
  v32 = (v31 + 111) & 0xFFFFFFFFFFFFFFF8;
  sub_21440E24C(*(_QWORD *)v32, *(_QWORD *)(v32 + 8), *(_QWORD *)(v32 + 16), *(_QWORD *)(v32 + 24), *(_QWORD *)(v32 + 32), *(_QWORD *)(v32 + 40), *(_QWORD *)(v32 + 48), *(_BYTE *)(v32 + 56));
  v33 = (unsigned __int8 *)((v31 + 175) & 0xFFFFFFFFFFFFFFF8);
  if ((v33[283] & 1) != 0)
  {
    if (v33[40] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v33);
    if (v33[88] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v33 + 48));
    if (v33[136] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v33 + 96));
    if (v33[184] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v33 + 144));
    if (v33[232] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v33 + 192));
    if (v33[280] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v33 + 240));
  }
  else
  {
    swift_release();
  }
  sub_2143ABBF8(*(_QWORD *)((unint64_t)(v33 + 291) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((unint64_t)(v33 + 291) & 0xFFFFFFFFFFFFFFF8) + 8), MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v34 = (unint64_t)(v33 + 307) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v34 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v34 + 64))
      _s6Charts15AnyChartContentVwxx_0(v34 + 40);
  }
  else
  {
    swift_release();
  }
  v35 = sub_2141D8BF8(&qword_254D6EC48);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(_DWORD *)(v36 + 80) & 0xF8 | 7;
  v38 = (v34 + v37 + 81) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v35);
  v39 = *(_QWORD *)(v36 + 64) + 7;
  swift_release();
  v40 = sub_2144247D0();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(((v39 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) + v38 + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80), v40);
}

uint64_t sub_21440E240(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if ((a3 & 1) != 0)
    return a4();
  else
    return swift_release();
}

uint64_t sub_21440E24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) != 0)
    return sub_214231FC0(a1, a2, a3, a4, a5, a6, a7);
  else
    return swift_release();
}

uint64_t sub_21440E258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  int v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 *v92;
  int v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _OWORD *v97;
  __int128 *v98;
  int v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  int v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 *v110;
  int v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  BOOL *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  __int128 *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v151 = sub_214423B94();
  v7 = *(_QWORD *)(v151 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v154 = sub_214423C54();
  v9 = *(_QWORD *)(v154 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v149 = sub_2144240D4();
  v11 = *(_QWORD *)(v149 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = sub_214423F24();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v8 | v10 | v12 | v15 | 7;
  v156 = a1;
  v17 = (_QWORD *)((v6 + v16 + a1) & ~v16);
  v18 = (_QWORD *)((v6 + v16 + a2) & ~v16);
  v19 = *(_QWORD *)(v7 + 64) + v10;
  v150 = v9;
  v20 = *(_QWORD *)(v9 + 64) + v12;
  v153 = v11;
  v21 = *(_QWORD *)(v11 + 64) + 7;
  v22 = v15 + 8;
  v23 = *(_QWORD *)(v14 + 64) + ((v15 + 8 + ((v21 + ((v20 + (v19 & ~v10)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v15);
  if (v23 + 1 > 8)
    v24 = v23 + 1;
  else
    v24 = 8;
  v25 = *((unsigned __int8 *)v18 + v24);
  if (v25 >= 2)
  {
    if (v24 <= 3)
      v26 = v24;
    else
      v26 = 4;
    __asm { BR              X13 }
  }
  if (v25 == 1)
  {
    v27 = ~v10;
    v28 = ~v12;
    v147 = ~v15;
    v148 = v13;
    v29 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16);
    v30 = v17;
    v31 = v18;
    v32 = v18;
    v33 = v17;
    v34 = v20;
    v35 = v151;
    v145 = v22;
    v146 = v14;
    v152 = *(_QWORD *)(v14 + 64);
    v29(v30, v31, v35);
    v36 = ((unint64_t)v33 + v19) & v27;
    v37 = ((unint64_t)v32 + v19) & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v150 + 16))(v36, v37, v154);
    v38 = (v34 + v36) & ~v12;
    v39 = v34 + v37;
    v17 = v33;
    v18 = v32;
    v40 = v39 & v28;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v153 + 16))(v38, v39 & v28, v149);
    v41 = (_QWORD *)((v21 + v38) & 0xFFFFFFFFFFFFFFF8);
    v42 = (_QWORD *)((v21 + v40) & 0xFFFFFFFFFFFFFFF8);
    *v41 = *v42;
    v43 = ((unint64_t)v41 + v145) & v147;
    v44 = ((unint64_t)v42 + v145) & v147;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v146 + 16))(v43, v44, v148);
    *(_BYTE *)(v43 + v152) = *(_BYTE *)(v44 + v152);
    v45 = 1;
  }
  else
  {
    *v17 = *v18;
    swift_retain();
    v45 = 0;
  }
  *((_BYTE *)v17 + v24) = v45;
  v46 = (char *)v17 + v24 + 1;
  v47 = (unint64_t)(v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (char *)v18 + v24 + 1;
  v49 = (unint64_t)(v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = *(_QWORD *)v49;
  v51 = *(_QWORD *)(v49 + 8);
  v52 = *(_BYTE *)(v49 + 16);
  sub_21440DDFC(*(_QWORD *)v49, v51, v52, (uint64_t (*)(void))sub_2141DD47C);
  *(_QWORD *)v47 = v50;
  *(_QWORD *)(v47 + 8) = v51;
  *(_BYTE *)(v47 + 16) = v52;
  v53 = (unint64_t)(v46 + 31) & 0xFFFFFFFFFFFFFFF8;
  v54 = (unint64_t)(v48 + 31) & 0xFFFFFFFFFFFFFFF8;
  v55 = *(_QWORD *)v54;
  v56 = *(_QWORD *)(v54 + 8);
  v57 = *(_BYTE *)(v54 + 16);
  sub_21440DDFC(*(_QWORD *)v54, v56, v57, (uint64_t (*)(void))sub_2141D975C);
  *(_QWORD *)v53 = v55;
  *(_QWORD *)(v53 + 8) = v56;
  *(_BYTE *)(v53 + 16) = v57;
  v58 = (unint64_t)(v46 + 55) & 0xFFFFFFFFFFFFFFF8;
  v59 = (unint64_t)(v48 + 55) & 0xFFFFFFFFFFFFFFF8;
  v60 = *(_QWORD *)v59;
  LOBYTE(v56) = *(_BYTE *)(v59 + 8);
  sub_2143A62F4(*(_QWORD *)v59, v56);
  *(_QWORD *)v58 = v60;
  *(_BYTE *)(v58 + 8) = v56;
  v61 = (unint64_t)(v46 + 71) & 0xFFFFFFFFFFFFFFF8;
  v62 = v48;
  v155 = v48;
  v63 = (unint64_t)(v48 + 71) & 0xFFFFFFFFFFFFFFF8;
  v64 = *(_QWORD *)v63;
  v65 = *(_QWORD *)(v63 + 8);
  v66 = *(_QWORD *)(v63 + 16);
  v67 = *(_QWORD *)(v63 + 24);
  v68 = *(_BYTE *)(v63 + 32);
  sub_2144071EC(*(_QWORD *)v63, v65, v66, v67, v68);
  *(_QWORD *)v61 = v64;
  *(_QWORD *)(v61 + 8) = v65;
  *(_QWORD *)(v61 + 16) = v66;
  *(_QWORD *)(v61 + 24) = v67;
  *(_BYTE *)(v61 + 32) = v68;
  v69 = (unint64_t)(v46 + 111) & 0xFFFFFFFFFFFFFFF8;
  v70 = (unint64_t)(v62 + 111) & 0xFFFFFFFFFFFFFFF8;
  v71 = *(_QWORD *)v70;
  v72 = *(_QWORD *)(v70 + 8);
  v73 = *(_QWORD *)(v70 + 16);
  v74 = *(_QWORD *)(v70 + 24);
  v75 = *(_QWORD *)(v70 + 32);
  v76 = *(_QWORD *)(v70 + 40);
  v77 = *(_QWORD *)(v70 + 48);
  v78 = *(_BYTE *)(v70 + 56);
  sub_21440DE08(*(_QWORD *)v70, v72, v73, v74, v75, v76, v77, v78);
  *(_QWORD *)v69 = v71;
  *(_QWORD *)(v69 + 8) = v72;
  *(_QWORD *)(v69 + 16) = v73;
  *(_QWORD *)(v69 + 24) = v74;
  *(_QWORD *)(v69 + 32) = v75;
  *(_QWORD *)(v69 + 40) = v76;
  *(_QWORD *)(v69 + 48) = v77;
  *(_BYTE *)(v69 + 56) = v78;
  v79 = (unint64_t)(v46 + 175) & 0xFFFFFFFFFFFFFFF8;
  v80 = (unint64_t)(v155 + 175) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v80 + 283) & 1) != 0)
  {
    v81 = *(unsigned __int8 *)(v80 + 40);
    if (v81 == 255)
    {
      v82 = *(_OWORD *)v80;
      v83 = *(_OWORD *)(v80 + 16);
      *(_OWORD *)(v79 + 25) = *(_OWORD *)(v80 + 25);
      *(_OWORD *)v79 = v82;
      *(_OWORD *)(v79 + 16) = v83;
    }
    else
    {
      v84 = *(_QWORD *)(v80 + 24);
      *(_QWORD *)(v79 + 24) = v84;
      *(_QWORD *)(v79 + 32) = *(_QWORD *)(v80 + 32);
      if ((v81 & 1) != 0)
      {
        (**(void (***)(unint64_t, unint64_t))(v84 - 8))((unint64_t)(v46 + 175) & 0xFFFFFFFFFFFFFFF8, v80);
        *(_BYTE *)(v79 + 40) = 1;
      }
      else
      {
        (**(void (***)(unint64_t, unint64_t))(v84 - 8))((unint64_t)(v46 + 175) & 0xFFFFFFFFFFFFFFF8, v80);
        *(_BYTE *)(v79 + 40) = 0;
      }
    }
    v85 = (_OWORD *)(v79 + 48);
    v86 = (__int128 *)(v80 + 48);
    v87 = *(unsigned __int8 *)(v80 + 88);
    if (v87 == 255)
    {
      v88 = *v86;
      v89 = *(_OWORD *)(v80 + 64);
      *(_OWORD *)(v79 + 73) = *(_OWORD *)(v80 + 73);
      *v85 = v88;
      *(_OWORD *)(v79 + 64) = v89;
    }
    else
    {
      v90 = *(_QWORD *)(v80 + 72);
      *(_QWORD *)(v79 + 72) = v90;
      *(_QWORD *)(v79 + 80) = *(_QWORD *)(v80 + 80);
      (**(void (***)(_OWORD *, __int128 *))(v90 - 8))(v85, v86);
      *(_BYTE *)(v79 + 88) = (v87 & 1) != 0;
    }
    v91 = (_OWORD *)(v79 + 96);
    v92 = (__int128 *)(v80 + 96);
    v93 = *(unsigned __int8 *)(v80 + 136);
    if (v93 == 255)
    {
      v94 = *v92;
      v95 = *(_OWORD *)(v80 + 112);
      *(_OWORD *)(v79 + 121) = *(_OWORD *)(v80 + 121);
      *v91 = v94;
      *(_OWORD *)(v79 + 112) = v95;
    }
    else
    {
      v96 = *(_QWORD *)(v80 + 120);
      *(_QWORD *)(v79 + 120) = v96;
      *(_QWORD *)(v79 + 128) = *(_QWORD *)(v80 + 128);
      (**(void (***)(_OWORD *, __int128 *))(v96 - 8))(v91, v92);
      *(_BYTE *)(v79 + 136) = (v93 & 1) != 0;
    }
    v97 = (_OWORD *)(v79 + 144);
    v98 = (__int128 *)(v80 + 144);
    v99 = *(unsigned __int8 *)(v80 + 184);
    if (v99 == 255)
    {
      v100 = *v98;
      v101 = *(_OWORD *)(v80 + 160);
      *(_OWORD *)(v79 + 169) = *(_OWORD *)(v80 + 169);
      *v97 = v100;
      *(_OWORD *)(v79 + 160) = v101;
    }
    else
    {
      v102 = *(_QWORD *)(v80 + 168);
      *(_QWORD *)(v79 + 168) = v102;
      *(_QWORD *)(v79 + 176) = *(_QWORD *)(v80 + 176);
      (**(void (***)(_OWORD *, __int128 *))(v102 - 8))(v97, v98);
      *(_BYTE *)(v79 + 184) = (v99 & 1) != 0;
    }
    v103 = (_OWORD *)(v79 + 192);
    v104 = (__int128 *)(v80 + 192);
    v105 = *(unsigned __int8 *)(v80 + 232);
    if (v105 == 255)
    {
      v106 = *v104;
      v107 = *(_OWORD *)(v80 + 208);
      *(_OWORD *)(v79 + 217) = *(_OWORD *)(v80 + 217);
      *v103 = v106;
      *(_OWORD *)(v79 + 208) = v107;
    }
    else
    {
      v108 = *(_QWORD *)(v80 + 216);
      *(_QWORD *)(v79 + 216) = v108;
      *(_QWORD *)(v79 + 224) = *(_QWORD *)(v80 + 224);
      (**(void (***)(_OWORD *, __int128 *))(v108 - 8))(v103, v104);
      *(_BYTE *)(v79 + 232) = (v105 & 1) != 0;
    }
    v109 = (_OWORD *)(v79 + 240);
    v110 = (__int128 *)(v80 + 240);
    v111 = *(unsigned __int8 *)(v80 + 280);
    if (v111 == 255)
    {
      v112 = *v110;
      v113 = *(_OWORD *)(v80 + 256);
      *(_OWORD *)(v79 + 265) = *(_OWORD *)(v80 + 265);
      *v109 = v112;
      *(_OWORD *)(v79 + 256) = v113;
    }
    else
    {
      v114 = *(_QWORD *)(v80 + 264);
      *(_QWORD *)(v79 + 264) = v114;
      *(_QWORD *)(v79 + 272) = *(_QWORD *)(v80 + 272);
      (**(void (***)(_OWORD *, __int128 *))(v114 - 8))(v109, v110);
      v115 = (BOOL *)(v79 + 280);
      *v115 = (v111 & 1) != 0;
    }
    *(_WORD *)(v79 + 281) = *(_WORD *)(v80 + 281);
    *(_BYTE *)(v79 + 283) = 1;
  }
  else
  {
    *(_QWORD *)v79 = *(_QWORD *)v80;
    *(_BYTE *)(v79 + 283) = 0;
    swift_retain();
  }
  v116 = (v79 + 291) & 0xFFFFFFFFFFFFFFF8;
  v117 = (v80 + 291) & 0xFFFFFFFFFFFFFFF8;
  v118 = *(_QWORD *)v117;
  v119 = *(_BYTE *)(v117 + 8);
  sub_2143A62F4(*(_QWORD *)v117, v119);
  *(_QWORD *)v116 = v118;
  *(_BYTE *)(v116 + 8) = v119;
  v120 = (v79 + 307) & 0xFFFFFFFFFFFFFFF8;
  v121 = (v80 + 307) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v121 + 80) & 1) != 0)
  {
    *(_BYTE *)v120 = *(_BYTE *)v121;
    v122 = *(_QWORD *)(v121 + 8);
    *(_BYTE *)(v120 + 16) = *(_BYTE *)(v121 + 16);
    *(_QWORD *)(v120 + 8) = v122;
    v123 = *(_QWORD *)(v121 + 24);
    *(_BYTE *)(v120 + 32) = *(_BYTE *)(v121 + 32);
    *(_QWORD *)(v120 + 24) = v123;
    v124 = (_OWORD *)(v120 + 40);
    v125 = (__int128 *)(v121 + 40);
    v126 = *(_QWORD *)(v121 + 64);
    if (v126)
    {
      *(_QWORD *)(v120 + 64) = v126;
      *(_QWORD *)(v120 + 72) = *(_QWORD *)(v121 + 72);
      (**(void (***)(_OWORD *, __int128 *))(v126 - 8))(v124, v125);
    }
    else
    {
      v127 = *v125;
      v128 = *(_OWORD *)(v121 + 56);
      *(_QWORD *)(v120 + 72) = *(_QWORD *)(v121 + 72);
      *v124 = v127;
      *(_OWORD *)(v120 + 56) = v128;
    }
    *(_BYTE *)(v120 + 80) = 1;
  }
  else
  {
    *(_QWORD *)v120 = *(_QWORD *)v121;
    *(_BYTE *)(v120 + 80) = 0;
    swift_retain();
  }
  v129 = sub_2141D8BF8(&qword_254D6EC48);
  v130 = *(_QWORD *)(v129 - 8);
  v131 = *(_DWORD *)(v130 + 80) & 0xF8 | 7;
  v132 = v121 + v131;
  v133 = (v120 + v131 + 81) & ~v131;
  v134 = (v132 + 81) & ~v131;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 16))(v133, v134, v129);
  v135 = *(_QWORD *)(v130 + 64) + 7;
  *(_QWORD *)((v135 + v133) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v135 + v134) & 0xFFFFFFFFFFFFF8);
  v136 = v135 & 0xFFFFFFFFFFFFFFF8;
  v137 = sub_2144247D0();
  v138 = *(_QWORD *)(v137 - 8);
  v139 = *(unsigned __int8 *)(v138 + 80);
  v140 = v136 + v139 + 8;
  v141 = (v140 + v133) & ~v139;
  v142 = (v140 + v134) & ~v139;
  v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 16);
  swift_retain();
  v143(v141, v142, v137);
  return v156;
}

uint64_t sub_21440EA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _OWORD *v107;
  __int128 *v108;
  int v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 *v114;
  int v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 *v120;
  int v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  int v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _OWORD *v131;
  __int128 *v132;
  int v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  BOOL *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  __int128 *v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v171 = sub_214423B94();
  v7 = *(_QWORD *)(v171 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v172 = sub_214423C54();
  v9 = *(_QWORD *)(v172 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v173 = sub_2144240D4();
  v11 = *(_QWORD *)(v173 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = sub_214423F24();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v8 | v10 | v12 | v15 | 7;
  v17 = v6 + v16;
  v174 = a1;
  v18 = (_QWORD *)((v6 + v16 + a1) & ~v16);
  v19 = (_QWORD *)((v17 + a2) & ~v16);
  v175 = *(_QWORD *)(v7 + 64);
  if (v18 == v19)
  {
    v24 = *(_QWORD *)(v14 + 64)
        + ((v15
          + ((*(_QWORD *)(v11 + 64) + ((*(_QWORD *)(v9 + 64) + v12 + ((v175 + v10) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 8) & ~v15);
    if (v24 + 1 > 8)
      v21 = v24 + 1;
    else
      v21 = 8;
  }
  else
  {
    v166 = *(_QWORD *)(v9 + 64) + v12;
    v167 = *(_QWORD *)(v11 + 64) + 7;
    v168 = v15 + 8;
    v169 = *(_QWORD *)(v13 - 8);
    v164 = *(_QWORD *)(v14 + 64);
    v20 = v164 + ((v15 + 8 + ((v167 + ((v166 + ((v175 + v10) & ~v10)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v15);
    if ((unint64_t)(v20 + 1) > 8)
      v21 = v20 + 1;
    else
      v21 = 8;
    v22 = *((unsigned __int8 *)v18 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X13 }
    }
    v165 = v19;
    v170 = v13;
    v25 = ~v12;
    v26 = ~v15;
    v163 = v7;
    if (v22 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v18, v171);
      v162 = v26;
      v27 = ~v10;
      v28 = ((unint64_t)v18 + v10 + v175) & ~v10;
      v29 = v9;
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v28, v172);
      v30 = v25;
      v31 = (v166 + v28) & v25;
      v32 = v11;
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v31, v173);
      v33 = v167 + v31;
      v26 = v162;
      (*(void (**)(unint64_t, uint64_t))(v169 + 8))((v168 + (v33 & 0xFFFFFFFFFFFFFFF8)) & v162, v170);
    }
    else
    {
      v27 = ~v10;
      v30 = v25;
      v29 = v9;
      v32 = v11;
      swift_release();
    }
    v19 = v165;
    v34 = *((unsigned __int8 *)v165 + v21);
    if (v34 >= 2)
    {
      if (v21 <= 3)
        v35 = v21;
      else
        v35 = 4;
      __asm { BR              X12 }
    }
    v36 = v32;
    v37 = v30;
    if (v34 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v163 + 16))(v18, v165, v171);
      v38 = ((unint64_t)v18 + v10 + v175) & v27;
      v39 = (unint64_t)v165 + v10 + v175;
      v40 = v26;
      v41 = v39 & v27;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))(v38, v39 & v27, v172);
      v42 = (v166 + v38) & v37;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 16))(v42, (v166 + v41) & v37, v173);
      v43 = (_QWORD *)((v167 + v42) & 0xFFFFFFFFFFFFFFF8);
      v44 = (_QWORD *)((v167 + ((v166 + v41) & v37)) & 0xFFFFFFFFFFFFFFF8);
      *v43 = *v44;
      v45 = ((unint64_t)v43 + v168) & v40;
      v46 = ((unint64_t)v44 + v168) & v40;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v169 + 16))(v45, v46, v170);
      *(_BYTE *)(v45 + v164) = *(_BYTE *)(v46 + v164);
      *((_BYTE *)v18 + v21) = 1;
    }
    else
    {
      *v18 = *v165;
      *((_BYTE *)v18 + v21) = 0;
      swift_retain();
    }
  }
  v47 = (char *)v18 + v21 + 1;
  v48 = (unint64_t)(v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = (char *)v19 + v21 + 1;
  v50 = (unint64_t)(v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)v50;
  v52 = *(_QWORD *)(v50 + 8);
  v53 = *(_BYTE *)(v50 + 16);
  sub_21440DDFC(*(_QWORD *)v50, v52, v53, (uint64_t (*)(void))sub_2141DD47C);
  v54 = *(_QWORD *)v48;
  v55 = *(_QWORD *)(v48 + 8);
  v56 = *(_BYTE *)(v48 + 16);
  *(_QWORD *)v48 = v51;
  *(_QWORD *)(v48 + 8) = v52;
  *(_BYTE *)(v48 + 16) = v53;
  sub_21440E240(v54, v55, v56, (uint64_t (*)(void))sub_2141FA1C4);
  v57 = (unint64_t)(v47 + 31) & 0xFFFFFFFFFFFFFFF8;
  v58 = (unint64_t)(v49 + 31) & 0xFFFFFFFFFFFFFFF8;
  v59 = *(_QWORD *)v58;
  v60 = *(_QWORD *)(v58 + 8);
  v61 = *(_BYTE *)(v58 + 16);
  sub_21440DDFC(*(_QWORD *)v58, v60, v61, (uint64_t (*)(void))sub_2141D975C);
  v62 = *(_QWORD *)v57;
  v63 = *(_QWORD *)(v57 + 8);
  v64 = *(_BYTE *)(v57 + 16);
  *(_QWORD *)v57 = v59;
  *(_QWORD *)(v57 + 8) = v60;
  *(_BYTE *)(v57 + 16) = v61;
  sub_21440E240(v62, v63, v64, (uint64_t (*)(void))sub_2141FA1C4);
  v65 = (unint64_t)(v47 + 55) & 0xFFFFFFFFFFFFFFF8;
  v66 = (unint64_t)(v49 + 55) & 0xFFFFFFFFFFFFFFF8;
  v67 = *(_QWORD *)v66;
  LOBYTE(v60) = *(_BYTE *)(v66 + 8);
  sub_2143A62F4(*(_QWORD *)v66, v60);
  v68 = *(_QWORD *)v65;
  v69 = *(_BYTE *)(v65 + 8);
  *(_QWORD *)v65 = v67;
  *(_BYTE *)(v65 + 8) = v60;
  sub_2143ABBF8(v68, v69, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v70 = (unint64_t)(v47 + 71) & 0xFFFFFFFFFFFFFFF8;
  v71 = v49;
  v176 = v49;
  v72 = (unint64_t)(v49 + 71) & 0xFFFFFFFFFFFFFFF8;
  v73 = *(_QWORD *)v72;
  v74 = *(_QWORD *)(v72 + 8);
  v75 = *(_QWORD *)(v72 + 16);
  v76 = *(_QWORD *)(v72 + 24);
  v77 = *(_BYTE *)(v72 + 32);
  sub_2144071EC(*(_QWORD *)v72, v74, v75, v76, v77);
  v78 = *(_QWORD *)v70;
  v79 = *(_QWORD *)(v70 + 8);
  v80 = *(_QWORD *)(v70 + 16);
  v81 = *(_QWORD *)(v70 + 24);
  v82 = *(_BYTE *)(v70 + 32);
  *(_QWORD *)v70 = v73;
  *(_QWORD *)(v70 + 8) = v74;
  *(_QWORD *)(v70 + 16) = v75;
  *(_QWORD *)(v70 + 24) = v76;
  *(_BYTE *)(v70 + 32) = v77;
  sub_214407638(v78, v79, v80, v81, v82);
  v83 = (unint64_t)(v47 + 111) & 0xFFFFFFFFFFFFFFF8;
  v84 = (unint64_t)(v71 + 111) & 0xFFFFFFFFFFFFFFF8;
  v85 = *(_QWORD *)v84;
  v86 = *(_QWORD *)(v84 + 8);
  v87 = *(_QWORD *)(v84 + 16);
  v88 = *(_QWORD *)(v84 + 24);
  v89 = *(_QWORD *)(v84 + 32);
  v90 = *(_QWORD *)(v84 + 40);
  v91 = *(_QWORD *)(v84 + 48);
  v92 = *(_BYTE *)(v84 + 56);
  sub_21440DE08(*(_QWORD *)v84, v86, v87, v88, v89, v90, v91, v92);
  v93 = *(_QWORD *)v83;
  v94 = *(_QWORD *)(v83 + 8);
  v95 = *(_QWORD *)(v83 + 16);
  v96 = *(_QWORD *)(v83 + 24);
  v97 = *(_QWORD *)(v83 + 32);
  v98 = *(_QWORD *)(v83 + 40);
  v99 = *(_QWORD *)(v83 + 48);
  v100 = *(_BYTE *)(v83 + 56);
  *(_QWORD *)v83 = v85;
  *(_QWORD *)(v83 + 8) = v86;
  *(_QWORD *)(v83 + 16) = v87;
  *(_QWORD *)(v83 + 24) = v88;
  *(_QWORD *)(v83 + 32) = v89;
  *(_QWORD *)(v83 + 40) = v90;
  *(_QWORD *)(v83 + 48) = v91;
  *(_BYTE *)(v83 + 56) = v92;
  sub_21440E24C(v93, v94, v95, v96, v97, v98, v99, v100);
  v101 = (unint64_t)(v47 + 175) & 0xFFFFFFFFFFFFFFF8;
  v102 = (unint64_t)(v176 + 175) & 0xFFFFFFFFFFFFFFF8;
  if (v101 != v102)
  {
    sub_2141E0750((unint64_t)(v47 + 175) & 0xFFFFFFFFFFFFFFF8, &qword_253F15AE8);
    if ((*(_BYTE *)(v102 + 283) & 1) != 0)
    {
      v103 = *(unsigned __int8 *)(v102 + 40);
      if (v103 == 255)
      {
        v104 = *(_OWORD *)v102;
        v105 = *(_OWORD *)(v102 + 16);
        *(_OWORD *)(v101 + 25) = *(_OWORD *)(v102 + 25);
        *(_OWORD *)v101 = v104;
        *(_OWORD *)(v101 + 16) = v105;
      }
      else
      {
        v106 = *(_QWORD *)(v102 + 24);
        *(_QWORD *)(v101 + 24) = v106;
        *(_QWORD *)(v101 + 32) = *(_QWORD *)(v102 + 32);
        if ((v103 & 1) != 0)
        {
          (**(void (***)(unint64_t, unint64_t))(v106 - 8))((unint64_t)(v47 + 175) & 0xFFFFFFFFFFFFFFF8, v102);
          *(_BYTE *)(v101 + 40) = 1;
        }
        else
        {
          (**(void (***)(unint64_t, unint64_t))(v106 - 8))((unint64_t)(v47 + 175) & 0xFFFFFFFFFFFFFFF8, v102);
          *(_BYTE *)(v101 + 40) = 0;
        }
      }
      v107 = (_OWORD *)(v101 + 48);
      v108 = (__int128 *)(v102 + 48);
      v109 = *(unsigned __int8 *)(v102 + 88);
      if (v109 == 255)
      {
        v110 = *v108;
        v111 = *(_OWORD *)(v102 + 64);
        *(_OWORD *)(v101 + 73) = *(_OWORD *)(v102 + 73);
        *v107 = v110;
        *(_OWORD *)(v101 + 64) = v111;
      }
      else
      {
        v112 = *(_QWORD *)(v102 + 72);
        *(_QWORD *)(v101 + 72) = v112;
        *(_QWORD *)(v101 + 80) = *(_QWORD *)(v102 + 80);
        (**(void (***)(_OWORD *, __int128 *))(v112 - 8))(v107, v108);
        *(_BYTE *)(v101 + 88) = (v109 & 1) != 0;
      }
      v113 = (_OWORD *)(v101 + 96);
      v114 = (__int128 *)(v102 + 96);
      v115 = *(unsigned __int8 *)(v102 + 136);
      if (v115 == 255)
      {
        v116 = *v114;
        v117 = *(_OWORD *)(v102 + 112);
        *(_OWORD *)(v101 + 121) = *(_OWORD *)(v102 + 121);
        *v113 = v116;
        *(_OWORD *)(v101 + 112) = v117;
      }
      else
      {
        v118 = *(_QWORD *)(v102 + 120);
        *(_QWORD *)(v101 + 120) = v118;
        *(_QWORD *)(v101 + 128) = *(_QWORD *)(v102 + 128);
        (**(void (***)(_OWORD *, __int128 *))(v118 - 8))(v113, v114);
        *(_BYTE *)(v101 + 136) = (v115 & 1) != 0;
      }
      v119 = (_OWORD *)(v101 + 144);
      v120 = (__int128 *)(v102 + 144);
      v121 = *(unsigned __int8 *)(v102 + 184);
      if (v121 == 255)
      {
        v122 = *v120;
        v123 = *(_OWORD *)(v102 + 160);
        *(_OWORD *)(v101 + 169) = *(_OWORD *)(v102 + 169);
        *v119 = v122;
        *(_OWORD *)(v101 + 160) = v123;
      }
      else
      {
        v124 = *(_QWORD *)(v102 + 168);
        *(_QWORD *)(v101 + 168) = v124;
        *(_QWORD *)(v101 + 176) = *(_QWORD *)(v102 + 176);
        (**(void (***)(_OWORD *, __int128 *))(v124 - 8))(v119, v120);
        *(_BYTE *)(v101 + 184) = (v121 & 1) != 0;
      }
      v125 = (_OWORD *)(v101 + 192);
      v126 = (__int128 *)(v102 + 192);
      v127 = *(unsigned __int8 *)(v102 + 232);
      if (v127 == 255)
      {
        v128 = *v126;
        v129 = *(_OWORD *)(v102 + 208);
        *(_OWORD *)(v101 + 217) = *(_OWORD *)(v102 + 217);
        *v125 = v128;
        *(_OWORD *)(v101 + 208) = v129;
      }
      else
      {
        v130 = *(_QWORD *)(v102 + 216);
        *(_QWORD *)(v101 + 216) = v130;
        *(_QWORD *)(v101 + 224) = *(_QWORD *)(v102 + 224);
        (**(void (***)(_OWORD *, __int128 *))(v130 - 8))(v125, v126);
        *(_BYTE *)(v101 + 232) = (v127 & 1) != 0;
      }
      v131 = (_OWORD *)(v101 + 240);
      v132 = (__int128 *)(v102 + 240);
      v133 = *(unsigned __int8 *)(v102 + 280);
      if (v133 == 255)
      {
        v134 = *v132;
        v135 = *(_OWORD *)(v102 + 256);
        *(_OWORD *)(v101 + 265) = *(_OWORD *)(v102 + 265);
        *v131 = v134;
        *(_OWORD *)(v101 + 256) = v135;
      }
      else
      {
        v136 = *(_QWORD *)(v102 + 264);
        *(_QWORD *)(v101 + 264) = v136;
        *(_QWORD *)(v101 + 272) = *(_QWORD *)(v102 + 272);
        (**(void (***)(_OWORD *, __int128 *))(v136 - 8))(v131, v132);
        v137 = (BOOL *)(v101 + 280);
        *v137 = (v133 & 1) != 0;
      }
      *(_WORD *)(v101 + 281) = *(_WORD *)(v102 + 281);
      *(_BYTE *)(v101 + 283) = 1;
    }
    else
    {
      *(_QWORD *)v101 = *(_QWORD *)v102;
      *(_BYTE *)(v101 + 283) = 0;
      swift_retain();
    }
  }
  v138 = (v101 + 291) & 0xFFFFFFFFFFFFFFF8;
  v139 = (v102 + 291) & 0xFFFFFFFFFFFFFFF8;
  v140 = *(_QWORD *)v139;
  v141 = *(_BYTE *)(v139 + 8);
  sub_2143A62F4(*(_QWORD *)v139, v141);
  v142 = *(_QWORD *)v138;
  v143 = *(_BYTE *)(v138 + 8);
  *(_QWORD *)v138 = v140;
  *(_BYTE *)(v138 + 8) = v141;
  sub_2143ABBF8(v142, v143, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v144 = (v101 + 307) & 0xFFFFFFFFFFFFFFF8;
  v145 = (v102 + 307) & 0xFFFFFFFFFFFFFFF8;
  if (v144 != v145)
  {
    sub_2141E0750(v144, &qword_253F15AF8);
    if ((*(_BYTE *)(v145 + 80) & 1) != 0)
    {
      *(_BYTE *)v144 = *(_BYTE *)v145;
      v146 = *(_QWORD *)(v145 + 8);
      *(_BYTE *)(v144 + 16) = *(_BYTE *)(v145 + 16);
      *(_QWORD *)(v144 + 8) = v146;
      v147 = *(_QWORD *)(v145 + 24);
      *(_BYTE *)(v144 + 32) = *(_BYTE *)(v145 + 32);
      *(_QWORD *)(v144 + 24) = v147;
      v148 = (_OWORD *)(v144 + 40);
      v149 = (__int128 *)(v145 + 40);
      v150 = *(_QWORD *)(v145 + 64);
      if (v150)
      {
        *(_QWORD *)(v144 + 64) = v150;
        *(_QWORD *)(v144 + 72) = *(_QWORD *)(v145 + 72);
        (**(void (***)(_OWORD *, __int128 *))(v150 - 8))(v148, v149);
      }
      else
      {
        v151 = *v149;
        v152 = *(_OWORD *)(v145 + 56);
        *(_QWORD *)(v144 + 72) = *(_QWORD *)(v145 + 72);
        *v148 = v151;
        *(_OWORD *)(v144 + 56) = v152;
      }
      *(_BYTE *)(v144 + 80) = 1;
    }
    else
    {
      *(_QWORD *)v144 = *(_QWORD *)v145;
      *(_BYTE *)(v144 + 80) = 0;
      swift_retain();
    }
  }
  v153 = sub_2141D8BF8(&qword_254D6EC48);
  v154 = *(_QWORD *)(v153 - 8);
  v155 = *(_DWORD *)(v154 + 80) & 0xF8 | 7;
  v156 = (v144 + v155 + 81) & ~v155;
  v157 = (v145 + v155 + 81) & ~v155;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v154 + 24))(v156, v157, v153);
  v158 = *(_QWORD *)(v154 + 64) + 7;
  *(_QWORD *)((v158 + v156) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v158 + v157) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v159 = sub_2144247D0();
  v160 = *(_QWORD *)(v159 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v160 + 24))(((v158 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v160 + 80) + 8 + v156) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80), ((v158 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v160 + 80) + 8 + v157) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80), v159);
  return v174;
}

uint64_t sub_21440F4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  const void *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v86 = sub_214423B94();
  v7 = *(_QWORD *)(v86 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v90 = sub_214423C54();
  v9 = *(_QWORD *)(v90 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = sub_2144240D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = sub_214423F24();
  v15 = v7;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v8 | v10 | v13 | v17 | 7;
  v91 = a1;
  v19 = (_QWORD *)((v6 + v18 + a1) & ~v18);
  v20 = (_QWORD *)((v6 + v18 + a2) & ~v18);
  v21 = *(_QWORD *)(v7 + 64) + v10;
  v88 = v9;
  v89 = v12;
  v22 = *(_QWORD *)(v9 + 64) + v13;
  v23 = *(_QWORD *)(v12 + 64) + 7;
  v24 = v17 + 8;
  v25 = *(_QWORD *)(v16 + 64) + ((v17 + 8 + ((v23 + ((v22 + (v21 & ~v10)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)) & ~v17);
  if (v25 + 1 > 8)
    v26 = v25 + 1;
  else
    v26 = 8;
  v27 = *((unsigned __int8 *)v20 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X13 }
  }
  if (v27 == 1)
  {
    v29 = ~v10;
    v82 = *(_QWORD *)(v14 - 8);
    v83 = ~v17;
    v84 = *(_QWORD *)(v16 + 64);
    v85 = v14;
    v30 = v86;
    v87 = v19;
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 32))(v19, v20, v30);
    v31 = ((unint64_t)v87 + v21) & v29;
    v32 = ((unint64_t)v20 + v21) & v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 32))(v31, v32, v90);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v89 + 32))((v22 + v31) & ~v13, (v22 + v32) & ~v13, v11);
    v33 = (_QWORD *)((v23 + ((v22 + v31) & ~v13)) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)((v23 + ((v22 + v32) & ~v13)) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v35 = ((unint64_t)v33 + v24) & v83;
    v36 = ((unint64_t)v34 + v24) & v83;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v82 + 32))(v35, v36, v85);
    v19 = v87;
    *(_BYTE *)(v35 + v84) = *(_BYTE *)(v36 + v84);
    v37 = 1;
  }
  else
  {
    v37 = 0;
    *v19 = *v20;
  }
  *((_BYTE *)v19 + v26) = v37;
  v38 = (char *)v19 + v26 + 1;
  v39 = (char *)v20 + v26 + 1;
  v40 = (unint64_t)(v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = (unint64_t)(v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_OWORD *)v41;
  *(_BYTE *)(v40 + 16) = *(_BYTE *)(v41 + 16);
  *(_OWORD *)v40 = v42;
  v43 = (unint64_t)(v38 + 31) & 0xFFFFFFFFFFFFFFF8;
  v44 = (unint64_t)(v39 + 31) & 0xFFFFFFFFFFFFFFF8;
  v45 = *(_OWORD *)v44;
  *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
  *(_OWORD *)v43 = v45;
  v46 = (unint64_t)(v38 + 55) & 0xFFFFFFFFFFFFFFF8;
  v47 = (unint64_t)(v39 + 55) & 0xFFFFFFFFFFFFFFF8;
  v48 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = (unint64_t)(v38 + 71) & 0xFFFFFFFFFFFFFFF8;
  v50 = (unint64_t)(v39 + 71) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_OWORD *)v50;
  v52 = *(_OWORD *)(v50 + 16);
  *(_BYTE *)(v49 + 32) = *(_BYTE *)(v50 + 32);
  *(_OWORD *)v49 = v51;
  *(_OWORD *)(v49 + 16) = v52;
  v53 = (_OWORD *)((unint64_t)(v38 + 111) & 0xFFFFFFFFFFFFFFF8);
  v54 = (__int128 *)((unint64_t)(v39 + 111) & 0xFFFFFFFFFFFFFFF8);
  v55 = *v54;
  v56 = v54[1];
  v57 = v54[2];
  *(_OWORD *)((char *)v53 + 41) = *(__int128 *)((char *)v54 + 41);
  v53[1] = v56;
  v53[2] = v57;
  *v53 = v55;
  v58 = (void *)((unint64_t)(v38 + 175) & 0xFFFFFFFFFFFFFFF8);
  v59 = (const void *)((unint64_t)(v39 + 175) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v58, v59, 0x11CuLL);
  v60 = ((unint64_t)v58 + 291) & 0xFFFFFFFFFFFFFFF8;
  v61 = ((unint64_t)v59 + 291) & 0xFFFFFFFFFFFFFFF8;
  v62 = *(_QWORD *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  *(_QWORD *)v60 = v62;
  v63 = ((unint64_t)v58 + 307) & 0xFFFFFFFFFFFFFFF8;
  v64 = ((unint64_t)v59 + 307) & 0xFFFFFFFFFFFFFFF8;
  v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  v67 = *(_OWORD *)(v64 + 48);
  v66 = *(_OWORD *)(v64 + 64);
  v68 = *(_OWORD *)(v64 + 32);
  *(_BYTE *)(v63 + 80) = *(_BYTE *)(v64 + 80);
  *(_OWORD *)(v63 + 48) = v67;
  *(_OWORD *)(v63 + 64) = v66;
  *(_OWORD *)(v63 + 32) = v68;
  v69 = sub_2141D8BF8(&qword_254D6EC48);
  v70 = *(_QWORD *)(v69 - 8);
  v71 = *(_DWORD *)(v70 + 80) & 0xF8;
  v72 = v71 + 88;
  v73 = v71 + 88 + v63;
  v74 = ~v71 & 0xFFFFFFFFFFFFFFF8;
  v75 = v73 & v74;
  v76 = (v72 + v64) & v74;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v70 + 32))(v73 & v74, v76, v69);
  v77 = *(_QWORD *)(v70 + 64) + 7;
  *(_QWORD *)((v77 + v75) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v77 + v76) & 0xFFFFFFFFFFFFF8);
  v78 = v77 & 0xFFFFFFFFFFFFFFF8;
  v79 = sub_2144247D0();
  v80 = *(_QWORD *)(v79 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v80 + 32))((v78 + *(unsigned __int8 *)(v80 + 80) + 8 + v75) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80), (v78 + *(unsigned __int8 *)(v80 + 80) + 8 + v76) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80), v79);
  return v91;
}

uint64_t sub_21440F94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v117 = sub_214423B94();
  v7 = *(_QWORD *)(v117 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v118 = sub_214423C54();
  v9 = *(_QWORD *)(v118 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v119 = sub_2144240D4();
  v11 = *(_QWORD *)(v119 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = sub_214423F24();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v8 | v10 | v12 | v15 | 7;
  v17 = v6 + v16;
  v120 = a1;
  v18 = (_QWORD *)((v6 + v16 + a1) & ~v16);
  v19 = (_QWORD *)((v17 + a2) & ~v16);
  v122 = *(_QWORD *)(v7 + 64);
  if (v18 == v19)
  {
    v24 = *(_QWORD *)(v14 + 64)
        + ((v15
          + ((*(_QWORD *)(v11 + 64) + ((*(_QWORD *)(v9 + 64) + v12 + ((v122 + v10) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 8) & ~v15);
    if (v24 + 1 > 8)
      v21 = v24 + 1;
    else
      v21 = 8;
  }
  else
  {
    v112 = *(_QWORD *)(v9 + 64) + v12;
    v113 = *(_QWORD *)(v11 + 64) + 7;
    v114 = v15 + 8;
    v115 = *(_QWORD *)(v13 - 8);
    v111 = *(_QWORD *)(v14 + 64);
    v20 = v111 + ((v15 + 8 + ((v113 + ((v112 + ((v122 + v10) & ~v10)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v15);
    if ((unint64_t)(v20 + 1) > 8)
      v21 = v20 + 1;
    else
      v21 = 8;
    v22 = *((unsigned __int8 *)v18 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X13 }
    }
    v121 = v19;
    v116 = v13;
    v25 = ~v12;
    v26 = ~v15;
    v110 = v7;
    if (v22 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v18, v117);
      v109 = v26;
      v27 = ~v10;
      v28 = ((unint64_t)v18 + v10 + v122) & ~v10;
      v29 = v9;
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v28, v118);
      v30 = v25;
      v31 = (v112 + v28) & v25;
      v32 = v11;
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v31, v119);
      v33 = v113 + v31;
      v26 = v109;
      (*(void (**)(unint64_t, uint64_t))(v115 + 8))((v114 + (v33 & 0xFFFFFFFFFFFFFFF8)) & v109, v116);
    }
    else
    {
      v27 = ~v10;
      v30 = v25;
      v29 = v9;
      v32 = v11;
      swift_release();
    }
    v19 = v121;
    v34 = *((unsigned __int8 *)v121 + v21);
    if (v34 >= 2)
    {
      if (v21 <= 3)
        v35 = v21;
      else
        v35 = 4;
      __asm { BR              X12 }
    }
    if (v34 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v110 + 32))(v18, v121, v117);
      v36 = ((unint64_t)v18 + v10 + v122) & v27;
      v37 = (unint64_t)v121 + v10 + v122;
      v38 = v26;
      v39 = v37 & v27;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 32))(v36, v37 & v27, v118);
      v40 = (v112 + v36) & v30;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 32))(v40, (v112 + v39) & v30, v119);
      v41 = (_QWORD *)((v113 + v40) & 0xFFFFFFFFFFFFFFF8);
      v42 = (_QWORD *)((v113 + ((v112 + v39) & v30)) & 0xFFFFFFFFFFFFFFF8);
      *v41 = *v42;
      v43 = ((unint64_t)v41 + v114) & v38;
      v44 = ((unint64_t)v42 + v114) & v38;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v115 + 32))(v43, v44, v116);
      v19 = v121;
      *(_BYTE *)(v43 + v111) = *(_BYTE *)(v44 + v111);
      *((_BYTE *)v18 + v21) = 1;
    }
    else
    {
      *v18 = *v121;
      *((_BYTE *)v18 + v21) = 0;
    }
  }
  v45 = (char *)v18 + v21 + 1;
  v46 = (char *)v19 + v21 + 1;
  v47 = (unint64_t)(v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (unint64_t)(v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = *(_BYTE *)(v48 + 16);
  v50 = *(_QWORD *)v47;
  v51 = *(_QWORD *)(v47 + 8);
  v52 = *(_BYTE *)(v47 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_BYTE *)(v47 + 16) = v49;
  sub_21440E240(v50, v51, v52, (uint64_t (*)(void))sub_2141FA1C4);
  v53 = (unint64_t)(v45 + 31) & 0xFFFFFFFFFFFFFFF8;
  v54 = (unint64_t)(v46 + 31) & 0xFFFFFFFFFFFFFFF8;
  v55 = *(_BYTE *)(v54 + 16);
  v56 = *(_QWORD *)v53;
  v57 = *(_QWORD *)(v53 + 8);
  v58 = *(_BYTE *)(v53 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_BYTE *)(v53 + 16) = v55;
  sub_21440E240(v56, v57, v58, (uint64_t (*)(void))sub_2141FA1C4);
  v59 = (unint64_t)(v45 + 55) & 0xFFFFFFFFFFFFFFF8;
  v60 = (unint64_t)(v46 + 55) & 0xFFFFFFFFFFFFFFF8;
  v61 = *(_QWORD *)v60;
  LOBYTE(v60) = *(_BYTE *)(v60 + 8);
  v62 = *(_QWORD *)v59;
  v63 = *(_BYTE *)(v59 + 8);
  *(_QWORD *)v59 = v61;
  *(_BYTE *)(v59 + 8) = v60;
  sub_2143ABBF8(v62, v63, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v64 = (unint64_t)(v46 + 71) & 0xFFFFFFFFFFFFFFF8;
  v65 = *(_BYTE *)(v64 + 32);
  v66 = (unint64_t)(v45 + 71) & 0xFFFFFFFFFFFFFFF8;
  v67 = *(_QWORD *)v66;
  v68 = *(_QWORD *)(v66 + 8);
  v69 = *(_QWORD *)(v66 + 16);
  v70 = *(_QWORD *)(v66 + 24);
  v71 = *(_BYTE *)(v66 + 32);
  v72 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v66 = *(_OWORD *)v64;
  *(_OWORD *)(v66 + 16) = v72;
  *(_BYTE *)(v66 + 32) = v65;
  sub_214407638(v67, v68, v69, v70, v71);
  v73 = (unint64_t)(v46 + 111) & 0xFFFFFFFFFFFFFFF8;
  v74 = *(_QWORD *)(v73 + 48);
  v75 = *(_BYTE *)(v73 + 56);
  v76 = (unint64_t)(v45 + 111) & 0xFFFFFFFFFFFFFFF8;
  v77 = *(_QWORD *)v76;
  v78 = *(_QWORD *)(v76 + 8);
  v79 = *(_QWORD *)(v76 + 16);
  v80 = *(_QWORD *)(v76 + 24);
  v81 = *(_QWORD *)(v76 + 32);
  v82 = *(_QWORD *)(v76 + 40);
  v83 = *(_QWORD *)(v76 + 48);
  v84 = *(_BYTE *)(v76 + 56);
  v85 = *(_OWORD *)(v73 + 16);
  v86 = *(_OWORD *)(v73 + 32);
  *(_OWORD *)v76 = *(_OWORD *)v73;
  *(_OWORD *)(v76 + 16) = v85;
  *(_OWORD *)(v76 + 32) = v86;
  *(_QWORD *)(v76 + 48) = v74;
  *(_BYTE *)(v76 + 56) = v75;
  sub_21440E24C(v77, v78, v79, v80, v81, v82, v83, v84);
  v87 = (void *)((unint64_t)(v45 + 175) & 0xFFFFFFFFFFFFFFF8);
  v88 = (unint64_t)(v46 + 175) & 0xFFFFFFFFFFFFFFF8;
  if (v87 != (void *)v88)
  {
    sub_2141E0750((uint64_t)v87, &qword_253F15AE8);
    memcpy(v87, (const void *)((unint64_t)(v46 + 175) & 0xFFFFFFFFFFFFFFF8), 0x11CuLL);
  }
  v89 = ((unint64_t)v87 + 291) & 0xFFFFFFFFFFFFFFF8;
  v90 = (v88 + 291) & 0xFFFFFFFFFFFFFFF8;
  v91 = *(_QWORD *)v90;
  LOBYTE(v90) = *(_BYTE *)(v90 + 8);
  v92 = *(_QWORD *)v89;
  v93 = *(_BYTE *)(v89 + 8);
  *(_QWORD *)v89 = v91;
  *(_BYTE *)(v89 + 8) = v90;
  sub_2143ABBF8(v92, v93, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v94 = ((unint64_t)v87 + 307) & 0xFFFFFFFFFFFFFFF8;
  v95 = (v88 + 307) & 0xFFFFFFFFFFFFFFF8;
  if (v94 != v95)
  {
    sub_2141E0750(v94, &qword_253F15AF8);
    v96 = *(_OWORD *)(v95 + 16);
    *(_OWORD *)v94 = *(_OWORD *)v95;
    *(_OWORD *)(v94 + 16) = v96;
    v98 = *(_OWORD *)(v95 + 48);
    v97 = *(_OWORD *)(v95 + 64);
    v99 = *(_OWORD *)(v95 + 32);
    *(_BYTE *)(v94 + 80) = *(_BYTE *)(v95 + 80);
    *(_OWORD *)(v94 + 48) = v98;
    *(_OWORD *)(v94 + 64) = v97;
    *(_OWORD *)(v94 + 32) = v99;
  }
  v100 = sub_2141D8BF8(&qword_254D6EC48);
  v101 = *(_QWORD *)(v100 - 8);
  v102 = *(_DWORD *)(v101 + 80) & 0xF8 | 7;
  v103 = (v94 + v102 + 81) & ~v102;
  v104 = (v95 + v102 + 81) & ~v102;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 40))(v103, v104, v100);
  v105 = *(_QWORD *)(v101 + 64) + 7;
  *(_QWORD *)((v105 + v103) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v105 + v104) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v106 = sub_2144247D0();
  v107 = *(_QWORD *)(v106 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v107 + 40))(((v105 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v107 + 80) + 8 + v103) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80), ((v105 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v107 + 80) + 8 + v104) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80), v106);
  return v120;
}

uint64_t sub_214410054(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t (*v41)(unint64_t, uint64_t, uint64_t);
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;

  v45 = *(_QWORD *)(a3 + 16);
  v3 = *(_QWORD *)(v45 - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(sub_214423B94() - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(sub_214423C54() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v6 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(_QWORD *)(sub_2144240D4() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + ((v9 + v10 + v12) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(sub_214423F24() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 64) + ((v13 + v15 + 8) & ~v15);
  if ((unint64_t)(v16 + 1) > 8)
    v17 = v16 + 1;
  else
    v17 = 8;
  v44 = sub_2141D8BF8(&qword_254D6EC48);
  v18 = *(_QWORD *)(v44 - 8);
  v19 = *(unsigned int *)(v18 + 84);
  if (v19 <= 0x7FFFFFFE)
    v20 = 2147483646;
  else
    v20 = *(_DWORD *)(v18 + 84);
  v46 = v4;
  if (v4 <= v20)
    v4 = v20;
  v21 = sub_2144247D0();
  result = a2;
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(unsigned int *)(v23 + 84);
  if (v4 <= v24)
    v25 = *(_DWORD *)(v23 + 84);
  else
    v25 = v4;
  if (!a2)
    return result;
  v26 = v12 | v8 | *(_DWORD *)(v5 + 80) & 0xF8 | v15 | 7;
  v27 = *(_QWORD *)(v3 + 64) + v26;
  v28 = v17 + 176;
  v29 = *(_DWORD *)(v18 + 80) & 0xF8;
  v30 = ~v29 & 0xFFFFFFFFFFFFFFF8;
  v31 = v29 + 88;
  v32 = *(_QWORD *)(v18 + 64) + 7;
  v33 = *(unsigned __int8 *)(v23 + 80);
  v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + v33 + 8;
  if (a2 > v25)
  {
    v35 = ((v34 + ((v31 + ((((v28 + (v27 & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & v30)) & ~v33)
        + *(_QWORD *)(v23 + 64);
    v36 = 8 * v35;
    if (v35 > 3)
      goto LABEL_15;
    v38 = ((a2 - v25 + ~(-1 << v36)) >> v36) + 1;
    if (HIWORD(v38))
    {
      v37 = *(_DWORD *)(a1 + v35);
      if (v37)
        goto LABEL_22;
    }
    else
    {
      if (v38 <= 0xFF)
      {
        if (v38 < 2)
          goto LABEL_31;
LABEL_15:
        v37 = *(unsigned __int8 *)(a1 + v35);
        if (!*(_BYTE *)(a1 + v35))
          goto LABEL_31;
LABEL_22:
        v39 = (v37 - 1) << v36;
        if (v35 > 3)
          v39 = 0;
        if ((_DWORD)v35)
        {
          if (v35 <= 3)
            v40 = v35;
          else
            v40 = 4;
          __asm { BR              X12 }
        }
        return v25 + v39 + 1;
      }
      v37 = *(unsigned __int16 *)(a1 + v35);
      if (*(_WORD *)(a1 + v35))
        goto LABEL_22;
    }
  }
LABEL_31:
  if (v46 == v25)
  {
    v41 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48);
    v42 = a1;
    v24 = v46;
    v21 = v45;
    return v41(v42, v24, v21);
  }
  v42 = (v31 + ((((v28 + ((v27 + a1) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & v30;
  if (v20 != v25)
  {
    v42 = (v34 + v42) & ~v33;
    v41 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48);
    return v41(v42, v24, v21);
  }
  if (v19 >= 0x7FFFFFFE)
  {
    v41 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v18 + 48);
    v24 = v19;
    v21 = v44;
    return v41(v42, v24, v21);
  }
  v43 = *(_QWORD *)((v32 + v42) & 0xFFFFFFFFFFFFF8);
  if (v43 >= 0xFFFFFFFF)
    LODWORD(v43) = -1;
  if ((v43 + 1) >= 2)
    return v43;
  else
    return 0;
}

void sub_2144103A4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;

  v4 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(sub_214423B94() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(sub_214423C54() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(sub_2144240D4() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + ((((v7 + v9) & ~v9) + v10 + v12) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(sub_214423F24() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 64) + ((v13 + v15 + 8) & ~v15);
  if ((unint64_t)(v16 + 1) > 8)
    v17 = v16 + 1;
  else
    v17 = 8;
  v18 = *(_QWORD *)(sub_2141D8BF8(&qword_254D6EC48) - 8);
  if (*(_DWORD *)(v18 + 84) <= 0x7FFFFFFEu)
    v19 = 2147483646;
  else
    v19 = *(_DWORD *)(v18 + 84);
  if (v5 <= v19)
    v5 = v19;
  v20 = *(_QWORD *)(sub_2144247D0() - 8);
  if (v5 <= *(_DWORD *)(v20 + 84))
    v21 = *(_DWORD *)(v20 + 84);
  else
    v21 = v5;
  v22 = v12 | v9 | *(_DWORD *)(v6 + 80) & 0xF8 | v15 | 7;
  v23 = *(_DWORD *)(v18 + 80) & 0xF8;
  v24 = ((((*(_QWORD *)(v18 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
        + *(unsigned __int8 *)(v20 + 80)
        + 8
        + ((v23
          + 88
          + ((((v17 + 176 + ((*(_QWORD *)(v4 + 64) + v22) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & ~v23 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
      + *(_QWORD *)(v20 + 64);
  if (a3 <= v21)
  {
    v27 = 0;
    v25 = a1;
    v26 = a2;
  }
  else
  {
    v25 = a1;
    v26 = a2;
    if (v24 <= 3)
    {
      v29 = ((a3 - v21 + ~(-1 << (8 * v24))) >> (8 * v24)) + 1;
      if (HIWORD(v29))
      {
        v27 = 4u;
      }
      else if (v29 >= 0x100)
      {
        v27 = 2;
      }
      else
      {
        v27 = v29 > 1;
      }
    }
    else
    {
      v27 = 1u;
    }
  }
  if (v21 < v26)
  {
    v28 = ~v21 + v26;
    if (v24 < 4)
    {
      if ((_DWORD)v24)
      {
        v30 = v28 & ~(-1 << (8 * v24));
        bzero(v25, v24);
        if ((_DWORD)v24 == 3)
        {
          *(_WORD *)v25 = v30;
          v25[2] = BYTE2(v30);
        }
        else if ((_DWORD)v24 == 2)
        {
          *(_WORD *)v25 = v30;
        }
        else
        {
          *v25 = v30;
        }
      }
    }
    else
    {
      bzero(v25, v24);
      *(_DWORD *)v25 = v28;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

uint64_t type metadata accessor for RenderBasedChartView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RenderBasedChartView);
}

void sub_21441078C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_2144107E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v8;

  v4 = sub_2144243E0();
  v5 = MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return sub_2144243EC();
}

uint64_t sub_2144108A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v9;

  v5 = sub_2144243E0();
  v6 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return sub_2144243EC();
}

uint64_t sub_21441096C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_2141D8BF8(&qword_253F15AD0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2144109B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 283) = 0;
  return result;
}

uint64_t sub_2144109E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_214410A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, _OWORD *a13, const void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a20 - 8) + 32))(a9, a1, a20);
  v25 = (int *)type metadata accessor for RenderBasedChartView(0, a20, a21, v24);
  sub_2141E801C(a2, a9 + v25[9], &qword_253F139B8);
  v26 = a9 + v25[10];
  *(_QWORD *)v26 = a3;
  *(_QWORD *)(v26 + 8) = a4;
  *(_BYTE *)(v26 + 16) = a5 & 1;
  v27 = a9 + v25[11];
  *(_QWORD *)v27 = a6;
  *(_QWORD *)(v27 + 8) = a7;
  *(_BYTE *)(v27 + 16) = a8 & 1;
  v28 = a9 + v25[12];
  *(_QWORD *)v28 = a10;
  *(_BYTE *)(v28 + 8) = a11 & 1;
  v29 = a9 + v25[13];
  v30 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)v29 = *(_OWORD *)a12;
  *(_OWORD *)(v29 + 16) = v30;
  *(_BYTE *)(v29 + 32) = *(_BYTE *)(a12 + 32);
  v31 = (_OWORD *)(a9 + v25[14]);
  v32 = a13[1];
  *v31 = *a13;
  v31[1] = v32;
  v31[2] = a13[2];
  *(_OWORD *)((char *)v31 + 41) = *(_OWORD *)((char *)a13 + 41);
  memcpy((void *)(a9 + v25[15]), a14, 0x11CuLL);
  v33 = a9 + v25[16];
  *(_QWORD *)v33 = a15;
  *(_BYTE *)(v33 + 8) = a16 & 1;
  v34 = a9 + v25[17];
  v35 = *(_OWORD *)(a17 + 48);
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(a17 + 32);
  *(_OWORD *)(v34 + 48) = v35;
  *(_OWORD *)(v34 + 64) = *(_OWORD *)(a17 + 64);
  *(_BYTE *)(v34 + 80) = *(_BYTE *)(a17 + 80);
  v36 = *(_OWORD *)(a17 + 16);
  *(_OWORD *)v34 = *(_OWORD *)a17;
  *(_OWORD *)(v34 + 16) = v36;
  sub_214411650(a18, a19);
  return sub_2144247C4();
}

uint64_t sub_214410BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[11];
  _OWORD v35[2];
  _OWORD v36[13];
  char v37;
  char v38;
  uint64_t v39[7];
  uint64_t v40[7];
  uint64_t v41[7];
  uint64_t v42[7];
  char v43[32];
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _BYTE v52[48];
  uint64_t v53;
  char v54[48];
  uint64_t v55;

  v3 = v2;
  sub_2144116E8(a1);
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  v6 = *(_QWORD *)(*(_QWORD *)&v36[0] + 216);
  swift_retain();
  swift_release();
  if (!v6)
  {
    __break(1u);
    goto LABEL_23;
  }
  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(v6 + 72) & 1) != 0)
  {
LABEL_23:
    result = sub_214425628();
    __break(1u);
    return result;
  }
  v8 = *(_QWORD *)(v6 + 56);
  v7 = *(_QWORD *)(v6 + 64);
  v10 = *(_QWORD *)(v6 + 40);
  v9 = *(_QWORD *)(v6 + 48);
  swift_release();
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  v11 = *(_QWORD *)(*(_QWORD *)&v36[0] + 336);
  swift_retain();
  swift_release();
  if (v11)
  {
    sub_2143F8874();
    swift_beginAccess();
    v12 = *(_QWORD *)(v11 + 40);
    if (v12)
    {
      swift_bridgeObjectRetain();
      swift_release();
      goto LABEL_7;
    }
    goto LABEL_23;
  }
  v12 = 0;
LABEL_7:
  sub_21441154C(a1, (uint64_t)v39);
  sub_2141E801C((uint64_t)v39, (uint64_t)v54, &qword_253F14EA0);
  if (v55 == 1 || (v13 = v54[0], sub_21441DF90(v39), v13 == 3))
    v13 = 0;
  sub_21441154C(a1, (uint64_t)v40);
  sub_2141E801C((uint64_t)v40, (uint64_t)v52, &qword_253F14EA0);
  if (v53 == 1 || (v14 = v52[1], sub_21441DF90(v40), (_DWORD)v14 == 9))
    v14 = 2;
  sub_21441154C(a1, (uint64_t)v41);
  sub_2141E801C((uint64_t)v41, (uint64_t)v47, &qword_253F14EA0);
  v15 = v51;
  if (v51 == 1)
  {
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v32 = v49;
    v33 = v48;
    v16 = v50;
    sub_21441DF90(v41);
    v15 = v16 & 1;
  }
  v31 = v15;
  sub_21441154C(a1, (uint64_t)v42);
  sub_2141E801C((uint64_t)v42, (uint64_t)v43, &qword_253F14EA0);
  if (v46 == 1)
  {
    v17 = 0;
    v18 = 1;
  }
  else
  {
    v17 = v44;
    v19 = v45;
    sub_21441DF90(v42);
    v18 = v19 & 1;
  }
  sub_214414844(v3, v12, v13, v14, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)v34);
  swift_bridgeObjectRelease();
  *(_OWORD *)((char *)&v36[9] + 7) = v34[9];
  *(_OWORD *)((char *)&v36[10] + 7) = v34[10];
  *(_OWORD *)((char *)&v36[11] + 7) = v35[0];
  v36[12] = *(_OWORD *)((char *)v35 + 9);
  *(_OWORD *)((char *)&v36[5] + 7) = v34[5];
  *(_OWORD *)((char *)&v36[6] + 7) = v34[6];
  *(_OWORD *)((char *)&v36[7] + 7) = v34[7];
  *(_OWORD *)((char *)&v36[8] + 7) = v34[8];
  *(_OWORD *)((char *)&v36[1] + 7) = v34[1];
  *(_OWORD *)((char *)&v36[2] + 7) = v34[2];
  *(_OWORD *)((char *)&v36[3] + 7) = v34[3];
  *(_OWORD *)((char *)&v36[4] + 7) = v34[4];
  v38 = v31;
  v37 = v18;
  *(_OWORD *)((char *)v36 + 7) = v34[0];
  if (qword_253F14458 != -1)
    swift_once();
  v20 = qword_253F1CA28;
  v21 = v38;
  v22 = v37;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v33;
  *(_QWORD *)(a2 + 48) = v32;
  *(_BYTE *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 64) = v17;
  *(_BYTE *)(a2 + 72) = v22;
  v23 = v36[1];
  *(_OWORD *)(a2 + 73) = v36[0];
  v24 = v36[5];
  *(_OWORD *)(a2 + 137) = v36[4];
  v25 = v36[2];
  *(_OWORD *)(a2 + 121) = v36[3];
  *(_OWORD *)(a2 + 105) = v25;
  *(_OWORD *)(a2 + 89) = v23;
  v26 = v36[9];
  *(_OWORD *)(a2 + 201) = v36[8];
  v27 = v36[6];
  *(_OWORD *)(a2 + 185) = v36[7];
  *(_OWORD *)(a2 + 169) = v27;
  *(_OWORD *)(a2 + 153) = v24;
  v28 = v36[10];
  v29 = v36[11];
  *(_OWORD *)(a2 + 265) = v36[12];
  *(_OWORD *)(a2 + 249) = v29;
  *(_OWORD *)(a2 + 233) = v28;
  *(_OWORD *)(a2 + 217) = v26;
  *(_QWORD *)(a2 + 288) = v20;
  *(_BYTE *)(a2 + 296) = 0;
  return swift_retain();
}

void *sub_214410FF4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v24[8];
  uint64_t v25;
  _OWORD v26[19];
  _BYTE v27[298];

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v24 - v11;
  v13 = sub_2144112E4(v10);
  sub_2141D972C(v13);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v12, v3, a1);
  if (v13)
  {
    v15 = sub_214411FB8(a1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a1);
    if ((v15 & 1) == 0)
    {
      sub_214410BEC(a1, (uint64_t)v26);
      sub_21441DF14((uint64_t)v26);
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a1);
  }
  v14(v9, v3, a1);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, v9, a1);
  if (qword_253F137C8 != -1)
    swift_once();
  v18 = *(double *)&xmmword_253F137B8;
  if (qword_253F137B0 != -1)
    swift_once();
  v19 = *((double *)&xmmword_253F137B8 + 1);
  v20 = xmmword_253F137A0;
  v21 = sub_214424C44();
  sub_2144130F8(v18, 0, *(double *)&v20, 0, 0.0, 1, v19, 0, (uint64_t)v24, *((double *)&v20 + 1), 0, 0.0, 1, v21, v22, (uint64_t)sub_21441DF24, v17);
  swift_release();
  v26[4] = v24[4];
  v26[5] = v24[5];
  v26[6] = v24[6];
  v26[7] = v24[7];
  v26[0] = v24[0];
  v26[1] = v24[1];
  v26[2] = v24[2];
  v26[3] = v24[3];
  sub_21441DF88((uint64_t)v26);
LABEL_10:
  sub_2141E801C((uint64_t)v26, (uint64_t)&v25, &qword_253F13A50);
  sub_2141D8BF8(&qword_253F13A30);
  sub_2141D8BF8(&qword_253F13A40);
  sub_2141DCDE8();
  sub_2141DCBD4();
  sub_2144243EC();
  return memcpy(a2, v27, 0x12AuLL);
}

uint64_t sub_2144112B0()
{
  sub_2143C5D08();
  return sub_214424224();
}

uint64_t sub_2144112E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = v1 + *(int *)(a1 + 40);
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 16);
  sub_21440DDFC(*(_QWORD *)v2, v4, v5, (uint64_t (*)(void))sub_2141DD47C);
  v6 = sub_21441BF60(v3, v4, v5, (void (*)(uint64_t, uint64_t))sub_2141DD47C, 0xD000000000000025, 0x800000021445BA50, (uint64_t (*)(void))sub_2141FA1C4);
  sub_21440E240(v3, v4, v5, (uint64_t (*)(void))sub_2141FA1C4);
  return v6;
}

uint64_t sub_214411394(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 16);
  sub_21440DDFC(*(_QWORD *)v2, v4, v5, (uint64_t (*)(void))sub_2141D975C);
  v6 = sub_21441BF60(v3, v4, v5, (void (*)(uint64_t, uint64_t))sub_2141D975C, 0xD000000000000023, 0x800000021445BA80, (uint64_t (*)(void))sub_2141FA1C4);
  sub_21440E240(v3, v4, v5, (uint64_t (*)(void))sub_2141FA1C4);
  return v6;
}

uint64_t sub_214411444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v2 = v1 + *(int *)(a1 + 48);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_2143A62F4(*(_QWORD *)v2, v4);
  v5 = sub_21441AEE8(v3, v4);
  sub_2143ABBF8(v3, v4, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  return v5;
}

uint64_t sub_2144114B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  _OWORD v6[2];
  char v7;
  _BYTE v8[40];

  v2 = v1 + *(int *)(a1 + 52);
  v3 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v3;
  v7 = *(_BYTE *)(v2 + 32);
  sub_2141E801C((uint64_t)v6, (uint64_t)v8, &qword_253F15AF0);
  sub_2141FE404((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2144071EC);
  v4 = sub_21441C120();
  sub_2141FE404((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214407638);
  return v4;
}

uint64_t sub_21441154C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _OWORD *v4;
  __int128 v5;
  uint64_t v7[7];
  _OWORD v8[2];
  _OWORD v9[2];
  _BYTE v10[64];

  v4 = (_OWORD *)(v2 + *(int *)(a1 + 56));
  v5 = v4[1];
  v8[0] = *v4;
  v8[1] = v5;
  v9[0] = v4[2];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v4 + 41);
  sub_2141E801C((uint64_t)v8, (uint64_t)v10, (uint64_t *)&unk_253F15AD8);
  sub_21421CF8C((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21440DE08);
  sub_21441B094(v7);
  sub_21421CF8C((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21440E24C);
  return sub_2141E801C((uint64_t)v7, a2, &qword_253F14EA0);
}

uint64_t sub_2144115E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v2 = v1 + *(int *)(a1 + 64);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_2143A62F4(*(_QWORD *)v2, v4);
  v5 = sub_21441AD3C(v3, v4);
  sub_2143ABBF8(v3, v4, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  return v5;
}

uint64_t sub_214411650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  type metadata accessor for ChartModel();
  return sub_214424C74();
}

uint64_t sub_2144116B4()
{
  type metadata accessor for ChartModel();
  swift_allocObject();
  return sub_2142D8C68();
}

uint64_t sub_2144116E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  unsigned __int8 v96;
  _QWORD v97[36];
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _BYTE v101[64];

  v74 = type metadata accessor for ChartEnvironmentValues(0);
  v3 = MEMORY[0x24BDAC7A8](v74);
  v73 = (uint64_t)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v80 = (uint64_t)&v73 - v5;
  v75 = type metadata accessor for ChartInternal();
  v6 = MEMORY[0x24BDAC7A8](v75);
  v76 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v77 = (_OWORD *)((char *)&v73 - v8);
  v91 = sub_21436BF4C(MEMORY[0x24BEE4AF8]);
  v78 = a1;
  v79 = v1;
  v9 = sub_2144115E4(a1);
  v10 = 0;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = *(_QWORD *)(v9 + 64);
  v81 = v9 + 64;
  v14 = v12 & v13;
  v82 = (unint64_t)(v11 + 63) >> 6;
  v83 = v9;
  while (1)
  {
    if (v14)
    {
      v84 = (v14 - 1) & v14;
      v85 = v10;
      v22 = __clz(__rbit64(v14)) | (v10 << 6);
    }
    else
    {
      v23 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_34;
      if (v23 >= v82)
      {
LABEL_31:
        swift_release();
        v52 = v78;
        v53 = *(_QWORD *)(v78 + 16);
        v90 = *(_QWORD *)(v78 + 24);
        *((_QWORD *)&v99 + 1) = v53;
        v100 = v90;
        v54 = sub_2141D8DD8((uint64_t *)&v98);
        v55 = v79;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v54, v79, v53);
        v56 = (uint64_t)v91;
        swift_bridgeObjectRetain();
        v57 = sub_214411444(v52);
        sub_21441154C(v52, (uint64_t)v101);
        sub_21441B284(v97);
        v58 = v80;
        sub_21441B444(v80);
        v59 = v73;
        sub_21441B444(v73);
        v89 = *(unsigned __int8 *)(v59 + *(int *)(v74 + 36));
        sub_2141DD370(v59, type metadata accessor for ChartEnvironmentValues);
        sub_21441B648(&v95);
        v88 = *((_QWORD *)&v95 + 1);
        LODWORD(v87) = v96;
        sub_2143BCEE4((uint64_t)&v95);
        sub_21441B648(&v92);
        v60 = v93;
        LOBYTE(v59) = v94;
        sub_2143BCEE4((uint64_t)&v92);
        v61 = v99;
        v62 = (uint64_t)v77;
        *v77 = v98;
        *(_OWORD *)(v62 + 16) = v61;
        *(_QWORD *)(v62 + 32) = v100;
        *(_QWORD *)(v62 + 40) = v56;
        *(_QWORD *)(v62 + 48) = v57;
        sub_2141E801C((uint64_t)v101, v62 + 56, &qword_253F14EA0);
        memcpy((void *)(v62 + 112), v97, 0x11BuLL);
        v63 = (int *)v75;
        sub_2141FE1E0(v58, v62 + *(int *)(v75 + 36), type metadata accessor for ChartEnvironmentValues);
        *(_BYTE *)(v62 + v63[10]) = v89;
        v64 = v62 + v63[11];
        *(_QWORD *)v64 = v88;
        *(_BYTE *)(v64 + 8) = v87;
        v65 = v62 + v63[12];
        *(_QWORD *)v65 = v60;
        *(_BYTE *)(v65 + 8) = v59;
        type metadata accessor for ChartContentLayoutContext();
        swift_allocObject();
        v66 = sub_214204490();
        v97[0] = v66;
        v97[1] = v56;
        v67 = v90;
        v68 = *(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v90 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        v68(v55, v97, v53, v67);
        swift_bridgeObjectRelease();
        swift_release();
        sub_2142036B8(v56);
        swift_bridgeObjectRelease();
        type metadata accessor for ParametersContext();
        v69 = swift_allocObject();
        *(_QWORD *)(v69 + 16) = 0;
        *(_QWORD *)(v69 + 24) = sub_21436C0DC(MEMORY[0x24BEE4AF8]);
        v70 = v76;
        sub_2141FDEA0(v62, v76, (uint64_t (*)(_QWORD))type metadata accessor for ChartInternal);
        swift_retain();
        swift_retain();
        sub_214357104(v70, v66, v69, (uint64_t)v97);
        sub_2141D8BF8(&qword_254D6ECA0);
        sub_214424C80();
        v71 = v80;
        sub_21441B444(v80);
        sub_2142D9348((uint64_t)v97, v69, v71, v55 + *(int *)(v52 + 76));
        swift_release();
        sub_21424C35C((uint64_t)v97);
        swift_release();
        swift_release();
        sub_2141DD370(v71, type metadata accessor for ChartEnvironmentValues);
        return sub_2141DD370(v62, (uint64_t (*)(_QWORD))type metadata accessor for ChartInternal);
      }
      v24 = *(_QWORD *)(v81 + 8 * v23);
      v25 = v10 + 1;
      if (!v24)
      {
        v25 = v10 + 2;
        if (v10 + 2 >= v82)
          goto LABEL_31;
        v24 = *(_QWORD *)(v81 + 8 * v25);
        if (!v24)
        {
          v25 = v10 + 3;
          if (v10 + 3 >= v82)
            goto LABEL_31;
          v24 = *(_QWORD *)(v81 + 8 * v25);
          if (!v24)
          {
            v26 = v10 + 4;
            if (v10 + 4 >= v82)
              goto LABEL_31;
            v24 = *(_QWORD *)(v81 + 8 * v26);
            if (!v24)
            {
              while (1)
              {
                v25 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_35;
                if (v25 >= v82)
                  goto LABEL_31;
                v24 = *(_QWORD *)(v81 + 8 * v25);
                ++v26;
                if (v24)
                  goto LABEL_21;
              }
            }
            v25 = v10 + 4;
          }
        }
      }
LABEL_21:
      v84 = (v24 - 1) & v24;
      v85 = v25;
      v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }
    v27 = *(_BYTE *)(*(_QWORD *)(v83 + 48) + v22);
    v28 = *(_QWORD *)(v83 + 56) + 72 * v22;
    v87 = *(_QWORD *)v28;
    LODWORD(v88) = *(unsigned __int8 *)(v28 + 8);
    v29 = *(_QWORD *)(v28 + 16);
    v30 = *(_QWORD *)(v28 + 24);
    v31 = *(_QWORD *)(v28 + 32);
    v32 = *(_WORD *)(v28 + 40);
    v33 = *(_QWORD *)(v28 + 48);
    v34 = *(_QWORD *)(v28 + 56);
    v35 = *(unsigned __int8 *)(v28 + 64);
    sub_2141D8CE8(v29, v30, v31, v32);
    sub_2141D8CFC(v33, v34, v35);
    sub_2141D8CE8(v29, v30, v31, v32);
    v90 = v33;
    v86 = v34;
    v89 = v35;
    sub_2141D8CFC(v33, v34, v35);
    v36 = v91;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v97[0] = v36;
    v38 = v27;
    v40 = sub_214336B74(v27);
    v41 = v36[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
      break;
    v44 = v39;
    if (v36[3] >= v43)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_2142A6790();
    }
    else
    {
      sub_21429A08C(v43, isUniquelyReferenced_nonNull_native);
      v45 = sub_214336B74(v38);
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_36;
      v40 = v45;
    }
    v47 = (_QWORD *)v97[0];
    v91 = (_QWORD *)v97[0];
    if ((v44 & 1) != 0)
    {
      v15 = *(_QWORD *)(v97[0] + 56) + 72 * v40;
      v16 = *(_QWORD *)(v15 + 48);
      v17 = *(_QWORD *)(v15 + 56);
      v18 = *(_BYTE *)(v15 + 64);
      sub_2141D7864(*(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), *(_WORD *)(v15 + 40));
      sub_2141D774C(v16, v17, v18);
      v19 = v86;
      *(_QWORD *)v15 = v87;
      *(_BYTE *)(v15 + 8) = v88;
      *(_QWORD *)(v15 + 16) = v29;
      *(_QWORD *)(v15 + 24) = v30;
      *(_QWORD *)(v15 + 32) = v31;
      *(_WORD *)(v15 + 40) = v32;
      v20 = v90;
      *(_QWORD *)(v15 + 48) = v90;
      *(_QWORD *)(v15 + 56) = v19;
      v21 = v89;
      *(_BYTE *)(v15 + 64) = v89;
    }
    else
    {
      *(_QWORD *)(v97[0] + 8 * (v40 >> 6) + 64) |= 1 << v40;
      *(_BYTE *)(v47[6] + v40) = v38;
      v48 = v47[7] + 72 * v40;
      v19 = v86;
      *(_QWORD *)v48 = v87;
      *(_BYTE *)(v48 + 8) = v88;
      *(_QWORD *)(v48 + 16) = v29;
      *(_QWORD *)(v48 + 24) = v30;
      *(_QWORD *)(v48 + 32) = v31;
      *(_WORD *)(v48 + 40) = v32;
      v20 = v90;
      *(_QWORD *)(v48 + 48) = v90;
      *(_QWORD *)(v48 + 56) = v19;
      v21 = v89;
      *(_BYTE *)(v48 + 64) = v89;
      v49 = v47[2];
      v50 = __OFADD__(v49, 1);
      v51 = v49 + 1;
      if (v50)
        goto LABEL_33;
      v47[2] = v51;
    }
    swift_bridgeObjectRelease();
    sub_2141D7864(v29, v30, v31, v32);
    sub_2141D774C(v20, v19, v21);
    v14 = v84;
    v10 = v85;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  result = sub_214425820();
  __break(1u);
  return result;
}

double sub_214411E5C(char a1, double a2, double a3)
{
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  double v12;
  __int128 v14;
  char v15;
  uint64_t v16;
  char v17;

  v5 = a1 & 1;
  v6 = sub_214424674();
  v7 = sub_214424674();
  sub_21441B648(&v14);
  if (v6 == v7)
  {
    v8 = *((_QWORD *)&v14 + 1);
    v9 = v15;
    sub_2143BCEE4((uint64_t)&v14);
  }
  else
  {
    v8 = v16;
    v9 = v17;
    sub_2143BCEE4((uint64_t)&v14);
    a2 = a3;
  }
  sub_21441B648(&v14);
  sub_2143BCEE4((uint64_t)&v14);
  if (v6 == v7)
    v10 = sub_214424650();
  else
    v10 = sub_214424668();
  v11 = v10;
  sub_21442465C();
  if (sub_21442465C() == v11)
  {
    sub_2141D8BF8(&qword_254D6ECA0);
    sub_214424C80();
    sub_2142DA49C(v5, v8, v9);
    a2 = v12;
    swift_release();
  }
  return a2;
}

uint64_t sub_214411FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  unsigned __int8 v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[5];
  uint64_t v21;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21441B648(v20);
  v7 = LOBYTE(v20[0]);
  sub_2143BCEE4((uint64_t)v20);
  v8 = sub_21442465C();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if (v7 == v8)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    return 0;
  }
  else
  {
    sub_2141D8BF8(&qword_254D6ECA0);
    sub_214424C80();
    v10 = v21;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 32);
    v13 = *(_QWORD *)(v10 + 40);
    v14 = *(_QWORD *)(v10 + 48);
    v15 = *(_WORD *)(v10 + 96);
    v18 = *(_QWORD *)(v10 + 24);
    v19 = v11;
    sub_2142E003C(v11, v18, v12, v13, v14);
    swift_release();
    if (v14)
    {
      v9 = (v15 & 0x100) == 0;
      sub_2142DFFF8(v19, v18, v12, v13, v14);
    }
    else
    {
      return 1;
    }
  }
  return v9;
}

uint64_t sub_214412150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v22 - v9;
  v11 = sub_214411FB8(v8);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v10, v2, a1);
  if ((v11 & 1) != 0)
  {
    v13 = *(void (**)(char *, uint64_t))(v4 + 8);
    v13(v10, a1);
LABEL_5:
    v12(v7, v2, a1);
    v13(v7, a1);
    return 2;
  }
  v14 = sub_2144114B0(a1);
  v16 = v15;
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v10, a1);
  sub_2141D972C(v16);
  if (v14)
  {
    sub_2141D972C(v14);
    goto LABEL_5;
  }
  v12(v7, v2, a1);
  v18 = sub_2144114B0(a1);
  v20 = v19;
  v13(v7, a1);
  sub_2141D972C(v18);
  if (!v20)
  {
    v21 = sub_2144112E4(a1);
    sub_2141D972C(v21);
    return v21 != 0;
  }
  sub_2141D972C(v20);
  return 2;
}

uint64_t sub_2144122F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[2];
  char v64;

  v5 = a1;
  v62 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChartModel.Scenegraph();
  v59 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v61 = v10;
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for SgCanvasRenderer(0);
  MEMORY[0x24BDAC7A8](v52);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_2141D8BF8(&qword_253F15C40);
  v58 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v53 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_2141D8BF8(&qword_253F134C0);
  MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_2141D8BF8(&qword_253F13248);
  MEMORY[0x24BDAC7A8](v55);
  v57 = (uint64_t)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v3;
  if (sub_214412150(a2))
  {
    v17 = v5[1];
    v18 = v17 & 0xFFFFFFFFFFFFFFFLL;
  }
  else
  {
    sub_2141D8BF8(&qword_253F15D40);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_214427810;
    v21 = v5[2];
    v47 = v5[3];
    v20 = v47;
    v46[1] = v21;
    v48 = v5[1];
    v22 = v48;
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v20;
    *(_QWORD *)(v19 + 48) = v22;
    v23 = type metadata accessor for SgGroup(0);
    v50 = v5;
    v24 = (int *)v23;
    v17 = swift_allocBox();
    v49 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v25 = v13;
    v26 = v11;
    v28 = v27;
    v29 = (char *)v27 + v24[6];
    v30 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
    *v28 = 0;
    v28[1] = v19;
    *(_QWORD *)((char *)v28 + v24[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v28 + v24[8]) = 0;
    *(_QWORD *)((char *)v28 + v24[9]) = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v28 + v24[10]) = 0;
    v11 = v26;
    v13 = v25;
    v8 = v49;
    v18 = v17 & 0xFFFFFFFFFFFFFFFLL;
    swift_retain();
    v5 = v50;
    swift_retain();
  }
  v50 = (_QWORD *)v18;
  swift_retain();
  sub_2141FDEA0((uint64_t)v5, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  memset(v63, 0, sizeof(v63));
  v64 = 1;
  swift_retain();
  sub_2141FAF88((uint64_t)v11, v17, (uint64_t)v63, (uint64_t)v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v51, a2);
  v31 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = *(_OWORD *)(a2 + 16);
  v33 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(v32 + v31, v8, a2);
  MEMORY[0x24BDAC7A8](v33);
  v46[-2] = sub_21441F664;
  v46[-1] = v32;
  sub_2141D8BF8(&qword_253F14B80);
  sub_2141FED10(&qword_253F14A08, type metadata accessor for SgCanvasRenderer, (uint64_t)&unk_2144279D0);
  sub_2141D9054(&qword_253F14B78, &qword_253F14B80, (uint64_t)&unk_21442B360);
  v34 = v53;
  sub_214424908();
  swift_release();
  sub_2141DD370((uint64_t)v13, type metadata accessor for SgCanvasRenderer);
  v35 = sub_214424A94();
  sub_2141FDEA0((uint64_t)v5, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v36 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v37 = swift_allocObject();
  sub_2141FE1E0((uint64_t)v11, v37 + v36, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v38 = v58;
  v39 = (uint64_t)v56;
  v40 = v60;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v56, v34, v60);
  v41 = (uint64_t *)(v39 + *(int *)(v54 + 36));
  *v41 = v35;
  v41[1] = (uint64_t)sub_21441FABC;
  v41[2] = v37;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v40);
  swift_release();
  v42 = v57;
  sub_2141E070C(v39, v57, &qword_253F134C0);
  *(_BYTE *)(v42 + *(int *)(v55 + 36)) = 0;
  sub_2141E0750(v39, &qword_253F134C0);
  v43 = v62;
  sub_2141E070C(v42, v62, &qword_253F13248);
  v44 = sub_2141D8BF8(&qword_253F13250);
  sub_2141E5E34((uint64_t)(v5 + 4), v43 + *(int *)(v44 + 36));
  return sub_2141E0750(v42, &qword_253F13248);
}

uint64_t sub_214412860@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for RenderBasedChartView(0, a1, a2, a3);
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  v5 = *(_QWORD *)(v11 + 320);
  swift_retain();
  swift_release();
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_2143F8874();
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  swift_release();
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  v7 = *(_QWORD *)(v10 + 328);
  swift_retain();
  swift_release();
  if (!v7)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_2143F8874();
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 40);
  if (v8 != 1)
  {
    sub_21441FB08(*(id *)(v7 + 40));
    result = swift_release();
    *a4 = v6;
    a4[1] = v8;
    return result;
  }
LABEL_8:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2144129D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for ChartModel.Scenegraph();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141FDEA0(a2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v10 = *(int *)(v6 + 60);
  swift_retain();
  swift_release();
  *(_QWORD *)&v9[v10] = a1;
  v11 = *(int *)(v6 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)&v9[v11] = a1;
  sub_2141FDEA0((uint64_t)v9, a3, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, v6);
  return sub_2141DD370((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
}

__n128 sub_214412ACC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_OWORD *);
  uint64_t (*v18)(_OWORD *);
  uint64_t v19;
  uint64_t (*v20)(_QWORD *);
  uint64_t (*v21)(_QWORD *);
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  _QWORD v27[3];
  uint64_t (*v28[17])(_OWORD *);
  _OWORD v29[8];
  char v30;
  uint64_t (*v31[2])(_QWORD *);
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  _OWORD v41[8];
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  _OWORD v61[8];
  _OWORD v62[8];
  __int128 v63;
  __n128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 16) = v10;
  *(_QWORD *)(v9 + 24) = v11;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a1);
  if (qword_253F137C8 != -1)
    swift_once();
  v27[1] = v11;
  v27[2] = v10;
  v12 = *(double *)&xmmword_253F137B8;
  if (qword_253F137B0 != -1)
    swift_once();
  v13 = *((double *)&xmmword_253F137B8 + 1);
  v14 = xmmword_253F137A0;
  v15 = sub_214424C44();
  sub_2144130F8(v12, 0, *(double *)&v14, 0, 0.0, 1, v13, 0, (uint64_t)v62, *((double *)&v14 + 1), 0, 0.0, 1, v15, v16, (uint64_t)sub_21441FB1C, v9);
  swift_release();
  v67 = v62[4];
  v68 = v62[5];
  v69 = v62[6];
  v70 = v62[7];
  v63 = v62[0];
  v64 = (__n128)v62[1];
  v65 = v62[2];
  v66 = v62[3];
  v17 = (uint64_t (*)(_OWORD *))sub_2144112E4(a1);
  v61[4] = v67;
  v61[5] = v68;
  v61[6] = v69;
  v61[7] = v70;
  v61[0] = v63;
  v61[1] = v64;
  v61[2] = v65;
  v61[3] = v66;
  if (v17)
  {
    v19 = (uint64_t)v17;
    v28[0] = v17;
    v28[1] = v18;
    sub_2144132A4(v61, v28, (uint64_t *)&v32);
    sub_21424CF00((uint64_t)&v32);
    sub_2141E801C((uint64_t)&v32, (uint64_t)v29, &qword_253F13280);
    sub_2141D8BF8(&qword_253F13240);
    sub_21441F094();
    sub_2144243EC();
    sub_2141D972C(v19);
    sub_21441FBC0((uint64_t)&v63);
  }
  else
  {
    v36 = v67;
    v37 = v68;
    v38 = v69;
    v39 = v70;
    v32 = v63;
    v33 = v64;
    v34 = v65;
    v35 = v66;
    sub_21424CE78((uint64_t)&v32);
    sub_2141E801C((uint64_t)&v32, (uint64_t)v29, &qword_253F13280);
    sub_2141D8BF8(&qword_253F13240);
    sub_21441F094();
    sub_2144243EC();
  }
  v49 = v58;
  v50 = v59;
  v51 = v60;
  v45 = v54;
  v46 = v55;
  v47 = v56;
  v48 = v57;
  v43 = v52;
  v44 = v53;
  v20 = (uint64_t (*)(_QWORD *))sub_214411394(a1);
  v41[6] = v49;
  v41[7] = v50;
  v42 = v51;
  v41[2] = v45;
  v41[3] = v46;
  v41[4] = v47;
  v41[5] = v48;
  v41[0] = v43;
  v41[1] = v44;
  if (v20)
  {
    v22 = (uint64_t)v20;
    v31[0] = v20;
    v31[1] = v21;
    sub_21441336C((uint64_t)v41, v31, (uint64_t *)v29);
    sub_21441FBB8((uint64_t)v29);
    sub_2141E801C((uint64_t)v29, (uint64_t)v28, (uint64_t *)&unk_253F13288);
    sub_2141D8BF8(&qword_253F132B8);
    sub_21441F00C();
    sub_2144243EC();
    sub_2141D972C(v22);
    sub_21424D8C4((uint64_t)&v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21441E66C);
  }
  else
  {
    v29[6] = v49;
    v29[7] = v50;
    v30 = v51;
    v29[2] = v45;
    v29[3] = v46;
    v29[4] = v47;
    v29[5] = v48;
    v29[0] = v43;
    v29[1] = v44;
    sub_21441FBAC((uint64_t)v29);
    sub_2141E801C((uint64_t)v29, (uint64_t)v28, (uint64_t *)&unk_253F13288);
    sub_2141D8BF8(&qword_253F132B8);
    sub_21441F00C();
    sub_2144243EC();
  }
  v23 = v39;
  *(_OWORD *)(a2 + 96) = v38;
  *(_OWORD *)(a2 + 112) = v23;
  *(_WORD *)(a2 + 128) = v40;
  v24 = v35;
  *(_OWORD *)(a2 + 32) = v34;
  *(_OWORD *)(a2 + 48) = v24;
  v25 = v37;
  *(_OWORD *)(a2 + 64) = v36;
  *(_OWORD *)(a2 + 80) = v25;
  result = v33;
  *(_OWORD *)a2 = v32;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_214412FA4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _BYTE v20[288];

  v6 = type metadata accessor for ChartModel.Scenegraph();
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for RenderBasedChartView(0, a1, a2, v9);
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  sub_214423E1C();
  v12 = v11;
  v14 = v13;
  sub_214423E1C();
  v16 = v15;
  v18 = v17;
  sub_21441B284(v20);
  sub_2142D9528((uint64_t)v20, (uint64_t)v8, v12, v14, v16, v18);
  swift_release();
  sub_2141E610C((uint64_t)v20);
  sub_2144122F0(v8, v10, a3);
  return sub_2141DD370((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
}

uint64_t sub_2144130F8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  void *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v18 = a16;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_2144252EC();
    v27 = (void *)sub_214424644();
    sub_214423CCC();

    v18 = a16;
  }
  sub_214424194();
  *(_QWORD *)a9 = v18;
  *(_QWORD *)(a9 + 8) = a17;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  *(_OWORD *)(a9 + 48) = v31;
  *(_OWORD *)(a9 + 64) = v32;
  return swift_retain();
}

uint64_t sub_2144132A4@<X0>(_OWORD *a1@<X0>, uint64_t (**a2)(_OWORD *)@<X1>, uint64_t *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t (*v13)(_OWORD *);
  uint64_t v14;
  uint64_t result;
  _OWORD v16[8];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = a1[5];
  v5 = a1[3];
  v20 = a1[4];
  v21 = v4;
  v6 = a1[5];
  v7 = a1[7];
  v22 = a1[6];
  v23 = v7;
  v8 = a1[1];
  v17[0] = *a1;
  v17[1] = v8;
  v9 = a1[3];
  v11 = *a1;
  v10 = a1[1];
  v18 = a1[2];
  v19 = v9;
  v16[4] = v20;
  v16[5] = v6;
  v12 = a1[7];
  v16[6] = v22;
  v16[7] = v12;
  v16[0] = v11;
  v16[1] = v10;
  v13 = *a2;
  v16[2] = v18;
  v16[3] = v5;
  sub_21441FBE8((uint64_t)v17);
  sub_2141D8BF8(&qword_253F13240);
  sub_21441F094();
  *(_QWORD *)&v16[0] = sub_214424B18();
  v14 = v13(v16);
  result = swift_release();
  *a3 = v14;
  return result;
}

uint64_t sub_21441336C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(_QWORD *)@<X1>, uint64_t *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t (*v12)(_QWORD *);
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  v4 = *(_OWORD *)(a1 + 80);
  v5 = *(_OWORD *)(a1 + 112);
  v29 = *(_OWORD *)(a1 + 96);
  v30 = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 48);
  v25 = *(_OWORD *)(a1 + 32);
  v26 = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 80);
  v27 = *(_OWORD *)(a1 + 64);
  v28 = v9;
  v10 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v10;
  v11 = *(_OWORD *)(a1 + 112);
  v21 = v29;
  v22 = v11;
  v17 = v25;
  v18 = v8;
  v19 = v27;
  v20 = v4;
  v31 = *(_BYTE *)(a1 + 128);
  v12 = *a2;
  v23 = *(_BYTE *)(a1 + 128);
  v15[1] = *((_QWORD *)&v24[0] + 1);
  v16 = v6;
  swift_retain();
  sub_21424D8C4((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21441E490);
  sub_2141D8BF8(&qword_253F132B8);
  sub_21441F00C();
  v15[0] = sub_214424B18();
  v13 = v12(v15);
  swift_release();
  result = swift_release();
  *a3 = v13;
  return result;
}

uint64_t sub_21441345C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  unsigned __int8 v31;
  double v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  double v35;
  unsigned __int8 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _QWORD *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  _BYTE *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _OWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[19];
  _QWORD v107[17];
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char v111;

  v79 = a1;
  v92 = sub_2141D8BF8(&qword_254D6ECA8);
  MEMORY[0x24BDAC7A8](v92);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2141D8BF8(&qword_254D6ECB0);
  MEMORY[0x24BDAC7A8](v7);
  v75 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v9);
  v86 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)sub_2141D8BF8(&qword_254D6ECB8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v82 = sub_2141D8BF8(&qword_254D6ECC0);
  MEMORY[0x24BDAC7A8](v82);
  v84 = (uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_2141D8BF8(&qword_254D6ECC8);
  MEMORY[0x24BDAC7A8](v83);
  v85 = (uint64_t)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_2141D8BF8(&qword_254D6ECD0);
  MEMORY[0x24BDAC7A8](v88);
  v91 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_2141D8BF8(&qword_254D6ECD8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v87 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v90 = (uint64_t)&v72 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v89 = (uint64_t)&v72 - v22;
  v23 = type metadata accessor for ChartModel.Scenegraph();
  v80 = *(_QWORD *)(v23 - 8);
  v81 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v93 = (uint64_t *)((char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  v25 = *(_QWORD *)(*(_QWORD *)&v106[0] + 216);
  swift_retain();
  swift_release();
  if (!v25)
  {
    __break(1u);
    goto LABEL_17;
  }
  v76 = v7;
  v77 = v6;
  v78 = a3;
  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(v25 + 72) & 1) != 0)
  {
LABEL_17:
    result = sub_214425628();
    __break(1u);
    return result;
  }
  v26 = *(double *)(v25 + 56);
  v27 = *(double *)(v25 + 64);
  v28 = *(double *)(v25 + 40);
  v29 = *(double *)(v25 + 48);
  swift_release();
  sub_21441B648(v106);
  v30 = LOBYTE(v106[0]);
  sub_2143BCEE4((uint64_t)v106);
  v31 = sub_214424650();
  sub_21442465C();
  v32 = 0.0;
  if (sub_21442465C() != v31)
    v26 = 0.0;
  v33 = sub_214424668();
  sub_21442465C();
  if (sub_21442465C() != v33)
    v28 = 0.0;
  v34 = sub_214424650();
  sub_21442465C();
  if (sub_21442465C() == v34)
    v35 = v27;
  else
    v35 = 0.0;
  v36 = sub_214424668();
  sub_21442465C();
  if (sub_21442465C() == v36)
    v32 = v29;
  sub_214423E1C();
  v38 = v37;
  v40 = v39;
  v41 = sub_214411E5C(0, v37, v39);
  v42 = sub_214411E5C(1, v38, v40);
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  sub_21441B284(v106);
  v43 = v93;
  sub_2142D9528((uint64_t)v106, (uint64_t)v93, v41, v42, v38, v40);
  swift_release();
  sub_2141E610C((uint64_t)v106);
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  sub_2142DA9CC(0, (uint64_t)v107, v38, v40);
  swift_release();
  sub_2141D8BF8(&qword_254D6ECA0);
  sub_214424C80();
  sub_2142DA9CC(1, (uint64_t)v106, v38, v40);
  swift_release();
  v44 = &v13[v11[12]];
  *(_QWORD *)v44 = swift_getKeyPath();
  v44[90] = 0;
  v45 = &v13[v11[13]];
  *(_QWORD *)v45 = swift_getKeyPath();
  v45[80] = 0;
  v46 = &v13[v11[14]];
  v99 = 0;
  v100 = 0;
  v101 = -1;
  sub_21441DE04(v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441DE60);
  sub_21441DE04(v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441DE60);
  sub_2141D8BF8(qword_254D6A808);
  sub_214424A70();
  v47 = v103;
  v48 = v104;
  *(_OWORD *)v46 = v102;
  v46[16] = v47;
  *((_QWORD *)v46 + 3) = v48;
  v49 = &v13[v11[15]];
  v99 = 0;
  v100 = 0;
  v101 = -1;
  sub_214424A70();
  v50 = v103;
  v51 = v104;
  *(_OWORD *)v49 = v102;
  v49[16] = v50;
  *((_QWORD *)v49 + 3) = v51;
  LODWORD(v79) = v30;
  *v13 = v30;
  v52 = (uint64_t)&v13[v11[9]];
  v53 = *(_QWORD *)(a2 + 16);
  v73 = *(_QWORD *)(a2 + 24);
  v74 = v53;
  sub_214413E4C(v43, v53, v73, v52, v26, v28, v35, v32);
  sub_2141E801C((uint64_t)v107, (uint64_t)&v13[v11[10]], qword_254D6A960);
  sub_2141E801C((uint64_t)v106, (uint64_t)&v13[v11[11]], qword_254D6A960);
  LOBYTE(v45) = sub_214424680();
  v54 = v84;
  sub_2141E070C((uint64_t)v13, v84, &qword_254D6ECB8);
  v55 = v54 + *(int *)(v82 + 36);
  *(_BYTE *)v55 = (_BYTE)v45;
  *(double *)(v55 + 8) = -v26;
  *(double *)(v55 + 16) = -v28;
  *(double *)(v55 + 24) = -v35;
  *(double *)(v55 + 32) = -v32;
  *(_BYTE *)(v55 + 40) = 0;
  sub_2141E0750((uint64_t)v13, &qword_254D6ECB8);
  sub_21442477C();
  v82 = v108;
  v56 = v109;
  v57 = v110;
  v58 = v111;
  v59 = v85;
  sub_2141E070C(v54, v85, &qword_254D6ECC0);
  v60 = v59 + *(int *)(v83 + 36);
  *(_OWORD *)v60 = v82;
  *(_QWORD *)(v60 + 16) = v56;
  *(_QWORD *)(v60 + 24) = v57;
  *(_BYTE *)(v60 + 32) = v58;
  *(_WORD *)(v60 + 33) = 256;
  sub_2141E0750(v54, &qword_254D6ECC0);
  KeyPath = swift_getKeyPath();
  v62 = (uint64_t)v43;
  v63 = v86;
  sub_2141FDEA0(v62, v86, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v63, 0, 1, v81);
  v64 = (uint64_t)v91;
  v65 = (uint64_t *)&v91[*(int *)(v88 + 36)];
  v66 = sub_2141D8BF8(&qword_254D6ECE0);
  sub_2141E070C(v63, (uint64_t)v65 + *(int *)(v66 + 28), qword_253F13E08);
  *v65 = KeyPath;
  sub_2141E070C(v59, v64, &qword_254D6ECC8);
  sub_2141E0750(v63, qword_253F13E08);
  sub_2141E0750(v59, &qword_254D6ECC8);
  sub_21441B648(&v102);
  sub_2141E801C((uint64_t)&v105, (uint64_t)&v99, &qword_253F13438);
  sub_2141E070C((uint64_t)&v99, (uint64_t)&v94, &qword_253F13438);
  if (*((_QWORD *)&v95 + 1))
  {
    v97[0] = v94;
    v97[1] = v95;
    v98 = v96;
    v67 = v75;
    sub_21441450C((uint64_t)v97, v79, v75);
    sub_2141E070C(v67, (uint64_t)v77, &qword_254D6ECB0);
    swift_storeEnumTagMultiPayload();
    sub_21441F194();
    sub_21441F25C();
    v68 = (uint64_t)v87;
    sub_2144243EC();
    sub_2141E0750(v67, &qword_254D6ECB0);
    sub_2141DEB7C((uint64_t)v97);
  }
  else
  {
    sub_2141E0750((uint64_t)&v94, &qword_253F13438);
    sub_2141E070C(v64, (uint64_t)v77, &qword_254D6ECD0);
    swift_storeEnumTagMultiPayload();
    sub_21441F194();
    sub_21441F25C();
    v68 = (uint64_t)v87;
    sub_2144243EC();
  }
  v69 = v90;
  sub_2141E801C(v68, v90, &qword_254D6ECD8);
  sub_21441DE04(v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
  sub_21441DE04(v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
  sub_2141E0750((uint64_t)&v99, &qword_253F13438);
  sub_2141E0750(v64, &qword_254D6ECD0);
  v70 = v89;
  sub_2141E801C(v69, v89, &qword_254D6ECD8);
  sub_2141E801C(v70, v78, &qword_254D6ECD8);
  return sub_2141DD370((uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
}

uint64_t sub_214413E4C@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t *);
  uint64_t v57;

  v54 = a4;
  v52 = sub_2141D8BF8(&qword_254D6ED20);
  MEMORY[0x24BDAC7A8](v52);
  v53 = (_QWORD *)((char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = sub_2141D8BF8(&qword_254D6ED28);
  MEMORY[0x24BDAC7A8](v45);
  v17 = (_QWORD *)((char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = sub_2141D8BF8(&qword_253F13250);
  MEMORY[0x24BDAC7A8](v46);
  v19 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_2141D8BF8(&qword_254D6ED30);
  v20 = MEMORY[0x24BDAC7A8](v49);
  v22 = (char *)v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v51 = (uint64_t)v44 - v23;
  v24 = sub_2141D8BF8(&qword_254D6ED38);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v47 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v50 = (uint64_t)v44 - v27;
  v48 = sub_2141D8BF8(&qword_254D6ED40);
  MEMORY[0x24BDAC7A8](v48);
  v29 = (char *)v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for RenderBasedChartView(0, a2, a3, v30);
  sub_2144122F0(a1, v31, (uint64_t)v19);
  v32 = (uint64_t (*)(uint64_t *))sub_2144112E4(v31);
  v34 = (uint64_t)v32;
  v44[0] = a2;
  v44[1] = a3;
  if (v32)
  {
    v56 = v32;
    v57 = v33;
    sub_2144142D8((uint64_t)v19, &v56, &v55);
    *v17 = v55;
  }
  else
  {
    sub_2141E070C((uint64_t)v19, (uint64_t)v17, &qword_253F13250);
  }
  swift_storeEnumTagMultiPayload();
  sub_21441F424();
  sub_2144243EC();
  v35 = v51;
  sub_2141E801C((uint64_t)v22, v51, &qword_254D6ED30);
  sub_2141D972C(v34);
  sub_2141E0750((uint64_t)v19, &qword_253F13250);
  v36 = (uint64_t (*)(uint64_t *))sub_214411394(v31);
  v38 = (uint64_t)v36;
  if (v36)
  {
    v56 = v36;
    v57 = v37;
    sub_2144143DC(v35, &v56, &v55);
    *v53 = v55;
  }
  else
  {
    sub_2141E070C(v35, (uint64_t)v53, &qword_254D6ED30);
  }
  swift_storeEnumTagMultiPayload();
  sub_21441F028(&qword_254D6ED78, &qword_254D6ED30, (uint64_t (*)(void))sub_21441F424);
  v39 = (uint64_t)v47;
  sub_2144243EC();
  v40 = v50;
  sub_2141E801C(v39, v50, &qword_254D6ED38);
  sub_2141D972C(v38);
  sub_2141E0750(v35, &qword_254D6ED30);
  v41 = sub_214424680();
  sub_2141E070C(v40, (uint64_t)v29, &qword_254D6ED38);
  v42 = &v29[*(int *)(v48 + 36)];
  *v42 = v41;
  *((double *)v42 + 1) = a5;
  *((double *)v42 + 2) = a6;
  *((double *)v42 + 3) = a7;
  *((double *)v42 + 4) = a8;
  v42[40] = 0;
  sub_2141E0750(v40, &qword_254D6ED38);
  return sub_2141E801C((uint64_t)v29, v54, &qword_254D6ED40);
}

uint64_t sub_2144142D8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_2141D8BF8(&qword_253F13250);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v16 - v10;
  v12 = *a2;
  sub_2141E070C(a1, (uint64_t)&v16 - v10, &qword_253F13250);
  sub_2141E070C((uint64_t)v11, (uint64_t)v9, &qword_253F13250);
  sub_21441F424();
  v13 = sub_214424B18();
  sub_2141E0750((uint64_t)v11, &qword_253F13250);
  v17 = v13;
  v14 = v12(&v17);
  result = swift_release();
  *a3 = v14;
  return result;
}

uint64_t sub_2144143DC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_2141D8BF8(&qword_254D6ED30);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v16 - v10;
  v12 = *a2;
  sub_2141E070C(a1, (uint64_t)&v16 - v10, &qword_254D6ED30);
  sub_2141E070C((uint64_t)v11, (uint64_t)v9, &qword_254D6ED30);
  sub_21441F028(&qword_254D6ED78, &qword_254D6ED30, (uint64_t (*)(void))sub_21441F424);
  swift_retain();
  v13 = sub_214424B18();
  sub_2141E0750((uint64_t)v11, &qword_254D6ED30);
  v17 = v13;
  v14 = v12(&v17);
  swift_release();
  result = swift_release();
  *a3 = v14;
  return result;
}

uint64_t sub_21441450C@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v8[2];

  sub_2141D8BF8(&qword_254D6ECD0);
  sub_21441F25C();
  sub_2143C5BB0();
  sub_2144248F0();
  sub_21441F3E8(a1, (uint64_t)v8);
  v6 = sub_2141D8BF8(&qword_254D6ECB0);
  return sub_2143B7644(a2, v8, (_BYTE *)(a3 + *(int *)(v6 + 36)));
}

uint64_t sub_2144145B4@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, v6, a1);
  result = sub_214424A94();
  *a2 = sub_21441F124;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>))v8;
  a2[2] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>))result;
  a2[3] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>))sub_214414688;
  a2[4] = 0;
  return result;
}

uint64_t sub_214414688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ChartModel.Scenegraph();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + *(int *)(v4 + 64)) = a2;
    swift_retain();
    return swift_release();
  }
  return result;
}

__n128 sub_214414700@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  uint64_t v8;
  __n128 v9[8];
  __int16 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __int16 v19;
  __n128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];

  if ((sub_214411FB8(a1) & 1) != 0)
  {
    sub_2144145B4(a1, (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>))&v20);
    v11 = v20;
    v12 = v21;
    v13.n128_u64[0] = v22;
    sub_21441F118((uint64_t)&v11);
  }
  else
  {
    sub_214412ACC(a1, (uint64_t)v9);
    v17 = v9[6];
    v18 = v9[7];
    v19 = v10;
    v13 = v9[2];
    v14 = v9[3];
    v15 = v9[4];
    v16 = v9[5];
    v11 = v9[0];
    v12 = v9[1];
    sub_21441EF64((uint64_t)&v11);
  }
  sub_2141E801C((uint64_t)&v11, (uint64_t)&v8, &qword_253F13A48);
  sub_2141D8BF8(&qword_253F13A20);
  sub_2141D8BF8(&qword_253F132C8);
  sub_21441EF70();
  sub_21441F028(&qword_253F132C0, &qword_253F132C8, sub_21441F00C);
  sub_2144243EC();
  v4 = v27[0];
  *(_OWORD *)(a2 + 96) = v26;
  *(_OWORD *)(a2 + 112) = v4;
  *(_DWORD *)(a2 + 127) = *(_DWORD *)((char *)v27 + 15);
  v5 = v23;
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 48) = v5;
  v6 = v25;
  *(_OWORD *)(a2 + 64) = v24;
  *(_OWORD *)(a2 + 80) = v6;
  result = v21;
  *(__n128 *)a2 = v20;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_214414844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[8];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  uint64_t (*v57)@<X0>(uint64_t@<X0>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[7];
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[24];

  v40 = a4;
  v41 = a3;
  v42 = a2;
  v11 = type metadata accessor for RenderBasedChartView(0, a5, a6, a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v39 - v14;
  sub_214414700(v13, (uint64_t)&v49);
  v70 = v55;
  v71[0] = *(_OWORD *)v56;
  *(_DWORD *)((char *)v71 + 15) = *(_DWORD *)&v56[15];
  v66 = v51;
  v67 = v52;
  v68 = v53;
  v69 = v54;
  v64 = v49;
  v65 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a5;
  *(_QWORD *)(v17 + 24) = a6;
  v18 = v17 + v16;
  v19 = v42;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18, v15, v11);
  v20 = sub_214424C44();
  v78 = v70;
  *(_OWORD *)v79 = v71[0];
  *(_DWORD *)&v79[15] = *(_DWORD *)((char *)v71 + 15);
  v74 = v66;
  v75 = v67;
  v76 = v68;
  v77 = v69;
  v72 = v64;
  v73 = v65;
  v43 = v21;
  v44 = v20;
  if (!v19)
  {
    v22 = 0;
    v25 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if ((sub_214423D2C() & 1) != 0 || !*(_QWORD *)(v19 + 16))
  {
    swift_bridgeObjectRelease();
    v22 = 0;
    v25 = 0;
    v19 = 0;
LABEL_9:
    v26 = 0;
    v27 = 0;
    goto LABEL_10;
  }
  sub_21441154C(v11, (uint64_t)v61);
  sub_2141E801C((uint64_t)v61, (uint64_t)&v62, &qword_253F14EA0);
  v22 = v63;
  if (v63 <= 1)
  {
    KeyPath = swift_getKeyPath();
    v24 = swift_getKeyPath();
    *(_QWORD *)&v49 = KeyPath;
    BYTE8(v49) = 0;
    *(_QWORD *)&v50 = v24;
    BYTE8(v50) = 0;
    sub_21441E760();
    v22 = sub_214424B18();
    sub_21441DF90(v61);
  }
  v25 = swift_getKeyPath();
  v26 = swift_getKeyPath();
  v27 = (unint64_t)v40 - 3 < 2;
LABEL_10:
  v28 = v78;
  v29 = *(_OWORD *)v79;
  v45[6] = v78;
  v45[7] = *(_OWORD *)v79;
  v30 = v74;
  v31 = v75;
  v45[2] = v74;
  v45[3] = v75;
  v32 = v77;
  v45[4] = v76;
  v45[5] = v77;
  v34 = v72;
  v33 = v73;
  v45[0] = v72;
  v45[1] = v73;
  *(_QWORD *)&v46 = *(_QWORD *)&v79[16];
  *((_QWORD *)&v46 + 1) = sub_21441E2F8;
  v35 = v43;
  v36 = v44;
  *(_QWORD *)&v47 = v17;
  *((_QWORD *)&v47 + 1) = v44;
  v48 = v43;
  *(_OWORD *)(a7 + 64) = v76;
  *(_OWORD *)(a7 + 80) = v32;
  *(_OWORD *)(a7 + 96) = v28;
  *(_OWORD *)(a7 + 112) = v29;
  *(_OWORD *)a7 = v34;
  *(_OWORD *)(a7 + 16) = v33;
  *(_OWORD *)(a7 + 32) = v30;
  *(_OWORD *)(a7 + 48) = v31;
  v37 = v47;
  *(_OWORD *)(a7 + 128) = v46;
  *(_OWORD *)(a7 + 144) = v37;
  *(_QWORD *)(a7 + 160) = v35;
  *(_QWORD *)(a7 + 168) = v22;
  *(_QWORD *)(a7 + 176) = v25;
  *(_QWORD *)(a7 + 184) = v19;
  *(_QWORD *)(a7 + 192) = v26;
  *(_BYTE *)(a7 + 200) = v27;
  sub_21441E360((uint64_t)v45);
  sub_21441E4A0(v22);
  sub_21441E4F0(v22);
  v55 = v78;
  *(_OWORD *)v56 = *(_OWORD *)v79;
  v51 = v74;
  v52 = v75;
  v53 = v76;
  v54 = v77;
  v49 = v72;
  v50 = v73;
  *(_QWORD *)&v56[16] = *(_QWORD *)&v79[16];
  v57 = sub_21441E2F8;
  v58 = v17;
  v59 = v36;
  v60 = v35;
  return sub_21441E53C((uint64_t)&v49);
}

uint64_t sub_214414B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)@<X0>(uint64_t@<X3>, uint64_t@<X8>);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v33 = a2;
  v35 = a3;
  v36 = a4;
  v38 = type metadata accessor for RenderBasedChartView(0, a3, a4, a4);
  v34 = *(_QWORD *)(v38 - 8);
  v7 = *(_QWORD *)(v34 + 64);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)&v31 - v8;
  v9 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ChartModel.Scenegraph();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v31 - v17;
  sub_2141E070C(a1, (uint64_t)v11, qword_253F13E08);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    result = sub_2141E0750((uint64_t)v11, qword_253F13E08);
LABEL_7:
    v30 = 0;
    v26 = 0;
    goto LABEL_8;
  }
  sub_2141FE1E0((uint64_t)v11, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v20 = *(_QWORD *)&v18[*(int *)(v12 + 60)];
  if (!v20 || (v21 = *(_QWORD *)&v18[*(int *)(v12 + 64)]) == 0)
  {
    result = sub_2141DD370((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
    goto LABEL_7;
  }
  v22 = v34;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v32 = v21;
  v23(v37, v33, v38);
  sub_2141FDEA0((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v24 = (*(unsigned __int8 *)(v22 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v25 = (v7 + *(unsigned __int8 *)(v13 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v26 = (char *)swift_allocObject();
  v28 = v36;
  v27 = v37;
  *((_QWORD *)v26 + 2) = v35;
  *((_QWORD *)v26 + 3) = v28;
  v29 = v32;
  *((_QWORD *)v26 + 4) = v20;
  *((_QWORD *)v26 + 5) = v29;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v26[v24], v27, v38);
  sub_2141FE1E0((uint64_t)v16, (uint64_t)&v26[v25], (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  swift_retain();
  swift_retain();
  result = sub_2141DD370((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v30 = sub_21441EEC4;
LABEL_8:
  *(_QWORD *)a5 = v30;
  *(_QWORD *)(a5 + 8) = v26;
  *(_BYTE *)(a5 + 16) = 0;
  return result;
}

uint64_t sub_214414E00@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int *v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[6];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v31 = a4;
  v30 = a3;
  v33 = a2;
  *(_QWORD *)&v29 = a1;
  v6 = type metadata accessor for ChartModel.Scenegraph();
  MEMORY[0x24BDAC7A8](v6);
  v32 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2144240D4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ChartEnvironmentValues(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  sub_214423E28();
  v28 = v37;
  v15 = v38;
  v16 = v39;
  sub_214423E28();
  v29 = v34[5];
  v17 = v35;
  v18 = v36;
  v20 = type metadata accessor for RenderBasedChartView(0, v30, v31, v19);
  sub_21441B444((uint64_t)v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, &v14[*(int *)(v12 + 24)], v8);
  sub_2141DD370((uint64_t)v14, type metadata accessor for ChartEnvironmentValues);
  v21 = sub_214412150(v20);
  sub_21441B648(v34);
  v22 = v32;
  sub_2141FDEA0(v33, v32, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  *(_QWORD *)a5 = swift_getKeyPath();
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_BYTE *)(a5 + 32) = 0;
  *(_OWORD *)(a5 + 40) = v28;
  *(_QWORD *)(a5 + 56) = v15;
  *(_QWORD *)(a5 + 64) = v16;
  *(_OWORD *)(a5 + 72) = v29;
  *(_QWORD *)(a5 + 88) = v17;
  *(_QWORD *)(a5 + 96) = v18;
  v23 = (int *)type metadata accessor for ChartSeparateAxesContent(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a5 + v23[7], v11, v8);
  *(_BYTE *)(a5 + v23[8]) = v21;
  v24 = (_OWORD *)(a5 + v23[9]);
  v25 = v34[3];
  v24[2] = v34[2];
  v24[3] = v25;
  v24[4] = v34[4];
  v26 = v34[1];
  *v24 = v34[0];
  v24[1] = v26;
  return sub_2141FE1E0(v22, a5 + v23[10], (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
}

uint64_t sub_2144150B8()
{
  sub_2143A6290();
  swift_bridgeObjectRetain();
  return sub_214424230();
}

double sub_214415118(char a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  double MinX;
  CGFloat v19;
  BOOL v20;
  double v21;
  char v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double MinY;
  BOOL v28;
  CGFloat v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double v37;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  if ((a1 & 1) != 0)
  {
    v42.origin.x = a7;
    v42.origin.y = a8;
    v42.size.width = a9;
    v42.size.height = a10;
    MinX = CGRectGetMinX(v42);
    v43.origin.x = a3;
    v43.origin.y = a4;
    v43.size.width = a5;
    v43.size.height = a6;
    v19 = CGRectGetMinX(v43);
    v37 = MinX;
    v20 = MinX < v19;
    v21 = v19;
    v22 = v20;
    v44.origin.x = a7;
    v23 = a8;
    v44.origin.y = a8;
    v44.size.width = a9;
    v44.size.height = a10;
    CGRectGetMaxX(v44);
    v24 = a3;
    v45.origin.x = a3;
    v25 = a4;
    v45.origin.y = a4;
    v45.size.width = a5;
    v45.size.height = a6;
    CGRectGetMaxX(v45);
    if ((a2 & 1) == 0)
    {
      v28 = 0;
      v29 = a6;
      v30 = a5;
      if (v37 < v21)
        goto LABEL_10;
      goto LABEL_12;
    }
    v26 = a5;
  }
  else
  {
    v23 = a8;
    v24 = a3;
    v25 = a4;
    if ((a2 & 1) == 0)
    {
      v30 = a5;
      v29 = a6;
      v31 = CGRectGetMinX(*(CGRect *)&a3) + -10000.0;
      v53.origin.x = v24;
      v53.origin.y = a4;
      v53.size.width = v30;
      v53.size.height = a6;
      CGRectGetMaxX(v53);
      v54.origin.x = v24;
      v54.origin.y = v25;
      v54.size.width = v30;
      v54.size.height = a6;
      CGRectGetMinY(v54);
      goto LABEL_17;
    }
    v22 = 0;
    v26 = a5;
  }
  v46.origin.x = a7;
  v46.origin.y = v23;
  v46.size.width = a9;
  v46.size.height = a10;
  MinY = CGRectGetMinY(v46);
  v47.origin.x = v24;
  v47.origin.y = v25;
  v47.size.width = v26;
  v47.size.height = a6;
  v28 = MinY < CGRectGetMinY(v47);
  v48.origin.x = a7;
  v48.origin.y = v23;
  v29 = a6;
  v48.size.width = a9;
  v48.size.height = a10;
  v30 = a5;
  CGRectGetMaxY(v48);
  v49.origin.x = v24;
  v49.origin.y = v25;
  v49.size.width = a5;
  v49.size.height = a6;
  CGRectGetMaxY(v49);
  if ((v22 & 1) != 0)
  {
LABEL_10:
    v50.origin.x = v24;
    v50.origin.y = v25;
    v50.size.width = v30;
    v50.size.height = v29;
    v31 = CGRectGetMinX(v50);
    goto LABEL_13;
  }
LABEL_12:
  v51.origin.x = v24;
  v51.origin.y = v25;
  v51.size.width = v30;
  v51.size.height = v29;
  v31 = CGRectGetMinX(v51) + -10000.0;
LABEL_13:
  v52.origin.x = v24;
  v52.origin.y = v25;
  v52.size.width = v30;
  v52.size.height = v29;
  CGRectGetMaxX(v52);
  v32 = v24;
  v33 = v25;
  v34 = v30;
  v35 = v29;
  if (v28)
    CGRectGetMinY(*(CGRect *)&v32);
  else
    CGRectGetMinY(*(CGRect *)&v32);
LABEL_17:
  v55.origin.x = v24;
  v55.origin.y = v25;
  v55.size.width = v30;
  v55.size.height = v29;
  CGRectGetMaxY(v55);
  return v31;
}

uint64_t sub_214415438@<X0>(uint64_t a1@<X8>)
{
  CGFloat *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v77;
  char v78;
  CGFloat v79;
  CGFloat v80;
  double v81;
  CGFloat v82;
  double v83;
  CGFloat v84;
  double v85;
  CGFloat v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  char v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t (*v135)@<X0>(uint64_t *@<X8>);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  CGFloat v141;
  CGFloat v142;
  CGFloat v143;
  CGFloat v144;
  char v145;
  void (*v146)(char *, uint64_t);
  double v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t (*v162)@<X0>(uint64_t *@<X8>);
  uint64_t (*v163)@<X0>(uint64_t *@<X8>);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[6];
  __int128 v182;
  void (*v183)(char *, uint64_t);
  char *v184;
  double v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  CGFloat *v195;
  uint64_t v196;
  void (*v197)(char *, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  _OWORD v229[2];
  char v230;
  _QWORD v231[4];
  char v232;
  _OWORD v233[2];
  char v234;
  _QWORD v235[4];
  char v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  _QWORD v241[4];
  char v242;
  CGRect v243;
  CGRect v244;
  CGRect v245;
  CGRect v246;

  v219 = a1;
  v217 = sub_2141D8BF8(&qword_253F134A0);
  MEMORY[0x24BDAC7A8](v217);
  v195 = (CGFloat *)((char *)v181 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v3);
  v197 = (void (*)(char *, uint64_t, uint64_t))((char *)v181 - v4);
  v5 = sub_2141D8BF8(&qword_253F134D8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_2141D8BF8(&qword_253F134D0);
  MEMORY[0x24BDAC7A8](v213);
  v215 = (uint64_t)v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_2141D8BF8(&qword_253F15CA0);
  MEMORY[0x24BDAC7A8](v214);
  v203 = (uint64_t)v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(&qword_253F134E8);
  MEMORY[0x24BDAC7A8](v10);
  v216 = (char *)v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_2141D8BF8(&qword_253F15BA0);
  MEMORY[0x24BDAC7A8](v206);
  v207 = (_QWORD *)((char *)v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v208 = sub_2144240D4();
  v13 = *(_QWORD *)(v208 - 8);
  MEMORY[0x24BDAC7A8](v208);
  v15 = (char *)v181 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ChartModel.Scenegraph();
  MEMORY[0x24BDAC7A8](v16);
  v188 = (char *)v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v209 = (uint64_t)v181 - v19;
  v20 = type metadata accessor for SgCanvasRenderer(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v181 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v198 = (uint64_t)v181 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v181 - v26;
  *(_QWORD *)&v211 = sub_2141D8BF8(&qword_253F15B50);
  MEMORY[0x24BDAC7A8](v211);
  v199 = (uint64_t)v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v194 = (char *)v181 - v30;
  *(_QWORD *)&v218 = sub_2141D8BF8(&qword_253F15B78);
  MEMORY[0x24BDAC7A8](v218);
  v200 = (uint64_t)v181 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v205 = (uint64_t)v181 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v204 = (uint64_t)v181 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v210 = (uint64_t)v181 - v37;
  v38 = sub_2141D8BF8(&qword_253F15BB0);
  MEMORY[0x24BDAC7A8](v38);
  v191 = (char *)v181 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v201 = (uint64_t)v181 - v41;
  MEMORY[0x24BDAC7A8](v42);
  v189 = (char *)v181 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v190 = (uint64_t)v181 - v45;
  MEMORY[0x24BDAC7A8](v46);
  v202 = (uint64_t)v181 - v47;
  MEMORY[0x24BDAC7A8](v48);
  v187 = (char *)v181 - v49;
  MEMORY[0x24BDAC7A8](v50);
  v196 = (uint64_t)v181 - v51;
  MEMORY[0x24BDAC7A8](v52);
  v212 = (uint64_t)v181 - v53;
  v54 = type metadata accessor for ChartSeparateAxesContent(0);
  v55 = *((unsigned __int8 *)v1 + *(int *)(v54 + 32));
  if (*((_BYTE *)v1 + *(int *)(v54 + 32)))
  {
    v56 = v54;
    v192 = v10;
    v193 = v5;
    v186 = v7;
    if (v55 == 1)
    {
      sub_214415118(0, 0, v1[9], v1[10], v1[11], v1[12], v1[5], v1[6], v1[7], v1[8]);
      v57 = (uint64_t)v1 + *(int *)(v56 + 40);
      v58 = v209;
      sub_2141FDEA0(v57, v209, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
      sub_2141D8BF8(&qword_253F15D40);
      v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_2144271D0;
      v60 = *(_QWORD *)(v57 + 24);
      *(_QWORD *)(v59 + 32) = *(_QWORD *)(v57 + 16);
      *(_QWORD *)(v59 + 40) = v60;
      v61 = (int *)type metadata accessor for SgGroup(0);
      v62 = swift_allocBox();
      v64 = v63;
      v65 = (char *)v63 + v61[6];
      v66 = type metadata accessor for SgClipRect(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
      *v64 = 0;
      v64[1] = v59;
      *(_QWORD *)((char *)v64 + v61[7]) = 0x3FF0000000000000;
      *(_QWORD *)((char *)v64 + v61[8]) = 0;
      *(_QWORD *)((char *)v64 + v61[9]) = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v64 + v61[10]) = 0;
      memset(v241, 0, sizeof(v241));
      v242 = 1;
      swift_retain();
      swift_retain();
      sub_2141FAF88(v58, v62, (uint64_t)v241, (uint64_t)v22);
      sub_21442477C();
      v218 = v237;
      v67 = v238;
      v68 = v239;
      LOBYTE(v64) = v240;
      v69 = (uint64_t)v195;
      sub_2141FDEA0((uint64_t)v22, (uint64_t)v195, type metadata accessor for SgCanvasRenderer);
      v70 = v69 + *(int *)(v217 + 36);
      *(_OWORD *)v70 = v218;
      *(_QWORD *)(v70 + 16) = v67;
      *(_QWORD *)(v70 + 24) = v68;
      *(_BYTE *)(v70 + 32) = (_BYTE)v64;
      *(_WORD *)(v70 + 33) = 256;
      sub_2141DD370((uint64_t)v22, type metadata accessor for SgCanvasRenderer);
      v71 = &qword_253F134A0;
      v72 = v69;
      v73 = v197;
      sub_2141E801C(v72, (uint64_t)v197, &qword_253F134A0);
      sub_2141E070C((uint64_t)v73, v215, &qword_253F134A0);
      swift_storeEnumTagMultiPayload();
      sub_2141D9054(&qword_253F15C98, &qword_253F15CA0, MEMORY[0x24BDF5428]);
      sub_21441AB0C();
      v74 = (uint64_t)v216;
      sub_2144243EC();
      sub_2141E070C(v74, (uint64_t)v186, &qword_253F134E8);
      swift_storeEnumTagMultiPayload();
      sub_21441AA88();
      sub_2144243EC();
      sub_2141E0750(v74, &qword_253F134E8);
      v75 = (uint64_t)v73;
    }
    else
    {
      v77 = sub_214424650();
      sub_21442465C();
      v78 = sub_21442465C() == v77;
      v79 = v1[9];
      v80 = v1[10];
      v81 = v1[11];
      v82 = v1[12];
      v83 = v1[5];
      v84 = v1[6];
      v85 = v1[7];
      v86 = v1[8];
      v87 = sub_214415118(v78, 0, v79, v80, v81, v82, v83, v84, v85, v86);
      v181[3] = v88;
      *(double *)&v181[4] = v87;
      v181[5] = v90;
      *(_QWORD *)&v182 = v89;
      v91 = sub_214424668();
      sub_21442465C();
      v92 = sub_21442465C() == v91;
      v185 = sub_214415118(0, v92, v79, v80, v81, v82, v83, v84, v85, v86);
      v181[1] = v94;
      v181[2] = v93;
      v95 = (uint64_t)v1 + *(int *)(v56 + 40);
      v96 = v209;
      sub_2141FDEA0(v95, v209, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
      v97 = *(_QWORD *)(v95 + 16);
      swift_retain();
      v243.origin.x = v79;
      v243.origin.y = v80;
      v243.size.width = v81;
      v243.size.height = v82;
      v244 = CGRectOffset(v243, -v83, 0.0);
      x = v244.origin.x;
      y = v244.origin.y;
      width = v244.size.width;
      v244.origin.x = *(CGFloat *)(v95 + 1152);
      v244.origin.y = *(CGFloat *)(v95 + 1160);
      v244.size.width = *(CGFloat *)(v95 + 1168);
      v181[0] = v95;
      v101 = (char *)v1 + *(int *)(v56 + 28);
      v235[0] = sub_2143A5104(v244.origin.x, v244.origin.y, v244.size.width, *(double *)(v95 + 1176), x, y, width, v244.size.height);
      v235[1] = v102;
      v235[2] = v103;
      v235[3] = v104;
      v236 = 0;
      sub_2141FAF88(v96, v97, (uint64_t)v235, (uint64_t)v27);
      v106 = *MEMORY[0x24BDED118];
      v107 = v13;
      v108 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
      v195 = v1;
      v109 = v208;
      v108(v15, v106, v208);
      v110 = sub_2144240C8();
      v111 = *(void (**)(char *, uint64_t))(v107 + 8);
      v111(v15, v109);
      v105 = v81 - v85;
      if ((v110 & 1) != 0)
        v83 = v105 - v83;
      v112 = (uint64_t)v194;
      sub_2141FDEA0((uint64_t)v27, (uint64_t)v194, type metadata accessor for SgCanvasRenderer);
      v113 = v112 + *(int *)(v211 + 36);
      *(double *)v113 = v83;
      *(_QWORD *)(v113 + 8) = 0;
      sub_2141DD370((uint64_t)v27, type metadata accessor for SgCanvasRenderer);
      LODWORD(v209) = v106;
      v197 = v108;
      v108(v15, v106, v109);
      v184 = v101;
      sub_2144240C8();
      v114 = v109;
      v115 = (uint64_t)v195;
      v183 = v111;
      v111(v15, v114);
      sub_21442477C();
      v182 = v221;
      v116 = v222;
      v117 = v223;
      v118 = v224;
      v119 = v210;
      sub_2141E070C(v112, v210, &qword_253F15B50);
      v120 = v119 + *(int *)(v218 + 36);
      *(_OWORD *)v120 = v182;
      *(_QWORD *)(v120 + 16) = v116;
      *(_QWORD *)(v120 + 24) = v117;
      *(_BYTE *)(v120 + 32) = v118;
      *(_WORD *)(v120 + 33) = 256;
      sub_2141E0750(v112, &qword_253F15B50);
      v121 = *(_OWORD *)(v115 + 16);
      v233[0] = *(_OWORD *)v115;
      v233[1] = v121;
      v234 = *(_BYTE *)(v115 + 32);
      sub_2141E801C((uint64_t)v233, (uint64_t)&v237, &qword_253F15AF0);
      sub_2141FE404((uint64_t)&v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2144071EC);
      v122 = sub_21441C120();
      v124 = v123;
      v126 = v125;
      sub_2141FE404((uint64_t)v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214407638);
      sub_2141D972C(v126);
      if (v122)
      {
        v127 = swift_allocObject();
        *(_QWORD *)(v127 + 16) = v122;
        *(_QWORD *)(v127 + 24) = v124;
        v128 = v119;
        v129 = v204;
        sub_2141E070C(v128, v204, &qword_253F15B78);
        sub_2141E070C(v129, v205, &qword_253F15B78);
        sub_21441C2F8();
        swift_retain();
        v130 = sub_214424B18();
        v194 = v15;
        v131 = v208;
        sub_2141E0750(v129, &qword_253F15B78);
        v241[0] = v130;
        v132 = (*(uint64_t (**)(_QWORD *))(v127 + 16))(v241);
        swift_release();
        *v207 = v132;
        swift_storeEnumTagMultiPayload();
        v133 = v187;
        v134 = v131;
        v15 = v194;
        sub_2144243EC();
        v135 = sub_214420798;
        sub_2141D972C((uint64_t)sub_214420798);
        v136 = (uint64_t)v188;
      }
      else
      {
        sub_2141E070C(v119, (uint64_t)v207, &qword_253F15B78);
        swift_storeEnumTagMultiPayload();
        sub_21441C2F8();
        v133 = v187;
        sub_2144243EC();
        v135 = 0;
        v136 = (uint64_t)v188;
        v134 = v208;
      }
      v137 = v181[0];
      v138 = (uint64_t)v133;
      v139 = v196;
      sub_2141E801C(v138, v196, &qword_253F15BB0);
      sub_2141D972C((uint64_t)v135);
      sub_2141E0750(v210, &qword_253F15B78);
      sub_2141E801C(v139, v212, &qword_253F15BB0);
      sub_2141FDEA0(v137, v136, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
      v140 = *(_QWORD *)(v137 + 24);
      v141 = *(double *)(v115 + 72);
      v142 = *(double *)(v115 + 80);
      v143 = *(double *)(v115 + 88);
      v144 = *(double *)(v115 + 96);
      v197(v15, v209, v134);
      swift_retain();
      v145 = sub_2144240C8();
      v146 = v183;
      v183(v15, v134);
      v147 = 0.0;
      if ((v145 & 1) != 0)
        v147 = *(double *)(v115 + 56) - *(double *)(v115 + 88);
      v148 = *(double *)(v115 + 48);
      v245.origin.x = v141;
      v245.origin.y = v142;
      v245.size.width = v143;
      v245.size.height = v144;
      v246 = CGRectOffset(v245, v147, -v148);
      v231[0] = sub_2143A5104(*(double *)(v137 + 1152), *(double *)(v137 + 1160), *(double *)(v137 + 1168), *(double *)(v137 + 1176), v246.origin.x, v246.origin.y, v246.size.width, v246.size.height);
      v231[1] = v149;
      v231[2] = v150;
      v231[3] = v151;
      v232 = 0;
      v152 = v198;
      sub_2141FAF88(v136, v140, (uint64_t)v231, v198);
      v153 = v199;
      sub_2141FDEA0(v152, v199, type metadata accessor for SgCanvasRenderer);
      v154 = v153 + *(int *)(v211 + 36);
      *(_QWORD *)v154 = 0;
      *(double *)(v154 + 8) = v148;
      sub_2141DD370(v152, type metadata accessor for SgCanvasRenderer);
      v197(v15, v209, v134);
      sub_2144240C8();
      v146(v15, v134);
      sub_21442477C();
      v211 = v225;
      v155 = v226;
      v156 = v227;
      v157 = v228;
      v158 = v200;
      sub_2141E070C(v153, v200, &qword_253F15B50);
      v159 = v158 + *(int *)(v218 + 36);
      *(_OWORD *)v159 = v211;
      *(_QWORD *)(v159 + 16) = v155;
      *(_QWORD *)(v159 + 24) = v156;
      *(_BYTE *)(v159 + 32) = v157;
      *(_WORD *)(v159 + 33) = 256;
      sub_2141E0750(v153, &qword_253F15B50);
      v160 = *(_OWORD *)(v115 + 16);
      v229[0] = *(_OWORD *)v115;
      v229[1] = v160;
      v230 = *(_BYTE *)(v115 + 32);
      sub_2141E801C((uint64_t)v229, (uint64_t)v241, &qword_253F15AF0);
      sub_2141FE404((uint64_t)v241, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2144071EC);
      v161 = sub_21441C120();
      v163 = v162;
      v165 = v164;
      sub_2141FE404((uint64_t)v229, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214407638);
      sub_2141D972C(v161);
      if (v163)
      {
        v166 = swift_allocObject();
        *(_QWORD *)(v166 + 16) = v163;
        *(_QWORD *)(v166 + 24) = v165;
        v167 = v204;
        sub_2141E070C(v158, v204, &qword_253F15B78);
        sub_2141E070C(v167, v205, &qword_253F15B78);
        sub_21441C2F8();
        swift_retain();
        v168 = sub_214424B18();
        sub_2141E0750(v167, &qword_253F15B78);
        v220 = v168;
        v169 = (*(uint64_t (**)(uint64_t *))(v166 + 16))(&v220);
        swift_release();
        *v207 = v169;
        swift_storeEnumTagMultiPayload();
        v170 = (uint64_t)v189;
        sub_2144243EC();
        v163 = sub_21441C424;
        sub_2141D972C((uint64_t)sub_21441C424);
      }
      else
      {
        sub_2141E070C(v158, (uint64_t)v207, &qword_253F15B78);
        swift_storeEnumTagMultiPayload();
        sub_21441C2F8();
        v170 = (uint64_t)v189;
        sub_2144243EC();
      }
      v171 = (uint64_t)v186;
      v172 = v190;
      v173 = (uint64_t)v191;
      v71 = &qword_253F15BB0;
      sub_2141E801C(v170, v190, &qword_253F15BB0);
      sub_2141D972C((uint64_t)v163);
      sub_2141E0750(v158, &qword_253F15B78);
      v174 = v172;
      v175 = v202;
      sub_2141E801C(v174, v202, &qword_253F15BB0);
      v176 = v212;
      v177 = v201;
      sub_2141E070C(v212, v201, &qword_253F15BB0);
      sub_2141E070C(v175, v173, &qword_253F15BB0);
      v178 = v203;
      sub_2141E070C(v177, v203, &qword_253F15BB0);
      v179 = sub_2141D8BF8(&qword_254D6EC58);
      sub_2141E070C(v173, v178 + *(int *)(v179 + 48), &qword_253F15BB0);
      sub_2141E0750(v173, &qword_253F15BB0);
      sub_2141E0750(v177, &qword_253F15BB0);
      sub_2141E070C(v178, v215, &qword_253F15CA0);
      swift_storeEnumTagMultiPayload();
      sub_2141D9054(&qword_253F15C98, &qword_253F15CA0, MEMORY[0x24BDF5428]);
      sub_21441AB0C();
      v180 = (uint64_t)v216;
      sub_2144243EC();
      sub_2141E0750(v178, &qword_253F15CA0);
      sub_2141E070C(v180, v171, &qword_253F134E8);
      swift_storeEnumTagMultiPayload();
      sub_21441AA88();
      sub_2144243EC();
      sub_2141E0750(v180, &qword_253F134E8);
      sub_2141E0750(v175, &qword_253F15BB0);
      v75 = v176;
    }
    return sub_2141E0750(v75, v71);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_21441AA88();
    return sub_2144243EC();
  }
}

uint64_t sub_214416674@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  _BYTE v13[16];

  v2 = v1;
  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v2, v4, v6);
  sub_2144241F4();
  v9 = type metadata accessor for ChartEnvironmentValues(0);
  sub_214424200();
  sub_2144241D0();
  sub_2144241AC();
  *(_QWORD *)(a1 + *(int *)(v9 + 28)) = v10;
  sub_2144241B8();
  sub_214391770();
  sub_214424224();
  v11 = v13[15];
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  *(_BYTE *)(a1 + *(int *)(v9 + 36)) = v11;
  return result;
}

int64x2_t sub_214416774()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4059000000000000uLL);
  xmmword_253F137A0 = (__int128)result;
  return result;
}

__n128 sub_21441678C()
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  xmmword_253F137B8 = (__int128)result;
  return result;
}

void sub_2144167A0()
{
  qword_254D6EC38 = 0x4020000000000000;
}

void sub_2144167B0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[3];
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v27 = a6;
  v28 = a5;
  v24 = a3;
  v22 = a1;
  v25 = a2;
  v18 = a2 & 1;
  v26 = a4;
  v17 = a4 & 1;
  v16 = sub_214423D98();
  v15[2] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v7);
  v15[1] = (char *)v15 - v8;
  v9 = sub_214423E88();
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v13 = *(unsigned __int8 *)(v6 + 32);
  v21 = *(_QWORD *)(v6 + 40);
  v20 = *(_QWORD *)(v6 + 48);
  v29 = *(_BYTE *)(v6 + 56);
  v19 = *(_QWORD *)(v6 + 64);
  v14 = (char *)&loc_214416960 + *((int *)qword_214417028 + v13);
  v23 = v13;
  __asm { BR              X9 }
}

void sub_214416978()
{
  uint64_t v0;
  char v1;
  double *v2;
  uint64_t v3;
  double v4;
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;

  sub_2143836AC(6);
  if ((v1 & 1) == 0)
  {
    v4 = *(double *)(v3 - 328);
    v5 = *(_DWORD *)(v3 - 276);
    v6 = *(_DWORD *)(v3 - 280);
    v7 = *(double *)(v3 - 288);
    v8 = *(double *)(v3 - 304);
    if ((v6 & 1) != 0)
      goto LABEL_8;
LABEL_7:
    v8 = v8 - (v2[1] + v2[3]);
    goto LABEL_8;
  }
  v5 = *(_DWORD *)(v3 - 276);
  v6 = *(_DWORD *)(v3 - 280);
  v7 = *(double *)(v3 - 288);
  v8 = *(double *)(v3 - 304);
  if (qword_254D68F60 != -1)
    swift_once();
  v4 = *(double *)&qword_254D6EC38;
  if ((v6 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  if ((v5 & 1) == 0)
    v7 = v7 - (*v2 + v2[2]);
  *(_BYTE *)(v3 - 168) = v6 & 1;
  *(_BYTE *)(v3 - 176) = v5 & 1;
  sub_214423E64();
  v9 = *v2;
  v10 = v2[1];
  v11 = v2[2];
  *(double *)(v3 - 264) = v12 + v10 + v2[3];
  v14 = v13 + v9 + v11;
  v15 = v4 + v10;
  v16 = v4 + v9;
  v17 = v12 - (v4 + v4);
  v18 = v13 - (v4 + v4);
  v19 = v17;
  v20 = v18;
  *(_BYTE *)(v3 - 184) = 0;
  *(_BYTE *)(v3 - 192) = 0;
  sub_214423E64();
  v23 = v21;
  v24 = v22;
  v25 = *(_QWORD *)(v3 - 296);
  if (*(_BYTE *)(v3 - 160) == 1)
  {
    *(double *)(v3 - 272) = v10;
    v26 = v9;
    v27 = v17;
    v28 = v18;
    v29 = v16;
    v30 = v15;
    v31 = v21;
    v32 = v22;
    if ((_DWORD)v25)
      sub_214424BF0();
    else
      sub_214424BFC();
    v24 = v32;
    v23 = v31;
    v15 = v30;
    v16 = v29;
    v18 = v28;
    v17 = v27;
    v9 = v26;
    v10 = *(double *)(v3 - 272);
  }
  v33 = sub_21441D17C(v23, v24, v15, v16, v17, v18);
  *(_QWORD *)v0 = *(_QWORD *)(v3 - 264);
  *(double *)(v0 + 8) = v14;
  *(double *)(v0 + 16) = v8;
  *(_BYTE *)(v0 + 24) = v6 & 1;
  *(double *)(v0 + 32) = v7;
  *(_BYTE *)(v0 + 40) = v5 & 1;
  *(double *)(v0 + 48) = v10;
  *(double *)(v0 + 56) = v9;
  *(double *)(v0 + 64) = v19;
  *(_BYTE *)(v0 + 72) = 0;
  *(double *)(v0 + 80) = v20;
  *(_BYTE *)(v0 + 88) = 0;
  *(double *)(v0 + 96) = v33;
  *(_QWORD *)(v0 + 104) = v34;
}

uint64_t sub_21441704C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  double *v5;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  __int128 v36;
  char v37;
  double v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  double v48;
  int v49;
  char v50;
  double v51;
  double v52;
  uint64_t v53;
  char v54;
  double v55;
  unsigned __int8 v56;
  double v57;
  double v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  __int128 v63;

  v44 = *(double *)&a3;
  v48 = *(double *)&a1;
  LODWORD(v47) = a2 & 1;
  v49 = a4 & 1;
  v46 = sub_214423E88();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v43 - v15;
  sub_214423EF4();
  sub_2141FED10(&qword_253F13D50, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC778], MEMORY[0x24BDEC7A0]);
  sub_21442519C();
  sub_2144251FC();
  if (sub_2144251F0() >= 2)
  {
    sub_214423F00();
    sub_214423F00();
    LOBYTE(v51) = v47;
    v50 = v49;
    sub_2144167B0(*(uint64_t *)&v48, v47, *(uint64_t *)&v44, v49, (uint64_t)v16, (uint64_t)v13);
    v24 = v51;
    v26 = v52;
    v48 = *(double *)&v53;
    v37 = v54;
    v38 = v55;
    v49 = v56;
    v22 = v57;
    v21 = v58;
    v27 = v59;
    v31 = v60;
    v29 = v61;
    v33 = v62;
    v47 = v63;
    v40 = *(void (**)(char *, uint64_t))(v45 + 8);
    v41 = v13;
    v42 = v46;
    v40(v41, v46);
    result = ((uint64_t (*)(char *, uint64_t))v40)(v16, v42);
    v36 = v47;
    v39 = v49;
    v35 = *(_QWORD *)&v48;
  }
  else
  {
    v17 = v45;
    v18 = v44;
    sub_214423F00();
    v19 = v48;
    if ((a2 & 1) == 0)
      v19 = v48 - (v5[1] + v5[3]);
    if ((a4 & 1) == 0)
      v18 = v18 - (*v5 + v5[2]);
    LOBYTE(v51) = a2 & 1;
    v50 = a4 & 1;
    v20 = *(_QWORD *)&v19;
    sub_214423E64();
    v21 = *v5;
    v22 = v5[1];
    v24 = v23 + v22 + v5[3];
    v26 = v25 + *v5 + v5[2];
    v27 = sub_214424134();
    v29 = v28;
    v31 = v30 & 1;
    v33 = v32 & 1;
    result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v10, v46);
    v35 = v20;
    v36 = 0uLL;
    v37 = v47;
    v38 = v18;
    v39 = v49;
  }
  *(double *)a5 = v24;
  *(double *)(a5 + 8) = v26;
  *(_QWORD *)(a5 + 16) = v35;
  *(_BYTE *)(a5 + 24) = v37;
  *(double *)(a5 + 32) = v38;
  *(_BYTE *)(a5 + 40) = v39;
  *(double *)(a5 + 48) = v22;
  *(double *)(a5 + 56) = v21;
  *(_QWORD *)(a5 + 64) = v27;
  *(_BYTE *)(a5 + 72) = v31;
  *(_QWORD *)(a5 + 80) = v29;
  *(_BYTE *)(a5 + 88) = v33;
  *(_OWORD *)(a5 + 96) = v36;
  return result;
}

uint64_t sub_214417380(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  char v13;
  void (*v14)(_BYTE *, uint64_t);
  uint64_t result;
  char v16;
  char v17;
  _BYTE v18[8];
  char v19;
  _BYTE v20[96];

  v8 = sub_214423E88();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20[0] = a2 & 1;
  v19 = a4 & 1;
  sub_21441704C(a1, a2 & 1, a3, a4 & 1, (uint64_t)v20);
  sub_214423F00();
  v12 = v20[24];
  v13 = v20[40];
  sub_214424C8C();
  v19 = v12;
  v18[0] = v13;
  sub_214423E70();
  v14 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v14(v11, v8);
  sub_214423EF4();
  sub_2141FED10(&qword_253F13D50, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC778], MEMORY[0x24BDEC7A0]);
  sub_21442519C();
  sub_2144251FC();
  result = sub_2144251F0();
  if (result >= 2)
  {
    sub_214423F00();
    v16 = v20[72];
    v17 = v20[88];
    sub_214424C8C();
    v19 = v16;
    v18[0] = v17;
    sub_214423E70();
    return ((uint64_t (*)(_BYTE *, uint64_t))v14)(v11, v8);
  }
  return result;
}

double sub_2144175A4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  v5 = v4[2];
  v6 = v4[3];
  v7 = *v4;
  v11 = v4[1];
  v12 = v5;
  v13[0] = v6;
  *(_OWORD *)((char *)v13 + 9) = *(__int128 *)((char *)v4 + 57);
  v10 = v7;
  LOBYTE(v9) = a2 & 1;
  sub_21441704C(a1, a2 & 1, a3, a4 & 1, (uint64_t)&v9);
  return v9;
}

uint64_t sub_214417604(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_214417380(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_214417658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_2141D8BF8(qword_253F13E08);
  sub_2143E5C74(v0, qword_253F1CA10);
  v1 = sub_2141EEE6C(v0, (uint64_t)qword_253F1CA10);
  v2 = type metadata accessor for ChartModel.Scenegraph();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_2144176C0()
{
  uint64_t v1;

  sub_2141D8BF8(&qword_254D6EC80);
  sub_214424A7C();
  return v1;
}

uint64_t sub_214417720()
{
  sub_2141D8BF8(&qword_254D6EC80);
  return sub_214424A88();
}

uint64_t sub_214417788(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_2141D8BF8(qword_253F13E08);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141E070C(a1, (uint64_t)v6, qword_253F13E08);
  v7 = type metadata accessor for ChartModel.Scenegraph();
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  result = sub_2141E0750((uint64_t)v6, qword_253F13E08);
  if (v8 == 1)
  {
    v10 = sub_2141E0750(a1, qword_253F13E08);
    return a2(v10);
  }
  return result;
}

uint64_t sub_214417864@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_253F13B90 != -1)
    swift_once();
  v2 = sub_2141D8BF8(qword_253F13E08);
  v3 = sub_2141EEE6C(v2, (uint64_t)qword_253F1CA10);
  return sub_2141E070C(v3, a1, qword_253F13E08);
}

uint64_t sub_2144178D0()
{
  sub_21441DE98();
  return sub_214423EE8();
}

unint64_t sub_214417924()
{
  unint64_t result;

  result = qword_253F137D0;
  if (!qword_253F137D0)
  {
    result = MEMORY[0x2199CD934](&unk_2144349D8, &type metadata for ChartLayout);
    atomic_store(result, (unint64_t *)&qword_253F137D0);
  }
  return result;
}

uint64_t sub_214417968()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21441799C()
{
  uint64_t v1;

  sub_2141D8BF8(&qword_254D6EC80);
  sub_214424A7C();
  return v1;
}

uint64_t sub_2144179FC()
{
  sub_2141D8BF8(&qword_254D6EC80);
  return sub_214424A88();
}

uint64_t sub_214417A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  _QWORD v65[2];
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[48];
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  _QWORD v85[2];
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  _QWORD v93[3];

  v3 = v2;
  v77 = a2;
  v65[0] = 0;
  v67 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v65[1] = v5;
  v76 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 16);
  sub_2141D7924(&qword_254D6EC68);
  v79 = v7;
  v8 = sub_214424110();
  v9 = *(_QWORD *)(a1 + 24);
  v10 = sub_2141D9054(&qword_254D6EC70, &qword_254D6EC68, MEMORY[0x24BDF09C8]);
  v78 = v9;
  v93[0] = v9;
  v93[1] = v10;
  v11 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v8, v93);
  v12 = sub_21441CB5C();
  *(_QWORD *)&v86 = v8;
  *((_QWORD *)&v86 + 1) = &type metadata for XYBindingValue;
  v87 = v11;
  v88 = v12;
  v13 = MEMORY[0x24BDF38E8];
  v14 = MEMORY[0x2199CD8C8](255, &v86, MEMORY[0x24BDF38E8], 0);
  *(_QWORD *)&v86 = v8;
  *((_QWORD *)&v86 + 1) = &type metadata for XYBindingValue;
  v87 = v11;
  v88 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v16 = sub_2143C63D0();
  *(_QWORD *)&v86 = v14;
  *((_QWORD *)&v86 + 1) = &type metadata for ChartScrollPositionConfiguration;
  v87 = OpaqueTypeConformance2;
  v88 = v16;
  v17 = MEMORY[0x2199CD8C8](255, &v86, v13, 0);
  *(_QWORD *)&v86 = v14;
  *((_QWORD *)&v86 + 1) = &type metadata for ChartScrollPositionConfiguration;
  v87 = OpaqueTypeConformance2;
  v88 = v16;
  v18 = swift_getOpaqueTypeConformance2();
  v19 = sub_2143C6414();
  *(_QWORD *)&v86 = v17;
  *((_QWORD *)&v86 + 1) = &type metadata for ChartScrollZoomConfiguration;
  v87 = v18;
  v88 = v19;
  MEMORY[0x2199CD8C8](255, &v86, MEMORY[0x24BDF3908], 0);
  *(_QWORD *)&v86 = v17;
  *((_QWORD *)&v86 + 1) = &type metadata for ChartScrollZoomConfiguration;
  v87 = v18;
  v88 = v19;
  swift_getOpaqueTypeConformance2();
  v20 = sub_21442447C();
  MEMORY[0x2199CD934](MEMORY[0x24BDEFE20], v20);
  v21 = sub_214423D08();
  v22 = MEMORY[0x2199CD934](MEMORY[0x24BDEB238], v21);
  *(_QWORD *)&v86 = v21;
  *((_QWORD *)&v86 + 1) = v22;
  v23 = MEMORY[0x2199CD8C8](255, &v86, MEMORY[0x24BDF29F8], 0);
  *(_QWORD *)&v86 = v21;
  *((_QWORD *)&v86 + 1) = v22;
  v24 = a1;
  v68 = swift_getOpaqueTypeConformance2();
  v69 = v23;
  v25 = sub_214424188();
  v26 = MEMORY[0x2199CD934](MEMORY[0x24BDEDA10], v25);
  *(_QWORD *)&v86 = v25;
  *((_QWORD *)&v86 + 1) = v26;
  v70 = MEMORY[0x2199CD8C8](255, &v86, MEMORY[0x24BDF2DF8], 0);
  v27 = sub_2144243F8();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v71 = (uint64_t)v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v72 = (uint64_t)v65 - v31;
  v32 = v3;
  sub_21441C44C(&v86);
  sub_2141E070C((uint64_t)&v86, (uint64_t)&v90, &qword_253F12388);
  sub_2143C5DC4((uint64_t)&v86);
  v74 = v25;
  v75 = v26;
  v73 = v28;
  if (v92 == 255)
  {
    sub_2141E0750((uint64_t)&v90, &qword_253F12388);
    v33 = 0;
    v66 = 1;
    v34 = v67;
  }
  else
  {
    sub_2143C5C64(&v90, (uint64_t)&v81);
    if ((v84 & 1) != 0)
    {
      sub_2143C5CCC((uint64_t)&v81, (uint64_t)v80);
      v35 = sub_2143FB82C();
      v37 = v36;
      v39 = v38;
      sub_2143C5C98((uint64_t)v80);
    }
    else
    {
      v35 = v81;
      v37 = v82;
      v39 = v83;
    }
    v34 = v67;
    sub_2143C535C((uint64_t)&v90);
    if (v39 == -1)
    {
      v33 = 0;
      v41 = 1;
    }
    else
    {
      *(_QWORD *)&v86 = v35;
      *((_QWORD *)&v86 + 1) = v37;
      LOBYTE(v87) = v39;
      v40 = v65[0];
      sub_214418110((uint64_t)&v86, v32, v79, v78, (uint64_t)&v90);
      v65[0] = v40;
      v3 = v32;
      sub_2141E60A4(v35, v37, v39);
      v33 = v90;
      v41 = v91;
    }
    v66 = v41;
  }
  sub_21441C44C(&v86);
  sub_2141E070C((uint64_t)&v89, (uint64_t)&v90, &qword_253F12388);
  sub_2143C5DC4((uint64_t)&v86);
  v67 = v33;
  if (v92 == 255)
  {
    sub_2141E0750((uint64_t)&v90, &qword_253F12388);
LABEL_17:
    v47 = 0;
    v48 = 1;
    goto LABEL_18;
  }
  sub_2143C5C64(&v90, (uint64_t)&v81);
  if ((v84 & 1) != 0)
  {
    sub_2143C5CCC((uint64_t)&v81, (uint64_t)v80);
    v42 = sub_2143FB82C();
    v44 = v43;
    v46 = v45;
    sub_2143C5C98((uint64_t)v80);
  }
  else
  {
    v42 = v81;
    v44 = v82;
    v46 = v83;
  }
  sub_2143C535C((uint64_t)&v90);
  if (v46 == -1)
    goto LABEL_17;
  *(_QWORD *)&v86 = v42;
  *((_QWORD *)&v86 + 1) = v44;
  LOBYTE(v87) = v46;
  sub_2144182B8((uint64_t)&v86, v3, v79, v78, (uint64_t)&v90);
  v3 = v32;
  sub_2141E60A4(v42, v44, v46);
  v47 = v90;
  v48 = v91;
LABEL_18:
  v49 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v76, v3, v24);
  v50 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v51 = swift_allocObject();
  v52 = v24;
  v54 = v78;
  v53 = v79;
  *(_QWORD *)(v51 + 16) = v79;
  *(_QWORD *)(v51 + 24) = v54;
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v51 + v50, v49, v52);
  *(_QWORD *)&v86 = sub_21442417C();
  *((_QWORD *)&v86 + 1) = v55;
  v56 = v66 & v48 ^ 1u;
  MEMORY[0x24BDAC7A8](v86);
  v65[-6] = v53;
  v65[-5] = v54;
  v65[-4] = v67;
  LOBYTE(v65[-3]) = v57;
  v65[-2] = v47;
  LOBYTE(v65[-1]) = v48;
  v59 = v74;
  v58 = v75;
  v90 = v74;
  v91 = v75;
  v60 = swift_getOpaqueTypeConformance2();
  v61 = v71;
  sub_21441A7D8(v56, (void (*)(uint64_t, __n128))sub_21441CBB8, (uint64_t)&v65[-8], v59, v70, v58, v60, v71);
  swift_release();
  v85[0] = v60;
  v85[1] = v58;
  MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v27, v85);
  v62 = v72;
  sub_2142D7304(v61, v27, v72);
  v63 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
  v63(v61, v27);
  sub_2142D6BB0(v62, v27, v77);
  return ((uint64_t (*)(uint64_t, uint64_t))v63)(v62, v27);
}

uint64_t sub_214418110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  double v13;
  double v14;
  char v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _QWORD v21[17];
  uint64_t v22[8];
  uint64_t v23;
  double v24;
  double v25;
  double v26;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = type metadata accessor for ChartScrollView(0, a3, a4, a4);
  sub_2141E801C(a2 + *(int *)(v10 + 40), (uint64_t)v21, qword_254D6A960);
  sub_2141E801C((uint64_t)v21, (uint64_t)v22, qword_254D6A960);
  result = sub_2142C352C((uint64_t)v22);
  v12 = result;
  v13 = 0.0;
  if ((_DWORD)result != 1)
  {
    sub_21421BAE4(v22[0], v22[1], v22[2], v22[3], v22[4], v22[5], v22[6], v22[7], v23);
    v14 = COERCE_DOUBLE(sub_2142B6AB8(v7, v8, v9));
    v16 = v15;
    result = (uint64_t)sub_21441DE04(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
    if ((v16 & 1) != 0)
      v17 = 0.0;
    else
      v17 = v14;
    v19 = v25;
    v18 = v26;
    v20 = v24;
    if (qword_253F11F50 != -1)
      result = swift_once();
    if (v19 + *(double *)&qword_253F1C988 < v20)
      v13 = (v17 - v18) / (v20 - v19);
  }
  *(double *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v12 == 1;
  return result;
}

uint64_t sub_2144182B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  double v13;
  double v14;
  char v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _QWORD v21[17];
  uint64_t v22[8];
  uint64_t v23;
  double v24;
  double v25;
  double v26;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = type metadata accessor for ChartScrollView(0, a3, a4, a4);
  sub_2141E801C(a2 + *(int *)(v10 + 44), (uint64_t)v21, qword_254D6A960);
  sub_2141E801C((uint64_t)v21, (uint64_t)v22, qword_254D6A960);
  result = sub_2142C352C((uint64_t)v22);
  v12 = result;
  v13 = 0.0;
  if ((_DWORD)result != 1)
  {
    sub_21421BAE4(v22[0], v22[1], v22[2], v22[3], v22[4], v22[5], v22[6], v22[7], v23);
    v14 = COERCE_DOUBLE(sub_2142B6AB8(v7, v8, v9));
    v16 = v15;
    result = (uint64_t)sub_21441DE04(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
    if ((v16 & 1) != 0)
      v17 = 0.0;
    else
      v17 = v14;
    v19 = v25;
    v18 = v26;
    v20 = v24;
    if (qword_253F11F50 != -1)
      result = swift_once();
    if (v19 + *(double *)&qword_253F1C988 < v20)
      v13 = (v17 - v18) / (v20 - v19);
  }
  *(double *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v12 == 1;
  return result;
}

uint64_t sub_214418460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unsigned __int8 v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ValueMetadata *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD v54[3];

  v39 = a4;
  v40 = a3;
  v41 = a2;
  v42 = a1;
  v45 = a5;
  v6 = sub_214424560();
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141D7924(&qword_254D6EC68);
  v9 = sub_214424110();
  v10 = sub_2141D9054(&qword_254D6EC70, &qword_254D6EC68, MEMORY[0x24BDF09C8]);
  v54[0] = a4;
  v54[1] = v10;
  v11 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v9, v54);
  v12 = sub_21441CB5C();
  v50 = v9;
  v51 = &type metadata for XYBindingValue;
  v52 = v11;
  v53 = v12;
  v13 = MEMORY[0x24BDF38E8];
  v14 = MEMORY[0x2199CD8C8](255, &v50, MEMORY[0x24BDF38E8], 0);
  v50 = v9;
  v51 = &type metadata for XYBindingValue;
  v52 = v11;
  v53 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v16 = sub_2143C63D0();
  v50 = v14;
  v51 = &type metadata for ChartScrollPositionConfiguration;
  v52 = OpaqueTypeConformance2;
  v53 = v16;
  v17 = MEMORY[0x2199CD8C8](255, &v50, v13, 0);
  v50 = v14;
  v51 = &type metadata for ChartScrollPositionConfiguration;
  v52 = OpaqueTypeConformance2;
  v53 = v16;
  v18 = swift_getOpaqueTypeConformance2();
  v19 = sub_2143C6414();
  v50 = v17;
  v51 = &type metadata for ChartScrollZoomConfiguration;
  v52 = v18;
  v53 = v19;
  MEMORY[0x2199CD8C8](255, &v50, MEMORY[0x24BDF3908], 0);
  v50 = v17;
  v51 = &type metadata for ChartScrollZoomConfiguration;
  v52 = v18;
  v53 = v19;
  swift_getOpaqueTypeConformance2();
  v20 = sub_21442447C();
  MEMORY[0x2199CD934](MEMORY[0x24BDEFE20], v20);
  v21 = sub_214423D08();
  v38 = *(_QWORD *)(v21 - 8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v36 - v23;
  v25 = MEMORY[0x2199CD934](MEMORY[0x24BDEB238], v21, v22);
  v50 = v21;
  v51 = (ValueMetadata *)v25;
  v26 = MEMORY[0x2199CD8C8](0, &v50, MEMORY[0x24BDF29F8], 0);
  v37 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v36 - v30;
  v46 = v40;
  v47 = v39;
  v48 = v41;
  v49 = v42;
  sub_214423D14();
  v32 = v8;
  sub_214424554();
  LOBYTE(v8) = sub_214424668();
  v33 = sub_214424650();
  sub_21442465C();
  sub_21442465C();
  if (sub_21442465C() != v8)
    sub_21442465C();
  sub_21442465C();
  if (sub_21442465C() != v33)
    sub_21442465C();
  sub_2144248A8();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v21);
  v50 = v21;
  v51 = (ValueMetadata *)v25;
  swift_getOpaqueTypeConformance2();
  sub_2142D7304((uint64_t)v28, v26, (uint64_t)v31);
  v34 = *(void (**)(char *, uint64_t))(v37 + 8);
  v34(v28, v26);
  sub_2142D6BB0((uint64_t)v31, v26, v45);
  return ((uint64_t (*)(char *, uint64_t))v34)(v31, v26);
}

uint64_t sub_214418870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  ValueMetadata *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD v63[3];

  v57 = a2;
  v58 = a5;
  v55 = a1;
  v7 = sub_214424128();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  v56 = *(_QWORD *)(v53 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v51 = a3;
  v52 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a4;
  v49 = a4;
  v50 = type metadata accessor for ChartScrollView(0, a3, a4, v10);
  v11 = *(_QWORD *)(v50 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v50);
  v14 = (char *)&v44 - v13;
  v45 = (char *)&v44 - v13;
  sub_2141D7924(&qword_254D6EC68);
  v15 = sub_214424110();
  v16 = sub_2141D9054(&qword_254D6EC70, &qword_254D6EC68, MEMORY[0x24BDF09C8]);
  v63[0] = v9;
  v63[1] = v16;
  v17 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v15, v63);
  v18 = sub_21441CB5C();
  v59 = v15;
  v60 = &type metadata for XYBindingValue;
  v61 = v17;
  v62 = v18;
  v19 = MEMORY[0x24BDF38E8];
  v20 = MEMORY[0x2199CD8C8](255, &v59, MEMORY[0x24BDF38E8], 0);
  v59 = v15;
  v60 = &type metadata for XYBindingValue;
  v61 = v17;
  v62 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v22 = sub_2143C63D0();
  v59 = v20;
  v60 = &type metadata for ChartScrollPositionConfiguration;
  v61 = OpaqueTypeConformance2;
  v62 = v22;
  v23 = MEMORY[0x2199CD8C8](255, &v59, v19, 0);
  v59 = v20;
  v60 = &type metadata for ChartScrollPositionConfiguration;
  v61 = OpaqueTypeConformance2;
  v62 = v22;
  v24 = swift_getOpaqueTypeConformance2();
  v25 = sub_2143C6414();
  v59 = v23;
  v60 = &type metadata for ChartScrollZoomConfiguration;
  v61 = v24;
  v62 = v25;
  v47 = MEMORY[0x2199CD8C8](255, &v59, MEMORY[0x24BDF3908], 0);
  v59 = v23;
  v60 = &type metadata for ChartScrollZoomConfiguration;
  v61 = v24;
  v62 = v25;
  v46 = swift_getOpaqueTypeConformance2();
  v26 = sub_21442447C();
  v48 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v44 - v31;
  v33 = v11;
  v44 = v11;
  v34 = v50;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v55, v50, v30);
  v36 = v52;
  v35 = v53;
  v37 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v57, v54);
  v38 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v39 = (v12 + *(unsigned __int8 *)(v35 + 80) + v38) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v40 = swift_allocObject();
  v41 = v49;
  *(_QWORD *)(v40 + 16) = v51;
  *(_QWORD *)(v40 + 24) = v41;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v40 + v38, v45, v34);
  (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v40 + v39, v36, v37);
  sub_214424470();
  MEMORY[0x2199CD934](MEMORY[0x24BDEFE20], v26);
  sub_2142D7304((uint64_t)v28, v26, (uint64_t)v32);
  v42 = *(void (**)(char *, uint64_t))(v48 + 8);
  v42(v28, v26);
  sub_2142D6BB0((uint64_t)v32, v26, v58);
  return ((uint64_t (*)(char *, uint64_t))v42)(v32, v26);
}

uint64_t sub_214418C1C@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, _QWORD, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  void (*v132)(char *, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139[2];
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD v147[2];

  v135 = a3;
  v138 = a2;
  v132 = a1;
  v119 = a6;
  v133 = sub_214424128();
  v109 = *(_QWORD *)(v133 - 8);
  v134 = *(_QWORD *)(v109 + 64);
  MEMORY[0x24BDAC7A8](v133);
  v131 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = a5;
  v124 = type metadata accessor for ChartScrollView(0, a4, a5, v9);
  v120 = *(_QWORD *)(v124 - 8);
  v130 = *(_QWORD *)(v120 + 64);
  MEMORY[0x24BDAC7A8](v124);
  v101 = (char *)&v92 - v10;
  v123 = sub_214424170();
  v100 = *(_QWORD *)(v123 - 8);
  v11 = *(_QWORD *)(v100 + 64);
  MEMORY[0x24BDAC7A8](v123);
  v137 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = v14;
  sub_2141D7924(&qword_254D6EC68);
  v15 = sub_214424110();
  v110 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v129 = (char *)&v92 - v16;
  v17 = sub_2141D9054(&qword_254D6EC70, &qword_254D6EC68, MEMORY[0x24BDF09C8]);
  v147[0] = a5;
  v147[1] = v17;
  v18 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v15, v147);
  v19 = sub_21441CB5C();
  *(_QWORD *)&v144 = v15;
  *((_QWORD *)&v144 + 1) = &type metadata for XYBindingValue;
  v20 = v15;
  v102 = v15;
  v145 = v18;
  v146 = v19;
  v104 = v18;
  v21 = v19;
  v103 = v19;
  v22 = MEMORY[0x24BDF38E8];
  v23 = MEMORY[0x2199CD8C8](0, &v144, MEMORY[0x24BDF38E8], 0);
  v115 = *(_QWORD *)(v23 - 8);
  v24 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v128 = (char *)&v92 - v25;
  *(_QWORD *)&v144 = v20;
  *((_QWORD *)&v144 + 1) = &type metadata for XYBindingValue;
  v145 = v18;
  v146 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v27 = sub_2143C63D0();
  *(_QWORD *)&v144 = v24;
  *((_QWORD *)&v144 + 1) = &type metadata for ChartScrollPositionConfiguration;
  v105 = v24;
  v145 = OpaqueTypeConformance2;
  v146 = v27;
  v107 = OpaqueTypeConformance2;
  v106 = v27;
  v28 = MEMORY[0x2199CD8C8](0, &v144, v22, 0);
  v118 = *(_QWORD *)(v28 - 8);
  v113 = v28;
  MEMORY[0x24BDAC7A8](v28);
  v127 = (char *)&v92 - v29;
  *(_QWORD *)&v144 = v24;
  *((_QWORD *)&v144 + 1) = &type metadata for ChartScrollPositionConfiguration;
  v145 = OpaqueTypeConformance2;
  v146 = v27;
  v30 = swift_getOpaqueTypeConformance2();
  v112 = v30;
  v111 = sub_2143C6414();
  *(_QWORD *)&v144 = v28;
  *((_QWORD *)&v144 + 1) = &type metadata for ChartScrollZoomConfiguration;
  v145 = v30;
  v146 = v111;
  v116 = MEMORY[0x2199CD8C8](0, &v144, MEMORY[0x24BDF3908], 0);
  v117 = *(_QWORD *)(v116 - 8);
  MEMORY[0x24BDAC7A8](v116);
  v108 = (char *)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v114 = (uint64_t)&v92 - v34;
  v35 = v124;
  v36 = v138;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v125 + 16))(v14, v138 + *(int *)(v124 + 36), a4, v33);
  v37 = v100;
  v97 = *(void (**)(char *, _QWORD, uint64_t))(v100 + 16);
  v38 = v123;
  v97(v137, v132, v123);
  v39 = v120;
  v122 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
  v40 = v101;
  v122(v101, v36, v35);
  v41 = *(unsigned __int8 *)(v37 + 80);
  v42 = v37;
  v43 = v39;
  v99 = *(unsigned __int8 *)(v39 + 80);
  v44 = (v41 + 32) & ~v41;
  v98 = v44;
  v94 = ((v11 + v99 + v44) & ~v99) + v130;
  v45 = (v11 + v99 + v44) & ~v99;
  v96 = v45;
  v126 = v99 | 7;
  v95 = v99 | 7 | v41;
  v46 = swift_allocObject();
  v47 = v136;
  *(_QWORD *)(v46 + 16) = a4;
  *(_QWORD *)(v46 + 24) = v47;
  v100 = *(_QWORD *)(v42 + 32);
  v48 = v137;
  ((void (*)(uint64_t, char *, uint64_t))v100)(v46 + v44, v137, v38);
  v49 = v46 + v45;
  v120 = *(_QWORD *)(v43 + 32);
  v50 = v40;
  v51 = v124;
  ((void (*)(uint64_t, char *, uint64_t))v120)(v49, v40, v124);
  v52 = v47;
  v53 = v93;
  sub_214419B44((uint64_t)sub_21441CEE8, v46);
  swift_release();
  v54 = *(void (**)(char *, uint64_t))(v125 + 8);
  v55 = a4;
  v121 = a4;
  v54(v53, a4);
  v56 = v138;
  sub_21441C44C(&v144);
  sub_21441D364((uint64_t)&v144, (uint64_t)v139);
  v97(v48, v132, v38);
  v57 = v51;
  v122(v50, v56, v51);
  v58 = v109;
  v132 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 16);
  v59 = v131;
  v60 = v133;
  v132(v131, v135, v133);
  v61 = *(unsigned __int8 *)(v58 + 80);
  v62 = (v94 + v61) & ~v61;
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = v55;
  *(_QWORD *)(v63 + 24) = v52;
  ((void (*)(uint64_t, char *, uint64_t))v100)(v63 + v98, v137, v123);
  v64 = v50;
  v65 = v50;
  v66 = (void (*)(uint64_t, char *, uint64_t))v120;
  ((void (*)(uint64_t, char *, uint64_t))v120)(v63 + v96, v64, v57);
  v137 = *(char **)(v58 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v137)(v63 + v62, v59, v60);
  v67 = v102;
  v68 = v129;
  sub_214424944();
  swift_release();
  sub_2141E60A4(v139[0], v139[1], v140);
  sub_2141E60A4(v141, v142, v143);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v68, v67);
  v69 = v138;
  sub_21441C44C(&v144);
  v70 = v57;
  v71 = v122;
  v122(v65, v69, v57);
  v72 = (v99 + 32) & ~v99;
  v73 = v72 + v130;
  v74 = swift_allocObject();
  v75 = v136;
  *(_QWORD *)(v74 + 16) = v121;
  *(_QWORD *)(v74 + 24) = v75;
  v66(v74 + v72, v65, v57);
  v76 = v105;
  v77 = v128;
  sub_214424944();
  swift_release();
  sub_2143C5DC4((uint64_t)&v144);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v77, v76);
  sub_21441B648(&v144);
  v71(v65, v69, v57);
  v78 = v131;
  v79 = v133;
  v132(v131, v135, v133);
  v80 = (v73 + v61) & ~v61;
  v81 = swift_allocObject();
  v82 = v136;
  *(_QWORD *)(v81 + 16) = v121;
  *(_QWORD *)(v81 + 24) = v82;
  ((void (*)(uint64_t, char *, uint64_t))v120)(v81 + v72, v65, v70);
  ((void (*)(uint64_t, char *, uint64_t))v137)(v81 + v80, v78, v79);
  v83 = (uint64_t)v108;
  v84 = v113;
  v85 = v112;
  v86 = v111;
  v87 = v127;
  sub_214424950();
  swift_release();
  sub_2143BCEE4((uint64_t)&v144);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v87, v84);
  *(_QWORD *)&v144 = v84;
  *((_QWORD *)&v144 + 1) = &type metadata for ChartScrollZoomConfiguration;
  v145 = v85;
  v146 = v86;
  swift_getOpaqueTypeConformance2();
  v88 = v114;
  v89 = v116;
  sub_2142D7304(v83, v116, v114);
  v90 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
  v90(v83, v89);
  sub_2142D6BB0(v88, v89, v119);
  return ((uint64_t (*)(uint64_t, uint64_t))v90)(v88, v89);
}

_QWORD *sub_214419680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *result;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat MinX;
  void (*v25)(_OWORD *__return_ptr, _QWORD *);
  double v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  CGFloat MinY;
  void (*v31)(_OWORD *__return_ptr, _QWORD *);
  double v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD v36[5];
  unsigned __int16 v37;
  _OWORD v38[3];
  uint64_t v39;
  _BYTE v40[48];
  _QWORD v41[5];
  unsigned __int16 v42;
  _OWORD v43[8];
  _BYTE v44[32];
  void (*v45)(_OWORD *__return_ptr, _QWORD *);
  char v46;
  double v47;
  _QWORD v48[17];
  _BYTE v49[32];
  void (*v50)(_OWORD *__return_ptr, _QWORD *);
  char v51;
  double v52;
  _QWORD v53[4];
  char v54;
  CGRect v55;
  CGRect v56;

  v11 = sub_214424170();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (_QWORD *)sub_2141E801C(a2, (uint64_t)v53, &qword_253F15CD8);
  if ((v54 & 1) == 0)
  {
    v16 = *(double *)v53;
    v17 = *(double *)&v53[1];
    v18 = *(double *)&v53[2];
    v19 = *(double *)&v53[3];
    v20 = sub_214424158();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
    if ((v20 & 1) != 0)
      v21 = sub_21442414C() ^ 1;
    else
      v21 = 0;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v23 = type metadata accessor for ChartScrollView(0, a5, a6, v22);
    sub_2141E801C(a4 + *(int *)(v23 + 40), (uint64_t)v48, qword_254D6A960);
    sub_2141E801C((uint64_t)v48, (uint64_t)v49, qword_254D6A960);
    if (sub_2142C352C((uint64_t)v49) != 1)
    {
      sub_2141E801C((uint64_t)v48, (uint64_t)v44, qword_254D6A960);
      sub_21441DDAC((uint64_t)v44);
      v55.origin.x = v16;
      v55.origin.y = v17;
      v55.size.width = v18;
      v55.size.height = v19;
      MinX = CGRectGetMinX(v55);
      v25 = v50;
      v26 = MinX + v52;
      if ((v51 & 1) != 0)
      {
        if (!v50)
          goto LABEL_19;
        *(double *)v41 = v26;
        sub_21441DE04(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441DE60);
        v25(v43, v41);
        v27 = *((_QWORD *)&v43[0] + 1);
        v28 = *(_QWORD *)&v43[0];
        sub_21441DE04(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
        if (!v27)
          goto LABEL_19;
        v29 = 2;
        if ((v21 & 1) == 0)
        {
LABEL_18:
          sub_214417720();
LABEL_19:
          sub_21441DE04(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
          goto LABEL_20;
        }
      }
      else
      {
        if (!v50)
          goto LABEL_19;
        *(double *)v41 = v26;
        sub_21441DE04(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441DE60);
        v25(v43, v41);
        sub_21441DE04(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
        if ((BYTE8(v43[0]) & 1) != 0)
          goto LABEL_19;
        v27 = 0;
        v29 = 0;
        v28 = *(_QWORD *)&v43[0];
        if ((v21 & 1) == 0)
          goto LABEL_18;
      }
      sub_21441C44C(v43);
      sub_2141E070C((uint64_t)v43, (uint64_t)v41, &qword_253F12388);
      sub_2143C5DC4((uint64_t)v43);
      if (HIBYTE(v42) >= 0xFFu)
      {
        sub_2141E0750((uint64_t)v41, &qword_253F12388);
        goto LABEL_18;
      }
      if ((v42 & 0x100) == 0)
      {
        sub_2143C535C((uint64_t)v41);
        goto LABEL_18;
      }
      sub_2143C5CCC((uint64_t)v41, (uint64_t)v38);
      sub_2143FEB60(v28, v27, v29);
      sub_21441DE04(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      sub_2143C5C98((uint64_t)v38);
    }
LABEL_20:
    sub_2141E801C(a4 + *(int *)(v23 + 44), (uint64_t)v43, qword_254D6A960);
    sub_2141E801C((uint64_t)v43, (uint64_t)v44, qword_254D6A960);
    result = (_QWORD *)sub_2142C352C((uint64_t)v44);
    if ((_DWORD)result == 1)
      return result;
    sub_2141E801C((uint64_t)v43, (uint64_t)v41, qword_254D6A960);
    sub_21441DDAC((uint64_t)v41);
    v56.origin.x = v16;
    v56.origin.y = v17;
    v56.size.width = v18;
    v56.size.height = v19;
    MinY = CGRectGetMinY(v56);
    v31 = v45;
    v32 = MinY + v47;
    if ((v46 & 1) != 0)
    {
      if (!v45)
        return sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      *(double *)v36 = v32;
      sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441DE60);
      v31(v38, v36);
      v33 = *((_QWORD *)&v38[0] + 1);
      v34 = *(_QWORD *)&v38[0];
      sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      if (!v33)
        return sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      v35 = 2;
      if ((v21 & 1) == 0)
      {
LABEL_33:
        sub_2144179FC();
        return sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      }
    }
    else
    {
      if (!v45)
        return sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      *(double *)v36 = v32;
      sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441DE60);
      v31(v38, v36);
      sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      if ((BYTE8(v38[0]) & 1) != 0)
        return sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      v33 = 0;
      v35 = 0;
      v34 = *(_QWORD *)&v38[0];
      if ((v21 & 1) == 0)
        goto LABEL_33;
    }
    sub_21441C44C(v38);
    sub_2141E070C((uint64_t)&v39, (uint64_t)v36, &qword_253F12388);
    sub_2143C5DC4((uint64_t)v38);
    if (HIBYTE(v37) < 0xFFu)
    {
      if ((v37 & 0x100) != 0)
      {
        sub_2143C5CCC((uint64_t)v36, (uint64_t)v40);
        sub_2143FEB60(v34, v33, v35);
        sub_21441DE04(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
        return (_QWORD *)sub_2143C5C98((uint64_t)v40);
      }
      sub_2143C535C((uint64_t)v36);
    }
    else
    {
      sub_2141E0750((uint64_t)v36, &qword_253F12388);
    }
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_214419B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_21441DD68();
  swift_retain();
  sub_21442486C();
  return swift_release();
}

uint64_t sub_214419BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[17];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;

  v31 = a7;
  v34 = a6;
  v35 = a5;
  v33 = a4;
  v9 = sub_214424170();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 8);
  v30 = *(_QWORD *)a2;
  v14 = *(unsigned __int8 *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v32 = *(unsigned __int8 *)(a2 + 40);
  LOBYTE(a2) = sub_214424140();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  if ((a2 & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v28 = v13;
  v29 = v15;
  v18 = v33;
  v19 = v34;
  v20 = sub_214424164();
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v22 = v32;
  if ((v20 & 1) == 0)
  {
    if (v14 == 255
      || (v23 = type metadata accessor for ChartScrollView(0, v19, v31, v21),
          sub_2141E801C(v18 + *(int *)(v23 + 40), (uint64_t)v36, qword_254D6A960),
          sub_2141E801C((uint64_t)v36, (uint64_t)&v37, qword_254D6A960),
          result = sub_2142C352C((uint64_t)&v37),
          (_DWORD)result == 1))
    {
      if (v22 == 255)
        return result;
      v24 = 1;
    }
    else
    {
      v65 = v37;
      v66 = v38;
      v67 = v39;
      v68 = v40;
      v69 = v41;
      v70 = v42;
      v71 = v43;
      v72 = v44;
      v73 = v45;
      v74 = v46;
      v75 = v47;
      v76 = v48;
      v77 = v49;
      v78 = v50;
      sub_21421BAE4(v37, v38, v39, v40, v41, v42, v43, v44, v45);
      sub_2142B6AB8(v30, v28, v14);
      sub_21441DE04(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
      if (v22 == 255)
        return sub_21442411C();
      v24 = 0;
    }
    v25 = v29;
    v26 = type metadata accessor for ChartScrollView(0, v19, v31, v21);
    sub_2141E801C(v18 + *(int *)(v26 + 44), (uint64_t)v36, qword_254D6A960);
    sub_2141E801C((uint64_t)v36, (uint64_t)&v37, qword_254D6A960);
    result = sub_2142C352C((uint64_t)&v37);
    if ((_DWORD)result == 1)
    {
      if ((v24 & 1) != 0)
        return result;
    }
    else
    {
      v51 = v37;
      v52 = v38;
      v53 = v39;
      v54 = v40;
      v55 = v41;
      v56 = v42;
      v57 = v43;
      v58 = v44;
      v59 = v45;
      v60 = v46;
      v61 = v47;
      v62 = v48;
      v63 = v49;
      v64 = v50;
      sub_21421BAE4(v37, v38, v39, v40, v41, v42, v43, v44, v45);
      sub_2142B6AB8(v16, v25, v22);
      sub_21441DE04(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
    }
    return sub_21442411C();
  }
  return result;
}

uint64_t sub_214419F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[48];
  _BYTE v12[41];
  char v13;
  uint64_t v14[5];
  unsigned __int8 v15;

  sub_2141E070C(a2, (uint64_t)v14, &qword_253F12388);
  if (v15 == 255)
  {
    sub_2141E0750((uint64_t)v14, &qword_253F12388);
  }
  else
  {
    sub_2143C5C64(v14, (uint64_t)v12);
    if (v13 == 1)
    {
      sub_2143C5CCC((uint64_t)v12, (uint64_t)v11);
      sub_2143FB82C();
      sub_2143C5C98((uint64_t)v11);
      sub_2143C535C((uint64_t)v14);
      type metadata accessor for ChartScrollView(0, a4, a5, v8);
      sub_214417720();
    }
    else
    {
      sub_2143C535C((uint64_t)v12);
      sub_2143C535C((uint64_t)v14);
    }
  }
  sub_2141E070C(a2 + 48, (uint64_t)v14, &qword_253F12388);
  if (v15 == 255)
    return sub_2141E0750((uint64_t)v14, &qword_253F12388);
  sub_2143C5C64(v14, (uint64_t)v12);
  if (v13 == 1)
  {
    sub_2143C5CCC((uint64_t)v12, (uint64_t)v11);
    sub_2143FB82C();
    sub_2143C5C98((uint64_t)v11);
    sub_2143C535C((uint64_t)v14);
    type metadata accessor for ChartScrollView(0, a4, a5, v10);
    return sub_2144179FC();
  }
  else
  {
    sub_2143C535C((uint64_t)v12);
    return sub_2143C535C((uint64_t)v14);
  }
}

uint64_t sub_21441A0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v34[1] = a2;
  v7 = type metadata accessor for ChartScrollView(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v34 - v9;
  v11 = sub_2144176C0();
  v13 = ~v12;
  sub_2141E60A4(v11, v14, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v15 = sub_21441799C();
    v17 = v16;
    v19 = v18;
    v20 = ~v18;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    result = sub_2141E60A4(v15, v17, v19);
    if (!v20)
      return result;
  }
  v22 = sub_2144176C0();
  if (v24 != -1)
  {
    v25 = v22;
    v26 = v23;
    v27 = v24;
    v35 = v22;
    v36 = v23;
    v37 = v24;
    sub_21441A2CC((uint64_t)&v35, a1, a3, a4, (uint64_t)&v38);
    sub_2141E60A4(v25, v26, v27);
  }
  v28 = sub_21441799C();
  if (v30 != -1)
  {
    v31 = v28;
    v32 = v29;
    v33 = v30;
    v35 = v28;
    v36 = v29;
    v37 = v30;
    sub_21441A418((uint64_t)&v35, a1, a3, a4, (uint64_t)&v38);
    sub_2141E60A4(v31, v32, v33);
  }
  return sub_21442411C();
}

uint64_t sub_21441A2CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  _QWORD v18[17];
  uint64_t v19[8];
  uint64_t v20;
  double v21;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = type metadata accessor for ChartScrollView(0, a3, a4, a4);
  sub_2141E801C(a2 + *(int *)(v10 + 40), (uint64_t)v18, qword_254D6A960);
  sub_2141E801C((uint64_t)v18, (uint64_t)v19, qword_254D6A960);
  result = sub_2142C352C((uint64_t)v19);
  v12 = result;
  v13 = 0.0;
  if ((_DWORD)result != 1)
  {
    sub_21421BAE4(v19[0], v19[1], v19[2], v19[3], v19[4], v19[5], v19[6], v19[7], v20);
    v14 = sub_2142B6AB8(v7, v8, v9);
    v16 = v15;
    result = (uint64_t)sub_21441DE04(v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
    v17 = *(double *)&v14;
    if ((v16 & 1) != 0)
      v17 = 0.0;
    v13 = v17 - v21;
  }
  *(double *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v12 == 1;
  return result;
}

uint64_t sub_21441A418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  _QWORD v18[17];
  uint64_t v19[8];
  uint64_t v20;
  double v21;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = type metadata accessor for ChartScrollView(0, a3, a4, a4);
  sub_2141E801C(a2 + *(int *)(v10 + 44), (uint64_t)v18, qword_254D6A960);
  sub_2141E801C((uint64_t)v18, (uint64_t)v19, qword_254D6A960);
  result = sub_2142C352C((uint64_t)v19);
  v12 = result;
  v13 = 0.0;
  if ((_DWORD)result != 1)
  {
    sub_21421BAE4(v19[0], v19[1], v19[2], v19[3], v19[4], v19[5], v19[6], v19[7], v20);
    v14 = sub_2142B6AB8(v7, v8, v9);
    v16 = v15;
    result = (uint64_t)sub_21441DE04(v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21441CBD0);
    v17 = *(double *)&v14;
    if ((v16 & 1) != 0)
      v17 = 0.0;
    v13 = v17 - v21;
  }
  *(double *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v12 == 1;
  return result;
}

uint64_t sub_21441A564(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  ValueMetadata *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  __int128 v28;

  v28 = *a1;
  sub_2141D7924(&qword_254D6EC68);
  v8 = sub_214424110();
  v27[0] = a7;
  v27[1] = sub_2141D9054(&qword_254D6EC70, &qword_254D6EC68, MEMORY[0x24BDF09C8]);
  v9 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v8, v27);
  v10 = sub_21441CB5C();
  v23 = v8;
  v24 = &type metadata for XYBindingValue;
  v25 = v9;
  v26 = v10;
  v11 = MEMORY[0x24BDF38E8];
  v12 = MEMORY[0x2199CD8C8](255, &v23, MEMORY[0x24BDF38E8], 0);
  v23 = v8;
  v24 = &type metadata for XYBindingValue;
  v25 = v9;
  v26 = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v14 = sub_2143C63D0();
  v23 = v12;
  v24 = &type metadata for ChartScrollPositionConfiguration;
  v25 = OpaqueTypeConformance2;
  v26 = v14;
  v15 = MEMORY[0x2199CD8C8](255, &v23, v11, 0);
  v23 = v12;
  v24 = &type metadata for ChartScrollPositionConfiguration;
  v25 = OpaqueTypeConformance2;
  v26 = v14;
  v16 = swift_getOpaqueTypeConformance2();
  v17 = sub_2143C6414();
  v23 = v15;
  v24 = &type metadata for ChartScrollZoomConfiguration;
  v25 = v16;
  v26 = v17;
  MEMORY[0x2199CD8C8](255, &v23, MEMORY[0x24BDF3908], 0);
  v23 = v15;
  v24 = &type metadata for ChartScrollZoomConfiguration;
  v25 = v16;
  v26 = v17;
  swift_getOpaqueTypeConformance2();
  v18 = sub_21442447C();
  MEMORY[0x2199CD934](MEMORY[0x24BDEFE20], v18);
  v19 = sub_214423D08();
  v20 = MEMORY[0x2199CD934](MEMORY[0x24BDEB238], v19);
  v23 = v19;
  v24 = (ValueMetadata *)v20;
  MEMORY[0x2199CD8C8](255, &v23, MEMORY[0x24BDF29F8], 0);
  v23 = v19;
  v24 = (ValueMetadata *)v20;
  swift_getOpaqueTypeConformance2();
  v21 = sub_214424188();
  MEMORY[0x2199CD934](MEMORY[0x24BDEDA10], v21);
  return sub_2144248D8();
}

uint64_t sub_21441A7D8@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, __n128)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v38 = a8;
  v39 = a7;
  v37 = a6;
  v32 = a3;
  v33 = a2;
  v10 = a1;
  v34 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - v14;
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v32 - v22;
  v24 = sub_2144243F8();
  v36 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v32 - v26;
  if ((v10 & 1) != 0)
  {
    v33(v35, v25);
    sub_2142D7304((uint64_t)v20, a5, (uint64_t)v23);
    v28 = *(void (**)(char *, uint64_t))(v17 + 8);
    v28(v20, a5);
    sub_2142D6BB0((uint64_t)v23, a5, (uint64_t)v20);
    v29 = v37;
    sub_2144107E4((uint64_t)v20, a5);
    v28(v20, a5);
    v28(v23, a5);
  }
  else
  {
    v29 = v37;
    sub_2142D7304(v35, a4, (uint64_t)v15);
    sub_2142D6BB0((uint64_t)v15, a4, (uint64_t)v12);
    sub_2144108A8((uint64_t)v12, a5, a4);
    v30 = *(void (**)(char *, uint64_t))(v34 + 8);
    v30(v12, a4);
    v30(v15, a4);
  }
  v40[0] = v39;
  v40[1] = v29;
  MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v24, v40);
  sub_2142D6BB0((uint64_t)v27, v24, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v27, v24);
}

uint64_t sub_21441AA44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21441AA54()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_21441AA88()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F134E0;
  if (!qword_253F134E0)
  {
    v1 = sub_2141D7924(&qword_253F134E8);
    v2[0] = sub_2141D9054(&qword_253F15C98, &qword_253F15CA0, MEMORY[0x24BDF5428]);
    v2[1] = sub_21441AB0C();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F134E0);
  }
  return result;
}

unint64_t sub_21441AB0C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13498;
  if (!qword_253F13498)
  {
    v1 = sub_2141D7924(&qword_253F134A0);
    v2[0] = sub_2141FED10(&qword_253F14A08, type metadata accessor for SgCanvasRenderer, (uint64_t)&unk_2144279D0);
    v2[1] = sub_2141D9054(&qword_253F15B08, &qword_253F15B10, MEMORY[0x24BDEB950]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13498);
  }
  return result;
}

uint64_t sub_21441ABA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain();
  sub_2141D8BF8(&qword_254D6ED88);
  sub_2141D8BF8(&qword_253F15CD8);
  sub_2141D9054(&qword_254D6ED90, &qword_254D6ED88, MEMORY[0x24BDEFB78]);
  sub_214420684();
  sub_214424944();
  return swift_release();
}

uint64_t sub_21441AC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  __int128 v8;
  _OWORD v10[2];
  char v11;

  sub_2141E801C(a1, (uint64_t)v10, &qword_253F15CD8);
  v7 = v11;
  v8 = v10[1];
  *(_OWORD *)a4 = v10[0];
  *(_OWORD *)(a4 + 16) = v8;
  *(_BYTE *)(a4 + 32) = v7;
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = a3;
  return swift_retain();
}

uint64_t sub_21441ACF4(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return sub_21441CF7C((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t sub_21441AD3C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    v8 = sub_2144252EC();
    v9 = sub_214424644();
    if (os_log_type_enabled(v9, v8))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v14 = v11;
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v10 + 4) = sub_21441C718(0xD00000000000001BLL, 0x800000021445BB10, &v14);
      _os_log_impl(&dword_2141CE000, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v11, -1, -1);
      MEMORY[0x2199CDA48](v10, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    sub_2143ABBF8(a1, 0, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_21441AEE8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    v8 = sub_2144252EC();
    v9 = sub_214424644();
    if (os_log_type_enabled(v9, v8))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v14 = v11;
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v10 + 4) = sub_21441C718(0xD00000000000002BLL, 0x800000021445BAE0, &v14);
      _os_log_impl(&dword_2141CE000, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v11, -1, -1);
      MEMORY[0x2199CDA48](v10, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    sub_2143ABBF8(a1, 0, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_21441B094@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  os_log_type_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[7];

  v3 = sub_214424218();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 56) == 1)
  {
    v9 = *(_QWORD *)(v1 + 40);
    v8 = *(_QWORD *)(v1 + 48);
    v11 = *(_QWORD *)(v1 + 24);
    v10 = *(_QWORD *)(v1 + 32);
    v14 = v1 + 8;
    v12 = *(_QWORD *)(v1 + 8);
    v13 = *(_QWORD *)(v14 + 8);
    result = sub_2141DD1BC(v7, v12, v13, v11, v10, v9, v8);
  }
  else
  {
    swift_retain();
    v16 = sub_2144252EC();
    v17 = sub_214424644();
    if (os_log_type_enabled(v17, v16))
    {
      v18 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v21[0] = v19;
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)(v18 + 4) = sub_21441C718(0xD000000000000022, 0x800000021445BAB0, v21);
      _os_log_impl(&dword_2141CE000, v17, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v19, -1, -1);
      MEMORY[0x2199CDA48](v18, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    sub_21421CF8C(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21440E24C);
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = v21[0];
    v12 = v21[1];
    v13 = v21[2];
    v11 = v21[3];
    v10 = v21[4];
    v9 = v21[5];
    v8 = v21[6];
  }
  *a1 = v7;
  a1[1] = v12;
  a1[2] = v13;
  a1[3] = v11;
  a1[4] = v10;
  a1[5] = v9;
  a1[6] = v8;
  return result;
}

void *sub_21441B284@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_log_type_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[296];

  v2 = v1;
  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_2141E070C(v2, (uint64_t)v14, &qword_253F15AE8);
  if (v14[283] == 1)
    return memcpy(a1, v14, 0x11BuLL);
  v9 = sub_2144252EC();
  v10 = sub_214424644();
  if (os_log_type_enabled(v10, v9))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v13 = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v11 + 4) = sub_21441C718(0xD00000000000001BLL, 0x800000021445B9B0, &v13);
    _os_log_impl(&dword_2141CE000, v10, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2199CDA48](v12, -1, -1);
    MEMORY[0x2199CDA48](v11, -1, -1);
  }

  sub_21442420C();
  swift_getAtKeyPath();
  swift_release();
  return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21441B444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F15AD0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141E070C(v2, (uint64_t)v10, &qword_253F15AD0);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_2141FE1E0((uint64_t)v10, a1, type metadata accessor for ChartEnvironmentValues);
  v12 = sub_2144252EC();
  v13 = sub_214424644();
  if (os_log_type_enabled(v13, v12))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v17 = v15;
    *(_DWORD *)v14 = 136315138;
    *(_QWORD *)(v14 + 4) = sub_21441C718(0xD000000000000016, 0x80000002144348A0, &v17);
    _os_log_impl(&dword_2141CE000, v13, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2199CDA48](v15, -1, -1);
    MEMORY[0x2199CDA48](v14, -1, -1);
  }

  sub_21442420C();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21441B648@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  os_log_type_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[5];
  char v17;

  v2 = v1;
  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2141E070C(v2, (uint64_t)v16, &qword_253F15AF8);
  if (v17 == 1)
  {
    v9 = v16[3];
    a1[2] = v16[2];
    a1[3] = v9;
    a1[4] = v16[4];
    v10 = v16[1];
    *a1 = v16[0];
    a1[1] = v10;
  }
  else
  {
    v11 = sub_2144252EC();
    v12 = sub_214424644();
    if (os_log_type_enabled(v12, v11))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v15 = v14;
      *(_DWORD *)v13 = 136315138;
      *(_QWORD *)(v13 + 4) = sub_21441C718(0xD00000000000001CLL, 0x800000021445B9D0, &v15);
      _os_log_impl(&dword_2141CE000, v12, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v14, -1, -1);
      MEMORY[0x2199CDA48](v13, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_21441B814(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    v8 = sub_2144252EC();
    v9 = sub_214424644();
    if (os_log_type_enabled(v9, v8))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v14 = v11;
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v10 + 4) = sub_21441C718(0xD000000000000020, 0x800000021445BB30, &v14);
      _os_log_impl(&dword_2141CE000, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v11, -1, -1);
      MEMORY[0x2199CDA48](v10, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    sub_2143ABBF8(a1, 0, MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_21441B9C0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 v14;

  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    swift_retain();
    v8 = sub_2144252EC();
    v9 = sub_214424644();
    if (os_log_type_enabled(v9, v8))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v10 + 4) = sub_21441C718(0xD000000000000016, 0x800000021445BB60, &v13);
      _os_log_impl(&dword_2141CE000, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v11, -1, -1);
      MEMORY[0x2199CDA48](v10, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    sub_2143A634C(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_21441BB54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_log_type_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_254D6D148);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141E070C(v2, (uint64_t)v10, &qword_254D6D148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_214423B94();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = sub_2144252EC();
    v14 = sub_214424644();
    if (os_log_type_enabled(v14, v13))
    {
      v15 = swift_slowAlloc();
      v16 = swift_slowAlloc();
      v18 = v16;
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)(v15 + 4) = sub_21441C718(0x656C61636F4CLL, 0xE600000000000000, &v18);
      _os_log_impl(&dword_2141CE000, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v16, -1, -1);
      MEMORY[0x2199CDA48](v15, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_21441BD5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_254D6D990);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141E070C(v2, (uint64_t)v10, &qword_254D6D990);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_2141E801C((uint64_t)v10, a1, &qword_253F15BE8);
  v12 = sub_2144252EC();
  v13 = sub_214424644();
  if (os_log_type_enabled(v13, v12))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v17 = v15;
    *(_DWORD *)v14 = 136315138;
    *(_QWORD *)(v14 + 4) = sub_21441C718(0xD000000000000020, 0x800000021445B980, &v17);
    _os_log_impl(&dword_2141CE000, v13, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2199CDA48](v15, -1, -1);
    MEMORY[0x2199CDA48](v14, -1, -1);
  }

  sub_21442420C();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21441BF60(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, unint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;

  v14 = sub_214424218();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    a4(a1, a2);
  }
  else
  {
    swift_retain();
    v18 = sub_2144252EC();
    v19 = sub_214424644();
    if (os_log_type_enabled(v19, v18))
    {
      v20 = swift_slowAlloc();
      v26 = a6;
      v21 = v20;
      v22 = swift_slowAlloc();
      v27 = a7;
      v28 = v22;
      v23 = v22;
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)(v21 + 4) = sub_21441C718(a5, v26, &v28);
      _os_log_impl(&dword_2141CE000, v19, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy();
      v24 = v23;
      a7 = v27;
      MEMORY[0x2199CDA48](v24, -1, -1);
      MEMORY[0x2199CDA48](v21, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    sub_21440E240(a1, a2, 0, a7);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return v28;
  }
  return a1;
}

uint64_t sub_21441C120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = sub_214424218();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v6 = *(_QWORD *)(v0 + 16);
    sub_2141D975C(v5);
    sub_2141D975C(v6);
  }
  else
  {
    swift_retain();
    v7 = sub_2144252EC();
    v8 = sub_214424644();
    if (os_log_type_enabled(v8, v7))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v12 = v10;
      *(_DWORD *)v9 = 136315138;
      *(_QWORD *)(v9 + 4) = sub_21441C718(0xD00000000000001CLL, 0x800000021445B960, &v12);
      _os_log_impl(&dword_2141CE000, v8, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v10, -1, -1);
      MEMORY[0x2199CDA48](v9, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    sub_2141FE404(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214407638);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v12;
  }
  return v5;
}

unint64_t sub_21441C2F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F12060[0];
  if (!qword_253F12060[0])
  {
    v1 = sub_2141D7924(&qword_253F15B78);
    v2[0] = sub_21441C37C();
    v2[1] = sub_2141D9054(&qword_253F15B08, &qword_253F15B10, MEMORY[0x24BDEB950]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, qword_253F12060);
  }
  return result;
}

unint64_t sub_21441C37C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F12058;
  if (!qword_253F12058)
  {
    v1 = sub_2141D7924(&qword_253F15B50);
    v2[0] = sub_2141FED10(&qword_253F14A08, type metadata accessor for SgCanvasRenderer, (uint64_t)&unk_2144279D0);
    v2[1] = MEMORY[0x24BDEC438];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F12058);
  }
  return result;
}

uint64_t sub_21441C400()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21441C424@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_21441C44C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  os_log_type_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  _BYTE v18[26];
  char v19;

  v2 = v1;
  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2141E070C(v2, (uint64_t)v17, &qword_254D6EC40);
  if (v19 == 1)
  {
    v9 = v17[3];
    a1[2] = v17[2];
    a1[3] = v9;
    a1[4] = *(_OWORD *)v18;
    *(_OWORD *)((char *)a1 + 74) = *(_OWORD *)&v18[10];
    v10 = v17[1];
    *a1 = v17[0];
    a1[1] = v10;
  }
  else
  {
    v11 = sub_2144252EC();
    v12 = sub_214424644();
    if (os_log_type_enabled(v12, v11))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v16 = v14;
      *(_DWORD *)v13 = 136315138;
      *(_QWORD *)(v13 + 4) = sub_21441C718(0xD000000000000020, 0x800000021445B9F0, &v16);
      _os_log_impl(&dword_2141CE000, v12, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2199CDA48](v14, -1, -1);
      MEMORY[0x2199CDA48](v13, -1, -1);
    }

    sub_21442420C();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_21441C618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  _BYTE v13[16];

  v4 = sub_214424218();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  sub_2144241F4();
  v9 = type metadata accessor for ChartEnvironmentValues(0);
  sub_214424200();
  sub_2144241D0();
  sub_2144241AC();
  *(_QWORD *)(a2 + *(int *)(v9 + 28)) = v10;
  sub_2144241B8();
  sub_214391770();
  sub_214424224();
  v11 = v13[15];
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  *(_BYTE *)(a2 + *(int *)(v9 + 36)) = v11;
  return result;
}

unint64_t sub_21441C718(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_21441C7E8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_21427362C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_21427362C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v12);
  return v7;
}

unint64_t sub_21441C7E8(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_21441C8E4(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    result = sub_214425550();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_21441C8E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_21441C978(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)sub_21441CA74(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)sub_21441CA74((char *)(v3 > 1), v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_21441C978(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  char v5;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_21441CA10(v2, 0);
      result = sub_2144254E4();
      if ((v5 & 1) != 0)
        break;
      if (result == v2)
        return (uint64_t)v3;
      __break(1u);
LABEL_9:
      v2 = sub_214424F2C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_21441CA10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_254D6EC60);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_21441CA74(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D6EC60);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_21441CB5C()
{
  unint64_t result;

  result = qword_254D6EC78;
  if (!qword_254D6EC78)
  {
    result = MEMORY[0x2199CD934](&unk_214434E2C, &type metadata for XYBindingValue);
    atomic_store(result, (unint64_t *)&qword_254D6EC78);
  }
  return result;
}

uint64_t sub_21441CBA4(uint64_t a1)
{
  return sub_21441FB30(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ChartScrollView, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_214418460);
}

uint64_t sub_21441CBB8(__int128 *a1)
{
  uint64_t v1;

  return sub_21441A564(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_21441CBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14 != -1)
    return sub_21421BB6C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

uint64_t sub_21441CC08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_214418870(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_21441CC18@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(type metadata accessor for ChartScrollView(0, v6, v7, a2) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_214424128() - 8) + 80);
  return sub_214418C1C(a1, v3 + v9, v3 + ((v9 + v10 + v11) & ~v11), v6, v7, a3);
}

uint64_t sub_21441CCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = sub_214424170();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v8 = (int *)type metadata accessor for ChartScrollView(0, v2, v1, v7);
  v9 = *(unsigned __int8 *)(*((_QWORD *)v8 - 1) + 80);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v3);
  v10 = v0 + ((v6 + v9) & ~v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v10 + v8[9], v2);
  v11 = v10 + v8[10];
  if (*(unsigned __int8 *)(v11 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40), *(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56), *(_OWORD *)(v11 + 64));
  v12 = v10 + v8[11];
  if (*(unsigned __int8 *)(v12 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56), *(_OWORD *)(v12 + 64));
  v13 = v10 + v8[12];
  if ((*(_BYTE *)(v13 + 90) & 1) != 0)
  {
    v14 = *(unsigned __int16 *)(v13 + 40);
    if (v14 >> 8 <= 0xFE)
    {
      if ((v14 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v10 + v8[12]);
      else
        sub_2141E60B8(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    }
    v15 = *(unsigned __int16 *)(v13 + 88);
    if (v15 >> 8 <= 0xFE)
    {
      if ((v15 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v13 + 48);
      else
        sub_2141E60B8(*(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_BYTE *)(v13 + 64));
    }
  }
  else
  {
    swift_release();
  }
  v16 = v10 + v8[13];
  if ((*(_BYTE *)(v16 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v16 + 64))
      _s6Charts15AnyChartContentVwxx_0(v16 + 40);
  }
  else
  {
    swift_release();
  }
  v17 = v10 + v8[14];
  v18 = *(unsigned __int8 *)(v17 + 16);
  if (v18 != 255)
    sub_2141E60B8(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), v18);
  swift_release();
  v19 = v10 + v8[15];
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (v20 != 255)
    sub_2141E60B8(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), v20);
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_21441CEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(sub_214424170() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChartScrollView(0, v5, v6, v10) - 8) + 80);
  return sub_214419680(a1, a2, v2 + v8, v2 + ((v9 + v11) & ~v11), v5, v6);
}

uint64_t sub_21441CF7C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  double v6;
  double v7;
  uint64_t result;
  int v9;
  int v10;
  double v11;
  double v12;
  char v13;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 255)
  {
    if (v5 != 255)
      return 0;
LABEL_11:
    v9 = *(unsigned __int8 *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a2 + 40);
    if (v9 == 255)
      return v10 == 255;
    if (v10 != 255)
    {
      v11 = *(double *)(a1 + 24);
      v12 = *(double *)(a2 + 24);
      if (*(_BYTE *)(a1 + 40))
      {
        if (v9 != 1)
          return v10 == 2
              && (*(_QWORD *)&v11 == *(_QWORD *)&v12 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
               || (sub_214425790() & 1) != 0);
        if (v10 != 1)
          return 0;
      }
      else if (*(_BYTE *)(a2 + 40))
      {
        return 0;
      }
      if (v11 == v12)
        return 1;
    }
    return 0;
  }
  if (v5 == 255)
    return 0;
  v6 = *(double *)a1;
  v7 = *(double *)a2;
  if (!*(_BYTE *)(a1 + 16))
  {
    result = 0;
    if (*(_BYTE *)(a2 + 16))
      return result;
    goto LABEL_10;
  }
  if (v4 == 1)
  {
    result = 0;
    if (v5 != 1)
      return result;
LABEL_10:
    if (v6 != v7)
      return result;
    goto LABEL_11;
  }
  if (v5 != 2)
    return 0;
  if (*(_QWORD *)&v6 == *(_QWORD *)&v7 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    goto LABEL_11;
  v13 = sub_214425790();
  result = 0;
  if ((v13 & 1) != 0)
    goto LABEL_11;
  return result;
}

uint64_t sub_21441D0C8(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;

  if ((MEMORY[0x2199CB4A4]() & 1) != 0
    && (v4 = (int *)type metadata accessor for ChartEnvironmentValues(0),
        (MEMORY[0x2199CB528](a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (sub_2144240C8() & 1) != 0
    && *(double *)(a1 + v4[7]) == *(double *)(a2 + v4[7])
    && (sub_214423F18() & 1) != 0)
  {
    v5 = *(_BYTE *)(a1 + v4[9]) ^ *(_BYTE *)(a2 + v4[9]) ^ 1;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

double sub_21441D17C(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double MinX;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  sub_21442432C();
  if ((sub_214424248() & 1) != 0)
  {
    v13.origin.x = a3;
    v13.origin.y = a4;
    v13.size.width = a5;
    v13.size.height = a6;
    MinX = CGRectGetMinX(v13);
  }
  else
  {
    sub_214424338();
    if ((sub_214424248() & 1) != 0)
    {
      v14.origin.x = a3;
      v14.origin.y = a4;
      v14.size.width = a5;
      v14.size.height = a6;
      MinX = CGRectGetMaxX(v14) - a1;
    }
    else
    {
      sub_214424320();
      sub_214424248();
      v15.origin.x = a3;
      v15.origin.y = a4;
      v15.size.width = a5;
      v15.size.height = a6;
      MinX = CGRectGetMidX(v15) + a1 * -0.5;
    }
  }
  sub_21442432C();
  if ((sub_214424248() & 1) == 0)
  {
    sub_214424338();
    if ((sub_214424248() & 1) == 0)
    {
      sub_214424320();
      if ((sub_214424248() & 1) == 0)
        sub_2143836AC(7);
    }
  }
  sub_214424254();
  if ((sub_214424248() & 1) != 0)
  {
    v16.origin.x = a3;
    v16.origin.y = a4;
    v16.size.width = a5;
    v16.size.height = a6;
    CGRectGetMinY(v16);
  }
  else
  {
    sub_214424260();
    if ((sub_214424248() & 1) != 0)
    {
      v17.origin.x = a3;
      v17.origin.y = a4;
      v17.size.width = a5;
      v17.size.height = a6;
      CGRectGetMaxY(v17);
    }
    else
    {
      sub_21442426C();
      sub_214424248();
      v18.origin.x = a3;
      v18.origin.y = a4;
      v18.size.width = a5;
      v18.size.height = a6;
      CGRectGetMidY(v18);
    }
  }
  sub_214424254();
  if ((sub_214424248() & 1) == 0)
  {
    sub_214424260();
    if ((sub_214424248() & 1) == 0)
    {
      sub_21442426C();
      if ((sub_214424248() & 1) == 0)
        sub_2143836AC(8);
    }
  }
  return MinX;
}

uint64_t sub_21441D364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];
  _BYTE v16[41];
  char v17;
  uint64_t v18[5];
  unsigned __int8 v19;

  sub_2141E070C(a1, (uint64_t)v18, &qword_253F12388);
  if (v19 == 255)
  {
    sub_2141E0750((uint64_t)v18, &qword_253F12388);
    v4 = 0;
    v5 = 0;
    v6 = -1;
  }
  else
  {
    sub_2143C5C64(v18, (uint64_t)v16);
    if ((v17 & 1) != 0)
    {
      sub_2143C5CCC((uint64_t)v16, (uint64_t)v15);
      v4 = sub_2143FB82C();
      v5 = v7;
      v6 = v8;
      sub_2143C5C98((uint64_t)v15);
    }
    else
    {
      sub_2143C535C((uint64_t)v16);
      v4 = 0;
      v5 = 0;
      v6 = -1;
    }
    sub_2143C535C((uint64_t)v18);
  }
  sub_2141E070C(a1 + 48, (uint64_t)v18, &qword_253F12388);
  if (v19 == 255)
  {
    sub_2143C5DC4(a1);
    result = sub_2141E0750((uint64_t)v18, &qword_253F12388);
    v10 = 0;
    v11 = 0;
    v12 = -1;
  }
  else
  {
    sub_2143C5C64(v18, (uint64_t)v16);
    if ((v17 & 1) != 0)
    {
      sub_2143C5CCC((uint64_t)v16, (uint64_t)v15);
      v10 = sub_2143FB82C();
      v11 = v13;
      v12 = v14;
      sub_2143C5C98((uint64_t)v15);
    }
    else
    {
      sub_2143C535C((uint64_t)v16);
      v10 = 0;
      v11 = 0;
      v12 = -1;
    }
    sub_2143C5DC4(a1);
    result = sub_2143C535C((uint64_t)v18);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 40) = v12;
  return result;
}

uint64_t sub_21441D4F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = sub_214424170();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v8 = (int *)type metadata accessor for ChartScrollView(0, v2, v1, v7);
  v9 = *((_QWORD *)v8 - 1);
  v10 = (v6 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v25 = *(_QWORD *)(v9 + 64);
  v26 = sub_214424128();
  v11 = *(_QWORD *)(v26 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v3);
  v13 = v0 + v10;
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + v10 + v8[9], v2);
  v14 = v0 + v10 + v8[10];
  if (*(unsigned __int8 *)(v14 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56), *(_OWORD *)(v14 + 64));
  v15 = v13 + v8[11];
  if (*(unsigned __int8 *)(v15 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), *(_OWORD *)(v15 + 64));
  v16 = v13 + v8[12];
  if ((*(_BYTE *)(v16 + 90) & 1) != 0)
  {
    v17 = *(unsigned __int16 *)(v16 + 40);
    if (v17 >> 8 <= 0xFE)
    {
      if ((v17 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v13 + v8[12]);
      else
        sub_2141E60B8(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
    }
    v18 = *(unsigned __int16 *)(v16 + 88);
    if (v18 >> 8 <= 0xFE)
    {
      if ((v18 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v16 + 48);
      else
        sub_2141E60B8(*(_QWORD *)(v16 + 48), *(_QWORD *)(v16 + 56), *(_BYTE *)(v16 + 64));
    }
  }
  else
  {
    swift_release();
  }
  v19 = v13 + v8[13];
  if ((*(_BYTE *)(v19 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v19 + 64))
      _s6Charts15AnyChartContentVwxx_0(v19 + 40);
  }
  else
  {
    swift_release();
  }
  v20 = v13 + v8[14];
  v21 = *(unsigned __int8 *)(v20 + 16);
  if (v21 != 255)
    sub_2141E60B8(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), v21);
  swift_release();
  v22 = v13 + v8[15];
  v23 = *(unsigned __int8 *)(v22 + 16);
  if (v23 != 255)
    sub_2141E60B8(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), v23);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v0 + ((v10 + v25 + v12) & ~v12), v26);
  return swift_deallocObject();
}

uint64_t sub_21441D784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(sub_214424170() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  v11 = *(_QWORD *)(type metadata accessor for ChartScrollView(0, v5, v6, v10) - 8);
  v12 = (v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(sub_214424128() - 8) + 80);
  return sub_214419BE0(a1, a2, v2 + v8, v2 + v12, v2 + ((v12 + v13 + v14) & ~v14), v5, v6);
}

uint64_t sub_21441D840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for ChartScrollView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + v6[9], v5);
  v9 = v8 + v6[10];
  if (*(unsigned __int8 *)(v9 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56), *(_OWORD *)(v9 + 64));
  v10 = v8 + v6[11];
  if (*(unsigned __int8 *)(v10 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56), *(_OWORD *)(v10 + 64));
  v11 = v8 + v6[12];
  if ((*(_BYTE *)(v11 + 90) & 1) != 0)
  {
    v12 = *(unsigned __int16 *)(v11 + 40);
    if (v12 >> 8 <= 0xFE)
    {
      if ((v12 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v8 + v6[12]);
      else
        sub_2141E60B8(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    }
    v13 = *(unsigned __int16 *)(v11 + 88);
    if (v13 >> 8 <= 0xFE)
    {
      if ((v13 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v11 + 48);
      else
        sub_2141E60B8(*(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56), *(_BYTE *)(v11 + 64));
    }
  }
  else
  {
    swift_release();
  }
  v14 = v8 + v6[13];
  if ((*(_BYTE *)(v14 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v14 + 64))
      _s6Charts15AnyChartContentVwxx_0(v14 + 40);
  }
  else
  {
    swift_release();
  }
  v15 = v8 + v6[14];
  v16 = *(unsigned __int8 *)(v15 + 16);
  if (v16 != 255)
    sub_2141E60B8(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), v16);
  swift_release();
  v17 = v8 + v6[15];
  v18 = *(unsigned __int8 *)(v17 + 16);
  if (v18 != 255)
    sub_2141E60B8(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), v18);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21441DA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChartScrollView(0, v7, v8, a4) - 8) + 80);
  return sub_214419F18(a1, a2, v4 + ((v9 + 32) & ~v9), v7, v8);
}

uint64_t sub_21441DAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v24;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for ChartScrollView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v24 = *(_QWORD *)(v7 + 64);
  v9 = sub_214424128();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v4 + v8;
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8 + v6[9], v5);
  v13 = v4 + v8 + v6[10];
  if (*(unsigned __int8 *)(v13 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_OWORD *)(v13 + 64));
  v14 = v12 + v6[11];
  if (*(unsigned __int8 *)(v14 + 104) != 255)
    sub_21421BB6C(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56), *(_OWORD *)(v14 + 64));
  v15 = v12 + v6[12];
  if ((*(_BYTE *)(v15 + 90) & 1) != 0)
  {
    v16 = *(unsigned __int16 *)(v15 + 40);
    if (v16 >> 8 <= 0xFE)
    {
      if ((v16 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v12 + v6[12]);
      else
        sub_2141E60B8(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
    }
    v17 = *(unsigned __int16 *)(v15 + 88);
    if (v17 >> 8 <= 0xFE)
    {
      if ((v17 & 0x100) != 0)
        _s6Charts15AnyChartContentVwxx_0(v15 + 48);
      else
        sub_2141E60B8(*(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), *(_BYTE *)(v15 + 64));
    }
  }
  else
  {
    swift_release();
  }
  v18 = v12 + v6[13];
  if ((*(_BYTE *)(v18 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v18 + 64))
      _s6Charts15AnyChartContentVwxx_0(v18 + 40);
  }
  else
  {
    swift_release();
  }
  v19 = v12 + v6[14];
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (v20 != 255)
    sub_2141E60B8(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), v20);
  swift_release();
  v21 = v12 + v6[15];
  v22 = *(unsigned __int8 *)(v21 + 16);
  if (v22 != 255)
    sub_2141E60B8(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), v22);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v4 + ((v8 + v24 + v11) & ~v11), v9);
  return swift_deallocObject();
}

uint64_t sub_21441DCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for ChartScrollView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_214424128() - 8) + 80);
  return sub_21441A0C8(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_21441DD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21441AC94(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_21441DD68()
{
  unint64_t result;

  result = qword_254D6EC88;
  if (!qword_254D6EC88)
  {
    result = MEMORY[0x2199CD934](&unk_214434DDC, &type metadata for ScrollViewBoundsReader);
    atomic_store(result, (unint64_t *)&qword_254D6EC88);
  }
  return result;
}

uint64_t sub_21441DDAC(uint64_t a1)
{
  sub_21421BAE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_OWORD *)(a1 + 64));
  return a1;
}

_QWORD *sub_21441DE04(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_21441DE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14 != -1)
    return sub_21421BAE4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

unint64_t sub_21441DE98()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_254D6EC90;
  if (!qword_254D6EC90)
  {
    v1 = sub_2141D7924(qword_253F13E08);
    v2 = sub_2141FED10(&qword_254D6EC98, (uint64_t (*)(uint64_t))type metadata accessor for ChartModel.Scenegraph, (uint64_t)&unk_21442B6F8);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254D6EC90);
  }
  return result;
}

uint64_t sub_21441DF14(uint64_t result)
{
  *(_BYTE *)(result + 297) = 1;
  return result;
}

void *sub_21441DF24@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[304];

  v4 = type metadata accessor for RenderBasedChartView(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  sub_214410BEC(v4, (uint64_t)v6);
  return memcpy(a2, v6, 0x129uLL);
}

uint64_t sub_21441DF88(uint64_t result)
{
  *(_BYTE *)(result + 297) = 0;
  return result;
}

uint64_t *sub_21441DF90(uint64_t *a1)
{
  sub_214231FC0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_21441DFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for RenderBasedChartView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  v9 = v8 + v6[9];
  sub_2141D8BF8(&qword_253F15AD0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_214423B94();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = (int *)type metadata accessor for ChartEnvironmentValues(0);
    v12 = v9 + v11[5];
    v13 = sub_214423C54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    v14 = v9 + v11[6];
    v15 = sub_2144240D4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v9 + v11[8];
    v17 = sub_214423F24();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release();
  }
  sub_21440E240(*(_QWORD *)(v8 + v6[10]), *(_QWORD *)(v8 + v6[10] + 8), *(_BYTE *)(v8 + v6[10] + 16), (uint64_t (*)(void))sub_2141FA1C4);
  sub_21440E240(*(_QWORD *)(v8 + v6[11]), *(_QWORD *)(v8 + v6[11] + 8), *(_BYTE *)(v8 + v6[11] + 16), (uint64_t (*)(void))sub_2141FA1C4);
  sub_2143ABBF8(*(_QWORD *)(v8 + v6[12]), *(_BYTE *)(v8 + v6[12] + 8), MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v18 = v8 + v6[13];
  sub_214407638(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 24), *(_BYTE *)(v18 + 32));
  v19 = v8 + v6[14];
  sub_21440E24C(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24), *(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40), *(_QWORD *)(v19 + 48), *(_BYTE *)(v19 + 56));
  v20 = (unsigned __int8 *)(v8 + v6[15]);
  if ((v20[283] & 1) != 0)
  {
    if (v20[40] != 255)
      _s6Charts15AnyChartContentVwxx_0(v8 + v6[15]);
    if (v20[88] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v20 + 48));
    if (v20[136] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v20 + 96));
    if (v20[184] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v20 + 144));
    if (v20[232] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v20 + 192));
    if (v20[280] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v20 + 240));
  }
  else
  {
    swift_release();
  }
  sub_2143ABBF8(*(_QWORD *)(v8 + v6[16]), *(_BYTE *)(v8 + v6[16] + 8), MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v21 = v8 + v6[17];
  if ((*(_BYTE *)(v21 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v21 + 64))
      _s6Charts15AnyChartContentVwxx_0(v21 + 40);
  }
  else
  {
    swift_release();
  }
  v22 = v8 + v6[18];
  v23 = sub_2141D8BF8(&qword_254D6EC48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  sub_2141D8BF8(&qword_254D6ECA0);
  swift_release();
  v24 = v8 + v6[19];
  v25 = sub_2144247D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  return swift_deallocObject();
}

uint64_t sub_21441E2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RenderBasedChartView(0, v6, v7, a2) - 8) + 80);
  return sub_214414B88(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_21441E360(uint64_t a1)
{
  sub_21441E3D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_WORD *)(a1 + 128), *(_BYTE *)(a1 + 130));
  swift_retain();
  return a1;
}

uint64_t sub_21441E3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, char a18)
{
  if ((a18 & 1) != 0)
    return sub_21441E454(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, (unsigned __int16)(a17 & 0x1FF) >> 8);
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t sub_21441E454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18)
{
  if ((a18 & 1) != 0)
    return sub_21441E490();
  else
    return swift_retain();
}

uint64_t sub_21441E490()
{
  return swift_retain();
}

uint64_t sub_21441E4A0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_21441E4F0(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21441E53C(uint64_t a1)
{
  sub_21441E5B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_WORD *)(a1 + 128), *(_BYTE *)(a1 + 130));
  swift_release();
  return a1;
}

uint64_t sub_21441E5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, char a18)
{
  if ((a18 & 1) != 0)
    return sub_21441E630(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, (unsigned __int16)(a17 & 0x1FF) >> 8);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_21441E630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18)
{
  if ((a18 & 1) != 0)
    return sub_21441E66C();
  else
    return swift_release();
}

uint64_t sub_21441E66C()
{
  return swift_release();
}

uint64_t sub_21441E67C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_2143A6290();
  result = sub_214424224();
  *a1 = v3;
  return result;
}

uint64_t sub_21441E6CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_2143A624C();
  result = sub_214424224();
  *a1 = v3;
  return result;
}

uint64_t sub_21441E718()
{
  sub_2143A624C();
  return sub_214424230();
}

unint64_t sub_21441E760()
{
  unint64_t result;

  result = qword_253F10220;
  if (!qword_253F10220)
  {
    result = MEMORY[0x2199CD934](&unk_214430464, &type metadata for DefaultChartLegend);
    atomic_store(result, (unint64_t *)&qword_253F10220);
  }
  return result;
}

uint64_t sub_21441E7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v41;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for RenderBasedChartView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v41 = type metadata accessor for ChartModel.Scenegraph();
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v41 - 8) + 80);
  v11 = v9 + v10;
  swift_release();
  swift_release();
  v12 = v4;
  v13 = v4 + v8;
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8, v5);
  v14 = v4 + v8 + v6[9];
  sub_2141D8BF8(&qword_253F15AD0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = sub_214423B94();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v11;
    v17 = (int *)type metadata accessor for ChartEnvironmentValues(0);
    v18 = v14 + v17[5];
    v19 = sub_214423C54();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    v20 = v14 + v17[6];
    v21 = sub_2144240D4();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    v22 = v17[8];
    v11 = v16;
    v23 = v14 + v22;
    v24 = sub_214423F24();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  }
  else
  {
    swift_release();
  }
  v25 = v8 + v11;
  sub_21440E240(*(_QWORD *)(v13 + v6[10]), *(_QWORD *)(v13 + v6[10] + 8), *(_BYTE *)(v13 + v6[10] + 16), (uint64_t (*)(void))sub_2141FA1C4);
  sub_21440E240(*(_QWORD *)(v13 + v6[11]), *(_QWORD *)(v13 + v6[11] + 8), *(_BYTE *)(v13 + v6[11] + 16), (uint64_t (*)(void))sub_2141FA1C4);
  sub_2143ABBF8(*(_QWORD *)(v13 + v6[12]), *(_BYTE *)(v13 + v6[12] + 8), MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v26 = v13 + v6[13];
  sub_214407638(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_BYTE *)(v26 + 32));
  v27 = v13 + v6[14];
  sub_21440E24C(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 24), *(_QWORD *)(v27 + 32), *(_QWORD *)(v27 + 40), *(_QWORD *)(v27 + 48), *(_BYTE *)(v27 + 56));
  v28 = (unsigned __int8 *)(v13 + v6[15]);
  if ((v28[283] & 1) != 0)
  {
    if (v28[40] != 255)
      _s6Charts15AnyChartContentVwxx_0(v13 + v6[15]);
    if (v28[88] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 48));
    if (v28[136] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 96));
    if (v28[184] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 144));
    if (v28[232] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 192));
    if (v28[280] != 255)
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 240));
  }
  else
  {
    swift_release();
  }
  v29 = v25 & ~v10;
  sub_2143ABBF8(*(_QWORD *)(v13 + v6[16]), *(_BYTE *)(v13 + v6[16] + 8), MEMORY[0x24BEE4EF8], MEMORY[0x24BEE4BC0]);
  v30 = v13 + v6[17];
  if ((*(_BYTE *)(v30 + 80) & 1) != 0)
  {
    if (*(_QWORD *)(v30 + 64))
      _s6Charts15AnyChartContentVwxx_0(v30 + 40);
  }
  else
  {
    swift_release();
  }
  v31 = v13 + v6[18];
  v32 = sub_2141D8BF8(&qword_254D6EC48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  sub_2141D8BF8(&qword_254D6ECA0);
  swift_release();
  v33 = v13 + v6[19];
  v34 = sub_2144247D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
  v35 = v12 + v29;
  swift_release();
  swift_release();
  swift_release();
  if ((*(_BYTE *)(v12 + v29 + 315) & 1) != 0)
  {
    if (*(unsigned __int8 *)(v35 + 72) != 255)
      _s6Charts15AnyChartContentVwxx_0(v12 + v29 + 32);
    if (*(unsigned __int8 *)(v35 + 120) != 255)
      _s6Charts15AnyChartContentVwxx_0(v35 + 80);
    if (*(unsigned __int8 *)(v35 + 168) != 255)
      _s6Charts15AnyChartContentVwxx_0(v35 + 128);
    if (*(unsigned __int8 *)(v35 + 216) != 255)
      _s6Charts15AnyChartContentVwxx_0(v35 + 176);
    if (*(unsigned __int8 *)(v35 + 264) != 255)
      _s6Charts15AnyChartContentVwxx_0(v35 + 224);
    if (*(unsigned __int8 *)(v35 + 312) != 255)
      _s6Charts15AnyChartContentVwxx_0(v35 + 272);
  }
  else
  {
    swift_release();
  }
  if (*(_QWORD *)(v35 + 320))
    swift_release();
  if (*(_QWORD *)(v35 + 336))
    swift_release();
  if (*(_QWORD *)(v35 + 352))
    swift_release();
  if (*(_QWORD *)(v35 + 368))
    swift_release();
  if (*(_QWORD *)(v35 + 384))
    swift_release();
  if (*(unsigned __int8 *)(v35 + 504) != 255)
    sub_21421BB6C(*(_QWORD *)(v35 + 400), *(_QWORD *)(v35 + 408), *(_QWORD *)(v35 + 416), *(_QWORD *)(v35 + 424), *(_QWORD *)(v35 + 432), *(_QWORD *)(v35 + 440), *(_QWORD *)(v35 + 448), *(_QWORD *)(v35 + 456), *(_OWORD *)(v35 + 464));
  if (*(unsigned __int8 *)(v35 + 616) != 255)
    sub_21421BB6C(*(_QWORD *)(v35 + 512), *(_QWORD *)(v35 + 520), *(_QWORD *)(v35 + 528), *(_QWORD *)(v35 + 536), *(_QWORD *)(v35 + 544), *(_QWORD *)(v35 + 552), *(_QWORD *)(v35 + 560), *(_QWORD *)(v35 + 568), *(_OWORD *)(v35 + 576));
  if (*(unsigned __int8 *)(v35 + 720) != 255)
    sub_21421B8A0(*(_QWORD *)(v35 + 624), *(_QWORD *)(v35 + 632), *(_QWORD *)(v35 + 640), *(_QWORD *)(v35 + 648), *(_QWORD *)(v35 + 656), *(_QWORD *)(v35 + 664), *(_QWORD *)(v35 + 672), *(_QWORD *)(v35 + 680));
  if (*(unsigned __int8 *)(v35 + 856) != 255)
  {
    swift_release();
    if (*(_QWORD *)(v35 + 768))
      _s6Charts15AnyChartContentVwxx_0(v35 + 744);
    if (*(_QWORD *)(v35 + 784))
      swift_release();
    swift_bridgeObjectRelease();
    v36 = *(unsigned __int8 *)(v35 + 816);
    if (v36 != 255)
      sub_2143ABBF8(*(_QWORD *)(v35 + 808), v36 & 1, MEMORY[0x24BEE4BC0], MEMORY[0x24BEE4EF8]);
  }
  if (*(unsigned __int8 *)(v35 + 968) != 255)
    sub_21421BB6C(*(_QWORD *)(v35 + 864), *(_QWORD *)(v35 + 872), *(_QWORD *)(v35 + 880), *(_QWORD *)(v35 + 888), *(_QWORD *)(v35 + 896), *(_QWORD *)(v35 + 904), *(_QWORD *)(v35 + 912), *(_QWORD *)(v35 + 920), *(_OWORD *)(v35 + 928));
  if (*(unsigned __int8 *)(v35 + 1104) != 255)
    sub_21421BA80(*(_QWORD *)(v35 + 976), *(_QWORD *)(v35 + 984), *(_QWORD *)(v35 + 992), *(_QWORD *)(v35 + 1000), *(_QWORD *)(v35 + 1008), *(_QWORD *)(v35 + 1016), *(_QWORD *)(v35 + 1024), *(_QWORD *)(v35 + 1032), *(_QWORD *)(v35 + 1040), *(_QWORD *)(v35 + 1048), *(_QWORD *)(v35 + 1056), *(_QWORD *)(v35 + 1064));
  v37 = v35 + *(int *)(v41 + 56);
  v38 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  swift_release();
  swift_release();
  v39 = (unsigned __int8 *)(v35 + *(int *)(v41 + 68));
  if (v39[40] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v39);
  if (v39[88] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 48));
  if (v39[136] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 96));
  if (v39[184] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 144));
  if (v39[232] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 192));
  if (v39[280] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 240));
  return swift_deallocObject();
}

uint64_t sub_21441EEC4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2[2];
  v5 = v2[3];
  v6 = *(_QWORD *)(type metadata accessor for RenderBasedChartView(0, v4, v5, a1) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChartModel.Scenegraph() - 8) + 80);
  return sub_214414E00(v2[5], (uint64_t)v2 + ((v7 + v8 + v9) & ~v9), v4, v5, a2);
}

uint64_t sub_21441EF64(uint64_t result)
{
  *(_BYTE *)(result + 130) = 1;
  return result;
}

unint64_t sub_21441EF70()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13A18;
  if (!qword_253F13A18)
  {
    v1 = sub_2141D7924(&qword_253F13A20);
    v2[0] = sub_2141D9054(&qword_253F139F8, &qword_253F13A00, MEMORY[0x24BDEC6F8]);
    v2[1] = sub_2141D9054(&qword_253F15BF0, &qword_253F15BF8, MEMORY[0x24BDF0698]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13A18);
  }
  return result;
}

uint64_t sub_21441F00C()
{
  return sub_21441F028(&qword_253F132B0, &qword_253F132B8, (uint64_t (*)(void))sub_21441F094);
}

uint64_t sub_21441F028(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_2141D7924(a2);
    v7 = a3();
    v8[0] = MEMORY[0x24BDF4760];
    v8[1] = v7;
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21441F094()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13238;
  if (!qword_253F13238)
  {
    v1 = sub_2141D7924(&qword_253F13240);
    v2[0] = sub_2141D9054(&qword_253F13200, &qword_253F13208, MEMORY[0x24BDEC6F8]);
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13238);
  }
  return result;
}

uint64_t sub_21441F118(uint64_t result)
{
  *(_BYTE *)(result + 130) = 0;
  return result;
}

uint64_t sub_21441F124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = type metadata accessor for RenderBasedChartView(0, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2);
  return sub_21441345C(a1, v6, a3);
}

unint64_t sub_21441F194()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_254D6ECE8;
  if (!qword_254D6ECE8)
  {
    v1 = sub_2141D7924(&qword_254D6ECB0);
    v2[2] = sub_2141D7924(&qword_254D6ECD0);
    v2[3] = &type metadata for AnyChartScrollTargetBehavior;
    v2[4] = sub_21441F25C();
    v2[5] = sub_2143C5BB0();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_2141FED10(&qword_254D6ED18, type metadata accessor for AutomaticScrollLimitModifier, (uint64_t)&unk_2144316F4);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6ECE8);
  }
  return result;
}

unint64_t sub_21441F25C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6ECF0;
  if (!qword_254D6ECF0)
  {
    v1 = sub_2141D7924(&qword_254D6ECD0);
    v2[0] = sub_21441F2E0();
    v2[1] = sub_2141D9054(&qword_254D6ED10, &qword_254D6ECE0, MEMORY[0x24BDF1028]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6ECF0);
  }
  return result;
}

unint64_t sub_21441F2E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6ECF8;
  if (!qword_254D6ECF8)
  {
    v1 = sub_2141D7924(&qword_254D6ECC8);
    v2[0] = sub_21441F364();
    v2[1] = sub_2141D9054(&qword_253F15B08, &qword_253F15B10, MEMORY[0x24BDEB950]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6ECF8);
  }
  return result;
}

unint64_t sub_21441F364()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6ED00;
  if (!qword_254D6ED00)
  {
    v1 = sub_2141D7924(&qword_254D6ECC0);
    v2[0] = sub_2141D9054(&qword_254D6ED08, &qword_254D6ECB8, (uint64_t)&unk_214434AA0);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6ED00);
  }
  return result;
}

uint64_t sub_21441F3E8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyChartContent(a2, a1);
  return a2;
}

unint64_t sub_21441F424()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6ED48;
  if (!qword_254D6ED48)
  {
    v1 = sub_2141D7924(&qword_253F13250);
    v2[0] = sub_21441F490();
    v2[1] = sub_21441F61C();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6ED48);
  }
  return result;
}

unint64_t sub_21441F490()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6ED50;
  if (!qword_254D6ED50)
  {
    v1 = sub_2141D7924(&qword_253F13248);
    v2[0] = sub_21441F514();
    v2[1] = sub_2141D9054(&qword_253F15BB8, &qword_253F15BC0, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6ED50);
  }
  return result;
}

unint64_t sub_21441F514()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_254D6ED58;
  if (!qword_254D6ED58)
  {
    v1 = sub_2141D7924(&qword_253F134C0);
    v2[2] = type metadata accessor for SgCanvasRenderer(255);
    v2[3] = sub_2141D7924(&qword_253F14B80);
    v2[4] = sub_2141FED10(&qword_253F14A08, type metadata accessor for SgCanvasRenderer, (uint64_t)&unk_2144279D0);
    v2[5] = sub_2141D9054(&qword_253F14B78, &qword_253F14B80, (uint64_t)&unk_21442B360);
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_2141D9054(&qword_254D6ED60, &qword_254D6ED68, MEMORY[0x24BDEFF30]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6ED58);
  }
  return result;
}

unint64_t sub_21441F61C()
{
  unint64_t result;

  result = qword_254D6ED70;
  if (!qword_254D6ED70)
  {
    result = MEMORY[0x2199CD934](&unk_214427298, &type metadata for ChartInternalOverlayListenerModifier);
    atomic_store(result, (unint64_t *)&qword_254D6ED70);
  }
  return result;
}

uint64_t sub_21441F664@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  type metadata accessor for RenderBasedChartView(0, v4, v5, a1);
  return sub_214412860(v4, v5, v6, a2);
}

uint64_t sub_21441F6BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_retain();
}

uint64_t sub_21441F6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v1 = type metadata accessor for ChartModel.Scenegraph();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  if ((*(_BYTE *)(v3 + 315) & 1) != 0)
  {
    if (*(unsigned __int8 *)(v3 + 72) != 255)
      _s6Charts15AnyChartContentVwxx_0(v3 + 32);
    if (*(unsigned __int8 *)(v3 + 120) != 255)
      _s6Charts15AnyChartContentVwxx_0(v3 + 80);
    if (*(unsigned __int8 *)(v3 + 168) != 255)
      _s6Charts15AnyChartContentVwxx_0(v3 + 128);
    if (*(unsigned __int8 *)(v3 + 216) != 255)
      _s6Charts15AnyChartContentVwxx_0(v3 + 176);
    if (*(unsigned __int8 *)(v3 + 264) != 255)
      _s6Charts15AnyChartContentVwxx_0(v3 + 224);
    if (*(unsigned __int8 *)(v3 + 312) != 255)
      _s6Charts15AnyChartContentVwxx_0(v3 + 272);
  }
  else
  {
    swift_release();
  }
  if (*(_QWORD *)(v3 + 320))
    swift_release();
  if (*(_QWORD *)(v3 + 336))
    swift_release();
  if (*(_QWORD *)(v3 + 352))
    swift_release();
  if (*(_QWORD *)(v3 + 368))
    swift_release();
  if (*(_QWORD *)(v3 + 384))
    swift_release();
  if (*(unsigned __int8 *)(v3 + 504) != 255)
    sub_21421BB6C(*(_QWORD *)(v3 + 400), *(_QWORD *)(v3 + 408), *(_QWORD *)(v3 + 416), *(_QWORD *)(v3 + 424), *(_QWORD *)(v3 + 432), *(_QWORD *)(v3 + 440), *(_QWORD *)(v3 + 448), *(_QWORD *)(v3 + 456), *(_OWORD *)(v3 + 464));
  if (*(unsigned __int8 *)(v3 + 616) != 255)
    sub_21421BB6C(*(_QWORD *)(v3 + 512), *(_QWORD *)(v3 + 520), *(_QWORD *)(v3 + 528), *(_QWORD *)(v3 + 536), *(_QWORD *)(v3 + 544), *(_QWORD *)(v3 + 552), *(_QWORD *)(v3 + 560), *(_QWORD *)(v3 + 568), *(_OWORD *)(v3 + 576));
  if (*(unsigned __int8 *)(v3 + 720) != 255)
    sub_21421B8A0(*(_QWORD *)(v3 + 624), *(_QWORD *)(v3 + 632), *(_QWORD *)(v3 + 640), *(_QWORD *)(v3 + 648), *(_QWORD *)(v3 + 656), *(_QWORD *)(v3 + 664), *(_QWORD *)(v3 + 672), *(_QWORD *)(v3 + 680));
  if (*(unsigned __int8 *)(v3 + 856) != 255)
  {
    swift_release();
    if (*(_QWORD *)(v3 + 768))
      _s6Charts15AnyChartContentVwxx_0(v3 + 744);
    if (*(_QWORD *)(v3 + 784))
      swift_release();
    swift_bridgeObjectRelease();
    v4 = *(unsigned __int8 *)(v3 + 816);
    if (v4 != 255)
      sub_2143ABBF8(*(_QWORD *)(v3 + 808), v4 & 1, MEMORY[0x24BEE4BC0], MEMORY[0x24BEE4EF8]);
  }
  if (*(unsigned __int8 *)(v3 + 968) != 255)
    sub_21421BB6C(*(_QWORD *)(v3 + 864), *(_QWORD *)(v3 + 872), *(_QWORD *)(v3 + 880), *(_QWORD *)(v3 + 888), *(_QWORD *)(v3 + 896), *(_QWORD *)(v3 + 904), *(_QWORD *)(v3 + 912), *(_QWORD *)(v3 + 920), *(_OWORD *)(v3 + 928));
  if (*(unsigned __int8 *)(v3 + 1104) != 255)
    sub_21421BA80(*(_QWORD *)(v3 + 976), *(_QWORD *)(v3 + 984), *(_QWORD *)(v3 + 992), *(_QWORD *)(v3 + 1000), *(_QWORD *)(v3 + 1008), *(_QWORD *)(v3 + 1016), *(_QWORD *)(v3 + 1024), *(_QWORD *)(v3 + 1032), *(_QWORD *)(v3 + 1040), *(_QWORD *)(v3 + 1048), *(_QWORD *)(v3 + 1056), *(_QWORD *)(v3 + 1064));
  v5 = v3 + *(int *)(v1 + 56);
  v6 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  swift_release();
  v7 = (unsigned __int8 *)(v3 + *(int *)(v1 + 68));
  if (v7[40] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  if (v7[88] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 48));
  if (v7[136] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 96));
  if (v7[184] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 144));
  if (v7[232] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 192));
  if (v7[280] != 255)
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 240));
  return swift_deallocObject();
}

uint64_t sub_21441FABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChartModel.Scenegraph() - 8) + 80);
  return sub_2144129D0(a1, v2 + ((v5 + 16) & ~v5), a2);
}

id sub_21441FB08(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_21441FB1C(uint64_t a1)
{
  return sub_21441FB30(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RenderBasedChartView, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_214412FA4);
}

uint64_t sub_21441FB30(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a2(0, v5, v6) - 8) + 80);
  return a3(a1, v3 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_21441FBAC(uint64_t result)
{
  *(_BYTE *)(result + 129) = 1;
  return result;
}

uint64_t sub_21441FBB8(uint64_t result)
{
  *(_BYTE *)(result + 129) = 0;
  return result;
}

uint64_t sub_21441FBC0(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_21441FBE8(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t destroy for XYBindingValue(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 16);
  if (v2 != 255)
    result = sub_2141E60B8(*(_QWORD *)result, *(_QWORD *)(result + 8), v2);
  v3 = *(unsigned __int8 *)(v1 + 40);
  if (v3 != 255)
    return sub_2141E60B8(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v3);
  return result;
}

uint64_t initializeWithCopy for XYBindingValue(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    sub_2141DD14C(*a2, v6, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v4;
  }
  v7 = *((unsigned __int8 *)a2 + 40);
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  }
  else
  {
    v9 = a2[3];
    v8 = a2[4];
    sub_2141DD14C(v9, v8, v7);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for XYBindingValue(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      v13 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      sub_2141DD14C(*(_QWORD *)a2, v11, v4);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    sub_21432CC7C(a1);
    v12 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v12;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    sub_2141DD14C(*(_QWORD *)a2, v6, v4);
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v4;
    sub_2141E60B8(v7, v8, v9);
  }
  v14 = (__int128 *)(a1 + 24);
  v15 = (__int128 *)((char *)a2 + 24);
  v16 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v16 == 255)
    {
      v25 = *v15;
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *v14 = v25;
    }
    else
    {
      v23 = *((_QWORD *)a2 + 3);
      v22 = *((_QWORD *)a2 + 4);
      sub_2141DD14C(v23, v22, v16);
      *(_QWORD *)(a1 + 24) = v23;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 40) = v16;
    }
  }
  else if (v16 == 255)
  {
    sub_21432CC7C(a1 + 24);
    v24 = *((_BYTE *)a2 + 40);
    *v14 = *v15;
    *(_BYTE *)(a1 + 40) = v24;
  }
  else
  {
    v18 = *((_QWORD *)a2 + 3);
    v17 = *((_QWORD *)a2 + 4);
    sub_2141DD14C(v18, v17, v16);
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v17;
    v21 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v16;
    sub_2141E60B8(v19, v20, v21);
  }
  return a1;
}

uint64_t assignWithTake for XYBindingValue(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 != 255)
  {
    v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 != 255)
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v5;
      sub_2141E60B8(v6, v7, v4);
      goto LABEL_6;
    }
    sub_21432CC7C(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
LABEL_6:
  v8 = (_OWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a1 + 40);
  if (v9 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *v8;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    return a1;
  }
  v10 = *(unsigned __int8 *)(a2 + 40);
  if (v10 == 255)
  {
    sub_21432CC7C(a1 + 24);
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *v8;
  *(_BYTE *)(a1 + 40) = v10;
  sub_2141E60B8(v11, v12, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XYBindingValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XYBindingValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for XYBindingValue()
{
  return &type metadata for XYBindingValue;
}

uint64_t initializeWithCopy for ScrollViewBoundsReader(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollViewBoundsReader(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollViewBoundsReader(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBoundsReader(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBoundsReader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBoundsReader()
{
  return &type metadata for ScrollViewBoundsReader;
}

uint64_t getEnumTagSinglePayload for ChartLayout.LegendParameters(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && a1[41])
    return (*(_DWORD *)a1 + 248);
  v3 = *a1;
  v4 = v3 >= 9;
  v5 = v3 - 9;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartLayout.LegendParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 248;
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartLayout.LegendParameters()
{
  return &type metadata for ChartLayout.LegendParameters;
}

uint64_t storeEnumTagSinglePayload for ChartCanvasMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_214420250 + 4 * byte_214434780[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_214420284 + 4 * byte_21443477B[v4]))();
}

uint64_t sub_214420284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21442028C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x214420294);
  return result;
}

uint64_t sub_2144202A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2144202A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2144202AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2144202B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChartCanvasMode()
{
  return &type metadata for ChartCanvasMode;
}

unint64_t sub_2144202D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F132D0;
  if (!qword_253F132D0)
  {
    v1 = sub_2141D7924(&qword_253F134F0);
    v2[0] = sub_21441AA88();
    v2[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F132D0);
  }
  return result;
}

uint64_t sub_214420344(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  ValueMetadata *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[2];

  v1 = *(_QWORD *)(a1 + 8);
  sub_2141D7924(&qword_254D6EC68);
  v2 = sub_214424110();
  v24[0] = v1;
  v24[1] = sub_2141D9054(&qword_254D6EC70, &qword_254D6EC68, MEMORY[0x24BDF09C8]);
  v3 = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v24);
  v4 = sub_21441CB5C();
  v20 = v2;
  v21 = &type metadata for XYBindingValue;
  v22 = v3;
  v23 = v4;
  v5 = MEMORY[0x24BDF38E8];
  v6 = MEMORY[0x2199CD8C8](255, &v20, MEMORY[0x24BDF38E8], 0);
  v20 = v2;
  v21 = &type metadata for XYBindingValue;
  v22 = v3;
  v23 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v8 = sub_2143C63D0();
  v20 = v6;
  v21 = &type metadata for ChartScrollPositionConfiguration;
  v22 = OpaqueTypeConformance2;
  v23 = v8;
  v9 = MEMORY[0x2199CD8C8](255, &v20, v5, 0);
  v20 = v6;
  v21 = &type metadata for ChartScrollPositionConfiguration;
  v22 = OpaqueTypeConformance2;
  v23 = v8;
  v10 = swift_getOpaqueTypeConformance2();
  v11 = sub_2143C6414();
  v20 = v9;
  v21 = &type metadata for ChartScrollZoomConfiguration;
  v22 = v10;
  v23 = v11;
  MEMORY[0x2199CD8C8](255, &v20, MEMORY[0x24BDF3908], 0);
  v20 = v9;
  v21 = &type metadata for ChartScrollZoomConfiguration;
  v22 = v10;
  v23 = v11;
  swift_getOpaqueTypeConformance2();
  v12 = sub_21442447C();
  MEMORY[0x2199CD934](MEMORY[0x24BDEFE20], v12);
  v13 = sub_214423D08();
  v14 = MEMORY[0x2199CD934](MEMORY[0x24BDEB238], v13);
  v20 = v13;
  v21 = (ValueMetadata *)v14;
  MEMORY[0x2199CD8C8](255, &v20, MEMORY[0x24BDF29F8], 0);
  v20 = v13;
  v21 = (ValueMetadata *)v14;
  swift_getOpaqueTypeConformance2();
  v15 = sub_214424188();
  v16 = MEMORY[0x2199CD934](MEMORY[0x24BDEDA10], v15);
  v20 = v15;
  v21 = (ValueMetadata *)v16;
  MEMORY[0x2199CD8C8](255, &v20, MEMORY[0x24BDF2DF8], 0);
  v17 = sub_2144243F8();
  v20 = v15;
  v21 = (ValueMetadata *)v16;
  v19[0] = swift_getOpaqueTypeConformance2();
  v19[1] = v16;
  return MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v17, v19);
}

unint64_t sub_2144205D0()
{
  unint64_t result;

  result = qword_254D6ED80;
  if (!qword_254D6ED80)
  {
    result = MEMORY[0x2199CD934](&unk_214434D74, &type metadata for ChartCanvasMode);
    atomic_store(result, (unint64_t *)&qword_254D6ED80);
  }
  return result;
}

uint64_t sub_214420614()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_214420624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(_BYTE *, _BYTE *);
  _BYTE v6[40];
  _BYTE v7[40];

  v4 = *(uint64_t (**)(_BYTE *, _BYTE *))(v2 + 16);
  sub_2141E801C(a1, (uint64_t)v6, &qword_253F15CD8);
  sub_2141E801C(a2, (uint64_t)v7, &qword_253F15CD8);
  return v4(v6, v7);
}

unint64_t sub_214420684()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_254D6ED98;
  if (!qword_254D6ED98)
  {
    v1 = sub_2141D7924(&qword_253F15CD8);
    v2 = sub_2141FED10(&qword_253F13B88, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x24BDBD830]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254D6ED98);
  }
  return result;
}

uint64_t sub_214420700()
{
  sub_2141D7924(&qword_254D6ED88);
  sub_2141D7924(&qword_253F15CD8);
  sub_2141D9054(&qword_254D6ED90, &qword_254D6ED88, MEMORY[0x24BDEFB78]);
  sub_214420684();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21442079C@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[7];
  char v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  v4 = sub_2141D8BF8(&qword_253F15B88);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v21 - v8;
  v11 = a1[1];
  v10 = a1[2];
  v13 = a1[3];
  v12 = a1[4];
  v23.origin.x = v11;
  v23.origin.y = v10;
  v23.size.width = v13;
  v23.size.height = v12;
  if (CGRectGetWidth(v23) <= 0.0)
  {
    v24.origin.x = v11;
    v24.origin.y = v10;
    v24.size.width = v13;
    v24.size.height = v12;
    v11 = CGRectGetMidX(v24) + -0.5;
    v13 = 1.0;
  }
  v25.origin.x = v11;
  v25.origin.y = v10;
  v25.size.width = v13;
  v25.size.height = v12;
  if (CGRectGetHeight(v25) <= 0.0)
  {
    v26.origin.x = v11;
    v26.origin.y = v10;
    v26.size.width = v13;
    v26.size.height = v12;
    CGRectGetMidY(v26);
  }
  sub_21442477C();
  *(_OWORD *)v21 = *(_OWORD *)&v21[3];
  v14 = v21[5];
  v15 = v21[6];
  v16 = v22;
  v17 = (char *)a1 + *(int *)(sub_2141D8BF8(&qword_253F134A8) + 36);
  v18 = &v6[*(int *)(v4 + 36)];
  v19 = sub_214424638();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, v17, v19);
  *(_OWORD *)v6 = *(_OWORD *)v21;
  *((_QWORD *)v6 + 2) = v14;
  *((_QWORD *)v6 + 3) = v15;
  v6[32] = v16;
  v6[33] = 1;
  sub_214424104();
  sub_2141E0750((uint64_t)v6, &qword_253F15B88);
  return sub_2141E801C((uint64_t)v9, a2, &qword_253F15B88);
}

uint64_t sub_214420980@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (**v49)(char *, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v54 = a3;
  v51 = sub_2141D8BF8(&qword_253F15B98);
  MEMORY[0x24BDAC7A8](v51);
  v53 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_214424578();
  v49 = *(void (***)(char *, _QWORD))(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2141D8BF8(&qword_253F15C70);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v42 - v13);
  v50 = sub_2141D8BF8(&qword_253F15C38);
  v15 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_2141D8BF8(&qword_253F13D60);
  MEMORY[0x24BDAC7A8](v52);
  MEMORY[0x24BDAC7A8](v18);
  if (a2)
  {
    v47 = v20;
    v48 = (char *)&v42 - v19;
    v45 = v21;
    v22 = a2;
    *v14 = sub_214424C44();
    v14[1] = v23;
    sub_2141D8BF8(&qword_253F15B38);
    v56 = a1;
    swift_getKeyPath();
    v43 = v6;
    swift_bridgeObjectRetain();
    sub_2141D8BF8(&qword_253F15CC0);
    v46 = v15;
    sub_2141D8BF8(&qword_253F15B88);
    sub_2141D9054(&qword_253F15CC8, &qword_253F15CC0, MEMORY[0x24BEE12D8]);
    sub_2144211C4();
    sub_214424B84();
    sub_21442456C();
    v24 = sub_2141D9054(&qword_253F15C68, &qword_253F15C70, MEMORY[0x24BDF4750]);
    v44 = v24;
    sub_2144248E4();
    v49[1](v8, v43);
    sub_2141E0750((uint64_t)v14, &qword_253F15C70);
    v25 = type metadata accessor for ChartAXAudiograph();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v22;
    v55 = v26;
    v49 = (void (**)(char *, _QWORD))v22;
    v56 = v9;
    v57 = v24;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v29 = sub_214421344(&qword_253F14AA8, v28, (uint64_t (*)(uint64_t))type metadata accessor for ChartAXAudiograph, (uint64_t)&unk_214434F48);
    v30 = v45;
    v31 = v50;
    sub_214424914();
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v31);
    v32 = v47;
    v33 = v48;
    v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v48, v30, v52);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v53, v33, v34);
    swift_storeEnumTagMultiPayload();
    v56 = v31;
    v57 = v25;
    v58 = OpaqueTypeConformance2;
    v59 = v29;
    swift_getOpaqueTypeConformance2();
    sub_2144243EC();

    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v33, v34);
  }
  else
  {
    *v11 = sub_214424C44();
    v11[1] = v36;
    sub_2141D8BF8(&qword_253F15B38);
    v56 = a1;
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    sub_2141D8BF8(&qword_253F15CC0);
    sub_2141D8BF8(&qword_253F15B88);
    sub_2141D9054(&qword_253F15CC8, &qword_253F15CC0, MEMORY[0x24BEE12D8]);
    sub_2144211C4();
    sub_214424B84();
    sub_2141E801C((uint64_t)v11, (uint64_t)v14, &qword_253F15C70);
    sub_2144212FC((uint64_t)v14, v53);
    swift_storeEnumTagMultiPayload();
    v37 = type metadata accessor for ChartAXAudiograph();
    v38 = sub_2141D9054(&qword_253F15C68, &qword_253F15C70, MEMORY[0x24BDF4750]);
    v56 = v9;
    v57 = v38;
    v39 = swift_getOpaqueTypeConformance2();
    v41 = sub_214421344(&qword_253F14AA8, v40, (uint64_t (*)(uint64_t))type metadata accessor for ChartAXAudiograph, (uint64_t)&unk_214434F48);
    v56 = v50;
    v57 = v37;
    v58 = v39;
    v59 = v41;
    swift_getOpaqueTypeConformance2();
    sub_2144243EC();
    return sub_2141E0750((uint64_t)v14, &qword_253F15C70);
  }
}

uint64_t sub_214420F44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_214420980(*(_QWORD *)v1, *(void **)(v1 + 8), a1);
}

void sub_214420F4C(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v3 = *(void **)(v1 + 16);
  sub_214425340();
  sub_21442534C();
  v4 = objc_msgSend(v3, sel_yAxis);
  objc_msgSend(a1, sel_setYAxis_, v4);

  v5 = objc_msgSend(v3, sel_series);
  if (!v5)
  {
    sub_214421384();
    sub_214424FE0();
    v6 = (id)sub_214424FD4();
    swift_bridgeObjectRelease();
    v5 = v6;
  }
  v7 = v5;
  objc_msgSend(a1, sel_setSeries_);

}

uint64_t sub_214421028()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChartAXAudiograph()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SgAccessibilityRenderer.AXShape()
{
  return &type metadata for SgAccessibilityRenderer.AXShape;
}

_QWORD *initializeBufferWithCopyOfBuffer for SgAccessibilityRenderer(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

void destroy for SgAccessibilityRenderer(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *assignWithCopy for SgAccessibilityRenderer(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for SgAccessibilityRenderer(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for SgAccessibilityRenderer()
{
  return &type metadata for SgAccessibilityRenderer;
}

uint64_t sub_214421178()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_214421188()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_214421198()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 16);
}

void sub_2144211A4(void *a1)
{
  sub_214420F4C(a1);
}

unint64_t sub_2144211C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F15B80;
  if (!qword_253F15B80)
  {
    v1 = sub_2141D7924(&qword_253F15B88);
    v2[0] = sub_21442124C();
    v2[1] = sub_214421344(&qword_253F132D8, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F15B80);
  }
  return result;
}

unint64_t sub_21442124C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F15B68;
  if (!qword_253F15B68)
  {
    v1 = sub_2141D7924(&qword_253F15B70);
    v2[0] = sub_2144212B8();
    v2[1] = sub_2143AC6A4();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F15B68);
  }
  return result;
}

unint64_t sub_2144212B8()
{
  unint64_t result;

  result = qword_253F15C20;
  if (!qword_253F15C20)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BDF1B88], MEMORY[0x24BDF1BB0]);
    atomic_store(result, (unint64_t *)&qword_253F15C20);
  }
  return result;
}

uint64_t sub_2144212FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F15C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_214421344(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x2199CD934](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_214421384()
{
  unint64_t result;

  result = qword_253F10D68[0];
  if (!qword_253F10D68[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_253F10D68);
  }
  return result;
}

uint64_t sub_2144213C0()
{
  return MEMORY[0x24BDF5138];
}

unint64_t sub_2144213D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  result = qword_253F15BA8;
  if (!qword_253F15BA8)
  {
    v1 = sub_2141D7924(&qword_253F13C30);
    v2 = sub_2141D7924(&qword_253F15C38);
    v3 = type metadata accessor for ChartAXAudiograph();
    sub_2141D7924(&qword_253F15C70);
    v4 = sub_2141D9054(&qword_253F15C68, &qword_253F15C70, MEMORY[0x24BDF4750]);
    v6[2] = v2;
    v6[3] = v3;
    v6[4] = swift_getOpaqueTypeConformance2();
    v6[5] = sub_214421344(&qword_253F14AA8, v5, (uint64_t (*)(uint64_t))type metadata accessor for ChartAXAudiograph, (uint64_t)&unk_214434F48);
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = v4;
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v6);
    atomic_store(result, (unint64_t *)&qword_253F15BA8);
  }
  return result;
}

uint64_t sub_2144214E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ChartContentModifier._makeChartContent(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2144214F8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a2;
  v26 = a3;
  v24 = a4;
  v5 = sub_2141D8BF8(&qword_254D6D318);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - v9;
  v27 = sub_2141D8BF8(&qword_254D6D320);
  v11 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_214424584();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214424590();
  sub_2143ACF60(a1, (uint64_t)v16);
  sub_2141D8BF8(&qword_254D6EE90);
  sub_2144223A0();
  sub_2144242F0();
  sub_2144214F8(v13, v16, v25, v26);
  sub_2143AD100((uint64_t)v10, (uint64_t)v7);
  v21 = sub_2144245D8();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
  {
    sub_2143AD148((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_2143AD188((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return sub_2143AD148((uint64_t)v7);
  }
  else
  {
    sub_2144245CC();
    sub_2143AD148((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_2143AD188((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  }
}

uint64_t static _ChartContentModifier._makeChartContent(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a3;
  v37 = a4;
  v31 = a1;
  v34 = a7;
  v10 = sub_2141D8BF8(&qword_254D6D318);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = sub_214423DA4();
  v35 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v18 = (char *)&v31 - v17;
  v19 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_214424584();
  v32 = *(_QWORD *)(v22 - 8);
  v33 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214424590();
  sub_2143ACF60(a2, (uint64_t)v21);
  v26 = type metadata accessor for ChartContentModifierBodyAccessor(0, a5, a6, v25);
  MEMORY[0x2199CD934](&unk_2144350C8, v26);
  sub_2144242F0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v18, v21, v36, v37, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_2143AD100((uint64_t)v15, (uint64_t)v12);
  v28 = sub_2144245D8();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v12, 1, v28) == 1)
  {
    sub_2143AD148((uint64_t)v15);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v38);
    sub_2143AD188((uint64_t)v21);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v33);
    return sub_2143AD148((uint64_t)v12);
  }
  else
  {
    sub_2144245CC();
    sub_2143AD148((uint64_t)v15);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v38);
    sub_2143AD188((uint64_t)v21);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v33);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, v28);
  }
}

uint64_t sub_214421A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _ChartContentModifier._chartContentCount(inputs:body:)(a1, a2, a3);
}

uint64_t static _ChartContentModifier._chartContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t type metadata accessor for ChartContentModifierBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChartContentModifierBodyAccessor);
}

uint64_t sub_214421B18(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](result);
    v4 = type metadata accessor for ChartContentModifierBodyAccessor(0, v2, v3, v3);
    MEMORY[0x2199CD934](&unk_2144350C8, v4);
    return sub_2144242E4();
  }
  return result;
}

uint64_t sub_214421BA8(uint64_t result, char a2)
{
  return sub_214421B18(result, a2);
}

void ChartModifiedContent<>.body.getter()
{
  sub_214425628();
  __break(1u);
}

uint64_t static ChartModifiedContent<>._makeChartContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v24 = a7;
  v25 = a2;
  type metadata accessor for ChartModifiedContent(255, a3, a4, a4);
  v12 = sub_214423DA4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - v14;
  v16 = sub_214423DA4();
  v22 = *(_QWORD *)(v16 - 8);
  v23 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v22 - v17;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  sub_21424E854((void (*)(uint64_t))sub_214421E20, a4, (uint64_t)&v22 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v19 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = a3;
  *((_QWORD *)v20 + 3) = a4;
  *((_QWORD *)v20 + 4) = a5;
  *((_QWORD *)v20 + 5) = a6;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v19], v15, v12);
  (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), char *, uint64_t, uint64_t))(a6 + 32))(v18, v25, sub_214421FA4, v20, a4, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v18, v23);
}

uint64_t sub_214421D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for ChartModifiedContent(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a3;
  v8 = sub_214423CB4();
  sub_2141DB52C(v7, (uint64_t)sub_214422404, (uint64_t)v11, a3, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  return v11[5];
}

uint64_t sub_214421E20(uint64_t a1)
{
  uint64_t *v1;

  return sub_214421D94(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_214421E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = sub_214423DA4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v17[-v13];
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  type metadata accessor for ChartModifiedContent(255, a3, a4, v15);
  sub_214423DA4();
  sub_21424E854((void (*)(uint64_t))sub_2144223EC, a3, (uint64_t)v14);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a5 + 48))(v14, a1, a3, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_214421F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for ChartModifiedContent(255, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v5 = sub_214423DA4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
  return swift_deallocObject();
}

uint64_t sub_214421FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = v4[2];
  v7 = v4[3];
  v8 = v4[4];
  v9 = v4[5];
  type metadata accessor for ChartModifiedContent(255, v6, v7, a4);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_214423DA4() - 8) + 80);
  return sub_214421E2C(a1, (uint64_t)v4 + ((v10 + 48) & ~v10), v6, v7, v8, v9);
}

uint64_t sub_21442202C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ChartModifiedContent(0, a2, a3, a4);
  v9[3] = a2;
  v6 = sub_214423CB4();
  sub_2141DB52C(a1, (uint64_t)sub_2144223F8, (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t static ChartModifiedContent<>._chartContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a5 + 40))(a1, sub_214422158, v10, a3, a5);
  swift_release();
  return v11;
}

uint64_t sub_214422148()
{
  return swift_deallocObject();
}

uint64_t sub_214422158()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 56))();
}

void sub_214422188()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_2144221D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ChartModifiedContent<>._makeChartContent(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t sub_2144221E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ChartModifiedContent<>._chartContentCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t ChartContent.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v15, v4, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  return ChartModifiedContent.init(content:modifier:)((uint64_t)v15, (uint64_t)v11, a2, a3, a4);
}

_UNKNOWN **sub_2144222E0()
{
  return &protocol witness table for Never;
}

uint64_t sub_2144222EC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <> ChartModifiedContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21442232C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&unk_214434FE4, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _ChartContentModifier.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _ChartContentModifier._makeChartContent(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _ChartContentModifier._chartContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

unint64_t sub_2144223A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D6EE98;
  if (!qword_254D6EE98)
  {
    v1 = sub_2141D7924(&qword_254D6EE90);
    result = MEMORY[0x2199CD934](&unk_2144350C8, v1);
    atomic_store(result, (unint64_t *)&qword_254D6EE98);
  }
  return result;
}

uint64_t sub_2144223EC(uint64_t a1)
{
  uint64_t *v1;

  return sub_21442202C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_2144223F8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result - 1;
  return result;
}

uint64_t sub_214422404@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2144223F8(a1, a2);
}

uint64_t AnyAxisMark.init(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2141D8DC0(a1, a2);
}

uint64_t static AnyAxisMark._renderAxisMark(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *a2;
  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_2141E88D0(a1, v3);
  v7 = v2;
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(v4 + 16))(v5, &v7, v3, v4);
}

uint64_t static AnyAxisMark._layoutAxisMark(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *a2;
  v4 = a1[3];
  v3 = a1[4];
  v5 = sub_2141E88D0(a1, v4);
  v7 = v2;
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(v3 + 8))(v5, &v7, v4, v3);
}

uint64_t AnyAxisMark.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2141D7878(v1, a1);
}

uint64_t AnyAxisMark.init<A>(erasing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;

  a4[3] = a2;
  a4[4] = a3;
  v6 = sub_2141D8DD8(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v6, a1, a2);
}

uint64_t sub_214422518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a4 + 8))(a1, &v5);
}

uint64_t sub_21442254C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a4 + 16))(a1, &v5);
}

uint64_t sub_214422580(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *a2;
  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_2141E88D0(a1, v3);
  return sub_214422518((uint64_t)v5, v2, v3, v4);
}

uint64_t sub_2144225BC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *a2;
  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_2141E88D0(a1, v3);
  return sub_21442254C((uint64_t)v5, v2, v3, v4);
}

uint64_t static Optional<A>._layoutAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v8 = sub_214425388();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
  v20 = v17;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(a4 + 8))(v16, &v20, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a3);
}

uint64_t static Optional<A>._renderAxisMark(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v10 = sub_214425388();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a1, v10, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *a5 = 0xE000000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a3);
    v22 = v19;
    (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(a4 + 16))(v18, &v22, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a3);
  }
  return result;
}

uint64_t sub_214422884(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Optional<A>._layoutAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t sub_214422890@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return static Optional<A>._renderAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

void static BuilderEmpty._renderAxisMark(_:_:)(_QWORD *a1@<X8>)
{
  *a1 = 0xE000000000000000;
}

uint64_t static BuilderConditional<>._layoutAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a5;
  v32 = a6;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for BuilderConditional.Storage(0, v18, v19, v19);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v31 - v22;
  v24 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v31 - v22, a1, v20, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v23, a4);
    MEMORY[0x24BDAC7A8](v26);
    *(&v31 - 6) = a3;
    *(&v31 - 5) = a4;
    v27 = v32;
    *(&v31 - 4) = v31;
    *(&v31 - 3) = v27;
    *(&v31 - 2) = (uint64_t)v12;
    *(&v31 - 1) = v24;
    sub_21421FC18(0, (void (*)(void))sub_214422AA4, (uint64_t)(&v31 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }
  else
  {
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v17, v23, a3);
    MEMORY[0x24BDAC7A8](v29);
    *(&v31 - 6) = a3;
    *(&v31 - 5) = a4;
    v30 = v32;
    *(&v31 - 4) = v31;
    *(&v31 - 3) = v30;
    *(&v31 - 2) = (uint64_t)v17;
    *(&v31 - 1) = v24;
    sub_21421FC18(1, (void (*)(void))sub_214422AE4, (uint64_t)(&v31 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, a3);
  }
}

uint64_t sub_214422AA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v2 + 8))(v1, &v4);
}

uint64_t sub_214422AE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = v0[4];
  v2 = v0[6];
  v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v1 + 8))(v2, &v4);
}

uint64_t static BuilderConditional<>._renderAxisMark(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a5;
  v34 = a6;
  v35 = a7;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BuilderConditional.Storage(0, v19, v20, v20);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v25 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16))((char *)&v32 - v23, a1, v21, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v24, a4);
    MEMORY[0x24BDAC7A8](v27);
    *(&v32 - 6) = a3;
    *(&v32 - 5) = a4;
    v28 = v34;
    *(&v32 - 4) = v33;
    *(&v32 - 3) = v28;
    *(&v32 - 2) = (uint64_t)v13;
    *(&v32 - 1) = v25;
    sub_21421FC18(0, (void (*)(void))sub_214422D24, (uint64_t)(&v32 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }
  else
  {
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v24, a3);
    MEMORY[0x24BDAC7A8](v30);
    *(&v32 - 6) = a3;
    *(&v32 - 5) = a4;
    v31 = v34;
    *(&v32 - 4) = v33;
    *(&v32 - 3) = v31;
    *(&v32 - 2) = (uint64_t)v18;
    *(&v32 - 1) = v25;
    sub_21421FC18(1, (void (*)(void))sub_214422D64, (uint64_t)(&v32 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a3);
  }
}

uint64_t sub_214422D24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16))(v1, &v4);
}

uint64_t sub_214422D64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = v0[4];
  v2 = v0[6];
  v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v1 + 16))(v2, &v4);
}

uint64_t sub_214422DA4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderConditional<>._layoutAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t sub_214422DB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderConditional<>._renderAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t dispatch thunk of static AxisMark._layoutAxisMark(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static AxisMark._renderAxisMark(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for _AxisMarkLayoutInputs()
{
  return &type metadata for _AxisMarkLayoutInputs;
}

ValueMetadata *type metadata accessor for _AxisMarkRenderInputs()
{
  return &type metadata for _AxisMarkRenderInputs;
}

ValueMetadata *type metadata accessor for _AxisMarkRenderOutputs()
{
  return &type metadata for _AxisMarkRenderOutputs;
}

ValueMetadata *type metadata accessor for AnyAxisMark()
{
  return &type metadata for AnyAxisMark;
}

uint64_t sub_214422E14(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_BYTE *)(v6 + 112) = -1;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 160) = 255;
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 64) = a3;
  *(_BYTE *)(v6 + 136) = a4;
  swift_beginAccess();
  sub_2144237A4(a5, v6 + 72);
  swift_endAccess();
  *(_QWORD *)(v6 + 120) = a6;
  return v6;
}

uint64_t sub_214422EB4()
{
  uint64_t *v0;

  swift_release();
  swift_release();
  swift_release();
  sub_214423400((uint64_t)(v0 + 9));
  swift_release();
  sub_21424C914(v0[18], v0[19], v0[20]);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AxisMarkContext()
{
  return objc_opt_self();
}

uint64_t sub_214422F30()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_214422F38()
{
  uint64_t *v0;

  swift_release();
  swift_release();
  swift_release();
  sub_214423400((uint64_t)(v0 + 9));
  swift_release();
  sub_21424C914(v0[18], v0[19], v0[20]);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AxisMarkLayoutContext()
{
  return objc_opt_self();
}

uint64_t sub_214422FBC(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[48];

  *(_QWORD *)(v6 + 232) = 0;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  v13 = qword_253F11F40;
  swift_retain();
  if (v13 != -1)
    swift_once();
  v14 = qword_253F1C880;
  v15 = *(_QWORD *)algn_253F1C888;
  *(_QWORD *)(v6 + 240) = qword_253F1C880;
  *(_QWORD *)(v6 + 248) = v15;
  *(_QWORD *)(v6 + 256) = v14;
  *(_QWORD *)(v6 + 264) = v15;
  *(_QWORD *)(v6 + 272) = v14;
  *(_QWORD *)(v6 + 280) = v15;
  *(_QWORD *)(v6 + 288) = v14;
  *(_QWORD *)(v6 + 296) = v15;
  *(_QWORD *)(v6 + 304) = 0x7FF8000000000000;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_QWORD *)(v6 + 344) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  swift_release();
  sub_2142C3540(a5, (uint64_t)v17);
  sub_214422E14(a1, a2, a3, a4, (uint64_t)v17, a6);
  sub_214423400(a5);
  return v6;
}

uint64_t sub_2144230C8()
{
  uint64_t *v0;

  swift_release();
  swift_release();
  swift_release();
  sub_214423400((uint64_t)(v0 + 9));
  swift_release();
  sub_21424C914(v0[18], v0[19], v0[20]);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AxisMarkRenderContext()
{
  return objc_opt_self();
}

uint64_t destroy for AxisLayoutInformation()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AxisLayoutInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AxisLayoutInformation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for AxisLayoutInformation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisLayoutInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisLayoutInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisLayoutInformation()
{
  return &type metadata for AxisLayoutInformation;
}

uint64_t initializeWithCopy for AxisMarkEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AxisMarkEnvironment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for AxisMarkEnvironment(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for AxisMarkEnvironment()
{
  return &type metadata for AxisMarkEnvironment;
}

uint64_t sub_214423400(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_253F146B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_214423440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  uint64_t v44;
  uint64_t v46;
  int64_t v47;

  v5 = (_QWORD *)sub_21436CC10(MEMORY[0x24BEE4AF8]);
  v43 = *(_BYTE *)a1;
  v6 = *(double *)(a1 + 8);
  v7 = *(double *)(a1 + 16);
  v8 = *(double *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v10 = *(double *)(a1 + 24);
  v11 = *(double *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v46 = v12 + 64;
  v13 = 1 << *(_BYTE *)(v12 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v12 + 64);
  v44 = a2;
  sub_2143A46B0(a2);
  v16 = 0;
  v47 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_22;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_47;
    if (v19 >= v47)
      break;
    v20 = *(_QWORD *)(v46 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v47)
        break;
      v20 = *(_QWORD *)(v46 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v47)
          break;
        v20 = *(_QWORD *)(v46 + 8 * v16);
        if (!v20)
        {
          v21 = v19 + 3;
          if (v21 >= v47)
            break;
          v20 = *(_QWORD *)(v46 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              v16 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_48;
              if (v16 >= v47)
                goto LABEL_38;
              v20 = *(_QWORD *)(v46 + 8 * v16);
              ++v21;
              if (v20)
                goto LABEL_21;
            }
          }
          v16 = v21;
        }
      }
    }
LABEL_21:
    v15 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_22:
    v22 = 8 * v18;
    v23 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + v22);
    v24 = *(double *)(*(_QWORD *)(v12 + 56) + v22);
    v25 = *(_QWORD *)(a1 + 32);
    v26 = 0.0;
    if (*(_QWORD *)(v25 + 16))
    {
      v27 = sub_21433AB28(v23);
      if ((v28 & 1) != 0)
        v26 = *(double *)(*(_QWORD *)(v25 + 56) + 8 * v27);
    }
    if (v26 > v24)
      v24 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = sub_21433AB28(v23);
    v32 = v5[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      result = sub_214425820();
      __break(1u);
      return result;
    }
    v35 = v30;
    if (v5[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_2142AA958();
        if ((v35 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_2142A1628(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_21433AB28(v23);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_49;
      v31 = v36;
      if ((v35 & 1) != 0)
      {
LABEL_4:
        *(double *)(v5[7] + 8 * v31) = v24;
        goto LABEL_5;
      }
    }
    v5[(v31 >> 6) + 8] |= 1 << v31;
    v38 = 8 * v31;
    *(_QWORD *)(v5[6] + v38) = v23;
    *(double *)(v5[7] + v38) = v24;
    v39 = v5[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_46;
    v5[2] = v41;
LABEL_5:
    swift_bridgeObjectRelease();
  }
LABEL_38:
  swift_release();
  sub_2143A46D8(a1);
  if (v10 <= v11)
    v10 = v11;
  if (v7 <= v9)
    v7 = v9;
  if (v6 <= v8)
    v6 = v8;
  result = sub_2143A46D8(v44);
  *(_BYTE *)a3 = v43;
  *(double *)(a3 + 8) = v6;
  *(double *)(a3 + 16) = v7;
  *(double *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v5;
  *(int8x16_t *)(a3 + 40) = vbslq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)(v44 + 40), *(float64x2_t *)(a1 + 40)), *(int8x16_t *)(v44 + 40), *(int8x16_t *)(a1 + 40));
  return result;
}

uint64_t sub_2144237A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F146B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_2144237EC()
{
  qword_253F1C988 = 0x3D83880000000000;
}

double sub_214423800()
{
  double result;

  if (qword_253F11F50 != -1)
    swift_once();
  result = *(double *)&qword_253F1C988 * 4.0;
  *(double *)&qword_253F1C8B0 = *(double *)&qword_253F1C988 * 4.0;
  return result;
}

void sub_214423850()
{
  qword_253F1C980 = 0x3CE0000000000000;
}

double sub_214423860()
{
  double result;

  if (qword_253F11F48 != -1)
    swift_once();
  result = *(double *)&qword_253F1C980 * 6.28318531;
  *(double *)&qword_253F1C8B8 = *(double *)&qword_253F1C980 * 6.28318531;
  return result;
}

ValueMetadata *type metadata accessor for Geometry()
{
  return &type metadata for Geometry;
}

uint64_t sub_2144238C4()
{
  return MEMORY[0x24BDCB0F8]();
}

uint64_t sub_2144238D0()
{
  return MEMORY[0x24BDCB148]();
}

uint64_t sub_2144238DC()
{
  return MEMORY[0x24BDCB170]();
}

uint64_t sub_2144238E8()
{
  return MEMORY[0x24BDCB830]();
}

uint64_t sub_2144238F4()
{
  return MEMORY[0x24BDCB848]();
}

uint64_t sub_214423900()
{
  return MEMORY[0x24BDCB878]();
}

uint64_t sub_21442390C()
{
  return MEMORY[0x24BDCBCC8]();
}

uint64_t sub_214423918()
{
  return MEMORY[0x24BDCBD08]();
}

uint64_t sub_214423924()
{
  return MEMORY[0x24BDCBD18]();
}

uint64_t sub_214423930()
{
  return MEMORY[0x24BDCBD38]();
}

uint64_t sub_21442393C()
{
  return MEMORY[0x24BDCBD58]();
}

uint64_t sub_214423948()
{
  return MEMORY[0x24BDCBD60]();
}

uint64_t sub_214423954()
{
  return MEMORY[0x24BDCBD70]();
}

uint64_t sub_214423960()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_21442396C()
{
  return MEMORY[0x24BDCD420]();
}

uint64_t sub_214423978()
{
  return MEMORY[0x24BDCD498]();
}

uint64_t sub_214423984()
{
  return MEMORY[0x24BDCD4A0]();
}

uint64_t sub_214423990()
{
  return MEMORY[0x24BDCD638]();
}

uint64_t sub_21442399C()
{
  return MEMORY[0x24BDCD640]();
}

uint64_t sub_2144239A8()
{
  return MEMORY[0x24BDCD650]();
}

uint64_t sub_2144239B4()
{
  return MEMORY[0x24BDCD660]();
}

uint64_t sub_2144239C0()
{
  return MEMORY[0x24BDCD678]();
}

uint64_t sub_2144239CC()
{
  return MEMORY[0x24BDCD6C8]();
}

uint64_t sub_2144239D8()
{
  return MEMORY[0x24BDCD6D8]();
}

uint64_t sub_2144239E4()
{
  return MEMORY[0x24BDCDE78]();
}

uint64_t sub_2144239F0()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t sub_2144239FC()
{
  return MEMORY[0x24BDCDEE8]();
}

uint64_t sub_214423A08()
{
  return MEMORY[0x24BDCDF30]();
}

uint64_t sub_214423A14()
{
  return MEMORY[0x24BDCDFF8]();
}

uint64_t sub_214423A20()
{
  return MEMORY[0x24BDCE010]();
}

uint64_t sub_214423A2C()
{
  return MEMORY[0x24BDCE020]();
}

uint64_t sub_214423A38()
{
  return MEMORY[0x24BDCE028]();
}

uint64_t sub_214423A44()
{
  return MEMORY[0x24BDCE038]();
}

uint64_t sub_214423A50()
{
  return MEMORY[0x24BDCE040]();
}

uint64_t sub_214423A5C()
{
  return MEMORY[0x24BDCE048]();
}

uint64_t sub_214423A68()
{
  return MEMORY[0x24BDCE058]();
}

uint64_t sub_214423A74()
{
  return MEMORY[0x24BDCE060]();
}

uint64_t sub_214423A80()
{
  return MEMORY[0x24BDCE078]();
}

uint64_t sub_214423A8C()
{
  return MEMORY[0x24BDCE098]();
}

uint64_t sub_214423A98()
{
  return MEMORY[0x24BDCE0B0]();
}

uint64_t sub_214423AA4()
{
  return MEMORY[0x24BDCE0D0]();
}

uint64_t sub_214423AB0()
{
  return MEMORY[0x24BDCE0E0]();
}

uint64_t sub_214423ABC()
{
  return MEMORY[0x24BDCE110]();
}

uint64_t sub_214423AC8()
{
  return MEMORY[0x24BDCE130]();
}

uint64_t sub_214423AD4()
{
  return MEMORY[0x24BDCE138]();
}

uint64_t sub_214423AE0()
{
  return MEMORY[0x24BDCE160]();
}

uint64_t sub_214423AEC()
{
  return MEMORY[0x24BDCE168]();
}

uint64_t sub_214423AF8()
{
  return MEMORY[0x24BDCE178]();
}

uint64_t sub_214423B04()
{
  return MEMORY[0x24BDCE180]();
}

uint64_t sub_214423B10()
{
  return MEMORY[0x24BDCE190]();
}

uint64_t sub_214423B1C()
{
  return MEMORY[0x24BDCE230]();
}

uint64_t sub_214423B28()
{
  return MEMORY[0x24BDCE238]();
}

uint64_t sub_214423B34()
{
  return MEMORY[0x24BDCE2A0]();
}

uint64_t sub_214423B40()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_214423B4C()
{
  return MEMORY[0x24BDCE8A8]();
}

uint64_t sub_214423B58()
{
  return MEMORY[0x24BDCE8B0]();
}

uint64_t sub_214423B64()
{
  return MEMORY[0x24BDCE8D8]();
}

uint64_t sub_214423B70()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_214423B7C()
{
  return MEMORY[0x24BDCECA0]();
}

uint64_t sub_214423B88()
{
  return MEMORY[0x24BDCECD8]();
}

uint64_t sub_214423B94()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_214423BA0()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_214423BAC()
{
  return MEMORY[0x24BDCEFB0]();
}

uint64_t sub_214423BB8()
{
  return MEMORY[0x24BDCEFD8]();
}

uint64_t sub_214423BC4()
{
  return MEMORY[0x24BDCF028]();
}

uint64_t sub_214423BD0()
{
  return MEMORY[0x24BDCF040]();
}

uint64_t sub_214423BDC()
{
  return MEMORY[0x24BDCF050]();
}

uint64_t sub_214423BE8()
{
  return MEMORY[0x24BDCF078]();
}

uint64_t sub_214423BF4()
{
  return MEMORY[0x24BDCF0B8]();
}

uint64_t sub_214423C00()
{
  return MEMORY[0x24BDCF0D0]();
}

uint64_t sub_214423C0C()
{
  return MEMORY[0x24BDCF118]();
}

uint64_t sub_214423C18()
{
  return MEMORY[0x24BDCF160]();
}

uint64_t sub_214423C24()
{
  return MEMORY[0x24BDCF1B0]();
}

uint64_t sub_214423C30()
{
  return MEMORY[0x24BDCF1C0]();
}

uint64_t sub_214423C3C()
{
  return MEMORY[0x24BDCF210]();
}

uint64_t sub_214423C48()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_214423C54()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_214423C60()
{
  return MEMORY[0x24BDCF4E0]();
}

uint64_t sub_214423C6C()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_214423C78()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t sub_214423C84()
{
  return MEMORY[0x24BE095D0]();
}

uint64_t sub_214423C90()
{
  return MEMORY[0x24BE095E8]();
}

uint64_t sub_214423C9C()
{
  return MEMORY[0x24BE095F0]();
}

uint64_t sub_214423CA8()
{
  return MEMORY[0x24BE09610]();
}

uint64_t sub_214423CB4()
{
  return MEMORY[0x24BE09620]();
}

uint64_t sub_214423CC0()
{
  return MEMORY[0x24BE09638]();
}

uint64_t sub_214423CCC()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_214423CD8()
{
  return MEMORY[0x24BEE76C0]();
}

uint64_t sub_214423CE4()
{
  return MEMORY[0x24BDEAE98]();
}

uint64_t sub_214423CF0()
{
  return MEMORY[0x24BDEAEB0]();
}

uint64_t sub_214423CFC()
{
  return MEMORY[0x24BDEAED0]();
}

uint64_t sub_214423D08()
{
  return MEMORY[0x24BDEB210]();
}

uint64_t sub_214423D14()
{
  return MEMORY[0x24BDEB230]();
}

uint64_t sub_214423D20()
{
  return MEMORY[0x24BDEB260]();
}

uint64_t sub_214423D2C()
{
  return MEMORY[0x24BDEB310]();
}

uint64_t sub_214423D38()
{
  return MEMORY[0x24BDEB378]();
}

uint64_t sub_214423D44()
{
  return MEMORY[0x24BDEB380]();
}

uint64_t sub_214423D50()
{
  return MEMORY[0x24BDEB3A0]();
}

uint64_t sub_214423D5C()
{
  return MEMORY[0x24BDEB560]();
}

uint64_t sub_214423D68()
{
  return MEMORY[0x24BDEB5B8]();
}

uint64_t sub_214423D74()
{
  return MEMORY[0x24BDEB7B0]();
}

uint64_t sub_214423D80()
{
  return MEMORY[0x24BDEB7B8]();
}

uint64_t sub_214423D8C()
{
  return MEMORY[0x24BDEB8E8]();
}

uint64_t sub_214423D98()
{
  return MEMORY[0x24BDEB900]();
}

uint64_t sub_214423DA4()
{
  return MEMORY[0x24BDEB960]();
}

uint64_t sub_214423DB0()
{
  return MEMORY[0x24BDEBA08]();
}

uint64_t sub_214423DBC()
{
  return MEMORY[0x24BDEBC98]();
}

uint64_t sub_214423DC8()
{
  return MEMORY[0x24BDEBCA0]();
}

uint64_t sub_214423DD4()
{
  return MEMORY[0x24BDEBCA8]();
}

uint64_t sub_214423DE0()
{
  return MEMORY[0x24BDEBDE0]();
}

uint64_t sub_214423DEC()
{
  return MEMORY[0x24BDEBDF0]();
}

uint64_t sub_214423DF8()
{
  return MEMORY[0x24BDEBE00]();
}

uint64_t sub_214423E04()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t sub_214423E10()
{
  return MEMORY[0x24BDEBF88]();
}

uint64_t sub_214423E1C()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t sub_214423E28()
{
  return MEMORY[0x24BDEC158]();
}

uint64_t sub_214423E34()
{
  return MEMORY[0x24BDEC170]();
}

uint64_t sub_214423E40()
{
  return MEMORY[0x24BDEC188]();
}

uint64_t sub_214423E4C()
{
  return MEMORY[0x24BDEC1A0]();
}

uint64_t sub_214423E58()
{
  return MEMORY[0x24BDEC1A8]();
}

uint64_t sub_214423E64()
{
  return MEMORY[0x24BDEC260]();
}

uint64_t sub_214423E70()
{
  return MEMORY[0x24BDEC268]();
}

uint64_t sub_214423E7C()
{
  return MEMORY[0x24BDEC270]();
}

uint64_t sub_214423E88()
{
  return MEMORY[0x24BDEC280]();
}

uint64_t sub_214423E94()
{
  return MEMORY[0x24BDEC338]();
}

uint64_t sub_214423EA0()
{
  return MEMORY[0x24BDEC340]();
}

uint64_t sub_214423EAC()
{
  return MEMORY[0x24BDEC348]();
}

uint64_t sub_214423EB8()
{
  return MEMORY[0x24BDEC358]();
}

uint64_t sub_214423EC4()
{
  return MEMORY[0x24BDEC490]();
}

uint64_t sub_214423ED0()
{
  return MEMORY[0x24BDEC4A0]();
}

uint64_t sub_214423EDC()
{
  return MEMORY[0x24BDEC638]();
}

uint64_t sub_214423EE8()
{
  return MEMORY[0x24BDEC648]();
}

uint64_t sub_214423EF4()
{
  return MEMORY[0x24BDEC778]();
}

uint64_t sub_214423F00()
{
  return MEMORY[0x24BDEC7A8]();
}

uint64_t sub_214423F0C()
{
  return MEMORY[0x24BDEC7B0]();
}

uint64_t sub_214423F18()
{
  return MEMORY[0x24BDECEF8]();
}

uint64_t sub_214423F24()
{
  return MEMORY[0x24BDECF50]();
}

uint64_t sub_214423F30()
{
  return MEMORY[0x24BDECFA8]();
}

uint64_t sub_214423F3C()
{
  return MEMORY[0x24BDECFB0]();
}

uint64_t sub_214423F48()
{
  return MEMORY[0x24BDECFB8]();
}

uint64_t sub_214423F54()
{
  return MEMORY[0x24BDECFC8]();
}

uint64_t sub_214423F60()
{
  return MEMORY[0x24BDECFD0]();
}

uint64_t sub_214423F6C()
{
  return MEMORY[0x24BDECFD8]();
}

uint64_t sub_214423F78()
{
  return MEMORY[0x24BDECFE8]();
}

uint64_t sub_214423F84()
{
  return MEMORY[0x24BDECFF8]();
}

uint64_t sub_214423F90()
{
  return MEMORY[0x24BDED000]();
}

uint64_t sub_214423F9C()
{
  return MEMORY[0x24BDED008]();
}

uint64_t sub_214423FA8()
{
  return MEMORY[0x24BDED010]();
}

uint64_t sub_214423FB4()
{
  return MEMORY[0x24BDED018]();
}

uint64_t sub_214423FC0()
{
  return MEMORY[0x24BDED030]();
}

uint64_t sub_214423FCC()
{
  return MEMORY[0x24BDED038]();
}

uint64_t sub_214423FD8()
{
  return MEMORY[0x24BDED040]();
}

uint64_t sub_214423FE4()
{
  return MEMORY[0x24BDED048]();
}

uint64_t sub_214423FF0()
{
  return MEMORY[0x24BDED058]();
}

uint64_t sub_214423FFC()
{
  return MEMORY[0x24BDED060]();
}

uint64_t sub_214424008()
{
  return MEMORY[0x24BDED068]();
}

uint64_t sub_214424014()
{
  return MEMORY[0x24BDED070]();
}

uint64_t sub_214424020()
{
  return MEMORY[0x24BDED078]();
}

uint64_t sub_21442402C()
{
  return MEMORY[0x24BDED080]();
}

uint64_t sub_214424038()
{
  return MEMORY[0x24BDED088]();
}

uint64_t sub_214424044()
{
  return MEMORY[0x24BDED090]();
}

uint64_t sub_214424050()
{
  return MEMORY[0x24BDED098]();
}

uint64_t sub_21442405C()
{
  return MEMORY[0x24BDED0A0]();
}

uint64_t sub_214424068()
{
  return MEMORY[0x24BDED0A8]();
}

uint64_t sub_214424074()
{
  return MEMORY[0x24BDED0B0]();
}

uint64_t sub_214424080()
{
  return MEMORY[0x24BDED0B8]();
}

uint64_t sub_21442408C()
{
  return MEMORY[0x24BDED0C0]();
}

uint64_t sub_214424098()
{
  return MEMORY[0x24BDED0C8]();
}

uint64_t sub_2144240A4()
{
  return MEMORY[0x24BDED0D0]();
}

uint64_t sub_2144240B0()
{
  return MEMORY[0x24BDED0D8]();
}

uint64_t sub_2144240BC()
{
  return MEMORY[0x24BDED0F0]();
}

uint64_t sub_2144240C8()
{
  return MEMORY[0x24BDED128]();
}

uint64_t sub_2144240D4()
{
  return MEMORY[0x24BDED130]();
}

uint64_t sub_2144240E0()
{
  return MEMORY[0x24BDED1A0]();
}

uint64_t sub_2144240EC()
{
  return MEMORY[0x24BDED200]();
}

uint64_t sub_2144240F8()
{
  return MEMORY[0x24BDED250]();
}

uint64_t sub_214424104()
{
  return MEMORY[0x24BDED298]();
}

uint64_t sub_214424110()
{
  return MEMORY[0x24BDED2D0]();
}

uint64_t sub_21442411C()
{
  return MEMORY[0x24BDED3F8]();
}

uint64_t sub_214424128()
{
  return MEMORY[0x24BDED420]();
}

uint64_t sub_214424134()
{
  return MEMORY[0x24BDED8E0]();
}

uint64_t sub_214424140()
{
  return MEMORY[0x24BDED9B8]();
}

uint64_t sub_21442414C()
{
  return MEMORY[0x24BDED9C0]();
}

uint64_t sub_214424158()
{
  return MEMORY[0x24BDED9C8]();
}

uint64_t sub_214424164()
{
  return MEMORY[0x24BDED9D0]();
}

uint64_t sub_214424170()
{
  return MEMORY[0x24BDED9D8]();
}

uint64_t sub_21442417C()
{
  return MEMORY[0x24BDED9E8]();
}

uint64_t sub_214424188()
{
  return MEMORY[0x24BDED9F0]();
}

uint64_t sub_214424194()
{
  return MEMORY[0x24BDEDBA8]();
}

uint64_t sub_2144241A0()
{
  return MEMORY[0x24BDEDC58]();
}

uint64_t sub_2144241AC()
{
  return MEMORY[0x24BDEDF68]();
}

uint64_t sub_2144241B8()
{
  return MEMORY[0x24BDEE020]();
}

uint64_t sub_2144241C4()
{
  return MEMORY[0x24BDEE028]();
}

uint64_t sub_2144241D0()
{
  return MEMORY[0x24BDEE070]();
}

uint64_t sub_2144241DC()
{
  return MEMORY[0x24BDEE128]();
}

uint64_t sub_2144241E8()
{
  return MEMORY[0x24BDEE1D8]();
}

uint64_t sub_2144241F4()
{
  return MEMORY[0x24BDEE3C8]();
}

uint64_t sub_214424200()
{
  return MEMORY[0x24BDEE428]();
}

uint64_t sub_21442420C()
{
  return MEMORY[0x24BDEE4E0]();
}

uint64_t sub_214424218()
{
  return MEMORY[0x24BDEE4F8]();
}

uint64_t sub_214424224()
{
  return MEMORY[0x24BDEE530]();
}

uint64_t sub_214424230()
{
  return MEMORY[0x24BDEE538]();
}

uint64_t sub_21442423C()
{
  return MEMORY[0x24BDEE5C8]();
}

uint64_t sub_214424248()
{
  return MEMORY[0x24BDEE710]();
}

uint64_t sub_214424254()
{
  return MEMORY[0x24BDEE718]();
}

uint64_t sub_214424260()
{
  return MEMORY[0x24BDEE728]();
}

uint64_t sub_21442426C()
{
  return MEMORY[0x24BDEE730]();
}

uint64_t sub_214424278()
{
  return MEMORY[0x24BDEE8B8]();
}

uint64_t sub_214424284()
{
  return MEMORY[0x24BDEE9E8]();
}

uint64_t sub_214424290()
{
  return MEMORY[0x24BDEEA00]();
}

uint64_t sub_21442429C()
{
  return MEMORY[0x24BDEEA18]();
}

uint64_t sub_2144242A8()
{
  return MEMORY[0x24BDEEA28]();
}

uint64_t sub_2144242B4()
{
  return MEMORY[0x24BDEEA30]();
}

uint64_t sub_2144242C0()
{
  return MEMORY[0x24BDEEA40]();
}

uint64_t sub_2144242CC()
{
  return MEMORY[0x24BDEEA50]();
}

uint64_t sub_2144242D8()
{
  return MEMORY[0x24BDEEA60]();
}

uint64_t sub_2144242E4()
{
  return MEMORY[0x24BDEEAA8]();
}

uint64_t sub_2144242F0()
{
  return MEMORY[0x24BDEEAB0]();
}

uint64_t sub_2144242FC()
{
  return MEMORY[0x24BDEEB70]();
}

uint64_t sub_214424308()
{
  return MEMORY[0x24BDEEB88]();
}

uint64_t sub_214424314()
{
  return MEMORY[0x24BDEEF58]();
}

uint64_t sub_214424320()
{
  return MEMORY[0x24BDEEF60]();
}

uint64_t sub_21442432C()
{
  return MEMORY[0x24BDEEF78]();
}

uint64_t sub_214424338()
{
  return MEMORY[0x24BDEEF80]();
}

uint64_t sub_214424344()
{
  return MEMORY[0x24BDEF228]();
}

uint64_t sub_214424350()
{
  return MEMORY[0x24BDEF238]();
}

uint64_t sub_21442435C()
{
  return MEMORY[0x24BDEF248]();
}

uint64_t sub_214424368()
{
  return MEMORY[0x24BDEF260]();
}

uint64_t sub_214424374()
{
  return MEMORY[0x24BDEF270]();
}

uint64_t sub_214424380()
{
  return MEMORY[0x24BDEF278]();
}

uint64_t sub_21442438C()
{
  return MEMORY[0x24BDEF288]();
}

uint64_t sub_214424398()
{
  return MEMORY[0x24BDEF298]();
}

uint64_t sub_2144243A4()
{
  return MEMORY[0x24BDEF2A8]();
}

uint64_t sub_2144243B0()
{
  return MEMORY[0x24BDEF2C0]();
}

uint64_t sub_2144243BC()
{
  return MEMORY[0x24BDEF2C8]();
}

uint64_t sub_2144243C8()
{
  return MEMORY[0x24BDEF2D8]();
}

uint64_t sub_2144243D4()
{
  return MEMORY[0x24BDEF320]();
}

uint64_t sub_2144243E0()
{
  return MEMORY[0x24BDEF380]();
}

uint64_t sub_2144243EC()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t sub_2144243F8()
{
  return MEMORY[0x24BDEF3B8]();
}

uint64_t sub_214424404()
{
  return MEMORY[0x24BDEF5B8]();
}

uint64_t sub_214424410()
{
  return MEMORY[0x24BDEF600]();
}

uint64_t sub_21442441C()
{
  return MEMORY[0x24BDEF608]();
}

uint64_t sub_214424428()
{
  return MEMORY[0x24BDEFB50]();
}

uint64_t sub_214424434()
{
  return MEMORY[0x24BDEFDA0]();
}

uint64_t sub_214424440()
{
  return MEMORY[0x24BDEFDB0]();
}

uint64_t sub_21442444C()
{
  return MEMORY[0x24BDEFDE8]();
}

uint64_t sub_214424458()
{
  return MEMORY[0x24BDEFDF0]();
}

uint64_t sub_214424464()
{
  return MEMORY[0x24BDEFDF8]();
}

uint64_t sub_214424470()
{
  return MEMORY[0x24BDEFE08]();
}

uint64_t sub_21442447C()
{
  return MEMORY[0x24BDEFE10]();
}

uint64_t sub_214424488()
{
  return MEMORY[0x24BDEFEF8]();
}

uint64_t sub_214424494()
{
  return MEMORY[0x24BDF0110]();
}

uint64_t sub_2144244A0()
{
  return MEMORY[0x24BDF0118]();
}

uint64_t sub_2144244AC()
{
  return MEMORY[0x24BDF0270]();
}

uint64_t sub_2144244B8()
{
  return MEMORY[0x24BDF0278]();
}

uint64_t sub_2144244C4()
{
  return MEMORY[0x24BDF0280]();
}

uint64_t sub_2144244D0()
{
  return MEMORY[0x24BDF0288]();
}

uint64_t sub_2144244DC()
{
  return MEMORY[0x24BDF0520]();
}

uint64_t sub_2144244E8()
{
  return MEMORY[0x24BDF0528]();
}

uint64_t _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0()
{
  return MEMORY[0x24BDF0530]();
}

uint64_t sub_214424500()
{
  return MEMORY[0x24BDF0538]();
}

uint64_t sub_21442450C()
{
  return MEMORY[0x24BDF0548]();
}

uint64_t sub_214424518()
{
  return MEMORY[0x24BDF0550]();
}

uint64_t sub_214424524()
{
  return MEMORY[0x24BDF0820]();
}

uint64_t sub_214424530()
{
  return MEMORY[0x24BDF0828]();
}

uint64_t sub_21442453C()
{
  return MEMORY[0x24BDF0838]();
}

uint64_t sub_214424548()
{
  return MEMORY[0x24BDF0840]();
}

uint64_t sub_214424554()
{
  return MEMORY[0x24BDF08B8]();
}

uint64_t sub_214424560()
{
  return MEMORY[0x24BDF08D0]();
}

uint64_t sub_21442456C()
{
  return MEMORY[0x24BDF0A18]();
}

uint64_t sub_214424578()
{
  return MEMORY[0x24BDF0A20]();
}

uint64_t sub_214424584()
{
  return MEMORY[0x24BDF0AA0]();
}

uint64_t sub_214424590()
{
  return MEMORY[0x24BDF0AA8]();
}

uint64_t _s7SwiftUI26PagingScrollTargetBehaviorV6ChartsE06updateE0_7contextyAA0dE0Vz_AD05ChartdeF7ContextVtF_0()
{
  return MEMORY[0x24BDF0AB0]();
}

uint64_t sub_2144245A8()
{
  return MEMORY[0x24BDF0B60]();
}

uint64_t sub_2144245B4()
{
  return MEMORY[0x24BDF0C08]();
}

uint64_t sub_2144245C0()
{
  return MEMORY[0x24BDF0C10]();
}

uint64_t sub_2144245CC()
{
  return MEMORY[0x24BDF0C60]();
}

uint64_t sub_2144245D8()
{
  return MEMORY[0x24BDF0C68]();
}

uint64_t sub_2144245E4()
{
  return MEMORY[0x24BDF0CB8]();
}

uint64_t sub_2144245F0()
{
  return MEMORY[0x24BDF0CC0]();
}

uint64_t sub_2144245FC()
{
  return MEMORY[0x24BDF0CC8]();
}

uint64_t sub_214424608()
{
  return MEMORY[0x24BDF0CD0]();
}

uint64_t sub_214424614()
{
  return MEMORY[0x24BDF0CD8]();
}

uint64_t sub_214424620()
{
  return MEMORY[0x24BDF0CE0]();
}

uint64_t sub_21442462C()
{
  return MEMORY[0x24BDF0CE8]();
}

uint64_t sub_214424638()
{
  return MEMORY[0x24BDF1088]();
}

uint64_t sub_214424644()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t sub_214424650()
{
  return MEMORY[0x24BDF1450]();
}

uint64_t sub_21442465C()
{
  return MEMORY[0x24BDF1458]();
}

uint64_t sub_214424668()
{
  return MEMORY[0x24BDF1468]();
}

uint64_t sub_214424674()
{
  return MEMORY[0x24BDF1478]();
}

uint64_t sub_214424680()
{
  return MEMORY[0x24BDF14A8]();
}

uint64_t sub_21442468C()
{
  return MEMORY[0x24BDF1820]();
}

uint64_t sub_214424698()
{
  return MEMORY[0x24BDF1A78]();
}

uint64_t sub_2144246A4()
{
  return MEMORY[0x24BDF1A80]();
}

uint64_t sub_2144246B0()
{
  return MEMORY[0x24BDF1A88]();
}

uint64_t sub_2144246BC()
{
  return MEMORY[0x24BDF1A90]();
}

uint64_t sub_2144246C8()
{
  return MEMORY[0x24BDF1A98]();
}

uint64_t sub_2144246D4()
{
  return MEMORY[0x24BDF1AC0]();
}

uint64_t sub_2144246E0()
{
  return MEMORY[0x24BDF1AC8]();
}

uint64_t sub_2144246EC()
{
  return MEMORY[0x24BDF1AE8]();
}

uint64_t sub_2144246F8()
{
  return MEMORY[0x24BDF1AF0]();
}

uint64_t sub_214424704()
{
  return MEMORY[0x24BDF1B08]();
}

uint64_t sub_214424710()
{
  return MEMORY[0x24BDF1B10]();
}

uint64_t sub_21442471C()
{
  return MEMORY[0x24BDF1B30]();
}

uint64_t sub_214424728()
{
  return MEMORY[0x24BDF1B48]();
}

uint64_t sub_214424734()
{
  return MEMORY[0x24BDF1B50]();
}

uint64_t sub_214424740()
{
  return MEMORY[0x24BDF1B60]();
}

uint64_t sub_21442474C()
{
  return MEMORY[0x24BDF1B70]();
}

uint64_t sub_214424758()
{
  return MEMORY[0x24BDF1B78]();
}

uint64_t sub_214424764()
{
  return MEMORY[0x24BDF1B80]();
}

uint64_t sub_214424770()
{
  return MEMORY[0x24BDF1BA0]();
}

uint64_t sub_21442477C()
{
  return MEMORY[0x24BDF1BC0]();
}

uint64_t sub_214424788()
{
  return MEMORY[0x24BDF1BC8]();
}

uint64_t sub_214424794()
{
  return MEMORY[0x24BDF1BD0]();
}

uint64_t sub_2144247A0()
{
  return MEMORY[0x24BDF1BD8]();
}

uint64_t sub_2144247AC()
{
  return MEMORY[0x24BDF1C00]();
}

uint64_t sub_2144247B8()
{
  return MEMORY[0x24BDF1C18]();
}

uint64_t sub_2144247C4()
{
  return MEMORY[0x24BDF1C20]();
}

uint64_t sub_2144247D0()
{
  return MEMORY[0x24BDF1C28]();
}

uint64_t sub_2144247DC()
{
  return MEMORY[0x24BDF1D08]();
}

uint64_t sub_2144247E8()
{
  return MEMORY[0x24BDF1D68]();
}

uint64_t sub_2144247F4()
{
  return MEMORY[0x24BDF1D80]();
}

uint64_t sub_214424800()
{
  return MEMORY[0x24BDF1DC8]();
}

uint64_t sub_21442480C()
{
  return MEMORY[0x24BDF1FC0]();
}

uint64_t sub_214424818()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t sub_214424824()
{
  return MEMORY[0x24BDF2028]();
}

uint64_t sub_214424830()
{
  return MEMORY[0x24BDF2030]();
}

uint64_t sub_21442483C()
{
  return MEMORY[0x24BDF2038]();
}

uint64_t sub_214424848()
{
  return MEMORY[0x24BDF2060]();
}

uint64_t sub_214424854()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t sub_214424860()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t sub_21442486C()
{
  return MEMORY[0x24BDF20A8]();
}

uint64_t sub_214424878()
{
  return MEMORY[0x24BDF2370]();
}

uint64_t sub_214424884()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t sub_214424890()
{
  return MEMORY[0x24BDF2810]();
}

uint64_t sub_21442489C()
{
  return MEMORY[0x24BDF2818]();
}

uint64_t sub_2144248A8()
{
  return MEMORY[0x24BDF29F0]();
}

uint64_t sub_2144248B4()
{
  return MEMORY[0x24BDF2B40]();
}

uint64_t sub_2144248C0()
{
  return MEMORY[0x24BDF2D40]();
}

uint64_t sub_2144248CC()
{
  return MEMORY[0x24BDF2DB8]();
}

uint64_t sub_2144248D8()
{
  return MEMORY[0x24BDF2DF0]();
}

uint64_t sub_2144248E4()
{
  return MEMORY[0x24BDF2F08]();
}

uint64_t sub_2144248F0()
{
  return MEMORY[0x24BDF2FF8]();
}

uint64_t sub_2144248FC()
{
  return MEMORY[0x24BDF3008]();
}

uint64_t sub_214424908()
{
  return MEMORY[0x24BDF3010]();
}

uint64_t sub_214424914()
{
  return MEMORY[0x24BDF3340]();
}

uint64_t sub_214424920()
{
  return MEMORY[0x24BDF3490]();
}

uint64_t sub_21442492C()
{
  return MEMORY[0x24BDF3768]();
}

uint64_t sub_214424938()
{
  return MEMORY[0x24BDF38C0]();
}

uint64_t sub_214424944()
{
  return MEMORY[0x24BDF38E0]();
}

uint64_t sub_214424950()
{
  return MEMORY[0x24BDF3900]();
}

uint64_t sub_21442495C()
{
  return MEMORY[0x24BDF3BE8]();
}

uint64_t sub_214424968()
{
  return MEMORY[0x24BDF3BF8]();
}

uint64_t sub_214424974()
{
  return MEMORY[0x24BDF3C50]();
}

uint64_t sub_214424980()
{
  return MEMORY[0x24BDF3C70]();
}

uint64_t sub_21442498C()
{
  return MEMORY[0x24BDF3C78]();
}

uint64_t sub_214424998()
{
  return MEMORY[0x24BDF3C90]();
}

uint64_t sub_2144249A4()
{
  return MEMORY[0x24BDF3CA8]();
}

uint64_t sub_2144249B0()
{
  return MEMORY[0x24BDF3CE0]();
}

uint64_t sub_2144249BC()
{
  return MEMORY[0x24BDF3CF0]();
}

uint64_t sub_2144249C8()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t sub_2144249D4()
{
  return MEMORY[0x24BDF3D18]();
}

uint64_t sub_2144249E0()
{
  return MEMORY[0x24BDF3D50]();
}

uint64_t sub_2144249EC()
{
  return MEMORY[0x24BDF3D58]();
}

uint64_t sub_2144249F8()
{
  return MEMORY[0x24BDF3D60]();
}

uint64_t sub_214424A04()
{
  return MEMORY[0x24BDF3D88]();
}

uint64_t sub_214424A10()
{
  return MEMORY[0x24BDF41F8]();
}

uint64_t sub_214424A1C()
{
  return MEMORY[0x24BDF4208]();
}

uint64_t sub_214424A28()
{
  return MEMORY[0x24BDF4218]();
}

uint64_t sub_214424A34()
{
  return MEMORY[0x24BDF4230]();
}

uint64_t sub_214424A40()
{
  return MEMORY[0x24BDF4238]();
}

uint64_t sub_214424A4C()
{
  return MEMORY[0x24BDF4248]();
}

uint64_t sub_214424A58()
{
  return MEMORY[0x24BDF4260]();
}

uint64_t sub_214424A64()
{
  return MEMORY[0x24BDF4278]();
}

uint64_t sub_214424A70()
{
  return MEMORY[0x24BDF4280]();
}

uint64_t sub_214424A7C()
{
  return MEMORY[0x24BDF4290]();
}

uint64_t sub_214424A88()
{
  return MEMORY[0x24BDF42A8]();
}

uint64_t sub_214424A94()
{
  return MEMORY[0x24BDF4300]();
}

uint64_t sub_214424AA0()
{
  return MEMORY[0x24BDF4310]();
}

uint64_t sub_214424AAC()
{
  return MEMORY[0x24BDF43C0]();
}

uint64_t sub_214424AB8()
{
  return MEMORY[0x24BDF43C8]();
}

uint64_t sub_214424AC4()
{
  return MEMORY[0x24BDF43E0]();
}

uint64_t sub_214424AD0()
{
  return MEMORY[0x24BDF43E8]();
}

uint64_t sub_214424ADC()
{
  return MEMORY[0x24BDF44E0]();
}

uint64_t sub_214424AE8()
{
  return MEMORY[0x24BDF44E8]();
}

uint64_t sub_214424AF4()
{
  return MEMORY[0x24BDF44F0]();
}

uint64_t sub_214424B00()
{
  return MEMORY[0x24BDF4508]();
}

uint64_t sub_214424B0C()
{
  return MEMORY[0x24BDF4510]();
}

uint64_t sub_214424B18()
{
  return MEMORY[0x24BDF4790]();
}

uint64_t sub_214424B24()
{
  return MEMORY[0x24BDF47B0]();
}

uint64_t sub_214424B30()
{
  return MEMORY[0x24BDF47B8]();
}

uint64_t sub_214424B3C()
{
  return MEMORY[0x24BDF4870]();
}

uint64_t sub_214424B48()
{
  return MEMORY[0x24BDF4940]();
}

uint64_t sub_214424B54()
{
  return MEMORY[0x24BDF4950]();
}

uint64_t sub_214424B60()
{
  return MEMORY[0x24BDF4958]();
}

uint64_t sub_214424B6C()
{
  return MEMORY[0x24BDF4960]();
}

uint64_t sub_214424B78()
{
  return MEMORY[0x24BDF4968]();
}

uint64_t sub_214424B84()
{
  return MEMORY[0x24BDF49A0]();
}

uint64_t sub_214424B90()
{
  return MEMORY[0x24BDF49B8]();
}

uint64_t sub_214424B9C()
{
  return MEMORY[0x24BDF49C8]();
}

uint64_t sub_214424BA8()
{
  return MEMORY[0x24BDF4B98]();
}

uint64_t sub_214424BB4()
{
  return MEMORY[0x24BDF4BD0]();
}

uint64_t sub_214424BC0()
{
  return MEMORY[0x24BDF4CC0]();
}

uint64_t sub_214424BCC()
{
  return MEMORY[0x24BDF4CC8]();
}

uint64_t sub_214424BD8()
{
  return MEMORY[0x24BDF4CD0]();
}

uint64_t sub_214424BE4()
{
  return MEMORY[0x24BDF4D08]();
}

uint64_t sub_214424BF0()
{
  return MEMORY[0x24BDF4EC0]();
}

uint64_t sub_214424BFC()
{
  return MEMORY[0x24BDF4EC8]();
}

uint64_t sub_214424C08()
{
  return MEMORY[0x24BDF4ED0]();
}

uint64_t sub_214424C14()
{
  return MEMORY[0x24BDF4ED8]();
}

uint64_t sub_214424C20()
{
  return MEMORY[0x24BDF4EE8]();
}

uint64_t sub_214424C2C()
{
  return MEMORY[0x24BDF4EF0]();
}

uint64_t sub_214424C38()
{
  return MEMORY[0x24BDF4F00]();
}

uint64_t sub_214424C44()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t sub_214424C50()
{
  return MEMORY[0x24BDF4F20]();
}

uint64_t sub_214424C5C()
{
  return MEMORY[0x24BDF4F38]();
}

uint64_t sub_214424C68()
{
  return MEMORY[0x24BDF5118]();
}

uint64_t sub_214424C74()
{
  return MEMORY[0x24BDF51A0]();
}

uint64_t sub_214424C80()
{
  return MEMORY[0x24BDF51A8]();
}

uint64_t sub_214424C8C()
{
  return MEMORY[0x24BDF5448]();
}

uint64_t sub_214424C98()
{
  return MEMORY[0x24BDF5450]();
}

uint64_t sub_214424CA4()
{
  return MEMORY[0x24BDF5458]();
}

uint64_t sub_214424CB0()
{
  return MEMORY[0x24BDF5460]();
}

uint64_t sub_214424CBC()
{
  return MEMORY[0x24BDF5468]();
}

uint64_t sub_214424CC8()
{
  return MEMORY[0x24BDF5478]();
}

uint64_t sub_214424CD4()
{
  return MEMORY[0x24BDF5490]();
}

uint64_t sub_214424CE0()
{
  return MEMORY[0x24BDF54A0]();
}

uint64_t sub_214424CEC()
{
  return MEMORY[0x24BDF54A8]();
}

uint64_t sub_214424CF8()
{
  return MEMORY[0x24BDF54B0]();
}

uint64_t sub_214424D04()
{
  return MEMORY[0x24BDCF7F0]();
}

uint64_t sub_214424D10()
{
  return MEMORY[0x24BEE0228]();
}

uint64_t sub_214424D1C()
{
  return MEMORY[0x24BEE0240]();
}

uint64_t sub_214424D28()
{
  return MEMORY[0x24BEE0250]();
}

uint64_t sub_214424D34()
{
  return MEMORY[0x24BEE0260]();
}

uint64_t sub_214424D40()
{
  return MEMORY[0x24BEE0278]();
}

uint64_t sub_214424D4C()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_214424D58()
{
  return MEMORY[0x24BEE0300]();
}

uint64_t sub_214424D64()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_214424D70()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_214424D7C()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_214424D88()
{
  return MEMORY[0x24BEE0548]();
}

uint64_t sub_214424D94()
{
  return MEMORY[0x24BEE05A8]();
}

uint64_t sub_214424DA0()
{
  return MEMORY[0x24BEE05C0]();
}

uint64_t sub_214424DAC()
{
  return MEMORY[0x24BEE05E8]();
}

uint64_t sub_214424DB8()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_214424DC4()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_214424DD0()
{
  return MEMORY[0x24BEE0620]();
}

uint64_t sub_214424DDC()
{
  return MEMORY[0x24BEE0638]();
}

uint64_t sub_214424DE8()
{
  return MEMORY[0x24BEE0640]();
}

uint64_t sub_214424DF4()
{
  return MEMORY[0x24BEE0648]();
}

uint64_t sub_214424E00()
{
  return MEMORY[0x24BEE0650]();
}

uint64_t sub_214424E0C()
{
  return MEMORY[0x24BEE0740]();
}

uint64_t sub_214424E18()
{
  return MEMORY[0x24BEE0780]();
}

uint64_t sub_214424E24()
{
  return MEMORY[0x24BEE0788]();
}

uint64_t sub_214424E30()
{
  return MEMORY[0x24BEE0790]();
}

uint64_t sub_214424E3C()
{
  return MEMORY[0x24BEE07A0]();
}

uint64_t sub_214424E48()
{
  return MEMORY[0x24BEE07B8]();
}

uint64_t sub_214424E54()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_214424E60()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t sub_214424E6C()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_214424E78()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_214424E84()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_214424E90()
{
  return MEMORY[0x24BEE07F8]();
}

uint64_t sub_214424E9C()
{
  return MEMORY[0x24BEE0800]();
}

uint64_t sub_214424EA8()
{
  return MEMORY[0x24BEE0808]();
}

uint64_t sub_214424EB4()
{
  return MEMORY[0x24BEE08B0]();
}

uint64_t sub_214424EC0()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t sub_214424ECC()
{
  return MEMORY[0x24BEE0930]();
}

uint64_t sub_214424ED8()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_214424EE4()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_214424EF0()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_214424EFC()
{
  return MEMORY[0x24BDCFA68]();
}

uint64_t sub_214424F08()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_214424F14()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_214424F20()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_214424F2C()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_214424F38()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_214424F44()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_214424F50()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t sub_214424F5C()
{
  return MEMORY[0x24BEE0E48]();
}

uint64_t sub_214424F68()
{
  return MEMORY[0x24BEE0E50]();
}

uint64_t sub_214424F74()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t sub_214424F80()
{
  return MEMORY[0x24BEE0E90]();
}

uint64_t sub_214424F8C()
{
  return MEMORY[0x24BEE0EB0]();
}

uint64_t sub_214424F98()
{
  return MEMORY[0x24BEE0F18]();
}

uint64_t sub_214424FA4()
{
  return MEMORY[0x24BEE0F30]();
}

uint64_t sub_214424FB0()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_214424FBC()
{
  return MEMORY[0x24BEE0FE8]();
}

uint64_t sub_214424FC8()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_214424FD4()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_214424FE0()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_214424FEC()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_214424FF8()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_214425004()
{
  return MEMORY[0x24BEE1138]();
}

uint64_t sub_214425010()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t sub_21442501C()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_214425028()
{
  return MEMORY[0x24BEE1168]();
}

uint64_t sub_214425034()
{
  return MEMORY[0x24BEE1170]();
}

uint64_t sub_214425040()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_21442504C()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_214425058()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t sub_214425064()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_214425070()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_21442507C()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_214425088()
{
  return MEMORY[0x24BEE1220]();
}

uint64_t sub_214425094()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_2144250A0()
{
  return MEMORY[0x24BEE1278]();
}

uint64_t sub_2144250AC()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_2144250B8()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_2144250C4()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_2144250D0()
{
  return MEMORY[0x24BEE1380]();
}

uint64_t sub_2144250DC()
{
  return MEMORY[0x24BEE1390]();
}

uint64_t sub_2144250E8()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t sub_2144250F4()
{
  return MEMORY[0x24BEE13B0]();
}

uint64_t sub_214425100()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t sub_21442510C()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_214425118()
{
  return MEMORY[0x24BEE1658]();
}

uint64_t sub_214425124()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t sub_214425130()
{
  return MEMORY[0x24BEE16C8]();
}

uint64_t sub_21442513C()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t sub_214425148()
{
  return MEMORY[0x24BEE16F8]();
}

uint64_t sub_214425154()
{
  return MEMORY[0x24BEE1758]();
}

uint64_t sub_214425160()
{
  return MEMORY[0x24BEE17F8]();
}

uint64_t sub_21442516C()
{
  return MEMORY[0x24BEE1870]();
}

uint64_t sub_214425178()
{
  return MEMORY[0x24BEE1888]();
}

uint64_t sub_214425184()
{
  return MEMORY[0x24BEE1890]();
}

uint64_t sub_214425190()
{
  return MEMORY[0x24BEE1898]();
}

uint64_t sub_21442519C()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_2144251A8()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_2144251B4()
{
  return MEMORY[0x24BEE18D8]();
}

uint64_t sub_2144251C0()
{
  return MEMORY[0x24BEE18E0]();
}

uint64_t sub_2144251CC()
{
  return MEMORY[0x24BEE18E8]();
}

uint64_t sub_2144251D8()
{
  return MEMORY[0x24BEE18F8]();
}

uint64_t sub_2144251E4()
{
  return MEMORY[0x24BEE1900]();
}

uint64_t sub_2144251F0()
{
  return MEMORY[0x24BEE1908]();
}

uint64_t sub_2144251FC()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t sub_214425208()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_214425214()
{
  return MEMORY[0x24BEE1938]();
}

uint64_t sub_214425220()
{
  return MEMORY[0x24BEE1950]();
}

uint64_t sub_21442522C()
{
  return MEMORY[0x24BEE1978]();
}

uint64_t sub_214425238()
{
  return MEMORY[0x24BEE1980]();
}

uint64_t sub_214425244()
{
  return MEMORY[0x24BEE1988]();
}

uint64_t sub_214425250()
{
  return MEMORY[0x24BEE1990]();
}

uint64_t sub_21442525C()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_214425268()
{
  return MEMORY[0x24BEE19C0]();
}

uint64_t sub_214425274()
{
  return MEMORY[0x24BEE19E8]();
}

uint64_t sub_214425280()
{
  return MEMORY[0x24BEE19F8]();
}

uint64_t sub_21442528C()
{
  return MEMORY[0x24BEE1A18]();
}

uint64_t sub_214425298()
{
  return MEMORY[0x24BEE1A20]();
}

uint64_t sub_2144252A4()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_2144252B0()
{
  return MEMORY[0x24BEE1B60]();
}

uint64_t sub_2144252BC()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t sub_2144252C8()
{
  return MEMORY[0x24BDB3D10]();
}

uint64_t sub_2144252D4()
{
  return MEMORY[0x24BDB3D18]();
}

uint64_t sub_2144252E0()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_2144252EC()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_2144252F8()
{
  return MEMORY[0x24BDBD7B8]();
}

uint64_t sub_214425304()
{
  return MEMORY[0x24BDBD7C8]();
}

uint64_t sub_214425310()
{
  return MEMORY[0x24BDBD7D0]();
}

uint64_t sub_21442531C()
{
  return MEMORY[0x24BDBD7E8]();
}

uint64_t sub_214425328()
{
  return MEMORY[0x24BDBD7F8]();
}

uint64_t sub_214425334()
{
  return MEMORY[0x24BDB3D20]();
}

uint64_t sub_214425340()
{
  return MEMORY[0x24BDB3D28]();
}

uint64_t sub_21442534C()
{
  return MEMORY[0x24BDB3D30]();
}

uint64_t sub_214425358()
{
  return MEMORY[0x24BDB3D48]();
}

uint64_t sub_214425364()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_214425370()
{
  return MEMORY[0x24BDD0390]();
}

uint64_t sub_21442537C()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t sub_214425388()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_214425394()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_2144253A0()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t sub_2144253AC()
{
  return MEMORY[0x24BEE1FE0]();
}

uint64_t sub_2144253B8()
{
  return MEMORY[0x24BEE1FF0]();
}

uint64_t sub_2144253C4()
{
  return MEMORY[0x24BEE2000]();
}

uint64_t sub_2144253D0()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t sub_2144253DC()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t sub_2144253E8()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t sub_2144253F4()
{
  return MEMORY[0x24BEE2098]();
}

uint64_t sub_214425400()
{
  return MEMORY[0x24BEE20A0]();
}

uint64_t sub_21442540C()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_214425418()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_214425424()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_214425430()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t sub_21442543C()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t sub_214425448()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t sub_214425454()
{
  return MEMORY[0x24BEE2398]();
}

uint64_t sub_214425460()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_21442546C()
{
  return MEMORY[0x24BEE23B8]();
}

uint64_t sub_214425478()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_214425484()
{
  return MEMORY[0x24BEE2468]();
}

uint64_t sub_214425490()
{
  return MEMORY[0x24BEE2488]();
}

uint64_t sub_21442549C()
{
  return MEMORY[0x24BEE2490]();
}

uint64_t sub_2144254A8()
{
  return MEMORY[0x24BEE2498]();
}

uint64_t sub_2144254B4()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_2144254C0()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_2144254CC()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_2144254D8()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_2144254E4()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_2144254F0()
{
  return MEMORY[0x24BEE2568]();
}

uint64_t sub_2144254FC()
{
  return MEMORY[0x24BEE2588]();
}

uint64_t sub_214425508()
{
  return MEMORY[0x24BEE2610]();
}

uint64_t sub_214425514()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t sub_214425520()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_21442552C()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_214425538()
{
  return MEMORY[0x24BEE2770]();
}

uint64_t sub_214425544()
{
  return MEMORY[0x24BEE27E0]();
}

uint64_t sub_214425550()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_21442555C()
{
  return MEMORY[0x24BEE28B8]();
}

uint64_t sub_214425568()
{
  return MEMORY[0x24BEE28C0]();
}

uint64_t sub_214425574()
{
  return MEMORY[0x24BEE28D0]();
}

uint64_t sub_214425580()
{
  return MEMORY[0x24BEE28E0]();
}

uint64_t sub_21442558C()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_214425598()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_2144255A4()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_2144255B0()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_2144255BC()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_2144255C8()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_2144255D4()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_2144255E0()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_2144255EC()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_2144255F8()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_214425604()
{
  return MEMORY[0x24BEE2C00]();
}

uint64_t sub_214425610()
{
  return MEMORY[0x24BEE2C38]();
}

uint64_t sub_21442561C()
{
  return MEMORY[0x24BEE2DE0]();
}

uint64_t sub_214425628()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_214425634()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t sub_214425640()
{
  return MEMORY[0x24BEE2F68]();
}

uint64_t sub_21442564C()
{
  return MEMORY[0x24BEE2F70]();
}

uint64_t sub_214425658()
{
  return MEMORY[0x24BEE2F78]();
}

uint64_t sub_214425664()
{
  return MEMORY[0x24BEE2F88]();
}

uint64_t sub_214425670()
{
  return MEMORY[0x24BEE2F90]();
}

uint64_t sub_21442567C()
{
  return MEMORY[0x24BEE2F98]();
}

uint64_t sub_214425688()
{
  return MEMORY[0x24BEE2FA0]();
}

uint64_t sub_214425694()
{
  return MEMORY[0x24BEE2FB0]();
}

uint64_t sub_2144256A0()
{
  return MEMORY[0x24BEE2FD8]();
}

uint64_t sub_2144256AC()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_2144256B8()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_2144256C4()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_2144256D0()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_2144256DC()
{
  return MEMORY[0x24BEE3158]();
}

uint64_t sub_2144256E8()
{
  return MEMORY[0x24BEE3178]();
}

uint64_t sub_2144256F4()
{
  return MEMORY[0x24BEE3288]();
}

uint64_t sub_214425700()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_21442570C()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_214425718()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_214425724()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_214425730()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_21442573C()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_214425748()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_214425754()
{
  return MEMORY[0x24BEE38A0]();
}

uint64_t sub_214425760()
{
  return MEMORY[0x24BEE38F0]();
}

uint64_t sub_21442576C()
{
  return MEMORY[0x24BEE39B0]();
}

uint64_t sub_214425778()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t sub_214425784()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_214425790()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_21442579C()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t sub_2144257A8()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_2144257B4()
{
  return MEMORY[0x24BEE3D38]();
}

uint64_t sub_2144257C0()
{
  return MEMORY[0x24BEE3D90]();
}

uint64_t sub_2144257CC()
{
  return MEMORY[0x24BEE3DC0]();
}

uint64_t sub_2144257D8()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t sub_2144257E4()
{
  return MEMORY[0x24BEE3DF8]();
}

uint64_t sub_2144257F0()
{
  return MEMORY[0x24BEE3E08]();
}

uint64_t sub_2144257FC()
{
  return MEMORY[0x24BEE3E18]();
}

uint64_t sub_214425808()
{
  return MEMORY[0x24BEE3EC8]();
}

uint64_t sub_214425814()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_214425820()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_21442582C()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_214425838()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_214425844()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_214425850()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_21442585C()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_214425868()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_214425874()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_214425880()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_21442588C()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_214425898()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_2144258A4()
{
  return MEMORY[0x24BEE4320]();
}

uint64_t sub_2144258B0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_2144258BC()
{
  return MEMORY[0x24BEE4330]();
}

uint64_t sub_2144258C8()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_2144258D4()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_2144258E0()
{
  return MEMORY[0x24BEE4698]();
}

uint64_t sub_2144258EC()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_2144258F8()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_214425904()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t AGCompareValues()
{
  return MEMORY[0x24BE096C8]();
}

uint64_t AGCreateWeakAttribute()
{
  return MEMORY[0x24BE096D0]();
}

uint64_t AGGraphClearUpdate()
{
  return MEMORY[0x24BE09728]();
}

uint64_t AGGraphCreateOffsetAttribute2()
{
  return MEMORY[0x24BE09740]();
}

uint64_t AGGraphGetCurrentAttribute()
{
  return MEMORY[0x24BE09788]();
}

uint64_t AGGraphGetValue()
{
  return MEMORY[0x24BE097A8]();
}

uint64_t AGGraphGetWeakValue()
{
  return MEMORY[0x24BE097B8]();
}

uint64_t AGGraphMutateAttribute()
{
  return MEMORY[0x24BE097E0]();
}

uint64_t AGGraphSetOutputValue()
{
  return MEMORY[0x24BE09830]();
}

uint64_t AGGraphSetUpdate()
{
  return MEMORY[0x24BE09840]();
}

uint64_t AGGraphSetValue()
{
  return MEMORY[0x24BE09850]();
}

uint64_t AGSubgraphAddChild()
{
  return MEMORY[0x24BE098A0]();
}

uint64_t AGSubgraphCreate()
{
  return MEMORY[0x24BE098D0]();
}

uint64_t AGSubgraphGetCurrent()
{
  return MEMORY[0x24BE098F8]();
}

uint64_t AGSubgraphGetGraph()
{
  return MEMORY[0x24BE09900]();
}

uint64_t AGSubgraphIsValid()
{
  return MEMORY[0x24BE09930]();
}

uint64_t AGSubgraphRemoveChild()
{
  return MEMORY[0x24BE09938]();
}

uint64_t AGSubgraphSetCurrent()
{
  return MEMORY[0x24BE09948]();
}

uint64_t AGTupleElementOffset()
{
  return MEMORY[0x24BE099C0]();
}

uint64_t AGTypeGetKind()
{
  return MEMORY[0x24BE099F0]();
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDAB0](red, green, blue, alpha);
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
  MEMORY[0x24BDBEE10](path, block);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x24BDBEE20](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x24BDBEE80]();
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x24BDBEEE0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x24BDBEF10](path);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFE0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF000]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF008]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF010]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF018]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF020]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x24BDBF030]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBF040]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBF048]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x24BDBF050]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x24BDBF078]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBF088]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

double _simd_orient_pd2(simd_double2 a1, simd_double2 a2, simd_double2 a3)
{
  double result;

  MEMORY[0x24BDACDE0]((__n128)a1, (__n128)a2, (__n128)a3);
  return result;
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x24BDAD188](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

long double cbrt(long double __x)
{
  long double result;

  MEMORY[0x24BDAD330](__x);
  return result;
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAB0](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x24BDAF860](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x24BDAF888](a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x24BEE4C48]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x24BEE4D58]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x24BEE4DC8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x24BEE4E88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x24BEE4ED8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x24BEE4F28]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x24BEE4FB8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x24BEE4FC0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x24BEE4FE0]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x24BEE4FE8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x24BEE4FF0]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x24BEE4FF8]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x24BEE5000]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x24BDB0138](__x);
  return result;
}

void vDSP_sve_svesq(const float *__A, vDSP_Stride __IA, float *__Sum, float *__SumOfSquares, vDSP_Length __N)
{
  MEMORY[0x24BDB32E0](__A, __IA, __Sum, __SumOfSquares, __N);
}

void vDSP_sve_svesqD(const double *__A, vDSP_Stride __IA, double *__Sum, double *__SumOfSquares, vDSP_Length __N)
{
  MEMORY[0x24BDB32E8](__A, __IA, __Sum, __SumOfSquares, __N);
}

