uint64_t vt_Copy_xf22_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v13 + v14;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v23 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v26 = v8 & 1;
  if (v10 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v19 >> 1;
  v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v38 = v12[1];
      v31 = v12 + 2;
      *v18 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
      v32 = v18 + 2;
      if (v29)
      {
LABEL_20:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          v31 += 2;
          *v32 = (4198405 * (unint64_t)(255 * (v34 >> 6))) >> 32;
          v32[1] = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_26;
      }
    }
    else
    {
      v31 = v12;
      v32 = v18;
      if (v29)
        goto LABEL_20;
    }
    v37 = 0;
LABEL_26:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v39 = *v31;
      v40 = v31[1];
      *v32 = (4198405 * (unint64_t)(255 * (v39 >> 6))) >> 32;
      v32[1] = (4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v10 - v27;
    do
    {
      v43 = v12;
      v44 = v18;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1];
        v43 = v12 + 2;
        *v18 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
        v18[1] = (4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32;
        v44 = v18 + 2;
      }
      if (v29)
      {
        v46 = -(uint64_t)v29;
        do
        {
          v47 = (4198405 * (unint64_t)(255 * (*v43 >> 6))) >> 32;
          v48 = (4198405 * (unint64_t)(255 * (v43[1] >> 6))) >> 32;
          *v44 = v47;
          v44[1] = v48;
          v43 += 2;
          v44[2] = v47;
          v44[3] = v48;
          v44 += 4;
          v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v49 = *v43;
        v50 = (4198405 * (unint64_t)(255 * (v43[1] >> 6))) >> 32;
        *v44 = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
        v44[1] = v50;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v10)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *v12;
      v52 = v12[1];
      v12 += 2;
      *v18 = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32;
      v18 += 2;
    }
    if (v29)
    {
      v53 = -(uint64_t)v29;
      do
      {
        v54 = *v12;
        v55 = v12[1];
        v12 += 2;
        *v18 = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
        v18[1] = (4198405 * (unint64_t)(255 * (v55 >> 6))) >> 32;
        v18 += 2;
        v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      v56 = 2 * v29;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      v57 = *v12;
      v58 = v12[1];
      *v18 = (4198405 * (unint64_t)(255 * (v57 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v58 >> 6))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = *a4;
    v26 = a7[2] + v24 * v18 + v16;
    v27 = *a7 + *a8 * v18 + v16;
    v28 = *a3 + v25 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v23;
      v26 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v11 & 1;
  if (v8 >= v30)
    v31 = v11 & 1;
  else
    v31 = 0;
  v32 = v21 >> 1;
  v33 = v21 - v10;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v14[1] >> 6;
      v35 = v14 + 2;
      *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_26:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_26;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = (4198405 * (unint64_t)(224 * (v35[1] >> 6))) >> 32;
      *v36 = ((4198405 * (unint64_t)(224 * (*v35 >> 6))) >> 32) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v31)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v31;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v9 & 1) != 0)
      {
        v45 = v14[1] >> 6;
        v43 = v14 + 2;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v45)) >> 32) + 16;
        v44 = v20 + 2;
      }
      if (v34)
      {
        v46 = -(uint64_t)v34;
        do
        {
          v47 = (4198405 * (unint64_t)(224 * (v43[1] >> 6))) >> 32;
          *v44 = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
          v44[1] = v47 + 16;
          v44 += 2;
          v43 += 2;
          v40 = __CFADD__(v46++, 1);
        }
        while (!v40);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v14 += 2;
      *v20 = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
      v20 += 2;
    }
    if (v34)
    {
      v50 = -(uint64_t)v34;
      do
      {
        v51 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v51 + 16;
        v20 += 2;
        v14 += 2;
        v40 = __CFADD__(v50++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v25 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v28 = v11 & 1;
  if (v8 >= v28)
    v29 = v11 & 1;
  else
    v29 = 0;
  v30 = v21 >> 1;
  v31 = v21 - v10;
  if (v30 >= v31 >> 1)
    v32 = v31 >> 1;
  else
    v32 = v30;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v35 = v14[1] >> 6;
      v33 = v14 + 2;
      *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v35)) >> 32) + 16;
      v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v33 = v14;
      v34 = v20;
      if (!v32)
        goto LABEL_26;
    }
    v36 = -(uint64_t)v32;
    do
    {
      v37 = (4198405 * (unint64_t)(224 * (v33[1] >> 6))) >> 32;
      *v34 = ((4198405 * (unint64_t)(224 * (*v33 >> 6))) >> 32) + 16;
      v34[1] = v37 + 16;
      v34 += 2;
      v33 += 2;
      v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v29;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v9 & 1) != 0)
      {
        v43 = v14[1] >> 6;
        v41 = v14 + 2;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
        v42 = v20 + 2;
      }
      if (v32)
      {
        v44 = -(uint64_t)v32;
        do
        {
          v45 = (4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32;
          *v42 = ((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32) + 16;
          v42[1] = v45 + 16;
          v42 += 2;
          v41 += 2;
          v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *v14 >> 6;
      v47 = v14[1] >> 6;
      v14 += 2;
      *v20 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
      v20 += 2;
    }
    if (v32)
    {
      v48 = -(uint64_t)v32;
      do
      {
        v49 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v49 + 16;
        v20 += 2;
        v14 += 2;
        v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v25 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v28 = v11 & 1;
  if (v8 >= v28)
    v29 = v11 & 1;
  else
    v29 = 0;
  v30 = v21 >> 1;
  v31 = v21 - v10;
  if (v30 >= v31 >> 1)
    v32 = v31 >> 1;
  else
    v32 = v30;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v35 = v14[1];
      v33 = v14 + 2;
      *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
      v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v33 = v14;
      v34 = v20;
      if (!v32)
        goto LABEL_26;
    }
    v36 = -(uint64_t)v32;
    do
    {
      v37 = v33[1];
      *v34 = (4198405 * (unint64_t)(255 * (*v33 >> 6))) >> 32;
      v34[1] = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
      v34 += 2;
      v33 += 2;
      v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v29;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v9 & 1) != 0)
      {
        v43 = v14[1];
        v41 = v14 + 2;
        *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
        v42 = v20 + 2;
      }
      if (v32)
      {
        v44 = -(uint64_t)v32;
        do
        {
          v45 = v41[1];
          *v42 = (4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32;
          v42[1] = (4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32;
          v42 += 2;
          v41 += 2;
          v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *v14;
      v47 = v14[1];
      v14 += 2;
      *v20 = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
      v20 += 2;
    }
    if (v32)
    {
      v48 = -(uint64_t)v32;
      do
      {
        v49 = v14[1];
        *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
        v20 += 2;
        v14 += 2;
        v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 2;
      v42 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 33) >> 1;
      *v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 33) >> 1;
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *v40 >> 6;
      v45 = v40[1] >> 6;
      v46 = *(unsigned __int16 *)((char *)v40 + v15) >> 6;
      v47 = *(unsigned __int16 *)((char *)v40 + v15 + 2) >> 6;
      v40 += 2;
      *v41 = (((4198405 * (unint64_t)(224 * v44)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v46)) >> 32)
                          + 33) >> 1;
      v41[1] = (((4198405 * (unint64_t)(224 * v45)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v47)) >> 32)
                            + 33) >> 1;
      v41 += 2;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v48 = 0;
    v49 = v24 - v36;
    do
    {
      v50 = v16;
      v51 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 33) >> 1;
        *v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 33) >> 1;
        v22[1] = v52;
        v51 = v22 + 2;
      }
      if (v39)
      {
        v53 = -(uint64_t)v39;
        do
        {
          v54 = *v50 >> 6;
          v55 = v50[1] >> 6;
          v56 = *(unsigned __int16 *)((char *)v50 + v15) >> 6;
          v57 = *(unsigned __int16 *)((char *)v50 + v15 + 2) >> 6;
          v50 += 2;
          *v51 = (((4198405 * (unint64_t)(224 * v54)) >> 32)
                              + ((4198405 * (unint64_t)(224 * v56)) >> 32)
                              + 33) >> 1;
          v51[1] = (((4198405 * (unint64_t)(224 * v55)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v57)) >> 32)
                                + 33) >> 1;
          v51 += 2;
          v27 = __CFADD__(v53++, 1);
        }
        while (!v27);
      }
      v16 += v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 6;
      v40 = v16 + 2;
      *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (4198405 * (unint64_t)(224 * (v40[1] >> 6))) >> 32;
      *v41 = ((4198405 * (unint64_t)(224 * (*v40 >> 6))) >> 32) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v45 = 0;
    v46 = v24 - v36;
    v47 = 2 * v15;
    do
    {
      v48 = v16;
      v49 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = v16[1] >> 6;
        v48 = v16 + 2;
        *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = (4198405 * (unint64_t)(224 * (v48[1] >> 6))) >> 32;
          *v49 = ((4198405 * (unint64_t)(224 * (*v48 >> 6))) >> 32) + 16;
          v49[1] = v52 + 16;
          v49 += 2;
          v48 += 2;
          v27 = __CFADD__(v51++, 1);
        }
        while (!v27);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v47);
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v16 + 2;
      v38 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 33) >> 1;
      *v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 33) >> 1;
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *v36 >> 6;
      v41 = v36[1] >> 6;
      v42 = *(unsigned __int16 *)((char *)v36 + v15) >> 6;
      v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2) >> 6;
      v36 += 2;
      *v37 = (((4198405 * (unint64_t)(224 * v40)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v42)) >> 32)
                          + 33) >> 1;
      v37[1] = (((4198405 * (unint64_t)(224 * v41)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v43)) >> 32)
                            + 33) >> 1;
      v37 += 2;
      v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v45 = 0;
    v46 = v24 - v32;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 33) >> 1;
        *v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 33) >> 1;
        v22[1] = v49;
        v48 = v22 + 2;
      }
      if (v35)
      {
        v50 = -(uint64_t)v35;
        do
        {
          v51 = *v47 >> 6;
          v52 = v47[1] >> 6;
          v53 = *(unsigned __int16 *)((char *)v47 + v15) >> 6;
          v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2) >> 6;
          v47 += 2;
          *v48 = (((4198405 * (unint64_t)(224 * v51)) >> 32)
                              + ((4198405 * (unint64_t)(224 * v53)) >> 32)
                              + 33) >> 1;
          v48[1] = (((4198405 * (unint64_t)(224 * v52)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v54)) >> 32)
                                + 33) >> 1;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16[1] >> 6;
      v36 = v16 + 2;
      *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = (4198405 * (unint64_t)(224 * (v36[1] >> 6))) >> 32;
      *v37 = ((4198405 * (unint64_t)(224 * (*v36 >> 6))) >> 32) + 16;
      v37[1] = v40 + 16;
      v37 += 2;
      v36 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    v44 = 2 * v15;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16[1] >> 6;
        v45 = v16 + 2;
        *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
        v46 = v22 + 2;
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = (4198405 * (unint64_t)(224 * (v45[1] >> 6))) >> 32;
          *v46 = ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32) + 16;
          v46[1] = v49 + 16;
          v46 += 2;
          v45 += 2;
          v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v16 + 2;
      v38 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 1) >> 1;
      *v22 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 1) >> 1;
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *v36;
      v41 = v36[1];
      v42 = *(unsigned __int16 *)((char *)v36 + v15);
      v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2);
      v36 += 2;
      *v37 = (((4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v42 >> 6))) >> 32)
                          + 1) >> 1;
      v37[1] = (((4198405 * (unint64_t)(255 * (v41 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32)
                            + 1) >> 1;
      v37 += 2;
      v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v45 = 0;
    v46 = v24 - v32;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 1) >> 1;
        *v22 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 1) >> 1;
        v22[1] = v49;
        v48 = v22 + 2;
      }
      if (v35)
      {
        v50 = -(uint64_t)v35;
        do
        {
          v51 = *v47;
          v52 = v47[1];
          v53 = *(unsigned __int16 *)((char *)v47 + v15);
          v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2);
          v47 += 2;
          *v48 = (((4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (v53 >> 6))) >> 32)
                              + 1) >> 1;
          v48[1] = (((4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32)
                                + 1) >> 1;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16[1];
      v36 = v16 + 2;
      *v22 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
      v22[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = v36[1];
      *v37 = (4198405 * (unint64_t)(255 * (*v36 >> 6))) >> 32;
      v37[1] = (4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32;
      v37 += 2;
      v36 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    v44 = 2 * v15;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16[1];
        v45 = v16 + 2;
        *v22 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
        v22[1] = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
        v46 = v22 + 2;
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = v45[1];
          *v46 = (4198405 * (unint64_t)(255 * (*v45 >> 6))) >> 32;
          v46[1] = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
          v46 += 2;
          v45 += 2;
          v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v16 + 2;
      v42 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 33) >> 1;
      *v23 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 33) >> 1;
      v40 = v23 + 1;
      *v24 = v42;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = *v39 >> 6;
      v45 = v39[1] >> 6;
      v46 = *(unsigned __int16 *)((char *)v39 + v15) >> 6;
      v47 = *(unsigned __int16 *)((char *)v39 + v15 + 2) >> 6;
      v39 += 2;
      *v40++ = (((4198405 * (unint64_t)(224 * v44)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v46)) >> 32)
                            + 33) >> 1;
      *v41++ = (((4198405 * (unint64_t)(224 * v45)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v47)) >> 32)
                            + 33) >> 1;
      v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v49 = 0;
    v50 = v26 - v35;
    do
    {
      v51 = v16;
      v52 = v23;
      v53 = v24;
      if ((v8 & 1) != 0)
      {
        v51 = v16 + 2;
        v54 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 33) >> 1;
        *v23 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 33) >> 1;
        v52 = v23 + 1;
        *v24 = v54;
        v53 = v24 + 1;
      }
      if (v38)
      {
        v55 = -(uint64_t)v38;
        do
        {
          v56 = *v51 >> 6;
          v57 = v51[1] >> 6;
          v58 = *(unsigned __int16 *)((char *)v51 + v15) >> 6;
          v59 = *(unsigned __int16 *)((char *)v51 + v15 + 2) >> 6;
          v51 += 2;
          *v52++ = (((4198405 * (unint64_t)(224 * v56)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v58)) >> 32)
                                + 33) >> 1;
          *v53++ = (((4198405 * (unint64_t)(224 * v57)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v59)) >> 32)
                                + 33) >> 1;
          v48 = __CFADD__(v55++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = v16[1] >> 6;
      v39 = v16 + 2;
      *v23 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v40 = v23 + 1;
      *v24 = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = 940442720 * (v39[1] >> 6);
      *v40++ = ((4198405 * (unint64_t)(224 * (*v39 >> 6))) >> 32) + 16;
      *v41++ = BYTE4(v44) + 16;
      v39 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v46 = 0;
    v47 = v26 - v35;
    v48 = 2 * v15;
    do
    {
      v49 = v16;
      v50 = v23;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v49 = v16 + 2;
        v52 = (4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32;
        *v23 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v50 = v23 + 1;
        *v24 = v52 + 16;
        v51 = v24 + 1;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = 940442720 * (v49[1] >> 6);
          *v50++ = ((4198405 * (unint64_t)(224 * (*v49 >> 6))) >> 32) + 16;
          *v51++ = BYTE4(v54) + 16;
          v49 += 2;
          v45 = __CFADD__(v53++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v48);
      v23 += v21;
      v24 += v22;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v16 + 2;
      v42 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 1) >> 1;
      *v23 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 1) >> 1;
      v40 = v23 + 1;
      *v24 = v42;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = *v39;
      v45 = v39[1];
      v46 = *(unsigned __int16 *)((char *)v39 + v15);
      v47 = *(unsigned __int16 *)((char *)v39 + v15 + 2);
      v39 += 2;
      *v40++ = (((4198405 * (unint64_t)(255 * (v44 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32)
                            + 1) >> 1;
      *v41++ = (((4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32)
                            + 1) >> 1;
      v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v49 = 0;
    v50 = v26 - v35;
    do
    {
      v51 = v16;
      v52 = v23;
      v53 = v24;
      if ((v8 & 1) != 0)
      {
        v51 = v16 + 2;
        v54 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 1) >> 1;
        *v23 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 1) >> 1;
        v52 = v23 + 1;
        *v24 = v54;
        v53 = v24 + 1;
      }
      if (v38)
      {
        v55 = -(uint64_t)v38;
        do
        {
          v56 = *v51;
          v57 = v51[1];
          v58 = *(unsigned __int16 *)((char *)v51 + v15);
          v59 = *(unsigned __int16 *)((char *)v51 + v15 + 2);
          v51 += 2;
          *v52++ = (((4198405 * (unint64_t)(255 * (v56 >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (v58 >> 6))) >> 32)
                                + 1) >> 1;
          *v53++ = (((4198405 * (unint64_t)(255 * (v57 >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (v59 >> 6))) >> 32)
                                + 1) >> 1;
          v48 = __CFADD__(v55++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = v16[1];
      v39 = v16 + 2;
      *v23 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
      v40 = v23 + 1;
      *v24 = (4198405 * (unint64_t)(255 * (v42 >> 6))) >> 32;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = v39[1];
      *v40++ = (4198405 * (unint64_t)(255 * (*v39 >> 6))) >> 32;
      *v41++ = (4198405 * (unint64_t)(255 * (v44 >> 6))) >> 32;
      v39 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v46 = 0;
    v47 = v26 - v35;
    v48 = 2 * v15;
    do
    {
      v49 = v16;
      v50 = v23;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v52 = v16[1];
        v49 = v16 + 2;
        *v23 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
        v50 = v23 + 1;
        *v24 = (4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32;
        v51 = v24 + 1;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = v49[1];
          *v50++ = (4198405 * (unint64_t)(255 * (*v49 >> 6))) >> 32;
          *v51++ = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
          v49 += 2;
          v45 = __CFADD__(v53++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v48);
      v23 += v21;
      v24 += v22;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xf20_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFE50;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xf20_w30r;
  *a11 = vt_VImage_Cleanup_xf20_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_xf20_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  int v25;
  int v26;
  _WORD *v27;
  unint64_t v28;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        LOWORD(v22) = 0;
        LOWORD(v23) = 0;
        v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v25 = *v24 >> 6;
            v26 = v24[1] >> 6;
            v24 += 2;
            v23 = (((67174465 * (unint64_t)(57344 * v25)) >> 32) >> 4) + 4096;
            v22 = (((67174465 * (unint64_t)(57344 * v26)) >> 32) >> 4) + 4096;
          }
          v27 = (_WORD *)(v17 + v20);
          v28 = (67174465 * (unint64_t)(56064 * (*(unsigned __int16 *)(v19 + 2 * v21) >> 6))) >> 36;
          *v27 = -1;
          v27[1] = v28 + 4096;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_xf20_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int16 *v24;
  int v25;
  int v26;
  _BYTE *v27;
  unint64_t v28;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        LOBYTE(v22) = 0;
        LOBYTE(v23) = 0;
        v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v25 = *v24 >> 6;
            v26 = v24[1] >> 6;
            v24 += 2;
            v23 = ((4198405 * (unint64_t)(224 * v25)) >> 32) + 16;
            v22 = ((4198405 * (unint64_t)(224 * v26)) >> 32) + 16;
          }
          v27 = (_BYTE *)(v17 + v20);
          v28 = (4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v19 + 2 * v21) >> 6))) >> 32;
          *v27 = -1;
          v27[1] = v28 + 16;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_xf20_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  int32x4_t v30;
  int32x4_t v31;

  v13 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v14 = *(_QWORD *)(a7 + 40) & 0xFFFFFFFELL;
  v16 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v17 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v13;
  if (v17 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16)
    v17 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16;
  v15 = *(_QWORD *)(a7 + 24) + *(_QWORD *)(a7 + 40);
  v18 = v15 - v14 + (v15 & 1);
  if (v18 >= *(_QWORD *)(a11 + 24))
    v18 = *(_QWORD *)(a11 + 24);
  if (v18)
  {
    v19 = 0;
    v20 = *a9;
    v21 = a9[1];
    v22 = *a13;
    v23 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + 2 * v16;
    v24 = a8[1] + v21 * (v14 >> 1) + ((2 * v13) & 0xFFFFFFFFFFFFFFFCLL);
    v25 = *a8 + *a9 * v14 + 2 * v13;
    v26 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        for (i = 0; i < v17; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v24 + v27);
          a4.i16[2] = *(_WORD *)(v24 + v27 + 2);
          a5.i16[0] = *(_WORD *)(v25 + v27);
          a5.i16[2] = *(_WORD *)(v25 + v27 + 2);
          v30 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E000);
          v31 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v30.i8, *(uint32x2_t *)v26.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v30, v26));
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v31, (uint32x4_t)vsubq_s32(v30, v31), 1uLL), 9uLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          *(double *)(v23 + v28) = *(double *)&a4;
          v28 += 8;
          v27 += 4;
        }
      }
      v25 += v20;
      v23 += v22;
      v24 += (v19++ << 63 >> 63) & v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_Copy_xf20_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint32x4_t v26;
  uint64_t v27;
  unint64_t i;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;

  v13 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v14 = *(_QWORD *)(a7 + 40) & 0xFFFFFFFELL;
  v16 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v17 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v13;
  if (v17 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16)
    v17 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16;
  v15 = *(_QWORD *)(a7 + 24) + *(_QWORD *)(a7 + 40);
  v18 = v15 - v14 + (v15 & 1);
  if (v18 >= *(_QWORD *)(a11 + 24))
    v18 = *(_QWORD *)(a11 + 24);
  if (v18)
  {
    v19 = 0;
    v20 = *a9;
    v21 = a9[1];
    v22 = *a13;
    v23 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + v16;
    v24 = a8[1] + v21 * (v14 >> 1) + ((2 * v13) & 0xFFFFFFFFFFFFFFFCLL);
    v25 = *a8 + *a9 * v14 + 2 * v13;
    v26 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v17)
      {
        v27 = 0;
        for (i = 0; i < v17; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v24 + v27);
          a4.i16[2] = *(_WORD *)(v24 + v27 + 2);
          a5.i16[0] = *(_WORD *)(v25 + v27);
          a5.i16[2] = *(_WORD *)(v25 + v27 + 2);
          v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E0);
          v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v26.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v26));
          v31 = (int16x8_t)vsubq_s32(v29, v30);
          *(int16x4_t *)v31.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)v31, 1uLL), 9uLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v31.i8);
          *(int16x4_t *)v31.i8 = vuzp1_s16(*(int16x4_t *)v31.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v31);
          *(_DWORD *)(v23 + v27) = a4.i32[0];
          v27 += 4;
        }
      }
      v25 += v20;
      v23 += v22;
      v24 += (v19++ << 63 >> 63) & v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_Copy_xf20_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t j;
  unsigned __int16 *v50;
  _WORD *v51;
  unint64_t v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _WORD *v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  _WORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a6[2];
  v20 = a6[3];
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19)
    v23 = v19;
  v24 = v13 - v12 + v14;
  if (v24 >= v20)
    v24 = v20;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    v32 = a7[2] + v28 * v18 + 2 * v17;
    v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35)
    v35 = v24 >> 1;
  v36 = v9;
  v37 = v23 >> 1;
  v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1)
    v37 = (v23 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = v16[1] >> 6;
      v39 = v16 + 2;
      *v22 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
      v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39 >> 6;
          v43 = v39[1] >> 6;
          v39 += 2;
          *v40 = ((67174465 * (unint64_t)(57344 * v42)) >> 36) + 4096;
          v40[1] = ((67174465 * (unint64_t)(57344 * v43)) >> 36) + 4096;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      v47 = *v39 >> 6;
      v48 = v39[1] >> 6;
      *v40 = (((67174465 * (unint64_t)(57344 * v47)) >> 32) >> 4) + 4096;
      v40[1] = (((67174465 * (unint64_t)(57344 * v48)) >> 32) >> 4) + 4096;
    }
    v16 = (unsigned __int16 *)((char *)v16 + v15);
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v16;
      v51 = v22;
      if ((v36 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (67174465 * (unint64_t)(57344 * (v16[1] >> 6))) >> 36;
        v53 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
        *v22 = v53;
        LOWORD(v52) = v52 + 4096;
        v22[1] = v52;
        v54 = (_WORD *)((char *)v22 + v21);
        *v54 = v53;
        v54[1] = v52;
        v51 = v22 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = 57344 * (v50[1] >> 6);
          v57 = (((67174465 * (unint64_t)(57344 * (*v50 >> 6))) >> 32) >> 4) + 4096;
          *v51 = (((67174465 * (unint64_t)(57344 * (*v50 >> 6))) >> 32) >> 4) + 4096;
          v58 = (((67174465 * (unint64_t)v56) >> 32) >> 4) + 4096;
          v51[1] = v58;
          v51[2] = v57;
          v51[3] = v58;
          v59 = (_WORD *)((char *)v51 + v21);
          *v59 = v57;
          v59[1] = v58;
          v50 += 2;
          v59[2] = v57;
          v59[3] = v58;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        v60 = *v50 >> 6;
        v61 = v50[1] >> 6;
        v62 = (((67174465 * (unint64_t)(57344 * v60)) >> 32) >> 4) + 4096;
        *v51 = v62;
        v63 = (((67174465 * (unint64_t)(57344 * v61)) >> 32) >> 4) + 4096;
        v51[1] = v63;
        v64 = (_WORD *)((char *)v51 + v21);
        *v64 = v62;
        v64[1] = v63;
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    v65 = 2 * v35;
  }
  else
  {
    v65 = 0;
  }
  if ((v65 | v8 & 1) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v66 = *v16 >> 6;
      v67 = v16[1] >> 6;
      v16 += 2;
      *v22 = ((67174465 * (unint64_t)(57344 * v66)) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v67)) >> 36) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v68 = -(uint64_t)v37;
      do
      {
        v69 = *v16 >> 6;
        v70 = v16[1] >> 6;
        v16 += 2;
        *v22 = ((67174465 * (unint64_t)(57344 * v69)) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v70)) >> 36) + 4096;
        v22 += 2;
        v44 = __CFADD__(v68++, 1);
      }
      while (!v44);
      v71 = 2 * v37;
    }
    else
    {
      v71 = 0;
    }
    if ((v71 | (unint64_t)v38) < v23)
    {
      v72 = *v16 >> 6;
      v73 = v16[1] >> 6;
      *v22 = (((67174465 * (unint64_t)(57344 * v72)) >> 32) >> 4) + 4096;
      v22[1] = (((67174465 * (unint64_t)(57344 * v73)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  _WORD *v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  _WORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1] >> 6;
      v36 = v14 + 2;
      *v20 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v20[1] = ((67174465 * (unint64_t)(57344 * v43)) >> 36) + 4096;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 6;
          v40 = v36[1] >> 6;
          v36 += 2;
          *v37 = ((67174465 * (unint64_t)(57344 * v39)) >> 36) + 4096;
          v37[1] = ((67174465 * (unint64_t)(57344 * v40)) >> 36) + 4096;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 >> 6;
      v45 = v36[1] >> 6;
      *v37 = (((67174465 * (unint64_t)(57344 * v44)) >> 32) >> 4) + 4096;
      v37[1] = (((67174465 * (unint64_t)(57344 * v45)) >> 32) >> 4) + 4096;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        v50 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        *v20 = v50;
        LOWORD(v49) = v49 + 4096;
        v20[1] = v49;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v50;
        v51[1] = v49;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = 57344 * (v47[1] >> 6);
          v54 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          *v48 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          v55 = (((67174465 * (unint64_t)v53) >> 32) >> 4) + 4096;
          v48[1] = v55;
          v48[2] = v54;
          v48[3] = v55;
          v56 = (_WORD *)((char *)v48 + v19);
          *v56 = v54;
          v56[1] = v55;
          v47 += 2;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v57 = *v47 >> 6;
        v58 = v47[1] >> 6;
        v59 = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
        *v48 = v59;
        v60 = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
        v48[1] = v60;
        v61 = (_WORD *)((char *)v48 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v62 = 2 * v32;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v63 = *v14 >> 6;
      v64 = v14[1] >> 6;
      v14 += 2;
      *v20 = ((67174465 * (unint64_t)(57344 * v63)) >> 36) + 4096;
      v20[1] = ((67174465 * (unint64_t)(57344 * v64)) >> 36) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      v65 = -(uint64_t)v34;
      do
      {
        v66 = *v14 >> 6;
        v67 = v14[1] >> 6;
        v14 += 2;
        *v20 = ((67174465 * (unint64_t)(57344 * v66)) >> 36) + 4096;
        v20[1] = ((67174465 * (unint64_t)(57344 * v67)) >> 36) + 4096;
        v20 += 2;
        v41 = __CFADD__(v65++, 1);
      }
      while (!v41);
      v68 = 2 * v34;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v35) < v21)
    {
      v69 = *v14 >> 6;
      v70 = v14[1] >> 6;
      *v20 = (((67174465 * (unint64_t)(57344 * v69)) >> 32) >> 4) + 4096;
      v20[1] = (((67174465 * (unint64_t)(57344 * v70)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  unint64_t v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  _WORD *v56;
  unint64_t v57;
  unint64_t v58;
  _WORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 36;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1];
      v36 = v14 + 2;
      *v20 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
      v20[1] = (67174465 * (unint64_t)(0xFFFF * (v43 >> 6))) >> 36;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
          v37[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36;
      v45 = v36[1];
      *v37 = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
      v37[1] = (67174465 * (unint64_t)(0xFFFF * (v45 >> 6))) >> 36;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v50 = (67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 36;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = v47[1];
          v54 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
          *v48 = v54;
          v55 = (67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 36;
          v48[1] = v55;
          v48[2] = v54;
          v48[3] = v55;
          v56 = (_WORD *)((char *)v48 + v19);
          *v56 = v54;
          v56[1] = v55;
          v47 += 2;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v57 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
        v58 = (67174465 * (unint64_t)(0xFFFF * (v47[1] >> 6))) >> 36;
        *v48 = v57;
        v48[1] = v58;
        v59 = (_WORD *)((char *)v48 + v19);
        *v59 = v57;
        v59[1] = v58;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v60 = 2 * v32;
  }
  else
  {
    v60 = 0;
  }
  if ((v60 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v61 = *v14;
      v62 = v14[1];
      v14 += 2;
      *v20 = (67174465 * (unint64_t)(0xFFFF * (v61 >> 6))) >> 36;
      v20[1] = (67174465 * (unint64_t)(0xFFFF * (v62 >> 6))) >> 36;
      v20 += 2;
    }
    if (v34)
    {
      v63 = -(uint64_t)v34;
      do
      {
        v64 = *v14;
        v65 = v14[1];
        v14 += 2;
        *v20 = (67174465 * (unint64_t)(0xFFFF * (v64 >> 6))) >> 36;
        v20[1] = (67174465 * (unint64_t)(0xFFFF * (v65 >> 6))) >> 36;
        v20 += 2;
        v41 = __CFADD__(v63++, 1);
      }
      while (!v41);
      v66 = 2 * v34;
    }
    else
    {
      v66 = 0;
    }
    if ((v66 | (unint64_t)v35) < v21)
    {
      v67 = *v14;
      v68 = v14[1];
      *v20 = (67174465 * (unint64_t)(0xFFFF * (v67 >> 6))) >> 36;
      v20[1] = (67174465 * (unint64_t)(0xFFFF * (v68 >> 6))) >> 36;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + v26 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = v26;
    v31 = v29 + 2 * (v9 + v8) + v30;
    v32 = a7[2] + v28 * v19 + v20;
    v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1)
    v36 = (v24 - (v11 & 1)) >> 1;
  else
    v36 = v24 >> 1;
  v37 = v8;
  v38 = v23 >> 1;
  v39 = (v23 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = v15[1] >> 6;
      v40 = v15 + 2;
      *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v42)) >> 36) + 4096;
      v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = (67174465 * (unint64_t)(57344 * (v40[1] >> 6))) >> 36;
      *v41 = ((67174465 * (unint64_t)(57344 * (*v40 >> 6))) >> 36) + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v15;
      v48 = v22;
      if ((v37 & 1) != 0)
      {
        v49 = v15[1] >> 6;
        v47 = v15 + 2;
        *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
        v48 = v22 + 2;
      }
      if (v38)
      {
        v50 = -(uint64_t)v38;
        do
        {
          v51 = (67174465 * (unint64_t)(57344 * (v47[1] >> 6))) >> 36;
          v52 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          *v48 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          LOWORD(v51) = v51 + 4096;
          v48[1] = v51;
          v53 = (_WORD *)((char *)v48 + v21);
          *v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v54 = 2 * v36;
  }
  else
  {
    v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if ((v37 & 1) != 0)
    {
      v55 = *v15 >> 6;
      v56 = v15[1] >> 6;
      v15 += 2;
      *v22 = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v56)) >> 36) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      v57 = -(uint64_t)v38;
      do
      {
        v58 = (67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 36;
        *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = v58 + 4096;
        v15 += 2;
        v22 += 2;
        v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1] >> 6;
      v38 = v15 + 2;
      *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v40)) >> 36) + 4096;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (67174465 * (unint64_t)(57344 * (v38[1] >> 6))) >> 36;
      *v39 = ((67174465 * (unint64_t)(57344 * (*v38 >> 6))) >> 36) + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1] >> 6;
        v45 = v15 + 2;
        *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v47)) >> 36) + 4096;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (67174465 * (unint64_t)(57344 * (v45[1] >> 6))) >> 36;
          v50 = (((67174465 * (unint64_t)(57344 * (*v45 >> 6))) >> 32) >> 4) + 4096;
          *v46 = (((67174465 * (unint64_t)(57344 * (*v45 >> 6))) >> 32) >> 4) + 4096;
          LOWORD(v49) = v49 + 4096;
          v46[1] = v49;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15 >> 6;
      v54 = v15[1] >> 6;
      v15 += 2;
      *v22 = ((67174465 * (unint64_t)(57344 * v53)) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = (67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 36;
        *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = v56 + 4096;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 36;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1];
      v38 = v15 + 2;
      *v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
      v22[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1];
      *v39 = (67174465 * (unint64_t)(0xFFFF * (*v38 >> 6))) >> 36;
      v39[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1];
        v45 = v15 + 2;
        *v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
        v22[1] = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (67174465 * (unint64_t)(0xFFFF * (*v45 >> 6))) >> 36;
          v50 = (67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 36;
          *v46 = v49;
          v46[1] = v50;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15;
      v54 = v15[1];
      v15 += 2;
      *v22 = (67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 36;
      v22[1] = (67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 36;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = v15[1];
        *v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
        v22[1] = (67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 36;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 6;
      v40 = v16 + 2;
      *v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
      v23[1] = ((67174465 * (unint64_t)(57344 * v42)) >> 36) + 4096;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (67174465 * (unint64_t)(57344 * (v40[1] >> 6))) >> 36;
      *v41 = ((67174465 * (unint64_t)(57344 * (*v40 >> 6))) >> 36) + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 6;
        v47 = v16 + 2;
        *v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
        v23[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (67174465 * (unint64_t)(57344 * (v47[1] >> 6))) >> 36;
          *v48 = ((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 36) + 4096;
          v48[1] = v51 + 4096;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1];
      v40 = v16 + 2;
      *v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
      v23[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = v40[1];
      *v41 = (67174465 * (unint64_t)(0xFFFF * (*v40 >> 6))) >> 36;
      v41[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
        v23[1] = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = v47[1];
          *v48 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
          v48[1] = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t j;
  unsigned __int16 *v50;
  _WORD *v51;
  unint64_t v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _WORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _WORD *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a6[2];
  v20 = a6[3];
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19)
    v23 = v19;
  v24 = v13 - v12 + v14;
  if (v24 >= v20)
    v24 = v20;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    v32 = a7[2] + v28 * v18 + 2 * v17;
    v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35)
    v35 = v24 >> 1;
  v36 = v9;
  v37 = v23 >> 1;
  v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1)
    v37 = (v23 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = v16[1] >> 6;
      v39 = v16 + 2;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
      v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39 >> 6;
          v43 = v39[1] >> 6;
          v39 += 2;
          *v40 = 16 * ((4198405 * (unint64_t)(3584 * v42)) >> 32) + 4096;
          v40[1] = 16 * ((4198405 * (unint64_t)(3584 * v43)) >> 32) + 4096;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      v47 = *v39 >> 6;
      v48 = v39[1] >> 6;
      *v40 = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
      v40[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
    }
    v16 = (unsigned __int16 *)((char *)v16 + v15);
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v16;
      v51 = v22;
      if ((v36 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (4198405 * (unint64_t)(3584 * (v16[1] >> 6))) >> 32;
        v53 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
        *v22 = v53;
        LOWORD(v52) = 16 * v52 + 4096;
        v22[1] = v52;
        v54 = (_WORD *)((char *)v22 + v21);
        *v54 = v53;
        v54[1] = v52;
        v51 = v22 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = 15047083520 * (v50[1] >> 6);
          v57 = 16 * ((4198405 * (unint64_t)(3584 * (*v50 >> 6))) >> 32) + 4096;
          *v51 = 16 * ((4198405 * (unint64_t)(3584 * (*v50 >> 6))) >> 32) + 4096;
          LOWORD(v56) = 16 * WORD2(v56) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          v58 = (_WORD *)((char *)v51 + v21);
          *v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        v59 = *v50 >> 6;
        v60 = v50[1] >> 6;
        v61 = 16 * ((4198405 * (unint64_t)(3584 * v59)) >> 32) + 4096;
        *v51 = v61;
        v62 = 16 * ((4198405 * (unint64_t)(3584 * v60)) >> 32) + 4096;
        v51[1] = v62;
        v63 = (_WORD *)((char *)v51 + v21);
        *v63 = v61;
        v63[1] = v62;
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    v64 = 2 * v35;
  }
  else
  {
    v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v65 = *v16 >> 6;
      v66 = v16[1] >> 6;
      v16 += 2;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * v65)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v66)) >> 32) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v67 = -(uint64_t)v37;
      do
      {
        v68 = *v16 >> 6;
        v69 = v16[1] >> 6;
        v16 += 2;
        *v22 = 16 * ((4198405 * (unint64_t)(3584 * v68)) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v69)) >> 32) + 4096;
        v22 += 2;
        v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      v70 = 2 * v37;
    }
    else
    {
      v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      v71 = *v16 >> 6;
      v72 = v16[1] >> 6;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * v71)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v72)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _WORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1] >> 6;
      v36 = v14 + 2;
      *v20 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v43)) >> 32) + 4096;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 6;
          v40 = v36[1] >> 6;
          v36 += 2;
          *v37 = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
          v37[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_22;
    }
    v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 >> 6;
      v45 = v36[1] >> 6;
      *v37 = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
      v37[1] = 16 * ((4198405 * (unint64_t)(3584 * v45)) >> 32) + 4096;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        v50 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        *v20 = v50;
        LOWORD(v49) = 16 * v49 + 4096;
        v20[1] = v49;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v50;
        v51[1] = v49;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = 15047083520 * (v47[1] >> 6);
          v54 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          *v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          LOWORD(v53) = 16 * WORD2(v53) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 >> 6;
        v57 = v47[1] >> 6;
        v58 = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        *v48 = v58;
        v59 = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
        v48[1] = v59;
        v60 = (_WORD *)((char *)v48 + v19);
        *v60 = v58;
        v60[1] = v59;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v61 = 2 * v32;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v62 = *v14 >> 6;
      v63 = v14[1] >> 6;
      v14 += 2;
      *v20 = 16 * ((4198405 * (unint64_t)(3584 * v62)) >> 32) + 4096;
      v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v63)) >> 32) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      v64 = -(uint64_t)v34;
      do
      {
        v65 = *v14 >> 6;
        v66 = v14[1] >> 6;
        v14 += 2;
        *v20 = 16 * ((4198405 * (unint64_t)(3584 * v65)) >> 32) + 4096;
        v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v66)) >> 32) + 4096;
        v20 += 2;
        v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      v67 = *v14 >> 6;
      v68 = v14[1] >> 6;
      *v20 = 16 * ((4198405 * (unint64_t)(3584 * v67)) >> 32) + 4096;
      v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v68)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  _WORD *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  _WORD *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32);
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1];
      v36 = v14 + 2;
      *v20 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
      v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v43 >> 6))) >> 32);
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = 16 * ((4198405 * (unint64_t)(4095 * (v39 >> 6))) >> 32);
          v37[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36;
      v45 = v36[1];
      *v37 = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
      v37[1] = 16 * ((4198405 * (unint64_t)(4095 * (v45 >> 6))) >> 32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v49 = v14[1];
        v47 = v14 + 2;
        v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        *v20 = v50;
        v51 = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        v52 = (_WORD *)((char *)v20 + v19);
        *v52 = v50;
        v52[1] = v51;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v53 = -(uint64_t)v34;
        do
        {
          v54 = v47[1];
          v55 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          *v48 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          v56 = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
          v48[1] = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
          v48[2] = v55;
          v48[3] = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
          v57 = (_WORD *)((char *)v48 + v19);
          *v57 = v55;
          v57[1] = v56;
          v47 += 2;
          v57[2] = v55;
          v57[3] = v56;
          v48 += 4;
          v41 = __CFADD__(v53++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v58 = *v47;
        v59 = v47[1];
        v60 = 16 * ((4198405 * (unint64_t)(4095 * (v58 >> 6))) >> 32);
        *v48 = v60;
        v61 = 16 * ((4198405 * (unint64_t)(4095 * (v59 >> 6))) >> 32);
        v48[1] = v61;
        v62 = (_WORD *)((char *)v48 + v19);
        *v62 = v60;
        v62[1] = v61;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v63 = 2 * v32;
  }
  else
  {
    v63 = 0;
  }
  if ((v63 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v64 = *v14;
      v65 = v14[1];
      v14 += 2;
      *v20 = 16 * ((4198405 * (unint64_t)(4095 * (v64 >> 6))) >> 32);
      v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v65 >> 6))) >> 32);
      v20 += 2;
    }
    if (v34)
    {
      v66 = -(uint64_t)v34;
      do
      {
        v67 = *v14;
        v68 = v14[1];
        v14 += 2;
        *v20 = 16 * ((4198405 * (unint64_t)(4095 * (v67 >> 6))) >> 32);
        v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v68 >> 6))) >> 32);
        v20 += 2;
        v41 = __CFADD__(v66++, 1);
      }
      while (!v41);
      v69 = 2 * v34;
    }
    else
    {
      v69 = 0;
    }
    if ((v69 | (unint64_t)v35) < v21)
    {
      v70 = *v14;
      v71 = v14[1];
      *v20 = 16 * ((4198405 * (unint64_t)(4095 * (v70 >> 6))) >> 32);
      v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v71 >> 6))) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + v26 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = v26;
    v31 = v29 + 2 * (v9 + v8) + v30;
    v32 = a7[2] + v28 * v19 + v20;
    v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1)
    v36 = (v24 - (v11 & 1)) >> 1;
  else
    v36 = v24 >> 1;
  v37 = v8;
  v38 = v23 >> 1;
  v39 = (v23 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = v15[1] >> 6;
      v40 = v15 + 2;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v42)) >> 32) + 4096;
      v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = (4198405 * (unint64_t)(3584 * (v40[1] >> 6))) >> 32;
      *v41 = 16 * ((4198405 * (unint64_t)(3584 * (*v40 >> 6))) >> 32) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v15;
      v48 = v22;
      if ((v37 & 1) != 0)
      {
        v49 = v15[1] >> 6;
        v47 = v15 + 2;
        *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v48 = v22 + 2;
      }
      if (v38)
      {
        v50 = -(uint64_t)v38;
        do
        {
          v51 = (4198405 * (unint64_t)(3584 * (v47[1] >> 6))) >> 32;
          v52 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          *v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          LOWORD(v51) = 16 * v51 + 4096;
          v48[1] = v51;
          v53 = (_WORD *)((char *)v48 + v21);
          *v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v54 = 2 * v36;
  }
  else
  {
    v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if ((v37 & 1) != 0)
    {
      v55 = *v15 >> 6;
      v56 = v15[1] >> 6;
      v15 += 2;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      v57 = -(uint64_t)v38;
      do
      {
        v58 = (4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32;
        *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * v58 + 4096;
        v15 += 2;
        v22 += 2;
        v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1] >> 6;
      v38 = v15 + 2;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (4198405 * (unint64_t)(3584 * (v38[1] >> 6))) >> 32;
      *v39 = 16 * ((4198405 * (unint64_t)(3584 * (*v38 >> 6))) >> 32) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1] >> 6;
        v45 = v15 + 2;
        *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (4198405 * (unint64_t)(3584 * (v45[1] >> 6))) >> 32;
          v50 = 16 * ((4198405 * (unint64_t)(3584 * (*v45 >> 6))) >> 32) + 4096;
          *v46 = 16 * ((4198405 * (unint64_t)(3584 * (*v45 >> 6))) >> 32) + 4096;
          LOWORD(v49) = 16 * v49 + 4096;
          v46[1] = v49;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15 >> 6;
      v54 = v15[1] >> 6;
      v15 += 2;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = (4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32;
        *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * v56 + 4096;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32);
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1];
      v38 = v15 + 2;
      *v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
      v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (4198405 * (unint64_t)(4095 * (v38[1] >> 6))) >> 32;
      *v39 = 16 * ((4198405 * (unint64_t)(4095 * (*v38 >> 6))) >> 32);
      v39[1] = 16 * v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1];
        v45 = v15 + 2;
        *v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
        v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = v45[1];
          v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          *v46 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          v51 = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          v46[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          v52 = (_WORD *)((char *)v46 + v21);
          *v52 = v50;
          v52[1] = v51;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v53 = 2 * v34;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
      v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32);
      v22 += 2;
    }
    if (v36)
    {
      v56 = -(uint64_t)v36;
      do
      {
        v57 = (4198405 * (unint64_t)(4095 * (v15[1] >> 6))) >> 32;
        *v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
        v22[1] = 16 * v57;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v56++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 6;
      v40 = v16 + 2;
      *v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
      v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v42)) >> 32) + 4096;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (4198405 * (unint64_t)(3584 * (v40[1] >> 6))) >> 32;
      *v41 = 16 * ((4198405 * (unint64_t)(3584 * (*v40 >> 6))) >> 32) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 6;
        v47 = v16 + 2;
        *v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
        v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (4198405 * (unint64_t)(3584 * (v47[1] >> 6))) >> 32;
          *v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          v48[1] = 16 * v51 + 4096;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1];
      v40 = v16 + 2;
      *v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
      v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v42 >> 6))) >> 32);
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (4198405 * (unint64_t)(4095 * (v40[1] >> 6))) >> 32;
      *v41 = 16 * ((4198405 * (unint64_t)(4095 * (*v40 >> 6))) >> 32);
      v41[1] = 16 * v44;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
        v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (4198405 * (unint64_t)(4095 * (v47[1] >> 6))) >> 32;
          *v48 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          v48[1] = 16 * v51;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t j;
  unsigned __int16 *v50;
  _WORD *v51;
  unint64_t v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _WORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _WORD *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a6[2];
  v20 = a6[3];
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19)
    v23 = v19;
  v24 = v13 - v12 + v14;
  if (v24 >= v20)
    v24 = v20;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    v32 = a7[2] + v28 * v18 + 2 * v17;
    v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35)
    v35 = v24 >> 1;
  v36 = v9;
  v37 = v23 >> 1;
  v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1)
    v37 = (v23 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = v16[1] >> 6;
      v39 = v16 + 2;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
      v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39 >> 6;
          v43 = v39[1] >> 6;
          v39 += 2;
          *v40 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
          v40[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      v47 = *v39 >> 6;
      v48 = v39[1] >> 6;
      *v40 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
      v40[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
    }
    v16 = (unsigned __int16 *)((char *)v16 + v15);
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v16;
      v51 = v22;
      if ((v36 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (4198405 * (unint64_t)(896 * (v16[1] >> 6))) >> 32;
        v53 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
        *v22 = v53;
        LOWORD(v52) = ((_WORD)v52 << 6) + 4096;
        v22[1] = v52;
        v54 = (_WORD *)((char *)v22 + v21);
        *v54 = v53;
        v54[1] = v52;
        v51 = v22 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = 3761770880 * (v50[1] >> 6);
          v57 = ((4198405 * (unint64_t)(896 * (*v50 >> 6))) >> 32 << 6) + 4096;
          *v51 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v50 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v56) = (WORD2(v56) << 6) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          v58 = (_WORD *)((char *)v51 + v21);
          *v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        v59 = *v50 >> 6;
        v60 = v50[1] >> 6;
        v61 = ((4198405 * (unint64_t)(896 * v59)) >> 32 << 6) + 4096;
        *v51 = v61;
        v62 = ((4198405 * (unint64_t)(896 * v60)) >> 32 << 6) + 4096;
        v51[1] = v62;
        v63 = (_WORD *)((char *)v51 + v21);
        *v63 = v61;
        v63[1] = v62;
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    v64 = 2 * v35;
  }
  else
  {
    v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v65 = *v16 >> 6;
      v66 = v16[1] >> 6;
      v16 += 2;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v65)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v67 = -(uint64_t)v37;
      do
      {
        v68 = *v16 >> 6;
        v69 = v16[1] >> 6;
        v16 += 2;
        *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v69)) >> 32) << 6) + 4096;
        v22 += 2;
        v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      v70 = 2 * v37;
    }
    else
    {
      v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      v71 = *v16 >> 6;
      v72 = v16[1] >> 6;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v71)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v72)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _WORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1] >> 6;
      v36 = v14 + 2;
      *v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 6;
          v40 = v36[1] >> 6;
          v36 += 2;
          *v37 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
          v37[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_22;
    }
    v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 >> 6;
      v45 = v36[1] >> 6;
      *v37 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
      v37[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        v50 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        *v20 = v50;
        LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
        v20[1] = v49;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v50;
        v51[1] = v49;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = 3761770880 * (v47[1] >> 6);
          v54 = ((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32 << 6) + 4096;
          *v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v53) = (WORD2(v53) << 6) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 >> 6;
        v57 = v47[1] >> 6;
        v58 = ((4198405 * (unint64_t)(896 * v56)) >> 32 << 6) + 4096;
        *v48 = v58;
        v59 = ((4198405 * (unint64_t)(896 * v57)) >> 32 << 6) + 4096;
        v48[1] = v59;
        v60 = (_WORD *)((char *)v48 + v19);
        *v60 = v58;
        v60[1] = v59;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v61 = 2 * v32;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v62 = *v14 >> 6;
      v63 = v14[1] >> 6;
      v14 += 2;
      *v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v62)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v63)) >> 32) << 6) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      v64 = -(uint64_t)v34;
      do
      {
        v65 = *v14 >> 6;
        v66 = v14[1] >> 6;
        v14 += 2;
        *v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v65)) >> 32) << 6) + 4096;
        v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
        v20 += 2;
        v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      v67 = *v14 >> 6;
      v68 = v14[1] >> 6;
      *v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v67)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  uint64_t i;
  _WORD *v46;
  _WORD *v47;
  __int16 v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  __int16 v55;
  __int16 v56;
  _WORD *v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  unint64_t v66;
  unint64_t v67;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[3];
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + 4 * v14);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v19 = a6[2];
  else
    v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v16)
    v20 = v16;
  else
    v20 = v11 - v10 + (v11 & 1);
  if (v20)
  {
    v66 = v20;
    v21 = *a4;
    v22 = 2 * (v8 & 0xFFFFFFFE);
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v9)
      v25 = 0;
    else
      v25 = *a4;
    v26 = (char *)(v24 + v22 + v25);
    v27 = (char *)(*a7 + v23 * v15 + 2 * v14);
    v67 = v19;
    v28 = 2 * v19;
    v29 = -(uint64_t)v20;
    do
    {
      memcpy(v27, v26, v28);
      v26 += v21;
      v27 += v23;
      v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    v20 = v66;
    v8 = a2[4];
    v9 = a2[5];
    v19 = v67;
  }
  v31 = v9 & 1;
  v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32)
    v32 = v20 >> 1;
  v33 = v8;
  v34 = v19 >> 1;
  v35 = v8 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1)
    v34 = (v19 - v35) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v42 = v13[1] & 0xFFC0;
      v36 = v13 + 2;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v42;
      v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 & 0xFFC0;
          v40 = v36[1] & 0xFFC0;
          v36 += 2;
          *v37 = v39;
          v37[1] = v40;
          v37 += 2;
          v30 = __CFADD__(v38++, 1);
        }
        while (!v30);
        v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v13;
      v37 = v18;
      if (v34)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      v43 = *v36 & 0xFFC0;
      v44 = v36[1] & 0xFFC0;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v32)
  {
    for (i = 0; i != v32; ++i)
    {
      v46 = v13;
      v47 = v18;
      if ((v33 & 1) != 0)
      {
        v48 = *v13 & 0xFFC0;
        v49 = v13[1] & 0xFFC0;
        v46 = v13 + 2;
        *v18 = v48;
        v18[1] = v49;
        v50 = (_WORD *)((char *)v18 + v17);
        *v50 = v48;
        v50[1] = v49;
        v47 = v18 + 2;
      }
      if (v34)
      {
        v51 = -(uint64_t)v34;
        do
        {
          v52 = *v46 & 0xFFC0;
          v53 = v46[1] & 0xFFC0;
          v46 += 2;
          *v47 = v52;
          v47[1] = v53;
          v47[2] = v52;
          v47[3] = v53;
          v54 = (_WORD *)((char *)v47 + v17);
          *v54 = v52;
          v54[1] = v53;
          v54[2] = v52;
          v54[3] = v53;
          v47 += 4;
          v30 = __CFADD__(v51++, 1);
        }
        while (!v30);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        v55 = *v46 & 0xFFC0;
        v56 = v46[1] & 0xFFC0;
        *v47 = v55;
        v47[1] = v56;
        v57 = (_WORD *)((char *)v47 + v17);
        *v57 = v55;
        v57[1] = v56;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v18 += v17;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v20)
  {
    if ((v33 & 1) != 0)
    {
      v58 = *v13 & 0xFFC0;
      v59 = v13[1] & 0xFFC0;
      v13 += 2;
      *v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v34)
    {
      v60 = -(uint64_t)v34;
      do
      {
        v61 = *v13 & 0xFFC0;
        v62 = v13[1] & 0xFFC0;
        v13 += 2;
        *v18 = v61;
        v18[1] = v62;
        v18 += 2;
        v30 = __CFADD__(v60++, 1);
      }
      while (!v30);
      v34 *= 2;
    }
    if ((v34 | v35) < v19)
    {
      v63 = v13[1] & 0xFFC0;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v63;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + v26 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = v26;
    v31 = v29 + 2 * (v9 + v8) + v30;
    v32 = a7[2] + v28 * v19 + v20;
    v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1)
    v36 = (v24 - (v11 & 1)) >> 1;
  else
    v36 = v24 >> 1;
  v37 = v8;
  v38 = v23 >> 1;
  v39 = (v23 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = v15[1] >> 6;
      v40 = v15 + 2;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
      v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = (4198405 * (unint64_t)(896 * (v40[1] >> 6))) >> 32;
      *v41 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v40 >> 6))) >> 32) << 6) + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v15;
      v48 = v22;
      if ((v37 & 1) != 0)
      {
        v49 = v15[1] >> 6;
        v47 = v15 + 2;
        *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v48 = v22 + 2;
      }
      if (v38)
      {
        v50 = -(uint64_t)v38;
        do
        {
          v51 = (4198405 * (unint64_t)(896 * (v47[1] >> 6))) >> 32;
          v52 = ((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32 << 6) + 4096;
          *v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v51) = ((_WORD)v51 << 6) + 4096;
          v48[1] = v51;
          v53 = (_WORD *)((char *)v48 + v21);
          *v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v54 = 2 * v36;
  }
  else
  {
    v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if ((v37 & 1) != 0)
    {
      v55 = *v15 >> 6;
      v56 = v15[1] >> 6;
      v15 += 2;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      v57 = -(uint64_t)v38;
      do
      {
        v58 = (4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32;
        *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v58 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1] >> 6;
      v38 = v15 + 2;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (4198405 * (unint64_t)(896 * (v38[1] >> 6))) >> 32;
      *v39 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v38 >> 6))) >> 32) << 6) + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1] >> 6;
        v45 = v15 + 2;
        *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (4198405 * (unint64_t)(896 * (v45[1] >> 6))) >> 32;
          v50 = ((4198405 * (unint64_t)(896 * (*v45 >> 6))) >> 32 << 6) + 4096;
          *v46 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v45 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
          v46[1] = v49;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15 >> 6;
      v54 = v15[1] >> 6;
      v15 += 2;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = (4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32;
        *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v56 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t i;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  unint64_t v54;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 24) + v10;
  v13 = 2 * (v9 + v8);
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v16;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v21)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v12 - v11 + (v12 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v54 = v21;
    v23 = *a4;
    v24 = *a8;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (char *)(v25 + v13 + v26);
    v28 = (char *)(*a7 + v24 * v17 + v18);
    v29 = 2 * v21;
    v56 = v22;
    v30 = -(uint64_t)v22;
    do
    {
      memcpy(v28, v27, v29);
      v27 += v23;
      v28 += v24;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v22 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v21 = v54;
  }
  v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1)
    v33 = (v22 - (v10 & 1)) >> 1;
  else
    v33 = v22 >> 1;
  v34 = v8;
  v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v35 = (v21 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v15[1] & 0xFFC0;
      v36 = v15 + 2;
      *v20 = *v15 & 0xFFC0;
      v20[1] = v38;
      v37 = v20 + 2;
      if (!v35)
      {
LABEL_27:
        v15 = (_WORD *)((char *)v15 + v14);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v15;
      v37 = v20;
      if (!v35)
        goto LABEL_27;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = v36[1] & 0xFFC0;
      *v37 = *v36 & 0xFFC0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v31 = __CFADD__(v39++, 1);
    }
    while (!v31);
    goto LABEL_27;
  }
LABEL_28:
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v42 = v15;
      v43 = v20;
      if ((v34 & 1) != 0)
      {
        v44 = v15[1] & 0xFFC0;
        v42 = v15 + 2;
        *v20 = *v15 & 0xFFC0;
        v20[1] = v44;
        v43 = v20 + 2;
      }
      if (v35)
      {
        v45 = -(uint64_t)v35;
        do
        {
          v46 = *v42 & 0xFFC0;
          v47 = v42[1] & 0xFFC0;
          *v43 = v46;
          v43[1] = v47;
          v48 = (_WORD *)((char *)v43 + v19);
          *v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          v31 = __CFADD__(v45++, 1);
        }
        while (!v31);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v20 += v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v49 = *v15 & 0xFFC0;
      v50 = v15[1] & 0xFFC0;
      v15 += 2;
      *v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v35)
    {
      v51 = -(uint64_t)v35;
      do
      {
        v52 = v15[1] & 0xFFC0;
        *v20 = *v15 & 0xFFC0;
        v20[1] = v52;
        v15 += 2;
        v20 += 2;
        v31 = __CFADD__(v51++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 6;
      v40 = v16 + 2;
      *v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
      v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (4198405 * (unint64_t)(896 * (v40[1] >> 6))) >> 32;
      *v41 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v40 >> 6))) >> 32) << 6) + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 6;
        v47 = v16 + 2;
        *v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
        v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (4198405 * (unint64_t)(896 * (v47[1] >> 6))) >> 32;
          *v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t j;
  unsigned __int16 *v46;
  _BYTE *v47;
  unint64_t v48;
  char v49;
  _BYTE *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  _BYTE *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = v10 >= v8;
    v24 = *a8;
    v25 = a8[2];
    v26 = *a3 + *a4 * v10;
    if (v23)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (a2[4] & 0xFFFFFFFELL) + v27;
    v29 = a7[2] + v25 * v14 + v13;
    v30 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v29 + i) = -1;
          *(_BYTE *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v22;
      v30 += v24;
      v29 += v25;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v32 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v32)
    v32 = v20 >> 1;
  v33 = v9;
  v34 = v19 >> 1;
  v35 = v9 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1)
    v34 = (v19 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v42 = v12[1] >> 6;
      v36 = v12 + 2;
      *v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 6;
          v40 = v36[1] >> 6;
          v36 += 2;
          *v37 = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
          v37[1] = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
          v37 += 2;
          v23 = __CFADD__(v38++, 1);
        }
        while (!v23);
        v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v12;
      v37 = v18;
      if (v34)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      v43 = *v36 >> 6;
      v44 = v36[1] >> 6;
      *v37 = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
      v37[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v46 = v12;
      v47 = v18;
      if ((v33 & 1) != 0)
      {
        v46 = v12 + 2;
        v48 = (4198405 * (unint64_t)(224 * (v12[1] >> 6))) >> 32;
        v49 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        *v18 = v49;
        LOBYTE(v48) = v48 + 16;
        v18[1] = v48;
        v50 = &v18[v17];
        *v50 = v49;
        v50[1] = v48;
        v47 = v18 + 2;
      }
      if (v34)
      {
        v51 = -(uint64_t)v34;
        do
        {
          v52 = 224 * (v46[1] >> 6);
          v53 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          *v47 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          v54 = ((4198405 * (unint64_t)v52) >> 32) + 16;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v55 = &v47[v17 + 1];
          *(v55 - 1) = v53;
          *v55 = v54;
          v46 += 2;
          v55[1] = v53;
          v55[2] = v54;
          v47 += 4;
          v23 = __CFADD__(v51++, 1);
        }
        while (!v23);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        v56 = *v46 >> 6;
        v57 = v46[1] >> 6;
        v58 = ((4198405 * (unint64_t)(224 * v56)) >> 32) + 16;
        *v47 = v58;
        v59 = ((4198405 * (unint64_t)(224 * v57)) >> 32) + 16;
        v47[1] = v59;
        v60 = &v47[v17];
        *v60 = v58;
        v60[1] = v59;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    v61 = 2 * v32;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v20)
  {
    if ((v33 & 1) != 0)
    {
      v62 = *v12 >> 6;
      v63 = v12[1] >> 6;
      v12 += 2;
      *v18 = ((4198405 * (unint64_t)(224 * v62)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v63)) >> 32) + 16;
      v18 += 2;
    }
    if (v34)
    {
      v64 = -(uint64_t)v34;
      do
      {
        v65 = *v12 >> 6;
        v66 = v12[1] >> 6;
        v12 += 2;
        *v18 = ((4198405 * (unint64_t)(224 * v65)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v66)) >> 32) + 16;
        v18 += 2;
        v23 = __CFADD__(v64++, 1);
      }
      while (!v23);
      v67 = 2 * v34;
    }
    else
    {
      v67 = 0;
    }
    if ((v67 | (unint64_t)v35) < v19)
    {
      v68 = *v12 >> 6;
      v69 = v12[1] >> 6;
      *v18 = ((4198405 * (unint64_t)(224 * v68)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v69)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t j;
  unsigned __int16 *v44;
  _BYTE *v45;
  unint64_t v46;
  char v47;
  _BYTE *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  _BYTE *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = v10 >= v8;
    v23 = *a4;
    v24 = *a8;
    v25 = *a3 + *a4 * v10;
    if (v22)
      v26 = 0;
    else
      v26 = *a4;
    v27 = v25 + 2 * (a2[4] & 0xFFFFFFFELL) + v26;
    v28 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v28 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v30 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v30)
    v30 = v20 >> 1;
  v31 = v9;
  v32 = v19 >> 1;
  v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1)
    v32 = (v19 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v40 = v12[1] >> 6;
      v34 = v12 + 2;
      *v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
      v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34 >> 6;
          v38 = v34[1] >> 6;
          v34 += 2;
          *v35 = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
          v35[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
          v35 += 2;
          v22 = __CFADD__(v36++, 1);
        }
        while (!v22);
        v39 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      v34 = v12;
      v35 = v18;
      if (v32)
        goto LABEL_22;
    }
    v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v33) < v19)
    {
      v41 = *v34 >> 6;
      v42 = v34[1] >> 6;
      *v35 = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v44 = v12;
      v45 = v18;
      if ((v31 & 1) != 0)
      {
        v44 = v12 + 2;
        v46 = (4198405 * (unint64_t)(224 * (v12[1] >> 6))) >> 32;
        v47 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        *v18 = v47;
        LOBYTE(v46) = v46 + 16;
        v18[1] = v46;
        v48 = &v18[v17];
        *v48 = v47;
        v48[1] = v46;
        v45 = v18 + 2;
      }
      if (v32)
      {
        v49 = -(uint64_t)v32;
        do
        {
          v50 = 224 * (v44[1] >> 6);
          v51 = ((4198405 * (unint64_t)(224 * (*v44 >> 6))) >> 32) + 16;
          *v45 = ((4198405 * (unint64_t)(224 * (*v44 >> 6))) >> 32) + 16;
          v52 = ((4198405 * (unint64_t)v50) >> 32) + 16;
          v45[1] = v52;
          v45[2] = v51;
          v45[3] = v52;
          v53 = &v45[v17 + 1];
          *(v53 - 1) = v51;
          *v53 = v52;
          v44 += 2;
          v53[1] = v51;
          v53[2] = v52;
          v45 += 4;
          v22 = __CFADD__(v49++, 1);
        }
        while (!v22);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        v54 = *v44 >> 6;
        v55 = v44[1] >> 6;
        v56 = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
        *v45 = v56;
        v57 = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
        v45[1] = v57;
        v58 = &v45[v17];
        *v58 = v56;
        v58[1] = v57;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    v59 = 2 * v30;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | v8 & 1) < v20)
  {
    if ((v31 & 1) != 0)
    {
      v60 = *v12 >> 6;
      v61 = v12[1] >> 6;
      v12 += 2;
      *v18 = ((4198405 * (unint64_t)(224 * v60)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v61)) >> 32) + 16;
      v18 += 2;
    }
    if (v32)
    {
      v62 = -(uint64_t)v32;
      do
      {
        v63 = *v12 >> 6;
        v64 = v12[1] >> 6;
        v12 += 2;
        *v18 = ((4198405 * (unint64_t)(224 * v63)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v64)) >> 32) + 16;
        v18 += 2;
        v22 = __CFADD__(v62++, 1);
      }
      while (!v22);
      v65 = 2 * v32;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v33) < v19)
    {
      v66 = *v12 >> 6;
      v67 = v12[1] >> 6;
      *v18 = ((4198405 * (unint64_t)(224 * v66)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v67)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t j;
  unsigned __int16 *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v8)
      v25 = 0;
    else
      v25 = *a4;
    v26 = v24 + 2 * (a2[4] & 0xFFFFFFFELL) + v25;
    v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v27 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32;
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v29 = v8 & 1;
  v30 = (v20 - v29) >> 1;
  if (v20 >> 1 < v30)
    v30 = v20 >> 1;
  v31 = v9;
  v32 = v19 >> 1;
  v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1)
    v32 = (v19 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = v12[1];
      v34 = v12 + 2;
      *v18 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v41 >> 6))) >> 32;
      v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v34[1];
          v34 += 2;
          *v35 = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
          v35[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      v34 = v12;
      v35 = v18;
      if (v32)
        goto LABEL_22;
    }
    v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v33) < v19)
    {
      v42 = *v34;
      v43 = v34[1];
      *v35 = (4198405 * (unint64_t)(255 * (v42 >> 6))) >> 32;
      v35[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v45 = v12;
      v46 = v18;
      if ((v31 & 1) != 0)
      {
        v45 = v12 + 2;
        v47 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
        v48 = (4198405 * (unint64_t)(255 * (v12[1] >> 6))) >> 32;
        *v18 = v47;
        v18[1] = v48;
        v49 = &v18[v17];
        *v49 = v47;
        v49[1] = v48;
        v46 = v18 + 2;
      }
      if (v32)
      {
        v50 = -(uint64_t)v32;
        do
        {
          v51 = v45[1];
          v52 = (4198405 * (unint64_t)(255 * (*v45 >> 6))) >> 32;
          *v46 = v52;
          v53 = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
          v46[1] = v53;
          v46[2] = v52;
          v46[3] = v53;
          v54 = &v46[v17 + 1];
          *(v54 - 1) = v52;
          *v54 = v53;
          v45 += 2;
          v54[1] = v52;
          v54[2] = v53;
          v46 += 4;
          v39 = __CFADD__(v50++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        v55 = (4198405 * (unint64_t)(255 * (*v45 >> 6))) >> 32;
        v56 = (4198405 * (unint64_t)(255 * (v45[1] >> 6))) >> 32;
        *v46 = v55;
        v46[1] = v56;
        v57 = &v46[v17];
        *v57 = v55;
        v57[1] = v56;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    v58 = 2 * v30;
  }
  else
  {
    v58 = 0;
  }
  if ((v58 | (unint64_t)v29) < v20)
  {
    if ((v31 & 1) != 0)
    {
      v59 = *v12;
      v60 = v12[1];
      v12 += 2;
      *v18 = (4198405 * (unint64_t)(255 * (v59 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v60 >> 6))) >> 32;
      v18 += 2;
    }
    if (v32)
    {
      v61 = -(uint64_t)v32;
      do
      {
        v62 = *v12;
        v63 = v12[1];
        v12 += 2;
        *v18 = (4198405 * (unint64_t)(255 * (v62 >> 6))) >> 32;
        v18[1] = (4198405 * (unint64_t)(255 * (v63 >> 6))) >> 32;
        v18 += 2;
        v39 = __CFADD__(v61++, 1);
      }
      while (!v39);
      v64 = 2 * v32;
    }
    else
    {
      v64 = 0;
    }
    if ((v64 | (unint64_t)v33) < v19)
    {
      v65 = *v12;
      v66 = v12[1];
      *v18 = (4198405 * (unint64_t)(255 * (v65 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v66 >> 6))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t j;
  unsigned __int16 *v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = v11 >= v10;
    v26 = *a8;
    v27 = a8[2];
    v28 = *a3 + *a4 * v11;
    if (v25)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v12 + v29;
    v31 = a7[2] + v27 * v18 + v16;
    v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v31 + i) = -1;
          *(_BYTE *)(v32 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v34 = v22 >> 1;
  v35 = v10 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1)
    v34 = (v22 - (v10 & 1)) >> 1;
  v36 = v21 >> 1;
  v37 = v21 - v9;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v14[1] >> 6;
      v39 = v14 + 2;
      *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (4198405 * (unint64_t)(224 * (v39[1] >> 6))) >> 32;
      *v40 = ((4198405 * (unint64_t)(224 * (*v39 >> 6))) >> 32) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v14;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v47 = v14[1] >> 6;
        v45 = v14 + 2;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
        v46 = v20 + 2;
      }
      if (v38)
      {
        v48 = -(uint64_t)v38;
        do
        {
          v49 = (4198405 * (unint64_t)(224 * (v45[1] >> 6))) >> 32;
          v50 = ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32) + 16;
          *v46 = ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32) + 16;
          LOBYTE(v49) = v49 + 16;
          v46[1] = v49;
          v51 = &v46[v19];
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v53 = *v14 >> 6;
      v54 = v14[1] >> 6;
      v14 += 2;
      *v20 = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
      v20 += 2;
    }
    if (v38)
    {
      v55 = -(uint64_t)v38;
      do
      {
        v56 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v56 + 16;
        v20 += 2;
        v14 += 2;
        v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t j;
  unsigned __int16 *v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = *a3 + *a4 * v11 + v12 + v26;
    v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v28 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v30 = v22 >> 1;
  v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1)
    v30 = (v22 - (v10 & 1)) >> 1;
  v32 = v21 >> 1;
  v33 = v21 - v9;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v14[1] >> 6;
      v35 = v14 + 2;
      *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = (4198405 * (unint64_t)(224 * (v35[1] >> 6))) >> 32;
      *v36 = ((4198405 * (unint64_t)(224 * (*v35 >> 6))) >> 32) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v42 = v14;
      v43 = v20;
      if ((v8 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 2;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
        v43 = v20 + 2;
      }
      if (v34)
      {
        v45 = -(uint64_t)v34;
        do
        {
          v46 = (4198405 * (unint64_t)(224 * (v42[1] >> 6))) >> 32;
          v47 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          *v43 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          LOBYTE(v46) = v46 + 16;
          v43[1] = v46;
          v48 = &v43[v19];
          *v48 = v47;
          v48[1] = v46;
          v43 += 2;
          v42 += 2;
          v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    v49 = 2 * v30;
  }
  else
  {
    v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v50 = *v14 >> 6;
      v51 = v14[1] >> 6;
      v14 += 2;
      *v20 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
      v20 += 2;
    }
    if (v34)
    {
      v52 = -(uint64_t)v34;
      do
      {
        v53 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v53 + 16;
        v20 += 2;
        v14 += 2;
        v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t j;
  unsigned __int16 *v42;
  _BYTE *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = *a3 + *a4 * v11 + v12 + v26;
    v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v28 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32;
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v30 = v22 >> 1;
  v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1)
    v30 = (v22 - (v10 & 1)) >> 1;
  v32 = v21 >> 1;
  v33 = v21 - v9;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v14[1];
      v35 = v14 + 2;
      *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = v35[1];
      *v36 = (4198405 * (unint64_t)(255 * (*v35 >> 6))) >> 32;
      v36[1] = (4198405 * (unint64_t)(255 * (v39 >> 6))) >> 32;
      v36 += 2;
      v35 += 2;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v42 = v14;
      v43 = v20;
      if ((v8 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 2;
        *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v44 >> 6))) >> 32;
        v43 = v20 + 2;
      }
      if (v34)
      {
        v45 = -(uint64_t)v34;
        do
        {
          v46 = (4198405 * (unint64_t)(255 * (*v42 >> 6))) >> 32;
          v47 = (4198405 * (unint64_t)(255 * (v42[1] >> 6))) >> 32;
          *v43 = v46;
          v43[1] = v47;
          v48 = &v43[v19];
          *v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    v49 = 2 * v30;
  }
  else
  {
    v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 2;
      *v20 = (4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
      v20 += 2;
    }
    if (v34)
    {
      v52 = -(uint64_t)v34;
      do
      {
        v53 = v14[1];
        *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v53 >> 6))) >> 32;
        v20 += 2;
        v14 += 2;
        v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t j;
  unsigned __int16 *v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = v12 >= v9;
    v29 = *a8;
    v30 = a8[2];
    v31 = *a3 + *a4 * v12;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v14 + v32;
    v34 = a7[2] + v30 * v19 + v17;
    v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v34 + i) = -1;
          *(_BYTE *)(v35 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v33 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v37 = v24 >> 1;
  v38 = v24 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v23 >> 1;
  v41 = v23 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v45 = v16[1] >> 6;
      v43 = v16 + 2;
      *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v45)) >> 32) + 16;
      v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v22;
      if (!v42)
        goto LABEL_29;
    }
    v46 = -(uint64_t)v42;
    do
    {
      v47 = (4198405 * (unint64_t)(224 * (v43[1] >> 6))) >> 32;
      *v44 = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
      v44[1] = v47 + 16;
      v44 += 2;
      v43 += 2;
      v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v49 = v16;
      v50 = v22;
      if ((v8 & 1) != 0)
      {
        v51 = v16[1] >> 6;
        v49 = v16 + 2;
        *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
        v50 = v22 + 2;
      }
      if (v42)
      {
        v52 = -(uint64_t)v42;
        do
        {
          v53 = (4198405 * (unint64_t)(224 * (v49[1] >> 6))) >> 32;
          *v50 = ((4198405 * (unint64_t)(224 * (*v49 >> 6))) >> 32) + 16;
          v50[1] = v53 + 16;
          v50 += 2;
          v49 += 2;
          v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _BYTE *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v14 + v30;
    v32 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v32 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v34 = v24 >> 1;
  v35 = v24 - v11;
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = v16[1] >> 6;
      v40 = v16 + 2;
      *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (4198405 * (unint64_t)(224 * (v40[1] >> 6))) >> 32;
      *v41 = ((4198405 * (unint64_t)(224 * (*v40 >> 6))) >> 32) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v16;
      v48 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = v16[1] >> 6;
        v47 = v16 + 2;
        *v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
        v48 = v22 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (4198405 * (unint64_t)(224 * (v47[1] >> 6))) >> 32;
          *v48 = ((4198405 * (unint64_t)(224 * (*v47 >> 6))) >> 32) + 16;
          v48[1] = v51 + 16;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t j;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v27 = v13 - v12;
  v28 = v20 - v19;
  if (v13 - v12 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_BYTE *)(v35 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v34 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  v37 = v27 >> 1;
  v38 = v27 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 >> 1;
  v41 = v26 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v46 = v16[1] >> 6;
      v43 = v16 + 2;
      *v24 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v44 = v24 + 1;
      *v25 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
      v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v24;
      v45 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42)
        goto LABEL_29;
    }
    v47 = -(uint64_t)v42;
    do
    {
      v48 = 940442720 * (v43[1] >> 6);
      *v44++ = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
      *v45++ = BYTE4(v48) + 16;
      v43 += 2;
      v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v51 = v16;
      v52 = v24;
      v53 = v25;
      if ((v9 & 1) != 0)
      {
        v51 = v16 + 2;
        v54 = (4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32;
        *v24 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v52 = v24 + 1;
        *v25 = v54 + 16;
        v53 = v25 + 1;
      }
      if (v42)
      {
        v55 = -(uint64_t)v42;
        do
        {
          v56 = 940442720 * (v51[1] >> 6);
          *v52++ = ((4198405 * (unint64_t)(224 * (*v51 >> 6))) >> 32) + 16;
          *v53++ = BYTE4(v56) + 16;
          v51 += 2;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t j;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v27 = v13 - v12;
  v28 = v20 - v19;
  if (v13 - v12 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_BYTE *)(v35 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v34 + 2 * i) >> 6))) >> 32;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  v37 = v27 >> 1;
  v38 = v27 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 >> 1;
  v41 = v26 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v46 = v16[1];
      v43 = v16 + 2;
      *v24 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
      v44 = v24 + 1;
      *v25 = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
      v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v24;
      v45 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42)
        goto LABEL_29;
    }
    v47 = -(uint64_t)v42;
    do
    {
      v48 = v43[1];
      *v44++ = (4198405 * (unint64_t)(255 * (*v43 >> 6))) >> 32;
      *v45++ = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
      v43 += 2;
      v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v51 = v16;
      v52 = v24;
      v53 = v25;
      if ((v9 & 1) != 0)
      {
        v54 = v16[1];
        v51 = v16 + 2;
        *v24 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
        v52 = v24 + 1;
        *v25 = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
        v53 = v25 + 1;
      }
      if (v42)
      {
        v55 = -(uint64_t)v42;
        do
        {
          v56 = v51[1];
          *v52++ = (4198405 * (unint64_t)(255 * (*v51 >> 6))) >> 32;
          *v53++ = (4198405 * (unint64_t)(255 * (v56 >> 6))) >> 32;
          v51 += 2;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xw44_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  malloc_type_id_t v25;
  __int128 v27;
  int v28;
  vImage_YpCbCrPixelRange pixelRange;

  v27 = 0uLL;
  v28 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v27 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v27 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v27 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(_QWORD *)&v17[2].opaque[16] != a1
     || *(_QWORD *)&v17[2].opaque[8] != a2
     || *(_QWORD *)&v17[2].opaque[24] != 4 * a1))
  {
    v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(_QWORD *)v17[2].opaque = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      v24 = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v25 = 1556728742;
    }
    else
    {
      v24 = 0;
      v25 = 1270757447;
    }
    v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(_QWORD *)v17[2].opaque = v24;
    *(_QWORD *)&v17[2].opaque[8] = a2;
    *(_QWORD *)&v17[2].opaque[16] = a1;
    *(_QWORD *)&v17[2].opaque[24] = v23;
  }
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw44_32BGRA;
  *a11 = vt_VImage_Cleanup_xw44_32BGRA;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw44_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  malloc_type_id_t v25;
  __int128 v27;
  int v28;
  vImage_YpCbCrPixelRange pixelRange;

  v27 = 0uLL;
  v28 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v27 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v27 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v27 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(_QWORD *)&v17[2].opaque[16] != a1
     || *(_QWORD *)&v17[2].opaque[8] != a2
     || *(_QWORD *)&v17[2].opaque[24] != 4 * a1))
  {
    v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(_QWORD *)v17[2].opaque = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      v24 = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v25 = 1556728742;
    }
    else
    {
      v24 = 0;
      v25 = 1270757447;
    }
    v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(_QWORD *)v17[2].opaque = v24;
    *(_QWORD *)&v17[2].opaque[8] = a2;
    *(_QWORD *)&v17[2].opaque[16] = a1;
    *(_QWORD *)&v17[2].opaque[24] = v23;
  }
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw44_32ARGB;
  *a11 = vt_VImage_Cleanup_xw44_32ARGB;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw44_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw44_w30r;
  *a11 = vt_VImage_Cleanup_xw44_w30r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_xw22_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  malloc_type_id_t v25;
  __int128 v27;
  int v28;
  vImage_YpCbCrPixelRange pixelRange;

  v27 = 0uLL;
  v28 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v27 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v27 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v27 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(_QWORD *)&v17[2].opaque[16] != a1
     || *(_QWORD *)&v17[2].opaque[8] != a2
     || *(_QWORD *)&v17[2].opaque[24] != 4 * a1))
  {
    v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(_QWORD *)v17[2].opaque = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      v24 = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v25 = 1556728742;
    }
    else
    {
      v24 = 0;
      v25 = 1270757447;
    }
    v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(_QWORD *)v17[2].opaque = v24;
    *(_QWORD *)&v17[2].opaque[8] = a2;
    *(_QWORD *)&v17[2].opaque[16] = a1;
    *(_QWORD *)&v17[2].opaque[24] = v23;
  }
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw22_32BGRA;
  *a11 = vt_VImage_Cleanup_xw22_32BGRA;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw22_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  malloc_type_id_t v25;
  __int128 v27;
  int v28;
  vImage_YpCbCrPixelRange pixelRange;

  v27 = 0uLL;
  v28 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v27 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v27 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v27 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(_QWORD *)&v17[2].opaque[16] != a1
     || *(_QWORD *)&v17[2].opaque[8] != a2
     || *(_QWORD *)&v17[2].opaque[24] != 4 * a1))
  {
    v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(_QWORD *)v17[2].opaque = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      v24 = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v25 = 1556728742;
    }
    else
    {
      v24 = 0;
      v25 = 1270757447;
    }
    v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(_QWORD *)v17[2].opaque = v24;
    *(_QWORD *)&v17[2].opaque[8] = a2;
    *(_QWORD *)&v17[2].opaque[16] = a1;
    *(_QWORD *)&v17[2].opaque[24] = v23;
  }
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw22_32ARGB;
  *a11 = vt_VImage_Cleanup_xw22_32ARGB;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw22_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw22_w30r;
  *a11 = vt_VImage_Cleanup_xw22_w30r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_xw20_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  malloc_type_id_t v25;
  __int128 v27;
  int v28;
  vImage_YpCbCrPixelRange pixelRange;

  v27 = 0uLL;
  v28 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v27 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v27 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v27 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(_QWORD *)&v17[2].opaque[16] != a1
     || *(_QWORD *)&v17[2].opaque[8] != a2
     || *(_QWORD *)&v17[2].opaque[24] != 4 * a1))
  {
    v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(_QWORD *)v17[2].opaque = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      v24 = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v25 = 1556728742;
    }
    else
    {
      v24 = 0;
      v25 = 1270757447;
    }
    v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(_QWORD *)v17[2].opaque = v24;
    *(_QWORD *)&v17[2].opaque[8] = a2;
    *(_QWORD *)&v17[2].opaque[16] = a1;
    *(_QWORD *)&v17[2].opaque[24] = v23;
  }
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw20_32BGRA;
  *a11 = vt_VImage_Cleanup_xw20_32BGRA;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw20_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  malloc_type_id_t v25;
  __int128 v27;
  int v28;
  vImage_YpCbCrPixelRange pixelRange;

  v27 = 0uLL;
  v28 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v27 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v27 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v27 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(_QWORD *)&v17[2].opaque[16] != a1
     || *(_QWORD *)&v17[2].opaque[8] != a2
     || *(_QWORD *)&v17[2].opaque[24] != 4 * a1))
  {
    v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(_QWORD *)v17[2].opaque = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      v24 = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v25 = 1556728742;
    }
    else
    {
      v24 = 0;
      v25 = 1270757447;
    }
    v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(_QWORD *)v17[2].opaque = v24;
    *(_QWORD *)&v17[2].opaque[8] = a2;
    *(_QWORD *)&v17[2].opaque[16] = a1;
    *(_QWORD *)&v17[2].opaque[24] = v23;
  }
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw20_32ARGB;
  *a11 = vt_VImage_Cleanup_xw20_32ARGB;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw20_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw20_w30r;
  *a11 = vt_VImage_Cleanup_xw20_w30r;
  *a8 = v17;
  return result;
}

uint64_t GetDefaultYpCbCrToARGBMatrixWithDimensionHint(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *MEMORY[0x1E0C8BDB0];
  VTGetDefaultYCbCrMatrixWithDimensionHints(a1, a2);
  if (FigCFEqual())
    return *MEMORY[0x1E0C8BDA8];
  else
    return v2;
}

vImage_Error vt_VImage_Copy_2vuy_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuy_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_2vuy_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuy_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_yuvs_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvs_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_yuvs_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvs_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_yuvf_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvf_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_yuvf_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvf_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y420_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint8_t permuteMap[4];
  vImage_Buffer srcCr;
  vImage_Buffer srcCb;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = a3[2];
  v18 = a4[2];
  v19 = *a7;
  v20 = *a8;
  v22 = a2 + 4;
  v21 = a2[4];
  v23 = v22[1] & 1;
  v24 = v21 & 1;
  v25 = __OFADD__(v24, v21);
  v26 = v24 + v21;
  v27 = v23 + v22[1];
  v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25)
    v30 = v26 + 1;
  else
    v30 = v26;
  v31 = v14 + (v30 >> 1);
  if (v27 >= 0)
    v32 = v27;
  else
    v32 = v27 + 1;
  v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  v34 = (void *)(v19 + 4 * (*(_QWORD *)(a6 + 32) + v24) + (*(_QWORD *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_y420_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y420_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint8_t permuteMap[4];
  vImage_Buffer srcCr;
  vImage_Buffer srcCb;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = a3[2];
  v18 = a4[2];
  v19 = *a7;
  v20 = *a8;
  v22 = a2 + 4;
  v21 = a2[4];
  v23 = v22[1] & 1;
  v24 = v21 & 1;
  v25 = __OFADD__(v24, v21);
  v26 = v24 + v21;
  v27 = v23 + v22[1];
  v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25)
    v30 = v26 + 1;
  else
    v30 = v26;
  v31 = v14 + (v30 >> 1);
  if (v27 >= 0)
    v32 = v27;
  else
    v32 = v27 + 1;
  v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  v34 = (void *)(v19 + 4 * (*(_QWORD *)(a6 + 32) + v24) + (*(_QWORD *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_y420_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_f420_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint8_t permuteMap[4];
  vImage_Buffer srcCr;
  vImage_Buffer srcCb;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = a3[2];
  v18 = a4[2];
  v19 = *a7;
  v20 = *a8;
  v22 = a2 + 4;
  v21 = a2[4];
  v23 = v22[1] & 1;
  v24 = v21 & 1;
  v25 = __OFADD__(v24, v21);
  v26 = v24 + v21;
  v27 = v23 + v22[1];
  v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25)
    v30 = v26 + 1;
  else
    v30 = v26;
  v31 = v14 + (v30 >> 1);
  if (v27 >= 0)
    v32 = v27;
  else
    v32 = v27 + 1;
  v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  v34 = (void *)(v19 + 4 * (*(_QWORD *)(a6 + 32) + v24) + (*(_QWORD *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_f420_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_f420_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint8_t permuteMap[4];
  vImage_Buffer srcCr;
  vImage_Buffer srcCb;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = a3[2];
  v18 = a4[2];
  v19 = *a7;
  v20 = *a8;
  v22 = a2 + 4;
  v21 = a2[4];
  v23 = v22[1] & 1;
  v24 = v21 & 1;
  v25 = __OFADD__(v24, v21);
  v26 = v24 + v21;
  v27 = v23 + v22[1];
  v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25)
    v30 = v26 + 1;
  else
    v30 = v26;
  v31 = v14 + (v30 >> 1);
  if (v27 >= 0)
    v32 = v27;
  else
    v32 = v27 + 1;
  v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  v34 = (void *)(v19 + 4 * (*(_QWORD *)(a6 + 32) + v24) + (*(_QWORD *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_f420_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_420v_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, _QWORD *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  vImagePixelCount v25;
  vImagePixelCount v26;
  uint64_t v27;
  uint64_t v28;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer srcCbCr;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = *a7;
  v18 = *a8;
  v20 = a2[4];
  v19 = a2[5];
  v21 = (v20 & 1) + v20;
  v22 = v13 + v21;
  v23 = (v19 & 1) + v19;
  v24 = (void *)(v22 + v23 * *a4);
  v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19))
    ++v23;
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  v28 = a6[4];
  v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20)
      return 4294945520;
    result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26)
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420v_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_420v_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, _QWORD *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  vImagePixelCount v25;
  vImagePixelCount v26;
  uint64_t v27;
  uint64_t v28;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer srcCbCr;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = *a7;
  v18 = *a8;
  v20 = a2[4];
  v19 = a2[5];
  v21 = (v20 & 1) + v20;
  v22 = v13 + v21;
  v23 = (v19 & 1) + v19;
  v24 = (void *)(v22 + v23 * *a4);
  v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19))
    ++v23;
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  v28 = a6[4];
  v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20)
      return 4294945520;
    result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26)
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420v_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_420f_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, _QWORD *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  vImagePixelCount v25;
  vImagePixelCount v26;
  uint64_t v27;
  uint64_t v28;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer srcCbCr;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = *a7;
  v18 = *a8;
  v20 = a2[4];
  v19 = a2[5];
  v21 = (v20 & 1) + v20;
  v22 = v13 + v21;
  v23 = (v19 & 1) + v19;
  v24 = (void *)(v22 + v23 * *a4);
  v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19))
    ++v23;
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  v28 = a6[4];
  v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20)
      return 4294945520;
    result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26)
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420f_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_420f_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, _QWORD *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  vImagePixelCount v25;
  vImagePixelCount v26;
  uint64_t v27;
  uint64_t v28;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer srcCbCr;
  vImage_Buffer dest;
  vImage_Buffer srcYp;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = *a7;
  v18 = *a8;
  v20 = a2[4];
  v19 = a2[5];
  v21 = (v20 & 1) + v20;
  v22 = v13 + v21;
  v23 = (v19 & 1) + v19;
  v24 = (void *)(v22 + v23 * *a4);
  v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19))
    ++v23;
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  v28 = a6[4];
  v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20)
      return 4294945520;
    result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26)
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420f_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *MEMORY[0x1E0C8BDA0];
  VTGetDefaultYCbCrMatrixWithDimensionHints(a1, a2);
  if (FigCFEqual())
    return *MEMORY[0x1E0C8BD98];
  else
    return v2;
}

vImage_Error vt_VImage_Copy_32ARGB_2vuy(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_2vuy(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_yuvs(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_yuvs(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_2vuf(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_2vuf(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_yuvf(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_yuvf(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_y420(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  vImagePixelCount v24;
  vImagePixelCount v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t permuteMap[4];
  vImage_Buffer destCr;
  vImage_Buffer destCb;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = a7[1];
  v16 = *a8;
  v17 = a8[1];
  v18 = a7[2];
  v19 = a8[2];
  v21 = *(_QWORD *)(a6 + 32);
  v20 = *(_QWORD *)(a6 + 40);
  v22 = a2[4] + (v21 & 1);
  v23 = a2[5] + (v20 & 1);
  v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  v26 = (v21 & 1) + v21;
  v27 = v14 + v26;
  v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21))
    ++v26;
  v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32ARGB_y420(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_f420(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  vImagePixelCount v24;
  vImagePixelCount v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t permuteMap[4];
  vImage_Buffer destCr;
  vImage_Buffer destCb;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = a7[1];
  v16 = *a8;
  v17 = a8[1];
  v18 = a7[2];
  v19 = a8[2];
  v21 = *(_QWORD *)(a6 + 32);
  v20 = *(_QWORD *)(a6 + 40);
  v22 = a2[4] + (v21 & 1);
  v23 = a2[5] + (v20 & 1);
  v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  v26 = (v21 & 1) + v21;
  v27 = v14 + v26;
  v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21))
    ++v26;
  v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32ARGB_f420(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t permuteMap[4];
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *a8;
  v16 = a8[1];
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a2[4] + (v17 & 1);
  v20 = a2[5] + (v18 & 1);
  v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  v23 = (v17 & 1) + v17;
  v24 = v13 + v23;
  v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18))
    v27 = v25 + 1;
  else
    v27 = (v18 & 1) + v18;
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_420v(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t permuteMap[4];
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *a8;
  v16 = a8[1];
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a2[4] + (v17 & 1);
  v20 = a2[5] + (v18 & 1);
  v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  v23 = (v17 & 1) + v17;
  v24 = v13 + v23;
  v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18))
    v27 = v25 + 1;
  else
    v27 = (v18 & 1) + v18;
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_420f(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_32BGRA(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_v210(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Flags v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = a2[5];
  v13 = *a3 + 4 * (a2[4] + v10 % 6);
  v14 = *(_DWORD *)(a1 + 296);
  v15 = *a4;
  v16 = *a7;
  v17 = *a8;
  src.data = (void *)(v13 + v12 * *a4);
  src.height = v9;
  src.width = v8 - v10 % 6;
  src.rowBytes = v15;
  dest.data = (void *)(v16 + 16 * (v10 % 6 + v10) / 6 + v11 * v17);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v17;
  return vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v14);
}

void vt_VImage_Cleanup_32ARGB_v210(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_R10k(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888ToRGBA1010102(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_R10k(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_v216(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 4 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_v216(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_y408(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_v410(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444CrYpCb10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_v410(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_y416(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_RGhA(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;
  uint16_t backgroundColor[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = a2[2];
  v8 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 197121;
  v11 = *a3;
  v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  *(_QWORD *)backgroundColor = 0;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v8;
  result = vImageConvert_ARGB8888ToARGB16U(&src, &dest, permuteMap, 0, backgroundColor, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_32ARGB_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_XXXX_b3a8(vImagePixelCount a1, vImagePixelCount a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, int a7, int a8, uint64_t a9)
{
  uint64_t v17;
  vImage_Error result;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(vImage_Buffer *, _QWORD *, uint64_t, uint64_t, int *, uint64_t);
  uint64_t v35;
  vImage_Buffer dest;
  int v37;
  _QWORD v38[4];
  vImage_Buffer src;

  v17 = a9;
  v37 = 0;
  MEMORY[0x1940281CC](&vImageInitialize_once, vImageLoadFunctions);
  if (a9)
    v17 = *(unsigned int *)(a9 + 8);
  result = -12905;
  if (a8 <= 1380410944)
  {
    if (a8 == 1095911234)
    {
      v20 = 0;
      LOBYTE(v37) = 0;
      v21 = 3;
      v22 = 2;
      v19 = 1;
    }
    else
    {
      if (a8 != 1111970369)
        return result;
      v21 = 0;
      v20 = 3;
      LOBYTE(v37) = 3;
      v22 = 1;
      v19 = 2;
    }
  }
  else
  {
    if (a8 != 1380410945 && a8 != 1380411457 && a8 != 1815491698)
      return result;
    v19 = 0;
    v20 = 3;
    LOBYTE(v37) = 3;
    v21 = 2;
    v22 = 1;
  }
  BYTE1(v37) = v19;
  BYTE2(v37) = v22;
  HIBYTE(v37) = v21;
  v23 = (char *)*a4;
  src.data = *a4;
  src.height = a2;
  v24 = *a3;
  src.width = a1;
  src.rowBytes = v24;
  v25 = *a6;
  v26 = (char *)a6[1];
  v38[0] = v25;
  v38[1] = a2;
  v27 = *a5;
  v38[2] = a1;
  v38[3] = v27;
  if (v26)
  {
    if (a7)
    {
      dest.data = v26;
      dest.height = a2;
      v28 = a5[1];
      dest.width = a1;
      dest.rowBytes = v28;
      if (a8 == 1095911234 || a8 == 1111970369)
      {
        if (a8 == 1095911234)
          v33 = 0;
        else
          v33 = 3;
        result = vImageExtractChannel_ARGB8888(&src, &dest, v33, v17);
        if (result)
          return result;
      }
      else
      {
        if (a8 != 1815491698)
          return result;
        if (a2)
        {
          v29 = 0;
          v30 = 2 * v20;
          do
          {
            if (a1)
            {
              v31 = 0;
              v32 = v30;
              do
              {
                v26[v31++] = *(_WORD *)&v23[v32];
                v32 += 8;
              }
              while (a1 != v31);
            }
            v23 += v24;
            v26 += v28;
            ++v29;
          }
          while (v29 != a2);
        }
        result = 0;
      }
    }
    else if (a2)
    {
      do
      {
        memset(v26, 255, a1);
        v26 += a5[1];
        --a2;
      }
      while (a2);
      result = -12905;
    }
  }
  if (a8 <= 1380410944)
  {
    v34 = (uint64_t (*)(vImage_Buffer *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))vt_ARGB8888ToXRGB2101010;
    if (!vt_ARGB8888ToXRGB2101010)
      return result;
    goto LABEL_37;
  }
  if (a8 == 1380410945)
  {
    if (!vt_ARGB16UToXRGB2101010)
      return result;
    v34 = (uint64_t (*)(vImage_Buffer *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))vt_ARGBFFFFToXRGB2101010;
    v35 = v17 | 0x800;
    return v34(&src, v38, 384, 895, &v37, v35);
  }
  if (a8 == 1815491698)
  {
    v34 = (uint64_t (*)(vImage_Buffer *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))vt_ARGB16UToXRGB2101010;
    if (vt_ARGB16UToXRGB2101010)
    {
LABEL_37:
      v35 = v17;
      return v34(&src, v38, 384, 895, &v37, v35);
    }
  }
  return result;
}

void *vImageLoadFunctions()
{
  void *result;
  void *v1;
  char v2[88];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  strcpy(v2, "/System/Library/Frameworks/Accelerate.framework/Frameworks/vImage.framework/vImage");
  result = dlopen(v2, 1);
  if (result)
  {
    v1 = result;
    vt_XRGB2101010ToARGB8888 = (uint64_t)dlsym(result, "vImageConvert_XRGB2101010ToARGB8888");
    vt_XRGB2101010ToARGB16U = dlsym(v1, "vImageConvert_XRGB2101010ToARGB16U");
    vt_XRGB2101010ToARGB16F = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010ToARGB16F");
    vt_XRGB2101010ToARGBFFFF = dlsym(v1, "vImageConvert_XRGB2101010ToARGBFFFF");
    vt_XRGB2101010_A8ToARGB8888 = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGB8888");
    vt_XRGB2101010_A8ToARGB16U = dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGB16U");
    vt_XRGB2101010_A8ToARGB16F = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGB16F");
    vt_XRGB2101010_A8ToARGBFFFF = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGBFFFF");
    vt_ARGB8888ToXRGB2101010 = dlsym(v1, "vImageConvert_ARGB8888ToXRGB2101010");
    vt_ARGB16UToXRGB2101010 = (uint64_t)dlsym(v1, "vImageConvert_ARGB16UToXRGB2101010");
    result = dlsym(v1, "vImageConvert_ARGBFFFFToXRGB2101010");
    vt_ARGBFFFFToXRGB2101010 = (uint64_t)result;
  }
  return result;
}

vImage_Error vt_VImage_Copy_32ARGB_xw20(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v30;
  vImagePixelCount v31;
  vImagePixelCount v32;
  uint64_t v33;
  uint64_t v34;
  vImagePixelCount v35;
  vImagePixelCount v36;
  uint64_t v37;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *a8;
  v16 = a8[1];
  v18 = *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v19 = a2[4] + (v18 & 1);
  v20 = a2[5] + (v17 & 1);
  v21 = v8 - (v18 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = v9 - (v17 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  v23 = (v18 & 1) + v18;
  v24 = v13 + 2 * v23;
  v25 = (v17 & 1) + v17;
  v36 = v21;
  v37 = v15;
  v34 = v24 + v25 * v15;
  v35 = v22;
  v26 = v14 + 2 * v23;
  if (v25 < 0 != __OFADD__(v17 & 1, v17))
    v27 = v25 + 1;
  else
    v27 = (v17 & 1) + v17;
  v32 = v21;
  v33 = v16;
  v30 = v26 + (v27 >> 1) * v16;
  v31 = v22;
  result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result)
    return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
  return result;
}

void vt_VImage_Cleanup_32ARGB_xw20(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_xw22(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;
  vImagePixelCount v32;
  vImagePixelCount v33;
  uint64_t v34;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a2[5];
  v18 = *a3 + 4 * (a2[4] + (v15 & 1));
  v20 = *a8;
  v19 = a8[1];
  src.data = (void *)(v18 + v17 * *a4);
  src.height = v10;
  v21 = v9 - (v15 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = (v15 & 1) + v15;
  v31 = v13 + 2 * v22 + v16 * v20;
  v32 = v10;
  v33 = v21;
  v34 = v20;
  v23 = v14 + 2 * v22;
  if (v16 >= 0)
    v24 = v16;
  else
    v24 = v16 + 1;
  v27 = v23 + (v24 >> 1) * v19;
  v28 = v10;
  v29 = v21;
  v30 = v19;
  result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v11);
  if (!result)
    return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
  return result;
}

void vt_VImage_Cleanup_32ARGB_xw22(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_xw44(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v21;
  vImagePixelCount v22;
  vImagePixelCount v23;
  uint64_t v24;
  uint64_t v25;
  vImagePixelCount v26;
  vImagePixelCount v27;
  uint64_t v28;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a8;
  v14 = a8[1];
  v27 = v8;
  v28 = v13;
  v15 = *a7;
  v16 = a7[1];
  v23 = v8;
  v24 = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v25 = v15 + 2 * v17 + v18 * v13;
  v26 = v9;
  v21 = v16 + 2 * v17 + v18 / 2 * v14;
  v22 = v9;
  result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result)
    return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
  return result;
}

void vt_VImage_Cleanup_32ARGB_xw44(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_2vuy(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_2vuy(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_yuvs(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_yuvs(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t permuteMap[4];
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *a8;
  v16 = a8[1];
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a2[4] + (v17 & 1);
  v20 = a2[5] + (v18 & 1);
  v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  v23 = (v17 & 1) + v17;
  v24 = v13 + v23;
  v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18))
    v27 = v25 + 1;
  else
    v27 = (v18 & 1) + v18;
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_420f(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_yuvf(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_yuvf(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_2vuf(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_2vuf(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_y420(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  vImagePixelCount v24;
  vImagePixelCount v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t permuteMap[4];
  vImage_Buffer destCr;
  vImage_Buffer destCb;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = a7[1];
  v16 = *a8;
  v17 = a8[1];
  v18 = a7[2];
  v19 = a8[2];
  v21 = *(_QWORD *)(a6 + 32);
  v20 = *(_QWORD *)(a6 + 40);
  v22 = a2[4] + (v21 & 1);
  v23 = a2[5] + (v20 & 1);
  v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  v26 = (v21 & 1) + v21;
  v27 = v14 + v26;
  v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21))
    ++v26;
  v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32BGRA_y420(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_f420(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  vImagePixelCount v24;
  vImagePixelCount v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t permuteMap[4];
  vImage_Buffer destCr;
  vImage_Buffer destCb;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = a7[1];
  v16 = *a8;
  v17 = a8[1];
  v18 = a7[2];
  v19 = a8[2];
  v21 = *(_QWORD *)(a6 + 32);
  v20 = *(_QWORD *)(a6 + 40);
  v22 = a2[4] + (v21 & 1);
  v23 = a2[5] + (v20 & 1);
  v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  v26 = (v21 & 1) + v21;
  v27 = v14 + v26;
  v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21))
    ++v26;
  v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32BGRA_f420(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t permuteMap[4];
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *a8;
  v16 = a8[1];
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a2[4] + (v17 & 1);
  v20 = a2[5] + (v18 & 1);
  v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  v23 = (v17 & 1) + v17;
  v24 = v13 + v23;
  v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18))
    v27 = v25 + 1;
  else
    v27 = (v18 & 1) + v18;
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_420v(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v0a8(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  vImagePixelCount v26;
  vImagePixelCount v27;
  uint64_t v28;
  uint64_t v29;
  vImage_Error result;
  void *v31;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer src;

  memset(&dest, 0, 24);
  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = a7[1];
  v16 = *a8;
  v17 = a8[1];
  v18 = a7[2];
  v19 = a8[2];
  dest.rowBytes = v19;
  v21 = *(_QWORD *)(a6 + 32);
  v20 = *(_QWORD *)(a6 + 40);
  v22 = v20 & 1;
  v23 = v21 & 1;
  v24 = a2[4] + v23;
  v25 = a2[5] + v22;
  v26 = v9 - v23;
  src.width = v9 - v23;
  src.rowBytes = v13;
  v27 = v10 - v22;
  src.data = (void *)(v12 + 4 * v24 + v25 * v13);
  src.height = v27;
  v28 = v22 + v20;
  destYp.width = v9 - v23;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v14 + v23 + v21 + v28 * v16);
  destYp.height = v27;
  if (v28 < 0 != __OFADD__(v22, v20))
    v29 = v28 + 1;
  else
    v29 = (v20 & 1) + v20;
  destCbCr.width = v9 - v23;
  destCbCr.rowBytes = v17;
  destCbCr.data = (void *)(v15 + v23 + v21 + (v29 >> 1) * v17);
  destCbCr.height = v27;
  result = vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
  if (!result)
  {
    v31 = (void *)(v18 + *(_QWORD *)(a6 + 32) + v23 + (*(_QWORD *)(a6 + 40) + v22) * v19);
    dest.height = v27;
    dest.width = v26;
    dest.data = v31;
    return vImageExtractChannel_ARGB8888(&src, &dest, 3, v11);
  }
  return result;
}

void vt_VImage_Cleanup_32BGRA_v0a8(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_32ARGB(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v210(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Flags v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = a2[5];
  v13 = *a3 + 4 * (a2[4] + v10 % 6);
  v14 = *(_DWORD *)(a1 + 296);
  v15 = *a4;
  v16 = *a7;
  v17 = *a8;
  src.data = (void *)(v13 + v12 * *a4);
  src.height = v9;
  src.width = v8 - v10 % 6;
  src.rowBytes = v15;
  dest.data = (void *)(v16 + 16 * (v10 % 6 + v10) / 6 + v11 * v17);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v17;
  return vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v14);
}

void vt_VImage_Cleanup_32BGRA_v210(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_R10k(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888ToRGBA1010102(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_R10k(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v216(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 4 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_v216(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_y408(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v410(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444CrYpCb10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_v410(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_y416(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_RGhA(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;
  uint16_t backgroundColor[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = a2[2];
  v8 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50331906;
  v11 = *a3;
  v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  *(_QWORD *)backgroundColor = 0;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v8;
  result = vImageConvert_ARGB8888ToARGB16U(&src, &dest, permuteMap, 0, backgroundColor, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_32BGRA_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_xw20(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v30;
  vImagePixelCount v31;
  vImagePixelCount v32;
  uint64_t v33;
  uint64_t v34;
  vImagePixelCount v35;
  vImagePixelCount v36;
  uint64_t v37;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *a8;
  v16 = a8[1];
  v18 = *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v19 = a2[4] + (v18 & 1);
  v20 = a2[5] + (v17 & 1);
  v21 = v8 - (v18 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = v9 - (v17 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  v23 = (v18 & 1) + v18;
  v24 = v13 + 2 * v23;
  v25 = (v17 & 1) + v17;
  v36 = v21;
  v37 = v15;
  v34 = v24 + v25 * v15;
  v35 = v22;
  v26 = v14 + 2 * v23;
  if (v25 < 0 != __OFADD__(v17 & 1, v17))
    v27 = v25 + 1;
  else
    v27 = (v17 & 1) + v17;
  v32 = v21;
  v33 = v16;
  v30 = v26 + (v27 >> 1) * v16;
  v31 = v22;
  result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result)
    return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
  return result;
}

void vt_VImage_Cleanup_32BGRA_xw20(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_xw22(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImagePixelCount v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;
  vImagePixelCount v32;
  vImagePixelCount v33;
  uint64_t v34;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v12 = *a4;
  v13 = *a7;
  v14 = a7[1];
  v15 = *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a2[5];
  v18 = *a3 + 4 * (a2[4] + (v15 & 1));
  v20 = *a8;
  v19 = a8[1];
  src.data = (void *)(v18 + v17 * *a4);
  src.height = v10;
  v21 = v9 - (v15 & 1);
  src.width = v21;
  src.rowBytes = v12;
  v22 = (v15 & 1) + v15;
  v31 = v13 + 2 * v22 + v16 * v20;
  v32 = v10;
  v33 = v21;
  v34 = v20;
  v23 = v14 + 2 * v22;
  if (v16 >= 0)
    v24 = v16;
  else
    v24 = v16 + 1;
  v27 = v23 + (v24 >> 1) * v19;
  v28 = v10;
  v29 = v21;
  v30 = v19;
  result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v11);
  if (!result)
    return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
  return result;
}

void vt_VImage_Cleanup_32BGRA_xw22(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_xw44(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v21;
  vImagePixelCount v22;
  vImagePixelCount v23;
  uint64_t v24;
  uint64_t v25;
  vImagePixelCount v26;
  vImagePixelCount v27;
  uint64_t v28;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a8;
  v14 = a8[1];
  v27 = v8;
  v28 = v13;
  v15 = *a7;
  v16 = a7[1];
  v23 = v8;
  v24 = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v25 = v15 + 2 * v17 + v18 * v13;
  v26 = v9;
  v21 = v16 + 2 * v17 + v18 / 2 * v14;
  v22 = v9;
  result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result)
    return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
  return result;
}

void vt_VImage_Cleanup_32BGRA_xw44(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_L565_32BGRA(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImage_Flags v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  vImage_Buffer v15;
  vImage_Buffer src;

  v8 = a2[3];
  v9 = *(_DWORD *)(a1 + 296);
  v10 = *a3;
  v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  v12 = *a7;
  v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_RGB565toBGRA8888(0xFFu, &src, &v15, v9);
}

void vt_VImage_Cleanup_L565_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_L565_32ARGB(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImage_Flags v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  vImage_Buffer v15;
  vImage_Buffer src;

  v8 = a2[3];
  v9 = *(_DWORD *)(a1 + 296);
  v10 = *a3;
  v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  v12 = *a7;
  v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_RGB565toARGB8888(0xFFu, &src, &v15, v9);
}

void vt_VImage_Cleanup_L565_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_L565_5551(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImage_Flags v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  _BOOL4 v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = a2[3];
  v9 = *(_DWORD *)(a1 + 296);
  v10 = *a3;
  v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  v12 = *a7;
  v13 = *a8;
  v16.width = src.width;
  v16.rowBytes = v13;
  v14 = *(_BYTE *)(a1 + 288) == 0;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v16.data = (void *)(v12 + 2 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v13);
  v16.height = v8;
  return vImageConvert_RGB565toRGBA5551(&src, &v16, 2 * v14, v9);
}

void vt_VImage_Cleanup_L565_5551(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_L565_1555(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImage_Flags v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  _BOOL4 v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = a2[3];
  v9 = *(_DWORD *)(a1 + 296);
  v10 = *a3;
  v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  v12 = *a7;
  v13 = *a8;
  v16.width = src.width;
  v16.rowBytes = v13;
  v14 = *(_BYTE *)(a1 + 288) == 0;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v16.data = (void *)(v12 + 2 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v13);
  v16.height = v8;
  return vImageConvert_RGB565toARGB1555(&src, &v16, 2 * v14, v9);
}

void vt_VImage_Cleanup_L565_1555(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_R10k_32BGRA(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_RGBA1010102ToARGB8888(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_R10k_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_R10k_32ARGB(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_RGBA1010102ToARGB8888(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_R10k_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_R10k_RGhA(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v8 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 197121;
  v11 = *a3;
  v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v8;
  result = vImageConvert_RGBA1010102ToARGB16U(&src, &dest, 0, 1023, permuteMap, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_R10k_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y408_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = *a3 + 4 * a2[4];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_Planar8To16U(&src, &v16, v11);
}

void vt_VImage_Cleanup_y408_y416(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y408_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr8ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y408_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y408_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr8ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y408_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_v410_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444CrYpCb10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v10);
}

void vt_VImage_Cleanup_v410_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_v410_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444CrYpCb10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v10);
}

void vt_VImage_Cleanup_v410_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_v410_l64r(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v8 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  v11 = *a3;
  v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v8;
  result = vImageConvert_444CrYpCb10ToARGB16Q12(&src, &dest, info, permuteMap, 4095, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Q12to16U(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_v410_l64r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_v410_RGhA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v8 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  v11 = *a3;
  v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v8;
  result = vImageConvert_444CrYpCb10ToARGB16Q12(&src, &dest, info, permuteMap, 4095, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    result = vImageConvert_16Q12to16U(&dest, &dest, v10);
    if (!result)
      return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_v410_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y416_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = *a3 + 8 * a2[4];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_16UToPlanar8(&src, &v16, v11);
}

void vt_VImage_Cleanup_y416_y408(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y416_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr16ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y416_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y416_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr16ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y416_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_y416_l64r(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr16ToARGB16U(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y416_l64r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_y416_RGhA(vImage_YpCbCrToARGB *info, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v8 = a2[3];
  v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  v11 = *a3;
  v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v8;
  result = vImageConvert_444AYpCbCr16ToARGB16U(&src, &dest, info, permuteMap, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_y416_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_v216_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 4 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp16ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_v216_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_v216_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 4 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp16ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_v216_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_v216_l64r(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  vImagePixelCount v10;
  uint64_t v11;
  uint64_t v12;
  vImage_Flags v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  *(_DWORD *)permuteMap = 197121;
  v11 = *(_QWORD *)(a6 + 32);
  v12 = *(_QWORD *)(a6 + 40);
  v13 = *(_DWORD *)&info[2].opaque[40];
  v14 = *a4;
  v15 = *a7;
  v16 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v11 & 1)) + a2[5] * *a4);
  src.height = v10;
  src.width = v9 - (v11 & 1);
  src.rowBytes = v14;
  dest.data = (void *)(v15 + 8 * ((v11 & 1) + v11) + v12 * v16);
  dest.height = v10;
  dest.width = src.width;
  dest.rowBytes = v16;
  return vImageConvert_422CbYpCrYp16ToARGB16U(&src, &dest, info, permuteMap, 0xFFFFu, v13);
}

void vt_VImage_Cleanup_v216_l64r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_v216_RGhA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v8 = a2[3];
  *(_DWORD *)permuteMap = 197121;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)&info[2].opaque[40];
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v8;
  src.width = v9 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 8 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v8;
  dest.width = src.width;
  dest.rowBytes = v15;
  result = vImageConvert_422CbYpCrYp16ToARGB16U(&src, &dest, info, permuteMap, 0xFFFFu, v12);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v12);
  }
  return result;
}

void vt_VImage_Cleanup_v216_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_v210_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  vImagePixelCount v10;
  uint64_t v11;
  uint64_t v12;
  vImage_Flags v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *(_DWORD *)&info[2].opaque[40];
  v14 = *a4;
  v15 = *a7;
  v16 = *a8;
  src.data = (void *)(*a3 + 16 * (v11 % 6 + v11) / 6 + v12 * *a4);
  src.height = v10;
  src.width = v9 - v11 % 6;
  src.rowBytes = v14;
  dest.data = (void *)(v15 + 4 * (*(_QWORD *)(a6 + 32) + v11 % 6) + *(_QWORD *)(a6 + 40) * v16);
  dest.height = v10;
  dest.width = src.width;
  dest.rowBytes = v16;
  return vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v13);
}

void vt_VImage_Cleanup_v210_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_v210_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  vImagePixelCount v10;
  uint64_t v11;
  uint64_t v12;
  vImage_Flags v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v10 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *(_DWORD *)&info[2].opaque[40];
  v14 = *a4;
  v15 = *a7;
  v16 = *a8;
  src.data = (void *)(*a3 + 16 * (v11 % 6 + v11) / 6 + v12 * *a4);
  src.height = v10;
  src.width = v9 - v11 % 6;
  src.rowBytes = v14;
  dest.data = (void *)(v15 + 4 * (*(_QWORD *)(a6 + 32) + v11 % 6) + *(_QWORD *)(a6 + 40) * v16);
  dest.height = v10;
  dest.width = src.width;
  dest.rowBytes = v16;
  return vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v13);
}

void vt_VImage_Cleanup_v210_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_v210_RGhA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v9 = a2[2];
  v8 = a2[3];
  *(_DWORD *)permuteMap = 197121;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 16 * (v10 % 6 + v10) / 6 + a2[5] * *a4);
  src.height = v8;
  src.width = v9 - v10 % 6;
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 8 * (*(_QWORD *)(a6 + 32) + v10 % 6) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v8;
  dest.width = src.width;
  dest.rowBytes = v14;
  result = vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB16Q12(&src, &dest, info, permuteMap, 4095, v11);
  if (!result)
  {
    dest.width = 4 * v9;
    result = vImageConvert_16Q12to16U(&dest, &dest, v11);
    if (!result)
      return vImageConvert_16Uto16F(&dest, &dest, v11);
  }
  return result;
}

void vt_VImage_Cleanup_v210_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_OneComponent_32BGRA(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImage_Flags v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  vImage_Error result;
  vImage_Buffer v15;
  vImage_Buffer srcB;

  v8 = a2[3];
  v9 = *(_DWORD *)(a1 + 296);
  v10 = *a3;
  v11 = *a4;
  srcB.width = a2[2];
  srcB.rowBytes = v11;
  v12 = *a7;
  v13 = *a8;
  v15.width = srcB.width;
  v15.rowBytes = v13;
  srcB.data = (void *)(v10 + a2[4] + a2[5] * v11);
  srcB.height = v8;
  v15.data = (void *)(v12 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v13);
  v15.height = v8;
  result = vImageConvert_Planar8toARGB8888(&srcB, &srcB, &srcB, &srcB, &v15, v9);
  if (!result)
    return vImageOverwriteChannelsWithScalar_ARGB8888(0xFFu, &v15, &v15, 1u, v9);
  return result;
}

void vt_VImage_Cleanup_OneComponent_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_2vuf_32ARGB(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuf_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_2vuf_32BGRA(vImage_YpCbCrToARGB *info, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v10 = a2[4];
  v11 = *(_DWORD *)&info[2].opaque[40];
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(_QWORD *)(a6 + 32) + (v10 & 1)) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuf_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_32ARGB(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  const vImage_Buffer *v16;
  vImage_Error result;
  uint8_t backgroundColor[4];
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  *(_DWORD *)backgroundColor = 255;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  v16 = (const vImage_Buffer *)(a1 + 256);
  *(_QWORD *)(a1 + 272) = 4 * v10;
  result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  *(_QWORD *)(a1 + 272) = v10;
  if (!result)
    return vImageConvert_ARGB16UToARGB8888(v16, &dest, permuteMap, 0, backgroundColor, v11);
  return result;
}

void vt_VImage_Cleanup_RGhA_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_32BGRA(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  const vImage_Buffer *v16;
  vImage_Error result;
  uint8_t backgroundColor[4];
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50331906;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  *(_DWORD *)backgroundColor = -16777216;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  v16 = (const vImage_Buffer *)(a1 + 256);
  *(_QWORD *)(a1 + 272) = 4 * v10;
  result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  *(_QWORD *)(a1 + 272) = v10;
  if (!result)
    return vImageConvert_ARGB16UToARGB8888(v16, &dest, permuteMap, 0, backgroundColor, v11);
  return result;
}

void vt_VImage_Cleanup_RGhA_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(*a3 + 8 * a2[4] + a2[5] * *a4);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v12;
  dest.width = 4 * v10;
  dest.rowBytes = v14;
  result = vImageConvert_16Fto16U(&src, &dest, v11);
  dest.width = v10;
  src.width = v10;
  src.rowBytes = dest.rowBytes;
  src.data = dest.data;
  if (!result)
    return vImageConvert_ARGB16UTo444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
  return result;
}

void vt_VImage_Cleanup_RGhA_y416(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_l64r(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = *a3 + 8 * a2[4];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_16Fto16U(&src, &v16, v11);
}

void vt_VImage_Cleanup_RGhA_l64r(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_RGfA(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = *a3 + 8 * a2[4];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 16 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_Planar16FtoPlanarF(&src, &v16, v11);
}

void vt_VImage_Cleanup_RGhA_RGfA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_v410(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  const vImage_Buffer *v16;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  v16 = (const vImage_Buffer *)(a1 + 256);
  *(_QWORD *)(a1 + 272) = 4 * v10;
  result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  if (!result)
  {
    result = vImageConvert_16Uto16Q12(v16, v16, v11);
    *(_QWORD *)(a1 + 272) = v10;
    if (!result)
      result = vImageConvert_ARGB16Q12To444CrYpCb10(v16, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
  }
  *(_QWORD *)(a1 + 272) = v10;
  return result;
}

void vt_VImage_Cleanup_RGhA_v410(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_v210(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  vImage_Flags v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  const vImage_Buffer *v17;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 33619971;
  v11 = *(_QWORD *)(a6 + 32);
  v12 = *(_QWORD *)(a6 + 40);
  v13 = *(_DWORD *)(a1 + 296);
  v14 = *a4;
  v15 = *a7;
  v16 = *a8;
  src.data = (void *)(*a3 + 8 * (a2[4] + v11 % 6) + a2[5] * *a4);
  src.height = v9;
  dest.data = (void *)(v15 + 16 * (v11 % 6 + v11) / 6 + v12 * v16);
  dest.height = v9;
  dest.width = v10 - v11 % 6;
  dest.rowBytes = v16;
  src.width = 4 * v10;
  src.rowBytes = v14;
  v17 = (const vImage_Buffer *)(a1 + 256);
  *(_QWORD *)(a1 + 272) = 4 * v10;
  result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v13);
  if (!result)
  {
    result = vImageConvert_16Uto16Q12(v17, v17, v13);
    *(_QWORD *)(a1 + 272) = v10;
    if (!result)
      result = vImageConvert_ARGB16Q12To422CrYpCbYpCbYpCbYpCrYpCrYp10(v17, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v13);
  }
  *(_QWORD *)(a1 + 272) = v10;
  return result;
}

void vt_VImage_Cleanup_RGhA_v210(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_v216(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  vImage_Flags v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  const vImage_Buffer *v17;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 33619971;
  v11 = *(_QWORD *)(a6 + 32);
  v12 = *(_QWORD *)(a6 + 40);
  v13 = *(_DWORD *)(a1 + 296);
  v14 = *a4;
  v15 = *a7;
  v16 = *a8;
  src.data = (void *)(*a3 + 8 * (a2[4] + (v11 & 1)) + a2[5] * *a4);
  src.height = v9;
  dest.data = (void *)(v15 + 4 * ((v11 & 1) + v11) + v12 * v16);
  dest.height = v9;
  dest.width = v10 - (v11 & 1);
  dest.rowBytes = v16;
  src.width = 4 * v10;
  src.rowBytes = v14;
  v17 = (const vImage_Buffer *)(a1 + 256);
  *(_QWORD *)(a1 + 272) = 4 * v10;
  result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v13);
  *(_QWORD *)(a1 + 272) = v10;
  if (!result)
    return vImageConvert_ARGB16UTo422CbYpCrYp16(v17, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v13);
  return result;
}

void vt_VImage_Cleanup_RGhA_v216(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_R10k(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  const vImage_Buffer *v16;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  v16 = (const vImage_Buffer *)(a1 + 256);
  *(_QWORD *)(a1 + 272) = 4 * v10;
  result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  *(_QWORD *)(a1 + 272) = v10;
  if (!result)
    return vImageConvert_ARGB16UToRGBA1010102(v16, &dest, 0, 1023, permuteMap, v11);
  return result;
}

void vt_VImage_Cleanup_RGhA_R10k(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGfA_32ARGB(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  LODWORD(v8) = *(_BYTE *)(a1 + 288) == 0;
  maxFloat = xmmword_1928DFE60;
  minFloat[0] = 0;
  minFloat[1] = 0;
  src.data = (void *)(v11 + 16 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGBFFFFtoARGB8888_dithered(&src, &dest, (const float *)&maxFloat, (const float *)minFloat, 2 * (int)v8, permuteMap, v10);
}

void vt_VImage_Cleanup_RGfA_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGfA_32BGRA(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50331906;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  LODWORD(v8) = *(_BYTE *)(a1 + 288) == 0;
  maxFloat = xmmword_1928DFE60;
  minFloat[0] = 0;
  minFloat[1] = 0;
  src.data = (void *)(v11 + 16 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGBFFFFtoARGB8888_dithered(&src, &dest, (const float *)&maxFloat, (const float *)minFloat, 2 * (int)v8, permuteMap, v10);
}

void vt_VImage_Cleanup_RGfA_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_RGfA_RGhA(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = *a3 + 16 * a2[4];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_PlanarFtoPlanar16F(&src, &v16, v11);
}

void vt_VImage_Cleanup_RGfA_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_b3a8_XXXX(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, int a7, int a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t result;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t, int *, uint64_t);
  _QWORD v28[4];
  int v29;
  _QWORD v30[4];
  _QWORD v31[4];

  v29 = 0;
  MEMORY[0x1940281CC](&vImageInitialize_once, vImageLoadFunctions);
  if (a9)
    v17 = *(unsigned int *)(a9 + 8);
  else
    v17 = 0;
  result = -12905;
  if (a8 <= 1380410944)
  {
    if (a8 == 1095911234)
    {
      LOBYTE(v29) = 0;
      v19 = 3;
      v20 = 2;
      v21 = 1;
      goto LABEL_13;
    }
    if (a8 != 1111970369)
      return result;
    v19 = 0;
    LOBYTE(v29) = 3;
    v20 = 1;
  }
  else
  {
    if (a8 != 1380410945 && a8 != 1380411457 && a8 != 1815491698)
      return result;
    v19 = 0;
    LOBYTE(v29) = 1;
    v20 = 3;
  }
  v21 = 2;
LABEL_13:
  BYTE1(v29) = v21;
  BYTE2(v29) = v20;
  HIBYTE(v29) = v19;
  v31[0] = *a4;
  v31[1] = a2;
  v22 = *a3;
  v31[2] = a1;
  v31[3] = v22;
  v30[0] = *a6;
  v30[1] = a2;
  v23 = *a5;
  v30[2] = a1;
  v30[3] = v23;
  if (a7)
  {
    v28[0] = a4[1];
    v28[1] = a2;
    v24 = a3[1];
    v28[2] = a1;
    v28[3] = v24;
    if (a8 <= 1380410944)
    {
      v27 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGB8888;
      if (!vt_XRGB2101010_A8ToARGB8888)
        return result;
    }
    else
    {
      if (a8 == 1380410945)
      {
        v27 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGBFFFF;
        if (!vt_XRGB2101010_A8ToARGBFFFF)
          return result;
      }
      else
      {
        if (a8 != 1380411457)
        {
          if (vt_XRGB2101010ToARGB16U)
            return ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGB16U)(v31, v28, v30, 384, 895, &v29, v17);
          return result;
        }
        v27 = (uint64_t (*)(_QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGB16F;
        if (!vt_XRGB2101010_A8ToARGB16F)
          return result;
      }
      v17 = v17 | 0x800;
    }
    return v27(v31, v28, v30, 384, 895, &v29, v17);
  }
  if (a8 <= 1380410944)
  {
    v25 = (void *)vt_XRGB2101010ToARGB8888;
    if (!vt_XRGB2101010ToARGB8888)
      return result;
    v26 = 255;
    return ((uint64_t (*)(_QWORD *, uint64_t, _QWORD *, uint64_t, uint64_t, int *, uint64_t))v25)(v31, v26, v30, 384, 895, &v29, v17);
  }
  if (a8 == 1380410945)
  {
    if (vt_XRGB2101010_A8ToARGBFFFF)
      return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t, int *, _QWORD, float))vt_XRGB2101010ToARGBFFFF)(v31, v30, 384, 895, &v29, v17 | 0x800, 1.0);
  }
  else
  {
    if (a8 != 1380411457)
    {
      v25 = vt_XRGB2101010ToARGB16U;
      if (!vt_XRGB2101010ToARGB16U)
        return result;
      v26 = 0xFFFFLL;
      return ((uint64_t (*)(_QWORD *, uint64_t, _QWORD *, uint64_t, uint64_t, int *, uint64_t))v25)(v31, v26, v30, 384, 895, &v29, v17);
    }
    if (vt_XRGB2101010ToARGB16F)
      return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t, int *, _QWORD, float))vt_XRGB2101010ToARGB16F)(v31, v30, 384, 895, &v29, v17 | 0x800, 1.0);
  }
  return result;
}

uint64_t vt_VImage_Copy_w30r_x420()
{
  return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_x420(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_x422()
{
  return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_x422(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_x444()
{
  return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_x444(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xf20()
{
  return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xf20(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xf22()
{
  return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xf22(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xf44()
{
  return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xf44(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xw20()
{
  return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xw20(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xw22()
{
  return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xw22(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xw44()
{
  return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xw44(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_RGhA(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  vImagePixelCount v10;
  vImage_Flags v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  vImage_Buffer v16;
  vImage_Buffer src;

  v8 = *a3 + 8 * a2[4];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  v12 = *a4;
  v13 = *a7;
  v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_16Uto16F(&src, &v16, v11);
}

void vt_VImage_Cleanup_l64r_RGhA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_v410(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9;
  vImagePixelCount v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  const vImage_Buffer *v16;
  vImage_Error result;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v10 = a2[2];
  v9 = a2[3];
  v11 = *(_QWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  v12 = *a3;
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  v16 = (const vImage_Buffer *)(a1 + 256);
  *(_QWORD *)(a1 + 272) = 4 * v10;
  result = vImageConvert_16Uto16Q12(&src, (const vImage_Buffer *)(a1 + 256), 0);
  src.width = v10;
  *(_QWORD *)(a1 + 272) = v10;
  if (!result)
    return vImageConvert_ARGB16Q12To444CrYpCb10(v16, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
  return result;
}

void vt_VImage_Cleanup_l64r_v410(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  v11 = *a3;
  v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  v13 = *a7;
  v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB16UTo444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_l64r_y416(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_v216(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8;
  vImagePixelCount v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Flags v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = a2[2];
  v9 = a2[3];
  *(_DWORD *)permuteMap = 33619971;
  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_QWORD *)(a6 + 40);
  v12 = *(_DWORD *)(a1 + 296);
  v13 = *a4;
  v14 = *a7;
  v15 = *a8;
  src.data = (void *)(*a3 + 8 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 4 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB16UTo422CbYpCrYp16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_l64r_v216(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_x444_w30r()
{
  return vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_x444_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_x422_w30r()
{
  return vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_x422_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_x420_w30r()
{
  return vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_x420_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_xf44_w30r()
{
  return vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xf44_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_xf22_w30r()
{
  return vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xf22_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_xf20_w30r()
{
  return vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xf20_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_xw44_32BGRA(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  const vImage_Buffer *v19;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v22;
  vImagePixelCount v23;
  vImagePixelCount v24;
  uint64_t v25;
  vImage_Buffer dest;
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v11 = *a4;
  v12 = a4[1];
  v29 = v8;
  v30 = v11;
  v13 = *a3;
  v14 = a3[1];
  v24 = v8;
  v25 = v12;
  v15 = *a7;
  v16 = *a8;
  dest.width = v8;
  dest.rowBytes = v16;
  v17 = a2[4];
  v18 = a2[5];
  v27 = v13 + 2 * v17 + v18 * v11;
  v28 = v9;
  v22 = v14 + 2 * v17 + v18 * v12;
  v23 = v9;
  dest.data = (void *)(v15 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v16);
  dest.height = v9;
  v19 = (const vImage_Buffer *)(a1 + 256);
  result = vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
  if (!result)
    return vImageConvert_XRGB2101010ToARGB8888(v19, 0xFFu, &dest, 384, 895, permuteMap, v10);
  return result;
}

void vt_VImage_Cleanup_xw44_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_xw44_32ARGB(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  vImage_Flags v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  const vImage_Buffer *v19;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v22;
  vImagePixelCount v23;
  vImagePixelCount v24;
  uint64_t v25;
  vImage_Buffer dest;
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;

  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v11 = *a4;
  v12 = a4[1];
  v29 = v8;
  v30 = v11;
  v13 = *a3;
  v14 = a3[1];
  v24 = v8;
  v25 = v12;
  v15 = *a7;
  v16 = *a8;
  dest.width = v8;
  dest.rowBytes = v16;
  v17 = a2[4];
  v18 = a2[5];
  v27 = v13 + 2 * v17 + v18 * v11;
  v28 = v9;
  v22 = v14 + 2 * v17 + v18 * v12;
  v23 = v9;
  dest.data = (void *)(v15 + 4 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v16);
  dest.height = v9;
  v19 = (const vImage_Buffer *)(a1 + 256);
  result = vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
  if (!result)
    return vImageConvert_XRGB2101010ToARGB8888(v19, 0xFFu, &dest, 384, 895, permuteMap, v10);
  return result;
}

void vt_VImage_Cleanup_xw44_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_xw44_w30r()
{
  return vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xw44_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_xw22_32BGRA(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  vImagePixelCount v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  vImage_Flags v17;
  uint64_t v18;
  size_t v19;
  const vImage_Buffer *v20;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v23;
  vImagePixelCount v24;
  uint64_t v25;
  uint64_t v26;
  vImage_Buffer dest;
  uint64_t v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;

  v9 = a2[2];
  v10 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  v11 = a3[1];
  v12 = *a4;
  v13 = a4[1];
  v14 = a2[5];
  v15 = a2[4] & 1;
  v16 = v15 + a2[4];
  v28 = *a3 + 2 * v16 + v14 * *a4;
  v29 = v10;
  v17 = *(_DWORD *)(a1 + 296);
  v18 = *a7;
  v19 = *a8;
  v30 = v9 - v15;
  v31 = v12;
  v23 = v11 + 2 * v16 + v14 * v13;
  v24 = v10;
  v25 = v9 - v15;
  v26 = v13;
  dest.data = (void *)(v18 + 4 * (*(_QWORD *)(a6 + 32) + v15) + *(_QWORD *)(a6 + 40) * v19);
  dest.height = v10;
  dest.width = v9 - v15;
  dest.rowBytes = v19;
  v20 = (const vImage_Buffer *)(a1 + 256);
  result = vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
  if (!result)
    return vImageConvert_XRGB2101010ToARGB8888(v20, 0xFFu, &dest, 384, 895, permuteMap, v17);
  return result;
}

void vt_VImage_Cleanup_xw22_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_xw22_32ARGB(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  vImagePixelCount v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  vImage_Flags v17;
  uint64_t v18;
  size_t v19;
  const vImage_Buffer *v20;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v23;
  vImagePixelCount v24;
  uint64_t v25;
  uint64_t v26;
  vImage_Buffer dest;
  uint64_t v28;
  vImagePixelCount v29;
  uint64_t v30;
  uint64_t v31;

  v9 = a2[2];
  v10 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  v11 = a3[1];
  v12 = *a4;
  v13 = a4[1];
  v14 = a2[5];
  v15 = a2[4] & 1;
  v16 = v15 + a2[4];
  v28 = *a3 + 2 * v16 + v14 * *a4;
  v29 = v10;
  v17 = *(_DWORD *)(a1 + 296);
  v18 = *a7;
  v19 = *a8;
  v30 = v9 - v15;
  v31 = v12;
  v23 = v11 + 2 * v16 + v14 * v13;
  v24 = v10;
  v25 = v9 - v15;
  v26 = v13;
  dest.data = (void *)(v18 + 4 * (*(_QWORD *)(a6 + 32) + v15) + *(_QWORD *)(a6 + 40) * v19);
  dest.height = v10;
  dest.width = v9 - v15;
  dest.rowBytes = v19;
  v20 = (const vImage_Buffer *)(a1 + 256);
  result = vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
  if (!result)
    return vImageConvert_XRGB2101010ToARGB8888(v20, 0xFFu, &dest, 384, 895, permuteMap, v17);
  return result;
}

void vt_VImage_Cleanup_xw22_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_xw22_w30r()
{
  return vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xw22_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_xw20_32BGRA(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  vImagePixelCount v26;
  vImagePixelCount v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const vImage_Buffer *v31;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v34;
  vImagePixelCount v35;
  vImagePixelCount v36;
  uint64_t v37;
  vImage_Buffer dest;
  uint64_t v39;
  vImagePixelCount v40;
  vImagePixelCount v41;
  uint64_t v42;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  v12 = *a3;
  v13 = a3[1];
  v14 = *a4;
  v15 = a4[1];
  v16 = *a7;
  v17 = *a8;
  v18 = a2[4];
  v19 = a2[5];
  v20 = v19 & 1;
  v21 = v18 & 1;
  v22 = v21 + v18;
  v23 = __OFADD__(v20, v19);
  v24 = v20 + v19;
  v25 = v12 + 2 * v22 + v24 * *a4;
  v26 = v9 - v21;
  v41 = v26;
  v42 = v14;
  v27 = v10 - v20;
  v39 = v25;
  v40 = v27;
  v28 = v13 + 2 * v22;
  if (v24 < 0 != v23)
    v29 = v24 + 1;
  else
    v29 = v24;
  v36 = v26;
  v37 = v15;
  v34 = v28 + (v29 >> 1) * v15;
  v35 = v27;
  v30 = (void *)(v16 + 4 * (*(_QWORD *)(a6 + 32) + v21) + (*(_QWORD *)(a6 + 40) + v20) * v17);
  dest.width = v26;
  dest.rowBytes = v17;
  dest.data = v30;
  dest.height = v27;
  v31 = (const vImage_Buffer *)(a1 + 256);
  result = vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
  if (!result)
    return vImageConvert_XRGB2101010ToARGB8888(v31, 0xFFu, &dest, 384, 895, permuteMap, v11);
  return result;
}

void vt_VImage_Cleanup_xw20_32BGRA(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_xw20_32ARGB(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  vImage_Flags v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  vImagePixelCount v26;
  vImagePixelCount v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const vImage_Buffer *v31;
  vImage_Error result;
  uint8_t permuteMap[4];
  uint64_t v34;
  vImagePixelCount v35;
  vImagePixelCount v36;
  uint64_t v37;
  vImage_Buffer dest;
  uint64_t v39;
  vImagePixelCount v40;
  vImagePixelCount v41;
  uint64_t v42;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  v12 = *a3;
  v13 = a3[1];
  v14 = *a4;
  v15 = a4[1];
  v16 = *a7;
  v17 = *a8;
  v18 = a2[4];
  v19 = a2[5];
  v20 = v19 & 1;
  v21 = v18 & 1;
  v22 = v21 + v18;
  v23 = __OFADD__(v20, v19);
  v24 = v20 + v19;
  v25 = v12 + 2 * v22 + v24 * *a4;
  v26 = v9 - v21;
  v41 = v26;
  v42 = v14;
  v27 = v10 - v20;
  v39 = v25;
  v40 = v27;
  v28 = v13 + 2 * v22;
  if (v24 < 0 != v23)
    v29 = v24 + 1;
  else
    v29 = v24;
  v36 = v26;
  v37 = v15;
  v34 = v28 + (v29 >> 1) * v15;
  v35 = v27;
  v30 = (void *)(v16 + 4 * (*(_QWORD *)(a6 + 32) + v21) + (*(_QWORD *)(a6 + 40) + v20) * v17);
  dest.width = v26;
  dest.rowBytes = v17;
  dest.data = v30;
  dest.height = v27;
  v31 = (const vImage_Buffer *)(a1 + 256);
  result = vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
  if (!result)
    return vImageConvert_XRGB2101010ToARGB8888(v31, 0xFFu, &dest, 384, 895, permuteMap, v11);
  return result;
}

void vt_VImage_Cleanup_xw20_32ARGB(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vt_VImage_Copy_xw20_w30r()
{
  return vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xw20_w30r(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t vtPixelTransferSession_BuildChain(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  __CVBuffer *v4;
  OSType PixelFormatType;
  OSType v7;
  CFTypeRef v8;
  CFTypeRef v9;
  const void *v10;
  const void *v11;
  void (*v12)(_QWORD);
  __IOSurface *IOSurface;
  __IOSurface *v14;
  CFDictionaryRef v15;
  CFDictionaryRef v16;
  CFDictionaryRef v17;
  const __CFAllocator **v18;
  uint64_t MutableCopy;
  const void **v20;
  const __CFDictionary *v21;
  const __CFAllocator *v22;
  __CFDictionary *Mutable;
  const void *v24;
  const void *v25;
  const void *v26;
  const __CFAllocator *v27;
  const __CFDictionary *v28;
  const void **v29;
  const void **v30;
  const __CFDictionary *v31;
  const void **v32;
  const void **v33;
  const void *v34;
  char v35;
  const __CFDictionary *v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  BOOL v39;
  CFStringRef *v40;
  const void *v41;
  const void *v42;
  CGColorSpace *v43;
  CFTypeRef v44;
  const void *v45;
  const void *v46;
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  __CVBuffer *v51;
  CFTypeRef v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  const __CFDictionary *v56;
  __CFDictionary *v57;
  const __CFDictionary *v58;
  const void *v59;
  CFTypeRef v60;
  BOOL v61;
  _BOOL4 v62;
  CGColorSpace *v63;
  CGColorSpace *v64;
  BOOL IsHDR;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef v68;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  void *v74;
  __CFDictionary *v75;
  __CFDictionary *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const __CFDictionary *v80;
  const void *v81;
  CFTypeRef v82;
  CFTypeRef v83;
  CFTypeRef v84;
  CFTypeRef v85;
  uint64_t v87;
  void (*v88)(_QWORD);
  const __CFAllocator *allocator;
  void *v90;
  void *v91;
  const __CFString *keya;
  CFStringRef key;
  CFTypeRef v94;
  const void **v95;
  const __CFDictionary *v96;
  const void *v97;
  __CVBuffer *buffer;
  _BOOL4 v99;
  _BOOL4 theDict;
  OSType pixelFormat;
  __CVBuffer *pixelBuffera;
  OSType v103;
  CFDictionaryRef theAttachments;
  CFDictionaryRef v105;
  CFTypeRef v106;
  CFTypeRef v107;
  void *value;
  void *v109;
  void *v110;
  const void *v111;
  const void *v112[5];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  v4 = pixelBuffer;
  v119 = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v7 = CVPixelBufferGetPixelFormatType(a3);
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v90 = (void *)*MEMORY[0x1E0CA8D50];
  v8 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  v91 = (void *)*MEMORY[0x1E0CA8E68];
  v9 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
  CVPixelBufferGetWidth(v4);
  CVPixelBufferGetHeight(v4);
  CVPixelBufferGetWidth(a3);
  CVPixelBufferGetHeight(a3);
  v112[3] = 0;
  v112[4] = 0;
  memset((char *)&v112[1] + 7, 0, 9);
  v111 = 0;
  v112[0] = 0;
  v110 = 0;
  v109 = 0;
  value = 0;
  v107 = 0;
  v106 = 0;
  v105 = 0;
  theAttachments = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  checkIOSurfaceProtectionOptions(v4);
  pixelBuffera = a3;
  checkIOSurfaceProtectionOptions(a3);
  *(_BYTE *)(a1 + 1137) = 0;
  v103 = PixelFormatType;
  *(_DWORD *)(a1 + 580) = PixelFormatType;
  *(_DWORD *)(a1 + 584) = v7;
  v10 = *(const void **)(a1 + 688);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 688) = 0;
  }
  v11 = *(const void **)(a1 + 224);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v12 = *(void (**)(_QWORD))(a1 + 720);
  if (v12)
  {
    v12(*(_QWORD *)(a1 + 712));
    *(_OWORD *)(a1 + 712) = 0u;
  }
  IOSurface = CVPixelBufferGetIOSurface(v4);
  v14 = CVPixelBufferGetIOSurface(a3);
  if (IOSurface)
    IOSurfaceGetID(IOSurface);
  pixelFormat = v7;
  if (v14)
    IOSurfaceGetID(v14);
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 588) = IOSurface != 0;
  *(_BYTE *)(a1 + 589) = v14 != 0;
  *(_QWORD *)(a1 + 176) = 0;
  v95 = (const void **)(a1 + 168);
  *(_BYTE *)(a1 + 184) = 0;
  v15 = CVBufferCopyAttachments(pixelBuffera, kCVAttachmentMode_ShouldPropagate);
  v16 = CVBufferCopyAttachments(pixelBuffera, kCVAttachmentMode_ShouldNotPropagate);
  v17 = v16;
  v18 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v15)
  {
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (v17)
      goto LABEL_13;
  }
  else
  {
    MutableCopy = 0;
    if (v16)
    {
LABEL_13:
      v96 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (!v15)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v96 = 0;
  if (v15)
LABEL_14:
    CFRelease(v15);
LABEL_15:
  if (v17)
    CFRelease(v17);
  v20 = (const void **)MEMORY[0x1E0CA8E40];
  if ((!*(_QWORD *)(a1 + 1080) || !*(_QWORD *)(a1 + 1088)) && !*(_QWORD *)(a1 + 1008))
  {
    CVBufferPropagateAttachments(v4, pixelBuffera);
    goto LABEL_37;
  }
  v21 = CVBufferCopyAttachments(v4, kCVAttachmentMode_ShouldPropagate);
  v22 = *v18;
  if (v21)
  {
    Mutable = CFDictionaryCreateMutableCopy(v22, 0, v21);
    CFDictionaryRemoveValue(Mutable, (const void *)*MEMORY[0x1E0CA8CD8]);
    CFDictionaryRemoveValue(Mutable, *v20);
    CFDictionaryRemoveValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68]);
    CFDictionaryRemoveValue(Mutable, (const void *)*MEMORY[0x1E0CA8E98]);
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  v24 = *(const void **)(a1 + 1008);
  if (v24)
  {
    v25 = *v20;
  }
  else
  {
    v26 = *(const void **)(a1 + 1080);
    if (!v26 || !*(_QWORD *)(a1 + 1088))
      goto LABEL_29;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], v26);
    v25 = (const void *)*MEMORY[0x1E0CA8E98];
    v24 = *(const void **)(a1 + 1088);
  }
  CFDictionarySetValue(Mutable, v25, v24);
LABEL_29:
  CVBufferSetAttachments(pixelBuffera, Mutable, kCVAttachmentMode_ShouldPropagate);
  if (v21)
    CFRelease(v21);
  if (Mutable)
    CFRelease(Mutable);
LABEL_37:
  CVPixelBufferGetIOSurface(v4);
  v97 = v8;
  buffer = v4;
  if (!IOSurfaceGetProtectionOptions()
    || (CVPixelBufferGetIOSurface(pixelBuffera), IOSurfaceSupportsProtectionOptions()))
  {
    v27 = *v18;
    v28 = CVPixelFormatDescriptionCreateWithPixelFormatType(v27, pixelFormat);
    v29 = (const void **)MEMORY[0x1E0CA9188];
    v30 = (const void **)MEMORY[0x1E0CA9178];
    if (v28)
    {
      v31 = v28;
      CFDictionaryGetValueIfPresent(v28, (const void *)*MEMORY[0x1E0CA9168], (const void **)&value);
      v32 = v29;
      CFDictionaryGetValueIfPresent(v31, *v29, (const void **)&v110);
      v33 = v30;
      CFDictionaryGetValueIfPresent(v31, *v30, (const void **)&v109);
      FigCFDictionaryGetInt32IfPresent();
      v34 = (const void *)*MEMORY[0x1E0C9AE50];
      if (value && CFEqual(value, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
      {
        v35 = 1;
LABEL_46:
        *(_BYTE *)(a1 + 1138) = v35;
        theDict = FigCFEqual() || FigCFEqual();
        allocator = v27;
        v37 = CVPixelFormatDescriptionCreateWithPixelFormatType(v27, v103);
        v38 = v37;
        if (v37)
        {
          CFDictionaryGetValueIfPresent(v37, (const void *)*MEMORY[0x1E0CA9168], (const void **)&value);
          CFDictionaryGetValueIfPresent(v38, *v32, (const void **)&v110);
          CFDictionaryGetValueIfPresent(v38, *v33, (const void **)&v109);
          FigCFDictionaryGetInt32IfPresent();
        }
        v39 = value && CFEqual(value, v34);
        v40 = (CFStringRef *)MEMORY[0x1E0CA8E40];
        *(_BYTE *)(a1 + 1139) = v39;
        v99 = FigCFEqual() || FigCFEqual();
        v41 = *(const void **)(a1 + 192);
        if (v41)
        {
          CFRelease(v41);
          *(_QWORD *)(a1 + 192) = 0;
        }
        v42 = *(const void **)(a1 + 200);
        if (v42)
        {
          CFRelease(v42);
          *(_QWORD *)(a1 + 200) = 0;
        }
        keya = (const __CFString *)*MEMORY[0x1E0CA8CD8];
        v43 = (CGColorSpace *)CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
        v44 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
        VTCreateYCbCrCFStringsAndProvideDefaultsFromColorSpaceHint((unint64_t)v44, v99, *(_QWORD *)(a1 + 1072), theDict, v43, 0, v112, &v111);
        if (v43)
          CFRelease(v43);
        if (v44)
          CFRelease(v44);
        if (*(_BYTE *)(a1 + 1188))
        {
          v45 = *(const void **)(a1 + 1080);
          if (v45)
          {
            CFRelease(v45);
            *(_QWORD *)(a1 + 1080) = 0;
          }
          v46 = *(const void **)(a1 + 1088);
          if (v46)
          {
            CFRelease(v46);
            *(_QWORD *)(a1 + 1088) = 0;
          }
        }
        *(_BYTE *)(a1 + 1188) = 0;
        if ((pixelFormat == 1999843442 || pixelFormat == 1647534392)
          && !*(_QWORD *)(a1 + 1008)
          && !*(_QWORD *)(a1 + 1080)
          && !*(_QWORD *)(a1 + 1088))
        {
          *(_BYTE *)(a1 + 1188) = 1;
          v47 = (CFTypeRef)*MEMORY[0x1E0CA8D88];
          if (*MEMORY[0x1E0CA8D88])
            v47 = CFRetain(v47);
          *(_QWORD *)(a1 + 1080) = v47;
          v48 = (CFTypeRef)*MEMORY[0x1E0CA8EB0];
          if (*MEMORY[0x1E0CA8EB0])
            v48 = CFRetain(v48);
          *(_QWORD *)(a1 + 1088) = v48;
        }
        if ((v103 == 1651521076 || v103 == 1647392369)
          && (v49 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA90D8], 0)) != 0)
        {
          CFRelease(v49);
          VTCreateColorAttachments(0, 0, (const void *)*MEMORY[0x1E0CA8D80], (const void *)*MEMORY[0x1E0CA8EB8], 0, (const void *)*MEMORY[0x1E0CA8F00], v103, 0, *(_QWORD *)(a1 + 1008), *(const void **)(a1 + 1080), *(const void **)(a1 + 1088), 0, v111, pixelFormat, *(_BYTE *)(a1 + 1120), &v105, &theAttachments);
        }
        else
        {
          v50 = CVBufferCopyAttachment(v4, keya, 0);
          v51 = v4;
          v52 = CVBufferCopyAttachment(v4, *v40, 0);
          v53 = CVBufferCopyAttachment(v51, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
          v54 = CVBufferCopyAttachment(v51, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
          v55 = CVBufferCopyAttachment(v51, (CFStringRef)*MEMORY[0x1E0CA8E48], 0);
          VTCreateColorAttachments((unint64_t)v50, (unint64_t)v52, v53, v54, v55, v112[0], v103, 0, *(_QWORD *)(a1 + 1008), *(const void **)(a1 + 1080), *(const void **)(a1 + 1088), 0, v111, pixelFormat, *(_BYTE *)(a1 + 1120), &v105, &theAttachments);
          if (v50)
            CFRelease(v50);
          if (v52)
            CFRelease(v52);
          if (v53)
            CFRelease(v53);
          v4 = buffer;
          if (v54)
            CFRelease(v54);
          if (v55)
            CFRelease(v55);
        }
        VTCreateColorSpacesFromDictionaries(v105, theAttachments, &v107, &v106);
        CVBufferSetAttachments(pixelBuffera, theAttachments, kCVAttachmentMode_ShouldPropagate);
        v56 = theAttachments;
        v57 = *(__CFDictionary **)(a1 + 776);
        if (!v57)
        {
          v57 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(a1 + 776) = v57;
        }
        VTConvertToSessionPropertiesFromCVProperties(v56, v57);
        VTRequiresMatrixChange((uint64_t)v112[0], v99, (uint64_t)v111, theDict);
        if (v107 && v106)
          FigCFEqual();
        if (!v4 || (v58 = theAttachments) == 0)
LABEL_115:
          FigRegisterIOSurfacePixelTransferCapability();
        v59 = (const void *)*MEMORY[0x1E0CA8E98];
        v60 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
        CFDictionaryGetValue(v58, v59);
        if (FigCFEqual())
          v61 = 1;
        else
          v61 = FigCFEqual() != 0;
        if (FigCFEqual())
        {
          v62 = 1;
          if (v61)
            goto LABEL_112;
        }
        else
        {
          v62 = FigCFEqual() != 0;
          if (v61)
          {
LABEL_112:
            FigCFEqual();
LABEL_113:
            if (v60)
              CFRelease(v60);
            goto LABEL_115;
          }
        }
        v63 = (CGColorSpace *)CVBufferCopyAttachment(buffer, keya, 0);
        if (!v63 || (v64 = v63, IsHDR = CGColorSpaceIsHDR(v63), CFRelease(v64), !IsHDR))
        {
          if (!v62)
            goto LABEL_113;
        }
        goto LABEL_112;
      }
    }
    else
    {
      v32 = (const void **)MEMORY[0x1E0CA9188];
      v33 = (const void **)MEMORY[0x1E0CA9178];
      v34 = (const void *)*MEMORY[0x1E0C9AE50];
    }
    v35 = 0;
    goto LABEL_46;
  }
  v36 = (const __CFDictionary *)MutableCopy;
  v66 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
  v94 = CVBufferCopyAttachment(v4, (CFStringRef)*v20, 0);
  key = (CFStringRef)CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  v67 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  v68 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E0CA8E48], 0);
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v66)
    CFRelease(v66);
  v70 = v96;
  if (v94)
    CFRelease(v94);
  if (key)
    CFRelease(key);
  if (v67)
    CFRelease(v67);
  if (v68)
    CFRelease(v68);
  CVBufferRemoveAllAttachments(pixelBuffera);
  CVBufferSetAttachments(pixelBuffera, v36, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachments(pixelBuffera, v96, kCVAttachmentMode_ShouldNotPropagate);
  if (*(_BYTE *)(a1 + 568) || *(_BYTE *)(a1 + 211) || *(_DWORD *)(a1 + 1016))
  {
    *(_DWORD *)(a1 + 572) = CVPixelBufferGetPixelFormatType(buffer);
    v71 = v117;
    *(_OWORD *)(a1 + 592) = v116;
    *(_OWORD *)(a1 + 608) = v71;
    *(_OWORD *)(a1 + 624) = v118;
    *(_DWORD *)(a1 + 576) = CVPixelBufferGetPixelFormatType(pixelBuffera);
    v72 = v114;
    *(_OWORD *)(a1 + 640) = v113;
    *(_OWORD *)(a1 + 656) = v72;
    *(_OWORD *)(a1 + 672) = v115;
    *(_BYTE *)(a1 + 744) = 0;
  }
  else
  {
    v87 = *(_QWORD *)(a1 + 752);
    if (v87)
    {
      v88 = *(void (**)(_QWORD))(v87 + 64);
      if (v88)
        v88(*(_QWORD *)(a1 + 760));
      *(_QWORD *)(a1 + 752) = 0;
      *(_QWORD *)(a1 + 760) = 0;
    }
  }
  v73 = v105;
  if (v105)
    v73 = (void *)CFRetain(v105);
  *(_QWORD *)(a1 + 1104) = v73;
  v74 = theAttachments;
  if (theAttachments)
    v74 = (void *)CFRetain(theAttachments);
  *(_QWORD *)(a1 + 1096) = v74;
  v75 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v75)
  {
    v76 = v75;
    if (*v95)
      CFDictionarySetValue(v75, (const void *)*MEMORY[0x1E0CA8D28], *v95);
    v77 = *(const void **)(a1 + 176);
    if (v77)
    {
      CFDictionarySetValue(v76, (const void *)*MEMORY[0x1E0CA8CE8], v77);
      CFDictionarySetValue(v76, (const void *)*MEMORY[0x1E0CA8CE0], *(const void **)(a1 + 176));
    }
    v78 = *(const void **)(a1 + 192);
    if (v78)
      CFDictionarySetValue(v76, v90, v78);
    v79 = *(const void **)(a1 + 200);
    if (v79)
      CFDictionarySetValue(v76, v91, v79);
    if (*(_BYTE *)(a1 + 1138) && !*(_BYTE *)(a1 + 1139))
      CFDictionarySetValue(v76, (const void *)*MEMORY[0x1E0CA8CA8], (const void *)*MEMORY[0x1E0C9AE50]);
    v80 = *(const __CFDictionary **)(a1 + 1096);
    if (v80)
    {
      CFDictionaryGetValue(v80, (const void *)*MEMORY[0x1E0CA8CD8]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E0CA8E40]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E0CA8D68]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E0CA8E98]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E0CA8EE8]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E0CA8E90]);
      v70 = v96;
      FigCFDictionarySetValue();
    }
    v81 = *(const void **)(a1 + 1112);
    if (v81)
      CFRelease(v81);
    *(_QWORD *)(a1 + 1112) = v76;
  }
  *(_QWORD *)(a1 + 952) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  *(_QWORD *)(a1 + 960) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  *(_QWORD *)(a1 + 968) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E48], 0);
  *(_QWORD *)(a1 + 928) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E40], 0);
  *(_QWORD *)(a1 + 944) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
  v82 = *(CFTypeRef *)(a1 + 1008);
  if (v82)
    v82 = CFRetain(v82);
  *(_QWORD *)(a1 + 936) = v82;
  v83 = *(CFTypeRef *)(a1 + 1080);
  if (v83)
    v83 = CFRetain(v83);
  *(_QWORD *)(a1 + 984) = v83;
  v84 = *(CFTypeRef *)(a1 + 1088);
  if (v84)
    v84 = CFRetain(v84);
  *(_QWORD *)(a1 + 992) = v84;
  *(_QWORD *)(a1 + 976) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
  v85 = *(CFTypeRef *)(a1 + 1072);
  if (v85)
    v85 = CFRetain(v85);
  *(_QWORD *)(a1 + 1000) = v85;
  if (v112[0])
    CFRelease(v112[0]);
  if (v111)
    CFRelease(v111);
  if (v107)
    CFRelease(v107);
  if (v106)
    CFRelease(v106);
  if (v105)
    CFRelease(v105);
  if (theAttachments)
    CFRelease(theAttachments);
  if (v36)
    CFRelease(v36);
  if (v70)
    CFRelease(v70);
  ++*(_QWORD *)(a1 + 1224);
  if (v97)
    CFRelease(v97);
  if (v9)
    CFRelease(v9);
  return 4294954391;
}

uint64_t vtPixelTransferSessionBuildChainFromBasicTransfer(uint64_t a1)
{
  size_t v2;
  size_t v3;
  __CVBuffer *v4;
  uint64_t PixelFormatType;
  size_t Width;
  size_t Height;
  uint64_t v8;
  uint64_t appended;
  uint64_t v10;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  v2 = *(_QWORD *)(a1 + 256);
  v3 = *(_QWORD *)(a1 + 264);
  v4 = *(__CVBuffer **)(a1 + 232);
  if (v4)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(v4);
    if (!v2 || (Width = v2, (Height = v3) == 0))
    {
      Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 232));
      Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 232));
    }
    VTPixelTransferChainCreatePixelBufferPoolAttributes(PixelFormatType, Width, Height, (CFMutableDictionaryRef *)&cf);
  }
  else
  {
    LODWORD(PixelFormatType) = 0;
  }
  v8 = *(_QWORD *)(a1 + 752);
  if (v8 && *(_QWORD *)(v8 + 56))
  {
    if (*(_BYTE *)(a1 + 768))
    {
LABEL_10:
      appended = vtPixelTransferChainAppendDynamicNode();
LABEL_21:
      v10 = appended;
      goto LABEL_23;
    }
    if ((*(_QWORD *)(a1 + 696) || *(_QWORD *)(a1 + 704)) && !*(_QWORD *)(a1 + 216))
    {
      if (*(_DWORD *)(a1 + 580) == (_DWORD)PixelFormatType)
      {
        v10 = vtPixelTransferChainAppendDynamicNode();
        if (!(_DWORD)v10)
        {
          appended = VTPixelTransferChainAppendSoftwareNode();
          goto LABEL_21;
        }
        goto LABEL_23;
      }
      v12 = VTPixelTransferChainAppendSoftwareNode();
      goto LABEL_49;
    }
  }
  if (*(_QWORD *)(a1 + 696))
  {
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_22;
LABEL_19:
    v10 = VTPixelTransferChainAppendSoftwareNode();
    if ((_DWORD)v10)
      goto LABEL_23;
    goto LABEL_20;
  }
  if (*(_QWORD *)(a1 + 704))
  {
    if (!*(_QWORD *)(a1 + 216))
    {
LABEL_22:
      VTPixelTransferChainAppendSoftwareNode();
      v10 = 0;
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a1 + 1184) && *(_QWORD *)(a1 + 216))
  {
LABEL_20:
    appended = VTPixelTransferChainAppendScalerNode();
    goto LABEL_21;
  }
  if (!*(_BYTE *)(a1 + 1184))
  {
    v10 = 4294954391;
    goto LABEL_23;
  }
  if (!v8 || !*(_QWORD *)(v8 + 56))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      if (*(_QWORD *)(a1 + 256) != *(_QWORD *)(a1 + 656) || *(_QWORD *)(a1 + 264) != *(_QWORD *)(a1 + 664))
      {
        v10 = VTPixelTransferChainAppendNode(*(_QWORD *)(a1 + 32), *(const void **)(a1 + 1160));
        if (!(_DWORD)v10)
          VTPixelTransferChainAppendScalerNode();
        goto LABEL_23;
      }
      VTPixelTransferChainAppendScalerNode();
    }
LABEL_41:
    appended = VTPixelTransferChainAppendNode(*(_QWORD *)(a1 + 32), *(const void **)(a1 + 1160));
    goto LABEL_21;
  }
  if (*(_DWORD *)(a1 + 572) != (_DWORD)PixelFormatType && *(_DWORD *)(a1 + 580) != (_DWORD)PixelFormatType)
  {
    v12 = VTPixelTransferChainAppendNode(*(_QWORD *)(a1 + 32), *(const void **)(a1 + 1160));
LABEL_49:
    v10 = v12;
    if (!(_DWORD)v12)
      goto LABEL_10;
    goto LABEL_23;
  }
  v10 = vtPixelTransferChainAppendDynamicNode();
  if (!(_DWORD)v10)
    goto LABEL_41;
LABEL_23:
  if (cf)
    CFRelease(cf);
  return v10;
}

vImage_Error vtVImageConverterProc(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3)
{
  vImagePixelCount Width;
  vImagePixelCount Height;
  size_t BytesPerRow;
  size_t v9;
  uint64_t v10;
  vImage_Error v11;
  vImage_Error v12;
  __CVBuffer *v13;
  CVPixelBufferLockFlags v14;
  vImage_Buffer v16;
  vImage_Buffer srcs;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v9 = CVPixelBufferGetBytesPerRow(a2);
  v10 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if ((_DWORD)v10)
    return v10;
  v11 = CVPixelBufferLockBaseAddress(a2, 0);
  if ((_DWORD)v11)
  {
    v12 = v11;
    v13 = a1;
    v14 = 1;
  }
  else
  {
    srcs.data = CVPixelBufferGetBaseAddress(a1);
    srcs.height = Height;
    srcs.width = Width;
    srcs.rowBytes = BytesPerRow;
    v16.data = CVPixelBufferGetBaseAddress(a2);
    v16.height = Height;
    v16.width = Width;
    v16.rowBytes = v9;
    v12 = vImageConvert_AnyToAny(*(const vImageConverterRef *)(a3 + 8), &srcs, &v16, 0, 0);
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    v13 = a2;
    v14 = 0;
  }
  CVPixelBufferUnlockBaseAddress(v13, v14);
  return v12;
}

IOSurfaceRef checkIOSurfaceProtectionOptions(__CVBuffer *a1)
{
  IOSurfaceRef result;

  result = CVPixelBufferGetIOSurface(a1);
  if (result)
    return (IOSurfaceRef)(IOSurfaceGetProtectionOptions() != 0);
  return result;
}

uint64_t vtCreateDynamicSession(int64x2_t *a1, CVPixelBufferRef pixelBuffer, OSType a3, int64x2_t *a4, CVPixelBufferRef a5, OSType a6, int64x2_t *a7, int a8, char a9, char a10, char a11, char a12, char *a13, _BYTE *a14, _BYTE *a15)
{
  unint64_t v18;
  BOOL v23;
  int v24;
  __CVBuffer *v25;
  __CVBuffer *v26;
  unint64_t v27;
  __CVBuffer *v28;
  __CVBuffer *v29;
  uint64_t v30;
  CVBufferRef v31;
  const __CFDictionary *v32;
  __CVBuffer *v33;
  CVBufferRef v34;
  const __CFDictionary *v35;
  __CVBuffer *v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unsigned int (*v46)(unint64_t, CFTypeRef);
  void (*v47)(uint64_t);
  uint64_t *v48;
  __CVBuffer *v49;
  int64x2_t *v50;
  void (*v51)(uint64_t);
  char v52;
  uint64_t v53;
  const void *v54;
  char v55;
  int64x2_t *v57;
  int v58;
  int v59;
  OSType PixelFormatType;
  uint64_t v61;
  unsigned int (*v62)(unint64_t, CVBufferRef);
  unsigned int (*v63)(CVBufferRef, CFTypeRef);
  unsigned int (*v64)(uint64_t, uint64_t, unint64_t, int64x2_t *, CFTypeRef, int64x2_t *);
  int64x2_t v65;
  int64x2_t v66;
  int64_t Height;
  int64x2_t v68;
  float64x2_t v69;
  const void *v70;
  CVBufferRef v71;
  int64x2_t v72;
  const void *v73;
  int64x2_t *v74;
  int64x2_t *v75;
  int v77;
  uint64_t v78;
  uint64_t v80;
  __CVBuffer *pixelBuffera;
  int64x2_t *v82;
  CFTypeRef v83;
  uint64_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  CVBufferRef buffer;
  int64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  int64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;

  v18 = (unint64_t)a5;
  buffer = 0;
  v86 = 0u;
  v87 = 0u;
  v85 = 0u;
  if (pixelBuffer)
    v23 = a5 == 0;
  else
    v23 = 1;
  v24 = v23;
  v84 = 0;
  if (!pixelBuffer && a4)
  {
    if (CVPixelBufferGetPixelFormatType(a5) == a3)
    {
      if (!v18)
      {
        v27 = 0;
        v33 = 0;
LABEL_43:
        pixelBuffera = v33;
        v37 = a4[1];
        v85 = *a4;
        v86 = v37;
        v38 = a4[2];
LABEL_48:
        v87 = v38;
        v77 = 1;
        a8 = 1;
        goto LABEL_49;
      }
      v25 = (__CVBuffer *)CFRetain((CFTypeRef)v18);
      v26 = v25;
      if (v25)
        v27 = (unint64_t)CFRetain(v25);
      else
        v27 = 0;
LABEL_42:
      v18 = (unint64_t)CFRetain(a5);
      v33 = v26;
      goto LABEL_43;
    }
    v30 = vtCreateIntermediatePixelBuffer((__CVBuffer *)v18, a3, a4, 4, &buffer);
    if (!(_DWORD)v30)
    {
      v31 = buffer;
      if (buffer
        && ((v32 = (const __CFDictionary *)a1[69].i64[0]) == 0
         || (CVBufferSetAttachments(buffer, v32, kCVAttachmentMode_ShouldPropagate), (v31 = buffer) != 0)))
      {
        v27 = (unint64_t)CFRetain(v31);
      }
      else
      {
        v27 = 0;
      }
      v26 = 0;
      v33 = 0;
      v18 = 0;
      if (!a5)
        goto LABEL_43;
      goto LABEL_42;
    }
LABEL_140:
    v53 = v30;
    v52 = 0;
    v43 = 0;
    goto LABEL_94;
  }
  if (!a5 && a7)
  {
    if (CVPixelBufferGetPixelFormatType(pixelBuffer) == a6)
    {
      if (pixelBuffer)
      {
        v28 = (__CVBuffer *)CFRetain(pixelBuffer);
        v29 = v28;
        if (v28)
          v18 = (unint64_t)CFRetain(v28);
        else
          v18 = 0;
LABEL_46:
        v27 = (unint64_t)CFRetain(pixelBuffer);
        v36 = v29;
        goto LABEL_47;
      }
      v18 = 0;
      v36 = 0;
      v27 = 0;
    }
    else
    {
      v30 = vtCreateIntermediatePixelBuffer(pixelBuffer, a6, a7, 4, &buffer);
      if ((_DWORD)v30)
        goto LABEL_140;
      v34 = buffer;
      if (buffer
        && ((v35 = (const __CFDictionary *)a1[68].i64[1]) == 0
         || (CVBufferSetAttachments(buffer, v35, kCVAttachmentMode_ShouldPropagate), (v34 = buffer) != 0)))
      {
        v18 = (unint64_t)CFRetain(v34);
      }
      else
      {
        v18 = 0;
      }
      v29 = 0;
      v36 = 0;
      v27 = 0;
      if (pixelBuffer)
        goto LABEL_46;
    }
LABEL_47:
    pixelBuffera = v36;
    v39 = a7[1];
    v85 = *a7;
    v86 = v39;
    v38 = a7[2];
    goto LABEL_48;
  }
  if (!pixelBuffer)
  {
    v27 = 0;
    if (a5)
      goto LABEL_26;
LABEL_37:
    pixelBuffera = 0;
    v77 = 1;
    goto LABEL_49;
  }
  v27 = (unint64_t)CFRetain(pixelBuffer);
  if (!v18)
    goto LABEL_37;
LABEL_26:
  v77 = v24;
  v18 = (unint64_t)CFRetain((CFTypeRef)v18);
  pixelBuffera = 0;
LABEL_49:
  v40 = a4[1];
  v92 = *a4;
  v74 = a7;
  v75 = a4;
  v93 = vcvtq_f64_s64(a4[2]);
  v94 = vcvtq_f64_s64(v40);
  v41 = a7[1];
  v42 = vcvtq_f64_s64(a7[2]);
  v89 = *a7;
  v90 = v42;
  v80 = a1[48].i64[1];
  v82 = a1 + 47;
  v83 = (CFTypeRef)v18;
  v43 = a1[47].i64[0];
  if (v43)
    v44 = a1[47].i64[0];
  else
    v44 = gVTPixelTransferServiceList;
  v91 = vcvtq_f64_s64(v41);
  if (!(v18 | v27) || !v44)
  {
LABEL_81:
    v43 = 0;
    v49 = pixelBuffera;
    v50 = a1 + 47;
    goto LABEL_82;
  }
  v45 = v43 != 0;
  v78 = *MEMORY[0x1E0C9AE00];
  while (1)
  {
    if (!vtPixelTransferServiceNodeMatchesSourceAndDestinationPixelFormats((uint64_t *)v44, a3, a6)
      || a8 && (*(_BYTE *)(v44 + 32) & 1) == 0)
    {
      goto LABEL_75;
    }
    if (a9 && (*(_BYTE *)(v44 + 32) & 2) == 0)
      goto LABEL_75;
    if (a11 && (*(_BYTE *)(v44 + 32) & 0x10) == 0)
      goto LABEL_75;
    if (a12 && (*(_BYTE *)(v44 + 32) & 0x40) == 0)
      goto LABEL_75;
    if (!a10 && (*(_BYTE *)(v44 + 32) & 8) != 0)
      goto LABEL_75;
    v46 = *(unsigned int (**)(unint64_t, CFTypeRef))(v44 + 40);
    if (v46)
    {
      if (!v46(v27, v83))
        goto LABEL_75;
    }
    if (v43)
      break;
LABEL_73:
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unint64_t, int64x2_t *, CFTypeRef, int64x2_t *, uint64_t *))(v44 + 48))(v78, v80, v27, &v92, v83, &v89, &v84))
    {
      v43 = v44;
      v57 = a1;
      v50 = a1 + 47;
      goto LABEL_107;
    }
    FigSignalErrorAt();
LABEL_75:
    v48 = (uint64_t *)(v44 + 72);
    if (v45)
      v48 = &gVTPixelTransferServiceList;
    v44 = *v48;
    if (*v48)
    {
      if (v44 == v43)
        v44 = *(_QWORD *)(v43 + 72);
      v45 = 0;
      if (v44)
        continue;
    }
    goto LABEL_81;
  }
  if (v44 != v43)
  {
    v47 = *(void (**)(uint64_t))(v43 + 64);
    if (v47)
      v47(a1[47].i64[1]);
    v82->i64[0] = 0;
    a1[47].i64[1] = 0;
    goto LABEL_73;
  }
  v57 = a1;
  v84 = a1[47].i64[1];
  v50 = a1 + 47;
  v82->i64[0] = 0;
  a1[47].i64[1] = 0;
LABEL_107:
  v58 = v77;
  if (buffer)
    v59 = 0;
  else
    v59 = v77;
  v54 = v83;
  if (v59 != 1)
    goto LABEL_119;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffera);
  v61 = vtCreateIntermediatePixelBuffer(pixelBuffera, PixelFormatType, &v85, *(_DWORD *)(v43 + 32), &buffer);
  if ((_DWORD)v61)
  {
    v53 = v61;
    v52 = 0;
    v49 = pixelBuffera;
  }
  else if (pixelBuffer)
  {
    v58 = v77;
    if (a5)
      goto LABEL_123;
    v62 = *(unsigned int (**)(unint64_t, CVBufferRef))(v43 + 40);
    if (!v62)
      goto LABEL_123;
    v57 = a1;
    if (!v62(v27, buffer))
      goto LABEL_123;
LABEL_119:
    v64 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, int64x2_t *, CFTypeRef, int64x2_t *))(v43 + 56);
    if (v64)
    {
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      if (v75)
      {
        v65 = v75[1];
        v92 = *v75;
        v66 = v75[2];
        goto LABEL_122;
      }
      if (pixelBuffer)
      {
        v92.i64[0] = CVPixelBufferGetWidth(pixelBuffer);
        Height = CVPixelBufferGetHeight(pixelBuffer);
        v93 = 0uLL;
        v92.i64[1] = Height;
        v94.f64[0] = (double)v92.i64[0];
        v94.f64[1] = (double)Height;
        v64 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, int64x2_t *, CFTypeRef, int64x2_t *))(v43 + 56);
      }
      else
      {
        v65 = v86;
        v92 = v85;
        v66 = v87;
LABEL_122:
        v93 = vcvtq_f64_s64(v66);
        v94 = vcvtq_f64_s64(v65);
      }
      v49 = pixelBuffera;
      v68 = v74[1];
      v69 = vcvtq_f64_s64(v74[2]);
      v89 = *v74;
      v90 = v69;
      v91 = vcvtq_f64_s64(v68);
      if (v64(v84, v57[48].i64[1], v27, &v92, v83, &v89))
      {
        FigSignalErrorAt();
        goto LABEL_82;
      }
      if (a15)
        *a15 = 1;
    }
    v57[47].i64[0] = v43;
    v57[47].i64[1] = v84;
    v84 = 0;
    if (v58)
    {
      v57[48].i8[0] = 0;
      v70 = (const void *)v57[14].i64[1];
      v71 = buffer;
      v57[14].i64[1] = (uint64_t)buffer;
      v49 = pixelBuffera;
      if (v71)
        CFRetain(v71);
      if (v70)
        CFRelease(v70);
      v43 = 0;
      v53 = 0;
      v72 = v86;
      v57[15] = v85;
      v57[16] = v72;
      v57[17] = v87;
      v52 = 1;
    }
    else
    {
      v73 = (const void *)v57[14].i64[1];
      v49 = pixelBuffera;
      if (v73)
      {
        CFRelease(v73);
        v57[14].i64[1] = 0;
      }
      v43 = 0;
      v53 = 0;
      v52 = 1;
      v57[48].i8[0] = 1;
      v57[35].i8[8] = 1;
    }
  }
  else
  {
    v63 = *(unsigned int (**)(CVBufferRef, CFTypeRef))(v43 + 40);
    v58 = v77;
    if (v63 && v63(buffer, v83))
      goto LABEL_119;
LABEL_123:
    v49 = pixelBuffera;
LABEL_82:
    if (v50->i64[0])
    {
      v51 = *(void (**)(uint64_t))(v50->i64[0] + 64);
      if (v51)
        v51(a1[47].i64[1]);
      v52 = 0;
      v53 = 0;
      v50->i64[0] = 0;
      v50->i64[1] = 0;
    }
    else
    {
      v52 = 0;
      v53 = 0;
    }
    v54 = v83;
  }
  if (v27)
    CFRelease((CFTypeRef)v27);
  if (v54)
    CFRelease(v54);
  if (v49)
    CFRelease(v49);
LABEL_94:
  if (buffer)
    CFRelease(buffer);
  if (v43)
    (*(void (**)(uint64_t))(v43 + 64))(v84);
  if (a13)
    *a13 = v52;
  v55 = v52 ^ 1;
  if (!a14)
    v55 = 1;
  if ((v55 & 1) == 0)
    *a14 = 1;
  return v53;
}

uint64_t vtCanDynamicSession(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  BOOL i;
  int v17;
  unsigned int (*v18)(uint64_t, uint64_t);
  uint64_t *v19;
  uint64_t result;

  if (a9)
    v9 = a9;
  else
    v9 = gVTPixelTransferServiceList;
  if (!v9)
    return 0;
  for (i = a9 != 0; ; i = 0)
  {
    if (vtPixelTransferServiceNodeMatchesSourceAndDestinationPixelFormats((uint64_t *)v9, a2, a4))
    {
      v17 = *(_DWORD *)(v9 + 32);
      if ((v17 & 1) != 0
        && (!a5 || (v17 & 2) != 0)
        && (!a6 || (v17 & 0x10) != 0)
        && (!a7 || (v17 & 0x40) != 0)
        && (a8 || (v17 & 8) == 0))
      {
        v18 = *(unsigned int (**)(uint64_t, uint64_t))(v9 + 40);
        if (!v18 || v18(a1, a3))
          break;
      }
    }
    v19 = (uint64_t *)(v9 + 72);
    if (i)
      v19 = &gVTPixelTransferServiceList;
    v9 = *v19;
    if (!*v19)
      return 0;
    if (v9 == a9)
      v9 = *(_QWORD *)(a9 + 72);
    result = 0;
    if (!v9)
      return result;
  }
  return 1;
}

uint64_t vtPTSIsPixelBufferMetalCompliant(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t result;
  size_t PlaneCount;
  int RequiredAlignment;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  size_t v11;

  if (!pixelBuffer)
    return 0;
  result = (uint64_t)CVPixelBufferGetIOSurface(pixelBuffer);
  if (!result)
    return result;
  PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
  if ((vtPTSIsPixelBufferMetalCompliant_didCheck & 1) == 0)
  {
    RequiredAlignment = VTMetalTransferSessionGetRequiredAlignment(*(_QWORD *)(a1 + 1160), &vtPTSIsPixelBufferMetalCompliant_cachedMetalAlignment);
    vtPTSIsPixelBufferMetalCompliant_didCheck = 1;
    vtPTSIsPixelBufferMetalCompliant_alignmentValid = RequiredAlignment == 0;
  }
  CVPixelBufferGetPixelFormatType(pixelBuffer);
  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (DescriptionWithPixelFormatType)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]);
    if (Value)
    {
      v9 = Value;
      v10 = CFGetTypeID(Value);
      if (v10 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v9, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  if (!vtPTSIsPixelBufferMetalCompliant_alignmentValid)
    return 0;
  if (PlaneCount >= 2)
  {
    v11 = 0;
    while (!(CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v11)
            % vtPTSIsPixelBufferMetalCompliant_cachedMetalAlignment))
    {
      if (PlaneCount == ++v11)
        return 1;
    }
    return 0;
  }
  return CVPixelBufferGetBytesPerRow(pixelBuffer) % vtPTSIsPixelBufferMetalCompliant_cachedMetalAlignment == 0;
}

uint64_t vtConfigureScalerCommon(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(int, int, int, int, int, int, int, int, uint64_t, int))
{
  int ScalingGroup;
  uint64_t v13;
  uint64_t (*v14)(int, int, int, int, int, int, int, int, uint64_t, int);
  uint64_t result;
  uint64_t i;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  ScalingGroup = getScalingGroup(a2);
  if (getScalingGroup(a1) == ScalingGroup)
  {
    v13 = ScalingGroup - 1;
    if (v13 <= 0x1E)
    {
      v14 = off_1E2F618B0[v13];
      vtAllocatePlanarBuffersCommon(a1, a3, a5);
      vtAllocatePlanarBuffersCommon(a2, a4, a5 + 128);
      result = 0;
      if (!a6)
        return result;
LABEL_14:
      *a6 = v14;
      return result;
    }
  }
  for (i = 0; i != 128; i += 32)
  {
    v17 = *(void **)(a5 + i);
    if (v17)
    {
      free(v17);
      *(_QWORD *)(a5 + i) = 0;
    }
  }
  v18 = 0;
  v19 = a5 + 128;
  do
  {
    v20 = *(void **)(v19 + v18);
    if (v20)
    {
      free(v20);
      *(_QWORD *)(v19 + v18) = 0;
    }
    v18 += 32;
  }
  while (v18 != 128);
  v14 = 0;
  result = 4294954391;
  if (a6)
    goto LABEL_14;
  return result;
}

uint64_t vtCreatePixelBuffer(OSType pixelFormatType, size_t width, size_t height, int a4, CVPixelBufferRef *pixelBufferOut)
{
  if (a4 && !VTAvoidIOSurfaceBackings())
    return FigCreateIOSurfaceBackedCVPixelBuffer(width, height, pixelFormatType, pixelBufferOut);
  else
    return CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], width, height, pixelFormatType, 0, pixelBufferOut);
}

uint64_t vtBuildMetalSession(__CVBuffer *a1, uint64_t a2, __CVBuffer *a3, uint64_t a4, int a5, const __CFDictionary *a6, void *a7, int a8, __CFDictionary **a9)
{
  uint64_t v9;
  uint64_t PixelBufferDescription;
  const __CFAllocator *v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v23;
  const __CFAllocator *v24;
  __CFArray *v25;
  CFMutableDictionaryRef v26;
  const void *v27;
  const void *v28;
  CFTypeRef v30;
  CFTypeRef cf;

  v30 = 0;
  cf = 0;
  v9 = 4294954394;
  if (!a1 || !a3)
    goto LABEL_34;
  if (!CVPixelBufferGetIOSurface(a1) || !CVPixelBufferGetIOSurface(a3))
  {
    v9 = 4294954391;
    goto LABEL_34;
  }
  if (a6)
    CFDictionaryApplyFunction(a6, (CFDictionaryApplierFunction)sessionPropertyApplier, a7);
  PixelBufferDescription = VTMetalTransferSessionCreatePixelBufferDescription(a1, (__CFDictionary **)&cf);
  if ((_DWORD)PixelBufferDescription
    || (PixelBufferDescription = VTMetalTransferSessionCreatePixelBufferDescription(a3, (__CFDictionary **)&v30),
        (_DWORD)PixelBufferDescription))
  {
    v9 = PixelBufferDescription;
    goto LABEL_34;
  }
  if (a2)
  {
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v23 = CFDictionaryCreateMutable(v19, 0, v20, v21);
    FigCFDictionarySetCFIndex();
    FigCFDictionarySetCFIndex();
    FigCFDictionarySetCFIndex();
    FigCFDictionarySetCFIndex();
    CFDictionarySetValue(v23, CFSTR("SourceAmendments"), Mutable);
    if (a4)
    {
LABEL_11:
      v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v25 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v26 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v23)
        v23 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetCFIndex();
      FigCFDictionarySetCFIndex();
      FigCFDictionarySetCFIndex();
      FigCFDictionarySetCFIndex();
      CFArraySetValueAtIndex(v25, 0, v26);
      CFDictionarySetValue(v23, CFSTR("DestinationAmendments"), v25);
      goto LABEL_17;
    }
  }
  else
  {
    v23 = 0;
    Mutable = 0;
    if (a4)
      goto LABEL_11;
  }
  v25 = 0;
  v26 = 0;
LABEL_17:
  v27 = (const void *)*MEMORY[0x1E0C9AE50];
  if (a5)
    v28 = (const void *)*MEMORY[0x1E0C9AE40];
  else
    v28 = (const void *)*MEMORY[0x1E0C9AE50];
  VTSessionSetProperty(a7, CFSTR("WriteBlackPixelsOutsideDestRect"), v28);
  if (a8)
  {
    if (!v23)
      v23 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v23, CFSTR("SetGPUPriorityLow"), v27);
  }
  v9 = VTMetalTransferSessionConfigureForSourceAndDest(a7, (void *)cf, (void *)v30, v23);
  if (!(_DWORD)v9)
  {
    *a9 = v23;
    v23 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  if (v23)
    CFRelease(v23);
LABEL_34:
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  return v9;
}

void vtCreateSessionPropertiesIncludingScaling(uint64_t a1, int a2, __CFDictionary **a3)
{
  uint64_t v6;
  __CFDictionary *Mutable;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  void *value;
  _QWORD v13[8];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v6 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13[0] = CFSTR("EnableHardwareAcceleratedTransfer");
  v13[1] = CFSTR("EnableHighSpeedTransfer");
  v13[2] = CFSTR("DisableDither");
  v13[3] = CFSTR("EnableHistogram");
  v13[4] = CFSTR("UseOptimalMSRCoefficients");
  v13[5] = CFSTR("HistogramRectangle");
  v13[6] = CFSTR("EnableGPUAcceleratedTransfer");
  v13[7] = CFSTR("SetGPUPriorityLow");
  if (a2)
  {
    *(_QWORD *)&v14 = CFSTR("DestinationCleanAperture");
    *((_QWORD *)&v14 + 1) = CFSTR("DestinationPixelAspectRatio");
    *(_QWORD *)&v15 = CFSTR("ScalingMode");
    *((_QWORD *)&v15 + 1) = CFSTR("DownsamplingMode");
    *(_QWORD *)&v16 = CFSTR("SourceCropRectangle");
    *((_QWORD *)&v16 + 1) = CFSTR("DestinationRectangle");
    v8 = 14;
  }
  else
  {
    v8 = 8;
  }
  v9 = 0;
  v13[v8 | 1] = CFSTR("AllowPixelTransferChain");
  v13[v8] = CFSTR("Label");
  v13[v8 + 2] = CFSTR("AllowPixelTransferGraph");
  v10 = 8 * v8 + 24;
  do
  {
    value = 0;
    v11 = (const void *)v13[v9 / 8];
    _VTPixelTransferSessionCopyProperty(a1, v11, v6, (CFDictionaryRef *)&value);
    if (value)
    {
      CFDictionarySetValue(Mutable, v11, value);
      CFRelease(value);
    }
    v9 += 8;
  }
  while (v10 != v9);
  *a3 = Mutable;
}

uint64_t vtPixelTransferSession_BuildColorCorrector(__CVBuffer *a1, OSType a2, CGColorSpace *a3, const __CFDictionary *a4, const __CFDictionary *a5, char a6, __CVBuffer *a7, OSType a8, uint64_t a9, CFDictionaryRef a10, const __CFDictionary *a11, char a12, char a13, void *a14, unsigned __int8 a15, const __CFDictionary *a16, __CFDictionary **a17, char *a18, const __CFDictionary *a19, __int16 a20,int *a21,_QWORD *a22,_QWORD *a23,void (**a24)(uint64_t),CFTypeRef *a25,CFTypeRef *a26,CVPixelBufferRef *a27,CVPixelBufferRef *a28,VTPixelTransferSessionRef *a29,VTPixelTransferSessionRef *a30)
{
  uint64_t PixelFormatType;
  uint64_t v34;
  uint64_t v35;
  __CFDictionary *Mutable;
  __CFDictionary *v37;
  uint64_t v38;
  __CFDictionary *v39;
  const __CFDictionary *v40;
  __CVBuffer *v41;
  OSType v42;
  OSType v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  size_t Width;
  int Height;
  int v49;
  __CVBuffer *v50;
  size_t v51;
  int v52;
  int v53;
  __CFDictionary *v54;
  int v55;
  __CFDictionary *v56;
  OSType v57;
  __CFDictionary *v58;
  size_t v59;
  size_t v60;
  _BOOL4 v61;
  OSType v62;
  __CFDictionary *v63;
  size_t v64;
  size_t v65;
  _BOOL4 v66;
  char v67;
  _BOOL4 v68;
  _BOOL4 v69;
  BOOL v70;
  int v71;
  size_t v72;
  __CFDictionary *v73;
  size_t v74;
  _BOOL4 v75;
  size_t v76;
  uint64_t v77;
  size_t v78;
  __CFDictionary *v79;
  size_t v80;
  _BOOL4 v81;
  size_t v82;
  const __CFAllocator *v83;
  CGColorSpace *v84;
  char v85;
  int v86;
  CGColorSpace *v87;
  int v88;
  char v89;
  const __CFDictionary *v91;
  uint64_t v92;
  uint64_t v93;
  VTPixelTransferSessionRef v94;
  CVPixelBufferRef v95;
  __CVBuffer *v96;
  CFTypeRef cf;
  void (*v103)(uint64_t);
  uint64_t v104;
  uint64_t v105;
  CFTypeRef v106;
  OSType v107;
  OSType v108;
  VTPixelTransferSessionRef v109;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  CVPixelBufferRef v111;
  CVPixelBufferRef v112;
  __CFDictionary *v113;
  CVPixelBufferRef pixelBufferOut;
  void *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v34 = CVPixelBufferGetPixelFormatType(a7);
  v111 = 0;
  v112 = 0;
  v109 = 0;
  pixelTransferSessionOut = 0;
  v108 = 0;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v103 = 0;
  v104 = 0;
  cf = 0;
  *a27 = 0;
  *a28 = 0;
  *a29 = 0;
  *a30 = 0;
  if (!a21 || *a21 == 4)
  {
    v35 = 0;
    Mutable = 0;
    v37 = 0;
    goto LABEL_117;
  }
  v38 = v34;
  v39 = 0;
  v35 = 0;
  v40 = a11;
  if ((_DWORD)PixelFormatType == a2 || (_DWORD)v34 == a8)
    goto LABEL_16;
  if (a13 && VTMetalTransferSessionCanTransfer(a2, a8, 0))
  {
    v113 = 0;
    v41 = a1;
    v42 = CVPixelBufferGetPixelFormatType(a1);
    v43 = CVPixelBufferGetPixelFormatType(a7);
    pixelBufferOut = 0;
    v115 = 0;
    if (v42 == a2)
    {
      v44 = 0;
      if (!CVPixelBufferGetIOSurface(a1))
        goto LABEL_144;
    }
    else
    {
      Width = (int)CVPixelBufferGetWidth(a7);
      Height = CVPixelBufferGetHeight(a7);
      v44 = 1;
      v49 = vtCreatePixelBuffer(a2, Width, Height, 1, &pixelBufferOut);
      v41 = pixelBufferOut;
      if (v49)
      {
        v56 = 0;
        v55 = 0;
        if (!pixelBufferOut)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v43 == a8)
    {
      v50 = a7;
      if (!CVPixelBufferGetIOSurface(a7))
        goto LABEL_144;
    }
    else
    {
      v51 = (int)CVPixelBufferGetWidth(a7);
      v52 = CVPixelBufferGetHeight(a7);
      if (vtCreatePixelBuffer(a8, v51, v52, 1, (CVPixelBufferRef *)((unint64_t)&pixelBufferOut | (8 * v44))))
      {
LABEL_144:
        v56 = 0;
        v55 = 0;
        goto LABEL_33;
      }
      v50 = *(__CVBuffer **)((unint64_t)&pixelBufferOut | (8 * v44));
    }
    v53 = vtBuildMetalSession(v41, 0, v50, 0, 1, a16, a14, a15, &v113);
    v54 = v113;
    if (v53 || VTMetalTransferSessionTransferImageSync((const __CFArray *)a14, v41, v50, v113))
    {
      v56 = 0;
      v55 = 0;
      if (!v54)
      {
LABEL_33:
        v41 = pixelBufferOut;
        if (!pixelBufferOut)
        {
LABEL_35:
          if (v115)
            CFRelease(v115);
          if (v55)
          {
            v46 = 1;
            v39 = v56;
            v40 = a11;
            goto LABEL_39;
          }
          v39 = v56;
          v40 = a11;
          goto LABEL_12;
        }
LABEL_34:
        CFRelease(v41);
        goto LABEL_35;
      }
    }
    else
    {
      v111 = (CVPixelBufferRef)v115;
      v112 = pixelBufferOut;
      pixelBufferOut = 0;
      v115 = 0;
      v55 = 1;
      v56 = v54;
      if (!v54)
        goto LABEL_33;
    }
    CFRelease(v54);
    goto LABEL_33;
  }
  v39 = 0;
LABEL_12:
  v45 = VTPixelBlitterColorHandlingOptimized_setup(a2, a5, a8, v40, a19, a20, HIBYTE(a20), &v104, &v105, (uint64_t)&cf, (void (__cdecl **)(void *))&v103);
  if ((_DWORD)v45)
  {
    v35 = v45;
    if (v103)
      v103(v104);
    v104 = 0;
    v105 = 0;
    cf = 0;
    v103 = 0;
  }
  else
  {
    if (v105)
    {
      v46 = 0;
LABEL_39:
      v35 = 0;
      v108 = a2;
      v107 = a8;
      goto LABEL_40;
    }
    v35 = 0;
  }
LABEL_16:
  vtPixelTransferSession_chooseColorCorrectionFormat(PixelFormatType, &v108, a6, 1);
  vtPixelTransferSession_chooseColorCorrectionFormat(v38, &v107, a12, 0);
  if (v112)
  {
    CFRelease(v112);
    v112 = 0;
  }
  if (v111)
  {
    CFRelease(v111);
    v46 = 0;
    v111 = 0;
  }
  else
  {
    v46 = 0;
  }
LABEL_40:
  v57 = v107;
  if ((_DWORD)v38 == v107)
  {
    if (v112)
    {
      if (CVPixelBufferGetPixelFormatType(v112) == (_DWORD)v38)
        goto LABEL_85;
      if (v112)
      {
        CFRelease(v112);
        v112 = 0;
      }
    }
    v58 = v39;
    v59 = (int)CVPixelBufferGetWidth(a7);
    v60 = (int)CVPixelBufferGetHeight(a7);
    v61 = CVPixelBufferGetIOSurface(a7) != 0;
    v35 = vtCreatePixelBuffer(v38, v59, v60, v61, &v112);
    if ((_DWORD)v35)
    {
      v37 = 0;
      Mutable = 0;
      v39 = v58;
      goto LABEL_111;
    }
    v39 = v58;
LABEL_85:
    Mutable = 0;
    v71 = 2;
    if (a3)
    {
      v84 = (CGColorSpace *)a9;
      if (a9)
      {
        if (!FigCFEqual())
        {
          if (v105)
            v85 = 1;
          else
            v85 = v46;
          if ((v85 & 1) == 0)
          {
            v86 = v38;
            v87 = a3;
            v88 = v38;
LABEL_105:
            v35 = VTCreateVImageConverter(v86, v87, v88, v84, (vImageConverterRef *)&v106);
            goto LABEL_106;
          }
          goto LABEL_106;
        }
        goto LABEL_98;
      }
    }
LABEL_108:
    v37 = 0;
    goto LABEL_109;
  }
  v62 = v108;
  if ((_DWORD)PixelFormatType != v108)
  {
    if (a3 && a9 && !FigCFEqual() || v62 != v57)
    {
      if (v105)
        v67 = 1;
      else
        v67 = v46;
      if ((v67 & 1) == 0)
        v35 = VTCreateVImageConverter(v62, a3, v57, (CGColorSpace *)a9, (vImageConverterRef *)&v106);
      if ((_DWORD)v35)
        goto LABEL_83;
    }
    v68 = ((unint64_t)a3 | a9) == 0;
    v69 = v62 == v57;
    v70 = v68 && v69;
    if (v68 && v69)
      v71 = 5;
    else
      v71 = 3;
    if (v112)
    {
      if (CVPixelBufferGetPixelFormatType(v112) == v62)
        goto LABEL_72;
      if (v112)
      {
        CFRelease(v112);
        v112 = 0;
      }
    }
    v72 = (int)CVPixelBufferGetWidth(a7);
    v73 = v39;
    v74 = (int)CVPixelBufferGetHeight(a7);
    v75 = CVPixelBufferGetIOSurface(a1) != 0;
    v76 = v74;
    v39 = v73;
    v77 = vtCreatePixelBuffer(v62, v72, v76, v75, &v112);
    if ((_DWORD)v77)
      goto LABEL_82;
LABEL_72:
    if (!v70)
    {
      if (!v111)
        goto LABEL_77;
      if (CVPixelBufferGetPixelFormatType(v111) != v57)
      {
        if (v111)
        {
          CFRelease(v111);
          v111 = 0;
        }
LABEL_77:
        v78 = (int)CVPixelBufferGetWidth(a7);
        v79 = v39;
        v80 = (int)CVPixelBufferGetHeight(a7);
        v81 = CVPixelBufferGetIOSurface(a7) != 0;
        v82 = v80;
        v39 = v79;
        v77 = vtCreatePixelBuffer(v57, v78, v82, v81, &v111);
        if (!(_DWORD)v77)
          goto LABEL_78;
LABEL_82:
        v35 = v77;
LABEL_83:
        v37 = 0;
        Mutable = 0;
        goto LABEL_111;
      }
    }
LABEL_78:
    v83 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v77 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
    if (!(_DWORD)v77)
    {
      v77 = VTSessionSetProperties(pixelTransferSessionOut, a4);
      if (!(_DWORD)v77)
      {
        v77 = VTPixelTransferSessionCreate(v83, &v109);
        if (!(_DWORD)v77)
        {
          v77 = VTSessionSetProperties(v109, a10);
          if (!(_DWORD)v77)
          {
            v91 = v40;
            Mutable = CFDictionaryCreateMutable(v83, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v92 = VTConvertToSessionPropertiesFromCVProperties(a5, Mutable);
            if ((_DWORD)v92 || (v92 = VTSessionSetProperties(pixelTransferSessionOut, Mutable), (_DWORD)v92))
            {
              v35 = v92;
              v37 = 0;
              goto LABEL_111;
            }
            if (_VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, v112))
            {
              v37 = 0;
            }
            else
            {
              v37 = CFDictionaryCreateMutable(v83, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v93 = VTConvertToSessionPropertiesFromCVProperties(v91, v37);
              if ((_DWORD)v93 || (v93 = VTSessionSetProperties(v109, v37), (_DWORD)v93))
              {
                v35 = v93;
                goto LABEL_111;
              }
              if (v70)
              {
                v94 = v109;
                v95 = v112;
              }
              else
              {
                v96 = v112;
                if (!v112)
                  v96 = a1;
                CVBufferPropagateAttachments(v96, v111);
                CVBufferRemoveAttachment(v111, (CFStringRef)*MEMORY[0x1E0CA8CD8]);
                CVBufferSetAttachments(v111, v91, kCVAttachmentMode_ShouldPropagate);
                v94 = v109;
                v95 = v111;
              }
              if (!_VTPixelTransferSessionTransferImage(v94, v95, a7))
              {
                v35 = 0;
                goto LABEL_109;
              }
            }
            v35 = 4294955084;
            goto LABEL_111;
          }
        }
      }
    }
    goto LABEL_82;
  }
  if (v112)
  {
    if (CVPixelBufferGetPixelFormatType(v112) == (_DWORD)PixelFormatType)
      goto LABEL_95;
    if (v112)
    {
      CFRelease(v112);
      v112 = 0;
    }
  }
  v63 = v39;
  v64 = (int)CVPixelBufferGetWidth(a1);
  v65 = (int)CVPixelBufferGetHeight(a1);
  v66 = CVPixelBufferGetIOSurface(a1) != 0;
  v35 = vtCreatePixelBuffer(PixelFormatType, v64, v65, v66, &v112);
  if ((_DWORD)v35)
  {
    v37 = 0;
    Mutable = 0;
    v39 = v63;
    goto LABEL_111;
  }
  v39 = v63;
LABEL_95:
  Mutable = 0;
  v71 = 1;
  if (!a3)
    goto LABEL_108;
  v84 = (CGColorSpace *)a9;
  if (!a9)
    goto LABEL_108;
  if (!FigCFEqual())
  {
    if (v105)
      v89 = 1;
    else
      v89 = v46;
    if ((v89 & 1) == 0)
    {
      v86 = PixelFormatType;
      v87 = a3;
      v88 = PixelFormatType;
      goto LABEL_105;
    }
LABEL_106:
    Mutable = 0;
    if ((_DWORD)v35)
    {
      v37 = 0;
      goto LABEL_111;
    }
    goto LABEL_108;
  }
LABEL_98:
  Mutable = 0;
  v37 = 0;
LABEL_109:
  *a27 = v112;
  *a28 = v111;
  v111 = 0;
  v112 = 0;
  *a29 = pixelTransferSessionOut;
  *a30 = v109;
  v109 = 0;
  pixelTransferSessionOut = 0;
  *a18 = v46;
  *a17 = v39;
  *a22 = v105;
  *a23 = v104;
  *a24 = v103;
  *a25 = cf;
  v104 = 0;
  v105 = 0;
  cf = 0;
  v103 = 0;
  *a26 = v106;
  v106 = 0;
  *a21 = v71;
  if (!(_DWORD)v35)
    goto LABEL_117;
  v39 = 0;
LABEL_111:
  if (pixelTransferSessionOut)
    VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
  if (v109)
    VTPixelTransferSessionInvalidate(v109);
  if (v39)
    CFRelease(v39);
LABEL_117:
  if (v103)
    v103(v104);
  if (cf)
    CFRelease(cf);
  if (v112)
    CFRelease(v112);
  if (v111)
    CFRelease(v111);
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  if (v109)
    CFRelease(v109);
  if (v106)
    CFRelease(v106);
  if (Mutable)
    CFRelease(Mutable);
  if (v37)
    CFRelease(v37);
  return v35;
}

uint64_t vtCreateIntermediatePixelBuffer(__CVBuffer *a1, OSType pixelFormatType, _QWORD *a3, char a4, CVPixelBufferRef *pixelBufferOut)
{
  if (!a1)
    return FigSignalErrorAt();
  if (pixelBufferOut)
  {
    vtCreatePixelBuffer(pixelFormatType, (int)*a3, (int)a3[1], a4 & 4, pixelBufferOut);
    if (*pixelBufferOut)
      CVBufferPropagateAttachments(a1, *pixelBufferOut);
  }
  return 0;
}

vImage_Error vt_Scale_16_SeparatePlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, vImage_Buffer *a5, int a6, int a7, int a8, uint64_t a9, vImage_Flags a10)
{
  uint64_t v16;
  void **p_data;
  void *data;
  vImage_Error v19;
  size_t rowBytes;
  char *v21;
  vImagePixelCount height;
  void *v23;
  size_t v24;
  char *v25;
  vImagePixelCount v26;
  vImage_Error v27;
  const vImage_Buffer *v28;
  const vImage_Buffer *v29;
  vImage_Buffer *v33;
  int8x16_t *v34;
  _QWORD v35[2];
  vImagePixelCount v36;
  uint64_t v37;
  vImage_Buffer dest;
  _QWORD v39[2];
  vImagePixelCount width;
  uint64_t v41;
  vImage_Buffer src;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 1);
  v33 = a5 + 4;
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 1);
  v34 = a2;
  vt_CopyToOrFromPlanarBuffers(a1, a2, a5, 1, a10);
  v16 = 0;
  while (1)
  {
    p_data = &a5[v16 + 4].data;
    data = a5[8].data;
    if (data)
      goto LABEL_5;
    v19 = vImageScale_Planar16U(&a5[v16], &a5[v16 + 4], 0, a10 | 0x88);
    if (v19)
      break;
LABEL_11:
    if (++v16 == 3)
    {
      scaleOrSetAlpha8(a1, v34, a3, a4, (uint64_t)a5, a6, a7, a8, a10);
      vt_CopyToOrFromPlanarBuffers(a3, a4, v33, 0, a10);
      v27 = 0;
      goto LABEL_13;
    }
  }
  data = malloc_type_malloc(v19, 0x2C6173B6uLL);
  a5[8].data = data;
  if (data)
  {
LABEL_5:
    if (a6)
    {
      rowBytes = a5[v16].rowBytes;
      v21 = (char *)a5[v16].data;
      height = a5[v16].height;
      width = a5[v16].width;
      v41 = 2 * rowBytes;
      src.width = width;
      src.rowBytes = 2 * rowBytes;
      src.data = v21;
      src.height = (height + 1) >> 1;
      v39[0] = &v21[rowBytes];
      v39[1] = height >> 1;
      v23 = *p_data;
      v24 = a5[v16 + 4].rowBytes;
      v25 = (char *)*p_data + v24;
      v26 = a5[v16 + 4].height;
      v36 = a5[v16 + 4].width;
      v37 = 2 * v24;
      dest.width = v36;
      dest.rowBytes = 2 * v24;
      dest.data = v23;
      dest.height = (v26 + 1) >> 1;
      v35[0] = v25;
      v35[1] = v26 >> 1;
      v27 = vImageScale_Planar16U(&src, &dest, data, a10 | 8);
      if ((_DWORD)v27)
        goto LABEL_10;
      data = a5[8].data;
      v28 = (const vImage_Buffer *)v39;
      v29 = (const vImage_Buffer *)v35;
    }
    else
    {
      v28 = &a5[v16];
      v29 = &a5[v16 + 4];
    }
    v27 = vImageScale_Planar16U(v28, v29, data, a10 | 8);
LABEL_10:
    if ((_DWORD)v27)
      goto LABEL_13;
    goto LABEL_11;
  }
  v27 = 4294954392;
LABEL_13:
  vt_SetupOrCleanupPlanarBuffers(a1, v34, (uint64_t)a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)v33, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v27;
}

uint64_t sessionPropertyApplier(CFStringRef propertyKey, CFTypeRef propertyValue, VTSessionRef session)
{
  return VTSessionSetProperty(session, propertyKey, propertyValue);
}

uint64_t vtPixelTransferSession_chooseColorCorrectionFormat(uint64_t result, _DWORD *a2, char a3, int a4)
{
  OSType v7;
  uint64_t v8;
  uint64_t v9;
  OSType v10;
  OSType v11;

  v7 = result;
  v8 = 0;
  *a2 = 0;
  while (*(_DWORD *)&aAfgrahgrr46lar[v8] != (_DWORD)result)
  {
    v8 += 4;
    if (v8 == 20)
      goto LABEL_6;
  }
  *a2 = result;
  if ((_DWORD)result)
    return result;
LABEL_6:
  v9 = 0;
  while (1)
  {
    v10 = *(_DWORD *)&aAfgrahgrr46lar[v9];
    if (a4)
    {
      v11 = v7;
    }
    else
    {
      v11 = *(_DWORD *)&aAfgrahgrr46lar[v9];
      v10 = v7;
    }
    result = VTPixelTransferSessionCanTransfer(v11, v10, a3);
    if ((_DWORD)result)
      break;
    v9 += 4;
    if (v9 == 20)
      return result;
  }
  *a2 = *(_DWORD *)&aAfgrahgrr46lar[v9];
  return result;
}

void vtCombineDictionariesApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t vtPixelTransferAppendSimpleSoftwareNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t CurrentDimensions;
  _BYTE *v10;
  uint64_t v11;
  CFTypeRef cf;
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  cf = 0;
  CurrentDimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, (uint64_t)a6, 0, (uint64_t)&v14);
  if (!(_DWORD)CurrentDimensions)
  {
    CurrentDimensions = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v15, (unint64_t)*((double *)&v15 + 1), (CFMutableDictionaryRef *)&cf);
    if (!(_DWORD)CurrentDimensions)
    {
      if (*(_QWORD *)(a3 + 16))
      {
        v10 = malloc_type_malloc(0x10uLL, 0x1000040A65DF9BBuLL);
        *v10 = a6[170] == 0;
        v10[1] = a6[171] == 0;
        v10[2] = a6[172];
      }
      CurrentDimensions = VTPixelTransferChainAppendSoftwareNode();
    }
  }
  v11 = CurrentDimensions;
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t vt_Copy_2vuy_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_yuvs(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = *a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = 0;
        do
        {
          *(_DWORD *)(v10 + 4 * v12) = __rev16(*(_DWORD *)(v11 + 4 * v12));
          ++v12;
        }
        while (v9 != v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_2vuy_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_2vuy_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_2vuy_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_yuvs_2vuy(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = *a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = 0;
        do
        {
          *(_DWORD *)(v10 + 4 * v12) = __rev16(*(_DWORD *)(v11 + 4 * v12));
          ++v12;
        }
        while (v9 != v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvs_y420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_yuvs_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_yuvs_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_yuvs_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_yuvs_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_yuvs_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_yuvs_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_yuvs_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_yuvs_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_yuvf_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_yuvf_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_yuvf_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v2a8_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v2a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v2a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422v_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_422f_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_422f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_422f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v4a8_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v4a8_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v4a8_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v4a8_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v4a8_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v4a8_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v4a8_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v4a8_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v4a8_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v4a8_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v4a8_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v4a8_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v4a8_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v4a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v4a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444v_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_444f_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_444f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_444f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y408_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y408_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y408_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_y416_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_y416_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_y416_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_x420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_xf20(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v216_f420(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v216_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v216_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v210_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v210_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v210_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v210_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v210_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v210_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v210_x420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v210_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v210_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_v210_xf20(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_v210_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_v210_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x444_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x444_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x444_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_s4as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_s4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_s4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_s4as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_s4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_s4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_s4as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_s4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_s4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_s4as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_s4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_s4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_s4as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_s4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_s4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_s2as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_s2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_s2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sv22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_sf22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_sf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_sf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_t4as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_t4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_t4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_t4as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_t4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_t4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_t4as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_t4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_t4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_t4as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_t4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_t4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_t4as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_t4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_t4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_v216(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_2vuy(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_t2as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_t2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_t2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tv22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_tf22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_tf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_tf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x4as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x4as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x4as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x4as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x4as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x2as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_x422_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_x422_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_x422_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_v216(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_2vuy(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_Copy_xf22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  if (a1 && *(_BYTE *)(a1 + 2))
    vt_CopyAvg_xf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    vt_CopyDec_xf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t vt_VImage_Setup_L008_L016(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L008_L016;
  *a11 = vt_VImage_Cleanup_L008_L016;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_L016_L008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L016_L008;
  *a11 = vt_VImage_Cleanup_L016_L008;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_L008_L016(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImage_Flags v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  vImage_Buffer v15;
  vImage_Buffer src;

  v8 = a2[3];
  v9 = *(_DWORD *)(a1 + 296);
  v10 = *a3;
  v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  v12 = *a7;
  v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + 2 * *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_Planar8To16U(&src, &v15, v9);
}

void vt_VImage_Cleanup_L008_L016(void **a1)
{
  free(a1[32]);
  free(a1);
}

vImage_Error vt_VImage_Copy_L016_L008(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8;
  vImage_Flags v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  vImage_Buffer v15;
  vImage_Buffer src;

  v8 = a2[3];
  v9 = *(_DWORD *)(a1 + 296);
  v10 = *a3;
  v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  v12 = *a7;
  v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + *(_QWORD *)(a6 + 32) + *(_QWORD *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_16UToPlanar8(&src, &v15, v9);
}

void vt_VImage_Cleanup_L016_L008(void **a1)
{
  free(a1[32]);
  free(a1);
}

uint64_t DepthWrapperDecoder_CreateInstance()
{
  uint64_t v0;

  VTVideoDecoderGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t DepthWrapperDecoder_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    *(_BYTE *)DerivedStorage = 1;
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
  }
  return 0;
}

void DepthWrapperDecoder_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[3];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[3] = 0;
  }
  v5 = DerivedStorage[6];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[6] = 0;
  }
  v6 = (void *)DerivedStorage[9];
  if (v6)
  {
    DerivedStorage[9] = 0;
    free(v6);
  }
}

__CFString *DepthWrapperDecoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<DepthWrapperDecoder %p>"), a1);
  return Mutable;
}

uint64_t DepthWrapperDecoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  CFTypeRef v9;
  const void *v10;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SublayerDecoderSpecification")))
  {
    v8 = *(const void **)(DerivedStorage + 24);
    if (v8)
      v9 = CFRetain(v8);
    else
      v9 = 0;
    result = 0;
    *a4 = v9;
  }
  else
  {
    v10 = *(const void **)(DerivedStorage + 40);
    if (v10)
      return VTSessionCopyProperty(v10, a2, a3, a4);
    else
      return 4294954393;
  }
  return result;
}

uint64_t DepthWrapperDecoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  const void *v7;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SublayerDecoderSpecification")))
  {
    if (a3 && (v6 = CFGetTypeID(a3), v6 == CFDictionaryGetTypeID()))
    {
      v7 = *(const void **)(DerivedStorage + 24);
      *(_QWORD *)(DerivedStorage + 24) = a3;
      CFRetain(a3);
      if (v7)
        CFRelease(v7);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    v9 = *(const void **)(DerivedStorage + 40);
    if (v9)
      return VTSessionSetProperty(v9, a2, a3);
    else
      return 4294954393;
  }
}

uint64_t DepthWrapperDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int v8;
  const void *v9;
  unint64_t Dimensions;
  const void *v11;
  const __CFDictionary *Extension;
  const __CFDictionary *v13;
  CFTypeID v14;
  const __CFData *Value;
  const __CFData *v16;
  CFTypeID v17;
  int8x8_t v18;
  int64x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t i;
  uint64_t v31;
  __CFDictionary *v32;
  const opaqueCMFormatDescription *v33;
  CMVideoDimensions v34;
  const __CFDictionary *Extensions;
  CFAllocatorRef *v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  const __CFDictionary *v39;
  const __CFAllocator *v40;
  CFMutableDictionaryRef v41;
  __CFDictionary *v42;
  __CFDictionary *MutableCopy;
  __CFDictionary *v44;
  uint64_t v45;
  __CFDictionary *v46;
  const __CFDictionary *v47;
  const opaqueCMFormatDescription *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  VTDecompressionSessionRef *v52;
  CFDictionaryRef v53;
  float v55;
  int v56;
  __CFDictionary *v57;
  int v58;
  CFDictionaryRef destinationImageBufferAttributes;
  _QWORD buffer[3];
  CFRange v61;

  buffer[2] = *MEMORY[0x1E0C80C00];
  ((void (*)(void))VTVideoDecoderGetCMBaseObject)();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  v57 = 0;
  if (*(_DWORD *)(DerivedStorage + 4) == 1684369512)
    v8 = 1751410032;
  else
    v8 = 1751411059;
  v56 = v8;
  v9 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_QWORD *)(DerivedStorage + 16) = a3;
  if (a3)
    CFRetain(a3);
  if (v9)
    CFRelease(v9);
  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v7 + 16));
  *(_QWORD *)((char *)buffer + 5) = 0;
  buffer[0] = 0;
  v11 = (const void *)*MEMORY[0x1E0CA2240];
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(v7 + 16), (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (Extension)
  {
    v13 = Extension;
    v14 = CFGetTypeID(Extension);
    if (v14 == CFDictionaryGetTypeID())
    {
      Value = (const __CFData *)CFDictionaryGetValue(v13, CFSTR("disc"));
      if (Value)
      {
        v16 = Value;
        v17 = CFGetTypeID(Value);
        if (v17 == CFDataGetTypeID() && CFDataGetLength(v16) > 12)
        {
          v61.location = 0;
          v61.length = 13;
          CFDataGetBytes(v16, v61, (UInt8 *)buffer);
          v18 = vrev32_s8(*(int8x8_t *)((char *)buffer + 5));
          v19.i64[0] = v18.i32[0];
          v19.i64[1] = v18.i32[1];
          v20 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v19), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL)));
          if (v20.f32[0] < 0.0 || v20.f32[1] <= v20.f32[0])
            return FigSignalErrorAt();
          *(float32x2_t *)(v7 + 60) = v20;
          v21 = *(_QWORD *)(v7 + 72);
          v22 = (float)(v20.f32[1] - v20.f32[0]) + 1.0;
          v55 = v20.f32[0];
          v23 = powf(v22, 0.00097752);
          v24 = powf(v22, -0.00097752);
          for (i = 0; i != 2048; i += 2)
          {
            v24 = v23 * v24;
            _S2 = (float)(v24 + -1.0) + v55;
            __asm { FCVT            H2, S2 }
            *(_WORD *)(v21 + i) = LOWORD(_S2);
          }
          v31 = depthdecoder_createPixelBufferAttributesDictionary(Dimensions, HIDWORD(Dimensions), (uint64_t)&v56, &v57);
          v32 = v57;
          if ((_DWORD)v31)
          {
            v45 = v31;
            goto LABEL_27;
          }
          VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(v7 + 8), v57);
          v33 = *(const opaqueCMFormatDescription **)(v7 + 16);
          v34 = CMVideoFormatDescriptionGetDimensions(v33);
          Extensions = CMFormatDescriptionGetExtensions(v33);
          v36 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
          if (Extensions
            && (v37 = Extensions, (v38 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v11)) != 0)
            && (v39 = v38, v40 = *v36, (v41 = CFDictionaryCreateMutableCopy(*v36, 0, v37)) != 0))
          {
            v42 = v41;
            MutableCopy = CFDictionaryCreateMutableCopy(v40, 0, v39);
            if (MutableCopy)
            {
              v44 = MutableCopy;
              CFDictionaryRemoveValue(MutableCopy, CFSTR("disc"));
              CFDictionarySetValue(v42, v11, v44);
              CFDictionaryRemoveValue(v42, (const void *)*MEMORY[0x1E0CA2278]);
              CFDictionaryRemoveValue(v42, (const void *)*MEMORY[0x1E0CA2270]);
              v36 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
              v45 = CMVideoFormatDescriptionCreate(v40, 0x68766331u, v34.width, v34.height, v42, (CMVideoFormatDescriptionRef *)(v7 + 32));
              CFRelease(v42);
              v46 = v44;
            }
            else
            {
              v45 = FigSignalErrorAt();
              v46 = v42;
            }
            CFRelease(v46);
            if ((_DWORD)v45)
              goto LABEL_27;
          }
          else
          {
            v45 = FigSignalErrorAt();
            if ((_DWORD)v45)
              goto LABEL_27;
          }
          v47 = *(const __CFDictionary **)(v7 + 24);
          v48 = *(const opaqueCMFormatDescription **)(v7 + 32);
          VTVideoDecoderGetCMBaseObject(a1);
          v49 = CMBaseObjectGetDerivedStorage();
          destinationImageBufferAttributes = 0;
          v58 = 1278226736;
          v50 = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v49 + 16));
          v51 = depthdecoder_createPixelBufferAttributesDictionary(v50, HIDWORD(v50), (uint64_t)&v58, &destinationImageBufferAttributes);
          if (!(_DWORD)v51)
          {
            v52 = (VTDecompressionSessionRef *)(v7 + 40);
            v53 = destinationImageBufferAttributes;
            v45 = VTDecompressionSessionCreate(*v36, v48, v47, destinationImageBufferAttributes, 0, v52);
            if (!v53)
              goto LABEL_27;
            goto LABEL_26;
          }
          v45 = v51;
          v53 = destinationImageBufferAttributes;
          if (destinationImageBufferAttributes)
LABEL_26:
            CFRelease(v53);
LABEL_27:
          if (v32)
            CFRelease(v32);
          return v45;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t DepthWrapperDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, VTDecodeFrameFlags a4, VTDecodeInfoFlags *a5)
{
  uint64_t DerivedStorage;
  OpaqueCMBlockBuffer *DataBuffer;
  const opaqueCMFormatDescription *v12;
  uint64_t SampleTimingInfo;
  uint64_t v14;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v17;
  void *v18;
  CMSampleBufferRef v19;
  OpaqueVTDecompressionSession *v20;
  uint64_t v21;
  _QWORD outputHandler[7];
  char v24;
  size_t sampleSizeArray;
  CMSampleTimingInfo timingInfoOut;
  CMSampleBufferRef sampleBufferOut;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 48));
  ++*(_DWORD *)(DerivedStorage + 56);
  if (!CMSampleBufferDataIsReady(a3))
  {
    SampleTimingInfo = FigSignalErrorAt();
    goto LABEL_10;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  v12 = *(const opaqueCMFormatDescription **)(DerivedStorage + 32);
  sampleBufferOut = 0;
  *(_OWORD *)&timingInfoOut.duration.value = *MEMORY[0x1E0CA2E18];
  timingInfoOut.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  timingInfoOut.presentationTimeStamp = timingInfoOut.duration;
  timingInfoOut.decodeTimeStamp = timingInfoOut.duration;
  sampleSizeArray = CMBlockBufferGetDataLength(DataBuffer);
  SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(a3, 0, &timingInfoOut);
  if ((_DWORD)SampleTimingInfo)
  {
LABEL_10:
    v21 = SampleTimingInfo;
LABEL_13:
    depthdecoder_emitDecodedFrame(a1, a2, v21, 0, 0);
    return v21;
  }
  v14 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DataBuffer, v12, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sampleBufferOut);
  if ((_DWORD)v14)
  {
    v21 = v14;
    if (sampleBufferOut)
      CFRelease(sampleBufferOut);
    goto LABEL_13;
  }
  CMPropagateAttachments(a3, sampleBufferOut);
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    v17 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
    v18 = (void *)CFArrayGetValueAtIndex(v17, 0);
    CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)depthdecoder_dictionarySetValue, v18);
  }
  v19 = sampleBufferOut;
  v20 = *(OpaqueVTDecompressionSession **)(DerivedStorage + 40);
  outputHandler[0] = MEMORY[0x1E0C809B0];
  outputHandler[1] = 0x40000000;
  outputHandler[2] = __DepthWrapperDecoder_DecodeFrame_block_invoke;
  outputHandler[3] = &__block_descriptor_tmp_2;
  v24 = a4 & 1;
  outputHandler[4] = DerivedStorage;
  outputHandler[5] = a1;
  outputHandler[6] = a2;
  v21 = VTDecompressionSessionDecodeFrameWithOutputHandler(v20, sampleBufferOut, a4, a5, outputHandler);
  if (v19)
    CFRelease(v19);
  return v21;
}

uint64_t DepthWrapperDecoder_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  CFTypeRef cf;
  CFTypeRef v12;
  __CFDictionary *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v12 = 0;
  v13 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = *(const void **)(DerivedStorage + 40);
    if (v7)
    {
      v8 = VTSessionCopySupportedPropertyDictionary(v7, (CFDictionaryRef *)&cf);
      if ((_DWORD)v8)
      {
        Mutable = 0;
      }
      else
      {
        Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("SublayerDecoderSpecification"), v5);
        v12 = cf;
        v13 = Mutable;
        FigCFCreateCombinedDictionary();
      }
    }
    else
    {
      Mutable = 0;
      v8 = 4294954393;
    }
  }
  else
  {
    Mutable = 0;
    v8 = 4294954394;
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  return v8;
}

uint64_t DepthWrapperDecoder_FinishDelayedFrames(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v3 = DerivedStorage;
  v2 = VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
  if (*(_QWORD *)(v3 + 48))
  {
    v4 = 2;
    do
    {
      v5 = *(NSObject **)(v3 + 48);
      v6 = dispatch_time(0, 1000000000 * v4);
      v4 *= 2;
    }
    while (dispatch_group_wait(v5, v6));
  }
  return v2;
}

uint64_t depthdecoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, __CFDictionary **a4)
{
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  uint64_t v11;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  v8 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  if (v8)
  {
    v9 = v8;
    FigCFArrayAppendInt32();
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA9040], v9);
    CFRelease(v9);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    *a4 = v7;
    return 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
    CFRelease(v7);
    return v11;
  }
}

void depthdecoder_emitDecodedFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  uint64_t DerivedStorage;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 56);
  dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 48));
}

void depthdecoder_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

__CFString *VTPixelBufferAttributesCopyNiceDescription(const __CFDictionary *a1)
{
  __CFString *Mutable;
  const __CFString *Value;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFTypeID TypeID;
  const __CFString *v10;
  CFTypeID v11;
  CFIndex Count;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  const __CFNumber *ValueAtIndex;
  char v19[20];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppend(Mutable, CFSTR("["));
  Value = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA90E0]);
  v4 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8FD8]);
  v5 = CFSTR("[any width]");
  if (Value)
    v5 = Value;
  v6 = CFSTR("[any height]");
  if (v4)
    v6 = v4;
  CFStringAppendFormat(Mutable, 0, CFSTR("%@ x %@, "), v5, v6);
  v7 = (const __CFArray *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA9040]);
  if (!v7)
  {
    v10 = CFSTR("[any pixel format]");
LABEL_24:
    CFStringAppend(Mutable, v10);
    goto LABEL_25;
  }
  v8 = v7;
  TypeID = CFNumberGetTypeID();
  if (TypeID != CFGetTypeID(v8))
  {
    v11 = CFArrayGetTypeID();
    if (v11 == CFGetTypeID(v8))
    {
      Count = CFArrayGetCount(v8);
      v13 = Count;
      if (Count <= 100)
        v14 = 0;
      else
        v14 = Count - 100;
      CFStringAppend(Mutable, CFSTR("["));
      if (v13 >= 1)
      {
        v15 = 0;
        if (v13 >= 100)
          v16 = 100;
        else
          v16 = v13;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, v15);
          if (v15)
            CFStringAppend(Mutable, CFSTR(", "));
          vtGetPixelFormatNumberAsString(ValueAtIndex, v19);
          CFStringAppendFormat(Mutable, 0, CFSTR("%s"), v19);
          ++v15;
        }
        while (v16 != v15);
      }
      if (v14 >= 1)
        CFStringAppendFormat(Mutable, 0, CFSTR(", (%d more)"), v14);
      v10 = CFSTR("]");
    }
    else
    {
      v10 = CFSTR("[bad pixel format]");
    }
    goto LABEL_24;
  }
  vtGetPixelFormatNumberAsString(v8, v19);
  CFStringAppendFormat(Mutable, 0, CFSTR("%s"), v19);
LABEL_25:
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)vtAppendNicelyUnlessWHPF, Mutable);
  CFStringAppend(Mutable, CFSTR("]"));
  return Mutable;
}

char *vtGetPixelFormatNumberAsString(const __CFNumber *a1, char *a2)
{
  signed int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr > 100)
  {
    valuePtr = bswap32(valuePtr);
    snprintf(a2, 0x14uLL, "%.4s");
  }
  else
  {
    snprintf(a2, 0x14uLL, "%d");
  }
  return a2;
}

void vtAppendNicelyUnlessWHPF(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  _QWORD v6[2];

  if (!CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA90E0])
    && !CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8FD8])
    && !CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA9040]))
  {
    v6[0] = a3;
    v6[1] = 1;
    vtAppendNicely((uint64_t)a1, a2, (uint64_t)v6);
  }
}

CVPixelBufferPoolRef *vtBuildPixelBufferPoolsCommon(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5, const __CFBoolean *a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, char a10, CVPixelBufferPoolRef *a11, CVPixelBufferPoolRef *a12, _BYTE *a13, _BYTE *a14)
{
  char v21;
  const void **v22;
  const void *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  const __CFDictionary *v26;
  CFTypeID v27;
  void *PrioritizedPixelFormatListByAlpha;
  __CFDictionary *v29;
  __CFDictionary *v30;
  const void *v31;
  const __CFArray *v32;
  const __CFArray *v33;
  const __CFDictionary *v34;
  CFTypeID v35;
  __CFDictionary *MutableCopy;
  const void *v37;
  CFTypeID TypeID;
  CFTypeID v39;
  __CFArray *Mutable;
  __CFArray *v41;
  CFIndex Count;
  CFIndex v43;
  CFIndex v44;
  int v45;
  const void *v46;
  const void *ValueAtIndex;
  const void *v48;
  CFTypeID v49;
  __CFArray *v50;
  const __CFNumber *v51;
  const void *v52;
  CFTypeID v53;
  CFTypeID v54;
  uint64_t v55;
  const void *v56;
  const __CFDictionary *v57;
  const void *v58;
  const __CFArray *v59;
  CVPixelBufferPoolRef *v60;
  const __CFArray *v61;
  CFTypeID v62;
  CFNumberRef v63;
  const void *v64;
  __CFDictionary *v65;
  __CFDictionary *v66;
  uint64_t v67;
  const __CFDictionary *v68;
  uint64_t v69;
  const void *v70;
  uint64_t v71;
  int v72;
  const __CFDictionary *v73;
  unsigned int FirstPixelFormatFromPixelBufferAttributes;
  const __CFDictionary *v75;
  CVPixelBufferPoolRef *v76;
  CVPixelBufferPoolRef *v77;
  __CFDictionary *v78;
  const __CFDictionary *v79;
  unsigned int v80;
  _BYTE *v81;
  int v82;
  int v83;
  __CFDictionary *v84;
  const __CFAllocator *v85;
  CFTypeID v86;
  CFTypeID v87;
  const __CFDictionary *v88;
  void *v89;
  const __CFArray *v90;
  const __CFArray *v91;
  const __CFArray *v92;
  CFTypeID v93;
  CFIndex v94;
  const __CFDictionary *v95;
  const void *v96;
  const void *v97;
  const void *v98;
  const void *v99;
  CFTypeID v100;
  CFIndex v101;
  OSType v102;
  unsigned int v103;
  int CanTransfer;
  CFIndex v105;
  CFTypeID v106;
  CFTypeID v107;
  BOOL v108;
  CFIndex v109;
  CFTypeID v110;
  CFTypeID v111;
  __CFDictionary *v112;
  const __CFArray *v113;
  const void *v114;
  const void *v115;
  __CFDictionary *v116;
  const __CFArray *v117;
  const void *v118;
  const void *v119;
  __int16 v121;
  __CFArray *v122;
  const __CFDictionary *v123;
  unsigned int v124;
  unsigned int v125;
  const __CFDictionary *v126;
  const void *v127;
  int v128;
  const __CFDictionary *cf;
  __CFDictionary *v130;
  _BOOL4 DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection;
  const void *v132;
  char v134;
  const __CFDictionary *value;
  void *valuea;
  __int128 cf1;
  const __CFDictionary *cf1a;
  const __CFAllocator *alloc;
  void *key;
  CFIndex keya;
  const void *v142;
  _BYTE *v143;
  char v144;
  uint64_t valuePtr;
  CVPixelBufferPoolRef poolOut;
  __CFDictionary *v147;
  __CFDictionary *v148;
  __CFDictionary *v149;
  CFDictionaryRef resolvedDictionaryOut;
  int v151;
  double v152;
  double v153[2];
  CFRange v154;

  v149 = 0;
  resolvedDictionaryOut = 0;
  v147 = 0;
  v148 = 0;
  valuePtr = 0;
  poolOut = 0;
  v144 = 0;
  if (vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((_BOOL8)a2))
  {
    DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection = vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((_BOOL8)a3);
    if (a10)
    {
LABEL_3:
      v21 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection = 0;
    if (a10)
      goto LABEL_3;
  }
  if (initDefaultsCommon_onceToken_0 != -1)
    dispatch_once_f(&initDefaultsCommon_onceToken_0, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce_0);
  v21 = sAllowMetalTransferSession_0;
LABEL_8:
  v134 = v21;
  if (!a8)
  {
    value = a2;
    v30 = 0;
    goto LABEL_31;
  }
  v22 = (const void **)MEMORY[0x1E0CA9040];
  if (!a2)
  {
    v30 = 0;
    value = 0;
    if (!a3)
      goto LABEL_31;
    goto LABEL_23;
  }
  v23 = (const void *)*MEMORY[0x1E0CA9040];
  value = a2;
  v24 = (const __CFArray *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA9040]);
  if (!v24)
  {
LABEL_22:
    v30 = 0;
    if (!a3)
      goto LABEL_31;
LABEL_23:
    v31 = *v22;
    v32 = (const __CFArray *)CFDictionaryGetValue(a3, *v22);
    if (v32)
    {
      v33 = v32;
      v34 = a3;
      v35 = CFGetTypeID(v32);
      if (v35 != CFArrayGetTypeID())
      {
        cf = 0;
        a3 = v34;
        if (a4)
          goto LABEL_32;
        goto LABEL_35;
      }
      a3 = v34;
      if (CFArrayGetCount(v33))
      {
        PrioritizedPixelFormatListByAlpha = vtCreatePrioritizedPixelFormatListByAlpha(v33);
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
          v57 = 0;
          v41 = 0;
          v56 = 0;
          v60 = 0;
          v78 = 0;
          cf = 0;
          goto LABEL_242;
        }
        a3 = MutableCopy;
        CFDictionarySetValue(MutableCopy, v31, PrioritizedPixelFormatListByAlpha);
        if (PrioritizedPixelFormatListByAlpha)
          CFRelease(PrioritizedPixelFormatListByAlpha);
        cf = a3;
        if (a4)
        {
LABEL_32:
          PrioritizedPixelFormatListByAlpha = (void *)FigCFDictionaryCreateMutableCopy();
          if (PrioritizedPixelFormatListByAlpha)
          {
            v37 = (const void *)*MEMORY[0x1E0CA9068];
            v127 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA9068]);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)PrioritizedPixelFormatListByAlpha, v37);
            goto LABEL_36;
          }
          v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
          v57 = 0;
          v41 = 0;
          v56 = 0;
          v60 = 0;
          v78 = 0;
LABEL_242:
          if (v30)
            CFRelease(v30);
          if (cf)
            CFRelease(cf);
          if (PrioritizedPixelFormatListByAlpha)
            goto LABEL_247;
          goto LABEL_248;
        }
LABEL_35:
        PrioritizedPixelFormatListByAlpha = 0;
        v127 = 0;
LABEL_36:
        v124 = a8;
        v125 = a7;
        v123 = a4;
        if (a6)
        {
          TypeID = CFBooleanGetTypeID();
          if (TypeID == CFGetTypeID(a6))
          {
            v128 = CFBooleanGetValue(a6);
            if (v128)
            {
              valuePtr = -1;
              goto LABEL_43;
            }
          }
          else
          {
            v39 = CFNumberGetTypeID();
            if (v39 == CFGetTypeID(a6))
            {
              CFNumberGetValue(a6, kCFNumberSInt64Type, &valuePtr);
              v128 = 1;
              goto LABEL_43;
            }
          }
        }
        v128 = 0;
LABEL_43:
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        v41 = Mutable;
        if (value)
          CFArrayAppendValue(Mutable, value);
        v130 = v30;
        if (a3)
          CFArrayAppendValue(v41, a3);
        v126 = a3;
        v132 = PrioritizedPixelFormatListByAlpha;
        alloc = a1;
        v151 = 0;
        Count = CFArrayGetCount(v41);
        if (Count >= 1)
        {
          v43 = Count;
          v44 = 0;
          cf1 = 0uLL;
          v45 = 0;
          v142 = (const void *)*MEMORY[0x1E0CA8DF8];
          key = (void *)*MEMORY[0x1E0CA8EE8];
          v46 = (const void *)*MEMORY[0x1E0CA8FF0];
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v41, v44);
            if (ValueAtIndex)
            {
              v48 = ValueAtIndex;
              v49 = CFDictionaryGetTypeID();
              if (v49 == CFGetTypeID(v48))
                break;
            }
LABEL_68:
            if (v43 == ++v44)
              goto LABEL_71;
          }
          v50 = v41;
          v51 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v48, v142);
          v52 = CFDictionaryGetValue((CFDictionaryRef)v48, key);
          if (v51)
          {
            v53 = CFNumberGetTypeID();
            if (v53 == CFGetTypeID(v51))
            {
              if (*((_QWORD *)&cf1 + 1))
              {
                v152 = 0.0;
                v153[0] = 0.0;
                CFNumberGetValue(*((CFNumberRef *)&cf1 + 1), kCFNumberDoubleType, v153);
                CFNumberGetValue(v51, kCFNumberDoubleType, &v152);
                v41 = v50;
                if (vabdd_f64(v153[0], v152) >= 0.01)
                  goto LABEL_72;
                if (!v52)
                  goto LABEL_64;
                goto LABEL_59;
              }
              *((_QWORD *)&cf1 + 1) = v51;
            }
          }
          v41 = v50;
          if (!v52)
            goto LABEL_64;
LABEL_59:
          v54 = CFStringGetTypeID();
          if (v54 == CFGetTypeID(v52))
          {
            if ((_QWORD)cf1)
            {
              if (!CFEqual((CFTypeRef)cf1, v52))
                goto LABEL_72;
            }
            else
            {
              *(_QWORD *)&cf1 = v52;
            }
          }
LABEL_64:
          CFDictionaryGetValue((CFDictionaryRef)v48, v46);
          FigCFDictionaryGetIntIfPresent();
          if (v45)
          {
            if (v45 != v151)
              goto LABEL_72;
          }
          else
          {
            v45 = v151;
          }
          goto LABEL_68;
        }
        v45 = 0;
        cf1 = 0uLL;
LABEL_71:
        if (!CVPixelBufferCreateResolvedAttributesDictionary(0, v41, &resolvedDictionaryOut))
        {
          if (!resolvedDictionaryOut)
            goto LABEL_98;
          if (cf1 != 0)
          {
            v64 = (const void *)*MEMORY[0x1E0CA8DF8];
            if (!CFDictionaryGetValue(resolvedDictionaryOut, (const void *)*MEMORY[0x1E0CA8DF8]))
            {
              v65 = CFDictionaryCreateMutableCopy(0, 0, resolvedDictionaryOut);
              if (!v65)
                goto LABEL_72;
              v66 = v65;
              if (*((_QWORD *)&cf1 + 1))
                CFDictionaryAddValue(v65, v64, *((const void **)&cf1 + 1));
              if ((_QWORD)cf1)
                CFDictionaryAddValue(v66, (const void *)*MEMORY[0x1E0CA8EE8], (const void *)cf1);
              CFRelease(resolvedDictionaryOut);
              resolvedDictionaryOut = v66;
            }
          }
          if (v45)
          {
            LODWORD(v153[0]) = 0;
            if (CFDictionaryGetValue(resolvedDictionaryOut, (const void *)*MEMORY[0x1E0CA8FF0]))
            {
              FigCFDictionaryGetIntIfPresent();
              if (!LODWORD(v153[0]))
              {
                v67 = FigCFDictionaryCreateMutableCopy();
                if (v67)
                {
                  v68 = (const __CFDictionary *)v67;
                  v69 = FigCFDictionaryCreateMutableCopy();
                  if (v69)
                  {
                    v70 = (const void *)v69;
                    FigCFDictionarySetInt();
                    FigCFDictionarySetValue();
                    CFRelease(v70);
                    if (resolvedDictionaryOut)
                      CFRelease(resolvedDictionaryOut);
                    resolvedDictionaryOut = v68;
                  }
                  else
                  {
                    CFRelease(v68);
                  }
                }
              }
            }
          }
        }
LABEL_72:
        if (resolvedDictionaryOut)
        {
          v55 = vtCreateUsablePixelBufferAttributes(alloc, a5, resolvedDictionaryOut, 0, 0, &v149, 0);
          v30 = v130;
          v56 = v132;
          if (!(_DWORD)v55)
          {
            v57 = v149;
            LODWORD(v153[0]) = vtGetFirstPixelFormatFromPixelBufferAttributes(v149, v125, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection);
            if (!v57)
            {
              v60 = a12;
              goto LABEL_102;
            }
            v58 = (const void *)*MEMORY[0x1E0CA9040];
            v59 = (const __CFArray *)CFDictionaryGetValue(v57, (const void *)*MEMORY[0x1E0CA9040]);
            v60 = a12;
            if (v59 && (v61 = v59, v62 = CFArrayGetTypeID(), v62 == CFGetTypeID(v61)) && CFArrayGetCount(v61) != 1)
            {
              v63 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, v153);
              v154.length = CFArrayGetCount(v61);
              v154.location = 0;
              if (CFArrayContainsValue(v61, v154, v63))
              {
                v57 = CFDictionaryCreateMutableCopy(alloc, 0, v57);
                CFDictionarySetValue(v57, v58, v63);
                if (!v63)
                  goto LABEL_102;
                goto LABEL_80;
              }
            }
            else
            {
              v63 = 0;
            }
            v57 = (const __CFDictionary *)CFRetain(v57);
            if (!v63)
            {
LABEL_102:
              if (v128)
              {
                v144 = 0;
                if (!vtCreateOrReuseSharedPixelBufferPool(alloc, v132, v57, (const __CFArray *)valuePtr, v127, &poolOut, &v144))
                {
LABEL_104:
                  CVPixelBufferPoolRelease(*a11);
                  *a11 = poolOut;
                  if (a13)
                    *a13 = v144;
                  if (v60)
                  {
                    CVPixelBufferPoolRelease(*v60);
                    v76 = v60;
                    v77 = 0;
                    v60 = 0;
                    v78 = 0;
                    PrioritizedPixelFormatListByAlpha = 0;
                    *v76 = 0;
                    goto LABEL_242;
                  }
                  v77 = 0;
                  goto LABEL_120;
                }
              }
              else if (!vtCreateNamedPixelBufferPool(alloc, v132, v57, v127, &poolOut))
              {
                goto LABEL_104;
              }
              v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
LABEL_119:
              v60 = 0;
LABEL_120:
              v78 = 0;
LABEL_241:
              PrioritizedPixelFormatListByAlpha = 0;
              goto LABEL_242;
            }
LABEL_80:
            CFRelease(v63);
            goto LABEL_102;
          }
          v77 = (CVPixelBufferPoolRef *)v55;
LABEL_118:
          v57 = 0;
          goto LABEL_119;
        }
LABEL_98:
        LOBYTE(v151) = 0;
        v71 = vtCreateUsablePixelBufferAttributes(alloc, a5, value, v126, 1, &v148, (char *)&v151);
        v30 = v130;
        v56 = v132;
        if ((_DWORD)v71
          || ((v72 = v151, !(_BYTE)v151)
            ? (v75 = v148, v73 = v126)
            : (const __CFDictionary *)(v73 = v126,
                                       FirstPixelFormatFromPixelBufferAttributes = vtGetFirstPixelFormatFromPixelBufferAttributes(v126, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection), v75 = v148, v72 = FirstPixelFormatFromPixelBufferAttributes == vtGetFirstPixelFormatFromPixelBufferAttributes(v148, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection)), v71 = vtCreateUsablePixelBufferAttributes(alloc, a5, v73, v75, v72 ^ 1u, &v147, 0), (_DWORD)v71))
        {
          v77 = (CVPixelBufferPoolRef *)v71;
          goto LABEL_238;
        }
        v79 = v147;
        if (v147 && !(_BYTE)v151)
        {
          v147 = 0;
          v77 = (CVPixelBufferPoolRef *)vtCreateReorderedPixelBufferAttributes(alloc, v79, v75, &v147);
          CFRelease(v79);
          if ((_DWORD)v77)
            goto LABEL_238;
          v79 = v147;
          v80 = vtGetFirstPixelFormatFromPixelBufferAttributes(v147, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection);
          if (v80 != vtGetFirstPixelFormatFromPixelBufferAttributes(v75, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection))
          {
            v148 = 0;
            v77 = (CVPixelBufferPoolRef *)vtCreateReorderedPixelBufferAttributes(alloc, v75, v79, &v148);
            CFRelease(v75);
            if ((_DWORD)v77)
              goto LABEL_118;
          }
        }
        v81 = a14;
        v82 = a9;
        if (v79)
        {
          LODWORD(v153[0]) = 0;
          LODWORD(v152) = 0;
          v77 = a12;
          v83 = vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((_BOOL8)v79)
             && vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((_BOOL8)v148);
          v86 = CFDictionaryGetTypeID();
          if (v86 == CFGetTypeID(v79) && (v87 = CFDictionaryGetTypeID(), v88 = v148, v87 == CFGetTypeID(v148)))
          {
            v89 = (void *)*MEMORY[0x1E0CA9040];
            v90 = (const __CFArray *)CFDictionaryGetValue(v79, (const void *)*MEMORY[0x1E0CA9040]);
            valuea = v89;
            v91 = (const __CFArray *)CFDictionaryGetValue(v88, v89);
            if (v90)
            {
              v92 = v91;
              if (v91)
              {
                v93 = CFArrayGetTypeID();
                if (v93 == CFGetTypeID(v90))
                  keya = CFArrayGetCount(v90);
                else
                  keya = 1;
                v100 = CFArrayGetTypeID();
                cf1a = v88;
                if (v100 == CFGetTypeID(v92))
                  v101 = CFArrayGetCount(v92);
                else
                  v101 = 1;
                v102 = vtGetFirstPixelFormatFromPixelBufferAttributes(v79, 0, v83);
                v103 = vtGetFirstPixelFormatFromPixelBufferAttributes(v88, 0, v83);
                CanTransfer = 0;
                if (v102 == v103)
                  CanTransfer = VTPixelTransferSessionCanTransfer(v102, v102, 0);
                if (keya < 1)
                {
                  v84 = v79;
                  v30 = v130;
                  v56 = v132;
                  v77 = a12;
                  v85 = alloc;
LABEL_212:
                  v82 = a9;
                }
                else
                {
                  v105 = 0;
                  v122 = v41;
                  while (1)
                  {
                    LODWORD(v153[0]) = 0;
                    v106 = CFArrayGetTypeID();
                    if (v106 == CFGetTypeID(v90))
                    {
                      FigCFArrayGetInt32AtIndex();
                    }
                    else
                    {
                      v107 = CFNumberGetTypeID();
                      if (v107 == CFGetTypeID(v90))
                        CFNumberGetValue(v90, kCFNumberSInt32Type, v153);
                    }
                    v108 = CanTransfer != 0;
                    if (LODWORD(v153[0]) == v102)
                      v108 = 0;
                    if (!v108 && v101 >= 1)
                      break;
LABEL_201:
                    ++v105;
                    v41 = v122;
                    if (v105 == keya)
                    {
                      v84 = v79;
                      v30 = v130;
                      v56 = v132;
LABEL_211:
                      v85 = alloc;
                      v77 = a12;
                      v81 = a14;
                      goto LABEL_212;
                    }
                  }
                  v109 = 0;
                  while (1)
                  {
                    LODWORD(v152) = 0;
                    v110 = CFArrayGetTypeID();
                    if (v110 == CFGetTypeID(v92))
                    {
                      FigCFArrayGetInt32AtIndex();
                    }
                    else
                    {
                      v111 = CFNumberGetTypeID();
                      if (v111 == CFGetTypeID(v92))
                        CFNumberGetValue(v92, kCFNumberSInt32Type, &v152);
                    }
                    if ((!CanTransfer || LODWORD(v152) == v103)
                      && LODWORD(v153[0])
                      && LODWORD(v152)
                      && VTPixelTransferSessionCanTransfer(LODWORD(v153[0]), LODWORD(v152), 0))
                    {
                      break;
                    }
                    if (v101 == ++v109)
                      goto LABEL_201;
                  }
                  if (!(v109 | v105))
                  {
                    v84 = v79;
                    v30 = v130;
                    v56 = v132;
                    v41 = v122;
                    goto LABEL_211;
                  }
                  v112 = 0;
                  v30 = v130;
                  if (keya >= 2 && v105)
                  {
                    v113 = (const __CFArray *)FigCFArrayCreateMutableCopy();
                    v114 = CFArrayGetValueAtIndex(v113, v105);
                    if (v114)
                    {
                      v115 = v114;
                      CFRetain(v114);
                      CFArrayRemoveValueAtIndex(v113, v105);
                      CFArrayInsertValueAtIndex(v113, 0, v115);
                      CFRelease(v115);
                    }
                    else
                    {
                      CFArrayRemoveValueAtIndex(v113, v105);
                      CFArrayInsertValueAtIndex(v113, 0, 0);
                    }
                    v84 = CFDictionaryCreateMutableCopy(alloc, 0, v79);
                    CFDictionarySetValue(v84, valuea, v113);
                    v147 = v84;
                    if (v84)
                      CFRetain(v84);
                    CFRelease(v79);
                    v112 = v84;
                  }
                  else
                  {
                    v84 = v79;
                    v113 = 0;
                  }
                  v116 = 0;
                  v85 = alloc;
                  v117 = 0;
                  if (v101 < 2)
                  {
                    v77 = a12;
                  }
                  else
                  {
                    v77 = a12;
                    if (v109)
                    {
                      v117 = (const __CFArray *)FigCFArrayCreateMutableCopy();
                      v118 = CFArrayGetValueAtIndex(v117, v109);
                      if (v118)
                      {
                        v119 = v118;
                        CFRetain(v118);
                        CFArrayRemoveValueAtIndex(v117, v109);
                        CFArrayInsertValueAtIndex(v117, 0, v119);
                        CFRelease(v119);
                      }
                      else
                      {
                        CFArrayRemoveValueAtIndex(v117, v109);
                        CFArrayInsertValueAtIndex(v117, 0, 0);
                      }
                      v116 = CFDictionaryCreateMutableCopy(alloc, 0, cf1a);
                      CFDictionarySetValue(v116, valuea, v117);
                      v148 = v116;
                      if (v116)
                        CFRetain(v116);
                      if (cf1a)
                        CFRelease(cf1a);
                    }
                  }
                  if (v113)
                    CFRelease(v113);
                  v56 = v132;
                  v41 = v122;
                  if (v117)
                    CFRelease(v117);
                  v82 = a9;
                  if (v112)
                    CFRelease(v112);
                  if (v116)
                    CFRelease(v116);
                  v81 = a14;
                }
                goto LABEL_134;
              }
            }
            v84 = v79;
            v56 = v132;
          }
          else
          {
            v84 = v79;
          }
          v85 = alloc;
        }
        else
        {
          v84 = 0;
          v85 = alloc;
          v77 = a12;
        }
LABEL_134:
        if (v82 == 1)
        {
          v94 = FigCFDictionaryGetCount();
          v78 = CFDictionaryCreateMutableCopy(v85, v94, v84);
          v95 = v148;
          if (v148)
          {
            v143 = v81;
            v96 = (const void *)*MEMORY[0x1E0CA90E0];
            CFDictionaryGetValue(v84, (const void *)*MEMORY[0x1E0CA90E0]);
            v97 = CFDictionaryGetValue(v95, v96);
            if (v97)
              CFDictionarySetValue(v78, v96, v97);
            v98 = (const void *)*MEMORY[0x1E0CA8FD8];
            CFDictionaryGetValue(v84, (const void *)*MEMORY[0x1E0CA8FD8]);
            v99 = CFDictionaryGetValue(v95, v98);
            if (v99)
              CFDictionarySetValue(v78, v98, v99);
            v77 = a12;
            if (!FigCFEqual())
            {
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E0CA8FB0]);
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E0CA8FB8]);
            }
            v81 = v143;
            if (!FigCFEqual())
            {
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E0CA8FC0]);
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E0CA8FA0]);
            }
          }
          HIBYTE(v121) = v134;
          LOBYTE(v121) = 0;
          v77 = (CVPixelBufferPoolRef *)vtBuildPixelBufferPoolsCommon(alloc, v78, v84, v123, a5, *MEMORY[0x1E0C9AE50], v125, v124, v121, a11, v77, a13, v81);
          v60 = 0;
          goto LABEL_240;
        }
        if (v127)
        {
          v60 = (CVPixelBufferPoolRef *)CFStringCreateWithFormat(v85, 0, CFSTR("%@_1"), v127);
          if (!v60)
            goto LABEL_172;
        }
        else
        {
          v60 = 0;
        }
        if (v128)
        {
          v144 = 0;
          if (vtCreateOrReuseSharedPixelBufferPool(alloc, v56, v148, (const __CFArray *)valuePtr, v60, &poolOut, &v144))goto LABEL_172;
        }
        else if (vtCreateNamedPixelBufferPool(alloc, v56, v148, v60, &poolOut))
        {
          goto LABEL_172;
        }
        if (v60)
          CFRelease(v60);
        CVPixelBufferPoolRelease(*a11);
        *a11 = poolOut;
        if (a13)
          *a13 = v144;
        if (v77)
        {
          if (v127)
          {
            v60 = (CVPixelBufferPoolRef *)CFStringCreateWithFormat(alloc, 0, CFSTR("%@_2"), v127);
            if (!v60)
              goto LABEL_172;
          }
          else
          {
            v60 = 0;
          }
          if (v128)
          {
            v144 = 0;
            if (!vtCreateOrReuseSharedPixelBufferPool(alloc, 0, v84, (const __CFArray *)valuePtr, v60, &poolOut, &v144))goto LABEL_167;
          }
          else if (!vtCreateNamedPixelBufferPool(alloc, 0, v84, v60, &poolOut))
          {
LABEL_167:
            if (v60)
              CFRelease(v60);
            CVPixelBufferPoolRelease(*v77);
            *v77 = poolOut;
            v77 = 0;
            if (v81)
            {
              v60 = 0;
              v78 = 0;
              *v81 = v144;
LABEL_240:
              v57 = 0;
              goto LABEL_241;
            }
            goto LABEL_238;
          }
LABEL_172:
          v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
LABEL_239:
          v78 = 0;
          goto LABEL_240;
        }
LABEL_238:
        v60 = 0;
        goto LABEL_239;
      }
    }
LABEL_31:
    cf = 0;
    if (a4)
      goto LABEL_32;
    goto LABEL_35;
  }
  v25 = v24;
  v26 = a3;
  v27 = CFGetTypeID(v24);
  if (v27 != CFArrayGetTypeID())
  {
    a3 = v26;
    goto LABEL_22;
  }
  a3 = v26;
  if (!CFArrayGetCount(v25))
    goto LABEL_22;
  PrioritizedPixelFormatListByAlpha = vtCreatePrioritizedPixelFormatListByAlpha(v25);
  v29 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (v29)
  {
    v30 = v29;
    CFDictionarySetValue(v29, v23, PrioritizedPixelFormatListByAlpha);
    if (PrioritizedPixelFormatListByAlpha)
      CFRelease(PrioritizedPixelFormatListByAlpha);
    value = v30;
    if (!a3)
      goto LABEL_31;
    goto LABEL_23;
  }
  v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
  v57 = 0;
  v41 = 0;
  v56 = 0;
  v60 = 0;
  v78 = 0;
  if (PrioritizedPixelFormatListByAlpha)
LABEL_247:
    CFRelease(PrioritizedPixelFormatListByAlpha);
LABEL_248:
  if (v78)
    CFRelease(v78);
  if (v41)
    CFRelease(v41);
  if (resolvedDictionaryOut)
    CFRelease(resolvedDictionaryOut);
  if (v149)
    CFRelease(v149);
  if (v57)
    CFRelease(v57);
  if (v148)
    CFRelease(v148);
  if (v147)
    CFRelease(v147);
  if (v56)
    CFRelease(v56);
  if (v60)
    CFRelease(v60);
  return v77;
}

CVPixelBufferPoolRef *VTBuildPixelBufferPools2(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5, const __CFBoolean *a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, char a10, CVPixelBufferPoolRef *a11, CVPixelBufferPoolRef *a12, _BYTE *a13, _BYTE *a14)
{
  return vtBuildPixelBufferPoolsCommon(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t VTCreatePixelBufferPoolAttributesWithName(const __CFAllocator *a1, uint64_t a2, const __CFString *cf, __CFDictionary **a4)
{
  CFStringRef v5;
  CFTypeID v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  uint64_t v11;

  if (cf)
  {
    v5 = cf;
    v8 = CFGetTypeID(cf);
    if (v8 == CFStringGetTypeID())
    {
      if (a4)
      {
        if ((_DWORD)a2)
          v5 = CFStringCreateWithFormat(a1, 0, CFSTR("%d:%@"), a2, v5);
        else
          CFRetain(v5);
        Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v10 = Mutable;
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9068], v5);
          v11 = 0;
          *a4 = v10;
          if (!v5)
            return v11;
        }
        else
        {
          v11 = FigSignalErrorAt();
          if (!v5)
            return v11;
        }
        CFRelease(v5);
        return v11;
      }
    }
  }
  return FigSignalErrorAt();
}

void vtAppendNicely(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  __CFString *v6;
  CFTypeID TypeID;
  __CFString *Mutable;
  __CFString *v9;
  __CFString *v10;
  CFTypeID v11;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  _QWORD context[2];

  v6 = *(__CFString **)a3;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    context[1] = 0;
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    CFStringAppend(Mutable, CFSTR("["));
    context[0] = Mutable;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtAppendNicely, context);
    CFStringAppend(Mutable, CFSTR("]"));
    v9 = 0;
    v10 = Mutable;
  }
  else
  {
    v11 = CFArrayGetTypeID();
    if (v11 == CFGetTypeID(a2))
    {
      Count = CFArrayGetCount(a2);
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      CFStringAppend(Mutable, CFSTR("["));
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          if (i)
            CFStringAppend(Mutable, CFSTR(", "));
          CFStringAppendFormat(Mutable, 0, CFSTR("%@"), ValueAtIndex);
        }
      }
      CFStringAppend(Mutable, CFSTR("]"));
      v10 = 0;
      v9 = Mutable;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      Mutable = (__CFString *)a2;
    }
  }
  if (*(_BYTE *)(a3 + 8))
    CFStringAppend(v6, CFSTR(", "));
  CFStringAppendFormat(v6, 0, CFSTR("%@ = %@"), a1, Mutable);
  *(_BYTE *)(a3 + 8) = 1;
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
}

BOOL vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection(_BOOL8 result)
{
  const __CFDictionary *v1;
  unint64_t v2;
  unint64_t v3;
  const void *Value;

  if (result)
  {
    v1 = (const __CFDictionary *)result;
    if (CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E0CA9040]))
    {
      return 1;
    }
    else
    {
      v2 = 0;
      do
      {
        v3 = v2;
        if (v2 == 2)
          break;
        Value = CFDictionaryGetValue(v1, **((const void ***)&vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection_sCVKeysThatConstrainPixelFormatSelection+ v2+ 1));
        v2 = v3 + 1;
      }
      while (!Value);
      return v3 < 2;
    }
  }
  return result;
}

const __CFArray *vtCreatePrioritizedPixelFormatListByAlpha(const __CFArray *a1)
{
  const __CFArray *v1;
  CFTypeID v2;
  const __CFArray *MutableCopy;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;

  v1 = a1;
  v2 = CFGetTypeID(a1);
  if (v2 != CFArrayGetTypeID())
    goto LABEL_13;
  if (!v1)
    return v1;
  if (!CFArrayGetCount(v1))
    return 0;
  MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  if (!MutableCopy)
  {
LABEL_13:
    FigSignalErrorAt();
    return 0;
  }
  v1 = MutableCopy;
  Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    v5 = Count;
    v6 = 0;
    v7 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v1, v6);
      if (vtPixelFormatContainsAlpha((const __CFNumber *)ValueAtIndex))
      {
        if (v6 != v7)
        {
          CFArrayRemoveValueAtIndex(v1, v6);
          CFArrayInsertValueAtIndex(v1, v7, ValueAtIndex);
        }
        ++v7;
      }
      ++v6;
    }
    while (v5 != v6);
  }
  return v1;
}

const __CFDictionary *vtGetFirstPixelFormatFromPixelBufferAttributes(const __CFDictionary *result, int a2, int a3)
{
  const __CFArray *v5;
  CFTypeID v6;
  CFIndex v7;
  const void *v8;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v14;
  CFTypeID v15;
  CFIndex v16;
  const void *v17;
  const void *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  CFTypeID v24;
  CFTypeID v25;
  OSType valuePtr;

  valuePtr = 0;
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA9040]);
    if (result)
    {
      v5 = result;
      v6 = CFGetTypeID(result);
      if (v6 == CFArrayGetTypeID())
      {
        if (!CFArrayGetCount(v5))
          return (const __CFDictionary *)valuePtr;
        if (a3 && CFArrayGetCount(v5) >= 1)
        {
          v7 = 0;
          v8 = (const void *)*MEMORY[0x1E0CA91B0];
          do
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v7);
            if (ValueAtIndex)
            {
              v10 = ValueAtIndex;
              v11 = CFGetTypeID(ValueAtIndex);
              if (v11 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
                DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
                if (DescriptionWithPixelFormatType)
                {
                  Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, v8);
                  if (Value)
                  {
                    v14 = Value;
                    v15 = CFGetTypeID(Value);
                    if (v15 == CFArrayGetTypeID())
                    {
                      CFArrayGetValueAtIndex(v14, 0);
                      FigCFDictionaryGetInt32IfPresent();
                    }
                  }
                }
              }
            }
            ++v7;
          }
          while (v7 < CFArrayGetCount(v5));
        }
        if (a2 && CFArrayGetCount(v5) >= 1)
        {
          v16 = 0;
          v17 = (const void *)*MEMORY[0x1E0CA8FE0];
          v18 = (const void *)*MEMORY[0x1E0CA8FE8];
          do
          {
            v19 = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v16);
            if (v19)
            {
              v20 = v19;
              v21 = CFGetTypeID(v19);
              if (v21 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v20, kCFNumberSInt32Type, &valuePtr);
                v22 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
                if (v22)
                {
                  v23 = v22;
                  if (CFDictionaryContainsKey(v22, v17))
                  {
                    if (!CFDictionaryContainsKey(v23, v18)
                      && VTPixelTransferSessionCanTransfer(valuePtr, valuePtr, 0))
                    {
                      return (const __CFDictionary *)valuePtr;
                    }
                  }
                }
              }
            }
          }
          while (++v16 < CFArrayGetCount(v5));
        }
        valuePtr = 0;
        v5 = (const __CFArray *)CFArrayGetValueAtIndex(v5, 0);
        if (!v5)
          return (const __CFDictionary *)valuePtr;
      }
      else
      {
        v24 = CFGetTypeID(v5);
        if (v24 != CFNumberGetTypeID())
          return (const __CFDictionary *)valuePtr;
      }
      v25 = CFGetTypeID(v5);
      if (v25 == CFNumberGetTypeID())
        CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      return (const __CFDictionary *)valuePtr;
    }
  }
  return result;
}

uint64_t vtCreateOrReuseSharedPixelBufferPool(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, const __CFArray *a4, const void *a5, _QWORD *a6, char *a7)
{
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  CFArrayRef *v14;
  CFArrayRef *v15;
  CFIndex Count;
  CFIndex v17;
  _QWORD *ValueAtIndex;
  _QWORD *v19;
  const void *v20;
  const void *v21;
  CFArrayRef v22;
  uint64_t *v23;
  uint64_t *v24;
  const __CFArray *Mutable;
  CFArrayRef *v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t NamedPixelBufferPool;
  CFTypeRef v33;
  CFTypeRef v34;
  _QWORD *v35;
  char v36;
  CFTypeRef v37;
  uint64_t v38;
  const void *v39;
  CFArrayRef v40;
  const void *v42;
  const void *v43;
  char *v44;
  CFTypeRef cf;

  cf = 0;
  MEMORY[0x1940281CC](&vtCreateOrReuseSharedPixelBufferPool_sInitializeVTPSharedPoolOnce, vtInitializeVTPSharedPool);
  v11 = 0x1EE284000uLL;
  MEMORY[0x1940280C4](gVTPSharedPool_0);
  v12 = 0x1EE284000uLL;
  v13 = (_QWORD *)gVTPSharedPool_1;
  if (!gVTPSharedPool_1)
    goto LABEL_28;
  v44 = a7;
  v14 = 0;
  do
  {
    while (1)
    {
      while (1)
      {
        v15 = (CFArrayRef *)v13;
        v13 = (_QWORD *)*v13;
        Count = CFArrayGetCount(v15[2]);
        if (Count >= 1)
        {
          v17 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v15[2], v17);
            if (*ValueAtIndex)
            {
              ++v17;
            }
            else
            {
              v19 = ValueAtIndex;
              MEMORY[0x194027980]();
              v20 = (const void *)v19[1];
              if (v20)
              {
                CFRelease(v20);
                v19[1] = 0;
              }
              v21 = (const void *)v19[2];
              if (v21)
              {
                CFRelease(v21);
                v19[2] = 0;
              }
              CFArrayRemoveValueAtIndex(v15[2], v17);
              free(v19);
              --Count;
            }
          }
          while (v17 < Count);
        }
        if (v15[1] != a4)
          break;
        v14 = v15;
        if (!v13)
          goto LABEL_26;
      }
      if (!Count)
        break;
      if (!v13)
        goto LABEL_26;
    }
    v22 = v15[2];
    if (v22)
    {
      CFRelease(v22);
      v15[2] = 0;
    }
    v15[1] = 0;
    v23 = (uint64_t *)gVTPSharedPool_1;
    if ((CFArrayRef *)gVTPSharedPool_1 == v15)
    {
      v24 = &gVTPSharedPool_1;
    }
    else
    {
      do
      {
        v24 = v23;
        v23 = (uint64_t *)*v23;
      }
      while (v23 != (uint64_t *)v15);
    }
    *v24 = (uint64_t)*v15;
    free(v15);
  }
  while (v13);
LABEL_26:
  v11 = 0x1EE284000;
  a7 = v44;
  v12 = 0x1EE284000;
  if (v14)
  {
    Mutable = v14[2];
  }
  else
  {
LABEL_28:
    v26 = (CFArrayRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x102004014030ADEuLL);
    v14 = v26;
    if (!v26 || (v26[1] = a4, Mutable = CFArrayCreateMutable(0, 0, 0), (v14[2] = Mutable) == 0))
    {
      v38 = FigSignalErrorAt();
      v31 = 0;
      goto LABEL_47;
    }
    *v14 = *(CFArrayRef *)(v12 + 3984);
    *(_QWORD *)(v12 + 3984) = v14;
  }
  v27 = CFArrayGetCount(Mutable);
  if (v27 >= 1)
  {
    v28 = v27;
    v29 = 0;
    while (1)
    {
      v30 = CFArrayGetValueAtIndex(v14[2], v29);
      if (FigCFEqual())
      {
        if (FigCFEqual())
          break;
      }
      if (v28 == ++v29)
        goto LABEL_36;
    }
    v37 = (CFTypeRef)MEMORY[0x1940279B0](v30);
    cf = v37;
    if (v37)
    {
      v36 = 1;
      v35 = a6;
      goto LABEL_45;
    }
    MEMORY[0x194027980](v30);
    v42 = (const void *)v30[1];
    if (v42)
    {
      CFRelease(v42);
      v30[1] = 0;
    }
    v43 = (const void *)v30[2];
    if (v43)
    {
      CFRelease(v43);
      v30[2] = 0;
    }
    CFArrayRemoveValueAtIndex(v14[2], v29);
    free(v30);
  }
LABEL_36:
  v31 = malloc_type_calloc(1uLL, 0x18uLL, 0x6004082687C62uLL);
  if (!v31)
  {
    NamedPixelBufferPool = FigSignalErrorAt();
    goto LABEL_67;
  }
  NamedPixelBufferPool = vtCreateNamedPixelBufferPool(a1, a2, a3, a5, (CVPixelBufferPoolRef *)&cf);
  if ((_DWORD)NamedPixelBufferPool)
  {
LABEL_67:
    v38 = NamedPixelBufferPool;
    v14 = 0;
    goto LABEL_47;
  }
  FigCFWeakReferenceInit();
  if (a3)
    v33 = CFRetain(a3);
  else
    v33 = 0;
  v31[1] = v33;
  if (a2)
    v34 = CFRetain(a2);
  else
    v34 = 0;
  v35 = a6;
  v31[2] = v34;
  CFArrayAppendValue(v14[2], v31);
  v36 = 0;
  v37 = cf;
LABEL_45:
  *v35 = v37;
  cf = 0;
  v38 = 0;
  v14 = 0;
  v31 = 0;
  if (a7)
    *a7 = v36;
LABEL_47:
  MEMORY[0x1940280D0](*(_QWORD *)(v11 + 3976));
  if (cf)
    CFRelease(cf);
  if (v31)
  {
    FigCFWeakReferenceStore();
    v39 = (const void *)v31[1];
    if (v39)
      CFRelease(v39);
    free(v31);
  }
  if (v14)
  {
    v40 = v14[2];
    if (v40)
      CFRelease(v40);
    free(v14);
  }
  return v38;
}

uint64_t vtCreateNamedPixelBufferPool(CFAllocatorRef allocator, CFTypeRef cf, CFDictionaryRef pixelBufferAttributes, const void *a4, CVPixelBufferPoolRef *poolOut)
{
  __CFDictionary *MutableCopy;
  const __CFDictionary *v10;
  uint64_t v11;

  if (a4)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      v10 = MutableCopy;
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA9068], a4);
      v11 = CVPixelBufferPoolCreate(allocator, v10, pixelBufferAttributes, poolOut);
LABEL_4:
      CFRelease(v10);
      return v11;
    }
    return FigSignalErrorAt();
  }
  else
  {
    if (cf)
    {
      v10 = (const __CFDictionary *)CFRetain(cf);
      v11 = CVPixelBufferPoolCreate(allocator, v10, pixelBufferAttributes, poolOut);
      if (!v10)
        return v11;
      goto LABEL_4;
    }
    return CVPixelBufferPoolCreate(allocator, 0, pixelBufferAttributes, poolOut);
  }
}

uint64_t vtCreateReorderedPixelBufferAttributes(const __CFAllocator *a1, CFDictionaryRef theDict, const __CFDictionary *a3, __CFDictionary **a4)
{
  const void *v8;
  const void *Value;
  const void *v10;
  CFTypeID TypeID;
  CFTypeID v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  CFTypeID v16;
  CFIndex Count;
  CFIndex v18;
  CFMutableArrayRef MutableCopy;
  CFMutableArrayRef v20;
  CFMutableArrayRef Mutable;
  CFTypeID v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  const void *ValueAtIndex;
  CFTypeID v27;
  CFIndex FirstIndexOfValue;
  __CFDictionary *v29;
  CFIndex v30;
  CFIndex v31;
  __CFArray *v32;
  __CFArray *v33;
  CFIndex v34;
  CFTypeID v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  const void *v39;
  CFTypeID v40;
  const void *v41;
  const void *v42;
  CFIndex v43;
  const void *SimilarPixelFormat;
  CFIndex v45;
  CFIndex v46;
  CFIndex v47;
  CFTypeID v48;
  unsigned int PixelFormatColorSpace;
  int PixelFormatBitsPerComponent;
  signed int v51;
  int v52;
  CFIndex v53;
  CFIndex v54;
  const __CFNumber *v55;
  signed int v56;
  CFTypeID v57;
  CFIndex v58;
  CFIndex v59;
  CFIndex v60;
  const __CFNumber *v61;
  CFTypeID v62;
  unsigned int v63;
  CFIndex v64;
  CFIndex v65;
  const void *v66;
  CFIndex v67;
  CFIndex v68;
  const void *v69;
  int v70;
  CFIndex i;
  const void *v72;
  __CFDictionary *v73;
  __CFDictionary *v74;
  uint64_t v75;
  unsigned int v77;
  const __CFAllocator *allocator;
  __CFArray *theArray;
  int PixelFormatRange;
  CFIndex range;
  CFRange v82;
  CFRange v83;
  CFRange v84;
  CFRange v85;
  CFRange v86;

  if (!theDict)
  {
    v29 = 0;
LABEL_81:
    v75 = 0;
    *a4 = v29;
    return v75;
  }
  v8 = (const void *)*MEMORY[0x1E0CA9040];
  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA9040]);
  if (!Value)
    goto LABEL_80;
  v10 = Value;
  TypeID = CFArrayGetTypeID();
  v12 = CFGetTypeID(v10);
  if (!a3)
    goto LABEL_80;
  if (TypeID != v12)
    goto LABEL_80;
  v13 = CFDictionaryGetValue(a3, v8);
  if (!v13)
    goto LABEL_80;
  v14 = v13;
  v15 = CFGetTypeID(v13);
  if (v15 != CFNumberGetTypeID())
  {
    v16 = CFGetTypeID(v14);
    if (v16 != CFArrayGetTypeID())
      return FigSignalErrorAt();
  }
  Count = CFArrayGetCount((CFArrayRef)v10);
  if (Count < 2 || (v18 = Count, (MutableCopy = CFArrayCreateMutableCopy(a1, 0, (CFArrayRef)v10)) == 0))
  {
LABEL_80:
    v29 = (__CFDictionary *)CFRetain(theDict);
    goto LABEL_81;
  }
  v20 = MutableCopy;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_79:
    CFRelease(v20);
    goto LABEL_80;
  }
  allocator = a1;
  theArray = Mutable;
  v22 = CFArrayGetTypeID();
  range = v18;
  if (v22 == CFGetTypeID(v14))
  {
    v23 = CFArrayGetCount((CFArrayRef)v14);
    if (v23 >= 1)
    {
      v24 = v23;
      v25 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v14, v25);
        v27 = CFNumberGetTypeID();
        if (v27 == CFGetTypeID(ValueAtIndex))
        {
          v82.location = 0;
          v82.length = range;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v20, v82, ValueAtIndex);
          if (FirstIndexOfValue != -1)
            break;
        }
        if (v24 == ++v25)
          goto LABEL_21;
      }
      v47 = FirstIndexOfValue;
      v32 = theArray;
      CFArrayAppendValue(theArray, ValueAtIndex);
      v33 = v20;
      v34 = v47;
LABEL_34:
      CFArrayRemoveValueAtIndex(v33, v34);
      goto LABEL_73;
    }
  }
  else
  {
    v83.location = 0;
    v83.length = v18;
    v30 = CFArrayGetFirstIndexOfValue(v20, v83, v14);
    if (v30 != -1)
    {
      v31 = v30;
      v32 = theArray;
      CFArrayAppendValue(theArray, v14);
      v33 = v20;
      v34 = v31;
      goto LABEL_34;
    }
  }
LABEL_21:
  v35 = CFArrayGetTypeID();
  if (v35 != CFGetTypeID(v14))
  {
    SimilarPixelFormat = (const void *)vtCreateSimilarPixelFormat((const __CFNumber *)v14);
    if (SimilarPixelFormat)
    {
      v42 = SimilarPixelFormat;
      v85.location = 0;
      v85.length = range;
      v45 = CFArrayGetFirstIndexOfValue(v20, v85, SimilarPixelFormat);
      v32 = theArray;
      if (v45 != -1)
      {
        v46 = v45;
        goto LABEL_72;
      }
      CFRelease(v42);
    }
LABEL_36:
    v48 = CFNumberGetTypeID();
    v32 = theArray;
    if (v48 == CFGetTypeID(v14))
    {
      PixelFormatColorSpace = vtGetPixelFormatColorSpace((const __CFNumber *)v14);
      PixelFormatRange = vtGetPixelFormatRange((uint64_t)v14);
      PixelFormatBitsPerComponent = vtGetPixelFormatBitsPerComponent((const __CFNumber *)v14);
      v77 = PixelFormatColorSpace;
      if (PixelFormatColorSpace)
      {
LABEL_38:
        v51 = PixelFormatBitsPerComponent;
        if (PixelFormatBitsPerComponent < 1)
        {
          v52 = 0;
        }
        else
        {
          v52 = 0;
          v53 = 0;
          v54 = range;
          do
          {
            v55 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, v53);
            v56 = vtGetPixelFormatBitsPerComponent(v55);
            if (v56 < v51)
            {
              CFArrayRemoveValueAtIndex(v20, v53);
              CFArrayAppendValue(v20, v55);
              --v53;
              --v54;
            }
            if (v52 <= v56)
              v52 = v56;
            ++v53;
          }
          while (v53 < v54);
        }
        v32 = theArray;
        if (v52 < v51)
        {
          v64 = 0;
          v65 = range;
          do
          {
            v66 = CFArrayGetValueAtIndex(v20, v64);
            if ((int)vtGetPixelFormatBitsPerComponent((const __CFNumber *)v66) < v52)
            {
              CFArrayRemoveValueAtIndex(v20, v64);
              CFArrayAppendValue(v20, v66);
              --v64;
              --v65;
            }
            ++v64;
          }
          while (v64 < v65);
        }
        if (PixelFormatRange && v77 >= 2)
        {
          v67 = 0;
          v68 = range;
          do
          {
            v69 = CFArrayGetValueAtIndex(v20, v67);
            if (vtGetPixelFormatRange((uint64_t)v69) != PixelFormatRange)
            {
              CFArrayRemoveValueAtIndex(v20, v67);
              CFArrayAppendValue(v20, v69);
              --v67;
              --v68;
            }
            ++v67;
          }
          while (v67 < v68);
        }
        v70 = 0;
        for (i = 0; i != range; ++i)
        {
          v72 = CFArrayGetValueAtIndex(v20, i);
          if (vtGetPixelFormatColorSpace((const __CFNumber *)v72) == v77)
            CFArrayInsertValueAtIndex(theArray, v70++, v72);
          else
            CFArrayAppendValue(theArray, v72);
        }
        goto LABEL_74;
      }
    }
    else
    {
      v57 = CFArrayGetTypeID();
      if (v57 == CFGetTypeID(v14))
      {
        v58 = CFArrayGetCount((CFArrayRef)v14);
        if (v58 >= 1)
        {
          v59 = v58;
          v60 = 0;
          while (1)
          {
            v61 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v14, v60);
            v62 = CFNumberGetTypeID();
            if (v62 == CFGetTypeID(v61))
            {
              v63 = vtGetPixelFormatColorSpace(v61);
              if (v63)
                break;
            }
            if (v59 == ++v60)
              goto LABEL_78;
          }
          v77 = v63;
          PixelFormatRange = vtGetPixelFormatRange((uint64_t)v61);
          PixelFormatBitsPerComponent = vtGetPixelFormatBitsPerComponent(v61);
          goto LABEL_38;
        }
      }
    }
LABEL_78:
    CFRelease(v32);
    goto LABEL_79;
  }
  v36 = CFArrayGetCount((CFArrayRef)v14);
  if (v36 < 1)
    goto LABEL_36;
  v37 = v36;
  v38 = 0;
  while (1)
  {
    v39 = CFArrayGetValueAtIndex((CFArrayRef)v14, v38);
    v40 = CFNumberGetTypeID();
    if (v40 != CFGetTypeID(v39))
      goto LABEL_28;
    v41 = (const void *)vtCreateSimilarPixelFormat((const __CFNumber *)v39);
    if (!v41)
      goto LABEL_28;
    v42 = v41;
    v84.location = 0;
    v84.length = range;
    v43 = CFArrayGetFirstIndexOfValue(v20, v84, v41);
    if (v43 != -1)
      break;
    CFRelease(v42);
LABEL_28:
    if (v37 == ++v38)
      goto LABEL_36;
  }
  v46 = v43;
  v32 = theArray;
LABEL_72:
  CFArrayAppendValue(v32, v42);
  CFArrayRemoveValueAtIndex(v20, v46);
  CFRelease(v42);
LABEL_73:
  v86.length = CFArrayGetCount(v20);
  v86.location = 0;
  CFArrayAppendArray(v32, v20, v86);
LABEL_74:
  if (CFArrayGetCount(v32) <= 0)
    goto LABEL_78;
  CFRelease(v20);
  v73 = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
  if (v73)
  {
    v74 = v73;
    CFDictionarySetValue(v73, v8, v32);
    v75 = 0;
    *a4 = v74;
  }
  else
  {
    v75 = 4294954392;
  }
  CFRelease(v32);
  return v75;
}

void vtAllowTransferCapabilityCommonOnce_0()
{
  CFPropertyListRef v0;

  v0 = CFPreferencesCopyValue(CFSTR("allowMetalTransferSession"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  sAllowMetalTransferSession_0 = FigCFEqual() != 0;
  if (v0)
    CFRelease(v0);
}

uint64_t vtPixelFormatContainsAlpha(const __CFNumber *a1)
{
  CFDictionaryRef v1;
  OSType valuePtr;
  unsigned __int8 v4;

  v4 = 0;
  valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], valuePtr);
  FigCFDictionaryGetBooleanIfPresent();
  if (v1)
    CFRelease(v1);
  return v4;
}

CFMutableArrayRef vtCreateReorderedPixelFormatArray(const __CFAllocator *a1, CFArrayRef theArray, __CFArray *a3)
{
  CFMutableArrayRef v3;
  CFMutableArrayRef MutableCopy;
  CFMutableArrayRef v7;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  CFTypeID v10;
  __CFArray *v11;
  CFTypeID v12;
  CFIndex v13;
  const void *ValueAtIndex;
  CFIndex FirstIndexOfValue;
  CFIndex v16;
  CFIndex v17;
  const __CFNumber *v18;
  uint64_t SimilarPixelFormat;
  const void *v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex v23;
  const void *v24;
  int v26;
  int valuePtr;
  CFRange v28;
  CFRange v29;
  CFRange v30;

  v3 = a3;
  if (a3)
  {
    if (CFArrayGetCount(theArray) < 2)
      return 0;
    MutableCopy = CFArrayCreateMutableCopy(a1, 0, theArray);
    if (!MutableCopy)
      return 0;
    v7 = MutableCopy;
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v3 = 0;
      v9 = v7;
      goto LABEL_47;
    }
    v9 = Mutable;
    v10 = CFGetTypeID(v3);
    if (v10 == CFNumberGetTypeID())
    {
      v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      CFArrayAppendValue(v11, v3);
      if (!v11)
      {
LABEL_26:
        CFRelease(v7);
        v3 = 0;
LABEL_47:
        CFRelease(v9);
        return v3;
      }
    }
    else
    {
      v12 = CFGetTypeID(v3);
      if (v12 != CFArrayGetTypeID())
        goto LABEL_26;
      v11 = (__CFArray *)CFRetain(v3);
      if (!v11)
        goto LABEL_26;
    }
    if (!CFArrayGetCount(v11))
      goto LABEL_45;
    if (CFArrayGetCount(v11) >= 1)
    {
      v26 = 0;
      v13 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v11, v13);
        v28.length = CFArrayGetCount(v7);
        v28.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v28, ValueAtIndex);
        if (FirstIndexOfValue != -1)
        {
          v16 = FirstIndexOfValue;
          CFArrayAppendValue(v9, ValueAtIndex);
          CFArrayRemoveValueAtIndex(v7, v16);
        }
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr <= 1111970368)
        {
          if (valuePtr != 32 && valuePtr != 1094862674)
          {
LABEL_22:
            if (vtPixelFormatContainsAlpha((const __CFNumber *)ValueAtIndex))
              v26 = 1;
          }
        }
        else if (valuePtr != 1111970369 && valuePtr != 1647719521 && valuePtr != 1380401729)
        {
          goto LABEL_22;
        }
        if (++v13 >= CFArrayGetCount(v11))
          goto LABEL_28;
      }
    }
    v26 = 0;
LABEL_28:
    if (!CFArrayGetCount(v9) && CFArrayGetCount(v11) >= 1)
    {
      v17 = 0;
      do
      {
        v18 = (const __CFNumber *)CFArrayGetValueAtIndex(v11, v17);
        SimilarPixelFormat = vtCreateSimilarPixelFormat(v18);
        if (SimilarPixelFormat)
        {
          v20 = (const void *)SimilarPixelFormat;
          v29.length = CFArrayGetCount(v7);
          v29.location = 0;
          v21 = CFArrayGetFirstIndexOfValue(v7, v29, v20);
          if (v21 != -1)
          {
            v22 = v21;
            CFArrayAppendValue(v9, v20);
            CFArrayRemoveValueAtIndex(v7, v22);
          }
          CFRelease(v20);
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(v11));
    }
    if (v26 && CFArrayGetCount(v7) >= 1)
    {
      v23 = 0;
      do
      {
        v24 = CFArrayGetValueAtIndex(v7, v23);
        if (vtPixelFormatContainsAlpha((const __CFNumber *)v24))
        {
          CFArrayAppendValue(v9, v24);
          CFArrayRemoveValueAtIndex(v7, v23);
        }
        else
        {
          ++v23;
        }
      }
      while (v23 < CFArrayGetCount(v7));
    }
    if (CFArrayGetCount(v9) >= 1)
    {
      v30.length = CFArrayGetCount(v7);
      v30.location = 0;
      CFArrayAppendArray(v9, v7, v30);
      v3 = v9;
      v9 = 0;
    }
    else
    {
LABEL_45:
      v3 = 0;
    }
    CFRelease(v11);
    CFRelease(v7);
    if (v9)
      goto LABEL_47;
  }
  return v3;
}

uint64_t vtAddNumberToCFDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v5)
    return 4294954392;
  v6 = v5;
  CFDictionaryAddValue(a1, a2, v5);
  CFRelease(v6);
  return 0;
}

BOOL vtIsPixelFormatCompatibleWithAttributes(void *a1, uint64_t a2)
{
  void *v3;
  CFDictionaryRef v4;
  const __CFArray *v5;
  CVReturn v6;
  CFDictionaryRef resolvedDictionaryOut;
  void *values;
  uint64_t v10;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  resolvedDictionaryOut = 0;
  if (!a2)
    return 1;
  v3 = (void *)*MEMORY[0x1E0CA9040];
  v10 = 0;
  keys[0] = v3;
  values = a1;
  v4 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  values = v4;
  v10 = a2;
  v5 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
  v6 = CVPixelBufferCreateResolvedAttributesDictionary(0, v5, &resolvedDictionaryOut);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (resolvedDictionaryOut)
    CFRelease(resolvedDictionaryOut);
  return v6 == 0;
}

uint64_t vtCreateSimilarPixelFormat(const __CFNumber *a1)
{
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr == 1111970369 || valuePtr == 32)
    return FigCFNumberCreateSInt32();
  else
    return 0;
}

const void *vtPixelFormatRequiresRGhAFallback(const void *result)
{
  CFTypeID v1;
  int UInt64;

  if (result)
  {
    v1 = CFGetTypeID(result);
    result = 0;
    if (v1 == CFNumberGetTypeID())
    {
      UInt64 = FigCFNumberGetUInt64();
      if (UInt64 == 1647392369 || UInt64 == 1651521076 || UInt64 == 1651519798)
        return (const void *)1;
    }
  }
  return result;
}

uint64_t vtInitializeVTPSharedPool()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  gVTPSharedPool_0 = result;
  return result;
}

const __CFNumber *vtGetPixelFormatColorSpace(const __CFNumber *result)
{
  int valuePtr;

  valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (result)
    {
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      return 0;
    }
  }
  return result;
}

uint64_t vtGetPixelFormatRange(uint64_t result)
{
  int valuePtr;

  valuePtr = 0;
  if (result)
  {
    CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
    result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (result)
    {
      CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E0CA9120]);
      if (FigCFEqual())
      {
        return 1;
      }
      else if (FigCFEqual())
      {
        return 2;
      }
      else if (FigCFEqual())
      {
        return 3;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

const __CFNumber *vtGetPixelFormatBitsPerComponent(const __CFNumber *result)
{
  unsigned int v1;
  int valuePtr;

  valuePtr = 0;
  v1 = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (result)
    {
      result = (const __CFNumber *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA90F0]);
      if (result)
      {
        CFNumberGetValue(result, kCFNumberSInt32Type, &v1);
        return (const __CFNumber *)v1;
      }
    }
  }
  return result;
}

OSStatus VTSessionCopySupportedPropertyDictionary(VTSessionRef session, CFDictionaryRef *supportedPropertyDictionaryOut)
{
  const void *v4;
  uint64_t (**CallbacksWithTypeID)(VTSessionRef, CFDictionaryRef *);

  if (session
    && (v4 = (const void *)CFGetTypeID(session),
        CallbacksWithTypeID = (uint64_t (**)(VTSessionRef, CFDictionaryRef *))VTSessionGetCallbacksWithTypeID(v4),
        supportedPropertyDictionaryOut)
    && CallbacksWithTypeID)
  {
    return CallbacksWithTypeID[1](session, supportedPropertyDictionaryOut);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

OSStatus VTSessionCopySerializableProperties(VTSessionRef session, CFAllocatorRef allocator, CFDictionaryRef *dictionaryOut)
{
  const void *v6;
  uint64_t (**CallbacksWithTypeID)(VTSessionRef, CFAllocatorRef, CFDictionaryRef *);

  if (session
    && (v6 = (const void *)CFGetTypeID(session),
        CallbacksWithTypeID = (uint64_t (**)(VTSessionRef, CFAllocatorRef, CFDictionaryRef *))VTSessionGetCallbacksWithTypeID(v6),
        dictionaryOut)
    && CallbacksWithTypeID)
  {
    return CallbacksWithTypeID[5](session, allocator, dictionaryOut);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTHDRMetadataGenerationSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTHDRMetadataGenerationSessionGetTypeID_sRegisterVTHDRMetadataGenerationSessionOnce, RegisterVTHDRMetadataGenerationSession);
  return sVTHDRMetadataGenerationSessionID;
}

uint64_t RegisterVTHDRMetadataGenerationSession()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTHDRMetadataGenerationSessionID = result;
  return result;
}

uint64_t VTHDRMetadataGenerationSessionCreate(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  char v5;
  uint64_t Instance;
  uint64_t v7;
  uint64_t result;

  if (!a4)
    return 4294954394;
  v5 = a2;
  if (a2 != 2 && a2 != 4)
    return FigSignalErrorAt();
  MEMORY[0x1940281CC](&VTHDRMetadataGenerationSessionGetTypeID_sRegisterVTHDRMetadataGenerationSessionOnce, RegisterVTHDRMetadataGenerationSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294954392;
  v7 = Instance;
  result = 0;
  *(_BYTE *)(v7 + 17) = v5;
  *(_BYTE *)(v7 + 32) = 1;
  *(_QWORD *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 144) = 1106247680;
  *a4 = v7;
  return result;
}

uint64_t VTHDRMetadataGenerationSessionSetFramesPerSecond(uint64_t a1, float a2)
{
  if (a2 <= 0.0 || a2 > 240.0)
    return FigSignalErrorAt();
  *(float *)(a1 + 144) = a2;
  return 0;
}

uint64_t VTHDRMetadataGenerationSessionCreatePaddingNALUForEncoder(uint64_t a1, const __CFData **a2)
{
  UInt8 *v4;
  uint64_t v5;
  const __CFData *v6;
  const __CFData *v7;
  uint64_t v8;

  if (!a2)
  {
    v8 = FigSignalErrorAt();
    v4 = 0;
    goto LABEL_6;
  }
  v4 = (UInt8 *)malloc_type_malloc(0x1F4uLL, 0x1E5E3068uLL);
  if (!v4)
    goto LABEL_7;
  v5 = FigHEVCBridge_WritePaddingNALU();
  if ((_DWORD)v5)
  {
LABEL_8:
    v8 = v5;
    goto LABEL_6;
  }
  v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 500);
  if (!v6)
  {
LABEL_7:
    v5 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v7 = v6;
  v8 = 0;
  *(_QWORD *)(a1 + 24) = CFDataGetLength(v6);
  *a2 = v7;
LABEL_6:
  free(v4);
  return v8;
}

uint64_t VTHDRMetadataGenerationSessionCreateDataFromStatisticsDictionary(uint64_t a1, int a2, char a3, uint64_t a4, int a5, CGFloat a6, CGFloat a7)
{
  uint64_t result;
  uint64_t DataFromStatistics;
  _OWORD v15[7];
  _OWORD v16[7];
  const void *v17;
  const void *v18;

  if (!a4)
    return FigSignalErrorAt();
  v17 = 0;
  v18 = 0;
  memset(v16, 0, 108);
  memset(v15, 0, 108);
  if (FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent()
    || FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
  {
    result = getValuesFromDictionary(v17, (uint64_t)v15, a6, a7);
    if (!(_DWORD)result)
    {
      if (!BYTE5(v15[6]))
        BYTE4(v15[6]) = a3;
      return createDataFromStatistics(a1, a2, (uint64_t)v15, 1, 1);
    }
    return result;
  }
  if (!FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent()
    && !FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
  {
    return FigSignalErrorAt();
  }
  result = getValuesFromDictionary(v18, (uint64_t)v16, a6, a7);
  if (!(_DWORD)result)
  {
    if (!BYTE5(v16[6]))
      BYTE4(v16[6]) = a3;
    DataFromStatistics = createDataFromStatistics(a1, a2, (uint64_t)v16, a5, 0);
    result = 0;
    if ((_DWORD)DataFromStatistics)
      return DataFromStatistics;
  }
  return result;
}

uint64_t getValuesFromDictionary(const void *a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  double v22;
  double v23;
  double v24;
  char v25;
  CFTypeID v26;
  CFTypeID TypeID;
  CGFloat width;
  CGFloat height;
  CGFloat x;
  CGFloat y;
  char v32;
  BOOL v33;
  char v34;
  uint64_t result;
  CGSize size;
  CGRect rect;
  float v38;
  uint64_t v39;
  uint64_t v40;
  CGRect v41;
  void *value;
  CGRect v43;
  CGRect v44;

  memset(&v41, 0, sizeof(v41));
  v39 = 0;
  v40 = 0;
  v38 = 0.0;
  memset(&rect, 0, sizeof(rect));
  if (FigCFDictionaryGetFloat32IfPresent())
    v8 = 1;
  else
    v8 = FigCFDictionaryGetFloat32IfPresent() != 0;
  if (FigCFDictionaryGetFloat32IfPresent())
    v9 = 1;
  else
    v9 = FigCFDictionaryGetFloat32IfPresent() != 0;
  if (FigCFDictionaryGetFloat32IfPresent())
    v10 = 1;
  else
    v10 = FigCFDictionaryGetFloat32IfPresent() != 0;
  if (FigCFDictionaryGetFloat32IfPresent())
    v11 = 1;
  else
    v11 = FigCFDictionaryGetFloat32IfPresent() != 0;
  if (FigCFDictionaryGetFloat32IfPresent())
    v12 = 1;
  else
    v12 = FigCFDictionaryGetFloat32IfPresent() != 0;
  v13 = v8 && v9 && v10;
  v14 = 0.0;
  if (v13 == 1)
  {
    v15 = *((float *)&v40 + 1);
    v16 = 1.0;
    if (*((float *)&v40 + 1) > 1.0)
      v15 = 1.0;
    if (*((float *)&v40 + 1) >= 0.0)
      v17 = v15;
    else
      v17 = 0.0;
    v18 = *(float *)&v40;
    if (*(float *)&v40 > 1.0)
      v18 = 1.0;
    if (*(float *)&v40 >= 0.0)
      v19 = v18;
    else
      v19 = 0.0;
    if (*((float *)&v39 + 1) <= 1.0)
      v16 = *((float *)&v39 + 1);
    if (*((float *)&v39 + 1) >= 0.0)
      v20 = v16;
    else
      v20 = 0.0;
    v21 = 1;
  }
  else
  {
    v21 = 0;
    v19 = 0.0;
    v20 = 0.0;
    v17 = 0.0;
  }
  if (v11 && v12)
  {
    v22 = v38;
    v23 = 1.0;
    if (v38 > 1.0)
      v22 = 1.0;
    if (v38 >= 0.0)
      v14 = v22;
    else
      v14 = 0.0;
    if (*(float *)&v39 <= 1.0)
      v23 = *(float *)&v39;
    if (*(float *)&v39 >= 0.0)
      v24 = v23;
    else
      v24 = 0.0;
    v25 = 1;
  }
  else
  {
    v25 = 0;
    v24 = 0.0;
  }
  value = 0;
  if (a1)
  {
    v26 = CFGetTypeID(a1);
    if (v26 == CFDictionaryGetTypeID() && *MEMORY[0x1E0CA8E80])
    {
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E0CA8E80], (const void **)&value))
      {
        TypeID = CFDictionaryGetTypeID();
        if (TypeID == CFGetTypeID(value) && CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)value, &rect))
        {
          rect = CGRectStandardize(rect);
          v43.origin.x = 0.0;
          v43.origin.y = 0.0;
          v43.size.width = a3;
          v43.size.height = a4;
          if (!CGRectContainsRect(v43, rect))
            return FigSignalErrorAt();
          width = rect.size.width;
          if (rect.size.width <= 0.0)
            return FigSignalErrorAt();
          height = rect.size.height;
          if (rect.size.height <= 0.0)
            return FigSignalErrorAt();
          if (rect.size.width > 8191.0)
            return FigSignalErrorAt();
          if (rect.size.height > 8191.0)
            return FigSignalErrorAt();
          x = rect.origin.x;
          if (rect.origin.x > 8191.0)
            return FigSignalErrorAt();
          y = rect.origin.y;
          if (rect.origin.y > 8191.0)
            return FigSignalErrorAt();
          v44.origin.x = 0.0;
          v44.origin.y = 0.0;
          v44.size.width = a3;
          v44.size.height = a4;
          if (!CGRectEqualToRect(*(CGRect *)(&width - 2), v44))
          {
            v41 = rect;
            v32 = 1;
            goto LABEL_62;
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  v32 = 0;
  a4 = 0.0;
  a3 = 0.0;
LABEL_62:
  v33 = FigCFDictionaryGetInt32IfPresent()
     && FigCFDictionaryGetInt32IfPresent()
     && FigCFDictionaryGetInt32IfPresent();
  if (FigCFDictionaryGetInt32IfPresent())
  {
    v34 = 1;
    if ((v13 & 1) != 0)
    {
LABEL_69:
      result = 0;
      *(double *)a2 = v17;
      *(double *)(a2 + 8) = v19;
      *(double *)(a2 + 16) = v20;
      *(double *)(a2 + 24) = v14;
      *(double *)(a2 + 32) = v24;
      *(_DWORD *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 44) = 0;
      *(_DWORD *)(a2 + 48) = 0;
      *(CGFloat *)(a2 + 52) = a3;
      *(CGFloat *)(a2 + 60) = a4;
      size = v41.size;
      *(CGPoint *)(a2 + 68) = v41.origin;
      *(CGSize *)(a2 + 84) = size;
      *(_BYTE *)(a2 + 100) = 0;
      *(_BYTE *)(a2 + 101) = v34;
      *(_BYTE *)(a2 + 102) = v21;
      *(_BYTE *)(a2 + 103) = v33;
      *(_BYTE *)(a2 + 104) = v25;
      *(_BYTE *)(a2 + 105) = v32;
      *(_WORD *)(a2 + 106) = 0;
      return result;
    }
  }
  else
  {
    v34 = 0;
    if ((v13 & 1) != 0)
      goto LABEL_69;
  }
  return FigSignalErrorAt();
}

uint64_t createDataFromStatistics(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  double v5;
  double v6;
  double v7;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  int v40;
  double v41;
  double v42;
  int v43;
  double v44;
  double v45;
  int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  int v53;
  int v54;
  int v55;
  __int16 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int16 v60;
  __int16 v61;
  float v62;
  float v63;
  float v64;
  double v65;
  __int16 v66;
  double v67;
  int v68;
  int v69;
  int v70;
  float v71;
  double v72;
  double v73;
  double v74;
  double v75;
  float v76;
  float v77;
  double v78;
  float v79;
  float v80;
  double v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  __int16 v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  int v103;
  double v104;
  __int16 v105;
  double v106;
  int v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  double v120;
  double v121;
  __int16 v122;
  double v123;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  float v135;
  double v136;
  double v137;
  __int16 v138;
  char v139;
  float v140;
  float v141;
  float v142;

  v5 = *(double *)a3;
  if (*(double *)a3 >= 0.0 && v5 <= 4095.0)
  {
    v6 = *(double *)(a3 + 8);
    if (v6 >= 0.0 && v6 <= 4095.0)
    {
      v7 = *(double *)(a3 + 16);
      if (v7 >= 0.0 && v7 <= 4095.0 && v7 <= v6 && v7 >= v5)
      {
        v9 = a1 + 29268;
        if (a2)
          v10 = 1;
        else
          v10 = 2;
        *(_DWORD *)(a1 + 148) = v10;
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a3 + 100);
        if (a5 == 1)
        {
          v12 = *(double *)(a3 + 8);
          v11 = *(double *)(a3 + 16);
          v13 = *(double *)(a3 + 24);
          v14 = *(double *)(a3 + 32);
          v15 = *(_DWORD *)(a3 + 40);
          v16 = *(_DWORD *)(a3 + 44);
          v17 = *(_DWORD *)(a3 + 48);
          v18 = *(double *)(a3 + 52);
          v19 = *(double *)(a3 + 60);
          v20 = *(double *)(a3 + 68);
          v21 = *(double *)(a3 + 76);
          v22 = *(double *)(a3 + 84);
          v23 = *(double *)(a3 + 92);
          v24 = *(unsigned __int8 *)(a3 + 100);
          v25 = *(_WORD *)(a3 + 101);
          v26 = *(unsigned __int8 *)(a3 + 103);
          v27 = *(unsigned __int8 *)(a3 + 104);
          v28 = *(unsigned __int8 *)(a3 + 105);
          v29 = *(_WORD *)(a3 + 106);
          *(double *)(a1 + 36) = v5;
          *(double *)(a1 + 44) = v12;
          *(double *)(a1 + 52) = v11;
          *(double *)(a1 + 60) = v13;
          *(double *)(a1 + 68) = v14;
          *(_DWORD *)(a1 + 76) = v15;
          *(_DWORD *)(a1 + 80) = v16;
          *(_DWORD *)(a1 + 84) = v17;
          *(double *)(a1 + 88) = v18;
          *(double *)(a1 + 96) = v19;
          *(double *)(a1 + 104) = v20;
          *(double *)(a1 + 112) = v21;
          *(double *)(a1 + 120) = v22;
          *(double *)(a1 + 128) = v23;
          *(_BYTE *)(a1 + 136) = v24;
          *(_WORD *)(a1 + 137) = v25;
          *(_BYTE *)(a1 + 139) = v26;
          *(_BYTE *)(a1 + 140) = v27;
          *(_BYTE *)(a1 + 141) = v28;
          *(_WORD *)(a1 + 142) = v29;
          *(_BYTE *)(a1 + 152) = 0;
          *(_DWORD *)(a1 + 29276) = 0;
          *(_QWORD *)v9 = 0;
          if (v28)
          {
            v30 = vcvtad_u64_f64(v20);
            v31 = vcvtad_u64_f64(v21);
            *(_WORD *)(a1 + 29414) = v30;
            *(_WORD *)(a1 + 29418) = v31;
            *(_WORD *)(a1 + 29416) = v18 - (v30 + vcvtad_u64_f64(v22));
            *(_WORD *)(a1 + 29420) = v19 - (v31 + vcvtad_u64_f64(v23));
            *(_BYTE *)(a1 + 29272) = 1;
          }
          *(_BYTE *)v9 = 1;
          v32 = round(v5 * 4095.0);
          if (v32 <= 4095.0)
            v33 = v32;
          else
            v33 = 4095.0;
          v34 = (int)v33;
          if (v32 < 0.0)
            LOWORD(v34) = 0;
          *(_WORD *)(a1 + 29280) = v34;
          v35 = round(v12 * 4095.0);
          if (v35 <= 4095.0)
            v36 = v35;
          else
            v36 = 4095.0;
          v37 = (int)v36;
          if (v35 < 0.0)
            LOWORD(v37) = 0;
          *(_WORD *)(a1 + 29282) = v37;
          v38 = round(v11 * 4095.0);
          if (v38 <= 4095.0)
            v39 = v38;
          else
            v39 = 4095.0;
          v40 = (int)v39;
          if (v38 < 0.0)
            LOWORD(v40) = 0;
          *(_WORD *)(a1 + 29284) = v40;
          if (!v24)
            return FigHEVCBridge_CreateDolbyRPUNAL();
          setStaticDMData(a1);
          if (v26)
          {
            *(_WORD *)(v9 + 140) = v15;
            *(_WORD *)(v9 + 136) = v16;
            *(_WORD *)(v9 + 138) = v17;
            *(_BYTE *)(v9 + 2) = 1;
          }
          if (!v27)
            return FigHEVCBridge_CreateDolbyRPUNAL();
          v41 = round(v14 * 4095.0);
          if (v41 <= 4095.0)
            v42 = v41;
          else
            v42 = 4095.0;
          v43 = (int)v42;
          if (v41 < 0.0)
            LOWORD(v43) = 0;
          v44 = round(v13 * 4095.0);
          if (v44 <= 4095.0)
            v45 = v44;
          else
            v45 = 4095.0;
          *(_WORD *)(v9 + 142) = v43;
          if (v44 >= 0.0)
            LOWORD(v46) = (int)v45;
          else
            LOWORD(v46) = 0;
        }
        else
        {
          if (*(unsigned __int8 *)(a1 + 32) | a4)
          {
            *(_BYTE *)(a1 + 32) = 0;
            v47 = *(double *)(a3 + 52);
            v48 = *(double *)(a3 + 60);
            v49 = *(double *)(a3 + 68);
            v50 = *(double *)(a3 + 76);
            v51 = *(double *)(a3 + 84);
            v52 = *(double *)(a3 + 92);
            v53 = *(unsigned __int8 *)(a3 + 100);
            v138 = *(_WORD *)(a3 + 101);
            v139 = *(_BYTE *)(a3 + 103);
            v54 = *(unsigned __int8 *)(a3 + 104);
            v55 = *(unsigned __int8 *)(a3 + 105);
            v56 = *(_WORD *)(a3 + 106);
            v57 = *(_DWORD *)(a3 + 48);
            v59 = *(_OWORD *)(a3 + 16);
            v58 = *(_OWORD *)(a3 + 32);
            *(_OWORD *)(a1 + 36) = *(_OWORD *)a3;
            *(_OWORD *)(a1 + 52) = v59;
            *(_OWORD *)(a1 + 68) = v58;
            *(_DWORD *)(a1 + 84) = v57;
            *(double *)(a1 + 88) = v47;
            *(double *)(a1 + 96) = v48;
            *(double *)(a1 + 104) = v49;
            *(double *)(a1 + 112) = v50;
            *(double *)(a1 + 120) = v51;
            *(double *)(a1 + 128) = v52;
            *(_BYTE *)(a1 + 136) = v53;
            *(_BYTE *)(a1 + 139) = v139;
            *(_WORD *)(a1 + 137) = v138;
            *(_BYTE *)(a1 + 140) = v54;
            *(_BYTE *)(a1 + 141) = v55;
            *(_WORD *)(a1 + 142) = v56;
            *(_BYTE *)(a1 + 152) = 0;
            *(_DWORD *)(a1 + 29276) = 0;
            *(_QWORD *)(a1 + 29268) = 0;
            if (v55)
            {
              v60 = vcvtad_u64_f64(v49);
              v61 = vcvtad_u64_f64(v50);
              *(_WORD *)(a1 + 29414) = v60;
              *(_WORD *)(a1 + 29418) = v61;
              *(_WORD *)(a1 + 29416) = v47 - (v60 + vcvtad_u64_f64(v51));
              *(_WORD *)(a1 + 29420) = v48 - (v61 + vcvtad_u64_f64(v52));
              *(_BYTE *)(a1 + 29272) = 1;
            }
            v62 = *(double *)(a1 + 36);
            v63 = *(double *)(a1 + 44);
            v140 = v63;
            v64 = *(double *)(a1 + 52);
            v141 = v64;
            v142 = v62;
            legalizeAndSetLevel1Values(a1, &v142, &v141, &v140);
            if (!v53)
              return FigHEVCBridge_CreateDolbyRPUNAL();
            setStaticDMData(a1);
            v65 = round(((float)(v64 - v141) + 1.0) * 2048.0);
            if (v65 >= 0.0)
              v66 = v65 <= 4095.0 ? (int)v65 : 4095;
            else
              v66 = 0;
            *(_WORD *)(v9 + 140) = v66;
            v100 = round(((float)(v62 - v142) + 1.0) * 2048.0);
            if (v100 >= 0.0)
              v101 = v100 <= 4095.0 ? (int)v100 : 4095;
            else
              v101 = 0;
            *(_WORD *)(v9 + 136) = v101;
            v102 = round(((float)(v63 - v140) + 1.0) * 2048.0);
            if (v102 >= 0.0)
            {
              if (v102 <= 4095.0)
                v103 = (int)v102;
              else
                LOWORD(v103) = 4095;
            }
            else
            {
              LOWORD(v103) = 0;
            }
            *(_WORD *)(v9 + 138) = v103;
            *(_BYTE *)(v9 + 2) = 1;
            if (!v54)
              return FigHEVCBridge_CreateDolbyRPUNAL();
            v108 = round(*(double *)(a1 + 68) * 4095.0);
            if (v108 >= 0.0)
            {
              if (v108 <= 4095.0)
                v109 = (int)v108;
              else
                LOWORD(v109) = 4095;
            }
            else
            {
              LOWORD(v109) = 0;
            }
            *(_WORD *)(v9 + 142) = v109;
            v110 = *(double *)(a1 + 60);
          }
          else
          {
            v67 = *(double *)(a3 + 16);
            v136 = v67;
            v137 = *(double *)(a3 + 8);
            v127 = *(double *)(a3 + 24);
            v128 = *(double *)(a3 + 32);
            v133 = *(double *)(a3 + 60);
            v134 = *(double *)(a3 + 52);
            v131 = *(double *)(a3 + 76);
            v132 = *(double *)(a3 + 68);
            v129 = *(double *)(a3 + 92);
            v130 = *(double *)(a3 + 84);
            v68 = *(unsigned __int8 *)(a3 + 100);
            v69 = *(unsigned __int8 *)(a3 + 104);
            v70 = *(unsigned __int8 *)(a3 + 105);
            *(_BYTE *)(a1 + 152) = 0;
            *(_QWORD *)(a1 + 29268) = 0;
            *(_DWORD *)(a1 + 29276) = 0;
            v71 = *(float *)(a1 + 144);
            v72 = *(double *)(a1 + 36);
            v73 = *(double *)(a1 + 44);
            v74 = *(double *)(a1 + 52);
            v125 = *(double *)(a1 + 60);
            v126 = *(double *)(a1 + 68);
            v75 = v5 - v72;
            if (v5 - v72 <= 0.0)
              v75 = -(v5 - v72);
            v76 = v75;
            v77 = 1.0 / (expf((float)(v76 + -0.5) * -8.0) + 1.0);
            v135 = v77;
            v78 = v67 - v74;
            if (v67 - v74 <= 0.0)
              v78 = -(v67 - v74);
            v79 = v78;
            v80 = 1.0 / (expf((float)(v79 + -0.25) * -32.0) + 1.0);
            v81 = v137 - v73;
            if (v137 - v73 <= 0.0)
              v81 = -(v137 - v73);
            v82 = v81;
            v83 = -0.8;
            if (v73 < v137)
              v83 = -0.125;
            v84 = 1.0 / (expf((float)(v83 + v82) * -8.0) + 1.0);
            v86 = v5;
            v87 = 0.8;
            if (v71 > 0.0)
              v87 = 24.0 / v71;
            if (v87 <= 1.0)
              v88 = v87;
            else
              v88 = 1.0;
            v85 = v72;
            v89 = (float)((float)(v88 * v135) * v86) + (float)((float)(1.0 - (float)(v88 * v135)) * v85);
            *(double *)(a1 + 36) = v89;
            v90 = v74;
            v91 = v136;
            v92 = (float)((float)(v88 * v80) * v91) + (float)((float)(1.0 - (float)(v88 * v80)) * v90);
            *(double *)(a1 + 52) = v92;
            v93 = v73;
            v94 = v137;
            v95 = (float)((float)(v88 * v84) * v94) + (float)((float)(1.0 - (float)(v88 * v84)) * v93);
            *(double *)(a1 + 44) = v95;
            v141 = v92;
            v142 = v89;
            v140 = v95;
            legalizeAndSetLevel1Values(a1, &v142, &v141, &v140);
            if (v70)
            {
              v96 = vcvtad_u64_f64(v132);
              *(_WORD *)(v9 + 146) = v96;
              v97 = vcvtad_u64_f64(v131);
              *(_WORD *)(v9 + 150) = v97;
              *(_WORD *)(v9 + 148) = v134 - (v96 + vcvtad_u64_f64(v130));
              *(_WORD *)(v9 + 152) = v133 - (v97 + vcvtad_u64_f64(v129));
              *(_BYTE *)(v9 + 4) = 1;
              *(double *)(a1 + 88) = v134;
              *(double *)(a1 + 96) = v133;
              *(double *)(a1 + 104) = v132;
              *(double *)(a1 + 112) = v131;
              *(double *)(a1 + 120) = v130;
              *(double *)(a1 + 128) = v129;
              *(_BYTE *)(a1 + 141) = 1;
            }
            if (!v68)
              return FigHEVCBridge_CreateDolbyRPUNAL();
            setStaticDMData(a1);
            v98 = round(((float)(v92 - v141) + 1.0) * 2048.0);
            if (v98 >= 0.0)
              v99 = v98 <= 4095.0 ? (int)v98 : 4095;
            else
              v99 = 0;
            *(_WORD *)(v9 + 140) = v99;
            v104 = round(((float)(v89 - v142) + 1.0) * 2048.0);
            if (v104 >= 0.0)
              v105 = v104 <= 4095.0 ? (int)v104 : 4095;
            else
              v105 = 0;
            *(_WORD *)(v9 + 136) = v105;
            v106 = round(((float)(v95 - v140) + 1.0) * 2048.0);
            if (v106 >= 0.0)
            {
              if (v106 <= 4095.0)
                v107 = (int)v106;
              else
                LOWORD(v107) = 4095;
            }
            else
            {
              LOWORD(v107) = 0;
            }
            *(_WORD *)(v9 + 138) = v107;
            *(_BYTE *)(v9 + 2) = 1;
            if (!v69)
              return FigHEVCBridge_CreateDolbyRPUNAL();
            v111 = v128 - v128;
            if (v128 - v128 <= 0.0)
              v111 = -(v128 - v128);
            v112 = v111 * 8.0 + 0.100000001;
            if (v112 >= 1.0)
              v112 = 1.0;
            v113 = v112;
            v114 = v125;
            v115 = v127;
            v116 = v88 * v113;
            v117 = 1.0 - (float)(v88 * v113);
            v110 = (float)((float)((float)(v88 * v113) * v115) + (float)(v117 * v114));
            *(double *)(a1 + 60) = v110;
            v118 = v126;
            v119 = v128;
            v120 = (float)((float)(v116 * v119) + (float)(v117 * v118));
            *(double *)(a1 + 68) = v120;
            *(_BYTE *)(a1 + 140) = 1;
            v121 = round(v120 * 4095.0);
            if (v121 >= 0.0)
            {
              if (v121 <= 4095.0)
                v122 = (int)v121;
              else
                v122 = 4095;
            }
            else
            {
              v122 = 0;
            }
            *(_WORD *)(v9 + 142) = v122;
          }
          v123 = round(v110 * 4095.0);
          if (v123 >= 0.0)
          {
            if (v123 <= 4095.0)
              v46 = (int)v123;
            else
              LOWORD(v46) = 4095;
          }
          else
          {
            LOWORD(v46) = 0;
          }
        }
        *(_WORD *)(v9 + 144) = v46;
        *(_BYTE *)(v9 + 3) = 1;
        return FigHEVCBridge_CreateDolbyRPUNAL();
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t VTHDRMetadataGenerationSessionCreateDataFromStatistics(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  double v6;
  double v8;
  double v14;
  double v15;
  double v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t v20;
  uint64_t v21;
  double x;
  double y;
  double width;
  double height;
  _BOOL4 v26;
  _QWORD v28[3];
  __int128 v29;
  __int128 v30;
  _OWORD v31[3];
  int v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v30 = 0u;
  v29 = 0u;
  if (*(double *)a4 < 0.0 || *(double *)a4 > 1.0)
    return FigSignalErrorAt();
  v6 = *(double *)(a4 + 8);
  if (v6 < 0.0 || v6 > 1.0)
    return FigSignalErrorAt();
  v8 = *(double *)(a4 + 16);
  if (v8 < 0.0 || v8 > 1.0)
    return FigSignalErrorAt();
  v28[0] = *(_QWORD *)a4;
  *(double *)&v28[1] = v6;
  *(double *)&v28[2] = v8;
  BYTE14(v31[2]) = 1;
  BYTE12(v31[2]) = *(_BYTE *)(a4 + 100);
  if (*(_BYTE *)(a4 + 104))
  {
    v14 = *(double *)(a4 + 32);
    if (v14 < 0.0)
      return FigSignalErrorAt();
    if (v14 > 1.0)
      return FigSignalErrorAt();
    v15 = *(double *)(a4 + 24);
    if (v15 < 0.0 || v15 > 1.0)
      return FigSignalErrorAt();
    LOBYTE(v32) = 1;
    *(double *)&v29 = v15;
    *((double *)&v29 + 1) = v14;
  }
  if (*(_BYTE *)(a4 + 105))
  {
    v16 = *(double *)(a4 + 68);
    v17 = *(double *)(a4 + 76);
    if (v16 != 0.0 || v17 != 0.0 || *(double *)(a4 + 92) != 0.0 || *(double *)(a4 + 84) != 0.0)
    {
      v18 = *(double *)(a4 + 52);
      v19 = *(double *)(a4 + 60);
      v20 = *(_QWORD *)(a4 + 84);
      v21 = *(_QWORD *)(a4 + 92);
      v33 = CGRectStandardize(*(CGRect *)&v16);
      x = v33.origin.x;
      y = v33.origin.y;
      width = v33.size.width;
      height = v33.size.height;
      *(CGRect *)((char *)v31 + 12) = v33;
      v33.origin.x = 0.0;
      v33.origin.y = 0.0;
      v33.size.width = v18;
      v33.size.height = v19;
      v35.origin.x = x;
      v35.origin.y = y;
      v35.size.width = width;
      v35.size.height = height;
      if (CGRectContainsRect(v33, v35)
        && width > 0.0
        && height > 0.0
        && width <= 8191.0
        && height <= 8191.0
        && x <= 8191.0
        && y <= 8191.0)
      {
        v36.origin.x = 0.0;
        v36.origin.y = 0.0;
        v34.origin.x = x;
        v34.origin.y = y;
        v34.size.width = width;
        v34.size.height = height;
        v36.size.width = v18;
        v36.size.height = v19;
        if (!CGRectEqualToRect(v34, v36))
          BYTE1(v32) = 1;
        goto LABEL_33;
      }
      return FigSignalErrorAt();
    }
  }
LABEL_33:
  if (a5)
    v26 = 1;
  else
    v26 = a3 == 0;
  return createDataFromStatistics(a1, a2, (uint64_t)v28, v26, a3 == 0);
}

uint64_t VTHDRMetadataGenerationSessionInsertData(uint64_t a1, CMSampleBufferRef sbuf, const __CFData *a3, CFTypeRef *a4)
{
  const __CFData *v5;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v9;
  size_t SampleSize;
  unint64_t Length;
  unint64_t v12;
  size_t v13;
  uint64_t appended;
  size_t v15;
  const __CFAllocator *v16;
  const __CFData *v17;
  uint64_t CopyWithNewSizesAndDataBuffer;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;
  __int16 v22;
  unsigned int destination;

  destination = 0;
  v22 = 0;
  blockBufferOut = 0;
  cf = 0;
  if (!a1)
  {
    CopyWithNewSizesAndDataBuffer = FigSignalErrorAt();
    v5 = 0;
    goto LABEL_29;
  }
  if (!sbuf)
    goto LABEL_30;
  v5 = a3;
  if (a3)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (a4)
      {
        if (CMSampleBufferGetNumSamples(sbuf) == 1)
        {
          DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
          if (DataBuffer)
          {
            v9 = DataBuffer;
            SampleSize = CMSampleBufferGetSampleSize(sbuf, 0);
            Length = CFDataGetLength(v5);
            v12 = *(_QWORD *)(a1 + 24);
            if (v12 < Length)
              goto LABEL_19;
            v13 = SampleSize - v12;
            if (SampleSize <= v12)
              goto LABEL_19;
            appended = CMBlockBufferCopyDataBytes(v9, SampleSize - v12, 4uLL, &destination);
            if (!(_DWORD)appended)
            {
              if (*(_QWORD *)(a1 + 24) - 4 != bswap32(destination))
                goto LABEL_19;
              appended = CMBlockBufferCopyDataBytes(v9, v13 + 4, 1uLL, (char *)&v22 + 1);
              if (!(_DWORD)appended)
              {
                if (HIBYTE(v22) != 76)
                  goto LABEL_19;
                appended = CMBlockBufferCopyDataBytes(v9, v13 + 5, 1uLL, &v22);
                if (!(_DWORD)appended)
                {
                  if (v22 == 1)
                  {
                    appended = writeNALU(v9, v13, (int)Length + 2, v5);
                    if ((_DWORD)appended)
                      goto LABEL_31;
                    v15 = Length + v13 + 6;
                    appended = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, 0, v15, 0, &blockBufferOut);
                    if ((_DWORD)appended)
                      goto LABEL_31;
LABEL_24:
                    v17 = (const __CFData *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
                    v5 = v17;
                    if (v17)
                    {
                      *(_QWORD *)v17 = v15;
                      CopyWithNewSizesAndDataBuffer = FigSampleBufferCreateCopyWithNewSizesAndDataBuffer();
                      if ((_DWORD)CopyWithNewSizesAndDataBuffer)
                      {
                        if (cf)
                          CFRelease(cf);
                      }
                      else
                      {
                        *a4 = cf;
                        cf = 0;
                      }
                    }
                    else
                    {
                      CopyWithNewSizesAndDataBuffer = 0;
                    }
                    goto LABEL_27;
                  }
LABEL_19:
                  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                  appended = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
                  if ((_DWORD)appended)
                    goto LABEL_31;
                  appended = CMBlockBufferAppendBufferReference(blockBufferOut, v9, 0, SampleSize, 0);
                  if ((_DWORD)appended)
                    goto LABEL_31;
                  appended = CMBlockBufferAppendMemoryBlock(blockBufferOut, 0, Length + 6, v16, 0, 0, Length + 6, 1u);
                  if ((_DWORD)appended)
                    goto LABEL_31;
                  appended = writeNALU(blockBufferOut, SampleSize, (int)Length + 2, v5);
                  if ((_DWORD)appended)
                    goto LABEL_31;
                  v15 = Length + 6 + SampleSize;
                  goto LABEL_24;
                }
              }
            }
LABEL_31:
            CopyWithNewSizesAndDataBuffer = appended;
            v5 = 0;
            goto LABEL_27;
          }
        }
      }
    }
LABEL_30:
    appended = FigSignalErrorAt();
    goto LABEL_31;
  }
  CopyWithNewSizesAndDataBuffer = FigSignalErrorAt();
LABEL_27:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
LABEL_29:
  free(v5);
  return CopyWithNewSizesAndDataBuffer;
}

uint64_t writeNALU(OpaqueCMBlockBuffer *a1, size_t a2, int a3, CFDataRef theData)
{
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t result;
  _BYTE sourceBytes[4];
  __int16 v12;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  sourceBytes[0] = HIBYTE(a3);
  sourceBytes[1] = BYTE2(a3);
  sourceBytes[2] = BYTE1(a3);
  sourceBytes[3] = a3;
  v12 = 380;
  result = CMBlockBufferReplaceDataBytes(sourceBytes, a1, a2, 6uLL);
  if (!(_DWORD)result)
    return CMBlockBufferReplaceDataBytes(BytePtr, a1, a2 + 6, Length);
  return result;
}

uint64_t VTHDRMetadataGenerationSessionInvalidate(uint64_t a1)
{
  if (a1 && !*(_BYTE *)(a1 + 16))
    *(_BYTE *)(a1 + 16) = 1;
  return 0;
}

void VTHDRMetadataGenerationSessionInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x7438uLL);
}

uint64_t VTHDRMetadataGenerationSessionFinalize(uint64_t result)
{
  if (result)
  {
    if (!*(_BYTE *)(result + 16))
      *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

CFTypeRef VTHDRMetadataGenerationSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTHDRMetadataGenerationSession]"));
}

__CFString *VTHDRMetadataGenerationSessionCopyDebugDesc(unsigned __int8 *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTHDRMetadataGenerationSession %p [%p]>{invalid:%d, }"), a1, v4, a1[16]);
  return Mutable;
}

double setStaticDMData(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 29432) = 0xA00000002;
  *(_BYTE *)(a1 + 29440) = -1;
  *(_QWORD *)(a1 + 29442) = 0x80008A00800099ALL;
  *(_DWORD *)(a1 + 29450) = 134219776;
  *(_DWORD *)(a1 + 29472) = 10;
  *(_BYTE *)(a1 + 29476) = 20;
  *(_QWORD *)(a1 + 29478) = 0x800076C08000800;
  *(_DWORD *)(a1 + 29486) = 134219776;
  *(_BYTE *)(a1 + 29616) = 0;
  *(_QWORD *)(a1 + 29636) = 0x500000002;
  *(_BYTE *)(a1 + 29644) = -1;
  *(_DWORD *)(a1 + 29646) = 3696;
  *(_BYTE *)(a1 + 29650) = 2;
  *(_DWORD *)(a1 + 29668) = 5;
  *(_BYTE *)(a1 + 29672) = 20;
  *(_DWORD *)(a1 + 29674) = 2672;
  *(_BYTE *)(a1 + 29678) = 2;
  result = 7.74860419e-304;
  *(_DWORD *)(a1 + 29274) = 16843009;
  *(_BYTE *)(a1 + 29752) = 4;
  *(_DWORD *)(a1 + 29753) = 0;
  *(_BYTE *)(a1 + 29757) = 2;
  *(_BYTE *)(a1 + 29278) = 1;
  *(_BYTE *)(a1 + 152) = 1;
  return result;
}

uint64_t legalizeAndSetLevel1Values(uint64_t result, float *a2, float *a3, float *a4)
{
  float v4;
  double v5;
  float v6;
  float v7;
  double v8;
  __int16 v9;
  double v10;
  __int16 v11;
  double v12;
  int v13;

  *a2 = fminf(*a2, 0.0029304);
  *a3 = fmaxf(*a3, 0.2);
  v4 = fmaxf(*a4, 0.50808);
  *a4 = v4;
  v5 = v4 + -0.000244200244;
  if (v5 <= *a3)
  {
    v6 = v5;
    v7 = v6;
  }
  else
  {
    v7 = *a3;
  }
  *a3 = v7;
  *(_BYTE *)(result + 29268) = 1;
  v8 = round(*a2 * 4095.0);
  if (v8 >= 0.0)
  {
    if (v8 <= 4095.0)
      v9 = (int)v8;
    else
      v9 = 4095;
  }
  else
  {
    v9 = 0;
  }
  *(_WORD *)(result + 29280) = v9;
  v10 = round(*a4 * 4095.0);
  if (v10 >= 0.0)
  {
    if (v10 <= 4095.0)
      v11 = (int)v10;
    else
      v11 = 4095;
  }
  else
  {
    v11 = 0;
  }
  *(_WORD *)(result + 29282) = v11;
  v12 = round(v7 * 4095.0);
  if (v12 >= 0.0)
  {
    if (v12 <= 4095.0)
      v13 = (int)v12;
    else
      LOWORD(v13) = 4095;
  }
  else
  {
    LOWORD(v13) = 0;
  }
  *(_WORD *)(result + 29284) = v13;
  return result;
}

uint64_t vtCreateVideoDecoderRegistry()
{
  return FigRegistryCreate();
}

uint64_t vtRegisterVideoDecoderInternal(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  const void **v12;

  if (VTParavirtualizationIsRunningInGuest())
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v11 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("CMClassID"), CFSTR("com.apple.videotoolbox.videodecoder"));
    CFDictionarySetValue(v11, CFSTR("CMClassImplementationName"), a1);
    CFDictionarySetValue(v11, CFSTR("CMClassImplementationID"), a2);
    FigCFDictionarySetInt64();
    CFDictionarySetValue(v11, CFSTR("CMMatchingInfo"), a3);
    if (a4)
    {
      v12 = (const void **)MEMORY[0x1E0C9AE40];
    }
    else
    {
      if (!a5)
      {
LABEL_9:
        CFRelease(v11);
        return 0;
      }
      v12 = (const void **)MEMORY[0x1E0C9AE50];
    }
    CFDictionarySetValue(v11, CFSTR("VTFactoryFunctionHasSpecificationArgument"), *v12);
    FigRegistryAddItem();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

BOOL VTHasVideoDecoderRegistryBeenCreated()
{
  return sVideoDecoderRegistry != 0;
}

void vtPrintRegisteredVideoDecoders()
{
  if (sVideoDecoderRegistry)
    FigRegistryCopyItemList();
}

CFMutableArrayRef VTCopyVideoDecoderRegistryMatchArrayForCodecType(unsigned int a1)
{
  const __CFAllocator *v1;
  CFStringRef v2;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v4;
  UInt8 bytes[4];
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  *(_DWORD *)bytes = bswap32(a1);
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 4, 0x600u, 0);
  Mutable = CFArrayCreateMutable(v1, 0, MEMORY[0x1E0C9B378]);
  v4 = Mutable;
  if (v2)
  {
    if (Mutable)
      vtPopulateVideoDecoderRegistry();
    FigSignalErrorAt();
    CFRelease(v2);
  }
  else if (FigSignalErrorAt() && v4)
  {
    CFRelease(v4);
    return 0;
  }
  return v4;
}

void vtPopulateVideoDecoderRegistry()
{
  MEMORY[0x1940281CC](&sInitializeVideoDecoderRegistryOnce, vtInitializeVideoDecoderRegistry);
  MEMORY[0x1940280C4](sVideoDecoderRegistryMutex);
  if (sReloadParavirtualizedDecodersList == 1)
  {
    vtLoadParavirtualizedVideoDecoders();
    sReloadParavirtualizedDecodersList = 0;
  }
  JUMPOUT(0x1940280D0);
}

BOOL vtFilterRegistryItemByCodecType(CFTypeRef *a1)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;
  CFTypeID v5;
  CFRange v8;

  if (FigRegistryItemCopyMatchingInfo())
    return 0;
  Value = CFDictionaryGetValue(0, CFSTR("VTCodecType"));
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 == CFStringGetTypeID())
  {
    if (!CFEqual(v3, *a1))
      return 0;
  }
  else
  {
    v5 = CFGetTypeID(v3);
    if (v5 != CFArrayGetTypeID())
      return 0;
    v8.length = CFArrayGetCount((CFArrayRef)v3);
    v8.location = 0;
    if (!CFArrayContainsValue((CFArrayRef)v3, v8, *a1))
      return 0;
  }
  FigCFDictionaryGetBooleanIfPresent();
  return FigCFEqual() == 0;
}

uint64_t VTCopyVideoDecoderList(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *key, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFMutableArrayRef theArray,int a24,int valuePtr,CFDictionaryRef theDict,CFDictionaryRef a27,CFBundleRef bundle,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  MEMORY[0x1940281CC](&sCreateVideoDecoderRegistryOnce, vtCreateVideoDecoderRegistry);
  if (sVideoDecoderRegistry)
    vtPopulateVideoDecoderRegistry();
  return FigSignalErrorAt();
}

uint64_t vtFilterRegistryItemToSkipNonParavirtualizedHardwareAcceleratedDecoders()
{
  if (FigRegistryItemCopyMatchingInfo())
    return 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  return 1;
}

uint64_t vtCopyExpandedDecoderListForWrappers(const __CFArray *a1, __int128 *a2, __CFArray **a3, int a4)
{
  __CFArray *v4;
  uint64_t v5;
  CFStringRef v7;
  __CFDictionary *MutableCopy;
  __CFDictionary *v9;
  const __CFArray *v10;
  CFIndex Count;
  const __CFAllocator *v12;
  CFMutableArrayRef Mutable;
  CFIndex v14;
  const __CFString *v15;
  const void *ValueAtIndex;
  const void *v17;
  const __CFString *v18;
  uint64_t v19;
  const void *Value;
  const void *v21;
  const __CFArray *v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  uint64_t v26;
  const void *v27;
  const void *v28;
  CFStringRef v29;
  const void *v30;
  uint64_t Copy2;
  __CFArray **v33;
  const __CFArray *v34;
  CFIndex v37;
  const void *v38;
  const void *v39;
  __CFArray *theArray;
  __int128 v41;
  uint64_t v42;
  const __CFArray *v43;
  const void *v44;
  CFDictionaryRef v45;
  CFTypeRef v46;
  const __CFArray *v47;
  CFDictionaryRef v48;
  CFDictionaryRef v49;

  v4 = 0;
  v5 = 0;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  if (!a1)
  {
    v7 = 0;
    MutableCopy = 0;
    v9 = 0;
    goto LABEL_47;
  }
  v7 = 0;
  MutableCopy = 0;
  v9 = 0;
  if (!a3)
    goto LABEL_47;
  v10 = a1;
  Count = CFArrayGetCount(a1);
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v4 = Mutable;
  if (Mutable)
  {
    v33 = a3;
    if (Count < 1)
    {
LABEL_46:
      v5 = 0;
      v7 = 0;
      MutableCopy = 0;
      v9 = 0;
      *v33 = v4;
      v4 = 0;
      goto LABEL_47;
    }
    v14 = 0;
    v38 = (const void *)*MEMORY[0x1E0C9AE50];
    v15 = CFSTR("CMDependencies");
    theArray = Mutable;
    v34 = v10;
    v37 = Count;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v10, v14);
      if (ValueAtIndex)
      {
        v17 = ValueAtIndex;
        v18 = v15;
        v19 = FigRegistryItemCopyMatchingInfo();
        if ((_DWORD)v19)
          goto LABEL_74;
        if (!v49)
          break;
        if (v38 == CFDictionaryGetValue(v49, CFSTR("VTIsWrapperDecoder")))
        {
          Value = CFDictionaryGetValue(v49, CFSTR("VTWrapsCodecType"));
          if (Value)
          {
            v21 = Value;
            v43 = 0;
            v19 = FigRegistryItemCopyDescription();
            if ((_DWORD)v19)
              goto LABEL_74;
            v39 = CFDictionaryGetValue(v48, CFSTR("CMClassImplementationID"));
            v41 = *a2;
            v42 = *((_QWORD *)a2 + 2);
            *(_QWORD *)&v41 = v21;
            v19 = FigRegistryCopyFilteredItemList();
            if ((_DWORD)v19)
              goto LABEL_74;
            if (a4 <= 10)
            {
              v19 = vtCopyExpandedDecoderListForWrappers(v47, &v41, &v43, (a4 + 1));
              if ((_DWORD)v19)
                goto LABEL_74;
            }
            v22 = v47;
            if (v43)
            {
              if (v47)
                CFRelease(v47);
              v22 = v43;
              v47 = v43;
              v43 = 0;
            }
            if (v22)
            {
              v23 = CFArrayGetCount(v22);
              if (v23 >= 1)
              {
                v24 = v23;
                v25 = 0;
                while (1)
                {
                  CFArrayGetValueAtIndex(v47, v25);
                  v26 = FigRegistryItemCopyMatchingInfo();
                  if ((_DWORD)v26 || (v26 = FigRegistryItemCopyDescription(), (_DWORD)v26))
                  {
                    v5 = v26;
                    v7 = 0;
                    MutableCopy = 0;
                    v9 = 0;
                    goto LABEL_72;
                  }
                  v27 = CFDictionaryGetValue(v45, CFSTR("CMClassImplementationID"));
                  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  if (!MutableCopy)
                  {
                    v9 = 0;
LABEL_70:
                    v5 = FigSignalErrorAt();
                    v7 = 0;
                    goto LABEL_72;
                  }
                  v28 = CFDictionaryGetValue(v49, CFSTR("VTCodecType"));
                  CFDictionarySetValue(MutableCopy, CFSTR("VTCodecType"), v28);
                  CFDictionarySetValue(MutableCopy, CFSTR("VTWrappedDecoderID"), v27);
                  v9 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  if (!v9)
                    goto LABEL_70;
                  v29 = CFStringCreateWithFormat(v12, 0, CFSTR("%@:%@"), v39, v27);
                  if (!v29)
                    goto LABEL_70;
                  v7 = v29;
                  CFDictionarySetValue(v9, CFSTR("CMClassImplementationID"), v29);
                  v30 = CFDictionaryGetValue(v45, v18);
                  if (v30)
                    CFDictionarySetValue(v9, v18, v30);
                  CFDictionarySetValue(v9, CFSTR("CMMatchingInfo"), MutableCopy);
                  Copy2 = FigRegistryItemCreateCopy2();
                  if ((_DWORD)Copy2)
                    break;
                  CFArrayAppendValue(theArray, v44);
                  if (v46)
                  {
                    CFRelease(v46);
                    v46 = 0;
                  }
                  v15 = v18;
                  if (v45)
                  {
                    CFRelease(v45);
                    v45 = 0;
                  }
                  CFRelease(MutableCopy);
                  CFRelease(v7);
                  CFRelease(v9);
                  if (v44)
                  {
                    CFRelease(v44);
                    v44 = 0;
                  }
                  if (v24 == ++v25)
                    goto LABEL_38;
                }
                v5 = Copy2;
LABEL_72:
                v4 = theArray;
                goto LABEL_47;
              }
            }
LABEL_38:
            if (v47)
            {
              CFRelease(v47);
              v47 = 0;
            }
            v4 = theArray;
            v10 = v34;
          }
        }
        else
        {
          CFArrayAppendValue(v4, v17);
        }
        if (v49)
        {
          CFRelease(v49);
          v49 = 0;
        }
        Count = v37;
        if (v48)
        {
          CFRelease(v48);
          v48 = 0;
        }
      }
      if (++v14 == Count)
        goto LABEL_46;
    }
  }
  v19 = FigSignalErrorAt();
LABEL_74:
  v5 = v19;
  v7 = 0;
  MutableCopy = 0;
  v9 = 0;
LABEL_47:
  if (v47)
    CFRelease(v47);
  if (v44)
    CFRelease(v44);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v46)
    CFRelease(v46);
  if (v45)
    CFRelease(v45);
  if (v7)
    CFRelease(v7);
  if (v9)
    CFRelease(v9);
  if (v49)
    CFRelease(v49);
  if (v48)
    CFRelease(v48);
  if (v4)
    CFRelease(v4);
  return v5;
}

CFComparisonResult vtCompareCodecName(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFString *Value;
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;
  CFTypeID v7;

  if (!a1)
    return -1;
  if (a2)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("CodecName"));
    v4 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CodecName"));
    if (Value)
    {
      v5 = v4;
      v6 = CFGetTypeID(Value);
      if (v6 == CFStringGetTypeID())
      {
        if (v5)
        {
          v7 = CFGetTypeID(v5);
          if (v7 == CFStringGetTypeID())
            return CFStringCompare(Value, v5, 0);
        }
        return 1;
      }
    }
    return -1;
  }
  return 1;
}

uint64_t VTCopyVideoDecoderExtensionProperties()
{
  return 4294947786;
}

uint64_t vtFilterRegistryItemByCodecTypeAndVideoDecoderSpecification(uint64_t a1)
{
  const __CFDictionary *v2;
  _BOOL4 v3;
  const void *Value;
  uint64_t v5;
  CFTypeID v6;
  CFTypeID v7;
  const __CFDictionary *v8;
  const void *v9;
  const void *v10;
  const __CFDictionary *v11;
  const void *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  const __CFDictionary *v15;
  const void *v16;
  const __CFDictionary *v18;
  CFTypeID v19;
  uint64_t context;
  uint64_t v21;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  char buffer[5];
  CFRange v25;
  CFRange v26;

  cf = 0;
  theDict = 0;
  context = *(_QWORD *)(a1 + 8);
  v21 = 1;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyDescription())
    goto LABEL_33;
  v2 = *(const __CFDictionary **)(a1 + 8);
  if (v2)
  {
    v3 = CFDictionaryGetValue(v2, CFSTR("DecoderID")) != 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  else
  {
    v3 = 0;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("VTCodecType"));
  v5 = (uint64_t)Value;
  if (Value)
  {
    v6 = CFGetTypeID(Value);
    if (v6 == CFStringGetTypeID())
    {
      if (!CFEqual((CFTypeRef)v5, *(CFTypeRef *)a1))
        goto LABEL_33;
    }
    else
    {
      v7 = CFGetTypeID((CFTypeRef)v5);
      if (v7 != CFArrayGetTypeID())
        goto LABEL_33;
      v25.length = CFArrayGetCount((CFArrayRef)v5);
      v25.location = 0;
      if (!CFArrayContainsValue((CFArrayRef)v5, v25, *(const void **)a1))
        goto LABEL_33;
    }
    v8 = *(const __CFDictionary **)(a1 + 8);
    if (v8)
    {
      v9 = (const void *)*MEMORY[0x1E0C9AE40];
      if (v9 == CFDictionaryGetValue(v8, CFSTR("AllowParavirtualizedDecoder")))
      {
        v10 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v10 == CFDictionaryGetValue(theDict, CFSTR("VTIsParavirtualized")))
          goto LABEL_33;
      }
      v11 = *(const __CFDictionary **)(a1 + 8);
      if (v11)
      {
        v12 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v12 == CFDictionaryGetValue(v11, CFSTR("RequireParavirtualizedDecoder"))
          && v9 == CFDictionaryGetValue(theDict, CFSTR("VTIsParavirtualized")))
        {
          goto LABEL_33;
        }
      }
    }
    FigCFDictionaryGetBooleanIfPresent();
    if (*(_BYTE *)(a1 + 17))
    {
      buffer[0] = 0;
      FigCFDictionaryGetBooleanIfPresent();
    }
    v13 = (const __CFArray *)VTGetAllowedDecoderList();
    if (v13)
    {
      v14 = v13;
      v26.length = CFArrayGetCount(v13);
      v26.location = 0;
      if (!CFArrayContainsValue(v14, v26, *(const void **)a1))
        goto LABEL_33;
    }
    if (FigCFEqual())
    {
      v15 = *(const __CFDictionary **)(a1 + 8);
      if (v15)
      {
        v16 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v16 != CFDictionaryGetValue(v15, CFSTR("EnableAppleOnlySWAV1")))
          goto LABEL_33;
      }
    }
    FigCFDictionaryGetBooleanIfPresent();
    VTAvoidHardwareDecoders();
    if (VTAvoidHardwareJPEGDecoders())
      CFStringGetCString(*(CFStringRef *)a1, buffer, 5, 0x600u);
    if (CFStringGetCString(*(CFStringRef *)a1, buffer, 5, 0x600u))
      FigCodecTypeIsProtected((buffer[1] << 16) | (buffer[0] << 24) | (buffer[2] << 8) | buffer[3]);
    if (v3)
      goto LABEL_39;
    if (*(_BYTE *)(a1 + 16))
    {
LABEL_33:
      v5 = 0;
      goto LABEL_34;
    }
    v18 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("VTRequiredSpecificationEntries"));
    if (v18 && (v19 = CFGetTypeID(v18), v19 == CFDictionaryGetTypeID()))
    {
      CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)vtCheckRequiredSpecificationKey, &context);
      v5 = v21;
    }
    else
    {
LABEL_39:
      v5 = 1;
    }
  }
LABEL_34:
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t vtSortRegistryItemsByRating()
{
  if (!FigRegistryItemCopyMatchingInfo() && !FigRegistryItemCopyMatchingInfo())
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 0;
}

const __CFDictionary *vtCheckRequiredSpecificationKey(void *key, const void *a2, uint64_t a3)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)a3;
  if (!*(_QWORD *)a3
    || (result = (const __CFDictionary *)CFDictionaryGetValue(result, key), !a2)
    || !result
    || (result = (const __CFDictionary *)CFEqual(result, a2), !(_DWORD)result))
  {
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t FigCodecTypeIsProtected(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  int v6;
  unsigned __int16 v7;
  unsigned int v8;

  result = 1;
  if (a1 <= 1902207794)
  {
    if (a1 <= 1685220712)
    {
      if (a1 <= 1667524656)
      {
        if (a1 <= 1667326823)
        {
          if (a1 == 1633771875 || a1 == 1667312947)
            return result;
          v4 = 24931;
        }
        else if (a1 > 1667330146)
        {
          if (a1 == 1667330147)
            return result;
          v4 = 30307;
        }
        else
        {
          if (a1 == 1667326824)
            return result;
          v4 = 25456;
        }
        v6 = v4 | 0x63610000;
        goto LABEL_81;
      }
      if (a1 <= 1667656802)
      {
        if (a1 != 1667524657 && a1 != 1667574579)
        {
          v6 = 1667575091;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1668047202)
      {
        if (a1 == 1668047203)
          return result;
        v6 = 1668641633;
      }
      else
      {
        if (a1 == 1667656803)
          return result;
        v6 = 1667790435;
      }
LABEL_81:
      if (a1 == v6)
        return result;
      return 0;
    }
    if (a1 <= 1885430578)
    {
      if (a1 <= 1701733237)
      {
        if (a1 != 1685220713 && a1 != 1700886115)
        {
          v6 = 1701733217;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1882599479)
      {
        if (a1 == 1882599480)
          return result;
        v6 = 1885430115;
      }
      else
      {
        if (a1 == 1701733238)
          return result;
        v6 = 1869117027;
      }
      goto LABEL_81;
    }
    if (a1 <= 1885547314)
    {
      v8 = a1 - 1885430579;
      if (v8 > 0x3D || ((1 << v8) & 0x2020000000000001) == 0)
        return 0;
      return result;
    }
    if (a1 <= 1886745440)
    {
      if (a1 == 1885547315)
        return result;
      v6 = 1885692723;
      goto LABEL_81;
    }
    if (a1 == 1886745441)
      return result;
    v5 = 24931;
LABEL_78:
    v6 = v5 | 0x71610000;
    goto LABEL_81;
  }
  if (a1 <= 1902667125)
  {
    if (a1 > 1902324530)
    {
      if (a1 <= 1902405732)
      {
        if (a1 == 1902324531 || a1 == 1902403958)
          return result;
        v7 = 26673;
      }
      else
      {
        if (a1 > 1902469938)
        {
          if (a1 == 1902469939)
            return result;
          v6 = 1902537827;
          goto LABEL_81;
        }
        if (a1 == 1902405733)
          return result;
        v7 = 28024;
      }
      v6 = v7 | 0x71640000;
      goto LABEL_81;
    }
    if ((a1 - 1902207795) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0
      || (a1 - 1902212657) <= 0x34 && ((1 << (a1 - 49)) & 0x14000000000001) != 0)
    {
      return result;
    }
    v5 = 28771;
    goto LABEL_78;
  }
  if (a1 <= 2053202738)
  {
    if (a1 <= 1902998903)
    {
      if (a1 != 1902667126 && a1 != 1902671459)
      {
        v6 = 1902928227;
        goto LABEL_81;
      }
      return result;
    }
    if (a1 > 1903587384)
    {
      if (a1 == 1903587385)
        return result;
      v3 = 24931;
      goto LABEL_71;
    }
    if (a1 == 1902998904)
      return result;
    v6 = 1903522657;
    goto LABEL_81;
  }
  if (a1 > 2053319474)
  {
    if (a1 > 2053923170)
    {
      if (a1 == 2053923171)
        return result;
      v6 = 2054517601;
    }
    else
    {
      if (a1 == 2053319475)
        return result;
      v6 = 2053464883;
    }
    goto LABEL_81;
  }
  if ((a1 - 2053202739) > 0x3D || ((1 << (a1 - 51)) & 0x2020000000000001) == 0)
  {
    v3 = 30307;
LABEL_71:
    v6 = v3 | 0x7A610000;
    goto LABEL_81;
  }
  return result;
}

void vtInitializeVideoDecoderRegistry()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (shouldPreferInternalDecoders_preferInternalOnceToken != -1)
    dispatch_once_f(&shouldPreferInternalDecoders_preferInternalOnceToken, &shouldPreferInternalDecoders_preferInternal, (dispatch_function_t)vtGetPreferInternalDecoders);
  v0 = shouldPreferInternalDecoders_preferInternal;
  sVideoDecoderRegistryMutex = FigSimpleMutexCreate();
  MEMORY[0x1940281CC](&sCreateVideoDecoderRegistryOnce, vtCreateVideoDecoderRegistry);
  if (FigIsHDRAllowedOnDevice())
  {
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x64766831u, 0, CFSTR("DolbyVision (HEVC)"), CFSTR("com.apple.videotoolbox.videodecoder.dolbyvision.hevc"), 8, CFSTR("hvc1"), (uint64_t)DolbyVisionDecoder_CreateInstance, v1, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x646D7578u, 0, CFSTR("DolbyVision (HEVC) with Muxed Alpha"), CFSTR("com.apple.videotoolbox.videodecoder.dolbyvision.hevc-with-alpha"), 8, CFSTR("muxa"), (uint64_t)DolbyVisionDecoder_CreateInstance, v2, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x64617631u, 0, CFSTR("DolbyVision (AV1)"), CFSTR("com.apple.videotoolbox.videodecoder.dolbyvision.av1"), 8, CFSTR("av01"), (uint64_t)DolbyVisionDecoder_CreateInstance, v3, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x71646176u, 0, CFSTR("Protected DolbyVision (AV1 cbcs)"), CFSTR("com.apple.videotoolbox.videodecoder.dolbyvision.qda1"), 8, CFSTR("qav1"), (uint64_t)DolbyVisionDecoder_CreateInstance, v4, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x71646831u, 0, CFSTR("Protected DolbyVision (HEVC cbcs)"), CFSTR("com.apple.videotoolbox.videodecoder.dolbyvision.qdh1"), 8, CFSTR("qhvc"), (uint64_t)DolbyVisionDecoder_CreateInstance, v5, 0);
    if (_os_feature_enabled_impl())
      vtRegisterVideoDecoderWithInfoKeysAndValues(0x71646D78u, 0, CFSTR("Protected DolbyVision (HEVC cbcs) with Muxed Alpha"), CFSTR("com.apple.videotoolbox.videodecoder.dolbyvision.qdmx"), 8, CFSTR("qmux"), (uint64_t)DolbyVisionDecoder_CreateInstance, v6, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x63646831u, 0, CFSTR("Protected DolbyVision (HEVC)"), CFSTR("com.apple.videotoolbox.videodecoder.dolbyvision.cdh1"), 8, CFSTR("chvc"), (uint64_t)DolbyVisionDecoder_CreateInstance, v6, 0);
  }
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x6A706567u, 4294967276, CFSTR("JPEG applejpeg"), CFSTR("com.apple.videotoolbox.videodecoder.jpeg.applejpeg"), 0, 0, (uint64_t)AppleJPEGVideoDecoder_CreateInstance, v1, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x6A706567u, 4294967266, CFSTR("JPEG"), CFSTR("com.apple.videotoolbox.videodecoder.jpeg"), 0, 0, (uint64_t)JPEGVideoDecoder_CreateInstance, v7, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x646D6231u, 4294967276, CFSTR("OpenDML JPEG applejpeg"), CFSTR("com.apple.videotoolbox.videodecoder.dmb1.applejpeg"), 0, 0, (uint64_t)AppleJPEGVideoDecoder_CreateInstance, v8, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x646D6231u, 4294967266, CFSTR("OpenDML JPEG"), CFSTR("com.apple.videotoolbox.videodecoder.dmb1"), 0, 0, (uint64_t)JPEGVideoDecoder_CreateInstance, v9, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x69706220u, 0, CFSTR("Test IPB"), CFSTR("com.apple.videotoolbox.videodecoder.ipb"), 0, 0, (uint64_t)TestIPBVideoDecoder_CreateInstance, v10, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x6D757861u, 0, CFSTR("Muxed Alpha"), CFSTR("com.apple.videotoolbox.videodecoder.hevc-with-alpha"), 8, CFSTR("hvc1"), (uint64_t)MuxedAlphaDecoder_CreateInstance, v11, 0);
  if (_os_feature_enabled_impl())
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x716D7578u, 0, CFSTR("Muxed Alpha (CBCS)"), CFSTR("com.apple.videotoolbox.videodecoder.cbcs-hevc-with-alpha"), 8, CFSTR("qhvc"), (uint64_t)MuxedAlphaDecoder_CreateInstance, v12, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x64697368u, 0, CFSTR("Disparity"), CFSTR("com.apple.videotoolbox.videodecoder.disparity-hevc"), 8, CFSTR("hvc1"), (uint64_t)DepthWrapperDecoder_CreateInstance, v12, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x64657068u, 0, CFSTR("Depth"), CFSTR("com.apple.videotoolbox.videodecoder.depth-hevc"), 8, CFSTR("hvc1"), (uint64_t)DepthWrapperDecoder_CreateInstance, v13, 0);
  if (v0)
    VTLoadVideoDecodersPreferringInternalBundles();
  else
    VTLoadVideoDecoders();
  if (!VTAvoidHardwareDecoders())
    vtLoadParavirtualizedVideoDecoders();
}

void vtLoadParavirtualizedVideoDecoders()
{
  int appended;
  CFTypeID v1;
  const __CFArray *v2;
  int UInt32;
  CFIndex v4;
  const __CFAllocator *v5;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  CFTypeID v8;
  const void *Value;
  const __CFString *v10;
  CFStringRef v11;
  CFTypeID v12;
  CFTypeID v13;
  CFStringRef v14;
  int v15;
  const void *v16;
  const void *v17;
  CFStringRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  const __CFString *v24;
  const void *v25;
  uint64_t v26;
  const __CFArray *v27;
  CFIndex Count;
  CFStringRef v29;
  CFTypeRef cf;
  CFTypeRef v31;
  CFTypeRef v32;
  CMBlockBufferRef v33;
  int v34;

  if (vtLoadParavirtualizedVideoDecoders_sCreateGuestUUIDOnce != -1)
    dispatch_once(&vtLoadParavirtualizedVideoDecoders_sCreateGuestUUIDOnce, &__block_literal_global_1);
  if (VTParavirtualizationGuestInstallHandlerForUUID((CFUUIDBytes *)&vtLoadParavirtualizedVideoDecoders_sGuestUUID, &__block_literal_global_134, 0))return;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  cf = 0;
  v31 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1684366195, 1, (uint64_t)&vtLoadParavirtualizedVideoDecoders_sGuestUUID, 0, &v33, &v32);
  if (appended)
    goto LABEL_53;
  appended = VTParavirtualizationMessageAppendUInt32();
  if (appended)
    goto LABEL_53;
  appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v33, &v31);
  if (appended)
    goto LABEL_53;
  appended = VTParavirtualizationMessageCopyCFPropertyList((OpaqueCMBlockBuffer *)v31, 744777059, &cf);
  if (appended)
    goto LABEL_53;
  if (!cf || (v1 = CFGetTypeID(cf), v1 != CFArrayGetTypeID()))
  {
    appended = FigSignalErrorAt();
LABEL_53:
    UInt32 = appended;
    v2 = 0;
    goto LABEL_11;
  }
  v2 = (const __CFArray *)cf;
  cf = 0;
  UInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v31, 745956722, &v34);
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (UInt32)
  {
LABEL_42:
    if (!v2)
      return;
  }
  else
  {
    if (!v2)
      return;
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = 0;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v27 = v2;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v4);
        if (!ValueAtIndex || (v7 = ValueAtIndex, v8 = CFGetTypeID(ValueAtIndex), v8 != CFDictionaryGetTypeID()))
        {
          FigSignalErrorAt();
          goto LABEL_42;
        }
        LODWORD(v33) = 0;
        Value = CFDictionaryGetValue(v7, CFSTR("CMClassImplementationID"));
        v10 = (const __CFString *)CFDictionaryGetValue(v7, CFSTR("VTCodecType"));
        if (v10
          && ((v11 = v10, v12 = CFGetTypeID(v10), v12 == CFStringGetTypeID())
           || (v13 = CFGetTypeID(v11), v13 == CFArrayGetTypeID())))
        {
          v14 = CFStringCreateWithFormat(v5, 0, CFSTR("paravirtualized:%@"), Value, v23, v24, v25, v26);
          v29 = 0;
        }
        else
        {
          LODWORD(v32) = 0;
          FigCFDictionaryGetInt32IfPresent();
          v15 = (int)v32;
          if ((_os_feature_enabled_impl() & 1) == 0 && FigCodecTypeIsProtected(v15)
            || v15 == 1634759272
            || v15 == 1634759278)
          {
            goto LABEL_41;
          }
          LODWORD(v31) = bswap32(v32);
          v11 = CFStringCreateWithBytes(v5, (const UInt8 *)&v31, 4, 0x600u, 0);
          v14 = CFStringCreateWithFormat(v5, 0, CFSTR("paravirtualized:%@:%c%c%c%c"), Value, v32 >> 24, BYTE2(v32), BYTE1(v32), v32);
          v29 = v11;
        }
        FigCFDictionaryGetInt32IfPresent();
        v16 = CFDictionaryGetValue(v7, CFSTR("CMClassImplementationName"));
        v17 = CFDictionaryGetValue(v7, CFSTR("VTDecoderCapabilities"));
        v18 = CFStringCreateWithFormat(v5, 0, CFSTR("paravirtualized:%@"), v16);
        v25 = v17;
        v26 = 0;
        v23 = Value;
        v24 = CFSTR("VTDecoderCapabilities");
        if (vtRegisterVideoDecoderWithSpecificationArgumentWithInfoKeysAndValues(v11, v33, v18, v14, v19, v20, v21, v22, CFSTR("VTHostDecoderID")))
        {
          v2 = v27;
          if (v18)
            CFRelease(v18);
          if (v14)
            CFRelease(v14);
          if (v29)
            CFRelease(v29);
          goto LABEL_42;
        }
        if (v18)
          CFRelease(v18);
        v2 = v27;
        if (v14)
          CFRelease(v14);
        if (v29)
          CFRelease(v29);
LABEL_41:
        if (Count == ++v4)
          goto LABEL_42;
      }
    }
  }
  CFRelease(v2);
}

uint64_t vtGetPreferInternalDecoders(_BYTE *a1)
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  *a1 = result;
  return result;
}

void vtRegisterVideoDecoderWithInfoKeysAndValues(unsigned int a1, uint64_t a2, const void *a3, const void *a4, char a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CFStringRef v15;
  CFStringRef v16;
  UInt8 bytes[4];

  *(_DWORD *)bytes = bswap32(a1);
  v15 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 4, 0x600u, 0);
  if (v15)
  {
    v16 = v15;
    vtRegisterVideoDecoderWithInfoKeysAndValuesInternal2(v15, a2, a3, a4, a5, a6, a7, 0, &a9);
    CFRelease(v16);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t vtRegisterVideoDecoderWithInfoKeysAndValuesInternal2(const void *a1, uint64_t a2, const void *a3, const void *a4, char a5, const void *a6, uint64_t a7, uint64_t a8, const void **a9)
{
  const __CFAllocator *v16;
  __CFDictionary *Mutable;
  __CFDictionary *v18;
  const void **v19;
  const void **v20;
  const void **v21;
  CFMutableDictionaryRef v22;
  __CFDictionary *v23;
  const void *v25;
  const void **v26;
  const void *v27;
  int v28;
  __CFDictionary *v29;
  const void **v30;
  uint64_t v31;
  __CFDictionary *v32;
  const void **v34;
  const void **v35;

  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v18 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("VTCodecType"), a1);
  FigCFDictionarySetInt32();
  v19 = (const void **)MEMORY[0x1E0C9AE40];
  if ((a5 & 1) != 0)
    CFDictionarySetValue(v18, CFSTR("VTAllowSandboxedDecode"), (const void *)*MEMORY[0x1E0C9AE40]);
  v20 = (const void **)MEMORY[0x1E0C9AE50];
  if ((a5 & 2) != 0)
    v21 = (const void **)MEMORY[0x1E0C9AE50];
  else
    v21 = v19;
  CFDictionarySetValue(v18, CFSTR("VTIsHardwareAccelerated"), *v21);
  if ((a5 & 8) != 0)
  {
    CFDictionarySetValue(v18, CFSTR("VTIsWrapperDecoder"), *v20);
    if (a6)
      CFDictionarySetValue(v18, CFSTR("VTWrapsCodecType"), a6);
  }
  if ((a5 & 0x10) != 0)
    CFDictionarySetValue(v18, CFSTR("VTIsParavirtualized"), *v20);
  v22 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v22)
  {
    v23 = v22;
    v34 = a9 + 1;
    v25 = *a9;
    if (*a9)
    {
      do
      {
        v26 = v34;
        v35 = v34 + 1;
        v27 = *v26;
        if (*v26)
        {
          v28 = CFEqual(v25, CFSTR("VTHostDecoderID"));
          v29 = v18;
          if (!v28)
          {
            if (CFEqual(v25, CFSTR("VTDecoderCapabilities")))
              v29 = v18;
            else
              v29 = v23;
          }
          CFDictionarySetValue(v29, v25, v27);
        }
        v30 = v35;
        v34 = v35 + 1;
        v25 = *v30;
      }
      while (*v30);
    }
    if (CFDictionaryGetCount(v23) >= 1)
      CFDictionarySetValue(v18, CFSTR("VTRequiredSpecificationEntries"), v23);
    v31 = vtRegisterVideoDecoderInternal(a3, a4, v18, a7, a8);
    CFRelease(v18);
    v32 = v23;
  }
  else
  {
    v31 = FigSignalErrorAt();
    v32 = v18;
  }
  CFRelease(v32);
  return v31;
}

void __vtLoadParavirtualizedVideoDecoders_block_invoke()
{
  const __CFUUID *v0;

  v0 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  vtLoadParavirtualizedVideoDecoders_sGuestUUID = (__int128)CFUUIDGetUUIDBytes(v0);
  if (v0)
    CFRelease(v0);
}

uint64_t __vtLoadParavirtualizedVideoDecoders_block_invoke_2(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  CFUUIDRef v3;
  int v5;
  __int128 v6;

  v6 = vtLoadParavirtualizedVideoDecoders_sGuestUUID;
  v3 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFUUIDBytes)vtLoadParavirtualizedVideoDecoders_sGuestUUID);
  v5 = 0;
  if (!VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a2, &v5, 0, 0))
  {
    if (v5 == 1383295341)
    {
      if (!vtUnregisterParavirtualizedVideoDecoders())
        sReloadParavirtualizedDecodersList = 1;
    }
    else if (v5 == 1115252001 && !vtUnregisterParavirtualizedVideoDecoders())
    {
      sReloadParavirtualizedDecodersList = 1;
      VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)&v6);
    }
  }
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t vtUnregisterParavirtualizedVideoDecoders()
{
  uint64_t v0;

  if (!sVideoDecoderRegistry)
    return FigSignalErrorAt();
  v0 = FigRegistryCopyFilteredItemList();
  if ((_DWORD)v0)
    return v0;
  else
    return 0;
}

uint64_t vtFilterRegistryItemForParavirtualizedDecodersOnly()
{
  if (!FigRegistryItemCopyMatchingInfo())
    FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

uint64_t vtRegisterVideoDecoderWithSpecificationArgumentWithInfoKeysAndValues(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  return vtRegisterVideoDecoderWithInfoKeysAndValuesInternal2(a1, a2, a3, a4, 19, 0, 0, (uint64_t)ParavirtualizedVideoDecoder_CreateInstanceWithSpecification, &a9);
}

uint64_t vtscr_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTCompressionSessionRemoteID = result;
  return result;
}

uint64_t VTCompressionSessionRemote_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v14;
  uint64_t Instance;
  uint64_t v16;
  CFAllocatorRef *v17;
  __CFDictionary *MutableCopy;
  __CFDictionary *v19;
  __CFDictionary *v20;
  uint64_t CFDataFromCFPropertyList;
  uint64_t v22;
  uint64_t v23;

  v14 = vtcsr_oneTimeInitialization();
  if ((_DWORD)v14)
    goto LABEL_28;
  MEMORY[0x1940281CC](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v14 = FigSignalErrorAt();
LABEL_28:
    v22 = v14;
    v20 = 0;
    goto LABEL_21;
  }
  v16 = Instance;
  *(_QWORD *)(Instance + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_DWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 112) = a10;
  *(_QWORD *)(v16 + 176) = a11;
  *(_QWORD *)(v16 + 80) = dispatch_group_create();
  *(_QWORD *)(v16 + 88) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(v16 + 72) = dispatch_queue_create("com.apple.coremedia.compressionsession.pendingframequeue", 0);
  *(_QWORD *)(v16 + 128) = FigSemaphoreCreate();
  *(_QWORD *)(v16 + 160) = FigSemaphoreCreate();
  *(_QWORD *)(v16 + 208) = 1;
  *(_QWORD *)(v16 + 48) = FigSemaphoreCreate();
  v17 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a6)
  {
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
    {
      if (CFDictionaryContainsKey(a6, CFSTR("CMSession")))
      {
        MutableCopy = CFDictionaryCreateMutableCopy(*v17, 0, a6);
        if (!MutableCopy)
        {
          v22 = 0;
          v20 = 0;
          goto LABEL_23;
        }
        v19 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, CFSTR("CMSession"));
        v20 = v19;
      }
      else
      {
        v20 = 0;
      }
    }
    else
    {
      v20 = 0;
    }
    CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if ((_DWORD)CFDataFromCFPropertyList)
      goto LABEL_22;
  }
  else
  {
    v20 = 0;
  }
  if (a7 && (CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), (_DWORD)CFDataFromCFPropertyList)
    || a9 && (CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), (_DWORD)CFDataFromCFPropertyList)
    || (*(_QWORD *)(v16 + 224) = 0,
        CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey(),
        (_DWORD)CFDataFromCFPropertyList)
    || (CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObject(), (_DWORD)CFDataFromCFPropertyList)
    || (CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo(), (_DWORD)CFDataFromCFPropertyList))
  {
LABEL_22:
    v22 = CFDataFromCFPropertyList;
    goto LABEL_23;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v22 = 0;
  if (a12)
  {
    *a12 = v16;
LABEL_21:
    v23 = vtcsr_handleMachErrorsInternal(0, v22);
    goto LABEL_24;
  }
LABEL_23:
  v23 = vtcsr_handleMachErrorsInternal(v16, v22);
  CFRelease((CFTypeRef)v16);
LABEL_24:
  if (v20)
    CFRelease(v20);
  return v23;
}

uint64_t vtcsr_oneTimeInitialization()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtcsr_oneTimeInitialization_block_invoke;
  block[3] = &unk_1E2F61D30;
  block[4] = &v3;
  if (vtcsr_oneTimeInitialization_once != -1)
    dispatch_once(&vtcsr_oneTimeInitialization_once, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t weakReferenceTable_AddPointerAndGetKey()
{
  MEMORY[0x1940281CC](&gWeakReferenceTable_RemoteCompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteCompressionSessionClient)
    return FigCFWeakReferenceTableAddValueAndGetKey();
  else
    return FigSignalErrorAt();
}

void vtcsr_handleDeadServerConnection(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[7];
  _QWORD block[7];
  _QWORD v9[4];
  _QWORD v10[4];

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v10[3] = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  *(_BYTE *)(a2 + 28) = 1;
  v3 = *(NSObject **)(a2 + 72);
  v4 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtcsr_handleDeadServerConnection_block_invoke;
  block[3] = &unk_1E2F61DE8;
  block[5] = v9;
  block[6] = a2;
  block[4] = v10;
  dispatch_sync(v3, block);
  CFRetain((CFTypeRef)a2);
  v5 = *(NSObject **)(a2 + 80);
  v6 = *(NSObject **)(a2 + 88);
  v7[0] = v4;
  v7[1] = 0x40000000;
  v7[2] = __vtcsr_handleDeadServerConnection_block_invoke_2;
  v7[3] = &unk_1E2F61E10;
  v7[4] = v9;
  v7[5] = v10;
  v7[6] = a2;
  dispatch_group_async(v5, v6, v7);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
}

uint64_t vtcsr_handleMachErrorsInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((int)a2 <= 268435458)
  {
    if ((_DWORD)a2 != -308 && (_DWORD)a2 != -303)
      goto LABEL_11;
  }
  else if ((a2 - 268435459) >= 2 && (_DWORD)a2 != 268451843)
  {
LABEL_11:
    v2 = a2;
LABEL_12:
    if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
      goto LABEL_15;
    return v2;
  }
  if (a1)
  {
    *(_BYTE *)(a1 + 28) = 1;
    v2 = 4294954384;
    goto LABEL_12;
  }
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    v2 = 4294954384;
LABEL_15:
    FigRPCKillServerOnTimeout();
    return v2;
  }
  return 4294954384;
}

_QWORD *VTCompressionSessionRemote_Invalidate(_QWORD *result)
{
  uint64_t v1;
  mach_port_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v1 = (uint64_t)result;
  if (*((_BYTE *)result + 60))
    return result;
  *((_BYTE *)result + 60) = 1;
  v2 = *((_DWORD *)result + 6);
  if (v2 && *(_QWORD *)(v1 + 96))
  {
    if (*(_QWORD *)(v1 + 120))
    {
      if (VTCompressionSessionRemoteClient_CompleteTiles(v2))
      {
LABEL_8:
        if (*(_QWORD *)(v1 + 88))
          vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(v1, 1, 1);
        FigSemaphoreWaitRelative();
        FigSemaphoreSignal();
        VTCompressionSessionRemoteClient_Destroy(*(_DWORD *)(v1 + 24));
        goto LABEL_11;
      }
    }
    else if (*(_DWORD *)(v1 + 32) == 2)
    {
      if (VTCompressionSessionRemoteClient_CompleteMotionEstimation(v2))
        goto LABEL_8;
    }
    else
    {
      v8 = *MEMORY[0x1E0CA2E18];
      v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      if (VTCompressionSessionRemoteClient_CompleteFrames(v2, &v8))
        goto LABEL_8;
    }
    FigSemaphoreWaitRelative();
    goto LABEL_8;
  }
LABEL_11:
  if (*(_QWORD *)(v1 + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigRPCDisposeServerConnection();
    *(_QWORD *)(v1 + 16) = 0;
  }
  v3 = *(NSObject **)(v1 + 80);
  if (v3)
    dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  v4 = *(const void **)(v1 + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v1 + 64) = 0;
  }
  v5 = *(const void **)(v1 + 104);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(v1 + 104) = 0;
  }
  v6 = *(const void **)(v1 + 192);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(v1 + 192) = 0;
  }
  v7 = *(const void **)(v1 + 200);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(v1 + 200) = 0;
  }
  return weakReferenceTable_RemovePointer((_QWORD *)(v1 + 224));
}

uint64_t vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(uint64_t a1, char a2, int a3)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD block[6];
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v5 = *(NSObject **)(a1 + 80);
  v6 = *(NSObject **)(a1 + 88);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtcsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke;
  block[3] = &unk_1E2F61D58;
  v10 = a2;
  block[4] = &v11;
  block[5] = a1;
  dispatch_group_async(v5, v6, block);
  if (a3)
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
  v7 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v7;
}

_QWORD *weakReferenceTable_RemovePointer(_QWORD *result)
{
  _QWORD *v1;

  if (*result)
  {
    v1 = result;
    MEMORY[0x1940281CC](&gWeakReferenceTable_RemoteCompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization);
    if (gWeakReferenceTable_RemoteCompressionSessionClient)
    {
      result = (_QWORD *)FigCFWeakReferenceTableRemoveValue();
      *v1 = 0;
    }
    else
    {
      return (_QWORD *)FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t VTCompressionSessionRemote_CopySupportedPropertyDictionary(uint64_t a1)
{
  uint64_t CFPropertyListFromData;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  v7 = 0;
  v6 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  CFPropertyListFromData = VTCompressionSessionRemoteClient_CopySupportedPropertyDictionary(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if ((_DWORD)CFPropertyListFromData)
    goto LABEL_7;
  v4 = v8;
  if (!v8)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_7:
    v4 = CFPropertyListFromData;
  }
  v5 = vtcsr_handleMachErrorsInternal(a1, v4);
  if (v6)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v7);
  return v5;
}

uint64_t VTCompressionSessionRemote_CopySerializableProperties(uint64_t a1)
{
  uint64_t CFPropertyListFromData;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  v7 = 0;
  v6 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  CFPropertyListFromData = VTCompressionSessionRemoteClient_CopySerializableProperties(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if ((_DWORD)CFPropertyListFromData)
    goto LABEL_7;
  v4 = v8;
  if (!v8)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_7:
    v4 = CFPropertyListFromData;
  }
  v5 = vtcsr_handleMachErrorsInternal(a1, v4);
  if (v6)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v7);
  return v5;
}

uint64_t VTCompressionSessionRemote_CopyProperty(uint64_t a1)
{
  const char *CStringPtrAndBufferToFree;
  uint64_t CFPropertyListFromData;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  v9 = 0;
  v8 = 0;
  v7 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  CFPropertyListFromData = VTCompressionSessionRemoteClient_CopyProperty(*(_DWORD *)(a1 + 24), CStringPtrAndBufferToFree, &v8, &v7, &v9);
  if ((_DWORD)CFPropertyListFromData)
    goto LABEL_7;
  v5 = v9;
  if (!v9)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_7:
    v5 = CFPropertyListFromData;
  }
  free(0);
  v6 = vtcsr_handleMachErrorsInternal(a1, v5);
  if (v7)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v8);
  return v6;
}

uint64_t VTCompressionSessionRemote_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  const char *CStringPtrAndBufferToFree;
  uint64_t CFDataFromCFPropertyList;
  mach_port_t v13;
  const UInt8 *BytePtr;
  unsigned int Length;
  uint64_t v16;
  unsigned int v17;

  v17 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  if (FigCFEqual())
  {
    v7 = *(const void **)(a1 + 216);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 216) = 0;
    }
  }
  if (CFEqual(CFSTR("MultiPassStorage"), a2))
  {
    if (a3 && (v8 = *(_QWORD *)(a3 + 16)) != 0)
      v9 = *(_DWORD *)(v8 + 24);
    else
      v9 = 0;
    v10 = VTCompressionSessionRemoteClient_SetMultiPassStorage(*(_DWORD *)(a1 + 24), v9, &v17);
    goto LABEL_15;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  CFGetAllocator((CFTypeRef)a1);
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (!(_DWORD)CFDataFromCFPropertyList)
  {
    v13 = *(_DWORD *)(a1 + 24);
    BytePtr = CFDataGetBytePtr(0);
    Length = CFDataGetLength(0);
    v10 = VTCompressionSessionRemoteClient_SetProperty(v13, CStringPtrAndBufferToFree, (uint64_t)BytePtr, Length, (int *)&v17);
LABEL_15:
    if (v10)
      v16 = v10;
    else
      v16 = v17;
    goto LABEL_18;
  }
  v16 = CFDataFromCFPropertyList;
LABEL_18:
  free(0);
  return vtcsr_handleMachErrorsInternal(a1, v16);
}

uint64_t VTCompressionSessionRemote_SetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  _QWORD *Value;
  uint64_t v6;
  int v7;
  __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  uint64_t CFDataFromCFPropertyList;
  mach_port_t v14;
  const UInt8 *BytePtr;
  int Length;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  v19 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  Value = CFDictionaryGetValue(theDict, CFSTR("MultiPassStorage"));
  if (!Value)
  {
    v8 = 0;
    goto LABEL_14;
  }
  v6 = Value[2];
  if (v6)
    v7 = *(_DWORD *)(v6 + 24);
  else
    v7 = 0;
  v9 = VTCompressionSessionRemoteClient_SetMultiPassStorage(*(_DWORD *)(a1 + 24), v7, &v19);
  if ((_DWORD)v9)
    goto LABEL_25;
  v10 = v19;
  if (v19)
  {
LABEL_19:
    v8 = 0;
    goto LABEL_20;
  }
  if (CFDictionaryGetCount(theDict) < 2)
  {
    v10 = 0;
    goto LABEL_19;
  }
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  if (!MutableCopy)
  {
    v9 = FigSignalErrorAt();
LABEL_25:
    v10 = v9;
    goto LABEL_19;
  }
  v12 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, CFSTR("MultiPassStorage"));
  v8 = v12;
LABEL_14:
  CFGetAllocator((CFTypeRef)a1);
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if ((_DWORD)CFDataFromCFPropertyList)
  {
    v10 = CFDataFromCFPropertyList;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 24);
    BytePtr = CFDataGetBytePtr(0);
    Length = CFDataGetLength(0);
    v17 = VTCompressionSessionRemoteClient_SetProperties(v14, (uint64_t)BytePtr, Length, (int *)&v19);
    if (v17)
      v10 = v17;
    else
      v10 = v19;
  }
LABEL_20:
  v18 = vtcsr_handleMachErrorsInternal(a1, v10);
  if (v8)
    CFRelease(v8);
  return v18;
}

uint64_t VTCompressionSessionRemote_GetPixelBufferPool(_QWORD *cf)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  if (*((_BYTE *)cf + 28) || *((_BYTE *)cf + 60))
  {
    if (FigSignalErrorAt())
      return 0;
    return cf[25];
  }
  CFGetAllocator(cf);
  v2 = VTCompressionSessionRemote_CopyProperty((uint64_t)cf);
  if (!(_DWORD)v2)
  {
    if (FigCFEqual())
    {
LABEL_10:
      v5 = 0;
      goto LABEL_11;
    }
    v2 = VTCompressionSessionRemote_CopyProperty((uint64_t)cf);
    if (!(_DWORD)v2)
    {
      v3 = (const void *)cf[25];
      if (v3)
      {
        CFRelease(v3);
        cf[25] = 0;
      }
      v4 = (const void *)cf[24];
      cf[24] = 0;
      if (v4)
        CFRelease(v4);
      goto LABEL_10;
    }
  }
  v5 = v2;
LABEL_11:
  if (vtcsr_handleMachErrorsInternal((uint64_t)cf, v5))
    return 0;
  return cf[25];
}

uint64_t VTCompressionSessionRemote_PrepareToEncodeFrames(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v3 = VTCompressionSessionRemoteClient_PrepareToEncodeFrames(*(_DWORD *)(a1 + 24));
  if ((_DWORD)v3)
    goto LABEL_9;
  if (FigSemaphoreWaitRelative())
  {
    v3 = FigSignalErrorAt();
LABEL_9:
    v4 = v3;
    return vtcsr_handleMachErrorsInternal(a1, v4);
  }
  v4 = *(unsigned int *)(a1 + 140);
  return vtcsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTCompressionSessionRemoteCallbackServer_PrepareToEncodeFramesReturn(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  const void *v5;

  v4 = weakReferenceTable_CopyPointerFromKey();
  if (v4)
  {
    v5 = (const void *)v4;
    *(_DWORD *)(v4 + 140) = a3;
    FigSemaphoreSignal();
    CFRelease(v5);
  }
  return 0;
}

uint64_t weakReferenceTable_CopyPointerFromKey()
{
  MEMORY[0x1940281CC](&gWeakReferenceTable_RemoteCompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteCompressionSessionClient)
    return FigCFWeakReferenceTableCopyValue();
  FigSignalErrorAt();
  return 0;
}

uint64_t VTCompressionSessionRemote_EncodeFrame(uint64_t a1, uint64_t a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a4;
  v12 = *(_QWORD *)(a4 + 16);
  v9 = *a5;
  v10 = *((_QWORD *)a5 + 2);
  return vtCompressionSessionRemote_EncodeFrameCommon(a1, a2, a3, &v11, (uint64_t)&v9, a6, a7, a8, 0);
}

uint64_t vtCompressionSessionRemote_EncodeFrameCommon(uint64_t a1, uint64_t a2, CMTaggedBufferGroupRef group, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, const void *a9)
{
  vm_map_t *v16;
  uint64_t SerializedAtomDataForPixelBuffer;
  uint64_t v18;
  const __CFData *v19;
  CMItemCount Count;
  CMItemCount v22;
  CFIndex v23;
  __int128 *v24;
  CMTagCollectionRef TagCollectionAtIndex;
  const __CFData *v26;
  CFIndex Length;
  uint64_t v28;
  uint64_t CFDataFromCFPropertyList;
  uint64_t *v30;
  uint64_t v31;
  NSObject *v32;
  mach_port_name_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  mach_port_name_t v61;
  const UInt8 *BytePtr;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t i;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  unsigned int v93;
  __int128 *v94;
  uint64_t v95;
  unsigned int aBlock;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[6];
  _QWORD block[6];
  CFDataRef theData;
  uint64_t v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  CFRange v123;

  v122 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  v102 = 0;
  v103 = 0;
  theData = 0;
  v121 = 0;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v16 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (!a2)
  {
    v92 = a7;
    v94 = a4;
    v95 = a5;
    v91 = a8;
    if (group)
    {
      Count = CMTaggedBufferGroupGetCount(group);
      if (Count < 6)
      {
        v22 = Count;
        if (Count >= 1)
        {
          v23 = 0;
          v97 = *MEMORY[0x1E0C9AE00];
          v24 = &v109;
          while (1)
          {
            TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(group, v23);
            v26 = (const __CFData *)MEMORY[0x19402810C](TagCollectionAtIndex, v97);
            v19 = v26;
            if (!v26)
              break;
            Length = CFDataGetLength(v26);
            v28 = vm_allocate(*v16, (vm_address_t *)v24 + 3, Length, 1543503873);
            if ((_DWORD)v28)
              goto LABEL_55;
            v123.location = 0;
            v123.length = Length;
            CFDataGetBytes(v19, v123, *((UInt8 **)v24 + 3));
            *((_DWORD *)v24 + 8) = Length;
            CFRelease(v19);
            if (!FigTaggedBufferGroupGetCVPixelBufferAtIndex())
              goto LABEL_56;
            *(_QWORD *)&v107 = 0;
            SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
            *((_DWORD *)v24 + 4) = 0;
            if ((_DWORD)SerializedAtomDataForPixelBuffer)
              goto LABEL_6;
            *(_QWORD *)(a1 + 184) = (*MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
            ++v23;
            v24 = (__int128 *)((char *)v24 + 40);
            if (v22 == v23)
              goto LABEL_18;
          }
          v28 = FigSignalErrorAt();
LABEL_55:
          v18 = v28;
          goto LABEL_37;
        }
      }
LABEL_56:
      CFDataFromCFPropertyList = FigSignalErrorAt();
      goto LABEL_57;
    }
LABEL_18:
    if (!a6 || (CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), !(_DWORD)CFDataFromCFPropertyList))
    {
      v30 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00404814DC14uLL);
      v31 = *(_QWORD *)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v31 + 1;
      *v30 = v31;
      v30[1] = v92;
      v30[4] = (uint64_t)_Block_copy(a9);
      v32 = *(NSObject **)(a1 + 72);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __vtCompressionSessionRemote_EncodeFrameCommon_block_invoke;
      block[3] = &__block_descriptor_tmp_19;
      block[4] = a1;
      block[5] = v30;
      dispatch_sync(v32, block);
      v33 = *(_DWORD *)(a1 + 24);
      v34 = v104;
      v35 = v103;
      v36 = v102;
      v37 = v109;
      v38 = *((_QWORD *)&v109 + 1);
      v39 = v110;
      v40 = *((_QWORD *)&v110 + 1);
      v41 = v111;
      v42 = DWORD2(v111);
      v43 = v112;
      v44 = DWORD2(v112);
      v45 = v113;
      v46 = DWORD2(v113);
      v47 = v114;
      v48 = *((_QWORD *)&v114 + 1);
      v49 = v115;
      v50 = *((_QWORD *)&v115 + 1);
      v51 = v116;
      v52 = DWORD2(v116);
      v53 = v117;
      v54 = DWORD2(v117);
      v98 = v118;
      aBlock = DWORD2(v118);
      v93 = v119;
      v90 = *((_QWORD *)&v119 + 1);
      v89 = v120;
      v88 = *((_QWORD *)&v120 + 1);
      v87 = v121;
      v55 = (int)theData;
      if (theData)
      {
        v72 = v117;
        v73 = DWORD2(v116);
        v74 = v116;
        v75 = *((_QWORD *)&v115 + 1);
        v76 = v115;
        v77 = *((_QWORD *)&v114 + 1);
        v78 = v114;
        v79 = DWORD2(v113);
        v80 = v113;
        v81 = DWORD2(v112);
        v82 = v112;
        v83 = DWORD2(v111);
        v84 = v111;
        v85 = *((_QWORD *)&v110 + 1);
        v86 = v110;
        v56 = *((_QWORD *)&v109 + 1);
        v57 = v109;
        v58 = v102;
        v59 = v103;
        v60 = v104;
        v61 = *(_DWORD *)(a1 + 24);
        BytePtr = CFDataGetBytePtr(theData);
        v55 = (int)theData;
        if (theData)
          v55 = CFDataGetLength(theData);
        v33 = v61;
        v34 = v60;
        v35 = v59;
        v36 = v58;
        v37 = v57;
        v38 = v56;
        v39 = v86;
        v40 = v85;
        v41 = v84;
        v42 = v83;
        v43 = v82;
        v44 = v81;
        v45 = v80;
        v47 = v78;
        v46 = v79;
        v48 = v77;
        v49 = v76;
        v50 = v75;
        v52 = v73;
        v51 = v74;
        v53 = v72;
      }
      else
      {
        BytePtr = 0;
      }
      v63 = *v30;
      v107 = *v94;
      v108 = *((_QWORD *)v94 + 2);
      v105 = *(_OWORD *)v95;
      v106 = *(_QWORD *)(v95 + 16);
      v64 = VTCompressionSessionRemoteClient_EncodeFrame(v33, v34, v35, v36, v37, v38, v39, v40, __SPAIR64__(v42, v41), v43, v44, v45, __SPAIR64__(v47, v46), v48, v49, v50, __SPAIR64__(v52, v51), v53, v54,
              v98,
              __SPAIR64__(v93, aBlock),
              v90,
              v89,
              v88,
              v87,
              (uint64_t)&v107,
              &v105,
              (uint64_t)BytePtr,
              v55,
              v63);
      if ((_DWORD)v64)
      {
        v18 = v64;
        goto LABEL_34;
      }
      FigSemaphoreWaitRelative();
      v18 = *(unsigned int *)(a1 + 140);
      v65 = *(unsigned __int8 *)(a1 + 144);
      if (!(_DWORD)v18)
      {
        v66 = *(_DWORD *)(a1 + 136);
        if ((v66 & 1) != 0)
        {
          if (!v91)
          {
            v18 = 0;
            if (*(_BYTE *)(a1 + 144))
              goto LABEL_36;
            goto LABEL_34;
          }
        }
        else
        {
          v67 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
          v18 = v67;
          if (!v91 || (_DWORD)v67)
            goto LABEL_33;
        }
        v18 = 0;
        *v91 = v66;
      }
LABEL_33:
      if (v65)
      {
LABEL_36:
        v19 = 0;
        goto LABEL_37;
      }
LABEL_34:
      v68 = *(NSObject **)(a1 + 72);
      v99[0] = MEMORY[0x1E0C809B0];
      v99[1] = 0x40000000;
      v99[2] = __vtCompressionSessionRemote_EncodeFrameCommon_block_invoke_2;
      v99[3] = &__block_descriptor_tmp_20_0;
      v99[4] = a1;
      v99[5] = v30;
      dispatch_sync(v68, v99);
      goto LABEL_36;
    }
LABEL_57:
    v18 = CFDataFromCFPropertyList;
    goto LABEL_36;
  }
  SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
  if (!(_DWORD)SerializedAtomDataForPixelBuffer)
  {
    v92 = a7;
    v94 = a4;
    v95 = a5;
    v91 = a8;
    *(_QWORD *)(a1 + 184) = (v102 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    goto LABEL_18;
  }
LABEL_6:
  v18 = SerializedAtomDataForPixelBuffer;
  v19 = 0;
  *(_QWORD *)(a1 + 184) = 0;
LABEL_37:
  v69 = vtcsr_handleMachErrorsInternal(a1, v18);
  if (v104)
    FigMachPortReleaseSendRight_();
  if (v102)
    MEMORY[0x194029090](*v16, v103);
  if (theData)
    CFRelease(theData);
  for (i = 0; i != 200; i += 40)
  {
    if (*(_DWORD *)((char *)&v109 + i))
      FigMachPortReleaseSendRight_();
    v71 = (char *)&v109 + i;
    if (*(_DWORD *)((char *)&v109 + i + 16))
      MEMORY[0x194029090](*v16, *((_QWORD *)v71 + 1));
    if (*((_DWORD *)v71 + 8))
      MEMORY[0x194029090](*v16, *(_QWORD *)((char *)&v110 + i + 8));
  }
  if (v19)
    CFRelease(v19);
  return v69;
}

uint64_t VTCompressionSessionRemote_EncodeFrameWithOutputHandler(uint64_t a1, uint64_t a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, __int128 *a5, uint64_t a6, _DWORD *a7, const void *a8)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a4;
  v12 = *(_QWORD *)(a4 + 16);
  v9 = *a5;
  v10 = *((_QWORD *)a5 + 2);
  return vtCompressionSessionRemote_EncodeFrameCommon(a1, a2, a3, &v11, (uint64_t)&v9, a6, 0, a7, a8);
}

uint64_t VTCompressionSessionRemoteCallbackServer_EncodeReturn(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  uint64_t v8;
  const void *v9;

  v8 = weakReferenceTable_CopyPointerFromKey();
  if (v8)
  {
    v9 = (const void *)v8;
    *(_DWORD *)(v8 + 136) = a3;
    *(_DWORD *)(v8 + 140) = a5;
    *(_BYTE *)(v8 + 144) = a4;
    FigSemaphoreSignal();
    CFRelease(v9);
  }
  return 0;
}

uint64_t VTCompressionSessionRemote_CompleteFrames(uint64_t a1, uint64_t a2)
{
  mach_port_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v4 = *(_DWORD *)(a1 + 24);
  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  v5 = VTCompressionSessionRemoteClient_CompleteFrames(v4, &v7);
  if ((_DWORD)v5)
    goto LABEL_9;
  FigSemaphoreWaitRelative();
  v6 = *(unsigned int *)(a1 + 168);
  if (!(_DWORD)v6)
  {
    v5 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    if (!(_DWORD)v5)
    {
      FigSemaphoreWaitRelative();
      FigSemaphoreSignal();
      v6 = 0;
      return vtcsr_handleMachErrorsInternal(a1, v6);
    }
LABEL_9:
    v6 = v5;
  }
  return vtcsr_handleMachErrorsInternal(a1, v6);
}

uint64_t VTCompressionSessionRemoteCallbackServer_CompleteFramesReturn(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  const void *v5;

  v4 = weakReferenceTable_CopyPointerFromKey();
  if (v4)
  {
    v5 = (const void *)v4;
    *(_DWORD *)(v4 + 168) = a3;
    FigSemaphoreSignal();
    CFRelease(v5);
  }
  return 0;
}

uint64_t VTCompressionSessionRemote_BeginPass(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v6 = VTCompressionSessionRemoteClient_BeginPass(*(_DWORD *)(a1 + 24), a2, &v8, (_DWORD *)&v8 + 1);
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else
  {
    v7 = HIDWORD(v8);
    if (a3)
    {
      if (!HIDWORD(v8))
        *a3 = v8;
    }
  }
  return vtcsr_handleMachErrorsInternal(a1, v7);
}

uint64_t VTCompressionSessionRemote_EndPass(uint64_t a1, BOOL *a2, _DWORD *a3)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = 0;
  v9 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v7 = VTCompressionSessionRemoteClient_EndPass(*(_DWORD *)(a1 + 24), &v10, &v9, (_DWORD *)&v10 + 1);
  if ((_DWORD)v7)
  {
    v8 = v7;
  }
  else
  {
    v8 = HIDWORD(v10);
    if (!HIDWORD(v10))
    {
      if (a2)
        *a2 = (_DWORD)v10 != 0;
      v8 = 0;
      if (a3)
        *a3 = v9;
    }
  }
  return vtcsr_handleMachErrorsInternal(a1, v8);
}

uint64_t VTCompressionSessionRemote_GetTimeRangesForNextPass(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t TimeRangesForNextPass;
  uint64_t v8;
  void *v9;
  size_t v10;
  void *v11;
  unsigned int v12;
  const void *v13;
  uint64_t v14;
  unsigned int v15;

  v15 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  TimeRangesForNextPass = VTCompressionSessionRemoteClient_GetTimeRangesForNextPass(*(_DWORD *)(a1 + 24), &v14, &v13, &v12, &v15);
  if ((_DWORD)TimeRangesForNextPass)
  {
    v8 = TimeRangesForNextPass;
    goto LABEL_20;
  }
  v8 = v15;
  if (!v15)
  {
    v9 = 0;
    if (!v12 || v14 < 1)
      goto LABEL_13;
    v10 = 48 * v14;
    if (48 * v14 > (unint64_t)v12)
      goto LABEL_19;
    v8 = 4294954392;
    if ((unint64_t)v14 <= 0x555555555555555)
    {
      if (v10)
      {
        v11 = malloc_type_malloc(v10, 0x5CC9CBA6uLL);
        if (v11)
        {
          v9 = v11;
          memcpy(v11, v13, 48 * v14);
LABEL_13:
          if (a2)
            *a2 = v14;
          if (a3)
          {
            v8 = 0;
            *a3 = v9;
            goto LABEL_20;
          }
          if (v9)
            free(v9);
LABEL_19:
          v8 = 0;
        }
      }
    }
  }
LABEL_20:
  if (v12)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v13);
  return vtcsr_handleMachErrorsInternal(a1, v8);
}

uint64_t VTMultiPassStorageRemote_Create(uint64_t a1, uint64_t a2, const __CFURL *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t Instance;
  _QWORD *v11;
  uint64_t CFDataFromCFPropertyList;
  const __CFURL *v13;
  const __CFString *v14;
  const __CFString *v15;
  CFIndex MaximumSizeOfFileSystemRepresentation;
  char *v17;
  char *p_buffer;
  CFIndex v19;
  char *v20;
  uint64_t Key;
  uint64_t v22;
  uint64_t v23;
  char buffer;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v9 = vtcsr_oneTimeInitialization();
  if ((_DWORD)v9)
    goto LABEL_30;
  MEMORY[0x1940281CC](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v9 = FigSignalErrorAt();
LABEL_30:
    v22 = v9;
    a3 = 0;
    v17 = 0;
    goto LABEL_19;
  }
  v11 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 80) = dispatch_group_create();
  v11[11] = dispatch_queue_create("com.apple.coremedia.compressionsession.clientcallback", 0);
  if (a5)
  {
    CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if ((_DWORD)CFDataFromCFPropertyList)
    {
      v22 = CFDataFromCFPropertyList;
      a3 = 0;
      v17 = 0;
      goto LABEL_23;
    }
  }
  if (a3)
  {
    v13 = CFURLCopyAbsoluteURL(a3);
    a3 = v13;
    if (v13)
    {
      v14 = CFURLGetString(v13);
      if (v14)
      {
        v15 = v14;
        MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v14);
        if (MaximumSizeOfFileSystemRepresentation < 1024)
        {
          v17 = 0;
          p_buffer = &buffer;
          v19 = 1024;
          goto LABEL_13;
        }
        v19 = MaximumSizeOfFileSystemRepresentation + 1;
        v20 = (char *)malloc_type_malloc(MaximumSizeOfFileSystemRepresentation + 1, 0x9C832853uLL);
        if (v20)
        {
          p_buffer = v20;
          v17 = v20;
LABEL_13:
          if (CFStringGetFileSystemRepresentation(v15, p_buffer, v19))
            goto LABEL_14;
LABEL_21:
          Key = FigSignalErrorAt();
LABEL_22:
          v22 = Key;
          goto LABEL_23;
        }
      }
    }
    v17 = 0;
    goto LABEL_21;
  }
  v17 = 0;
LABEL_14:
  v11[28] = 0;
  Key = weakReferenceTable_AddPointerAndGetKey();
  if ((_DWORD)Key)
    goto LABEL_22;
  Key = FigRPCCreateServerConnectionForObject();
  if ((_DWORD)Key)
    goto LABEL_22;
  Key = FigRPCGetServerConnectionInfo();
  if ((_DWORD)Key)
    goto LABEL_22;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v22 = 0;
  if (a6)
  {
    *a6 = v11;
LABEL_19:
    v23 = vtcsr_handleMachErrorsInternal(0, v22);
    goto LABEL_24;
  }
LABEL_23:
  v23 = vtcsr_handleMachErrorsInternal((uint64_t)v11, v22);
  CFRelease(v11);
LABEL_24:
  if (v17)
    free(v17);
  if (a3)
    CFRelease(a3);
  return v23;
}

_QWORD *VTMultiPassStorageRemote_Invalidate(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (result)
  {
    v1 = (uint64_t)result;
    if (!*((_BYTE *)result + 60))
    {
      *((_BYTE *)result + 60) = 1;
      v2 = *((_DWORD *)result + 6);
      if (v2 && !*(_BYTE *)(v1 + 28))
      {
        v3 = VTCompressionSessionRemoteClient_MultiPassStorageDestroy(v2);
        vtcsr_handleMachErrorsInternal(v1, v3);
      }
      if (*(_QWORD *)(v1 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        FigRPCDisposeServerConnection();
        *(_QWORD *)(v1 + 16) = 0;
      }
      return weakReferenceTable_RemovePointer((_QWORD *)(v1 + 224));
    }
  }
  return result;
}

uint64_t VTMultiPassStorageRemote_SetIdentifier(uint64_t a1)
{
  const char *CStringPtrAndBufferToFree;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;

  v6 = 0;
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  v3 = VTCompressionSessionRemoteClient_MultiPassStorageSetIdentifier(*(_DWORD *)(a1 + 24), CStringPtrAndBufferToFree, &v6);
  if (v3)
    v4 = v3;
  else
    v4 = v6;
  free(0);
  return vtcsr_handleMachErrorsInternal(a1, v4);
}

CFStringRef VTMultiPassStorageRemote_CopyIdentifier(uint64_t a1)
{
  uint64_t v2;
  CFStringRef v3;
  char cStr[512];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = VTCompressionSessionRemoteClient_MultiPassStorageCopyIdentifier(*(_DWORD *)(a1 + 24), cStr);
  if ((_DWORD)v2)
    v3 = 0;
  else
    v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
  vtcsr_handleMachErrorsInternal(a1, v2);
  return v3;
}

uint64_t VTMultiPassStorageRemote_SetDataAtTimeStamp(uint64_t a1, uint64_t a2, int a3, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int Length;
  mach_port_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
  }
  else
  {
    BytePtr = 0;
    Length = 0;
  }
  v10 = *(_DWORD *)(a1 + 24);
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  v11 = VTCompressionSessionRemoteClient_MultiPassStorageSetDataAtTimeStamp(v10, &v15, a3, (uint64_t)BytePtr, Length, (int *)&v14);
  if (v11)
    v12 = v11;
  else
    v12 = v14;
  return vtcsr_handleMachErrorsInternal(a1, v12);
}

uint64_t VTMultiPassStorageRemote_GetTimeStamp(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  char *CStringPtrAndBufferToFree;
  mach_port_name_t v8;
  unsigned int TimeStamp;
  uint64_t v10;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  CStringPtrAndBufferToFree = (char *)FigCFStringGetCStringPtrAndBufferToFree();
  v8 = *(_DWORD *)(a1 + 24);
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  TimeStamp = VTCompressionSessionRemoteClient_MultiPassStorageGetTimeStamp(v8, (uint64_t)&v13, CStringPtrAndBufferToFree, a4, &v12);
  if (TimeStamp)
    v10 = TimeStamp;
  else
    v10 = v12;
  free(0);
  return vtcsr_handleMachErrorsInternal(a1, v10);
}

uint64_t VTMultiPassStorageRemote_GetTimeStampAndDuration(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *CStringPtrAndBufferToFree;
  mach_port_name_t v8;
  unsigned int TimeStampAndDuration;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a5;
  v14 = a4;
  v12 = 0;
  CStringPtrAndBufferToFree = (char *)FigCFStringGetCStringPtrAndBufferToFree();
  v8 = *(_DWORD *)(a1 + 24);
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  TimeStampAndDuration = VTCompressionSessionRemoteClient_MultiPassStorageGetTimeStampAndDuration(v8, (uint64_t)&v15, CStringPtrAndBufferToFree, (uint64_t)&v14, (uint64_t)&v13, &v12);
  if (TimeStampAndDuration)
    v10 = TimeStampAndDuration;
  else
    v10 = v12;
  free(0);
  return vtcsr_handleMachErrorsInternal(a1, v10);
}

uint64_t VTMultiPassStorageRemote_CopyDataAtTimeStamp(uint64_t a1, __int128 *a2, int a3, __CFData **a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  __CFData *Mutable;
  __CFData *v10;
  _DWORD length[4];
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  *(_QWORD *)&length[1] = 0;
  length[0] = 0;
  v6 = *(_DWORD *)(a1 + 24);
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  v7 = VTCompressionSessionRemoteClient_MultiPassStorageCopyDataAtTimeStamp(v6, (uint64_t)&v14, a3, &length[1], length, &v13);
  if ((_DWORD)v7)
  {
    v8 = v7;
  }
  else
  {
    v8 = v13;
    if (v13)
      goto LABEL_10;
    if (!length[0])
    {
      if (!a4)
      {
        v8 = 0;
        return vtcsr_handleMachErrorsInternal(a1, v8);
      }
      v10 = 0;
LABEL_9:
      v8 = 0;
      *a4 = v10;
      goto LABEL_10;
    }
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Mutable)
    {
      v10 = Mutable;
      CFDataAppendBytes(Mutable, *(const UInt8 **)&length[1], length[0]);
      if (!a4)
      {
        CFRelease(v10);
        v8 = 0;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    v8 = 4294954392;
  }
LABEL_10:
  if (length[0])
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], *(_QWORD *)&length[1]);
  return vtcsr_handleMachErrorsInternal(a1, v8);
}

uint64_t VTTileCompressionSessionRemote_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v13;
  uint64_t Instance;
  uint64_t v15;
  CFAllocatorRef *v16;
  __CFDictionary *MutableCopy;
  __CFDictionary *v18;
  __CFDictionary *v19;
  uint64_t CFDataFromCFPropertyList;
  uint64_t v21;
  uint64_t v22;

  v13 = vtcsr_oneTimeInitialization();
  if ((_DWORD)v13)
    goto LABEL_26;
  MEMORY[0x1940281CC](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v13 = FigSignalErrorAt();
LABEL_26:
    v21 = v13;
    v19 = 0;
    goto LABEL_19;
  }
  v15 = Instance;
  *(_QWORD *)(Instance + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_DWORD *)(v15 + 32) = 1;
  *(_QWORD *)(v15 + 120) = a8;
  *(_QWORD *)(v15 + 176) = a9;
  *(_QWORD *)(v15 + 80) = dispatch_group_create();
  *(_QWORD *)(v15 + 88) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(v15 + 72) = dispatch_queue_create("com.apple.coremedia.compressionsession.pendingframequeue", 0);
  *(_QWORD *)(v15 + 128) = FigSemaphoreCreate();
  *(_QWORD *)(v15 + 160) = FigSemaphoreCreate();
  *(_QWORD *)(v15 + 208) = 1;
  *(_QWORD *)(v15 + 48) = FigSemaphoreCreate();
  v16 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a5)
  {
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
    {
      if (CFDictionaryContainsKey(a5, CFSTR("CMSession")))
      {
        MutableCopy = CFDictionaryCreateMutableCopy(*v16, 0, a5);
        if (!MutableCopy)
        {
          v21 = 0;
          v19 = 0;
          goto LABEL_21;
        }
        v18 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, CFSTR("CMSession"));
        v19 = v18;
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = 0;
    }
    CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if ((_DWORD)CFDataFromCFPropertyList)
      goto LABEL_20;
  }
  else
  {
    v19 = 0;
  }
  if (a6 && (CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), (_DWORD)CFDataFromCFPropertyList)
    || (*(_QWORD *)(v15 + 224) = 0,
        CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey(),
        (_DWORD)CFDataFromCFPropertyList)
    || (CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObject(), (_DWORD)CFDataFromCFPropertyList)
    || (CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo(), (_DWORD)CFDataFromCFPropertyList))
  {
LABEL_20:
    v21 = CFDataFromCFPropertyList;
    goto LABEL_21;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v21 = 0;
  if (a10)
  {
    *a10 = v15;
LABEL_19:
    v22 = vtcsr_handleMachErrorsInternal(0, v21);
    goto LABEL_22;
  }
LABEL_21:
  v22 = vtcsr_handleMachErrorsInternal(v15, v21);
  CFRelease((CFTypeRef)v15);
LABEL_22:
  if (v19)
    CFRelease(v19);
  return v22;
}

uint64_t VTTileCompressionSessionRemote_PrepareToEncodeTiles(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v6 = VTCompressionSessionRemoteClient_PrepareToEncodeTiles(*(_DWORD *)(a1 + 24), a2);
  if (!(_DWORD)v6)
  {
    if (!FigSemaphoreWaitRelative())
    {
      v7 = *(unsigned int *)(a1 + 140);
      if (a3)
        *a3 = *(_QWORD *)(a1 + 148);
      return vtcsr_handleMachErrorsInternal(a1, v7);
    }
    v6 = FigSignalErrorAt();
  }
  v7 = v6;
  return vtcsr_handleMachErrorsInternal(a1, v7);
}

uint64_t VTCompressionSessionRemoteCallbackServer_PrepareToEncodeTilesReturn(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const void *v7;

  v6 = weakReferenceTable_CopyPointerFromKey();
  if (v6)
  {
    v7 = (const void *)v6;
    *(_QWORD *)(v6 + 148) = a3;
    *(_DWORD *)(v6 + 140) = a4;
    FigSemaphoreSignal();
    CFRelease(v7);
  }
  return 0;
}

uint64_t VTTileCompressionSessionRemote_EncodeTile(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t CFDataFromCFPropertyList;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  mach_port_name_t v19;
  int v20;
  uint64_t v21;
  int v22;
  const UInt8 *BytePtr;
  int Length;
  uint64_t SerializedAtomDataForPixelBuffer;
  uint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  const void *v31;
  _QWORD v32[6];
  _QWORD block[6];
  CFDataRef theData;
  uint64_t v35;
  uint64_t v36;
  int v37;

  v37 = 0;
  v35 = 0;
  v36 = 0;
  theData = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  if (!FigCFEqual())
  {
    SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
    if ((_DWORD)SerializedAtomDataForPixelBuffer)
    {
      v26 = SerializedAtomDataForPixelBuffer;
      *(_QWORD *)(a1 + 184) = 0;
      goto LABEL_20;
    }
    *(_QWORD *)(a1 + 184) = (v35 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    v31 = *(const void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = a2;
    if (a2)
      CFRetain(a2);
    if (v31)
      CFRelease(v31);
  }
  if (a5)
  {
    CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if ((_DWORD)CFDataFromCFPropertyList)
    {
      v26 = CFDataFromCFPropertyList;
      goto LABEL_20;
    }
  }
  v16 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00404814DC14uLL);
  v17 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v17 + 1;
  *v16 = v17;
  v16[1] = a6;
  v18 = *(NSObject **)(a1 + 72);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __VTTileCompressionSessionRemote_EncodeTile_block_invoke;
  block[3] = &__block_descriptor_tmp_6_0;
  block[4] = a1;
  block[5] = v16;
  dispatch_sync(v18, block);
  v19 = *(_DWORD *)(a1 + 24);
  v20 = v37;
  v21 = v36;
  v22 = v35;
  if (!theData)
  {
    BytePtr = 0;
    goto LABEL_13;
  }
  BytePtr = CFDataGetBytePtr(theData);
  if (!theData)
  {
LABEL_13:
    Length = 0;
    goto LABEL_14;
  }
  Length = CFDataGetLength(theData);
LABEL_14:
  v27 = VTCompressionSessionRemoteClient_EncodeTile(v19, v20, v21, v22, a3, a4, (uint64_t)BytePtr, Length, *v16);
  if ((_DWORD)v27)
  {
    v26 = v27;
  }
  else
  {
    FigSemaphoreWaitRelative();
    v26 = *(unsigned int *)(a1 + 140);
    v28 = *(unsigned __int8 *)(a1 + 144);
    if (a7 && !(_DWORD)v26)
      *a7 = *(_DWORD *)(a1 + 136);
    if (v28)
      goto LABEL_20;
  }
  v29 = *(NSObject **)(a1 + 72);
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 0x40000000;
  v32[2] = __VTTileCompressionSessionRemote_EncodeTile_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_7_0;
  v32[4] = a1;
  v32[5] = v16;
  dispatch_sync(v29, v32);
LABEL_20:
  v30 = vtcsr_handleMachErrorsInternal(a1, v26);
  FigMachPortReleaseSendRight_();
  if (v35)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v36);
  if (theData)
    CFRelease(theData);
  return v30;
}

uint64_t VTTileCompressionSessionRemote_CompleteTiles(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v3 = VTCompressionSessionRemoteClient_CompleteTiles(*(_DWORD *)(a1 + 24));
  if ((_DWORD)v3)
    goto LABEL_9;
  FigSemaphoreWaitRelative();
  v4 = *(unsigned int *)(a1 + 168);
  if (!(_DWORD)v4)
  {
    v3 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    if (!(_DWORD)v3)
    {
      FigSemaphoreWaitRelative();
      FigSemaphoreSignal();
      v4 = 0;
      return vtcsr_handleMachErrorsInternal(a1, v4);
    }
LABEL_9:
    v4 = v3;
  }
  return vtcsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTMotionEstimationSessionRemote_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t Instance;
  uint64_t v10;
  uint64_t CFDataFromCFPropertyList;
  uint64_t v12;
  uint64_t v13;

  v8 = vtcsr_oneTimeInitialization();
  if ((_DWORD)v8)
    goto LABEL_15;
  MEMORY[0x1940281CC](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v8 = FigSignalErrorAt();
LABEL_15:
    v12 = v8;
    return vtcsr_handleMachErrorsInternal(0, v12);
  }
  v10 = Instance;
  *(_QWORD *)(Instance + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_DWORD *)(v10 + 32) = 2;
  *(_QWORD *)(v10 + 120) = 0;
  *(_QWORD *)(v10 + 176) = 0;
  *(_QWORD *)(v10 + 80) = dispatch_group_create();
  *(_QWORD *)(v10 + 88) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(v10 + 72) = dispatch_queue_create("com.apple.coremedia.compressionsession.pendingframequeue", 0);
  *(_QWORD *)(v10 + 128) = FigSemaphoreCreate();
  *(_QWORD *)(v10 + 160) = FigSemaphoreCreate();
  *(_QWORD *)(v10 + 208) = 1;
  *(_QWORD *)(v10 + 48) = FigSemaphoreCreate();
  if (a5 && (CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), (_DWORD)CFDataFromCFPropertyList)
    || (*(_QWORD *)(v10 + 224) = 0,
        CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey(),
        (_DWORD)CFDataFromCFPropertyList)
    || (CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObject(), (_DWORD)CFDataFromCFPropertyList)
    || (CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo(), (_DWORD)CFDataFromCFPropertyList))
  {
    v12 = CFDataFromCFPropertyList;
    goto LABEL_12;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v12 = 0;
  if (!a6)
  {
LABEL_12:
    v13 = vtcsr_handleMachErrorsInternal(v10, v12);
    CFRelease((CFTypeRef)v10);
    return v13;
  }
  *a6 = v10;
  return vtcsr_handleMachErrorsInternal(0, v12);
}

uint64_t VTCompressionSessionRemote_CopySourcePixelBufferAttributes(uint64_t a1)
{
  uint64_t CFPropertyListFromData;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  v7 = 0;
  v6 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  CFPropertyListFromData = VTCompressionSessionRemoteClient_MotionEstimationCopySourcePixelBufferAttributes(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if ((_DWORD)CFPropertyListFromData)
    goto LABEL_7;
  v4 = v8;
  if (!v8)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_7:
    v4 = CFPropertyListFromData;
  }
  v5 = vtcsr_handleMachErrorsInternal(a1, v4);
  if (v6)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v7);
  return v5;
}

uint64_t VTCompressionSessionRemote_EstimateMotionVectors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t SerializedAtomDataForPixelBuffer;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int *v20;
  _QWORD v21[6];
  _QWORD block[6];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  if (a2)
  {
    SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
    if ((_DWORD)SerializedAtomDataForPixelBuffer)
    {
LABEL_9:
      v11 = SerializedAtomDataForPixelBuffer;
      *(_QWORD *)(a1 + 184) = 0;
      goto LABEL_17;
    }
    *(_QWORD *)(a1 + 184) = (v24 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
  }
  if (a3)
  {
    SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
    if ((_DWORD)SerializedAtomDataForPixelBuffer)
      goto LABEL_9;
    *(_QWORD *)(a1 + 184) = (v23 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
  }
  v12 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00404814DC14uLL);
  v13 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v13 + 1;
  *v12 = v13;
  v12[1] = 0;
  v12[4] = 0;
  v12[5] = (uint64_t)_Block_copy(a6);
  v14 = *(NSObject **)(a1 + 72);
  v15 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __VTCompressionSessionRemote_EstimateMotionVectors_block_invoke;
  block[3] = &__block_descriptor_tmp_10_0;
  block[4] = a1;
  block[5] = v12;
  dispatch_sync(v14, block);
  v16 = VTCompressionSessionRemoteClient_EstimateMotion(*(_DWORD *)(a1 + 24), SHIDWORD(v27), v26, v24, v27, v25, v23, *v12);
  if ((_DWORD)v16)
  {
    v11 = v16;
  }
  else
  {
    FigSemaphoreWaitRelative();
    v11 = *(unsigned int *)(a1 + 140);
    v17 = *(unsigned __int8 *)(a1 + 144);
    if (!(_DWORD)v11 && (*(_BYTE *)(a1 + 136) & 1) == 0)
      v11 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    if (v17)
      goto LABEL_17;
  }
  v18 = *(NSObject **)(a1 + 72);
  v21[0] = v15;
  v21[1] = 0x40000000;
  v21[2] = __VTCompressionSessionRemote_EstimateMotionVectors_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_11_0;
  v21[4] = a1;
  v21[5] = v12;
  dispatch_sync(v18, v21);
LABEL_17:
  v19 = vtcsr_handleMachErrorsInternal(a1, v11);
  if (HIDWORD(v27))
    FigMachPortReleaseSendRight_();
  v20 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (v24)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v26);
  if ((_DWORD)v27)
    FigMachPortReleaseSendRight_();
  if (v23)
    MEMORY[0x194029090](*v20, v25);
  return v19;
}

uint64_t VTCompressionSessionRemote_CompleteMotionVectors(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 60))
    return FigSignalErrorAt();
  v3 = VTCompressionSessionRemoteClient_CompleteMotionEstimation(*(_DWORD *)(a1 + 24));
  if ((_DWORD)v3)
    goto LABEL_9;
  FigSemaphoreWaitRelative();
  v4 = *(unsigned int *)(a1 + 168);
  if (!(_DWORD)v4)
  {
    v3 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    if (!(_DWORD)v3)
    {
      FigSemaphoreWaitRelative();
      FigSemaphoreSignal();
      v4 = 0;
      return vtcsr_handleMachErrorsInternal(a1, v4);
    }
LABEL_9:
    v4 = v3;
  }
  return vtcsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTCompressionSessionRemoteCallbackServer_NotificationIsPending()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  CFStringRef v6;
  uint64_t v7;
  const void *v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  CFTypeRef cf;
  char cStr[512];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = 1;
  v0 = weakReferenceTable_CopyPointerFromKey();
  if (v0)
  {
    v1 = v0;
    v12 = 0;
    if (!*(_BYTE *)(v0 + 60))
    {
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v3 = (unsigned int *)MEMORY[0x1E0C83DA0];
      do
      {
        v11 = 0;
        v10 = 0;
        v13 = 0;
        if (!VTCompressionSessionRemoteClient_GetNextPendingNotification(*(_DWORD *)(v1 + 24), &v13, &v12, cStr, &v11, &v10))
        {
          v4 = v11;
          v5 = v10;
          cf = 0;
          if (!*(_BYTE *)(v1 + 60))
          {
            v6 = CFStringCreateWithCString(v2, cStr, 0);
            if (v6 && (!v4 || !v5 || !FigCreateCFPropertyListFromData()))
            {
              v7 = FigCFWeakReferenceHolderCopyReferencedObject();
              if (v7)
              {
                v8 = (const void *)v7;
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
                CFRelease(v8);
              }
            }
            if (cf)
              CFRelease(cf);
            if (v6)
              CFRelease(v6);
          }
          MEMORY[0x194029090](*v3, v11, v10);
        }
      }
      while (v13);
    }
    CFRelease((CFTypeRef)v1);
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteCallbackServer_FrameIsPending()
{
  uint64_t v0;
  const void *v1;

  v0 = weakReferenceTable_CopyPointerFromKey();
  if (v0)
  {
    v1 = (const void *)v0;
    if (!*(_BYTE *)(v0 + 60))
      vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(v0, 0, 0);
    CFRelease(v1);
  }
  return 0;
}

double vtcsr_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void vtcsr_Finalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;

  VTCompressionSessionRemote_Invalidate((_QWORD *)a1);
  v2 = *(NSObject **)(a1 + 80);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*(dispatch_object_t *)(a1 + 80));
  }
  v3 = *(NSObject **)(a1 + 88);
  if (v3)
    dispatch_release(v3);
  v4 = *(NSObject **)(a1 + 72);
  if (v4)
    dispatch_release(v4);
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  v5 = *(const void **)(a1 + 96);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 216);
  if (v6)
    CFRelease(v6);
}

CFStringRef vtcsr_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VTCompressionSessionRemote %p]"), a1);
}

CFStringRef vtcsr_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VTCompressionSessionRemote %p]"), a1);
}

uint64_t __vtcsr_oneTimeInitialization_block_invoke(uint64_t a1)
{
  uint64_t result;

  VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode();
  result = FigRPCCreateRemoteClient();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t weakReferenceTable_OneTimeInitialization()
{
  return FigCFWeakReferenceTableCreate();
}

void __vtcsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t CFPropertyListFromData;
  NSObject *v6;
  void (*v7)(_QWORD, uint64_t, _QWORD, _QWORD, CFTypeRef);
  void (*v8)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, CFTypeRef);
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD block[11];
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  CFTypeRef v18;
  CFTypeRef cf;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 60) || *(_BYTE *)(a1 + 48))
  {
    v2 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 40);
      v50 = 0;
      v51[0] = 0;
      v46 = 0;
      v47 = &v46;
      v48 = 0x2000000000;
      v49 = 0;
      v40 = 0;
      v41 = &v40;
      v42 = 0x3002000000;
      v43 = __Block_byref_object_copy_;
      v44 = __Block_byref_object_dispose_;
      v45 = 0;
      v34 = 0;
      v35 = &v34;
      v36 = 0x3002000000;
      v37 = __Block_byref_object_copy_;
      v38 = __Block_byref_object_dispose_;
      v39 = 0;
      v30 = 0;
      v31 = &v30;
      v32 = 0x2000000000;
      v33 = 0;
      v26 = 0;
      v27 = &v26;
      v28 = 0x2000000000;
      v29 = 0;
      v25 = 0;
      v21 = 0;
      v22 = &v21;
      v23 = 0x2000000000;
      v24 = 0;
      cf = 0;
      v20 = 0;
      v18 = 0;
      v17 = 0;
      v16 = 0;
      v15 = 0;
      v14 = 0;
      v13 = 0;
      v4 = VTCompressionSessionRemoteClient_DequeueNextPendingEncodedFrame(*(_DWORD *)(v3 + 24), &v50, &v49, (_DWORD *)&v20 + 1, &v20, &v17, &v16, &v15, v51, (_DWORD *)&v50 + 1, &v14, &v13, (_DWORD *)v51 + 1);
      if ((_DWORD)v4)
      {
        CFPropertyListFromData = v4;
        goto LABEL_26;
      }
      CFPropertyListFromData = HIDWORD(v51[0]);
      if (!HIDWORD(v51[0]))
        break;
LABEL_26:
      v11 = vtcsr_handleMachErrorsInternal(v3, CFPropertyListFromData);
      if (v17)
        FigMachPortReleaseSendRight_();
      if (v15)
        MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v16);
      _Block_release((const void *)v41[5]);
      _Block_release((const void *)v35[5]);
      if (cf)
        CFRelease(cf);
      if (v18)
        CFRelease(v18);
      _Block_object_dispose(&v21, 8);
      _Block_object_dispose(&v26, 8);
      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v34, 8);
      _Block_object_dispose(&v40, 8);
      _Block_object_dispose(&v46, 8);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11;
      if (!v2 || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        return;
    }
    if (!(_DWORD)v50)
    {
      CFPropertyListFromData = 0;
LABEL_25:
      v2 = LOBYTE(v51[0]);
      goto LABEL_26;
    }
    if (HIDWORD(v50))
    {
      if (v15)
      {
        FigRemote_CreateSampleBufferFromSerializedAtomData();
LABEL_13:
        v15 = 0;
      }
    }
    else if (v17 | v15)
    {
      FigRemote_CreatePixelBufferFromSerializedAtomData();
      goto LABEL_13;
    }
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
    v6 = *(NSObject **)(v3 + 72);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vtcsr_dequeueNextPendingFrameAndCallbackClient_block_invoke;
    block[3] = &unk_1E2F61D80;
    block[9] = &v21;
    block[10] = v3;
    block[4] = &v46;
    block[5] = &v40;
    block[6] = &v34;
    block[7] = &v30;
    block[8] = &v26;
    dispatch_sync(v6, block);
    if (!*((_BYTE *)v22 + 24))
    {
      CFPropertyListFromData = 4294954384;
      goto LABEL_26;
    }
    v7 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, CFTypeRef))(v3 + 112);
    if (v7)
    {
      v7(*(_QWORD *)(v3 + 176), v47[3], HIDWORD(v20), v20, cf);
    }
    else
    {
      v8 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, CFTypeRef))(v3 + 120);
      if (v8)
      {
        v8(*(_QWORD *)(v3 + 176), v47[3], v31[3], v27[3], HIDWORD(v20), v20, cf);
      }
      else
      {
        v9 = v41[5];
        if (v9)
        {
          (*(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef))(v9 + 16))(v9, HIDWORD(v20), v20, cf);
        }
        else
        {
          v10 = v35[5];
          if (v10)
            (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, CFTypeRef))(v10 + 16))(v10, HIDWORD(v20), v20, v25, v18);
        }
      }
    }
    if (!FigAtomicDecrement32())
      FigSemaphoreSignal();
    goto LABEL_25;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __vtcsr_dequeueNextPendingFrameAndCallbackClient_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *(_QWORD **)(a1[10] + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1[4] + 8);
    while (*v2 != *(_QWORD *)(v3 + 24))
    {
      v2 = (_QWORD *)v2[6];
      if (!v2)
        return;
    }
    *(_QWORD *)(v3 + 24) = v2[1];
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = v2[4];
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = v2[5];
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v2[2];
    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = v2[3];
    v4 = a1[10];
    v7 = *(_QWORD **)(v4 + 40);
    v5 = (_QWORD *)(v4 + 40);
    v6 = v7;
    if (v7 != v2)
    {
      do
      {
        v8 = v6;
        v6 = (_QWORD *)v6[6];
      }
      while (v6 != v2);
      v5 = v8 + 6;
    }
    *v5 = v2[6];
    free(v2);
    *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 1;
  }
}

_QWORD *__vtcsr_handleDeadServerConnection_block_invoke(_QWORD *result)
{
  *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = *(_QWORD *)(result[6] + 40);
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24);
  *(_QWORD *)(result[6] + 40) = 0;
  return result;
}

void __vtcsr_handleDeadServerConnection_block_invoke_2(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD);
  void (*v6)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  for (i = a1[4]; ; i = a1[4])
  {
    v3 = *(_QWORD *)(*(_QWORD *)(i + 8) + 24);
    if (!v3)
      break;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v3;
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 48);
    v4 = (_QWORD *)a1[6];
    v5 = (void (*)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))v4[14];
    if (v5)
    {
      v5(v4[22], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 8), 4294954384, 2, 0);
    }
    else
    {
      v6 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))v4[15];
      if (v6)
      {
        v7 = v4[22];
        v8 = *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
        v6(v7, v8[1], v8[2], v8[3], 4294954384, 2, 0);
      }
      else
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
        v10 = *(_QWORD *)(v9 + 40);
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v10 + 16))(v10, 4294954384, 2, 0, 0);
        }
        else
        {
          v11 = *(_QWORD *)(v9 + 32);
          if (v11)
            (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v11 + 16))(v11, 4294954384, 2, 0);
        }
      }
    }
    _Block_release(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 32));
    free(*(void **)(*(_QWORD *)(a1[5] + 8) + 24));
    if (!FigAtomicDecrement32())
      FigSemaphoreSignal();
  }
  v12 = a1[6];
  if (*(_QWORD *)(v12 + 128))
  {
    *(_BYTE *)(v12 + 144) = 0;
    *(_QWORD *)(v12 + 136) = 0;
    FigSemaphoreSignal();
    v12 = a1[6];
  }
  if (!*(_QWORD *)(v12 + 160) || (*(_DWORD *)(v12 + 168) = 0, FigSemaphoreSignal(), (v12 = a1[6]) != 0))
    CFRelease((CFTypeRef)v12);
}

uint64_t DepthWrapperEncoder_CreateInstance()
{
  uint64_t result;

  VTVideoEncoderGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t DepthWrapperEncoder_Invalidate()
{
  uint64_t DerivedStorage;
  OpaqueVTCompressionSession *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    *(_BYTE *)DerivedStorage = 1;
    v1 = *(OpaqueVTCompressionSession **)(DerivedStorage + 72);
    if (v1)
      VTCompressionSessionInvalidate(v1);
  }
  return 0;
}

void DepthWrapperEncoder_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  v1 = (const void *)DerivedStorage[4];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[4] = 0;
  }
  v2 = (const void *)DerivedStorage[6];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[6] = 0;
  }
  v3 = (const void *)DerivedStorage[7];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[7] = 0;
  }
  v4 = (const void *)DerivedStorage[8];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[8] = 0;
  }
  v5 = (const void *)DerivedStorage[9];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[9] = 0;
  }
  v6 = DerivedStorage[10];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[10] = 0;
  }
  v7 = (void *)DerivedStorage[12];
  if (v7)
  {
    DerivedStorage[12] = 0;
    free(v7);
  }
}

__CFString *DepthWrapperEncoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<DepthWrapperVideoEncoder %p>"), a1);
  return Mutable;
}

uint64_t DepthWrapperEncoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  __CFDictionary *v9;
  int v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  uint64_t result;
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("SublayerEncoderSpecification")))
  {
    v10 = *(_DWORD *)(DerivedStorage + 16);
    if (v10 == 1684632424)
    {
      if (CFEqual(a2, CFSTR("MinAndMaxDisparity")))
        goto LABEL_9;
      v10 = *(_DWORD *)(DerivedStorage + 16);
    }
    if (v10 != 1684369512 || !CFEqual(a2, CFSTR("MinAndMaxDepth")))
    {
      v14 = *(const void **)(DerivedStorage + 72);
      if (v14)
        return VTSessionCopyProperty(v14, a2, a3, a4);
      else
        return 4294954393;
    }
LABEL_9:
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return FigSignalErrorAt();
    v12 = Mutable;
    FigCFDictionarySetFloat();
    FigCFDictionarySetFloat();
    result = 0;
    *a4 = v12;
    return result;
  }
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
    v9 = (__CFDictionary *)CFRetain(v8);
  else
    v9 = 0;
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t DepthWrapperEncoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v8;
  const void *v9;
  CFTypeID v10;
  CFNumberRef v11;
  int v12;
  CFTypeID v13;
  OpaqueVTCompressionSession *v14;
  float v15;
  const void *v16;
  OSStatus v17;
  unsigned int v18;
  CMTime v19;
  float v20;
  float v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("ProfileLevel")))
  {
    if (FigCFEqual())
      return 0;
    return FigSignalErrorAt();
  }
  if (!CFEqual(a2, CFSTR("SublayerEncoderSpecification")))
  {
    if (CFEqual(a2, CFSTR("InputPixelFormat")))
    {
      if (!a3)
        return FigSignalErrorAt();
      v10 = CFGetTypeID(a3);
      if (v10 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      if (*(_QWORD *)(DerivedStorage + 72))
      {
        LODWORD(v19.value) = 1278226736;
        v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v19);
        v6 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 72), a2, v11);
        if (v11)
          CFRelease(v11);
        return v6;
      }
      return 4294954393;
    }
    v12 = *(_DWORD *)(DerivedStorage + 16);
    if (v12 == 1684632424)
    {
      if (CFEqual(a2, CFSTR("MinAndMaxDisparity")))
        goto LABEL_21;
      v12 = *(_DWORD *)(DerivedStorage + 16);
    }
    if (v12 != 1684369512 || !CFEqual(a2, CFSTR("MinAndMaxDepth")))
    {
      v16 = *(const void **)(DerivedStorage + 72);
      if (v16)
      {
        v17 = VTSessionSetProperty(v16, a2, a3);
        if (v17)
        {
          v18 = v17;
          if (CFEqual(a2, CFSTR("SourceFrameCount")))
            return 0;
          else
            return v18;
        }
        return 0;
      }
      return 4294954393;
    }
LABEL_21:
    if (a3)
    {
      v13 = CFGetTypeID(a3);
      if (v13 == CFDictionaryGetTypeID())
      {
        v20 = 16.0;
        v21 = 0.0;
        if (!FigCFDictionaryGetFloatIfPresent()
          || v21 < 0.0
          || v21 > 32768.0
          || !FigCFDictionaryGetFloatIfPresent()
          || v20 <= v21
          || v21 > 32768.0)
        {
          return FigSignalErrorAt();
        }
        v14 = *(OpaqueVTCompressionSession **)(DerivedStorage + 72);
        v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v6 = VTCompressionSessionCompleteFrames(v14, &v19);
        v15 = v20;
        *(float *)(DerivedStorage + 40) = v21;
        *(float *)(DerivedStorage + 44) = v15;
        *(_BYTE *)(DerivedStorage + 104) = 0;
        return v6;
      }
    }
    return FigSignalErrorAt();
  }
  if (a3)
  {
    v8 = CFGetTypeID(a3);
    if (v8 == CFDictionaryGetTypeID())
    {
      v9 = *(const void **)(DerivedStorage + 56);
      *(_QWORD *)(DerivedStorage + 56) = a3;
      CFRetain(a3);
      if (v9)
        CFRelease(v9);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t DepthWrapperEncoder_StartSession(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  CFMutableDictionaryRef v13;
  VTSessionRef *v14;
  int v15;
  CFTypeRef *v16;
  uint64_t v17;
  CFDictionaryRef sourceImageBufferAttributes;
  CFMutableDictionaryRef v20;
  _DWORD v21[2];

  v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  qmemcpy(v21, "010Lsidh", sizeof(v21));
  sourceImageBufferAttributes = 0;
  v20 = 0;
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_DWORD *)(DerivedStorage + 20) = a3;
  *(_DWORD *)(DerivedStorage + 24) = v7;
  if (*(_DWORD *)(DerivedStorage + 16) == 1684369512)
    v21[1] = 1751410032;
  v10 = *(const void **)(DerivedStorage + 32);
  *(_QWORD *)(DerivedStorage + 32) = a4;
  if (a4)
    CFRetain(a4);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(v9 + 48);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(v9 + 48) = 0;
  }
  v12 = depthencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)&v21[1], &v20);
  v13 = v20;
  if ((_DWORD)v12
    || (VTEncoderSessionSetPixelBufferAttributes(*(uint64_t **)(v9 + 8), v20),
        v12 = depthencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)v21, &sourceImageBufferAttributes),
        (_DWORD)v12)
    || (v14 = (VTSessionRef *)(v9 + 72),
        v12 = VTCompressionSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, v7, 0x68766331u, *(CFDictionaryRef *)(v9 + 56), sourceImageBufferAttributes, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, (VTCompressionSessionRef *)(v9 + 72)), (_DWORD)v12)|| (v12 = VTSessionSetProperty(*v14, CFSTR("ProfileLevel"), CFSTR("HEVC_Monochrome10_AutoLevel")), (_DWORD)v12))
  {
    v17 = v12;
    if (v13)
LABEL_18:
      CFRelease(v13);
  }
  else
  {
    v15 = *(_DWORD *)(v9 + 16);
    v16 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (v15 == 1684369512)
    {
      VTSessionSetProperty(*(VTSessionRef *)(v9 + 72), CFSTR("EncodesDepth"), (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      v15 = *(_DWORD *)(v9 + 16);
    }
    if (v15 == 1684632424)
      VTSessionSetProperty(*v14, CFSTR("EncodesDisparity"), *v16);
    v17 = 0;
    if (v13)
      goto LABEL_18;
  }
  if (sourceImageBufferAttributes)
    CFRelease(sourceImageBufferAttributes);
  return v17;
}

uint64_t DepthWrapperEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, CMTime *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  const __CFAllocator *v16;
  __CVPixelBufferPool *PixelBufferPool;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  float v32;
  char v33;
  const void *v34;
  __CVBuffer *v35;
  uint64_t v36;
  size_t Width;
  size_t Height;
  unsigned __int16 *BaseAddress;
  size_t BytesPerRow;
  char *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  OpaqueVTCompressionSession *v46;
  uint64_t v47;
  CMTime *v49;
  const void *v50;
  CMTime *v51;
  const __CFDictionary *v52;
  CMTime duration;
  CMTime __pattern4;
  _QWORD outputHandler[7];
  CVPixelBufferRef pixelBufferOut;

  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = DerivedStorage;
  if (*a7)
    *a7 = 0;
  pixelBufferOut = 0;
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 80));
  ++*(_DWORD *)(v15 + 88);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(v15 + 72));
  v18 = CVPixelBufferPoolCreatePixelBuffer(v16, PixelBufferPool, &pixelBufferOut);
  if ((_DWORD)v18)
  {
    v47 = v18;
    depthencoder_emitEncodedFrame(a1, a2, v18, 0, 0);
  }
  else
  {
    v49 = a4;
    v50 = a2;
    v51 = a5;
    v52 = a6;
    if (!*(_BYTE *)(v15 + 104))
    {
      v19 = *(_QWORD *)(v15 + 96);
      v20 = *(float *)(v15 + 40);
      v21 = (float)(*(float *)(v15 + 44) - v20) + 1.0;
      v22 = powf(v21, 0.00097752);
      v23 = powf(v21, -0.00048876);
      v24 = 0;
      v25 = 0;
      v26 = 0.0;
      do
      {
        v23 = v22 * v23;
        _S0 = v20 + (float)(v23 + -1.0);
        __asm { FCVT            H0, S0 }
        v32 = _S0;
        LODWORD(__pattern4.value) = v24 | v25;
        v33 = LOBYTE(_S0) - LOBYTE(v26);
        memset_pattern4((void *)(v19 + 2 * LOWORD(v26)), &__pattern4, (2 * (LODWORD(_S0) - LODWORD(v26))) & 0x1FFFC);
        if ((v33 & 1) != 0)
          *(_WORD *)(v19 + 2 * LOWORD(v32) - 2) = v25;
        v25 += 64;
        v24 += 0x400000;
        v26 = v32;
      }
      while (v25 != 0x10000);
      LODWORD(__pattern4.value) = -4128832;
      memset_pattern4((void *)(v19 + 2 * LOWORD(v32)), &__pattern4, (2 * (-32768 - LODWORD(v32))) & 0x1FFFC);
      if (((-32768 - LODWORD(v32)) & 1) != 0)
        *(_WORD *)(v19 + 65534) = -64;
      bzero((void *)(v19 + 0x10000), 0x10000uLL);
      *(_BYTE *)(v15 + 104) = 1;
      v34 = *(const void **)(v15 + 48);
      if (v34)
      {
        CFRelease(v34);
        *(_QWORD *)(v15 + 48) = 0;
      }
    }
    v35 = pixelBufferOut;
    VTVideoEncoderGetCMBaseObject(a1);
    v36 = CMBaseObjectGetDerivedStorage();
    Width = CVPixelBufferGetWidth(a3);
    Height = CVPixelBufferGetHeight(a3);
    CVPixelBufferLockBaseAddress(a3, 1uLL);
    CVPixelBufferLockBaseAddress(v35, 0);
    BaseAddress = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a3);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a3);
    v41 = (char *)CVPixelBufferGetBaseAddress(v35);
    v42 = CVPixelBufferGetBytesPerRow(v35);
    if (Height)
    {
      v43 = 0;
      v44 = *(_QWORD *)(v36 + 96);
      do
      {
        if (Width)
        {
          for (i = 0; i != Width; ++i)
            *(_WORD *)&v41[2 * i] = *(_WORD *)(v44 + 2 * BaseAddress[i]);
        }
        BaseAddress = (unsigned __int16 *)((char *)BaseAddress + BytesPerRow);
        v41 += v42;
        ++v43;
      }
      while (v43 != Height);
    }
    CVPixelBufferUnlockBaseAddress(a3, 1uLL);
    CVPixelBufferUnlockBaseAddress(v35, 0);
    v46 = *(OpaqueVTCompressionSession **)(v15 + 72);
    outputHandler[1] = 0x40000000;
    outputHandler[2] = __DepthWrapperEncoder_EncodeFrame_block_invoke;
    outputHandler[3] = &__block_descriptor_tmp_5;
    outputHandler[4] = v15;
    outputHandler[5] = a1;
    outputHandler[6] = v50;
    __pattern4 = *v49;
    outputHandler[0] = MEMORY[0x1E0C809B0];
    duration = *v51;
    v47 = VTCompressionSessionEncodeFrameWithOutputHandler(v46, pixelBufferOut, &__pattern4, &duration, v52, 0, outputHandler);
  }
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v47;
}

uint64_t DepthWrapperEncoder_CompleteFrames(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  OpaqueVTCompressionSession *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  dispatch_time_t v8;
  CMTime v10;

  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(OpaqueVTCompressionSession **)(DerivedStorage + 72);
  v10 = *a2;
  v5 = VTCompressionSessionCompleteFrames(v4, &v10);
  if (*(_QWORD *)(DerivedStorage + 80))
  {
    v6 = 2;
    do
    {
      v7 = *(NSObject **)(DerivedStorage + 80);
      v8 = dispatch_time(0, 1000000000 * v6);
      v6 *= 2;
    }
    while (dispatch_group_wait(v7, v8));
  }
  return v5;
}

uint64_t DepthWrapperEncoder_CopySupportedPropertyDictionary(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  uint64_t v4;
  __CFDictionary *Mutable;
  int v6;
  CFTypeRef cf;
  CFTypeRef v9;
  __CFDictionary *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v9 = 0;
  v10 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = VTSessionCopySupportedPropertyDictionary(*(VTSessionRef *)(DerivedStorage + 72), (CFDictionaryRef *)&cf);
  if ((_DWORD)v4)
  {
    Mutable = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("SublayerEncoderSpecification"), v3);
    CFDictionarySetValue(Mutable, CFSTR("SourceFrameCount"), v3);
    v6 = *(_DWORD *)(DerivedStorage + 16);
    if (v6 == 1684632424)
    {
      CFDictionarySetValue(Mutable, CFSTR("MinAndMaxDisparity"), v3);
      v6 = *(_DWORD *)(DerivedStorage + 16);
    }
    if (v6 == 1684369512)
      CFDictionarySetValue(Mutable, CFSTR("MinAndMaxDepth"), v3);
    v9 = cf;
    v10 = Mutable;
    FigCFCreateCombinedDictionary();
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v3)
    CFRelease(v3);
  return v4;
}

uint64_t depthencoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  uint64_t appended;
  uint64_t v11;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v6 = Mutable;
  v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (v7)
  {
    v8 = v7;
    appended = FigCFArrayAppendInt32();
    if ((_DWORD)appended)
    {
      CFRelease(v6);
    }
    else
    {
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CA9040], v8);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      *a4 = v6;
    }
    CFRelease(v8);
    return appended;
  }
  else
  {
    v11 = FigSignalErrorAt();
    CFRelease(v6);
    return v11;
  }
}

void depthencoder_emitEncodedFrame(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4, opaqueCMSampleBuffer *a5)
{
  uint64_t DerivedStorage;

  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 88);
  dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 80));
}

uint64_t VTRegisterVideoEncoderWithInfo(unsigned int a1, const __CFDictionary *a2, uint64_t a3)
{
  const __CFAllocator *v6;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const void *Value;
  CFMutableDictionaryRef Mutable;
  CFStringRef v11;
  CFStringRef v12;
  CFStringRef v13;
  CFNumberRef v14;
  uint64_t v15;
  uint64_t v17;
  CFNumberRef v18;
  int valuePtr;
  UInt8 bytes[4];

  valuePtr = 0;
  MEMORY[0x1940281CC](&sCreateVideoEncoderRegistryOnce, vtCreateVideoEncoderRegistry);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
    if (MutableCopy)
    {
      v8 = MutableCopy;
      Value = CFDictionaryGetValue(MutableCopy, CFSTR("CMClassImplementationID"));
      goto LABEL_6;
    }
    return FigSignalErrorAt();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  Value = 0;
LABEL_6:
  *(_DWORD *)bytes = bswap32(a1);
  v11 = CFStringCreateWithBytes(v6, bytes, 4, 0x600u, 0);
  if (v11)
  {
    v12 = v11;
    CFDictionarySetValue(v8, CFSTR("VTCodecType"), v11);
    v13 = CFStringCreateWithFormat(v6, 0, CFSTR("Dynamically Registered %@ Video Encoder"), v12);
    v14 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
    if (v14)
    {
      CFDictionaryAddValue(v8, CFSTR("VTRating"), v14);
      CFDictionarySetValue(v8, CFSTR("VTAllowSandboxedEncode"), (const void *)*MEMORY[0x1E0C9AE40]);
      v15 = vtRegisterVideoEncoderInternal(v12, v13, Value, (uint64_t)v8, a3, 0);
    }
    else
    {
      v15 = FigSignalErrorAt();
    }
    v17 = v15;
    CFRelease(v8);
    CFRelease(v12);
    if (v13)
      CFRelease(v13);
    if (!v14)
      return v17;
    v18 = v14;
  }
  else
  {
    v17 = FigSignalErrorAt();
    v18 = v8;
  }
  CFRelease(v18);
  return v17;
}

uint64_t vtCreateVideoEncoderRegistry()
{
  return FigRegistryCreate();
}

uint64_t vtRegisterVideoEncoderInternal(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  __CFDictionary *v15;
  const void **v16;

  result = 4294954394;
  if (!a1 || !a2)
    return result;
  if (VTParavirtualizationIsRunningInGuest())
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v14 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("CMClassID"), CFSTR("com.apple.videotoolbox.videoencoder"));
  CFDictionarySetValue(v14, CFSTR("CMClassImplementationName"), a2);
  if (a3)
    CFDictionarySetValue(v14, CFSTR("CMClassImplementationID"), a3);
  CFDictionarySetValue(v14, CFSTR("VTCodecName"), a1);
  CFDictionarySetValue(v14, CFSTR("VTEncoderName"), a2);
  FigCFDictionarySetInt32();
  FigCFDictionarySetValue();
  if (FigCFEqual())
  {
    v15 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v15, CFSTR("IORegistryRequiredKey"), CFSTR("IOGVACodec"));
    CFDictionarySetValue(v14, CFSTR("CMDependencies"), v15);
    if (a5)
    {
LABEL_10:
      v16 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_14:
      CFDictionarySetValue(v14, CFSTR("VTFactoryFunctionHasSpecificationArgument"), *v16);
      FigRegistryAddItem();
      goto LABEL_15;
    }
  }
  else
  {
    v15 = 0;
    if (a5)
      goto LABEL_10;
  }
  if (a6)
  {
    v16 = (const void **)MEMORY[0x1E0C9AE50];
    goto LABEL_14;
  }
LABEL_15:
  if (v15)
    CFRelease(v15);
  CFRelease(v14);
  return 0;
}

BOOL VTHasVideoEncoderRegistryBeenCreated()
{
  return sVideoEncoderRegistry != 0;
}

void VTSelectAndCreateVideoEncoderInstanceInternal(int a1, int a2, int a3, CFTypeRef cf, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const void *v11;

  if (cf)
  {
    v9 = (const __CFDictionary *)CFRetain(cf);
    v10 = v9;
    if (v9)
    {
      CFDictionaryGetValue(v9, CFSTR("EncoderID"));
      v11 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v11 != CFDictionaryGetValue(v10, CFSTR("RequiredLowLatency")))
        CFDictionaryGetValue(v10, CFSTR("EnableLowLatencyRateControl"));
    }
  }
  vtPopulateVideoEncoderRegistry();
}

void vtPopulateVideoEncoderRegistry()
{
  MEMORY[0x1940281CC](&sInitializeVideoEncoderRegistryOnce, vtInitializeVideoEncoderRegistry);
  MEMORY[0x1940280C4](sVideoEncoderRegistryMutex);
  if (sReloadParavirtualizedEncodersList == 1)
  {
    vtLoadParavirtualizedVideoEncoders();
    sReloadParavirtualizedEncodersList = 0;
  }
  JUMPOUT(0x1940280D0);
}

uint64_t vtFilterRegistryItemByCodecTypeAndVideoEncoderSpecification(uint64_t a1)
{
  const __CFDictionary *v2;
  _BOOL4 v3;
  const __CFDictionary *Value;
  __CFDictionary *v5;
  __CFDictionary *v6;
  CFTypeID v7;
  const __CFDictionary *v8;
  const void *v9;
  const void *v10;
  const __CFDictionary *v11;
  const void *v12;
  const __CFArray *v13;
  uint64_t v14;
  const void *v16;
  const __CFArray *v17;
  int v18;
  const void *v19;
  __CFDictionary *MutableCopy;
  CFTypeID v21;
  int valuePtr;
  char v23;
  char v24;
  uint64_t context;
  uint64_t v26;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  CFRange v29;

  cf = 0;
  theDict = 0;
  context = *(_QWORD *)(a1 + 8);
  v26 = 1;
  v24 = 0;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyDescription())
    goto LABEL_21;
  v2 = *(const __CFDictionary **)(a1 + 8);
  if (v2)
  {
    v3 = CFDictionaryGetValue(v2, CFSTR("EncoderID")) != 0;
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), CFSTR("RequiredPropertySupport"));
  }
  else
  {
    v3 = 0;
    Value = 0;
  }
  v5 = (__CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("VTCodecType"));
  v6 = v5;
  if (!v5)
  {
    v14 = 0;
    goto LABEL_22;
  }
  if ((v7 = CFGetTypeID(v5), v7 != CFStringGetTypeID())
    || !CFEqual(v6, *(CFTypeRef *)a1)
    || (v8 = *(const __CFDictionary **)(a1 + 8)) != 0
    && ((v9 = (const void *)*MEMORY[0x1E0C9AE40], v9 == CFDictionaryGetValue(v8, CFSTR("AllowParavirtualizedEncoder")))
     && (v10 = (const void *)*MEMORY[0x1E0C9AE50], v10 == CFDictionaryGetValue(theDict, CFSTR("VTIsParavirtualized")))
     || (v11 = *(const __CFDictionary **)(a1 + 8)) != 0
     && (v12 = (const void *)*MEMORY[0x1E0C9AE50],
         v12 == CFDictionaryGetValue(v11, CFSTR("RequireParavirtualizedEncoder")))
     && v9 == CFDictionaryGetValue(theDict, CFSTR("VTIsParavirtualized"))))
  {
LABEL_21:
    v14 = 0;
    v6 = 0;
LABEL_22:
    v13 = 0;
    Value = 0;
    goto LABEL_23;
  }
  if (v3)
    goto LABEL_16;
  FigCFDictionaryGetBooleanIfPresent();
  if (*(_BYTE *)(a1 + 18))
  {
    LOBYTE(valuePtr) = 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  v23 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  VTAvoidHardwareEncoders();
  if (*(_BYTE *)(a1 + 17))
  {
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v16 == CFDictionaryGetValue(theDict, CFSTR("VTIsWrapperEncoder")))
    {
LABEL_16:
      v6 = 0;
      v13 = 0;
      Value = 0;
      goto LABEL_17;
    }
  }
  if (!Value)
  {
    v13 = 0;
    goto LABEL_52;
  }
  v17 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("VTSupportedProfileArray"));
  v13 = v17;
  if (!v17)
    goto LABEL_51;
  CFRetain(v17);
  valuePtr = 0;
  CFDictionaryGetValue(Value, CFSTR("ProfileLevel"));
  if (FigCFEqual())
  {
    v18 = 1;
    valuePtr = 1;
  }
  else
  {
    v18 = 0;
  }
  if (FigCFEqual())
  {
    v18 = 2;
    valuePtr = 2;
  }
  if (FigCFEqual())
  {
    v18 = 3;
    valuePtr = 3;
  }
  if (FigCFEqual())
  {
    valuePtr = 4;
    goto LABEL_49;
  }
  if (!v18)
  {
LABEL_51:
    Value = 0;
    goto LABEL_52;
  }
LABEL_49:
  Value = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v29.length = CFArrayGetCount(v13);
  v29.location = 0;
  if (!CFArrayContainsValue(v13, v29, Value))
  {
    v14 = 0;
    v6 = 0;
    goto LABEL_23;
  }
LABEL_52:
  v19 = CFDictionaryGetValue(theDict, CFSTR("VTRequiredSpecificationEntries"));
  if (v24)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      v6 = MutableCopy;
      CFDictionarySetValue(MutableCopy, CFSTR("EnableHardwareAcceleratedVideoEncoder"), (const void *)*MEMORY[0x1E0C9AE50]);
      v19 = v6;
      goto LABEL_56;
    }
  }
  v6 = 0;
  if (!v19)
  {
LABEL_17:
    v14 = 1;
    goto LABEL_23;
  }
LABEL_56:
  v21 = CFGetTypeID(v19);
  if (v21 != CFDictionaryGetTypeID())
    goto LABEL_17;
  CFDictionaryApplyFunction((CFDictionaryRef)v19, (CFDictionaryApplierFunction)vtCheckRequiredVideoEncoderSpecificationKey, &context);
  v14 = v26;
LABEL_23:
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  if (Value)
    CFRelease(Value);
  if (v13)
    CFRelease(v13);
  if (v6)
    CFRelease(v6);
  return v14;
}

uint64_t vtCopyExpandedEncoderListForWrappers(const __CFArray *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  CFMutableArrayRef Mutable;
  uint64_t v4;
  CFIndex Count;
  CFIndex v7;
  uint64_t v8;

  Mutable = 0;
  v4 = 0;
  if (a1 && a3)
  {
    Count = CFArrayGetCount(a1);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
LABEL_16:
      v8 = FigSignalErrorAt();
LABEL_17:
      v4 = v8;
      goto LABEL_13;
    }
    if (Count >= 1)
    {
      v7 = 0;
      v4 = 0;
      while (!CFArrayGetValueAtIndex(a1, v7))
      {
        if (++v7 == Count)
          goto LABEL_12;
      }
      v8 = FigRegistryItemCopyMatchingInfo();
      if ((_DWORD)v8)
        goto LABEL_17;
      goto LABEL_16;
    }
    v4 = 0;
LABEL_12:
    *a3 = Mutable;
    Mutable = 0;
  }
LABEL_13:
  if (Mutable)
    CFRelease(Mutable);
  return v4;
}

uint64_t vtSortRegistryItemsByVideoEncoderRating()
{
  const void *Value;
  const void *v1;
  CFTypeID v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t valuePtr;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  CFDictionaryRef theDict;

  v14 = 0;
  theDict = 0;
  v12 = 0;
  v13 = 0;
  valuePtr = 0;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyMatchingInfo())
  {
    v9 = 0;
    goto LABEL_32;
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  Value = CFDictionaryGetValue(theDict, CFSTR("VTRating"));
  v1 = Value;
  if (Value)
  {
    CFRetain(Value);
    v2 = CFGetTypeID(v1);
    if (v2 == CFNumberGetTypeID())
      CFNumberGetValue((CFNumberRef)v1, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  }
  v3 = CFDictionaryGetValue(v14, CFSTR("VTRating"));
  v4 = v3;
  if (v3)
  {
    CFRetain(v3);
    v5 = CFGetTypeID(v4);
    if (v5 == CFNumberGetTypeID())
      CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
  }
  if (HIDWORD(valuePtr) != (_DWORD)valuePtr)
  {
    if (SHIDWORD(valuePtr) > (int)valuePtr)
      v9 = 1;
    else
      v9 = -1;
    goto LABEL_28;
  }
  v6 = 0;
  if (!FigRegistryItemCopyDescription() && v13)
    v6 = (const __CFString *)CFDictionaryGetValue(v13, CFSTR("CMClassImplementationID"));
  if (!FigRegistryItemCopyDescription() && v12)
  {
    v7 = (const __CFString *)CFDictionaryGetValue(v12, CFSTR("CMClassImplementationID"));
    if ((unint64_t)v6 | (unint64_t)v7)
      v8 = -1;
    else
      v8 = 0;
    if (v6)
      v9 = 1;
    else
      v9 = v8;
    if (v6 && v7)
    {
      v9 = CFStringCompare(v6, v7, 0);
      if (!v1)
        goto LABEL_30;
LABEL_29:
      CFRelease(v1);
      goto LABEL_30;
    }
LABEL_28:
    if (!v1)
      goto LABEL_30;
    goto LABEL_29;
  }
  v9 = v6 != 0;
  if (v1)
    goto LABEL_29;
LABEL_30:
  if (v4)
    CFRelease(v4);
LABEL_32:
  if (theDict)
    CFRelease(theDict);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  return -v9;
}

uint64_t VTCreateVideoEncoderInstanceFromEncoderID(uint64_t a1)
{
  CFArrayRef listOfVideoEncodersOut;

  listOfVideoEncodersOut = 0;
  if (a1)
    VTCopyVideoEncoderList(0, &listOfVideoEncodersOut);
  return FigSignalErrorAt();
}

OSStatus VTCopyVideoEncoderList(CFDictionaryRef options, CFArrayRef *listOfVideoEncodersOut)
{
  vtPopulateVideoEncoderRegistry();
}

uint64_t VTCopySupportedPropertyForVideoEncoderID(uint64_t a1)
{
  if (a1)
    vtPopulateVideoEncoderRegistry();
  return FigSignalErrorAt();
}

BOOL vtFilterRegistryItemByEncoderID(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = FigRegistryItemCopyDescription();
  v3 = 0;
  if (a1 && !v2)
  {
    CFDictionaryGetValue(0, CFSTR("CMClassImplementationID"));
    return FigCFEqual() != 0;
  }
  return v3;
}

uint64_t vtFilterRegistryItemWithPlatformRestrictions()
{
  if (!FigRegistryItemCopyMatchingInfo())
  {
    FigCFDictionaryGetBooleanIfPresent();
    if (VTParavirtualizationIsRunningInGuest())
      FigCFDictionaryGetBooleanIfPresent();
  }
  return 1;
}

BOOL vtShouldSkipEncoder(const __CFDictionary *a1, CFDictionaryRef theDict)
{
  const void *v4;
  uint64_t v5;

  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v4 == CFDictionaryGetValue(theDict, CFSTR("Hide")))
  {
    if (a1 && v4 == CFDictionaryGetValue(a1, CFSTR("RevealHiddenEncoders")))
      return 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (v4 == CFDictionaryGetValue(theDict, CFSTR("DVFamily")))
    return !a1 || v4 != CFDictionaryGetValue(a1, CFSTR("IncludeStandardDefinitionDVEncoders"));
  return v5;
}

const void *copyObjectForKeyFromMatchInfoOrIORegistry(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;

  Value = CFDictionaryGetValue(a1, a2);
  v3 = Value;
  if (Value)
    CFRetain(Value);
  return v3;
}

__CFDictionary *createInferredPropertiesForCodec(const __CFDictionary *a1)
{
  const __CFString *Value;
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  CFMutableArrayRef v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  CFIndex Count;
  CFIndex v12;
  uint64_t i;
  char buffer[4];

  if (!a1)
    return 0;
  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("VTCodecType"));
  v3 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("VTSupportedProfileArray"));
  if (!v3)
    return 0;
  v4 = v3;
  CFRetain(v3);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  CFStringGetCString(Value, buffer, 5, 0x600u);
  v8 = bswap32(*(unsigned int *)buffer);
  if (v8 > 1836415072)
  {
    if (v8 > 1902407031)
    {
      if (v8 > 1902671458)
      {
        if (v8 == 1902998904)
          goto LABEL_29;
        v10 = 30307;
      }
      else
      {
        if (v8 == 1902407032)
          goto LABEL_29;
        v10 = 25974;
      }
      v9 = v10 | 0x71680000;
    }
    else if (v8 > 1902405680)
    {
      if (v8 == 1902405681)
        goto LABEL_29;
      v9 = 1902405733;
    }
    else
    {
      if (v8 == 1836415073)
        goto LABEL_29;
      v9 = 1869117027;
    }
  }
  else if (v8 > 1685481572)
  {
    if (v8 > 1751479856)
    {
      if (v8 == 1751479857)
        goto LABEL_29;
      v9 = 1752589105;
    }
    else
    {
      if (v8 == 1685481573)
        goto LABEL_29;
      v9 = 1718908520;
    }
  }
  else
  {
    if (v8 <= 1684895095)
    {
      if (v8 != 1667524657)
      {
        v9 = 1667790435;
        goto LABEL_28;
      }
LABEL_29:
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v12 = Count;
        for (i = 0; i != v12; ++i)
          FigCFArrayGetIntAtIndex();
      }
      CFDictionarySetValue(Mutable, CFSTR("ProfileLevel"), v7);
      goto LABEL_33;
    }
    if (v8 == 1684895096)
      goto LABEL_29;
    v9 = 1685481521;
  }
LABEL_28:
  if (v8 == v9)
    goto LABEL_29;
LABEL_33:
  CFRelease(v4);
  if (v7)
    CFRelease(v7);
  return Mutable;
}

CFComparisonResult vtCompareCodecNameThenEncoderName(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFString *Value;
  const __CFString *v5;
  CFComparisonResult result;
  const __CFString *v7;
  const __CFString *v8;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("CodecName"));
  v5 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CodecName"));
  result = CFStringCompare(Value, v5, 0);
  if (result == kCFCompareEqualTo)
  {
    v7 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("EncoderName"));
    v8 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("EncoderName"));
    return CFStringCompare(v7, v8, 0);
  }
  return result;
}

OSStatus VTCopySupportedPropertyDictionaryForEncoder(int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFStringRef *encoderIDOut, CFDictionaryRef *supportedPropertiesOut)
{
  const __CFAllocator *v8;
  OSStatus v9;
  OSStatus v10;
  OSStatus v11;
  VTSessionRef session;

  session = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = VTCompressionSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], width, height, codecType, encoderSpecification, 0, 0, 0, 0, (VTCompressionSessionRef *)&session);
  if (v9)
    goto LABEL_8;
  if (!encoderIDOut)
  {
    if (!supportedPropertiesOut)
    {
      v11 = 0;
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  v10 = VTSessionCopyProperty(session, CFSTR("EncoderID"), v8, encoderIDOut);
  v11 = v10;
  if (supportedPropertiesOut && !v10)
  {
LABEL_7:
    v9 = VTSessionCopySupportedPropertyDictionary(session, supportedPropertiesOut);
LABEL_8:
    v11 = v9;
  }
LABEL_10:
  if (session)
    CFRelease(session);
  return v11;
}

void vtInitializeVideoEncoderRegistry()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (shouldPreferInternalEncoders_preferInternalOnceToken != -1)
    dispatch_once_f(&shouldPreferInternalEncoders_preferInternalOnceToken, &shouldPreferInternalEncoders_preferInternal, (dispatch_function_t)vtGetPreferInternalEncoders);
  v0 = shouldPreferInternalEncoders_preferInternal;
  sVideoEncoderRegistryMutex = FigSimpleMutexCreate();
  MEMORY[0x1940281CC](&sCreateVideoEncoderRegistryOnce, vtCreateVideoEncoderRegistry);
  vtRegisterVideoEncoderWithInfoKeysAndValues(0x6D757861u, v1, CFSTR("Muxed Alpha"), CFSTR("Apple Muxed Alpha"), CFSTR("com.apple.videotoolbox.videoencoder.hevc-with-alpha"), 48, CFSTR("hvc1"), (uint64_t)MuxedAlphaEncoder_CreateInstance, 0);
  vtRegisterVideoEncoderWithInfoKeysAndValues(0x64697368u, v2, CFSTR("Disparity"), CFSTR("Apple Disparity (HEVC)"), CFSTR("com.apple.videotoolbox.videoencoder.disparity-hevc"), 16, CFSTR("hvc1"), (uint64_t)DepthWrapperEncoder_CreateInstance, 0);
  vtRegisterVideoEncoderWithInfoKeysAndValues(0x64657068u, v3, CFSTR("Depth"), CFSTR("Apple Depth (HEVC)"), CFSTR("com.apple.videotoolbox.videoencoder.depth-hevc"), 16, CFSTR("hvc1"), (uint64_t)DepthWrapperEncoder_CreateInstance, 0);
  if (os_variant_has_internal_content())
    vtRegisterVideoEncoderWithInfoKeysAndValues(0x69706220u, v4, CFSTR("Test IPB"), CFSTR("Apple Test IPB"), CFSTR("com.apple.videotoolbox.videoencoder.testipb"), 4, 0, (uint64_t)TestIPBVideoEncoder_CreateInstance, 0);
  if (v0)
    VTLoadVideoEncodersPreferringInternalBundles();
  else
    VTLoadVideoEncoders();
  vtLoadParavirtualizedVideoEncoders();
}

void vtLoadParavirtualizedVideoEncoders()
{
  int appended;
  CFTypeID v1;
  const __CFArray *v2;
  int UInt32;
  CFIndex v4;
  const __CFAllocator *v5;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  CFTypeID v8;
  const void *Value;
  const void *v10;
  const void *v11;
  CFStringRef v12;
  CFStringRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex Count;
  CFTypeRef cf;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  int v22;

  if (vtLoadParavirtualizedVideoEncoders_sCreateGuestUUIDOnce != -1)
    dispatch_once(&vtLoadParavirtualizedVideoEncoders_sCreateGuestUUIDOnce, &__block_literal_global_2);
  VTParavirtualizationGuestInstallHandlerForUUID(&vtLoadParavirtualizedVideoEncoders_sGuestUUID, &__block_literal_global_55, 0);
  v22 = 0;
  v20 = 0;
  v21 = 0;
  cf = 0;
  v19 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1701733235, 1, (uint64_t)&vtLoadParavirtualizedVideoEncoders_sGuestUUID, 0, (CMBlockBufferRef *)&v21, &v20);
  if (!appended)
  {
    appended = VTParavirtualizationMessageAppendUInt32();
    if (!appended)
    {
      appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v21, &v19);
      if (!appended)
      {
        appended = VTParavirtualizationMessageCopyCFPropertyList((OpaqueCMBlockBuffer *)v19, 744844899, &cf);
        if (!appended)
        {
          if (cf)
          {
            v1 = CFGetTypeID(cf);
            if (v1 == CFArrayGetTypeID())
            {
              v2 = (const __CFArray *)cf;
              cf = 0;
              UInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v19, 745956722, &v22);
              goto LABEL_10;
            }
          }
          appended = FigSignalErrorAt();
        }
      }
    }
  }
  UInt32 = appended;
  v2 = 0;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (UInt32)
  {
LABEL_30:
    if (!v2)
      return;
  }
  else
  {
    if (!v2)
      return;
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = 0;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v4);
        if (!ValueAtIndex)
          break;
        v7 = ValueAtIndex;
        v8 = CFGetTypeID(ValueAtIndex);
        if (v8 != CFDictionaryGetTypeID())
          break;
        LODWORD(v21) = 0;
        LODWORD(v20) = 0;
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        Value = CFDictionaryGetValue(v7, CFSTR("VTCodecName"));
        v10 = CFDictionaryGetValue(v7, CFSTR("CMClassImplementationName"));
        v11 = CFDictionaryGetValue(v7, CFSTR("CMClassImplementationID"));
        v12 = CFStringCreateWithFormat(v5, 0, CFSTR("paravirtualized:%@"), v10);
        v13 = CFStringCreateWithFormat(v5, 0, CFSTR("paravirtualized:%@"), v11);
        if (!vtRegisterVideoEncoderWithSpecificationArgumentWithInfoKeysAndValues(v21, (int)v20, Value, v12, v13, v14, v15, v16, CFSTR("VTHostEncoderID")))
        {
          if (v12)
            CFRelease(v12);
          if (v13)
            CFRelease(v13);
          if (Count != ++v4)
            continue;
        }
        goto LABEL_30;
      }
      FigSignalErrorAt();
    }
  }
  CFRelease(v2);
}

uint64_t vtGetPreferInternalEncoders(_BYTE *a1)
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  *a1 = result;
  return result;
}

uint64_t vtRegisterVideoEncoderWithInfoKeysAndValues(unsigned int a1, uint64_t a2, const void *a3, const void *a4, const void *a5, __int16 a6, const void *a7, uint64_t a8, const void *a9)
{
  unsigned int v10;

  v10 = a1;
  return vtRegisterVideoEncoderWithInfoKeysAndValuesInternal(&v10, 0, a3, a4, a5, a6, a7, a8, 0, &a9);
}

uint64_t vtRegisterVideoEncoderWithInfoKeysAndValuesInternal(unsigned int *a1, int a2, const void *a3, const void *a4, const void *a5, __int16 a6, const void *a7, uint64_t a8, uint64_t a9, const void **a10)
{
  const __CFAllocator *v17;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v19;
  CFStringRef v20;
  CFNumberRef v21;
  const void *v22;
  CFMutableDictionaryRef v23;
  __CFDictionary *v24;
  const void *v26;
  const void **v27;
  const void *v28;
  __CFDictionary *v29;
  const void **v30;
  uint64_t v31;
  uint64_t v33;
  const void *v34;
  UInt8 bytes[4];
  int valuePtr;
  const void **v37;
  const void **v38;

  valuePtr = a2;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v19 = Mutable;
  *(_DWORD *)bytes = bswap32(*a1);
  v20 = CFStringCreateWithBytes(v17, bytes, 4, 0x600u, 0);
  if (!v20)
  {
    v21 = 0;
    goto LABEL_33;
  }
  v34 = a5;
  CFDictionarySetValue(v19, CFSTR("VTCodecType"), v20);
  v21 = CFNumberCreate(v17, kCFNumberSInt32Type, &valuePtr);
  if (v21)
  {
    CFDictionarySetValue(v19, CFSTR("VTRating"), v21);
    if ((a6 & 2) != 0)
    {
      CFDictionarySetValue(v19, CFSTR("VTIsHardwareAccelerated"), (const void *)*MEMORY[0x1E0C9AE50]);
      if ((a6 & 4) == 0)
      {
LABEL_6:
        if ((a6 & 0x80) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((a6 & 4) == 0)
    {
      goto LABEL_6;
    }
    CFDictionarySetValue(v19, CFSTR("Hide"), (const void *)*MEMORY[0x1E0C9AE50]);
    if ((a6 & 0x80) == 0)
    {
LABEL_8:
      v33 = a8;
      if ((a6 & 8) != 0)
        CFDictionarySetValue(v19, CFSTR("VTAllowSandboxedEncode"), (const void *)*MEMORY[0x1E0C9AE40]);
      if ((a6 & 0x10) != 0)
      {
        v22 = (const void *)*MEMORY[0x1E0C9AE50];
        CFDictionarySetValue(v19, CFSTR("VTIsWrapperEncoder"), (const void *)*MEMORY[0x1E0C9AE50]);
        if (a7)
          CFDictionarySetValue(v19, CFSTR("VTWrapsCodecType"), a7);
        if ((a6 & 0x20) != 0)
          FigCFDictionarySetInt32();
        if ((a6 & 0x100) != 0)
          CFDictionarySetValue(v19, CFSTR("VTWrapsSoftwareCodecOnly"), v22);
      }
      if ((a6 & 0x40) != 0)
        CFDictionarySetValue(v19, CFSTR("VTSupportsMultiPass"), (const void *)*MEMORY[0x1E0C9AE50]);
      if ((a6 & 0x200) != 0)
        CFDictionarySetValue(v19, CFSTR("VTIsParavirtualized"), (const void *)*MEMORY[0x1E0C9AE50]);
      v23 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v23)
      {
        v24 = v23;
        v37 = a10 + 1;
        v26 = *a10;
        if (*a10)
        {
          do
          {
            v27 = v37;
            v38 = v37 + 1;
            v28 = *v27;
            if (!*v27)
              break;
            v29 = CFEqual(v26, CFSTR("VTHostEncoderID")) ? v19 : v24;
            CFDictionarySetValue(v29, v26, v28);
            v30 = v38;
            v37 = v38 + 1;
            v26 = *v30;
          }
          while (*v30);
        }
        if (CFDictionaryGetCount(v24) >= 1)
          CFDictionarySetValue(v19, CFSTR("VTRequiredSpecificationEntries"), v24);
        v31 = vtRegisterVideoEncoderInternal(a3, a4, v34, (uint64_t)v19, v33, a9);
        CFRelease(v19);
        v19 = v24;
        goto LABEL_34;
      }
      goto LABEL_33;
    }
LABEL_7:
    CFDictionarySetValue(v19, CFSTR("DVFamily"), (const void *)*MEMORY[0x1E0C9AE50]);
    goto LABEL_8;
  }
LABEL_33:
  v31 = FigSignalErrorAt();
LABEL_34:
  CFRelease(v19);
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  return v31;
}

void __vtLoadParavirtualizedVideoEncoders_block_invoke()
{
  const __CFUUID *v0;

  v0 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  vtLoadParavirtualizedVideoEncoders_sGuestUUID = CFUUIDGetUUIDBytes(v0);
  if (v0)
    CFRelease(v0);
}

uint64_t __vtLoadParavirtualizedVideoEncoders_block_invoke_2(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  CFUUIDRef v3;
  int v5;
  CFUUIDBytes v6;

  v6 = vtLoadParavirtualizedVideoEncoders_sGuestUUID;
  v3 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], vtLoadParavirtualizedVideoEncoders_sGuestUUID);
  v5 = 0;
  if (!VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a2, &v5, 0, 0))
  {
    if (v5 == 1383295341)
    {
      if (!vtUnregisterParavirtualizedVideoEncoders())
        sReloadParavirtualizedEncodersList = 1;
    }
    else if (v5 == 1115252001 && !vtUnregisterParavirtualizedVideoEncoders())
    {
      sReloadParavirtualizedEncodersList = 1;
      VTParavirtualizationGuestRemoveHandlerForUUID(&v6);
    }
  }
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t vtUnregisterParavirtualizedVideoEncoders()
{
  uint64_t v0;

  if (!sVideoEncoderRegistry)
    return FigSignalErrorAt();
  v0 = FigRegistryCopyFilteredItemList();
  if ((_DWORD)v0)
    return v0;
  else
    return 0;
}

uint64_t vtFilterRegistryItemForParavirtualizedEncodersOnly()
{
  if (!FigRegistryItemCopyMatchingInfo())
    FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

uint64_t vtRegisterVideoEncoderWithSpecificationArgumentWithInfoKeysAndValues(unsigned int a1, int a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  unsigned int v10;

  v10 = a1;
  return vtRegisterVideoEncoderWithInfoKeysAndValuesInternal(&v10, a2, a3, a4, a5, 514, 0, 0, (uint64_t)ParavirtualizedVideoEncoder_CreateInstanceWithSpecification, &a9);
}

uint64_t vtCheckRequiredVideoEncoderSpecificationKey(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t result;

  result = FigCFEqual();
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)a3;
    if (!*(_QWORD *)a3
      || (result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, a1), !a2)
      || !result
      || (result = CFEqual((CFTypeRef)result, a2), !(_DWORD)result))
    {
      *(_BYTE *)(a3 + 8) = 0;
    }
  }
  return result;
}

void VTCopyVP9DecoderCapabilitiesDictionary()
{
  VTIsHardwareDecodeSupported(0x76703039u);
}

__CFDictionary *sub_19278B890(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char valuePtr, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  const __CFAllocator *v21;
  CFNumberRef v22;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v24;
  __CFArray *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFMutableDictionaryRef v28;
  CFMutableDictionaryRef v29;
  CFMutableDictionaryRef v30;
  __CFDictionary *v31;
  const void *v32;
  int v33;
  BOOL v34;
  _BYTE v36[88];

  if (!a1)
    return 0;
  *(_DWORD *)&v36[4] = 0;
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, v36);
  Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v24 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v24)
    {
      CFDictionarySetValue(Mutable, CFSTR("VTPerProfileSupport"), v24);
      v25 = CFArrayCreateMutable(v21, 0, MEMORY[0x1E0C9B378]);
      if (!v25)
      {
LABEL_8:
        v33 = 0;
        goto LABEL_9;
      }
      *(_DWORD *)&v36[4] = 0;
      v26 = CFNumberCreate(v21, kCFNumberIntType, &v36[4]);
      CFArrayAppendValue(v25, v26);
      CFRelease(v26);
      *(_DWORD *)&v36[4] = 2;
      v27 = CFNumberCreate(v21, kCFNumberIntType, &v36[4]);
      CFArrayAppendValue(v25, v27);
      CFRelease(v27);
      CFDictionarySetValue(Mutable, CFSTR("VTSupportedProfiles"), v25);
      v28 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v28)
      {
        v29 = v28;
        v30 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v30)
        {
          v31 = v30;
          CFDictionarySetValue(v24, CFSTR("0"), v29);
          CFDictionarySetValue(v24, CFSTR("2"), v29);
          v32 = (const void *)*MEMORY[0x1E0C9AE50];
          CFDictionarySetValue(v29, CFSTR("VTIsHardwareAccelerated"), (const void *)*MEMORY[0x1E0C9AE50]);
          CFDictionarySetValue(v31, CFSTR("VTIsHardwareAccelerated"), v32);
          CFDictionarySetValue(v29, CFSTR("VTMaxPlaybackLevel"), v22);
          CFDictionarySetValue(v31, CFSTR("VTMaxPlaybackLevel"), v22);
          CFRelease(v29);
          CFRelease(v31);
          goto LABEL_8;
        }
        v33 = FigSignalErrorAt();
        CFRelease(v29);
      }
      else
      {
        v33 = FigSignalErrorAt();
      }
    }
    else
    {
      v33 = FigSignalErrorAt();
      v25 = 0;
    }
  }
  else
  {
    v33 = FigSignalErrorAt();
    v25 = 0;
    v24 = 0;
  }
LABEL_9:
  if (v22)
    CFRelease(v22);
  if (v24)
    CFRelease(v24);
  if (v25)
    CFRelease(v25);
  if (Mutable)
    v34 = v33 == 0;
  else
    v34 = 1;
  if (!v34)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

__CFDictionary *VTCopyDecoderCapabilitiesDictionaryForCodecTypes(const __CFArray *a1)
{
  int IsHDRAllowedOnDevice;
  const __CFAllocator *v3;
  const void *UInt32;
  uint64_t v5;
  const void *v6;
  __CFArray *MutableCopy;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void *v10;
  CFMutableDictionaryRef v11;

  IsHDRAllowedOnDevice = FigIsHDRAllowedOnDevice();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  v5 = FigCFNumberCreateUInt32();
  v6 = (const void *)v5;
  if (!a1)
  {
    FigSignalErrorAt();
    v9 = 0;
    goto LABEL_19;
  }
  if (!UInt32)
  {
    FigSignalErrorAt();
    v9 = 0;
    if (!v6)
      return v9;
    goto LABEL_22;
  }
  if (v5)
  {
    if (FigCFArrayContainsValue() && !FigCFArrayContainsValue())
    {
      MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
      CFArrayAppendValue(MutableCopy, v6);
      a1 = MutableCopy;
    }
    else
    {
      MutableCopy = 0;
    }
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    if (Mutable)
    {
      if (IsHDRAllowedOnDevice)
        v10 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v10 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(Mutable, CFSTR("VTIsHDRAllowedOnDevice"), v10);
      v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v11)
      {
        CFDictionarySetValue(v9, CFSTR("VTCodecSupportDict"), v11);
        if (CFArrayGetCount(a1) < 1)
        {
LABEL_16:
          CFRelease(v11);
LABEL_17:
          if (!MutableCopy)
            goto LABEL_19;
          goto LABEL_18;
        }
        FigCFArrayGetIntAtIndex();
        if (FigSignalErrorAt())
          goto LABEL_25;
      }
      else if (FigSignalErrorAt())
      {
LABEL_25:
        CFRelease(v9);
        v9 = 0;
      }
      if (!v11)
        goto LABEL_17;
      goto LABEL_16;
    }
    FigSignalErrorAt();
    if (MutableCopy)
LABEL_18:
      CFRelease(MutableCopy);
LABEL_19:
    if (!UInt32)
      goto LABEL_21;
    goto LABEL_20;
  }
  FigSignalErrorAt();
  v9 = 0;
LABEL_20:
  CFRelease(UInt32);
LABEL_21:
  if (v6)
LABEL_22:
    CFRelease(v6);
  return v9;
}

CFStringRef vtCreateStringFromCodecType(unsigned int a1)
{
  char cStr[5];

  __sprintf_chk(cStr, 0, 5uLL, "%c%c%c%c", HIBYTE(a1), BYTE2(a1), BYTE1(a1), a1);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
}

__CFDictionary *VTCopyHEVCDecoderCapabilitiesDictionary()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v4;
  int IsHDRAllowedOnDevice;
  const void *v6;
  const void *v7;
  const __CFArray *matched;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  BOOL v12;
  BOOL v13;
  char v14;
  const __CFDictionary *ModelSpecificPropertyList;
  const __CFDictionary *v16;
  const __CFDictionary *Value;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  __CFDictionary *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  CFMutableArrayRef MutableCopy;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const __CFArray *v27;
  const __CFArray *v28;
  CFMutableArrayRef v29;
  int v30;
  const __CFDictionary *cf;
  const __CFDictionary *context;
  __CFDictionary *v34;
  uint64_t v35;
  CFRange v36;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  IsHDRAllowedOnDevice = FigIsHDRAllowedOnDevice();
  if (Mutable)
  {
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
    if (IsHDRAllowedOnDevice)
      v7 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("VTIsHDRAllowedOnDevice"), v7);
    MEMORY[0x1940281CC](&sCreateVideoDecoderRegistryOnce_0, vtVideoDecoderInfoInitOnce);
    CFDictionarySetValue(Mutable, CFSTR("VTPerProfileSupport"), v4);
    matched = VTCopyVideoDecoderRegistryMatchArrayForCodecType(0x68766331u);
    v34 = 0;
    v35 = 0;
    context = 0;
    Count = CFArrayGetCount(matched);
    if (Count < 1)
    {
      v13 = 0;
    }
    else
    {
      v10 = Count;
      v11 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(matched, v11);
        v12 = FigCFDictionaryGetBooleanIfPresent() != 0;
        v13 = v12;
        if (!v12)
          break;
        if (v10 == ++v11)
        {
          v14 = 0;
          goto LABEL_16;
        }
      }
    }
    v14 = 1;
LABEL_16:
    LOBYTE(v35) = v14;
    ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
    if (ModelSpecificPropertyList)
    {
      v16 = ModelSpecificPropertyList;
      Value = (const __CFDictionary *)CFDictionaryGetValue(ModelSpecificPropertyList, CFSTR("VideoCodecProfiles"));
      v18 = Value;
      if (Value)
      {
        v19 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("hvc1"));
        if (v19)
        {
          v20 = v19;
          cf = v16;
          v21 = v4;
          v22 = (const __CFArray *)CFDictionaryGetValue(v19, CFSTR("SupportedProfiles"));
          if (!v22)
          {
            v18 = 0;
            v29 = 0;
            MutableCopy = 0;
            goto LABEL_53;
          }
          v23 = v22;
          MutableCopy = CFArrayCreateMutableCopy(v0, 0, v22);
          if (MutableCopy)
          {
            CFDictionarySetValue(Mutable, CFSTR("VTSupportedProfiles"), MutableCopy);
            context = v20;
            v34 = v21;
            v36.length = CFArrayGetCount(v23);
            v36.location = 0;
            CFArrayApplyFunction(v23, v36, (CFArrayApplierFunction)vtAddProfileToDict, &context);
            v25 = (const __CFDictionary *)CFDictionaryGetValue(v18, CFSTR("dvh1"));
            if (!v25
              || (v26 = v25, (v27 = (const __CFArray *)CFDictionaryGetValue(v25, CFSTR("SupportedProfiles"))) == 0))
            {
              v18 = 0;
LABEL_45:
              v29 = 0;
LABEL_53:
              v30 = 0;
LABEL_57:
              v4 = v21;
LABEL_29:
              v16 = cf;
              goto LABEL_30;
            }
            v18 = CFArrayCreateMutableCopy(v0, 0, v27);
            if (v18)
            {
              CFDictionarySetValue(Mutable, CFSTR("VTDoViSupportedProfiles"), v18);
              if (!v13)
                CFDictionarySetValue(Mutable, CFSTR("VTDoViIsHardwareAccelerated"), v6);
              v28 = (const __CFArray *)CFDictionaryGetValue(v26, CFSTR("SupportedLevels"));
              if (v28)
              {
                v29 = CFArrayCreateMutableCopy(v0, 0, v28);
                v4 = v21;
                if (v29)
                {
                  CFDictionarySetValue(Mutable, CFSTR("VTDoViSupportedLevels"), v29);
                  v30 = 0;
                }
                else
                {
                  v30 = FigSignalErrorAt();
                }
                goto LABEL_29;
              }
              goto LABEL_45;
            }
            v30 = FigSignalErrorAt();
          }
          else
          {
            v30 = FigSignalErrorAt();
            v18 = 0;
          }
          v29 = 0;
          goto LABEL_57;
        }
        v18 = 0;
      }
      v29 = 0;
      MutableCopy = 0;
      v30 = 0;
LABEL_30:
      CFRelease(v16);
      if (!v4)
        goto LABEL_32;
      goto LABEL_31;
    }
    v30 = 0;
    MutableCopy = 0;
  }
  else
  {
    v30 = FigSignalErrorAt();
    MutableCopy = 0;
    matched = 0;
  }
  v29 = 0;
  v18 = 0;
  if (v4)
LABEL_31:
    CFRelease(v4);
LABEL_32:
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v18)
    CFRelease(v18);
  if (v29)
    CFRelease(v29);
  if (matched)
    CFRelease(matched);
  if (Mutable && v30)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

void vtAddProfileToDict(const __CFNumber *a1, uint64_t a2)
{
  __CFDictionary *v3;
  const __CFDictionary *v4;
  const __CFAllocator *v5;
  CFStringRef v6;
  CFStringRef v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  const __CFDictionary *Value;
  const __CFDictionary *v11;
  const void *v12;
  unsigned int valuePtr;

  valuePtr = 0;
  if (a1)
  {
    if (a2)
    {
      v4 = *(const __CFDictionary **)a2;
      v3 = *(__CFDictionary **)(a2 + 8);
      CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), valuePtr);
      if (v6)
      {
        v7 = v6;
        Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v9 = Mutable;
          Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("PerProfileConstraints"));
          if (!Value
            || (v11 = (const __CFDictionary *)CFDictionaryGetValue(Value, v7)) == 0
            || (v12 = CFDictionaryGetValue(v11, CFSTR("MaxLevel"))) == 0)
          {
            v12 = CFDictionaryGetValue(v4, CFSTR("MaxLevel"));
          }
          if (*(_BYTE *)(a2 + 16))
            CFDictionarySetValue(v9, CFSTR("VTIsHardwareAccelerated"), (const void *)*MEMORY[0x1E0C9AE50]);
          if (v12)
            CFDictionarySetValue(v9, CFSTR("VTMaxDecodeLevel"), v12);
          CFDictionarySetValue(v3, v7, v9);
          CFRelease(v9);
        }
        CFRelease(v7);
      }
    }
  }
}

CFMutableDictionaryRef VTCopyAV1DecoderCapabilitiesDictionary()
{
  const __CFArray *matched;
  CFIndex Count;
  CFIndex v2;
  CFIndex i;
  BOOL v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *ModelSpecificPropertyList;
  const __CFDictionary *v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  const __CFArray *v12;
  CFMutableArrayRef MutableCopy;
  CFMutableDictionaryRef v14;
  CFIndex v15;
  const void **v16;
  const void *v17;
  const __CFNumber *ValueAtIndex;
  CFStringRef v19;
  const __CFDictionary *v20;
  __CFDictionary *v21;
  const void *v22;
  const __CFDictionary *v24;
  const __CFArray *cf;
  const __CFDictionary *theDict;
  __CFDictionary *v27;
  unsigned int valuePtr;
  char v29;

  matched = VTCopyVideoDecoderRegistryMatchArrayForCodecType(0x61763031u);
  Count = CFArrayGetCount(matched);
  if (Count < 1)
  {
    MutableCopy = 0;
    v11 = 0;
    v8 = 0;
    goto LABEL_25;
  }
  v2 = Count;
  for (i = 0; i != v2; v4 = v2 > i)
  {
    CFArrayGetValueAtIndex(matched, i);
    v29 = 0;
    if (!FigCFDictionaryGetBooleanIfPresent())
      VTIsHardwareDecodeSupported(0x61763031u);
    ++i;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    MutableCopy = 0;
    v11 = 0;
    v8 = 0;
    goto LABEL_26;
  }
  ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  v8 = ModelSpecificPropertyList;
  if (!ModelSpecificPropertyList)
    goto LABEL_35;
  Value = (const __CFDictionary *)CFDictionaryGetValue(ModelSpecificPropertyList, CFSTR("VideoCodecProfiles"));
  if (!Value)
    goto LABEL_35;
  v10 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("av01"));
  v11 = v10;
  if (!v10)
  {
    MutableCopy = 0;
    goto LABEL_26;
  }
  v12 = (const __CFArray *)CFDictionaryGetValue(v10, CFSTR("SupportedProfiles"));
  if (!v12)
  {
LABEL_35:
    MutableCopy = 0;
LABEL_36:
    if (!FigSignalErrorAt())
    {
      v11 = 0;
      goto LABEL_26;
    }
    CFRelease(Mutable);
    v11 = 0;
LABEL_25:
    Mutable = 0;
    goto LABEL_26;
  }
  MutableCopy = CFArrayCreateMutableCopy(v5, 0, v12);
  if (!MutableCopy)
    goto LABEL_36;
  CFDictionarySetValue(Mutable, CFSTR("VTSupportedProfiles"), MutableCopy);
  theDict = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("PerProfileConstraints"));
  v14 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14)
    goto LABEL_36;
  v27 = v14;
  v24 = v8;
  cf = matched;
  if (CFArrayGetCount(MutableCopy) >= 1)
  {
    v15 = 0;
    v16 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v4)
      v16 = (const void **)MEMORY[0x1E0C9AE40];
    v17 = *v16;
    do
    {
      valuePtr = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(MutableCopy, v15);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      v19 = CFStringCreateWithFormat(v5, 0, CFSTR("%d"), valuePtr);
      v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v19);
      v21 = CFDictionaryCreateMutableCopy(v5, 0, v20);
      CFDictionaryAddValue(v21, CFSTR("VTIsHardwareAccelerated"), v17);
      v22 = CFDictionaryGetValue(v20, CFSTR("MaxLevel"));
      CFDictionaryAddValue(v21, CFSTR("VTMaxPlaybackLevel"), v22);
      CFDictionaryRemoveValue(v21, CFSTR("MaxLevel"));
      CFDictionaryAddValue(v27, v19, v21);
      if (v21)
        CFRelease(v21);
      if (v19)
        CFRelease(v19);
      ++v15;
    }
    while (CFArrayGetCount(MutableCopy) > v15);
  }
  v11 = v27;
  CFDictionarySetValue(Mutable, CFSTR("VTPerProfileSupport"), v27);
  matched = cf;
  v8 = v24;
LABEL_26:
  if (matched)
    CFRelease(matched);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v11)
    CFRelease(v11);
  if (v8)
    CFRelease(v8);
  return Mutable;
}

uint64_t VTGetHEVCCapabilitesForFormatDescription(CMFormatDescriptionRef desc, const __CFDictionary *a2, unint64_t a3, unint64_t a4)
{
  signed int MediaSubType;
  int v9;
  const void *Value;
  uint64_t result;
  __int16 v12;

  v12 = 0;
  if (!(a3 | a4))
    return FigSignalErrorAt();
  if (!desc || !a2 || CMFormatDescriptionGetMediaType(desc) != 1986618469)
    goto LABEL_39;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (MediaSubType > 1836415072)
  {
    if (MediaSubType > 1902407031)
    {
      if (MediaSubType > 1902671458)
      {
        if (MediaSubType == 1902671459)
          goto LABEL_29;
        v9 = 1902998904;
      }
      else
      {
        if (MediaSubType == 1902407032)
          goto LABEL_29;
        v9 = 1902667126;
      }
    }
    else if (MediaSubType > 1902405680)
    {
      if (MediaSubType == 1902405681)
        goto LABEL_29;
      v9 = 1902405733;
    }
    else
    {
      if (MediaSubType == 1836415073)
        goto LABEL_29;
      v9 = 1869117027;
    }
LABEL_28:
    if (MediaSubType == v9)
      goto LABEL_29;
LABEL_39:
    result = FigSignalErrorAt();
    if (!a3)
      goto LABEL_36;
LABEL_35:
    *(_BYTE *)a3 = HIBYTE(v12);
    goto LABEL_36;
  }
  if (MediaSubType > 1685481572)
  {
    if (MediaSubType > 1751479856)
    {
      if (MediaSubType == 1751479857)
        goto LABEL_29;
      v9 = 1752589105;
    }
    else
    {
      if (MediaSubType == 1685481573)
        goto LABEL_29;
      v9 = 1718908520;
    }
    goto LABEL_28;
  }
  if (MediaSubType > 1684895095)
  {
    if (MediaSubType == 1684895096)
      goto LABEL_29;
    v9 = 1685481521;
    goto LABEL_28;
  }
  if (MediaSubType != 1667524657)
  {
    v9 = 1667790435;
    goto LABEL_28;
  }
LABEL_29:
  Value = CFDictionaryGetValue(a2, CFSTR("VTIsHDRAllowedOnDevice"));
  if (CMVideoFormatDescriptionGetVideoDynamicRange() - 11 >= 0xFFFFFFF7
    && (!Value || FigCFEqual()))
  {
    result = 0;
    if (!a3)
      goto LABEL_36;
    goto LABEL_35;
  }
  result = vtGetHEVCDecoderCapabilitiesForFormatDescription(desc, a2, (_BYTE *)&v12 + 1, (char *)&v12);
  if (a3)
    goto LABEL_35;
LABEL_36:
  if (a4)
    *(_BYTE *)a4 = v12;
  return result;
}

uint64_t vtGetHEVCDecoderCapabilitiesForFormatDescription(const opaqueCMFormatDescription *a1, const __CFDictionary *a2, _BYTE *a3, char *a4)
{
  const __CFDictionary *Extension;
  const __CFDictionary *v8;
  CFTypeID v9;
  const __CFArray *Value;
  const __CFArray *v11;
  CFTypeID v12;
  uint64_t HEVCParameterSetAtIndex;
  const __CFAllocator *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const __CFArray *v17;
  const __CFArray *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFStringRef v21;
  CFStringRef v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  const __CFNumber *v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  int v32;
  char v33;
  unsigned __int8 v34;
  __int16 valuePtr;
  uint64_t v36;
  uint64_t v37;
  CFRange v38;

  v36 = 0;
  valuePtr = 0;
  v34 = 0;
  if (!a2)
    goto LABEL_38;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension)
    goto LABEL_38;
  v8 = Extension;
  v9 = CFGetTypeID(Extension);
  if (v9 != CFDictionaryGetTypeID())
    goto LABEL_38;
  Value = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("hvcC"));
  if (!Value)
    goto LABEL_38;
  v11 = Value;
  v12 = CFGetTypeID(Value);
  if (v12 == CFArrayGetTypeID())
  {
    CFArrayGetValueAtIndex(v11, 0);
  }
  else
  {
    CFGetTypeID(v11);
    CFDataGetTypeID();
  }
  v37 = 0;
  HEVCParameterSetAtIndex = FigHEVCBridge_GetHEVCParameterSetAtIndex();
  if ((_DWORD)HEVCParameterSetAtIndex
    || (HEVCParameterSetAtIndex = FigHEVCBridge_GetSPSProfileTierLevel(), (_DWORD)HEVCParameterSetAtIndex))
  {
LABEL_39:
    v26 = HEVCParameterSetAtIndex;
    LOBYTE(v18) = 0;
    v27 = 0;
    if (!a3)
      goto LABEL_35;
LABEL_34:
    *a3 = (_BYTE)v18;
    goto LABEL_35;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt8Type, (char *)&valuePtr + 1);
  if (!v15)
  {
LABEL_38:
    HEVCParameterSetAtIndex = FigSignalErrorAt();
    goto LABEL_39;
  }
  v16 = v15;
  v17 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("VTSupportedProfiles"));
  v18 = v17;
  if (!v17)
  {
LABEL_19:
    v26 = 0;
    goto LABEL_21;
  }
  v38.length = CFArrayGetCount(v17);
  v38.location = 0;
  if (!CFArrayContainsValue(v18, v38, v16))
  {
    LOBYTE(v18) = 0;
    goto LABEL_19;
  }
  v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("VTPerProfileSupport"));
  if (!v19)
  {
    v26 = 0;
    LOBYTE(v18) = 1;
    goto LABEL_21;
  }
  v20 = v19;
  v21 = CFStringCreateWithFormat(v14, 0, CFSTR("%d"), HIBYTE(valuePtr));
  if (!v21)
  {
    v26 = FigSignalErrorAt();
    LOBYTE(v18) = 0;
LABEL_21:
    CFRelease(v16);
    v27 = (char)v18;
    if (!a3)
      goto LABEL_35;
    goto LABEL_34;
  }
  v22 = v21;
  v23 = (const __CFDictionary *)CFDictionaryGetValue(v20, v21);
  if (v23)
  {
    v24 = v23;
    v18 = (const __CFArray *)CFDictionaryGetValue(v23, CFSTR("VTMaxDecodeLevel"));
    v25 = (const __CFNumber *)CFDictionaryGetValue(v24, CFSTR("VTMaxPlaybackLevel"));
    v33 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v32 = 0;
    if (v18)
    {
      CFNumberGetValue(v18, kCFNumberSInt32Type, &v32);
      LOBYTE(v18) = v32 >= v34;
    }
    else
    {
      LOBYTE(v18) = 1;
    }
    v28 = (char)v18;
    if (v25)
    {
      CFNumberGetValue(v25, kCFNumberSInt32Type, &v32);
      v28 = v32 >= v34;
    }
    v29 = CMVideoFormatDescriptionGetVideoDynamicRange() - 2;
    if (v33)
      v30 = 1;
    else
      v30 = v29 >= 9;
    v27 = v30 && v28;
  }
  else
  {
    LOBYTE(v18) = 1;
    v27 = 1;
  }
  CFRelease(v16);
  CFRelease(v22);
  v26 = 0;
  if (a3)
    goto LABEL_34;
LABEL_35:
  if (a4)
    *a4 = v27;
  return v26;
}

uint64_t VTGetDecoderCapabilitesForFormatDescription(CMFormatDescriptionRef desc, const __CFDictionary *a2, unint64_t a3, unint64_t a4)
{
  signed int MediaSubType;
  const void *Value;
  const __CFDictionary *v10;
  CFStringRef StringFromCodecType;
  const __CFDictionary *v12;
  uint64_t result;
  CFStringRef v14;
  __int16 v15;

  v15 = 0;
  if (!(a3 | a4))
    return FigSignalErrorAt();
  if (!desc || !a2 || CMFormatDescriptionGetMediaType(desc) != 1986618469)
    goto LABEL_33;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  Value = CFDictionaryGetValue(a2, CFSTR("VTIsHDRAllowedOnDevice"));
  if (CMVideoFormatDescriptionGetVideoDynamicRange() - 11 < 0xFFFFFFF7
    || Value && !FigCFEqual())
  {
    v10 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("VTCodecSupportDict"));
    if (v10)
    {
      StringFromCodecType = vtCreateStringFromCodecType(MediaSubType);
      v12 = (const __CFDictionary *)CFDictionaryGetValue(v10, StringFromCodecType);
      if (StringFromCodecType)
        CFRelease(StringFromCodecType);
    }
    else
    {
      v12 = 0;
    }
    if (MediaSubType > 1635135536)
    {
      if (MediaSubType != 1635135537)
      {
        if (MediaSubType != 1752589105)
        {
          if (MediaSubType != 1685481521)
          {
LABEL_33:
            result = FigSignalErrorAt();
            goto LABEL_28;
          }
          if (v10)
          {
            v14 = vtCreateStringFromCodecType(0x68766331u);
            v12 = (const __CFDictionary *)CFDictionaryGetValue(v10, v14);
            if (v14)
              CFRelease(v14);
          }
        }
        if (v12)
          result = vtGetHEVCDecoderCapabilitiesForFormatDescription(desc, v12, (_BYTE *)&v15 + 1, (char *)&v15);
        else
          result = VTGetHEVCCapabilitesForFormatDescription(desc, a2, (unint64_t)&v15 + 1, (unint64_t)&v15);
        goto LABEL_28;
      }
    }
    else if (((MediaSubType - 1634755432) > 0xB || ((1 << (MediaSubType - 104)) & 0x8C1) == 0)
           && MediaSubType != 1634743400
           && MediaSubType != 1634743416)
    {
      goto LABEL_33;
    }
    result = 0;
    HIBYTE(v15) = v12 != 0;
    LOBYTE(v15) = v12 != 0;
    goto LABEL_28;
  }
  result = 0;
LABEL_28:
  if (a3)
    *(_BYTE *)a3 = HIBYTE(v15);
  if (a4)
    *(_BYTE *)a4 = v15;
  return result;
}

BOOL VTDecoderCapabilitiesDictionaryAllowsHDR(const __CFDictionary *a1)
{
  const void *Value;

  if (a1)
    Value = CFDictionaryGetValue(a1, CFSTR("VTIsHDRAllowedOnDevice"));
  else
    Value = (const void *)*MEMORY[0x1E0C9AE40];
  return Value == (const void *)*MEMORY[0x1E0C9AE50];
}

BOOL VTIsSecTaskEntitledForSpecifyingVP9Decode(__SecTask *a1)
{
  CFTypeRef v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  v1 = SecTaskCopyValueForEntitlement(a1, CFSTR("com.apple.coremedia.allow-specifying-alternate-video-decoder-selection"), 0);
  v2 = v1 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t VTIsSecTaskEntitledForVP9Decode(SecTaskRef task)
{
  uint64_t v1;
  CFTypeRef v2;

  v1 = (uint64_t)task;
  if (task)
  {
    v2 = SecTaskCopyValueForEntitlement(task, CFSTR("com.apple.developer.coremedia.allow-alternate-video-decoder-selection"), 0);
    if (!v2)
      v2 = SecTaskCopyValueForEntitlement((SecTaskRef)v1, CFSTR("com.apple.coremedia.allow-alternate-video-decoder-selection"), 0);
    if (v2 != (CFTypeRef)*MEMORY[0x1E0C9AE50] && !FigIsSecTaskGPUExtensionOfBrowserEngine())
    {
      v1 = 0;
      if (!v2)
        return v1;
      goto LABEL_7;
    }
    v1 = 1;
    if (v2)
LABEL_7:
      CFRelease(v2);
  }
  return v1;
}

uint64_t SRSEnhancementFilter_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a3)
    return 4294954394;
  VTTemporalFilterPluginGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
    return 4294954392;
  return v3;
}

uint64_t SRSEnhancementFilter_Invalidate()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 82) = 1;
  SRSEnhancementFilter_CompleteFrames();
  v1 = *(NSObject **)(DerivedStorage + 88);
  if (v1)
    dispatch_release(v1);
  v2 = *(NSObject **)(DerivedStorage + 96);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(DerivedStorage + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 72);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 112);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 144);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 120);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  *(_QWORD *)DerivedStorage = 0;
  return 0;
}

__CFString *SRSEnhancementFilter_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SRSEnhancementFilter %p>"), a1);
  return Mutable;
}

uint64_t SRSEnhancementFilter_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  void *DictionaryRepresentation;
  void *v10;
  uint64_t result;
  const __CFAllocator *v12;
  int *p_valuePtr;
  void **v14;
  int valuePtr;
  int v16;
  CGSize v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 82))
    return 4294954393;
  v7 = DerivedStorage;
  if (CFEqual(a2, CFSTR("FilterSourcePixelBufferAttributes")))
  {
    v8 = *(const void **)(v7 + 56);
    if (v8)
    {
LABEL_4:
      DictionaryRepresentation = (void *)CFRetain(v8);
LABEL_5:
      v10 = DictionaryRepresentation;
LABEL_9:
      result = 0;
LABEL_10:
      *a4 = v10;
      return result;
    }
LABEL_8:
    v10 = 0;
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("FilterDestinationPixelBufferAttributes")))
  {
    v8 = *(const void **)(v7 + 64);
    if (v8)
      goto LABEL_4;
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("MaxLookBehind")))
  {
    v16 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_valuePtr = &v16;
LABEL_15:
    DictionaryRepresentation = CFNumberCreate(v12, kCFNumberIntType, p_valuePtr);
    goto LABEL_5;
  }
  if (CFEqual(a2, CFSTR("MaxLookAhead")))
  {
    valuePtr = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_valuePtr = &valuePtr;
    goto LABEL_15;
  }
  if (CFEqual(a2, CFSTR("RealTime")))
  {
    result = 0;
    if (*(_BYTE *)(v7 + 80))
      v14 = (void **)MEMORY[0x1E0C9AE50];
    else
      v14 = (void **)MEMORY[0x1E0C9AE40];
    v10 = *v14;
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("OutputDimensions")))
  {
    v17.width = (double)*(int *)(v7 + 16);
    v17.height = (double)*(int *)(v7 + 20);
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v17);
    goto LABEL_5;
  }
  if (CFEqual(a2, CFSTR("FilterParameters")))
  {
    v8 = *(const void **)(v7 + 120);
    if (v8)
      goto LABEL_4;
    goto LABEL_8;
  }
  return 4294954396;
}

uint64_t SRSEnhancementFilter_SetProperty(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t result;
  int v8;
  int width;
  int v10;
  int height;
  CGSize v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 82))
    return 4294954393;
  v6 = DerivedStorage;
  if (CFEqual(a2, CFSTR("FilterSourcePixelBufferAttributes"))
    || CFEqual(a2, CFSTR("FilterDestinationPixelBufferAttributes"))
    || CFEqual(a2, CFSTR("MaxLookBehind"))
    || CFEqual(a2, CFSTR("MaxLookAhead")))
  {
    return 4294954395;
  }
  if (CFEqual(a2, CFSTR("RealTime")))
  {
    result = 0;
    *(_BYTE *)(v6 + 80) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    return result;
  }
  if (!CFEqual(a2, CFSTR("FilterParameters")))
  {
    if (!CFEqual(a2, CFSTR("OutputDimensions")))
      return 4294954396;
    v12.width = 0.0;
    v12.height = 0.0;
    if (a3)
    {
      result = CGSizeMakeWithDictionaryRepresentation(a3, &v12);
      if (!(_DWORD)result)
        return result;
      if (v12.width > 4096.0)
        return 4294954394;
      if (v12.height > 2160.0)
        return 4294954394;
      v8 = *(_DWORD *)(v6 + 8);
      width = (int)v12.width;
      if (v8 != (int)v12.width && 2 * v8 != width)
        return 4294954394;
      v10 = *(_DWORD *)(v6 + 12);
      height = (int)v12.height;
      if (v10 != (int)v12.height && 2 * v10 != height)
        return 4294954394;
      if (*(_DWORD *)(v6 + 16) != width || *(_DWORD *)(v6 + 20) != height)
      {
        *(_DWORD *)(v6 + 16) = width;
        *(_DWORD *)(v6 + 20) = height;
        srsFilter_calculateOutputDimensions(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), v6 + 24);
        result = *(_QWORD *)(v6 + 64);
        if (result)
        {
          CFRelease((CFTypeRef)result);
          result = 0;
          *(_QWORD *)(v6 + 64) = 0;
        }
        return result;
      }
    }
    return 0;
  }
  if (!a3)
  {
    result = 0;
    *(_QWORD *)(v6 + 120) = 0;
    return result;
  }
  result = (uint64_t)CFRetain(a3);
  *(_QWORD *)(v6 + 120) = result;
  if (!result)
    return result;
  if (!*(_QWORD *)(v6 + 144))
    return 0;
  if (FigCFEqual())
  {
LABEL_17:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 144), (const void *)*MEMORY[0x1E0D3A310], (const void *)*MEMORY[0x1E0D3A320]);
    return 0;
  }
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 144), (const void *)*MEMORY[0x1E0D3A2D8], (const void *)*MEMORY[0x1E0D3A2E8]);
    goto LABEL_17;
  }
  return result;
}

uint64_t SRSEnhancementFilter_CompleteFrames()
{
  NSObject *v0;

  v0 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 88);
  if (v0)
    dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
  return 0;
}

uint64_t srsFilter_calculateOutputDimensions(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  float v4;
  int v5;
  float v6;

  v3 = HIDWORD(a2);
  *(_QWORD *)a3 = result;
  if (result != a2)
  {
    if (__PAIR64__(2 * HIDWORD(result), 2 * (int)result) == a2)
    {
      *(_DWORD *)a3 = a2;
    }
    else
    {
      v4 = (float)SHIDWORD(a2) / (float)SHIDWORD(result);
      v5 = (int)(float)(v4 * (float)(int)result);
      v6 = (float)(int)a2 / (float)(int)result;
      if (v6 <= v4)
      {
        v5 = a2;
        LODWORD(v3) = (int)(float)(v6 * (float)SHIDWORD(result));
      }
      *(_DWORD *)a3 = (v5 + 1) & 0xFFFFFFFE;
      LODWORD(v3) = (v3 + 1) & 0xFFFFFFFE;
    }
    *(_DWORD *)(a3 + 4) = v3;
  }
  return result;
}

uint64_t SRSEnhancementFilter_StartSession(uint64_t a1, uint64_t *a2, __CFDictionary *a3)
{
  __CFDictionary **DerivedStorage;
  uint64_t v6;
  __CFDictionary **v7;
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  CFMutableDictionaryRef v12;
  __CFDictionary *v13;
  __CFArray *v14;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  uint64_t v16;

  DerivedStorage = (__CFDictionary **)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = (__CFDictionary *)a2;
  v6 = 4294954394;
  if (a2
    && (int)a3 >= 32
    && (int)a3 <= 4096
    && (a3 & 1) == 0
    && (BYTE4(a3) & 1) == 0
    && (HIDWORD(a3) - 2161) >= 0xFFFFF7CF)
  {
    v7 = DerivedStorage;
    DerivedStorage[1] = a3;
    DerivedStorage[3] = a3;
    DerivedStorage[2] = a3;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294954392;
    v10 = Mutable;
    v11 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v11)
    {
      v6 = 4294954392;
LABEL_18:
      CFRelease(v10);
      return v6;
    }
    v12 = v11;
    CFDictionaryAddValue(v10, (const void *)*MEMORY[0x1E0D3A2D0], v11);
    if (IOSurfaceAcceleratorCreate())
    {
      v13 = 0;
      v6 = 4294954392;
    }
    else
    {
      v7[11] = (__CFDictionary *)dispatch_group_create();
      v7[12] = (__CFDictionary *)FigDispatchQueueCreateWithPriority();
      v13 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v6 = (uint64_t)v14;
      if (v14)
      {
        addNumberToCFArray(v14, 875704950);
        addNumberToCFArray((__CFArray *)v6, 875704934);
        addNumberToCFArray((__CFArray *)v6, 875836534);
        addNumberToCFArray((__CFArray *)v6, 875836518);
        addNumberToCFArray((__CFArray *)v6, 2037741171);
        addNumberToCFArray((__CFArray *)v6, 2037741158);
        addNumberToCFArray((__CFArray *)v6, 2016686642);
        addNumberToCFArray((__CFArray *)v6, 2019963442);
        addNumberToCFArray((__CFArray *)v6, 2016687156);
        addNumberToCFArray((__CFArray *)v6, 2019963956);
        addNumberToCFArray((__CFArray *)v6, 1983131952);
        addNumberToCFArray((__CFArray *)v6, 1882468914);
        addNumberToCFArray((__CFArray *)v6, 1885745714);
        addNumberToCFArray((__CFArray *)v6, 1882469428);
        addNumberToCFArray((__CFArray *)v6, 1885746228);
        addNumberToCFArray((__CFArray *)v6, 875704438);
        addNumberToCFArray((__CFArray *)v6, 875704422);
        addNumberToCFArray((__CFArray *)v6, 2016686640);
        addNumberToCFArray((__CFArray *)v6, 2019963440);
        addNumberToCFArray((__CFArray *)v6, 1882468912);
        addNumberToCFArray((__CFArray *)v6, 1885745712);
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0CA9040], (const void *)v6);
        CFRelease((CFTypeRef)v6);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v13, 0, v7 + 7);
        if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
        {
          v6 = PixelBufferAttributesWithIOSurfaceSupport;
        }
        else
        {
          if (v13)
            CFRelease(v13);
          v16 = VTTemporalFilterPluginSessionSetInputPixelBufferAttributes(a2, v7[7]);
          if (!(_DWORD)v16)
            v16 = VTPixelTransferSessionCreate(v8, v7 + 6);
          v6 = v16;
          v13 = 0;
        }
      }
    }
    CFRelease(v12);
    CFRelease(v10);
    v10 = v13;
    if (v13)
      goto LABEL_18;
  }
  return v6;
}

uint64_t SRSEnhancementFilter_ProcessFrame(uint64_t a1, const void *a2, __CVBuffer *a3, __int128 *a4)
{
  uint64_t v7;
  BOOL v8;
  signed int PixelFormatType;
  uint64_t v10;
  const void *v11;
  uint64_t ProtectionOptions;
  uint64_t v13;
  const void *v14;
  uint64_t *v15;
  const void *v16;
  uint64_t *v17;
  CFAllocatorRef *v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v22;
  CFMutableArrayRef v23;
  __CFArray *v24;
  int v25;
  CFMutableDictionaryRef v26;
  const __CFString *v27;
  CFTypeID v28;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  uint64_t v30;
  __CVPixelBufferPool *OutputPixelBufferPool;
  const __CFAllocator *v32;
  uint64_t PixelBuffer;
  uint64_t v34;
  __CVPixelBufferPool *v35;
  uint64_t v36;
  CFTypeRef v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  int v43;
  int v44;
  CVPixelBufferRef v45;
  const void *v46;
  CVPixelBufferRef v47;
  const __CFAllocator *allocator;
  const void *v49;
  BOOL v50;
  __int128 *v51;
  _QWORD block[9];
  __int128 v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CVPixelBufferRef *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CVPixelBufferRef *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t DerivedStorage;
  char buffer[8];

  v68 = 0;
  v69 = &v68;
  v70 = 0x2000000000;
  DerivedStorage = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v64 = 0;
  v65 = (CVPixelBufferRef *)&v64;
  v66 = 0x2000000000;
  v67 = 0;
  v60 = 0;
  v61 = (CVPixelBufferRef *)&v60;
  v62 = 0x2000000000;
  v63 = 0;
  v56 = 0;
  v57 = &v56;
  v58 = 0x2000000000;
  v59 = 0;
  v7 = v69[3];
  v8 = *(_DWORD *)(v7 + 28) != *(_DWORD *)(v7 + 12) || *(_DWORD *)(v7 + 24) != *(_DWORD *)(v7 + 8);
  if (*(_QWORD *)v7)
  {
    if (!*(_BYTE *)(v7 + 82))
    {
      dispatch_group_wait(*(dispatch_group_t *)(v7 + 88), 0xFFFFFFFFFFFFFFFFLL);
      PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
      v10 = v69[3];
      if (PixelFormatType != *(_DWORD *)(v10 + 104))
      {
        v11 = *(const void **)(v10 + 64);
        if (v11)
        {
          CFRelease(v11);
          *(_QWORD *)(v69[3] + 64) = 0;
        }
      }
      CVPixelBufferGetIOSurface(a3);
      ProtectionOptions = IOSurfaceGetProtectionOptions();
      v13 = v69[3];
      if (ProtectionOptions != *(_QWORD *)(v13 + 128))
      {
        v14 = *(const void **)(v13 + 64);
        if (v14)
        {
          CFRelease(v14);
          v15 = v69;
          *(_QWORD *)(v69[3] + 64) = 0;
          v13 = v15[3];
        }
      }
      if (*(unsigned __int8 *)(v13 + 136) != *(unsigned __int8 *)(v13 + 33))
      {
        v16 = *(const void **)(v13 + 64);
        if (v16)
        {
          CFRelease(v16);
          v17 = v69;
          *(_QWORD *)(v69[3] + 64) = 0;
          v13 = v17[3];
        }
      }
      v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      if (*(_QWORD *)(v13 + 64))
      {
LABEL_35:
        *(_DWORD *)(v13 + 104) = PixelFormatType;
        *(_QWORD *)(v13 + 128) = ProtectionOptions;
        *(_BYTE *)(v13 + 136) = *(_BYTE *)(v13 + 33);
        OutputPixelBufferPool = (__CVPixelBufferPool *)VTTemporalFilterPluginSessionGetOutputPixelBufferPool(*(uint64_t **)v13);
        if (OutputPixelBufferPool)
        {
          v32 = *v18;
          PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v32, OutputPixelBufferPool, v65 + 3);
          if (v65[3])
          {
            v30 = PixelBuffer;
            v34 = v69[3];
            if (!*(_BYTE *)(v34 + 32) || (v35 = *(__CVPixelBufferPool **)(v34 + 40)) == 0)
            {
LABEL_41:
              if (a3)
                v37 = CFRetain(a3);
              else
                v37 = 0;
              v57[3] = (uint64_t)v37;
              v38 = v69[3];
              v39 = *(NSObject **)(v38 + 88);
              v40 = *(NSObject **)(v38 + 96);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 0x40000000;
              block[2] = __SRSEnhancementFilter_ProcessFrame_block_invoke;
              block[3] = &unk_1E2F620B0;
              block[4] = &v68;
              block[5] = &v60;
              block[6] = &v64;
              block[7] = &v56;
              v55 = v8;
              v53 = *a4;
              v54 = *((_QWORD *)a4 + 2);
              block[8] = a2;
              dispatch_group_async(v39, v40, block);
              v41 = v69[3];
              if (!*(_BYTE *)(v41 + 81))
                dispatch_group_wait(*(dispatch_group_t *)(v41 + 88), 0xFFFFFFFFFFFFFFFFLL);
              goto LABEL_46;
            }
            v36 = CVPixelBufferPoolCreatePixelBuffer(v32, v35, v61 + 3);
            if (v61[3])
            {
              v30 = v36;
              goto LABEL_41;
            }
          }
        }
        goto LABEL_79;
      }
      v19 = CMBaseObjectGetDerivedStorage();
      v20 = *v18;
      Mutable = CFDictionaryCreateMutable(*v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v22 = Mutable;
        v50 = v8;
        v51 = a4;
        v23 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        if (v23)
        {
          v24 = v23;
          v25 = PixelFormatType;
          if (*(_BYTE *)(v19 + 33))
            goto LABEL_19;
          v27 = *(const __CFString **)(v19 + 112);
          if (v27)
          {
            v28 = CFGetTypeID(*(CFTypeRef *)(v19 + 112));
            if (v28 == CFStringGetTypeID())
            {
              CFStringGetCString(v27, buffer, 5, 0x600u);
              v25 = bswap32(*(unsigned int *)buffer);
              goto LABEL_19;
            }
          }
          v25 = 1882468914;
          if (PixelFormatType > 1885746227)
          {
            if (PixelFormatType <= 2019963439)
            {
              if (PixelFormatType != 1885746228)
              {
                if (PixelFormatType != 1983131952)
                {
                  v43 = 2016687156;
LABEL_66:
                  if (PixelFormatType != v43)
                    goto LABEL_19;
                }
LABEL_67:
                v25 = 1882469428;
                goto LABEL_19;
              }
            }
            else
            {
              if (PixelFormatType <= 2019963955)
              {
                if (PixelFormatType != 2019963440)
                {
                  v44 = 2019963442;
                  goto LABEL_72;
                }
                goto LABEL_73;
              }
              if (PixelFormatType != 2019963956)
              {
                v44 = 2037741158;
LABEL_72:
                if (PixelFormatType != v44)
                  goto LABEL_19;
                goto LABEL_73;
              }
            }
          }
          else
          {
            if (PixelFormatType > 875836533)
            {
              if (PixelFormatType <= 1885745711)
              {
                if (PixelFormatType != 875836534)
                {
                  v43 = 1882469428;
                  goto LABEL_66;
                }
                goto LABEL_67;
              }
              if (PixelFormatType != 1885745712)
              {
                v44 = 1885745714;
                goto LABEL_72;
              }
LABEL_73:
              v25 = 1885745714;
              goto LABEL_19;
            }
            if (PixelFormatType == 875704422 || PixelFormatType == 875704934)
              goto LABEL_73;
            if (PixelFormatType != 875836518)
            {
LABEL_19:
              v49 = a2;
              addNumberToCFArray(v24, v25);
              CFDictionaryAddValue(v22, (const void *)*MEMORY[0x1E0CA9040], v24);
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              allocator = v20;
              if (ProtectionOptions)
              {
                v26 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (!v26)
                {
                  v30 = 4294954392;
LABEL_31:
                  v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
                  CFRelease(v22);
                  CFRelease(v24);
                  if (v26)
                    CFRelease(v26);
                  a2 = v49;
                  a4 = v51;
                  v8 = v50;
                  if ((_DWORD)v30)
                    goto LABEL_80;
                  v13 = v69[3];
                  goto LABEL_35;
                }
                FigCFDictionarySetInt64();
                FigCFDictionarySetValue();
              }
              else
              {
                v26 = 0;
              }
              PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v22, 0, (__CFDictionary **)(v19 + 64));
              if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport
                || (PixelBufferAttributesWithIOSurfaceSupport = VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes(*(uint64_t **)v19, *(const void **)(v19 + 64)), (_DWORD)PixelBufferAttributesWithIOSurfaceSupport))
              {
                v30 = PixelBufferAttributesWithIOSurfaceSupport;
              }
              else if (*(_BYTE *)(v19 + 32) && !*(_BYTE *)(v19 + 33))
              {
                *(_QWORD *)buffer = 0;
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                v30 = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v22, 0, (__CFDictionary **)buffer);
                CVPixelBufferPoolCreate(allocator, 0, *(CFDictionaryRef *)buffer, (CVPixelBufferPoolRef *)(v19 + 40));
                if (*(_QWORD *)buffer)
                  CFRelease(*(CFTypeRef *)buffer);
              }
              else
              {
                v30 = 0;
              }
              goto LABEL_31;
            }
          }
          v25 = 1885746228;
          goto LABEL_19;
        }
        CFRelease(v22);
      }
LABEL_79:
      v30 = 4294954392;
      goto LABEL_80;
    }
    v30 = 4294954393;
  }
  else
  {
    v30 = 4294954394;
  }
LABEL_80:
  v45 = v65[3];
  if (v45)
    CFRelease(v45);
  v46 = (const void *)v57[3];
  if (v46)
    CFRelease(v46);
  v47 = v61[3];
  if (v47)
    CFRelease(v47);
  VTTemporalFilterPluginSessionConcludeInputFrame(*(uint64_t **)v69[3], a2);
LABEL_46:
  _Block_object_dispose(&v56, 8);
  _Block_object_dispose(&v60, 8);
  _Block_object_dispose(&v64, 8);
  _Block_object_dispose(&v68, 8);
  return v30;
}

uint64_t SRSEnhancementFilter_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  MEMORY[0x1940281CC](&gSRSFilterCreateSupportedPropertyDictionaryOnce, srsFilter_createSupportedPropertyDictionary);
  if (!a2 || !gSRSFilterSupportedPropertyDictionary)
    return FigSignalErrorAt();
  *a2 = CFRetain((CFTypeRef)gSRSFilterSupportedPropertyDictionary);
  return 0;
}

void addNumberToCFArray(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v3)
  {
    v4 = v3;
    CFArrayAppendValue(a1, v3);
    CFRelease(v4);
  }
}

void srsFilter_createSupportedPropertyDictionary()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gSRSFilterSupportedPropertyDictionary = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (gSRSFilterSupportedPropertyDictionary)
  {
    v1 = CFDictionaryCreate(v0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, CFSTR("OutputDimensions"), v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, CFSTR("RealTime"), v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, CFSTR("FilterSourcePixelBufferAttributes"), v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, CFSTR("FilterDestinationPixelBufferAttributes"), v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, CFSTR("MaxLookBehind"), v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, CFSTR("MaxLookAhead"), v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, CFSTR("FilterParameters"), v1);
    if (v1)
      CFRelease(v1);
  }
}

uint64_t jpeg_setupreadbuffer(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 12) = 32;
  *(_QWORD *)(result + 56) = a3;
  *(_QWORD *)(result + 64) = a2 + a3;
  return result;
}

uint64_t popbytes(uint64_t result, int a2, _WORD *a3)
{
  unsigned __int8 **v3;
  unint64_t v4;
  unsigned __int8 *v5;

  if (!a2)
    return 0;
  v3 = (unsigned __int8 **)result;
  LODWORD(result) = 0;
  v4 = (unint64_t)v3[8];
  v5 = *v3;
  while ((unint64_t)v5 < v4)
  {
    --a2;
    *v3 = v5 + 1;
    result = *v5++ | ((_DWORD)result << 8);
    if (!(_WORD)a2)
      return result;
  }
  *a3 = -12909;
  return 0xFFFFFFFFLL;
}

uint64_t popbytesCallback(uint64_t result, int a2, _WORD *a3)
{
  unsigned __int8 **v3;
  unint64_t v4;
  unsigned __int8 *v5;

  if (!a2)
    return 0;
  v3 = (unsigned __int8 **)result;
  LODWORD(result) = 0;
  v4 = (unint64_t)v3[8];
  v5 = *v3;
  while ((unint64_t)v5 < v4)
  {
    --a2;
    *v3 = v5 + 1;
    result = *v5++ | ((_DWORD)result << 8);
    if (!(_WORD)a2)
      return result;
  }
  *a3 = -12909;
  return 0xFFFFFFFFLL;
}

uint64_t popbitsa(unsigned __int8 **a1, int a2)
{
  int v2;
  int v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v11;
  BOOL v12;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_DWORD *)a1 + 3);
  if (v3 >= 8)
  {
    v4 = (unint64_t)a1[8];
    v5 = *a1;
    while (1)
    {
      v2 <<= 8;
      *((_DWORD *)a1 + 2) = v2;
      if ((unint64_t)v5 >= v4)
        break;
      v6 = v5 + 1;
      *a1 = v5 + 1;
      v9 = *v5;
      v7 = v5 + 2;
      v8 = v9;
      if (*((_DWORD *)a1 + 5) == v9 && (unint64_t)v7 < v4)
      {
        *a1 = v7;
        if (!*v6)
          v6 = v7;
        *a1 = v6;
      }
      v2 |= v8;
      v11 = v3 - 8;
      *((_DWORD *)a1 + 2) = v2;
      *((_DWORD *)a1 + 3) = v3 - 8;
      v5 = v6;
      v12 = v3 <= 15;
      v3 -= 8;
      if (v12)
        goto LABEL_15;
    }
  }
  v11 = v3;
LABEL_15:
  *((_DWORD *)a1 + 3) = v11 + a2;
  return (v2 << v11) >> -(char)a2;
}

uint64_t GetConversionRoutine(uint64_t a1, uint64_t (**a2)(uint64_t result, uint64_t *a2, uint64_t a3), uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7, int a8, int a9, char a10)
{
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  uint64_t (*v18)(uint64_t, uint64_t *, uint64_t);
  int v19;
  __int16 v20;
  uint64_t (*v21)(uint64_t, uint64_t *, uint64_t);
  uint64_t (*v22)(uint64_t, uint64_t *, uint64_t);
  uint64_t (*v23)(uint64_t, __int16 **, uint64_t);
  int v24;
  int v25;

  *a2 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))DoNothing;
  if (a8)
    goto LABEL_2;
  v12 = *(__int16 *)(a1 + 3274);
  switch(v12)
  {
    case 1:
      a8 = 944206457;
      goto LABEL_2;
    case 4:
      a8 = 2036556651;
      goto LABEL_2;
    case 3:
      a8 = 1497580320;
LABEL_2:
      switch(a6)
      {
        case 1:
          v10 = IDCTFlex;
          v11 = 1852796517;
          goto LABEL_43;
        case 2:
          if (*a7 != 17)
            goto LABEL_41;
          v16 = a7[1];
          goto LABEL_33;
        case 3:
          v13 = *a7;
          if (v13 == 17)
          {
            if (a7[1] != 17)
              goto LABEL_41;
            v16 = a7[2];
            goto LABEL_33;
          }
          if (v13 == 33)
          {
            if (a7[1] == 17 && a7[2] == 17)
            {
              v11 = 875704864;
              goto LABEL_42;
            }
          }
          else if (v13 == 34 && a7[1] == 17 && a7[2] == 17)
          {
            v11 = 875639072;
            v10 = IDCT;
            goto LABEL_43;
          }
          goto LABEL_41;
        case 4:
          v14 = *a7;
          if (v14 != 17)
          {
            if (v14 == 33)
            {
              if (a7[1] == 17 && a7[2] == 17 && a7[3] == 33)
              {
                v15 = 875704864;
                goto LABEL_40;
              }
            }
            else if (v14 == 34 && a7[1] == 17 && a7[2] == 17 && a7[3] == 34)
            {
              v15 = 875639072;
LABEL_40:
              v11 = v15 | 0x14;
              goto LABEL_42;
            }
            goto LABEL_41;
          }
          if (a7[1] != 17 || a7[2] != 17)
          {
LABEL_41:
            v11 = 0;
            goto LABEL_42;
          }
          v16 = a7[3];
LABEL_33:
          if (v16 == 17)
            v11 = 1852796517;
          else
            v11 = 0;
LABEL_42:
          v10 = IDCTFlex;
LABEL_43:
          if (a8 == 1497580320)
          {
            if (v11 == 875704864)
            {
              v17 = -12910;
              if (a9 <= 875704437)
              {
                if (a9 != 32)
                {
                  if (a9 != 846624121)
                    return v17;
                  v18 = yuv422to2vuy;
                  goto LABEL_86;
                }
                v22 = yuvto32ARGB2111;
              }
              else
              {
                if (a9 == 875704438)
                {
                  v18 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuv422to420v;
                  goto LABEL_86;
                }
                if (a9 != 1111970369)
                {
                  if (a9 != 2033463856)
                    return v17;
                  v18 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuv422toY420;
                  goto LABEL_86;
                }
                v22 = yuvto32BGRA2111;
              }
            }
            else
            {
              if (v11 != 875639072)
              {
                v17 = -12910;
                if (a9 <= 875704437)
                {
                  if (a9 == 32)
                  {
                    v19 = 1;
                    v20 = 4;
                    v21 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuvto32ARGBOne;
                  }
                  else
                  {
                    if (a9 != 846624121)
                      return v17;
                    v20 = 2;
                    v21 = yuvto2vuyOne;
                    v19 = 2;
                  }
                }
                else
                {
                  switch(a9)
                  {
                    case 875704438:
                      v20 = 0;
                      v19 = 2;
                      v21 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuvto420vOne;
                      break;
                    case 2033463856:
                      v20 = 0;
                      v19 = 2;
                      v21 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuvtoY420One;
                      break;
                    case 1111970369:
                      v19 = 1;
                      v20 = 4;
                      v21 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuvto32BGRAOne;
                      break;
                    default:
                      return v17;
                  }
                }
                v24 = *(unsigned __int16 *)(a1 + 4096);
                if (v24 == 17)
                {
                  *a2 = v21;
                }
                else
                {
                  *a2 = UpsampleThenContinue;
                  *(_WORD *)(a3 + 56) = a6;
                  *(_WORD *)(a3 + 58) = v24;
                  if (a6 >= 1)
                  {
                    v25 = 0;
                    do
                    {
                      *(_BYTE *)(a3 + (__int16)v25 + 62) = a7[(__int16)v25];
                      ++v25;
                    }
                    while (a6 > (__int16)v25);
                  }
                  *(_WORD *)(a3 + 60) = v20;
                  *(_QWORD *)(a3 + 48) = v21;
                }
                goto LABEL_103;
              }
              v17 = -12910;
              if (a9 <= 875704437)
              {
                if (a9 != 32)
                {
                  if (a9 != 846624121)
                    return v17;
                  v18 = yuv411to2vuy;
                  goto LABEL_86;
                }
                v22 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuvto32ARGBTab;
                v23 = yuvto32ARGB;
              }
              else
              {
                if (a9 == 875704438)
                {
                  v18 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuv411to420v;
                  goto LABEL_86;
                }
                if (a9 != 1111970369)
                {
                  if (a9 != 2033463856)
                    return v17;
                  v18 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuv411toY420;
                  goto LABEL_86;
                }
                v22 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yuvto32BGRATab;
                v23 = yuvto32BGRA;
              }
              if (!a10)
                v22 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))v23;
            }
          }
          else
          {
            if (a8 != 944206457)
              return -12910;
            v17 = -12910;
            if (a9 > 875704437)
            {
              if (a9 != 875704438)
              {
                if (a9 != 1111970369)
                {
                  if (a9 != 2033463856)
                    return v17;
                  v18 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))ytoY420One;
                  goto LABEL_86;
                }
                v22 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yto32BGRAOne;
                goto LABEL_95;
              }
              v18 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yto420vOne;
LABEL_86:
              *a2 = v18;
              v19 = 2;
              goto LABEL_103;
            }
            if (a9 != 32)
            {
              if (a9 != 846624121)
                return v17;
              v18 = yto2vuyOne;
              goto LABEL_86;
            }
            v22 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))yto32ARGBOne;
          }
LABEL_95:
          *a2 = v22;
          v19 = 1;
LABEL_103:
          *(_QWORD *)(a1 + 4416) = v10;
          UpdatePinAndGammaTables(a1, v19);
          return 0;
        default:
          goto LABEL_41;
      }
  }
  return -12910;
}

uint64_t getyuvMB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t);
  __int16 v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, _BYTE *);
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  char *v29;
  _BYTE v31[21];
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 *)(a2 + 48);
  *(_QWORD *)(a1 + 3200) = &unk_1928E0114;
  v7 = *(unsigned __int8 *)(a1 + 4128);
  if (*(_BYTE *)(a1 + 4128))
    v8 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))ExtractBufferedBlocks;
  else
    v8 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))DecodeBlocks;
  if (a6)
  {
    v9 = a6;
    v13 = a1 + 96;
    v14 = a1 + 1632;
    v15 = a1 + 3200;
    v16 = *(void (**)(uint64_t, uint64_t, _BYTE *))(a1 + 4416);
    v33 = 0;
    memset(v32, 0, sizeof(v32));
    if (v7)
      v17 = 0;
    else
      v17 = v6;
    v29 = (char *)(a1 + 3400);
    while (1)
    {
      if (v17)
      {
        v18 = *(_DWORD *)(a2 + 52);
        v19 = __OFSUB__(v18--, 1);
        *(_DWORD *)(a2 + 52) = v18;
        if ((v18 < 0) ^ v19 | (v18 == 0))
        {
          v20 = -*(unsigned __int16 *)(a2 + 12) & 7;
          if (v20)
            popbitsa((unsigned __int8 **)a2, v20);
          while ((unsigned __int16)popbitsa((unsigned __int8 **)a2, 8) == 255)
            ;
          reset_DC_pred(a1);
          *(_DWORD *)(a2 + 52) = v17;
        }
      }
      if (v8(a1, a2, v13, v31, a3))
        break;
      *(_QWORD *)&v32[0] = v14;
      if (*(__int16 *)(a1 + 3274) >= 2)
      {
        v21 = *(unsigned __int16 *)(a1 + 3274) - 1;
        v22 = v29;
        v23 = (uint64_t *)v32 + 1;
        v24 = v14;
        do
        {
          v25 = *v22++;
          v24 += v25 << 7;
          *v23++ = v24;
          --v21;
        }
        while (v21);
      }
      --v9;
      v16(v13, v14, v31);
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(a1 + 3192))(a4, v32, v15);
      for (i = 0; i != 240; i += 80)
        *(_QWORD *)(a4 + i + 16) += *(_QWORD *)(a4 + i + 48);
      if (!v9)
        return 0;
    }
    return -1;
  }
  else
  {
    return 0;
  }
}

_WORD *FilterBlock(int a1, _WORD *a2, uint64_t *a3, int a4, int a5, int a6, int a7)
{
  _WORD *result;
  unsigned int v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _WORD *v15;
  __int16 v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _WORD *v21;
  __int16 *v22;
  unsigned int v23;
  __int16 *v24;
  __int16 v25;
  unsigned int v26;
  _WORD *v27;
  __int16 *v28;
  unsigned int v29;
  __int16 *v30;
  __int16 v31;
  _WORD *v32;
  unsigned int v33;
  uint64_t v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _WORD *v39;
  __int16 v40;

  result = 0;
  if (a1 > 8480)
  {
    if (a1 > 8721)
    {
      if (a1 != 8722)
      {
        if (a1 != 8737)
        {
          if (a1 != 8738)
            return result;
          goto LABEL_39;
        }
        v33 = 0;
        v34 = *a3;
        v35 = a2;
        v36 = *a3;
        do
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = &v35[v37];
            v40 = *(_WORD *)(v36 + v37 * 2);
            *v39 = v40;
            v39[8] = v40;
            ++v37;
            v17 = v38++ >= 7;
          }
          while (!v17);
          v36 += 16;
          v35 = (_WORD *)((char *)v35 + v37 * 2 + 16);
          v17 = v33++ >= 3;
        }
        while (!v17);
        if (a4 != a6)
        {
          v18 = v34 + 128;
          goto LABEL_51;
        }
        if (a5 != a7)
        {
          v18 = v34 - 64;
          goto LABEL_51;
        }
        return a2;
      }
LABEL_30:
      v26 = 0;
      v20 = *a3;
      v27 = a2;
      v28 = (__int16 *)*a3;
      do
      {
        v29 = 0;
        v30 = v28;
        do
        {
          v31 = *v30++;
          *v27 = v31;
          v32 = v27 + 2;
          v27[1] = v31;
          v27 += 2;
          v17 = v29++ >= 3;
        }
        while (!v17);
        v28 += 8;
        v27 = v32;
        v17 = v26++ >= 7;
      }
      while (!v17);
      if (a4 == a6)
      {
        if (a5 == a7)
          return a2;
        v18 = v20 + 120;
LABEL_51:
        *a3 = v18;
        return a2;
      }
      goto LABEL_40;
    }
    if (a1 != 8481)
    {
      if (a1 == 8721)
      {
        v19 = 0;
        v20 = *a3;
        v21 = a2;
        v22 = (__int16 *)*a3;
        do
        {
          v23 = 0;
          v21 += 8;
          v24 = v22;
          do
          {
            v25 = *v24++;
            *v21 = v25;
            *(v21 - 8) = v25;
            v21[1] = v25;
            *(v21 - 7) = v25;
            v21 += 2;
            v17 = v23++ >= 3;
          }
          while (!v17);
          v22 += 8;
          v17 = v19++ >= 3;
        }
        while (!v17);
        if (a4 == a6 && a5 != a7)
        {
          v18 = v20 + 56;
          goto LABEL_51;
        }
LABEL_40:
        v18 = v20 + 8;
        goto LABEL_51;
      }
      return result;
    }
LABEL_39:
    a2 = (_WORD *)*a3;
    v18 = *a3 + 128;
    goto LABEL_51;
  }
  if (a1 <= 4625)
  {
    if (a1 != 4369)
    {
      if (a1 == 4625)
      {
        v9 = 0;
        v10 = *a3;
        v11 = a2;
        v12 = *a3;
        do
        {
          v13 = 0;
          v14 = 0;
          do
          {
            v15 = &v11[v13];
            v16 = *(_WORD *)(v12 + v13 * 2);
            *v15 = v16;
            v15[8] = v16;
            ++v13;
            v17 = v14++ >= 7;
          }
          while (!v17);
          v12 += 16;
          v11 = (_WORD *)((char *)v11 + v13 * 2 + 16);
          v17 = v9++ >= 3;
        }
        while (!v17);
        v18 = v10 + 64;
        goto LABEL_51;
      }
      return result;
    }
    goto LABEL_39;
  }
  if (a1 == 4626)
    goto LABEL_39;
  if (a1 == 8465)
    goto LABEL_30;
  return result;
}

uint64_t VTParavirtualizationCreateSerializedAtomDataBlockBufferForSampleBuffer(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, CFTypeRef *a4, CMBlockBufferRef *a5)
{
  CFTypeRef v8;
  uint64_t v10;
  CMFormatDescriptionRef FormatDescription;
  OpaqueCMBlockBuffer *DataBuffer;
  const __CFAllocator *v13;
  uint64_t appended;
  uint64_t SampleTimingInfoArray;
  uint64_t v16;
  uint64_t v17;
  CMSampleTimingInfo *v18;
  CMSampleTimingInfo *v19;
  size_t DataLength;
  OpaqueCMBlockBuffer *value;
  CMSampleTimingInfo *v22;
  uint64_t Contiguous;
  CFTypeRef v24;
  uint64_t Decryptor;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, CMItemCount *);
  void (*v29)(uint64_t, int *);
  const __CFDictionary *v30;
  uint64_t v31;
  const __CFDictionary *v32;
  uint64_t v33;
  CFArrayRef SampleAttachmentsArray;
  const __CFArray *v35;
  uint64_t v36;
  BOOL v37;
  CMBlockBufferRef blockBufferOut;
  _OWORD v39[3];
  uint64_t v40;
  CMSampleTimingInfo v41;
  int v42;
  int v43;
  void (*v44)(uint64_t, CMItemCount *);
  CMItemCount timingArrayEntriesNeededOut[2];

  if (!a3)
    return FigSignalErrorAt();
  if (a4)
    v8 = *a4;
  else
    v8 = 0;
  v10 = MEMORY[0x1940281CC](&sVTParavirtualizationInitIndexedKeysOnce, vtParavirtualizationInitializeIndexedKeys);
  if (!(_DWORD)v10)
  {
    v40 = 0;
    memset(v39, 0, sizeof(v39));
    blockBufferOut = 0;
    FormatDescription = CMSampleBufferGetFormatDescription(a3);
    DataBuffer = CMSampleBufferGetDataBuffer(a3);
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    appended = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
    if ((_DWORD)appended)
      goto LABEL_91;
    appended = FigAtomWriterInitWithBlockBuffer();
    if ((_DWORD)appended)
      goto LABEL_91;
    appended = FigAtomWriterBeginAtom();
    if ((_DWORD)appended)
      goto LABEL_91;
    memset(&v41, 0, 24);
    CMSampleBufferGetOutputPresentationTimeStamp(&v41.duration, a3);
    if ((v41.duration.flags & 1) != 0)
    {
      appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
      if ((_DWORD)appended)
        goto LABEL_91;
    }
    timingArrayEntriesNeededOut[0] = 0;
    memset(&v41, 0, sizeof(v41));
    SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a3, 0, 0, timingArrayEntriesNeededOut);
    if ((_DWORD)SampleTimingInfoArray == -12736)
    {
LABEL_25:
      if (!DataBuffer)
      {
        v41.duration.value = 0;
        appended = vtParavirtualizationAtomWriterAppendNumSamples(a3);
        if (!(_DWORD)appended)
        {
          v22 = &v41;
LABEL_39:
          appended = vtParavirtualizationAtomWriterAppendSampleSizeArray(a3, (uint64_t)v39, &v22->duration.value);
          if (!(_DWORD)appended)
          {
            if (v8 && FigCFEqual()
              || (appended = vtParavirtualizationAtomWriterAppendCMFormatDescription(FormatDescription),
                  !(_DWORD)appended))
            {
              if (FormatDescription)
                v24 = CFRetain(FormatDescription);
              else
                v24 = 0;
              Decryptor = FigSampleBufferGetDecryptor();
              if (Decryptor)
              {
                v26 = Decryptor;
                memset(&v41, 0, 56);
                v27 = FigAtomWriterInitWithParent();
                if ((_DWORD)v27)
                  goto LABEL_95;
                v27 = FigAtomWriterBeginAtom();
                if ((_DWORD)v27)
                  goto LABEL_95;
                timingArrayEntriesNeededOut[0] = 0;
                v28 = *(void (**)(uint64_t, CMItemCount *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (v28)
                {
                  v28(v26, timingArrayEntriesNeededOut);
                  v28 = (void (*)(uint64_t, CMItemCount *))timingArrayEntriesNeededOut[0];
                }
                v44 = v28;
                v27 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
                if ((_DWORD)v27)
                  goto LABEL_95;
                v43 = 0;
                v29 = *(void (**)(uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (v29)
                {
                  v29(v26, &v43);
                  LODWORD(v29) = v43;
                }
                v42 = (int)v29;
                v27 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
                if ((_DWORD)v27 || (v27 = FigAtomWriterEndAtom(), (_DWORD)v27))
                {
LABEL_95:
                  v16 = v27;
                  goto LABEL_78;
                }
              }
              v30 = CMCopyDictionaryOfAttachments(v13, a3, 1u);
              if (v30
                && ((memset(&v41, 0, 56), v31 = FigAtomWriterInitWithParent(), (_DWORD)v31)
                 || (v31 = FigAtomWriterBeginAtom(), (_DWORD)v31)
                 || (v31 = vtParavirtualizationAtomWriterAppendCFDictionary(v30, 0), (_DWORD)v31)
                 || (v31 = FigAtomWriterEndAtom(), (_DWORD)v31)))
              {
                v16 = v31;
                v32 = 0;
              }
              else
              {
                v32 = CMCopyDictionaryOfAttachments(v13, a3, 0);
                if (v32)
                {
                  memset(&v41, 0, 56);
                  v33 = FigAtomWriterInitWithParent();
                  if ((_DWORD)v33)
                    goto LABEL_93;
                  v33 = FigAtomWriterBeginAtom();
                  if ((_DWORD)v33)
                    goto LABEL_93;
                  v33 = vtParavirtualizationAtomWriterAppendCFDictionary(v32, 0);
                  if ((_DWORD)v33)
                    goto LABEL_93;
                  v33 = FigAtomWriterEndAtom();
                  if ((_DWORD)v33)
                    goto LABEL_93;
                }
                SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
                if (SampleAttachmentsArray
                  && ((v35 = SampleAttachmentsArray,
                       memset(&v41, 0, 56),
                       v33 = FigAtomWriterInitWithParent(),
                       (_DWORD)v33)
                   || (v33 = FigAtomWriterBeginAtom(), (_DWORD)v33)
                   || (v33 = (uint64_t)vtParavirtualizationAtomWriterAppendCFArray(v35), (_DWORD)v33)
                   || (v33 = FigAtomWriterEndAtom(), (_DWORD)v33)))
                {
LABEL_93:
                  v16 = v33;
                  if (!v30)
                  {
LABEL_76:
                    if (v32)
                      CFRelease(v32);
                    goto LABEL_78;
                  }
                }
                else
                {
                  v36 = FigAtomWriterEndAtom();
                  v16 = v36;
                  if (a5 && !(_DWORD)v36)
                  {
                    *a5 = blockBufferOut;
                    blockBufferOut = 0;
                  }
                  if (!v30)
                    goto LABEL_76;
                }
              }
              CFRelease(v30);
              goto LABEL_76;
            }
          }
        }
LABEL_91:
        v16 = appended;
        goto LABEL_92;
      }
      v44 = 0;
      v41.duration.value = 0;
      DataLength = CMBlockBufferGetDataLength(DataBuffer);
      timingArrayEntriesNeededOut[0] = 0;
      if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, DataLength))
      {
        value = DataBuffer;
      }
      else
      {
        Contiguous = CMBlockBufferCreateContiguous(v13, DataBuffer, v13, 0, 0, DataLength, 1u, (CMBlockBufferRef *)&v41);
        if ((_DWORD)Contiguous)
          goto LABEL_34;
        value = (OpaqueCMBlockBuffer *)v41.duration.value;
      }
      Contiguous = CMBlockBufferGetDataPointer(value, 0, 0, 0, (char **)timingArrayEntriesNeededOut);
      if (!(_DWORD)Contiguous)
        Contiguous = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
LABEL_34:
      v16 = Contiguous;
      if (v41.duration.value)
        CFRelease((CFTypeRef)v41.duration.value);
      if ((_DWORD)v16)
        goto LABEL_92;
      appended = vtParavirtualizationAtomWriterAppendNumSamples(a3);
      if (!(_DWORD)appended)
      {
        v22 = (CMSampleTimingInfo *)&v44;
        goto LABEL_39;
      }
      goto LABEL_91;
    }
    v16 = SampleTimingInfoArray;
    if ((_DWORD)SampleTimingInfoArray)
    {
      v18 = 0;
      goto LABEL_99;
    }
    if (timingArrayEntriesNeededOut[0] == 1)
    {
      v17 = CMSampleBufferGetSampleTimingInfoArray(a3, 1, &v41, timingArrayEntriesNeededOut);
      v18 = 0;
      if ((_DWORD)v17)
      {
LABEL_16:
        v16 = v17;
LABEL_99:
        free(v18);
        goto LABEL_92;
      }
    }
    else if (timingArrayEntriesNeededOut[0] < 2)
    {
      v18 = 0;
    }
    else
    {
      if (timingArrayEntriesNeededOut[0] > 0x38E38E38E38E38EuLL
        || (v19 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut[0], 0x5CC9CBA6uLL)) == 0)
      {
        v16 = FigSignalErrorAt();
        v18 = 0;
        goto LABEL_24;
      }
      v18 = v19;
      v17 = CMSampleBufferGetSampleTimingInfoArray(a3, timingArrayEntriesNeededOut[0], v19, timingArrayEntriesNeededOut);
      if ((_DWORD)v17)
        goto LABEL_16;
    }
    v16 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
LABEL_24:
    free(v18);
    if ((_DWORD)v16)
    {
LABEL_92:
      v24 = 0;
LABEL_78:
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      if (!a4 || (!(_DWORD)v16 ? (v37 = v24 == 0) : (v37 = 1), v37))
      {
        if (v24)
          CFRelease(v24);
      }
      else
      {
        if (*a4)
          CFRelease(*a4);
        v16 = 0;
        *a4 = v24;
      }
      return v16;
    }
    goto LABEL_25;
  }
  return v10;
}

CFArrayRef vtParavirtualizationInitializeIndexedKeys()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  const __CFAllocator *v28;
  const void *v29;
  CFArrayRef result;
  void *values[71];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  uint64_t v72;
  const __CFString *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const __CFString *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const __CFString *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const __CFString *v140;
  const __CFString *v141;
  const __CFString *v142;
  uint64_t v143;
  uint64_t v144;
  const __CFString *v145;
  const __CFString *v146;
  const __CFString *v147;
  const __CFString *v148;
  const __CFString *v149;
  const __CFString *v150;
  const __CFString *v151;
  const __CFString *v152;
  uint64_t v153;
  const __CFString *v154;
  const __CFString *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const __CFString *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const __CFString *v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CA2628];
  values[0] = *(void **)MEMORY[0x1E0CA2620];
  values[1] = v0;
  v1 = (void *)*MEMORY[0x1E0CA2618];
  values[2] = *(void **)MEMORY[0x1E0CA2610];
  values[3] = v1;
  v2 = (void *)*MEMORY[0x1E0CA25E0];
  values[4] = *(void **)MEMORY[0x1E0CA25C8];
  values[5] = v2;
  v3 = (void *)*MEMORY[0x1E0CA25D8];
  values[6] = *(void **)MEMORY[0x1E0CA25D0];
  values[7] = v3;
  v4 = (void *)*MEMORY[0x1E0CA25B8];
  values[8] = *(void **)MEMORY[0x1E0CA25B0];
  values[9] = v4;
  v5 = (void *)*MEMORY[0x1E0CA2658];
  values[10] = *(void **)MEMORY[0x1E0CA26D8];
  values[11] = v5;
  v6 = (void *)*MEMORY[0x1E0CA26E0];
  values[12] = *(void **)MEMORY[0x1E0CA26C8];
  values[13] = v6;
  v7 = (void *)*MEMORY[0x1E0CA2720];
  values[14] = *(void **)MEMORY[0x1E0CA2728];
  values[15] = v7;
  v8 = (void *)*MEMORY[0x1E0CA26E8];
  values[16] = *(void **)MEMORY[0x1E0CA2708];
  values[17] = v8;
  v9 = (void *)*MEMORY[0x1E0CA2678];
  values[18] = *(void **)MEMORY[0x1E0CA2698];
  values[19] = v9;
  v10 = (void *)*MEMORY[0x1E0CA2648];
  values[20] = *(void **)MEMORY[0x1E0CA26C0];
  values[21] = v10;
  v11 = (void *)*MEMORY[0x1E0CA26F8];
  values[22] = *(void **)MEMORY[0x1E0CA2690];
  values[23] = v11;
  v12 = (void *)*MEMORY[0x1E0CA26B0];
  values[24] = *(void **)MEMORY[0x1E0CA26F0];
  values[25] = v12;
  v13 = (void *)*MEMORY[0x1E0CA4E30];
  values[26] = *(void **)MEMORY[0x1E0CA4E78];
  values[27] = v13;
  v14 = (void *)*MEMORY[0x1E0CA4E90];
  values[28] = *(void **)MEMORY[0x1E0CA4E98];
  values[29] = v14;
  v15 = (void *)*MEMORY[0x1E0CA2718];
  values[30] = *(void **)MEMORY[0x1E0CA4E40];
  values[31] = v15;
  v16 = (void *)*MEMORY[0x1E0CA2730];
  values[32] = *(void **)MEMORY[0x1E0CA2750];
  values[33] = v16;
  v17 = (void *)*MEMORY[0x1E0CA2680];
  values[34] = *(void **)MEMORY[0x1E0CA2670];
  values[35] = v17;
  values[36] = *(void **)MEMORY[0x1E0CA2640];
  values[37] = CFSTR("ReferenceWasRefreshed");
  values[38] = CFSTR("EncoderRetryCount");
  values[39] = CFSTR("RequireAcknowledgementToken");
  v18 = (void *)*MEMORY[0x1E0CA2E58];
  values[40] = *(void **)MEMORY[0x1E0CA2E60];
  values[41] = v18;
  v19 = (void *)*MEMORY[0x1E0CA2E08];
  values[42] = *(void **)MEMORY[0x1E0CA2E00];
  values[43] = v19;
  values[44] = CFSTR("X");
  values[45] = CFSTR("Y");
  values[46] = CFSTR("Width");
  values[47] = CFSTR("Height");
  v20 = (void *)*MEMORY[0x1E0CA2240];
  values[48] = *(void **)MEMORY[0x1E0CA2228];
  values[49] = v20;
  v21 = (void *)*MEMORY[0x1E0CA2270];
  values[50] = *(void **)MEMORY[0x1E0CA2278];
  values[51] = v21;
  v22 = (void *)*MEMORY[0x1E0CA21B0];
  values[52] = *(void **)MEMORY[0x1E0CA21C8];
  values[53] = v22;
  v23 = (void *)*MEMORY[0x1E0CA8D60];
  values[54] = *(void **)MEMORY[0x1E0CA8D50];
  values[55] = v23;
  v24 = (void *)*MEMORY[0x1E0CA8D48];
  values[56] = *(void **)MEMORY[0x1E0CA8D40];
  values[57] = v24;
  v25 = (void *)*MEMORY[0x1E0CA22C8];
  values[58] = *(void **)MEMORY[0x1E0CA8D58];
  values[59] = v25;
  v26 = (void *)*MEMORY[0x1E0CA22E8];
  values[60] = *(void **)MEMORY[0x1E0CA22D8];
  values[61] = v26;
  v27 = (void *)*MEMORY[0x1E0CA8DD0];
  values[62] = *(void **)MEMORY[0x1E0CA8DC8];
  values[63] = v27;
  values[64] = *(void **)MEMORY[0x1E0CA8DF0];
  values[65] = *(void **)MEMORY[0x1E0CA8DE8];
  values[66] = *(void **)MEMORY[0x1E0CA8DD8];
  values[67] = *(void **)MEMORY[0x1E0CA8DE0];
  values[68] = *(void **)MEMORY[0x1E0CA8E68];
  values[69] = *(void **)MEMORY[0x1E0CA8E60];
  values[70] = *(void **)MEMORY[0x1E0CA8E70];
  v32 = *MEMORY[0x1E0CA8D68];
  v33 = *MEMORY[0x1E0CA8D88];
  v34 = *MEMORY[0x1E0CA8D78];
  v35 = *MEMORY[0x1E0CA8DA0];
  v36 = *MEMORY[0x1E0CA8E98];
  v37 = *MEMORY[0x1E0CA8EB0];
  v38 = *MEMORY[0x1E0CA8EC0];
  v39 = *MEMORY[0x1E0CA8ED8];
  v40 = *MEMORY[0x1E0CA8DF8];
  v41 = *MEMORY[0x1E0CA8EE8];
  v42 = *MEMORY[0x1E0CA8F18];
  v43 = *MEMORY[0x1E0CA8F10];
  v44 = *MEMORY[0x1E0CA8F30];
  v45 = *MEMORY[0x1E0CA21D0];
  v46 = *MEMORY[0x1E0CA2210];
  v47 = *MEMORY[0x1E0CA2168];
  v48 = *MEMORY[0x1E0CA8CE8];
  v49 = *MEMORY[0x1E0CA8CE0];
  v50 = *MEMORY[0x1E0CA8D10];
  v51 = *MEMORY[0x1E0CA8D00];
  v52 = *MEMORY[0x1E0CA8D20];
  v53 = *MEMORY[0x1E0CA8D18];
  v54 = *MEMORY[0x1E0CA8CF8];
  v55 = *MEMORY[0x1E0CA8CF0];
  v56 = *MEMORY[0x1E0CA8D08];
  v57 = *MEMORY[0x1E0CA2258];
  v58 = *MEMORY[0x1E0CA2248];
  v59 = *MEMORY[0x1E0CA2280];
  v60 = *MEMORY[0x1E0CA2238];
  v61 = *MEMORY[0x1E0CA2268];
  v62 = *MEMORY[0x1E0CA4A10];
  v63 = *MEMORY[0x1E0CA4A18];
  v64 = *MEMORY[0x1E0CA4A08];
  v65 = *MEMORY[0x1E0CA4A20];
  v66 = CFSTR("avcC");
  v67 = CFSTR("d263");
  v68 = CFSTR("uuid");
  v69 = CFSTR("UUID");
  v70 = CFSTR("sinf");
  v71 = CFSTR("pinf");
  v72 = *MEMORY[0x1E0CA25C0];
  v73 = CFSTR("hvcC");
  v74 = *MEMORY[0x1E0CA2138];
  v75 = *MEMORY[0x1E0CA24F8];
  v76 = *MEMORY[0x1E0CA2510];
  v77 = *MEMORY[0x1E0CA24F0];
  v78 = *MEMORY[0x1E0CA24E8];
  v79 = *MEMORY[0x1E0CA24E0];
  v80 = *MEMORY[0x1E0CA24D8];
  v81 = *MEMORY[0x1E0CA49F0];
  v82 = *MEMORY[0x1E0CA49E8];
  v83 = *MEMORY[0x1E0CA4A00];
  v84 = *MEMORY[0x1E0CA2508];
  v85 = *MEMORY[0x1E0CA2540];
  v86 = *MEMORY[0x1E0CA2500];
  v87 = *MEMORY[0x1E0CA2890];
  v88 = *MEMORY[0x1E0CA2870];
  v89 = *MEMORY[0x1E0CA2868];
  v90 = *MEMORY[0x1E0CA2860];
  v91 = *MEMORY[0x1E0CA2858];
  v92 = *MEMORY[0x1E0CA2850];
  v93 = *MEMORY[0x1E0CA2888];
  v94 = *MEMORY[0x1E0CA28D8];
  v95 = *MEMORY[0x1E0CA28C8];
  v96 = *MEMORY[0x1E0CA28C0];
  v97 = *MEMORY[0x1E0CA28D0];
  v98 = *MEMORY[0x1E0CA2880];
  v99 = *MEMORY[0x1E0CA2920];
  v100 = *MEMORY[0x1E0CA28F8];
  v101 = *MEMORY[0x1E0CA2900];
  v102 = *MEMORY[0x1E0CA2910];
  v103 = *MEMORY[0x1E0CA2908];
  v104 = *MEMORY[0x1E0CA28A0];
  v105 = *MEMORY[0x1E0CA28B8];
  v106 = *MEMORY[0x1E0CA28F0];
  v107 = *MEMORY[0x1E0CA2898];
  v108 = *MEMORY[0x1E0CA28B0];
  v109 = *MEMORY[0x1E0CA2918];
  v110 = *MEMORY[0x1E0CA28E8];
  v111 = *MEMORY[0x1E0CA2878];
  v112 = v104;
  v113 = v105;
  v114 = *MEMORY[0x1E0CA2DE8];
  v115 = *MEMORY[0x1E0CA2DF8];
  v116 = *MEMORY[0x1E0CA2DF0];
  v117 = *MEMORY[0x1E0CA2328];
  v118 = *MEMORY[0x1E0CA2340];
  v119 = *MEMORY[0x1E0CA2338];
  v120 = *MEMORY[0x1E0CA2318];
  v121 = *MEMORY[0x1E0CA2350];
  v122 = *MEMORY[0x1E0CA8CA8];
  v123 = *MEMORY[0x1E0CA8CD8];
  v124 = *MEMORY[0x1E0CA8E40];
  v125 = v32;
  v126 = v36;
  v127 = v41;
  v128 = CFSTR("ColorInfoGuessedBy");
  v129 = *MEMORY[0x1E0CA8C58];
  v130 = *MEMORY[0x1E0CA8C78];
  v131 = *MEMORY[0x1E0CA8C70];
  v132 = CFSTR("SceneReferredExtendedLinear");
  v133 = *MEMORY[0x1E0CA4E80];
  v134 = *MEMORY[0x1E0CA2638];
  v135 = *MEMORY[0x1E0CA2660];
  v136 = *MEMORY[0x1E0CA2668];
  v137 = *MEMORY[0x1E0CA2710];
  v138 = *MEMORY[0x1E0CA25F8];
  v139 = *MEMORY[0x1E0CA2150];
  v140 = CFSTR("auxi");
  v141 = CFSTR("ccst");
  v142 = CFSTR("slmC");
  v143 = *MEMORY[0x1E0CA26B8];
  v144 = *MEMORY[0x1E0CA2688];
  v145 = CFSTR("FECGroupID");
  v146 = CFSTR("FECLastFrameInGroup");
  v147 = CFSTR("FECLevelOfProtection");
  v148 = CFSTR("QualityMetrics");
  v149 = CFSTR("EncodedFrameAvgQP");
  v150 = CFSTR("PadByteCount");
  v151 = CFSTR("VRAWidth");
  v152 = CFSTR("VRAHeight");
  v153 = *MEMORY[0x1E0CA8D28];
  v154 = CFSTR("dvvC");
  v155 = CFSTR("disc");
  v156 = *MEMORY[0x1E0CA23B0];
  v157 = *MEMORY[0x1E0CA2390];
  v158 = *MEMORY[0x1E0CA23A0];
  v159 = *MEMORY[0x1E0CA23A8];
  v160 = *MEMORY[0x1E0CA2380];
  v161 = *MEMORY[0x1E0CA2388];
  v162 = *MEMORY[0x1E0CA2398];
  v163 = *MEMORY[0x1E0CA2600];
  v164 = *MEMORY[0x1E0CA2608];
  v165 = *MEMORY[0x1E0CA25F0];
  v166 = v138;
  v167 = *MEMORY[0x1E0CA25A8];
  v168 = CFSTR("av1C");
  v169 = *MEMORY[0x1E0CA8E58];
  v170 = *MEMORY[0x1E0CA8DA8];
  v171 = *MEMORY[0x1E0CA25E8];
  v172 = CFSTR("vpcC");
  v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v29 = 0;
  sVTParavirtualizationStringToKeyIndexDict = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 212, MEMORY[0x1E0C9B390], 0);
  do
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)sVTParavirtualizationStringToKeyIndexDict, values[(_QWORD)v29], v29);
    v29 = (char *)v29 + 1;
  }
  while (v29 != (const void *)212);
  result = CFArrayCreate(v28, (const void **)values, 212, MEMORY[0x1E0C9B378]);
  sVTParavirtualizationArrayOfIndexedKeys = (uint64_t)result;
  return result;
}

uint64_t VTParavirtualizationCreateSampleBufferFromSerializedAtomDataBlockBuffer(int a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;
  uint64_t v13;
  CMSampleBufferRef sbuf;
  uint64_t v15;
  _DWORD numSamples[5];
  uint64_t v17;
  size_t size;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  CMFormatDescriptionRef desc;

  if (!CMBlockBufferIsRangeContiguous(theBuffer, 0, 0))
    return 4294954516;
  blockBufferOut = 0;
  desc = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0;
  size = 0;
  *(_OWORD *)&numSamples[1] = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  numSamples[0] = 0;
  sbuf = 0;
  v15 = 0;
  cf = 0;
  v13 = 0;
  if (a6 && a4)
  {
    v8 = MEMORY[0x1940281CC](&sVTParavirtualizationInitIndexedKeysOnce, vtParavirtualizationInitializeIndexedKeys);
    if (!(_DWORD)v8)
    {
      v8 = FigAtomStreamInitWithBBuf();
      if (!(_DWORD)v8)
      {
        FigAtomStreamGetCurrentAtomTypeAndDataLength();
        v8 = FigSignalErrorAt();
      }
    }
    v9 = v8;
  }
  else
  {
    FigSignalErrorAt();
    v9 = 0;
  }
  free(0);
  free(0);
  free(0);
  return v9;
}

CMItemCount vtParavirtualizationAtomWriterAppendNumSamples(opaqueCMSampleBuffer *a1)
{
  CMItemCount result;

  result = CMSampleBufferGetNumSamples(a1);
  if ((_DWORD)result)
    return vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendSampleSizeArray(opaqueCMSampleBuffer *a1, uint64_t a2, CMItemCount *a3)
{
  uint64_t SampleSizeArray;
  uint64_t appended;
  CMItemCount v7;
  size_t *v8;
  uint64_t v9;
  size_t *v10;
  void *v11;
  size_t *v12;
  uint64_t v13;
  size_t v14;
  malloc_type_id_t v15;
  void *v16;
  CMItemCount v17;
  uint64_t v18;
  size_t v20;
  CMItemCount sizeArrayEntriesNeededOut;

  v20 = 0;
  sizeArrayEntriesNeededOut = 0;
  SampleSizeArray = CMSampleBufferGetSampleSizeArray(a1, 0, 0, &sizeArrayEntriesNeededOut);
  if ((_DWORD)SampleSizeArray == -12735)
  {
    appended = 0;
    goto LABEL_11;
  }
  appended = SampleSizeArray;
  v7 = sizeArrayEntriesNeededOut;
  if (a3)
    *a3 = sizeArrayEntriesNeededOut;
  if (v7 != 1)
  {
    if (v7 < 2)
    {
      if (!(_DWORD)SampleSizeArray)
      {
        v10 = 0;
        v11 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      if (!((unint64_t)v7 >> 61))
      {
        v12 = (size_t *)malloc_type_malloc(8 * v7, 0x5CC9CBA6uLL);
        if (v12)
        {
          v10 = v12;
          v13 = CMSampleBufferGetSampleSizeArray(a1, sizeArrayEntriesNeededOut, v12, &sizeArrayEntriesNeededOut);
          if ((_DWORD)v13)
          {
LABEL_18:
            appended = v13;
            goto LABEL_19;
          }
          v8 = v10;
          goto LABEL_15;
        }
      }
      appended = FigSignalErrorAt();
    }
LABEL_11:
    v10 = 0;
LABEL_19:
    v11 = 0;
    goto LABEL_29;
  }
  v8 = &v20;
  v9 = CMSampleBufferGetSampleSizeArray(a1, 1, &v20, &sizeArrayEntriesNeededOut);
  v10 = 0;
  if (!(_DWORD)v9)
  {
LABEL_15:
    if (sizeArrayEntriesNeededOut)
    {
      if ((unint64_t)sizeArrayEntriesNeededOut >> 62)
      {
LABEL_17:
        v13 = FigSignalErrorAt();
        goto LABEL_18;
      }
      v14 = 4 * sizeArrayEntriesNeededOut;
      v15 = 1556728742;
    }
    else
    {
      v14 = 0;
      v15 = 1270757447;
    }
    v16 = malloc_type_malloc(v14, v15);
    v11 = v16;
    if (!v16)
      goto LABEL_17;
    v17 = sizeArrayEntriesNeededOut;
    if (sizeArrayEntriesNeededOut >= 1)
    {
      v18 = 0;
      do
      {
        *((_DWORD *)v16 + v18) = v8[v18];
        ++v18;
      }
      while (v17 != v18);
    }
LABEL_28:
    appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
    goto LABEL_29;
  }
  appended = v9;
  v11 = 0;
LABEL_29:
  free(v10);
  free(v11);
  return appended;
}

uint64_t vtParavirtualizationAtomWriterAppendCMFormatDescription(const opaqueCMFormatDescription *a1)
{
  uint64_t appended;
  uint64_t v3;
  CFDictionaryRef Extensions;
  const __CFDictionary *v5;
  uint64_t v6;
  CMMediaType MediaType;

  appended = FigAtomWriterInitWithParent();
  if ((_DWORD)appended)
    return appended;
  appended = FigAtomWriterBeginAtom();
  if ((_DWORD)appended)
    return appended;
  MediaType = CMFormatDescriptionGetMediaType(a1);
  appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
  if ((_DWORD)appended)
    return appended;
  if (MediaType == 1635088502 || MediaType == 1986618469 || MediaType == 1885954932)
  {
    CMVideoFormatDescriptionGetDimensions(a1);
    CMFormatDescriptionGetMediaSubType(a1);
    appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
    if ((_DWORD)appended)
      return appended;
    v3 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v3 = FigSignalErrorAt();
  }
  Extensions = CMFormatDescriptionGetExtensions(a1);
  if (Extensions)
  {
    v5 = Extensions;
    v6 = FigAtomWriterInitWithParent();
    if (!(_DWORD)v6)
    {
      v6 = FigAtomWriterBeginAtom();
      if (!(_DWORD)v6)
      {
        v6 = vtParavirtualizationAtomWriterAppendCFDictionary(v5, 0);
        if (!(_DWORD)v6)
          v6 = FigAtomWriterEndAtom();
      }
    }
    v3 = v6;
  }
  if (!(_DWORD)v3)
    return FigAtomWriterEndAtom();
  return v3;
}

uint64_t vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock()
{
  uint64_t result;

  result = FigAtomWriterInitWithParent();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
        return FigAtomWriterEndAtom();
    }
  }
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendCFDictionary(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t Count;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  CFTypeID v13;
  void *v14;
  uint64_t appended;
  void *value;
  _OWORD v18[3];
  uint64_t v19;
  __int16 v20;

  Count = FigCFDictionaryGetCount();
  v5 = Count;
  if ((_DWORD)a2 || Count >= 1)
  {
    v7 = FigAtomWriterInitWithParent();
    if (!(_DWORD)v7)
    {
      v7 = FigAtomWriterBeginAtom();
      if (!(_DWORD)v7)
      {
        if (v5 < 1)
        {
          v8 = 0;
          v9 = 0;
LABEL_26:
          appended = FigAtomWriterEndAtom();
LABEL_27:
          v6 = appended;
          goto LABEL_28;
        }
        if (!((unint64_t)v5 >> 61))
        {
          v10 = (const void **)malloc_type_malloc(8 * v5, 0x5CC9CBA6uLL);
          if (v10)
          {
            v8 = v10;
            v9 = (const void **)malloc_type_malloc(8 * v5, 0x5CC9CBA6uLL);
            if (v9)
            {
              CFDictionaryGetKeysAndValues(a1, v8, v9);
              v11 = 0;
              while (1)
              {
                v12 = v8[v11];
                if (!v12)
                  break;
                v13 = CFGetTypeID(v8[v11]);
                if (v13 != CFStringGetTypeID())
                  break;
                v14 = (void *)v9[v11];
                v19 = 0;
                memset(v18, 0, sizeof(v18));
                appended = FigAtomWriterInitWithParent();
                if ((_DWORD)appended)
                  goto LABEL_27;
                appended = FigAtomWriterBeginAtom();
                if ((_DWORD)appended)
                  goto LABEL_27;
                value = 0;
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)sVTParavirtualizationStringToKeyIndexDict, v12, (const void **)&value))
                {
                  v20 = (__int16)value;
                  appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
                  if ((_DWORD)appended)
                    goto LABEL_27;
                }
                else
                {
                  appended = vtParavirtualizationAtomWriterAppendCFPropertyList();
                  if ((_DWORD)appended)
                    goto LABEL_27;
                }
                appended = vtParavirtualizationAtomWriterAppendCFType(v14, a2, (uint64_t)v18);
                if ((_DWORD)appended)
                  goto LABEL_27;
                appended = FigAtomWriterEndAtom();
                if ((_DWORD)appended)
                  goto LABEL_27;
                if (v5 == ++v11)
                  goto LABEL_26;
              }
            }
            appended = FigSignalErrorAt();
            goto LABEL_27;
          }
        }
        v7 = FigSignalErrorAt();
      }
    }
    v6 = v7;
    goto LABEL_10;
  }
  v6 = 0;
LABEL_10:
  v8 = 0;
  v9 = 0;
LABEL_28:
  free(v8);
  free(v9);
  return v6;
}

uint64_t vtParavirtualizationAtomWriterAppendCFPropertyList()
{
  uint64_t result;

  result = FigAtomWriterInitWithParent();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigCreateCFDataFromCFPropertyList();
      if (!(_DWORD)result)
      {
        CFDataGetBytePtr(0);
        CFDataGetLength(0);
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
          return FigAtomWriterEndAtom();
      }
    }
  }
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendCFType(void *a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6;

  v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
    return (uint64_t)vtParavirtualizationAtomWriterAppendCFArray((const __CFArray *)a1);
  if (v6 == CFDictionaryGetTypeID())
    return vtParavirtualizationAtomWriterAppendCFDictionary(a1, a2, a3);
  if (v6 == CFNumberGetTypeID()
    || v6 == CFBooleanGetTypeID()
    || v6 == CFStringGetTypeID()
    || v6 == CFDataGetTypeID()
    || v6 == CFDateGetTypeID())
  {
    return vtParavirtualizationAtomWriterAppendCFPropertyList();
  }
  if (v6 == CGColorSpaceGetTypeID())
    return (uint64_t)vtParavirtualizationAtomWriterAppendCGColorSpace((CGColorSpace *)a1);
  if (v6 == CFURLGetTypeID())
    return vtParavirtualizationAtomWriterAppendCFURL((const __CFURL *)a1);
  if (v6 == CMFormatDescriptionGetTypeID())
    return vtParavirtualizationAtomWriterAppendCMFormatDescription(a1, a3);
  if (v6 == CFNullGetTypeID())
    return vtParavirtualizationAtomWriterAppendNULL();
  return 4294954516;
}

const __CFArray *vtParavirtualizationAtomWriterAppendCFArray(const __CFArray *result)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;
  _OWORD v6[3];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  if (result)
  {
    v1 = result;
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v3 = Count;
      result = (const __CFArray *)FigAtomWriterInitWithParent();
      if (!(_DWORD)result)
      {
        result = (const __CFArray *)FigAtomWriterBeginAtom();
        if (!(_DWORD)result)
        {
          v4 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
            result = (const __CFArray *)vtParavirtualizationAtomWriterAppendCFType(ValueAtIndex, 1, v6);
            if ((_DWORD)result)
              break;
            if (v3 == ++v4)
              return (const __CFArray *)FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

CFPropertyListRef vtParavirtualizationAtomWriterAppendCGColorSpace(CGColorSpace *a1)
{
  CFPropertyListRef result;
  const void *v2;
  uint64_t appended;

  result = CGColorSpaceCopyPropertyList(a1);
  if (result)
  {
    v2 = result;
    appended = vtParavirtualizationAtomWriterAppendCFPropertyList();
    CFRelease(v2);
    return (CFPropertyListRef)appended;
  }
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendCFURL(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFURL *v2;
  uint64_t appended;
  uint64_t v4;

  v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1)
    return FigSignalErrorAt();
  v2 = v1;
  if (CFURLGetString(v1))
    appended = vtParavirtualizationAtomWriterAppendCFPropertyList();
  else
    appended = FigSignalErrorAt();
  v4 = appended;
  CFRelease(v2);
  return v4;
}

uint64_t vtParavirtualizationAtomWriterAppendNULL()
{
  uint64_t result;

  result = FigAtomWriterInitWithParent();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
      return FigAtomWriterEndAtom();
  }
  return result;
}

uint64_t vtParavirtualizationAtomDataReaderCopyCMFormatDescription()
{
  uint64_t v0;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t Atom;
  uint64_t v3;

  v0 = FigAtomStreamInitWithParent();
  if ((_DWORD)v0)
    return v0;
  while (1)
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      break;
    Atom = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)Atom == -12890)
      return FigSignalErrorAt();
    v3 = Atom;
    if ((_DWORD)Atom)
      return v3;
  }
  return CurrentAtomTypeAndDataLength;
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFDictionary(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v8;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (!a2)
    goto LABEL_8;
  if (Mutable)
  {
    v5 = FigAtomStreamInitWithParent();
    if ((_DWORD)v5)
    {
      v8 = v5;
LABEL_6:
      CFRelease(v4);
      return v8;
    }
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
    {
LABEL_9:
      v8 = CurrentAtomTypeAndDataLength;
      if (!v4)
        return v8;
      goto LABEL_6;
    }
LABEL_8:
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFPropertyList(uint64_t a1, _QWORD *a2)
{
  uint64_t CurrentAtomTypeAndDataLength;
  void *v4;
  uint64_t BBuf;
  uint64_t CFPropertyListFromData;

  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
  {
    CFPropertyListFromData = CurrentAtomTypeAndDataLength;
    v4 = 0;
    goto LABEL_8;
  }
  v4 = malloc_type_malloc(0, 0x4E769C6uLL);
  if (!v4)
  {
    BBuf = FigSignalErrorAt();
LABEL_11:
    CFPropertyListFromData = BBuf;
    goto LABEL_8;
  }
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)BBuf)
    goto LABEL_11;
  BBuf = CMBlockBufferCopyDataBytes(0, 0, 0, v4);
  if ((_DWORD)BBuf)
    goto LABEL_11;
  CFPropertyListFromData = FigCreateCFPropertyListFromData();
  if (a2 && !(_DWORD)CFPropertyListFromData)
    *a2 = 0;
LABEL_8:
  free(v4);
  return CFPropertyListFromData;
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFType(uint64_t a1, int a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeID v8;
  CGColorSpaceRef v9;
  CFTypeRef cf;

  if (a2 > 1685349749)
  {
    if (a2 <= 1853189227)
    {
      if (a2 != 1685349750)
      {
        if (a2 == 1717859171)
          return vtParavirtualizationAtomDataReaderCopyCMFormatDescription(a1, a3);
        v4 = 1852662390;
        goto LABEL_22;
      }
      return vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, a3);
    }
    if (a2 == 1853189228)
    {
      v6 = 0;
      *a3 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9B0D0]);
      return v6;
    }
    if (a2 == 1937011307)
      return vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, a3);
    if (a2 == 1970433142 && a3)
    {
      cf = 0;
      v6 = vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, &cf);
      v7 = cf;
      if (!(_DWORD)v6 && cf)
      {
        v8 = CFGetTypeID(cf);
        if (v8 == CFStringGetTypeID())
          *a3 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)cf, 0);
        v7 = cf;
      }
LABEL_34:
      if (v7)
        CFRelease(v7);
      return v6;
    }
    return FigSignalErrorAt();
  }
  if (a2 > 1668051570)
  {
    switch(a2)
    {
      case 1668051571:
        if (a3)
        {
          cf = 0;
          v6 = vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, &cf);
          v7 = cf;
          if (!(_DWORD)v6)
          {
            if (cf)
            {
              v9 = CGColorSpaceCreateWithPropertyList(cf);
              v7 = cf;
            }
            else
            {
              v9 = 0;
            }
            *a3 = v9;
          }
          goto LABEL_34;
        }
        break;
      case 1684108406:
        return vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, a3);
      case 1684628340:
        return vtParavirtualizationAtomDataReaderCopyCFDictionary(a1, a3);
    }
    return FigSignalErrorAt();
  }
  if (a2 != 1634886009)
  {
    v4 = 1651862646;
LABEL_22:
    if (a2 == v4)
      return vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, a3);
    return FigSignalErrorAt();
  }
  return vtParavirtualizationAtomDataReaderCopyCFArray(a1, a3);
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFArray(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t Atom;
  uint64_t v6;

  if (!a2)
    return FigSignalErrorAt();
  v3 = FigAtomStreamInitWithParent();
  if ((_DWORD)v3)
    return v3;
  while (1)
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      break;
    Atom = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)Atom == -12890)
    {
      v6 = 0;
      *a2 = 0;
      return v6;
    }
    v6 = Atom;
    if ((_DWORD)Atom)
      return v6;
  }
  return CurrentAtomTypeAndDataLength;
}

uint64_t MediaToolboxLibrary()
{
  uint64_t v0;
  void *v2;

  if (!MediaToolboxLibraryCore_frameworkLibrary)
    MediaToolboxLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = MediaToolboxLibraryCore_frameworkLibrary;
  if (!MediaToolboxLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void vtParavirtualizationCopyEachEntry(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t VTPixelTransferNodeRotationCopyProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeRotationSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeRotationCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t VTPixelTransferAppendSoftwareRotationNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t CurrentDimensions;
  uint64_t PixelBufferPoolAttributes;
  CFTypeRef v11;
  uint64_t appended;
  CFTypeRef cf;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  cf = 0;
  CurrentDimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, (uint64_t)a6, 0, (uint64_t)&v15);
  if ((_DWORD)CurrentDimensions)
    return CurrentDimensions;
  PixelBufferPoolAttributes = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v16, (unint64_t)*((double *)&v16 + 1), (CFMutableDictionaryRef *)&cf);
  v11 = cf;
  if ((_DWORD)PixelBufferPoolAttributes)
  {
    appended = PixelBufferPoolAttributes;
    if (!cf)
      return appended;
    goto LABEL_4;
  }
  appended = VTPixelTransferChainAppendRotationNode(*a6, *(_QWORD *)(a3 + 8));
  v11 = cf;
  if (cf)
LABEL_4:
    CFRelease(v11);
  return appended;
}

uint64_t VTPixelTransferChainAppendRotationNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  if (a1 && a2)
  {
    VTPixelTransferNodeGetClassID();
    v2 = CMDerivedObjectCreate();
    FigSignalErrorAt();
  }
  return v2;
}

void VTPixelRotationSessionInvalidate(VTPixelRotationSessionRef session)
{
  if (session)
  {
    if (!*((_BYTE *)session + 16))
      *((_BYTE *)session + 16) = 1;
  }
}

CFTypeID VTPixelRotationSessionGetTypeID(void)
{
  MEMORY[0x1940281CC](&VTPixelRotationSessionGetTypeID_sRegisterVTPixelRotationSessionOnce, RegisterVTPixelRotationSession);
  return sVTPixelRotationSessionID;
}

void RegisterVTPixelRotationSession()
{
  sVTPixelRotationSessionID = _CFRuntimeRegisterClass();
  sVTPixelRotationSessionPropertyCallbacks = 0;
  *(_QWORD *)algn_1ECED9108 = VTPixelRotationSessionCopySupportedPropertyDictionary;
  qword_1ECED9110 = (uint64_t)VTPixelRotationSessionSetProperty;
  unk_1ECED9118 = VTPixelRotationSessionCopyProperty;
  qword_1ECED9120 = (uint64_t)VTPixelRotationSessionSetProperties;
  unk_1ECED9128 = VTPixelRotationSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTPixelRotationSessionPropertyCallbacks, (const void *)sVTPixelRotationSessionID);
}

uint64_t VTPixelRotationSessionCreateWithRotationAndFlip(uint64_t a1, int a2, char a3, char a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v11;
  uint64_t v12;

  FigKTraceInit();
  if (a2 > 179)
  {
    if (a2 != 180 && a2 != 270)
      return FigSignalErrorAt();
  }
  else if (a2 && a2 != 90)
  {
    return FigSignalErrorAt();
  }
  if (!a5)
    return FigSignalErrorAt();
  MEMORY[0x1940281CC](&VTPixelRotationSessionGetTypeID_sRegisterVTPixelRotationSessionOnce, RegisterVTPixelRotationSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v11 = Instance;
  MEMORY[0x1940281CC](&sReadDebugOverrideAllDefaultsOnce, ReadDebugOverrideAllDefaults);
  *(_QWORD *)(v11 + 40) = 0;
  *(_DWORD *)(v11 + 52) = a2;
  *(_BYTE *)(v11 + 56) = a3;
  *(_BYTE *)(v11 + 57) = a4;
  *(_BYTE *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 135) = globalEnableHardwareAcceleratedTransfer;
  *(_BYTE *)(v11 + 133) = globalEnableGPUAcceleratedTransfer;
  *(_BYTE *)(v11 + 134) = 0;
  *(_BYTE *)(v11 + 132) = globalEnableSoftwareTransfer;
  *(_WORD *)(v11 + 129) = 0;
  *(_BYTE *)(v11 + 208) = 0;
  *(_QWORD *)(v11 + 216) = 0;
  if (globalUsePixelTransferChain == 1)
    VTPixelTransferChainCreate(a1, (uint64_t *)(v11 + 40));
  *(_BYTE *)(v11 + 48) = globalUsePixelTransferGraph;
  *(_BYTE *)(v11 + 49) = globalAllowFallbacks;
  *(_QWORD *)(v11 + 152) = 0;
  *(_DWORD *)(v11 + 232) = 0;
  *(_QWORD *)(v11 + 144) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = VTCelesteRotationNodeCreate(v11 + 224);
  if ((_DWORD)v12)
    CFRelease((CFTypeRef)v11);
  else
    *a5 = v11;
  return v12;
}

void ReadDebugOverrideAllDefaults()
{
  globalEnableHardwareAcceleratedTransfer = 1;
  globalEnableGPUAcceleratedTransfer = 1;
  globalEnableSoftwareTransfer = 1;
  globalUsePixelTransferChain = 1;
  globalUsePixelTransferGraph = 1;
  globalAllowFallbacks = 1;
}

OSStatus VTPixelRotationSessionCreate(CFAllocatorRef allocator, VTPixelRotationSessionRef *pixelRotationSessionOut)
{
  return VTPixelRotationSessionCreateWithRotationAndFlip((uint64_t)allocator, 0, 0, 0, (uint64_t *)pixelRotationSessionOut);
}

uint64_t VTPixelRotationSessionCopySupportedPropertyDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  __CFString *v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  uint64_t v10;
  const void *v11;
  void *values;
  const __CFString *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __CFString *v19;
  void *keys;
  const __CFString *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  const __CFString *v27;
  const __CFString *v28;

  v28 = (const __CFString *)*MEMORY[0x1E0C80C00];
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v19 = 0;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  *a2 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  keys = CFSTR("PropertyType");
  v21 = CFSTR("ReadWriteStatus");
  values = CFSTR("Boolean");
  v13 = CFSTR("ReadWrite");
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v5)
    return FigSignalErrorAt();
  v6 = (__CFString *)v5;
  keys = CFSTR("PropertyType");
  v21 = CFSTR("ReadWriteStatus");
  values = CFSTR("Boolean");
  v13 = CFSTR("ReadOnly");
  v7 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v7)
  {
    v8 = v7;
    v21 = CFSTR("FlipVerticalOrientation");
    values = v6;
    v13 = v6;
    *(_QWORD *)&v22 = CFSTR("Rotation");
    *((_QWORD *)&v22 + 1) = CFSTR("ScalingSupported");
    *(_QWORD *)&v14 = v6;
    *((_QWORD *)&v14 + 1) = v7;
    *(_QWORD *)&v23 = CFSTR("NonIntegralSourceBoundingOriginSupported");
    *((_QWORD *)&v23 + 1) = CFSTR("ForceDisableVectorInstructions");
    *(_QWORD *)&v15 = v7;
    *((_QWORD *)&v15 + 1) = v6;
    *(_QWORD *)&v24 = CFSTR("ForceSingleThreaded");
    *((_QWORD *)&v24 + 1) = CFSTR("EnableSoftwareTransfer");
    *(_QWORD *)&v16 = v6;
    *((_QWORD *)&v16 + 1) = v6;
    *(_QWORD *)&v25 = CFSTR("AllowPixelTransferChain");
    *((_QWORD *)&v25 + 1) = CFSTR("AllowPixelTransferGraph");
    *(_QWORD *)&v17 = v6;
    *((_QWORD *)&v17 + 1) = v6;
    *(_QWORD *)&v26 = CFSTR("EnableGPUAcceleratedTransfer");
    *((_QWORD *)&v26 + 1) = CFSTR("SetGPUPriorityLow");
    *(_QWORD *)&v18 = v6;
    *((_QWORD *)&v18 + 1) = v6;
    v27 = CFSTR("EnableHardwareAcceleratedTransfer");
    v28 = CFSTR("Label");
    v19 = v6;
    keys = v6;
    v9 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)&values, 14, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v9)
    {
      v10 = 0;
      *a2 = v9;
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    CFRelease(v6);
    v11 = v8;
  }
  else
  {
    v10 = FigSignalErrorAt();
    v11 = v6;
  }
  CFRelease(v11);
  return v10;
}

uint64_t VTPixelRotationSessionSetProperty(uint64_t a1, const __CFString *a2, const __CFBoolean *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  CFTypeID TypeID;
  int v11;
  uint64_t v12;
  CFTypeID v14;
  int v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeID v20;
  const void *v21;
  CFTypeID v22;
  CFTypeID v23;
  CFTypeID v24;
  CFTypeID v26;
  int v27;
  CFTypeID v28;
  int v29;
  const __CFBoolean **v30;
  CFTypeID v31;
  int v32;
  const void **v33;
  const void *v35;
  CFTypeID v36;
  const void **v37;
  int Value;
  const void *v39;
  CFAllocatorRef v40;
  const __CFBoolean **v41;
  CFTypeID v43;
  int v44;
  const __CFBoolean **v45;
  CFTypeID v47;
  int v48;
  CFTypeID v50;
  int v51;
  const __CFBoolean **v52;
  CFTypeID v54;
  int v55;
  const void *v56;
  __CFDictionary *v57;
  const void *v58;
  __CFDictionary *v59;
  CFTypeID v60;
  const void *v61;
  const void *v62;
  __CFDictionary *v63;
  CFTypeID v64;
  const void *v65;
  const void *v66;
  __CFDictionary *v67;
  CFTypeID v68;
  const void *v69;
  CFTypeID v71;
  int v72;
  CFTypeID v73;
  const void *v74;
  uint64_t UInt64;
  CFTypeID v76;
  const __CFBoolean **v77;
  CFTypeID v78;
  int v79;
  CFTypeID v81;
  int v82;
  int v83;
  int IOSurfaceAcceleratorCapabilityFractionalDimensions;
  CFTypeID v85;
  CFTypeID v86;
  CFTypeID v87;
  const void *v88;
  __CFDictionary *v89;
  uint64_t v90;
  const void *v91;
  const void *v92;
  const __CFString *v93;
  const __CFBoolean *v94;
  CFTypeID v95;
  const void *v96;
  CFTypeRef v97[23];

  v97[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v97[0] = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (FigAtomicIncrement32() != 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    v8 = fig_log_call_emit_and_clean_up_after_send_and_compose();
    VTPixelTransferSessionThreadBearTrap(v8);
  }
  VTMetalTransferSessionCopySupportedPropertyDictionary(*(_QWORD *)(a1 + 136), v97);
  if (CFEqual(a2, CFSTR("FlipHorizontalOrientation")))
  {
    if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(a3))
    {
      v11 = *(unsigned __int8 *)(a1 + 56);
      if (v11 != CFBooleanGetValue(a3))
      {
        v12 = 0;
        *(_BYTE *)(a1 + 56) = CFBooleanGetValue(a3);
LABEL_53:
        *(_BYTE *)(a1 + 32) = 0;
        goto LABEL_303;
      }
      goto LABEL_22;
    }
    goto LABEL_301;
  }
  if (!CFEqual(a2, CFSTR("FlipVerticalOrientation")))
  {
    if (CFEqual(a2, CFSTR("Rotation")))
    {
      v12 = 0;
      if (a3)
      {
        v16 = 0;
        if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] != a3)
        {
          v16 = *(_DWORD *)(a1 + 52);
          if (FigCFEqual())
          {
            v12 = 0;
            v16 = 0;
          }
          else if (FigCFEqual())
          {
            v12 = 0;
            v16 = 90;
          }
          else if (FigCFEqual())
          {
            v12 = 0;
            v16 = 180;
          }
          else if (FigCFEqual())
          {
            v12 = 0;
            v16 = 270;
          }
          else
          {
            v12 = FigSignalErrorAt();
          }
        }
      }
      else
      {
        v16 = 0;
      }
      if (v16 == *(_DWORD *)(a1 + 52))
        goto LABEL_303;
      *(_DWORD *)(a1 + 52) = v16;
      goto LABEL_53;
    }
    v17 = CFSTR("RotationEnableHighSpeedTransfer");
    if (CFEqual(a2, CFSTR("RotationEnableHighSpeedTransfer"))
      || (v17 = CFSTR("RotationZeroFillData"), CFEqual(a2, CFSTR("RotationZeroFillData")))
      || (v17 = CFSTR("RotationEnableHistogram"), CFEqual(a2, CFSTR("RotationEnableHistogram")))
      || (v17 = CFSTR("RotationHistogramRectangle"), CFEqual(a2, CFSTR("RotationHistogramRectangle"))))
    {
      v18 = *(_QWORD *)(a1 + 224);
      if (v18)
      {
        v19 = VTPixelTransferNodeCelesteRotationSetProperty(v18, v17, a3);
LABEL_302:
        v12 = v19;
        goto LABEL_303;
      }
LABEL_301:
      v19 = FigSignalErrorAt();
      goto LABEL_302;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3)
        a3 = 0;
      if (a3)
      {
        v20 = CFGetTypeID(a3);
        if (v20 != CFStringGetTypeID())
          goto LABEL_301;
      }
      if (FigCFEqual())
        goto LABEL_22;
      v21 = *(const void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = a3;
      if (!a3)
        goto LABEL_78;
      goto LABEL_77;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3)
        a3 = 0;
      if (a3)
      {
        v22 = CFGetTypeID(a3);
        if (v22 != CFStringGetTypeID())
          goto LABEL_301;
      }
      if (FigCFEqual())
        goto LABEL_22;
      v21 = *(const void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = a3;
      if (!a3)
        goto LABEL_78;
      goto LABEL_77;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        v23 = CFGetTypeID(a3);
        if (v23 != CFDataGetTypeID())
          goto LABEL_301;
      }
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3)
        a3 = 0;
      if (FigCFEqual())
        goto LABEL_22;
      v21 = *(const void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = a3;
      if (!a3)
        goto LABEL_78;
      goto LABEL_77;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3)
        a3 = 0;
      if (a3)
      {
        v24 = CFGetTypeID(a3);
        if (v24 != CFStringGetTypeID())
          goto LABEL_301;
      }
      if (FigCFEqual())
        goto LABEL_22;
      v21 = *(const void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = a3;
      if (!a3)
        goto LABEL_78;
      goto LABEL_77;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
        a3 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
      v26 = CFBooleanGetTypeID();
      if (v26 == CFGetTypeID(a3))
      {
        v27 = *(unsigned __int8 *)(a1 + 129);
        if (v27 != CFBooleanGetValue(a3))
        {
          v12 = 0;
          *(_BYTE *)(a1 + 129) = CFBooleanGetValue(a3);
          goto LABEL_53;
        }
        goto LABEL_22;
      }
      goto LABEL_301;
    }
    if (FigCFEqual())
    {
      if (a3 && (const __CFBoolean *)*MEMORY[0x1E0C9B0D0] != a3
        || (a3 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40]) != 0)
      {
        v28 = CFBooleanGetTypeID();
        if (v28 == CFGetTypeID(a3))
        {
          v29 = *(unsigned __int8 *)(a1 + 130);
          if (v29 != CFBooleanGetValue(a3))
          {
            v12 = 0;
            *(_BYTE *)(a1 + 130) = CFBooleanGetValue(a3);
            goto LABEL_53;
          }
          goto LABEL_22;
        }
      }
      goto LABEL_301;
    }
    if (FigCFEqual())
    {
      if (a3 && (const __CFBoolean *)*MEMORY[0x1E0C9B0D0] != a3
        || (!globalEnableSoftwareTransfer
          ? (v30 = (const __CFBoolean **)MEMORY[0x1E0C9AE40])
          : (v30 = (const __CFBoolean **)MEMORY[0x1E0C9AE50]),
            (a3 = *v30) != 0))
      {
        v31 = CFBooleanGetTypeID();
        if (v31 == CFGetTypeID(a3))
        {
          v32 = *(unsigned __int8 *)(a1 + 132);
          if (v32 != CFBooleanGetValue(a3))
          {
            v12 = 0;
            *(_BYTE *)(a1 + 132) = CFBooleanGetValue(a3);
            goto LABEL_53;
          }
          goto LABEL_22;
        }
      }
      goto LABEL_301;
    }
    if (FigCFEqual())
    {
      if (globalUsePixelTransferChain)
        v33 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v33 = (const void **)MEMORY[0x1E0C9AE40];
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
        v35 = *v33;
      else
        v35 = a3;
      v36 = CFBooleanGetTypeID();
      if (v36 != CFGetTypeID(v35))
        goto LABEL_301;
      v37 = (const void **)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        Value = CFBooleanGetValue((CFBooleanRef)v35);
        v39 = *v37;
        if (!Value)
        {
          if (v39)
          {
            CFRelease(v39);
            *v37 = 0;
          }
          goto LABEL_80;
        }
        if (v39)
          goto LABEL_22;
      }
      if (!CFBooleanGetValue((CFBooleanRef)v35))
        goto LABEL_22;
      v40 = CFGetAllocator((CFTypeRef)a1);
      VTPixelTransferChainCreate((uint64_t)v40, (uint64_t *)(a1 + 40));
LABEL_80:
      v12 = 0;
      goto LABEL_53;
    }
    if (FigCFEqual())
    {
      if (globalUsePixelTransferGraph)
        v41 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
      else
        v41 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
        a3 = *v41;
      v43 = CFBooleanGetTypeID();
      if (v43 == CFGetTypeID(a3))
      {
        v44 = CFBooleanGetValue(a3);
        if (v44 != *(unsigned __int8 *)(a1 + 48))
        {
          v12 = 0;
          *(_BYTE *)(a1 + 48) = v44;
          goto LABEL_53;
        }
        goto LABEL_22;
      }
      goto LABEL_301;
    }
    if (FigCFEqual())
    {
      if (globalEnableGPUAcceleratedTransfer)
        v45 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
      else
        v45 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
        a3 = *v45;
      v47 = CFBooleanGetTypeID();
      if (v47 == CFGetTypeID(a3))
      {
        v48 = *(unsigned __int8 *)(a1 + 133);
        if (v48 != CFBooleanGetValue(a3))
        {
          v12 = 0;
          *(_BYTE *)(a1 + 133) = CFBooleanGetValue(a3);
          goto LABEL_53;
        }
        goto LABEL_22;
      }
      goto LABEL_301;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
        a3 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
      v50 = CFBooleanGetTypeID();
      if (v50 == CFGetTypeID(a3))
      {
        v51 = *(unsigned __int8 *)(a1 + 134);
        if (v51 != CFBooleanGetValue(a3))
        {
          v12 = 0;
          *(_BYTE *)(a1 + 134) = CFBooleanGetValue(a3);
          goto LABEL_53;
        }
        goto LABEL_22;
      }
      goto LABEL_301;
    }
    if (FigCFEqual())
    {
      if (globalEnableHardwareAcceleratedTransfer)
        v52 = (const __CFBoolean **)MEMORY[0x1E0C9AE50];
      else
        v52 = (const __CFBoolean **)MEMORY[0x1E0C9AE40];
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
        a3 = *v52;
      v54 = CFBooleanGetTypeID();
      if (v54 == CFGetTypeID(a3))
      {
        v55 = *(unsigned __int8 *)(a1 + 135);
        if (v55 != CFBooleanGetValue(a3))
        {
          v12 = 0;
          *(_BYTE *)(a1 + 135) = CFBooleanGetValue(a3);
          goto LABEL_53;
        }
        goto LABEL_22;
      }
      goto LABEL_301;
    }
    if (CFEqual(a2, CFSTR("PQEOTFOpticalScale")))
    {
      v56 = *(const void **)(a1 + 136);
      if (v56)
        VTSessionSetProperty(v56, a2, a3);
      v57 = *(__CFDictionary **)(a1 + 144);
      if (v57)
      {
        if (a3)
        {
          CFDictionarySetValue(v57, a2, a3);
LABEL_183:
          v60 = CFGetTypeID(a3);
          if (v60 != CFNumberGetTypeID())
            goto LABEL_301;
          if (FigCFEqual())
            goto LABEL_22;
          v21 = *(const void **)(a1 + 176);
          *(_QWORD *)(a1 + 176) = a3;
          goto LABEL_77;
        }
        CFDictionaryRemoveValue(v57, a2);
      }
      else if (a3)
      {
        goto LABEL_183;
      }
      v61 = *(const void **)(a1 + 176);
      if (v61)
      {
        CFRelease(v61);
        v12 = 0;
        *(_QWORD *)(a1 + 176) = 0;
        goto LABEL_303;
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("PQInvEOTFOpticalScale")))
    {
      v58 = *(const void **)(a1 + 136);
      if (v58)
        VTSessionSetProperty(v58, a2, a3);
      v59 = *(__CFDictionary **)(a1 + 144);
      if (v59)
      {
        if (a3)
        {
          CFDictionarySetValue(v59, a2, a3);
LABEL_196:
          v64 = CFGetTypeID(a3);
          if (v64 != CFNumberGetTypeID())
            goto LABEL_301;
          if (FigCFEqual())
            goto LABEL_22;
          v21 = *(const void **)(a1 + 184);
          *(_QWORD *)(a1 + 184) = a3;
          goto LABEL_77;
        }
        CFDictionaryRemoveValue(v59, a2);
      }
      else if (a3)
      {
        goto LABEL_196;
      }
      v65 = *(const void **)(a1 + 184);
      if (v65)
      {
        CFRelease(v65);
        v12 = 0;
        *(_QWORD *)(a1 + 184) = 0;
        goto LABEL_303;
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("HLGOETFOpticalScale")))
    {
      v62 = *(const void **)(a1 + 136);
      if (v62)
        VTSessionSetProperty(v62, a2, a3);
      v63 = *(__CFDictionary **)(a1 + 144);
      if (v63)
      {
        if (a3)
        {
          CFDictionarySetValue(v63, a2, a3);
LABEL_209:
          v68 = CFGetTypeID(a3);
          if (v68 != CFNumberGetTypeID())
            goto LABEL_301;
          if (FigCFEqual())
            goto LABEL_22;
          v21 = *(const void **)(a1 + 192);
          *(_QWORD *)(a1 + 192) = a3;
          goto LABEL_77;
        }
        CFDictionaryRemoveValue(v63, a2);
      }
      else if (a3)
      {
        goto LABEL_209;
      }
      v69 = *(const void **)(a1 + 192);
      if (v69)
      {
        CFRelease(v69);
        v12 = 0;
        *(_QWORD *)(a1 + 192) = 0;
        goto LABEL_303;
      }
      goto LABEL_22;
    }
    if (!CFEqual(a2, CFSTR("HLGInvOETFOpticalScale")))
    {
      if (CFEqual(a2, CFSTR("DisableDither")))
      {
        if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
          a3 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
        if (a3)
        {
          v71 = CFBooleanGetTypeID();
          if (v71 == CFGetTypeID(a3))
          {
            v72 = CFBooleanGetValue(a3);
            if (v72 != *(unsigned __int8 *)(a1 + 208))
            {
              v12 = 0;
              *(_BYTE *)(a1 + 208) = v72;
              goto LABEL_53;
            }
            goto LABEL_22;
          }
        }
        goto LABEL_301;
      }
      if (CFEqual(a2, CFSTR("vImageFlags")))
      {
        UInt64 = 0;
        v12 = 0;
        if (a3 && (const __CFBoolean *)*MEMORY[0x1E0C9B0D0] != a3)
        {
          UInt64 = *(_QWORD *)(a1 + 216);
          v76 = CFNumberGetTypeID();
          if (v76 == CFGetTypeID(a3))
          {
            UInt64 = FigCFNumberGetUInt64();
            v12 = 0;
          }
          else
          {
            v12 = FigSignalErrorAt();
          }
        }
        if (UInt64 == *(_QWORD *)(a1 + 216))
          goto LABEL_303;
        *(_QWORD *)(a1 + 216) = UInt64;
        goto LABEL_53;
      }
      if (CFEqual(a2, CFSTR("AllowFallbacks")))
      {
        if (a3 && (const __CFBoolean *)*MEMORY[0x1E0C9B0D0] != a3
          || (!globalAllowFallbacks
            ? (v77 = (const __CFBoolean **)MEMORY[0x1E0C9AE40])
            : (v77 = (const __CFBoolean **)MEMORY[0x1E0C9AE50]),
              (a3 = *v77) != 0))
        {
          v78 = CFBooleanGetTypeID();
          if (v78 == CFGetTypeID(a3))
          {
            v79 = CFBooleanGetValue(a3);
            if (v79 != *(unsigned __int8 *)(a1 + 49))
            {
              v12 = 0;
              *(_BYTE *)(a1 + 49) = v79;
              goto LABEL_53;
            }
            goto LABEL_22;
          }
        }
        goto LABEL_301;
      }
      if (!CFEqual(a2, CFSTR("ReducedPrecisionFractionalOffsets")))
      {
        if (CFEqual(a2, CFSTR("WriteBlackPixelsOutsideDestRect")))
        {
          if (!a3)
            goto LABEL_301;
          v85 = CFBooleanGetTypeID();
          if (v85 != CFGetTypeID(a3))
            goto LABEL_301;
          *(_BYTE *)(a1 + 232) = CFBooleanGetValue(a3);
        }
        else if (CFEqual(a2, CFSTR("PreferRenderKernel")))
        {
          if (!a3)
            goto LABEL_301;
          v86 = CFBooleanGetTypeID();
          if (v86 != CFGetTypeID(a3))
            goto LABEL_301;
          *(_BYTE *)(a1 + 234) = CFBooleanGetValue(a3);
        }
        else
        {
          if (!CFEqual(a2, CFSTR("AllowLowQualityScaling")))
          {
            if (!CFEqual(a2, CFSTR("Label")))
            {
              if (!CFEqual(a2, CFSTR("DownsamplingMode")))
              {
                v12 = 4294954396;
                goto LABEL_303;
              }
              if (!a3 || FigCFEqual())
                goto LABEL_291;
              if (FigCFEqual())
              {
                v12 = 0;
                *(_BYTE *)(a1 + 131) = 1;
                goto LABEL_303;
              }
              if (FigCFEqual())
              {
LABEL_291:
                v12 = 0;
                *(_BYTE *)(a1 + 131) = 0;
                goto LABEL_303;
              }
              goto LABEL_301;
            }
            if (a3 && !FigCFEqual())
            {
              v95 = CFGetTypeID(a3);
              if (v95 != CFStringGetTypeID())
                goto LABEL_301;
              v96 = *(const void **)(a1 + 24);
              *(_QWORD *)(a1 + 24) = a3;
              CFRetain(a3);
              if (v96)
                CFRelease(v96);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 144), a2, a3);
              v92 = *(const void **)(a1 + 136);
              if (!v92)
                goto LABEL_22;
              v93 = a2;
              v94 = a3;
            }
            else
            {
              v91 = *(const void **)(a1 + 24);
              if (v91)
              {
                CFRelease(v91);
                *(_QWORD *)(a1 + 24) = 0;
              }
              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 144), a2);
              v92 = *(const void **)(a1 + 136);
              if (!v92)
                goto LABEL_22;
              v93 = a2;
              v94 = 0;
            }
            v19 = VTSessionSetProperty(v92, v93, v94);
            goto LABEL_302;
          }
          if (!a3)
            goto LABEL_301;
          v87 = CFBooleanGetTypeID();
          if (v87 != CFGetTypeID(a3))
            goto LABEL_301;
          *(_BYTE *)(a1 + 235) = CFBooleanGetValue(a3);
        }
        v88 = *(const void **)(a1 + 136);
        if (v88)
          VTSessionSetProperty(v88, a2, a3);
        v89 = *(__CFDictionary **)(a1 + 144);
        if (v89)
          CFDictionarySetValue(v89, a2, a3);
        goto LABEL_22;
      }
      if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
        a3 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
      if (!a3)
        goto LABEL_301;
      v81 = CFGetTypeID(a3);
      if (v81 != CFBooleanGetTypeID())
        goto LABEL_301;
      v82 = CFBooleanGetValue(a3);
      if (v82 == *(unsigned __int8 *)(a1 + 236))
        goto LABEL_22;
      v83 = v82;
      IOSurfaceAcceleratorCapabilityFractionalDimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
      if (v83 && !IOSurfaceAcceleratorCapabilityFractionalDimensions)
      {
        v12 = 4294954394;
        goto LABEL_303;
      }
      *(_BYTE *)(a1 + 236) = v83;
      v90 = *(_QWORD *)(a1 + 224);
      if (v90)
      {
        v12 = VTPixelTransferNodeCelesteRotationSetProperty(v90, CFSTR("ReducedPrecisionFractionalOffsets"), a3);
        goto LABEL_53;
      }
      goto LABEL_80;
    }
    v66 = *(const void **)(a1 + 136);
    if (v66)
      VTSessionSetProperty(v66, a2, a3);
    v67 = *(__CFDictionary **)(a1 + 144);
    if (v67)
    {
      if (a3)
      {
        CFDictionarySetValue(v67, a2, a3);
LABEL_226:
        v73 = CFGetTypeID(a3);
        if (v73 != CFNumberGetTypeID())
          goto LABEL_301;
        if (FigCFEqual())
          goto LABEL_22;
        v21 = *(const void **)(a1 + 200);
        *(_QWORD *)(a1 + 200) = a3;
LABEL_77:
        CFRetain(a3);
LABEL_78:
        if (v21)
          CFRelease(v21);
        goto LABEL_80;
      }
      CFDictionaryRemoveValue(v67, a2);
    }
    else if (a3)
    {
      goto LABEL_226;
    }
    v74 = *(const void **)(a1 + 200);
    if (v74)
    {
      CFRelease(v74);
      v12 = 0;
      *(_QWORD *)(a1 + 200) = 0;
      goto LABEL_303;
    }
    goto LABEL_22;
  }
  if ((const __CFBoolean *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
    a3 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
  v14 = CFBooleanGetTypeID();
  if (v14 != CFGetTypeID(a3))
    goto LABEL_301;
  v15 = *(unsigned __int8 *)(a1 + 57);
  if (v15 != CFBooleanGetValue(a3))
  {
    v12 = 0;
    *(_BYTE *)(a1 + 57) = CFBooleanGetValue(a3);
    goto LABEL_53;
  }
LABEL_22:
  v12 = 0;
LABEL_303:
  FigAtomicDecrement32();
  return v12;
}

uint64_t VTPixelRotationSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  const CFStringRef *v10;
  int v11;
  const CFStringRef *v12;
  BOOL v13;
  const void *UInt64;
  uint64_t v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  int IOSurfaceAcceleratorCapabilityFractionalDimensions;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (FigAtomicIncrement32() != 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    v9 = fig_log_call_emit_and_clean_up_after_send_and_compose();
    VTPixelTransferSessionThreadBearTrap(v9);
  }
  if (CFEqual(a2, CFSTR("FlipHorizontalOrientation")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 56);
LABEL_9:
    v12 = (const CFStringRef *)MEMORY[0x1E0C9AE40];
    v13 = v11 == 0;
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("FlipVerticalOrientation")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 57);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("Rotation")))
  {
    v16 = *(_DWORD *)(a1 + 52);
    if (v16 > 179)
    {
      if (v16 == 180)
      {
        v10 = &kVTRotation_180;
        goto LABEL_12;
      }
      if (v16 == 270)
      {
        v10 = &kVTRotation_CCW90;
        goto LABEL_12;
      }
    }
    else
    {
      if (!v16)
      {
        v10 = &kVTRotation_0;
        goto LABEL_12;
      }
      if (v16 == 90)
      {
        v10 = &kVTRotation_CW90;
        goto LABEL_12;
      }
    }
    goto LABEL_28;
  }
  v17 = CFSTR("ScalingSupported");
  if (CFEqual(a2, CFSTR("ScalingSupported"))
    || (v17 = CFSTR("NonIntegralSourceBoundingOriginSupported"),
        CFEqual(a2, CFSTR("NonIntegralSourceBoundingOriginSupported"))))
  {
    v18 = *(_QWORD *)(a1 + 224);
    if (!v18)
    {
      v10 = (const CFStringRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  v17 = CFSTR("RotationEnableHighSpeedTransfer");
  if (CFEqual(a2, CFSTR("RotationEnableHighSpeedTransfer"))
    || (v17 = CFSTR("RotationZeroFillData"), CFEqual(a2, CFSTR("RotationZeroFillData")))
    || (v17 = CFSTR("RotationEnableHistogram"), CFEqual(a2, CFSTR("RotationEnableHistogram")))
    || (v17 = CFSTR("RotationHistogramData"), CFEqual(a2, CFSTR("RotationHistogramData")))
    || (v17 = CFSTR("RotationHistogramRectangle"), CFEqual(a2, CFSTR("RotationHistogramRectangle"))))
  {
    v18 = *(_QWORD *)(a1 + 224);
    if (!v18)
    {
LABEL_28:
      v19 = FigSignalErrorAt();
      goto LABEL_29;
    }
LABEL_24:
    v19 = VTPixelTransferNodeCelesteRotationCopyProperty(v18, v17, *MEMORY[0x1E0C9AE00], a4);
LABEL_29:
    v15 = v19;
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    UInt64 = *(const void **)(a1 + 104);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (FigCFEqual())
  {
    UInt64 = *(const void **)(a1 + 112);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (FigCFEqual())
  {
    UInt64 = *(const void **)(a1 + 88);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (FigCFEqual())
  {
    UInt64 = *(const void **)(a1 + 96);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("ForceDisableVectorInstructions")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 129);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("ForceSingleThreaded")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 130);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("EnableSoftwareTransfer")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 132);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("AllowPixelTransferChain")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v12 = (const CFStringRef *)MEMORY[0x1E0C9AE40];
    v13 = *(_QWORD *)(a1 + 40) == 0;
LABEL_10:
    if (v13)
      v10 = v12;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("AllowPixelTransferGraph")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 48);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("EnableGPUAcceleratedTransfer")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 133);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("SetGPUPriorityLow")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 134);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("EnableHardwareAcceleratedTransfer")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 135);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("PQEOTFOpticalScale")))
  {
    UInt64 = *(const void **)(a1 + 176);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("PQInvEOTFOpticalScale")))
  {
    UInt64 = *(const void **)(a1 + 184);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("HLGOETFOpticalScale")))
  {
    UInt64 = *(const void **)(a1 + 192);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("HLGInvOETFOpticalScale")))
  {
    UInt64 = *(const void **)(a1 + 200);
    if (!UInt64)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("DisableDither")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 208);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("vImageFlags")))
  {
    if (!*(_QWORD *)(a1 + 216))
    {
      v15 = 0;
      *a4 = 0;
      goto LABEL_15;
    }
    UInt64 = (const void *)FigCFNumberCreateUInt64();
    goto LABEL_14;
  }
  if (CFEqual(a2, CFSTR("AllowFallbacks")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 49);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("ReducedPrecisionFractionalOffsets")))
  {
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(a1 + 236);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("HardwareSupportsFractionalDimensions")))
  {
    IOSurfaceAcceleratorCapabilityFractionalDimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
    v10 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
    if (!IOSurfaceAcceleratorCapabilityFractionalDimensions)
      v10 = (const CFStringRef *)MEMORY[0x1E0C9AE40];
  }
  else
  {
    if (CFEqual(a2, CFSTR("Label")))
    {
      UInt64 = *(const void **)(a1 + 24);
      goto LABEL_13;
    }
    if (!CFEqual(a2, CFSTR("DownsamplingMode")))
    {
      if (!CFEqual(a2, CFSTR("MostRecentChainDescription")))
      {
        v15 = 4294954396;
        goto LABEL_15;
      }
      UInt64 = *(const void **)(a1 + 40);
      if (UInt64)
        UInt64 = VTPixelTransferChainCopyDescriptionChain((uint64_t)UInt64);
      goto LABEL_14;
    }
    if (*(_BYTE *)(a1 + 131))
      v10 = &kVTDownsamplingMode_Average;
    else
      v10 = &kVTDownsamplingMode_Decimate;
  }
LABEL_12:
  UInt64 = *v10;
LABEL_13:
  UInt64 = CFRetain(UInt64);
LABEL_14:
  v15 = 0;
  *a4 = UInt64;
LABEL_15:
  FigAtomicDecrement32();
  return v15;
}

uint64_t VTPixelRotationSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!theDict)
    return 0;
  v4 = 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtPixelRotationSessionSetOneProperty, &v3);
  return v4;
}

uint64_t vtPixelRotationSessionSetOneProperty(const __CFString *a1, const __CFBoolean *a2, uint64_t a3)
{
  uint64_t result;

  result = VTPixelRotationSessionSetProperty(*(_QWORD *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t VTPixelRotationSessionCopySerializableProperties()
{
  return FigSignalErrorAt();
}

OSStatus VTPixelRotationSessionRotateImage(VTPixelRotationSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  double Width;
  double Height;
  double v8;
  double v9;
  CFTypeRef v10;
  CFMutableDictionaryRef Mutable;
  int v12;
  OSStatus v14;
  CGRect v15;

  if (*((_BYTE *)session + 16) || !sourceBuffer || !destinationBuffer)
    return FigSignalErrorAt();
  Width = (double)CVPixelBufferGetWidth(sourceBuffer);
  Height = (double)CVPixelBufferGetHeight(sourceBuffer);
  v8 = (double)CVPixelBufferGetWidth(destinationBuffer);
  v9 = (double)CVPixelBufferGetHeight(destinationBuffer);
  v10 = CVBufferCopyAttachment(sourceBuffer, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  if (v10)
  {
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    v15.origin = 0u;
    v15.size = 0u;
    Mutable = 0;
    if (!CGRectIsEmpty(v15))
    {
      v12 = *((_DWORD *)session + 13);
      if (v12 > 179)
      {
        if (v12 != 270 && v12 != 180)
          goto LABEL_16;
      }
      else if (v12 && v12 != 90)
      {
        goto LABEL_16;
      }
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        FigCFDictionarySetCGFloat();
        FigCFDictionarySetCGFloat();
        FigCFDictionarySetCGFloat();
        FigCFDictionarySetCGFloat();
      }
    }
  }
  else
  {
    Mutable = 0;
  }
LABEL_16:
  v14 = VTPixelRotationSessionRotateSubImage((uint64_t)session, sourceBuffer, destinationBuffer, 0.0, 0.0, Width, Height, 0.0, 0.0, v8, v9);
  if (Mutable)
    CFRelease(Mutable);
  if (v10)
    CFRelease(v10);
  return v14;
}

uint64_t VTPixelRotationSessionRotateSubImage(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, double a4, double a5, double a6, double a7, float64_t a8, float64_t a9, float64_t a10, float64_t a11)
{
  uint64_t v12;
  OSType PixelFormatType;
  OSType v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v26;
  _DWORD *v27;

  v12 = 0;
  if (pixelBuffer && a3)
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetWidth(a3);
    CVPixelBufferGetHeight(pixelBuffer);
    CVPixelBufferGetHeight(a3);
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    printable4CC(PixelFormatType);
    v24 = CVPixelBufferGetPixelFormatType(a3);
    printable4CC(v24);
    if (a1 && FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v26 = fig_log_call_emit_and_clean_up_after_send_and_compose();
      VTPixelTransferSessionThreadBearTrap(v26);
    }
    v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v12 = _VTPixelRotationSessionRotateSubImage(a1, pixelBuffer, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    if (*v27 == 1)
      kdebug_trace();
  }
  if (a1)
    FigAtomicDecrement32();
  return v12;
}

uint64_t _VTPixelRotationSessionRotateSubImage(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, double a4, double a5, double a6, double a7, float64_t a8, float64_t a9, float64_t a10, float64_t a11)
{
  __CVBuffer *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  CFTypeRef v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFAllocator *v28;
  uint64_t v29;
  const __CFDictionary *v30;
  const __CFDictionary *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  CFMutableDictionaryRef v36;
  const void *v37;
  void *v39;
  uint64_t v40;
  int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  OSType v55;
  OSType v56;
  CFDictionaryRef v57;
  CFDictionaryRef v58;
  CFTypeRef v59;
  CGColorSpace *v60;
  CFTypeRef v61;
  CFTypeRef v62;
  CFTypeRef v63;
  CFTypeRef v64;
  BOOL IsHDR;
  _BOOL4 v66;
  char v67;
  size_t v68;
  CFDictionaryRef v69;
  const void *v70;
  __CFDictionary *MutableCopy;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  CFTypeRef v79;
  char v80;
  char v81;
  size_t v82;
  int64x2_t v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  const void *v89;
  CFTypeRef v90;
  CFTypeRef v91;
  CFTypeRef v92;
  CFTypeRef v93;
  CFTypeRef v94;
  CFTypeRef v95;
  float64x2_t v96;
  const void *v97;
  int v98;
  signed int v99;
  const __CFArray **v100;
  const CFDictionaryKeyCallBacks *v101;
  const CFDictionaryValueCallBacks *v102;
  __CFDictionary *v103;
  __CFDictionary *v104;
  uint64_t v105;
  const void *v106;
  const void *v107;
  __CFDictionary *v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  size_t PlaneCount;
  size_t v121;
  __CFDictionary *v122;
  CFTypeRef v123;
  CFTypeRef v124;
  CFTypeRef v125;
  CFTypeRef v126;
  char v127;
  const __CFArray *v128;
  const void *v129;
  int v130;
  int v131;
  int v132;
  signed int v133;
  int v134;
  __CVBuffer *v135;
  signed int v136;
  int v137;
  OSType v138;
  size_t BytesPerRowOfPlane;
  size_t v140;
  size_t v141;
  size_t v142;
  __CFDictionary *v143;
  const void *v144;
  const void *v145;
  const void *v146;
  const void *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t (*v150)(_QWORD, CFTypeRef *, _QWORD *, _QWORD *, _QWORD *, CFTypeRef *, _QWORD *, _QWORD *, _QWORD *);
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  signed int v157;
  uint64_t v158;
  unsigned __int16 v159;
  int v160;
  unsigned __int16 v161;
  int v162;
  unsigned __int16 v163;
  int v164;
  unsigned __int16 v165;
  unsigned __int16 v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned __int16 v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  unsigned __int16 v191;
  int v192;
  unsigned __int16 v193;
  unsigned __int16 v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *value;
  double v211;
  const void *v212;
  CFTypeRef v213;
  const void *v214;
  _BOOL4 v215;
  const __CFString *v216;
  const __CFString *v217;
  const __CFString *v218;
  const __CFAllocator *allocator;
  const __CFString *v220;
  const __CFString *key;
  const __CFString *v222;
  __CVBuffer *pixelBuffera;
  OSType PixelFormatType;
  void *v225;
  OSType v226;
  void *v227;
  int v228[2];
  signed int v229;
  OSType v230;
  CFTypeRef v231;
  __CFDictionary *v232;
  CFTypeRef Height;
  __CFDictionary *v234;
  CFTypeRef Width;
  __CFDictionary *Mutable;
  __IOSurface *buffer;
  const __CFDictionary *buffera;
  __IOSurface *IOSurface;
  IOSurfaceRef v240;
  CFTypeRef v241;
  CFTypeRef v242;
  CFTypeRef v243;
  CFTypeRef v244;
  CFTypeRef v245;
  CFMutableDictionaryRef cf;
  char v248;
  float64x2_t v249;
  float64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  CFTypeRef v253;
  size_t v254;
  float64x2_t v255;
  float64x2_t v256;
  CFTypeRef v257;
  size_t v258;
  int64x2_t v259;
  int64x2_t v260;
  _QWORD v261[2];
  _QWORD v262[2];
  _QWORD v263[2];
  _QWORD v264[2];
  _QWORD v265[2];
  _QWORD v266[2];
  __int128 v267;
  __int128 v268;
  int64x2_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  int64x2_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  CFDictionaryRef v279[4];
  size_t v280[8];

  v20 = pixelBuffer;
  v280[5] = *MEMORY[0x1E0C80C00];
  *(double *)v251.i64 = a4;
  *(double *)&v251.i64[1] = a5;
  *(double *)v252.i64 = a6;
  *(double *)&v252.i64[1] = a7;
  v249.f64[0] = a8;
  v249.f64[1] = a9;
  v250.f64[0] = a10;
  v250.f64[1] = a11;
  v248 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  Width = (CFTypeRef)CVPixelBufferGetWidth(v20);
  Height = (CFTypeRef)CVPixelBufferGetHeight(v20);
  v226 = CVPixelBufferGetPixelFormatType(a3);
  v231 = (CFTypeRef)CVPixelBufferGetWidth(a3);
  *(_QWORD *)v228 = CVPixelBufferGetHeight(a3);
  buffer = CVPixelBufferGetIOSurface(v20);
  IOSurface = CVPixelBufferGetIOSurface(a3);
  v21 = (const __CFString *)*MEMORY[0x1E0CA8D68];
  v242 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  v22 = (const __CFString *)*MEMORY[0x1E0CA8E98];
  v245 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  v23 = (const __CFString *)*MEMORY[0x1E0CA8E48];
  v244 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8E48], 0);
  v24 = (const __CFString *)*MEMORY[0x1E0CA8EE8];
  v25 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
  v26 = (const __CFString *)*MEMORY[0x1E0CA8E40];
  v241 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8E40], 0);
  v27 = (const __CFString *)*MEMORY[0x1E0CA8CD8];
  v243 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
  v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 16)
    || (v216 = v27, v217 = v23, v220 = v21, key = v24, v218 = v26, allocator = v28, v222 = v22, CFEqual(v20, a3)))
  {
    v29 = FigSignalErrorAt();
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v35 = v241;
    v34 = v242;
    v36 = cf;
    v37 = v25;
    goto LABEL_4;
  }
  pixelBuffera = a3;
  if (buffer)
    IOSurfaceGetID(buffer);
  if (IOSurface)
    IOSurfaceGetID(IOSurface);
  v213 = v25;
  v39 = (void *)*MEMORY[0x1E0C9AE50];
  FigCFDictionarySetValue();
  v40 = a1;
  FigCFDictionarySetBoolean();
  v41 = *(_DWORD *)(a1 + 52);
  if (v41 > 179)
  {
    if (v41 != 180 && v41 != 270)
      goto LABEL_157;
  }
  else if (v41 && v41 != 90)
  {
LABEL_157:
    v29 = FigSignalErrorAt();
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v35 = v241;
    v34 = v242;
    v37 = v213;
    v36 = cf;
    goto LABEL_4;
  }
  value = v39;
  if (a6 >= 0.0)
    v42 = a6;
  else
    v42 = -a6;
  v43 = -0.0;
  if (a6 >= 0.0)
    v44 = -0.0;
  else
    v44 = a6;
  v45 = a4 + v44;
  if (a7 >= 0.0)
    v46 = a7;
  else
    v46 = -a7;
  if (a7 >= 0.0)
    v47 = -0.0;
  else
    v47 = a7;
  v48 = a5 + v47;
  v49 = v42;
  *(double *)v251.i64 = v45;
  *(double *)&v251.i64[1] = v48;
  *(double *)v252.i64 = v42;
  *(double *)&v252.i64[1] = v46;
  v211 = v46;
  if (a10 >= 0.0)
    v50 = a10;
  else
    v50 = -a10;
  if (a10 >= 0.0)
    v51 = -0.0;
  else
    v51 = a10;
  v52 = a8 + v51;
  if (a11 < 0.0)
    v43 = a11;
  v53 = a9 + v43;
  v249.f64[0] = a8 + v51;
  v249.f64[1] = v53;
  if (a11 >= 0.0)
    v54 = a11;
  else
    v54 = -a11;
  v250.f64[0] = v50;
  v250.f64[1] = v54;
  v55 = CVPixelBufferGetPixelFormatType(v20);
  v56 = CVPixelBufferGetPixelFormatType(a3);
  v257 = 0;
  v253 = 0;
  v273.i8[0] = 0;
  LOBYTE(v271) = 0;
  v280[0] = 0;
  v279[0] = 0;
  *(_QWORD *)&v277 = 0;
  *(_QWORD *)&v275 = 0;
  v57 = CVPixelFormatDescriptionCreateWithPixelFormatType(v28, v55);
  FigCFDictionaryGetBooleanIfPresent();
  if (v57)
    CFRelease(v57);
  v58 = CVPixelFormatDescriptionCreateWithPixelFormatType(v28, v56);
  FigCFDictionaryGetBooleanIfPresent();
  if (v58)
    CFRelease(v58);
  v59 = CVBufferCopyAttachment(v20, key, 0);
  VTCreateYCbCrCFStringsAndProvideDefaults(v59, v273.u8[0], *(const void **)(a1 + 96), v271, &v257, &v253);
  v60 = (CGColorSpace *)CVBufferCopyAttachment(v20, v27, 0);
  v61 = CVBufferCopyAttachment(v20, v218, 0);
  v62 = CVBufferCopyAttachment(v20, v21, 0);
  v63 = CVBufferCopyAttachment(v20, v222, 0);
  v64 = CVBufferCopyAttachment(v20, v217, 0);
  VTCreateColorAttachments((unint64_t)v60, (unint64_t)v61, v62, v63, v64, v257, v55, 0, *(_QWORD *)(a1 + 88), *(const void **)(a1 + 104), *(const void **)(a1 + 112), 0, v253, v56, 0, (__CFDictionary **)v280, v279);
  VTCreateColorSpacesFromDictionaries((CFDictionaryRef)v280[0], v279[0], &v277, &v275);
  if (FigCFEqual())
    IsHDR = 1;
  else
    IsHDR = FigCFEqual() != 0;
  if (FigCFEqual())
    v66 = 1;
  else
    v66 = FigCFEqual() != 0;
  if (v60)
    v67 = IsHDR;
  else
    v67 = 1;
  if ((v67 & 1) == 0)
    IsHDR = CGColorSpaceIsHDR(v60);
  v68 = v280[0];
  v280[0] = 0;
  buffera = (const __CFDictionary *)v68;
  v240 = v279[0];
  v279[0] = 0;
  if (IsHDR || v66)
    FigCFEqual();
  v214 = (const void *)v277;
  *(_QWORD *)&v277 = 0;
  v212 = (const void *)v275;
  *(_QWORD *)&v275 = 0;
  if (v257)
    CFRelease(v257);
  if (v253)
    CFRelease(v253);
  if (v59)
    CFRelease(v59);
  if (v60)
    CFRelease(v60);
  if (v61)
    CFRelease(v61);
  if (v62)
    CFRelease(v62);
  v31 = v240;
  if (v63)
    CFRelease(v63);
  if (v64)
    CFRelease(v64);
  if ((_QWORD)v277)
    CFRelease((CFTypeRef)v277);
  if ((_QWORD)v275)
    CFRelease((CFTypeRef)v275);
  v215 = 0;
  if (v214 && v212)
    v215 = FigCFEqual() == 0;
  v69 = CVBufferCopyAttachments(v20, kCVAttachmentMode_ShouldPropagate);
  if ((unint64_t)v69 | (unint64_t)v240)
  {
    v70 = v69;
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (v70)
      CFRelease(v70);
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8D50]);
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8E68]);
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8DB0]);
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    if (MutableCopy)
    {
      CVBufferSetAttachments(pixelBuffera, MutableCopy, kCVAttachmentMode_ShouldPropagate);
      CFRelease(MutableCopy);
    }
  }
  v72 = *(_BYTE *)(a1 + 32);
  if (!v72)
  {
    v81 = 0;
    goto LABEL_116;
  }
  v73 = *(_QWORD *)(a1 + 88);
  v74 = *(_QWORD *)(a1 + 96);
  v76 = *(_QWORD *)(a1 + 104);
  v75 = *(_QWORD *)(a1 + 112);
  v77 = *(_DWORD *)(a1 + 240);
  if (v77 != CVPixelBufferGetPixelFormatType(v20)
    || (v78 = *(_DWORD *)(a1 + 304), v78 != CVPixelBufferGetPixelFormatType(pixelBuffera)))
  {
    v81 = 0;
    v31 = v240;
    goto LABEL_116;
  }
  v31 = v240;
  if (!v74)
  {
    if (v73 || (v81 = 1, v76) && v75)
    {
      v123 = CVBufferCopyAttachment(v20, v216, 0);
      v124 = CVBufferCopyAttachment(v20, v218, 0);
      v125 = CVBufferCopyAttachment(v20, v220, 0);
      v126 = CVBufferCopyAttachment(v20, v222, 0);
      v79 = CVBufferCopyAttachment(v20, v217, 0);
      if (FigCFEqual()
        && FigCFEqual()
        && FigCFEqual()
        && FigCFEqual())
      {
        if (FigCFEqual())
          v127 = v72;
        else
          v127 = 0;
      }
      else
      {
        v127 = 0;
      }
      *(_BYTE *)(a1 + 32) = v127;
      v34 = v242;
      if (v123)
        CFRelease(v123);
      if (v124)
        CFRelease(v124);
      v37 = v213;
      if (v125)
        CFRelease(v125);
      v35 = v241;
      v40 = a1;
      if (v126)
        CFRelease(v126);
      goto LABEL_248;
    }
LABEL_116:
    *(_BYTE *)(a1 + 32) = v81;
    v35 = v241;
    v34 = v242;
    v37 = v213;
    v82 = (size_t)Height;
    goto LABEL_117;
  }
  v79 = CVBufferCopyAttachment(v20, key, 0);
  if (FigCFEqual())
    v80 = v72;
  else
    v80 = 0;
  *(_BYTE *)(a1 + 32) = v80;
  v35 = v241;
  v34 = v242;
  v37 = v213;
LABEL_248:
  v82 = (size_t)Height;
  if (v79)
    CFRelease(v79);
LABEL_117:
  *(_DWORD *)(v40 + 240) = PixelFormatType;
  *(_QWORD *)(v40 + 248) = Width;
  *(_QWORD *)(v40 + 256) = v82;
  v83 = v252;
  *(int64x2_t *)(v40 + 272) = v251;
  *(int64x2_t *)(v40 + 288) = v83;
  v84 = *(const void **)(v40 + 376);
  if (v84)
    CFRelease(v84);
  v85 = *(const void **)(v40 + 384);
  if (v85)
    CFRelease(v85);
  v86 = *(const void **)(v40 + 392);
  if (v86)
    CFRelease(v86);
  v87 = *(const void **)(v40 + 400);
  if (v87)
    CFRelease(v87);
  v88 = *(const void **)(v40 + 408);
  if (v88)
    CFRelease(v88);
  v89 = *(const void **)(v40 + 416);
  if (v89)
    CFRelease(v89);
  v90 = v243;
  if (v243)
    v90 = CFRetain(v243);
  *(_QWORD *)(v40 + 376) = v90;
  if (v35)
    v91 = CFRetain(v35);
  else
    v91 = 0;
  *(_QWORD *)(v40 + 384) = v91;
  if (v37)
    v92 = CFRetain(v37);
  else
    v92 = 0;
  *(_QWORD *)(v40 + 392) = v92;
  if (v34)
    v93 = CFRetain(v34);
  else
    v93 = 0;
  *(_QWORD *)(v40 + 400) = v93;
  v94 = v245;
  if (v245)
    v94 = CFRetain(v245);
  *(_QWORD *)(v40 + 408) = v94;
  v95 = v244;
  if (v244)
    v95 = CFRetain(v244);
  *(_QWORD *)(v40 + 416) = v95;
  *(_DWORD *)(v40 + 304) = v226;
  *(_QWORD *)(v40 + 312) = v231;
  *(_QWORD *)(v40 + 320) = *(_QWORD *)v228;
  v96 = v250;
  *(float64x2_t *)(v40 + 336) = v249;
  *(float64x2_t *)(v40 + 352) = v96;
  if (*(_BYTE *)(v40 + 32))
  {
    v29 = 0;
  }
  else
  {
    if (*(_BYTE *)(v40 + 48))
    {
      v257 = Width;
      v258 = v82;
      v259 = v251;
      v260 = v252;
      v253 = v231;
      v254 = *(_QWORD *)v228;
      v255 = v249;
      v256 = v250;
      if (*(_BYTE *)(v40 + 133) && !*(_QWORD *)(v40 + 136) && !VTAvoidHardwarePixelTransfer())
      {
        VTMetalTransferSessionCreate((uint64_t)allocator, 0, v40 + 136);
        VTMetalTransferSessionSetProperties(*(_QWORD *)(v40 + 136), *(_QWORD *)(v40 + 144));
      }
      FigRegisterIOSurfacePixelTransferCapability();
    }
    v29 = 0;
    v128 = *(const __CFArray **)(v40 + 40);
    if (v128)
    {
      if (!VTPixelTransferChainHasNodes(v128))
      {
        v29 = vtPixelRotation_BuildChain(*(_QWORD *)(v40 + 40), v20, pixelBuffera, v31, v215, *(unsigned __int8 *)(v40 + 135), *(unsigned __int8 *)(v40 + 133), *(_DWORD *)(v40 + 52), v45, v48, v49, v211, v52, v53, v50, v54, *(_WORD *)(v40 + 56), HIBYTE(*(_WORD *)(v40 + 56)), *(_QWORD *)(v40 + 144),
                *(_BYTE *)(v40 + 134),
                a1 + 240,
                &v248);
        if ((_DWORD)v29)
        {
          v129 = *(const void **)(v40 + 40);
          if (v129)
          {
            CFRelease(v129);
            *(_QWORD *)(v40 + 40) = 0;
          }
        }
      }
    }
  }
  v97 = *(const void **)(v40 + 40);
  if (v97 && !v248)
  {
    v98 = vtPixelRotationChainDoTransfer((uint64_t)v97, v20, (__int128 *)v251.i8, pixelBuffera, (__int128 *)&v249);
    v97 = *(const void **)(v40 + 40);
    if (v98)
    {
      if (v97)
      {
        CFRelease(v97);
        *(_QWORD *)(v40 + 40) = 0;
      }
      goto LABEL_160;
    }
    v29 = 0;
  }
  if (v97)
    goto LABEL_221;
LABEL_160:
  v99 = CVPixelBufferGetPixelFormatType(v20);
  memset(v280, 0, 32);
  memset(v279, 0, sizeof(v279));
  v277 = 0u;
  v278 = 0u;
  v275 = 0u;
  v276 = 0u;
  v273 = 0u;
  v274 = 0u;
  v271 = 0u;
  v272 = 0u;
  v269 = 0u;
  v270 = 0u;
  v267 = 0u;
  v268 = 0u;
  *(_BYTE *)(v40 + 233) = 0;
  if (*(_BYTE *)(v40 + 135) && !VTAvoidHardwarePixelTransfer())
  {
    v29 = vt_Rotate_Celeste(*(_QWORD *)(v40 + 224), v20, buffera, pixelBuffera, v45, v48, v49, v211, v52, v53, v50, v54, v31, *(_DWORD *)(v40 + 52), *(unsigned __int8 *)(v40 + 56), *(unsigned __int8 *)(v40 + 57));
    if (!(_DWORD)v29)
      goto LABEL_220;
  }
  else
  {
    v29 = 0;
  }
  if (!*(_BYTE *)(v40 + 133))
    goto LABEL_186;
  v100 = (const __CFArray **)(v40 + 136);
  if (*(_QWORD *)(v40 + 136))
    goto LABEL_168;
  if (!VTAvoidHardwarePixelTransfer())
  {
    VTMetalTransferSessionCreate((uint64_t)allocator, 0, v40 + 136);
    VTMetalTransferSessionSetProperties(*(_QWORD *)(v40 + 136), *(_QWORD *)(v40 + 144));
  }
  if (*v100)
  {
LABEL_168:
    v229 = v99;
    v101 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v102 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v103 = CFDictionaryCreateMutable(allocator, 0, v101, v102);
    v104 = CFDictionaryCreateMutable(allocator, 0, v101, v102);
    v105 = v40;
    v106 = CFDictionaryGetValue(v31, v220);
    v107 = CFDictionaryGetValue(v31, v222);
    v225 = (void *)CFDictionaryGetValue(v31, key);
    v227 = (void *)CFDictionaryGetValue(v31, v218);
    if (*(_DWORD *)(v105 + 52))
      FigCFDictionarySetInt();
    if (*(_BYTE *)(a1 + 56))
      CFDictionarySetValue(v103, CFSTR("FlipHorizontalOrientation"), value);
    v232 = v104;
    if (*(_BYTE *)(a1 + 57))
      CFDictionarySetValue(v103, CFSTR("FlipVerticalOrientation"), value);
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    v234 = v103;
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    if (v106)
      CFDictionarySetValue(v104, v220, v106);
    if (v107)
      CFDictionarySetValue(v104, v222, v107);
    v35 = v241;
    v34 = v242;
    v31 = v240;
    v40 = a1;
    if (v225)
      CFDictionarySetValue(v104, key, v225);
    if (v227)
      CFDictionarySetValue(v104, v218, v227);
    CFDictionarySetValue(Mutable, CFSTR("SourceAmendments"), v234);
    CFDictionarySetValue(Mutable, CFSTR("DestinationAmendments"), v104);
    if (*(_BYTE *)(a1 + 134))
      CFDictionarySetValue(Mutable, CFSTR("SetGPUPriorityLow"), value);
    v29 = VTMetalTransferSessionTransferImageSync(*v100, v20, pixelBuffera, Mutable);
    if (!(_DWORD)v29)
    {
      v108 = 0;
      *(_BYTE *)(a1 + 233) = 1;
LABEL_212:
      v122 = Mutable;
      if (!Mutable)
      {
LABEL_214:
        if (v234)
          CFRelease(v234);
        if (v232)
          CFRelease(v232);
        if (v108)
          CFRelease(v108);
        goto LABEL_220;
      }
LABEL_213:
      CFRelease(v122);
      goto LABEL_214;
    }
    v99 = v229;
  }
  else
  {
LABEL_186:
    v234 = 0;
    Mutable = 0;
    v232 = 0;
  }
  if (!*(_BYTE *)(v40 + 132))
  {
LABEL_199:
    v29 = FigSignalErrorAt();
LABEL_200:
    v108 = 0;
    goto LABEL_212;
  }
  CFDictionaryGetValue(buffera, v220);
  if (FigCFEqual())
  {
    CFDictionaryGetValue(buffera, v222);
    if (FigCFEqual())
    {
      CFDictionaryGetValue(v31, v220);
      if (FigCFEqual())
      {
        CFDictionaryGetValue(v31, v222);
        if (FigCFEqual())
        {
          if (v49 == v50 && v211 == v54 && !*(_DWORD *)(v40 + 52) && !*(_BYTE *)(v40 + 56) && !*(_BYTE *)(v40 + 57))
          {
            v138 = CVPixelBufferGetPixelFormatType(v20);
            v230 = CVPixelBufferGetPixelFormatType(pixelBuffera);
            CVPixelBufferLockBaseAddress(v20, 1uLL);
            CVPixelBufferLockBaseAddress(pixelBuffera, 0);
            v257 = (CFTypeRef)CVPixelBufferGetWidth(v20);
            v258 = CVPixelBufferGetHeight(v20);
            v259.i64[0] = (uint64_t)v49;
            v259.i64[1] = (uint64_t)v211;
            v260.i64[0] = (uint64_t)v45;
            v260.i64[1] = (uint64_t)v48;
            v253 = (CFTypeRef)CVPixelBufferGetWidth(pixelBuffera);
            v254 = CVPixelBufferGetHeight(pixelBuffera);
            *(_QWORD *)&v255.f64[0] = (uint64_t)v50;
            *(_QWORD *)&v255.f64[1] = (uint64_t)v54;
            *(_QWORD *)&v256.f64[0] = (uint64_t)v52;
            *(_QWORD *)&v256.f64[1] = (uint64_t)v53;
            BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v20, 0);
            v266[0] = BytesPerRowOfPlane;
            v140 = CVPixelBufferGetBytesPerRowOfPlane(v20, 1uLL);
            v266[1] = v140;
            v141 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffera, 0);
            v265[0] = v141;
            v142 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffera, 1uLL);
            v265[1] = v142;
            v264[0] = CVPixelBufferGetBaseAddressOfPlane(v20, 0);
            v264[1] = CVPixelBufferGetBaseAddressOfPlane(v20, 1uLL);
            v263[0] = CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, 0);
            v263[1] = CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, 1uLL);
            v262[0] = CVPixelBufferGetHeightOfPlane(v20, 0) * BytesPerRowOfPlane;
            v262[1] = CVPixelBufferGetHeightOfPlane(v20, 1uLL) * v140;
            v261[0] = CVPixelBufferGetHeightOfPlane(pixelBuffera, 0) * v141;
            v261[1] = CVPixelBufferGetHeightOfPlane(pixelBuffera, 1uLL) * v142;
            v143 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v108 = v143;
            v144 = *(const void **)(a1 + 176);
            if (v144)
              CFDictionarySetValue(v143, CFSTR("kCGPQEOTFOpticalScale"), v144);
            v145 = *(const void **)(a1 + 184);
            if (v145)
              CFDictionarySetValue(v108, CFSTR("kCGPQInvEOTFOpticalScale"), v145);
            v146 = *(const void **)(a1 + 192);
            v34 = v242;
            v31 = v240;
            if (v146)
              CFDictionarySetValue(v108, CFSTR("kCGHLGOETFOpticalScale"), v146);
            v147 = *(const void **)(a1 + 200);
            if (v147)
              CFDictionarySetValue(v108, CFSTR("kCGHLGInvOETFOpticalScale"), v147);
            v148 = a1;
            v149 = (_QWORD *)(a1 + 152);
            if (!*(_QWORD *)(a1 + 152))
            {
              v29 = VTPixelBlitterColorHandlingOptimized_setup(v138, buffera, v230, v240, v108, *(unsigned __int8 *)(a1 + 129), *(unsigned __int8 *)(a1 + 130), v149, (_QWORD *)(a1 + 168), 0, (void (__cdecl **)(void *))(a1 + 160));
              if ((_DWORD)v29)
                goto LABEL_296;
              v148 = a1;
            }
            v150 = *(uint64_t (**)(_QWORD, CFTypeRef *, _QWORD *, _QWORD *, _QWORD *, CFTypeRef *, _QWORD *, _QWORD *, _QWORD *))(v148 + 168);
            if (v150)
              v29 = v150(*v149, &v257, v264, v266, v262, &v253, v263, v265, v261);
            CVPixelBufferUnlockBaseAddress(v20, 1uLL);
            CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
LABEL_296:
            v122 = Mutable;
            v35 = v241;
            v40 = a1;
            if (!Mutable)
              goto LABEL_214;
            goto LABEL_213;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(v40 + 56) && *(_BYTE *)(v40 + 57) || !VTDoColorDictionariesMatch(buffera, v31))
    goto LABEL_199;
  v109 = v49;
  v110 = floor(v45);
  v111 = floor(v48);
  v112 = ceil(v45 + v109) - v110;
  v113 = ceil(v48 + v211) - v111;
  v114 = v54;
  v115 = floor(v52);
  v116 = v50;
  v117 = floor(v53);
  v118 = ceil(v52 + v116) - v115;
  v119 = ceil(v53 + v114) - v117;
  if (vtPixelRotation_IsValidForSoftware(*(_DWORD *)(v40 + 52), v20, pixelBuffera, v110, v111, v112, v113, v115, v117, v118, v119))
  {
    PlaneCount = 1;
    CVPixelBufferLockBaseAddress(v20, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    if (CVPixelBufferIsPlanar(v20))
      PlaneCount = CVPixelBufferGetPlaneCount(v20);
    v29 = vtPixelRotationSession_PrepareRotationParameters(v20, PlaneCount, v280, (size_t *)v279, (void **)&v275, (size_t *)&v277, (OSType *)(v40 + 72), (_QWORD *)(v40 + 64), v110, v111, v112, v113);
    if ((_DWORD)v29)
      goto LABEL_258;
    v121 = CVPixelBufferIsPlanar(pixelBuffera) ? CVPixelBufferGetPlaneCount(pixelBuffera) : 1;
    v29 = vtPixelRotationSession_PrepareRotationParameters(pixelBuffera, v121, (size_t *)&v273, (size_t *)&v271, (void **)&v267, (size_t *)&v269, (OSType *)(v40 + 72), (_QWORD *)(v40 + 64), v115, v117, v118, v119);
    if ((_DWORD)v29)
      goto LABEL_258;
    v130 = *(_DWORD *)(v40 + 52);
    if (v130)
    {
      if (v99 <= 1815491697)
      {
        if (v99 > 1278226533)
        {
          if (v99 > 1647534391)
          {
            if (v99 > 1717856626)
            {
              if (v99 != 1717856627)
              {
                if (v99 == 1751410032)
                  goto LABEL_383;
                v131 = 1751411059;
                goto LABEL_331;
              }
              goto LABEL_401;
            }
            v135 = v20;
            if (v99 != 1647534392)
            {
              v136 = v99;
              v137 = 1717855600;
LABEL_365:
              v35 = v241;
              v34 = v242;
              v31 = v240;
              v40 = a1;
              v20 = v135;
              if (v136 != v137)
                goto LABEL_440;
              goto LABEL_401;
            }
            v29 = vt_Rotate_b3a8((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (uint64_t)&v275, (size_t *)&v269, (uint64_t)&v267, v130);
            v35 = v241;
            v34 = v242;
            v31 = v240;
            v40 = a1;
            if ((_DWORD)v29)
              goto LABEL_258;
            v188 = *(unsigned __int8 *)(a1 + 56);
            v189 = *(unsigned __int8 *)(a1 + 57);
            if (!(v188 | v189))
              goto LABEL_449;
            v185 = vt_Flip_b3a8(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v188, v189);
            goto LABEL_477;
          }
          if (v99 <= 1278226741)
          {
            if (v99 != 1278226534)
            {
              v131 = 1278226536;
LABEL_331:
              if (v99 != v131)
                goto LABEL_440;
LABEL_383:
              v29 = vt_Rotate_16((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
              if (!(_DWORD)v29)
              {
                v172 = *(unsigned __int8 *)(v40 + 56);
                v173 = *(unsigned __int8 *)(v40 + 57);
                if (v172 | v173)
                {
                  v154 = vt_Flip_16(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v172, v173);
                  goto LABEL_513;
                }
LABEL_403:
                v29 = 0;
LABEL_514:
                v35 = v241;
                v34 = v242;
                v31 = v240;
                v40 = a1;
                goto LABEL_258;
              }
              goto LABEL_258;
            }
LABEL_401:
            v29 = vt_Rotate_32((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
            if (!(_DWORD)v29)
            {
              v178 = *(unsigned __int8 *)(v40 + 56);
              v179 = *(unsigned __int8 *)(v40 + 57);
              if (v178 | v179)
              {
                v154 = vt_Flip_32(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v178, v179);
                goto LABEL_513;
              }
              goto LABEL_403;
            }
            goto LABEL_258;
          }
          if (v99 == 1278226742)
            goto LABEL_383;
          if (v99 == 1380411457)
            goto LABEL_380;
          goto LABEL_440;
        }
        if (v99 > 875836517)
        {
          if (v99 > 1111970368)
          {
            if (v99 == 1111970369)
              goto LABEL_401;
            if (v99 == 1278226488)
            {
              v29 = vt_Rotate_8((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
              if (!(_DWORD)v29)
              {
                v174 = *(unsigned __int8 *)(v40 + 56);
                v175 = *(unsigned __int8 *)(v40 + 57);
                if (v174 | v175)
                {
                  v154 = vt_Flip_8(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v174, v175);
                  goto LABEL_513;
                }
                goto LABEL_403;
              }
LABEL_258:
              CVPixelBufferUnlockBaseAddress(v20, 1uLL);
              CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
              goto LABEL_200;
            }
            goto LABEL_440;
          }
          if (v99 == 875836518)
            goto LABEL_372;
          v160 = 875836534;
        }
        else
        {
          if (v99 <= 875704421)
          {
            if (v99 == 32)
              goto LABEL_401;
            if (v99 != 846624121)
              goto LABEL_440;
            v29 = vt_Rotate_2vuy(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (unint64_t *)&v275, v269.i64, (_BYTE **)&v267, v130);
            if ((_DWORD)v29)
              goto LABEL_258;
            v152 = *(unsigned __int8 *)(v40 + 56);
            v153 = *(unsigned __int8 *)(v40 + 57);
            if (!(v152 | v153))
              goto LABEL_403;
            v154 = vt_Flip_2vuy(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v152, v153);
            goto LABEL_513;
          }
          if (v99 == 875704422)
          {
LABEL_372:
            v29 = vt_Rotate_420v(&v273, (vImagePixelCount *)&v271, (uint64_t)&v277, (uint64_t *)&v275, &v269, (uint64_t)&v267, v130);
            if ((_DWORD)v29)
              goto LABEL_258;
            v167 = *(unsigned __int8 *)(v40 + 56);
            v168 = *(unsigned __int8 *)(v40 + 57);
            if (!(v167 | v168))
              goto LABEL_403;
            v154 = vt_Flip_420v(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v167, v168);
            goto LABEL_513;
          }
          v160 = 875704438;
        }
        if (v99 != v160)
          goto LABEL_440;
        goto LABEL_372;
      }
      if (v99 > 2019963441)
      {
        if (v99 > 2021077553)
        {
          v135 = v20;
          if (v99 > 2021078127)
          {
            if (v99 == 2037741171)
            {
              v29 = vt_Rotate_yuvs(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (unint64_t *)&v275, v269.i64, (_BYTE **)&v267, v130);
              v35 = v241;
              v34 = v242;
              v31 = v240;
              v40 = a1;
              if ((_DWORD)v29)
                goto LABEL_258;
              v183 = *(unsigned __int8 *)(a1 + 56);
              v184 = *(unsigned __int8 *)(a1 + 57);
              if (!(v183 | v184))
              {
LABEL_449:
                v29 = 0;
LABEL_478:
                v35 = v241;
                v34 = v242;
                v31 = v240;
                v40 = a1;
                v20 = v135;
                goto LABEL_258;
              }
              v185 = vt_Flip_yuvs(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v183, v184);
            }
            else
            {
              v136 = v99;
              if (v99 != 2033463856)
              {
                v137 = 2021078128;
                goto LABEL_365;
              }
              v29 = vt_Rotate_y420(&v273, (uint64_t)&v271, (uint64_t)&v277, &v275, &v269, &v267, v130);
              v35 = v241;
              v34 = v242;
              v31 = v240;
              v40 = a1;
              if ((_DWORD)v29)
                goto LABEL_258;
              v186 = *(unsigned __int8 *)(a1 + 56);
              v187 = *(unsigned __int8 *)(a1 + 57);
              if (!(v186 | v187))
                goto LABEL_449;
              v185 = vt_Flip_y420((uint64_t)&v273, (uint64_t)&v271, (uint64_t)&v269, (uint64_t)&v267, (uint64_t)&v269, (uint64_t)&v267, v186, v187);
            }
LABEL_477:
            v29 = v185;
            goto LABEL_478;
          }
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 == 2021077554)
            goto LABEL_398;
          v166 = 13364;
          goto LABEL_388;
        }
        if (v99 > 2019964015)
        {
          if (v99 == 2019964016)
            goto LABEL_401;
          v166 = 12848;
LABEL_388:
          v169 = v166 | 0x78770000;
          goto LABEL_397;
        }
        if (v99 == 2019963442)
          goto LABEL_398;
        v159 = 13364;
LABEL_396:
        v169 = v159 | 0x78660000;
LABEL_397:
        if (v99 != v169)
          goto LABEL_440;
LABEL_398:
        v29 = vt_Rotate_x420(&v273, (vImagePixelCount *)&v271, (uint64_t)&v277, (uint64_t)&v275, &v269, (uint64_t)&v267, v130);
        if (!(_DWORD)v29)
        {
          v176 = *(unsigned __int8 *)(v40 + 56);
          v177 = *(unsigned __int8 *)(v40 + 57);
          if (v176 | v177)
          {
            v154 = vt_Flip_x420(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v176, v177);
            goto LABEL_513;
          }
          goto LABEL_403;
        }
        goto LABEL_258;
      }
      if (v99 > 2016686641)
      {
        if (v99 > 2016687215)
        {
          if (v99 == 2016687216)
            goto LABEL_401;
          v159 = 12848;
          goto LABEL_396;
        }
        if (v99 == 2016686642)
          goto LABEL_398;
        v161 = 13364;
      }
      else
      {
        if (v99 <= 1999843441)
        {
          if (v99 == 1815491698)
          {
LABEL_380:
            v29 = vt_Rotate_64((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
            if ((_DWORD)v29)
              goto LABEL_258;
            v170 = *(unsigned __int8 *)(v40 + 56);
            v171 = *(unsigned __int8 *)(v40 + 57);
            if (!(v170 | v171))
              goto LABEL_403;
            v154 = vt_Flip_64(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v170, v171);
            goto LABEL_513;
          }
          if (v99 != 1983000886)
          {
LABEL_440:
            v158 = FigSignalErrorAt();
            goto LABEL_510;
          }
          v29 = vt_Rotate_v216(v273.i64, (uint64_t *)&v271, (unint64_t *)&v277, (_WORD **)&v275, (unint64_t *)&v269, (char **)&v267, v130);
          if ((_DWORD)v29)
            goto LABEL_258;
          v155 = *(unsigned __int8 *)(v40 + 56);
          v156 = *(unsigned __int8 *)(v40 + 57);
          if (!(v155 | v156))
            goto LABEL_403;
          v154 = vt_Flip_v216(v273.i64, (uint64_t *)&v271, (unint64_t *)&v269, (char **)&v267, (unint64_t *)&v269, (char **)&v267, v155, v156);
LABEL_513:
          v29 = v154;
          goto LABEL_514;
        }
        if (v99 == 1999843442)
          goto LABEL_401;
        v161 = 12848;
      }
      v169 = v161 | 0x78340000;
      goto LABEL_397;
    }
    v132 = *(unsigned __int8 *)(v40 + 56);
    if (*(_BYTE *)(v40 + 56) || *(_BYTE *)(v40 + 57))
    {
      if (v99 <= 1815491697)
      {
        if (v99 > 1278226533)
        {
          if (v99 > 1647534391)
          {
            v133 = v99;
            if (v99 > 1717856626)
            {
              v35 = v241;
              v34 = v242;
              v31 = v240;
              v40 = a1;
              if (v99 != 1717856627)
              {
                if (v99 != 1751410032)
                {
                  v134 = 1751411059;
                  goto LABEL_352;
                }
LABEL_427:
                v158 = vt_Flip_16(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(v40 + 57));
                goto LABEL_510;
              }
LABEL_439:
              v158 = vt_Flip_32(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(v40 + 57));
              goto LABEL_510;
            }
            if (v99 != 1647534392)
            {
              v151 = 1717855600;
LABEL_413:
              v35 = v241;
              v34 = v242;
              v31 = v240;
              v40 = a1;
              if (v133 != v151)
                goto LABEL_440;
              goto LABEL_439;
            }
            v40 = a1;
            v190 = vt_Flip_b3a8(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            goto LABEL_461;
          }
          v133 = v99;
          if (v99 <= 1278226741)
          {
            v35 = v241;
            v34 = v242;
            v31 = v240;
            v40 = a1;
            if (v99 != 1278226534)
            {
              v134 = 1278226536;
LABEL_352:
              if (v133 != v134)
                goto LABEL_440;
              goto LABEL_427;
            }
            goto LABEL_439;
          }
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 == 1278226742)
            goto LABEL_427;
          if (v99 != 1380411457)
            goto LABEL_440;
          goto LABEL_426;
        }
        if (v99 > 875836517)
        {
          v157 = v99;
          if (v99 > 1111970368)
          {
            v35 = v241;
            v34 = v242;
            v31 = v240;
            v40 = a1;
            if (v99 == 1111970369)
              goto LABEL_439;
            if (v99 != 1278226488)
              goto LABEL_440;
            v158 = vt_Flip_8(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            goto LABEL_510;
          }
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 != 875836518)
          {
            v164 = 875836534;
            goto LABEL_419;
          }
        }
        else
        {
          v157 = v99;
          if (v99 <= 875704421)
          {
            v35 = v241;
            v34 = v242;
            v31 = v240;
            v40 = a1;
            if (v99 == 32)
              goto LABEL_439;
            if (v99 != 846624121)
              goto LABEL_440;
            v158 = vt_Flip_2vuy(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            goto LABEL_510;
          }
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 != 875704422)
          {
            v164 = 875704438;
LABEL_419:
            if (v157 != v164)
              goto LABEL_440;
          }
        }
        v158 = vt_Flip_420v(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (uint64_t *)&v275, v269.i64, (uint64_t *)&v267, v132, *(unsigned __int8 *)(v40 + 57));
        goto LABEL_510;
      }
      if (v99 > 2019963441)
      {
        if (v99 > 2021077553)
        {
          v133 = v99;
          if (v99 > 2021078127)
          {
            if (v99 == 2037741171)
            {
              v40 = a1;
              v190 = vt_Flip_yuvs(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            }
            else
            {
              if (v99 != 2033463856)
              {
                v151 = 2021078128;
                goto LABEL_413;
              }
              v40 = a1;
              v190 = vt_Flip_y420((uint64_t)&v273, (uint64_t)&v271, (uint64_t)&v277, (uint64_t)&v275, (uint64_t)&v269, (uint64_t)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            }
LABEL_461:
            v29 = v190;
            v35 = v241;
            v34 = v242;
            v31 = v240;
            goto LABEL_258;
          }
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 != 2021077554)
          {
            v181 = 13364;
LABEL_430:
            v182 = v181 | 0x78770000;
            goto LABEL_437;
          }
          goto LABEL_438;
        }
        v133 = v99;
        if (v99 > 2019964015)
        {
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 == 2019964016)
            goto LABEL_439;
          v181 = 12848;
          goto LABEL_430;
        }
        v35 = v241;
        v34 = v242;
        v31 = v240;
        v40 = a1;
        if (v99 == 2019963442)
        {
LABEL_438:
          v158 = vt_Flip_x420(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (uint64_t *)&v275, v269.i64, (uint64_t *)&v267, v132, *(unsigned __int8 *)(v40 + 57));
          goto LABEL_510;
        }
        v163 = 13364;
LABEL_436:
        v182 = v163 | 0x78660000;
LABEL_437:
        if (v133 != v182)
          goto LABEL_440;
        goto LABEL_438;
      }
      if (v99 > 2016686641)
      {
        v133 = v99;
        if (v99 > 2016687215)
        {
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 == 2016687216)
            goto LABEL_439;
          v163 = 12848;
          goto LABEL_436;
        }
        v35 = v241;
        v34 = v242;
        v31 = v240;
        v40 = a1;
        if (v99 == 2016686642)
          goto LABEL_438;
        v165 = 13364;
      }
      else
      {
        v133 = v99;
        if (v99 <= 1999843441)
        {
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if (v99 == 1815491698)
          {
LABEL_426:
            v158 = vt_Flip_64(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(v40 + 57));
            goto LABEL_510;
          }
          if (v99 != 1983000886)
            goto LABEL_440;
          v158 = vt_Flip_v216(v273.i64, (uint64_t *)&v271, (unint64_t *)&v277, (char **)&v275, (unint64_t *)&v269, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
LABEL_510:
          v29 = v158;
          goto LABEL_258;
        }
        v35 = v241;
        v34 = v242;
        v31 = v240;
        v40 = a1;
        if (v99 == 1999843442)
          goto LABEL_439;
        v165 = 12848;
      }
      v182 = v165 | 0x78340000;
      goto LABEL_437;
    }
    if (v99 <= 1815491697)
    {
      if (v99 > 1278226533)
      {
        if (v99 > 1647534391)
        {
          if (v99 > 1717856626)
          {
            if (v99 != 1717856627)
            {
              if (v99 != 1751410032)
              {
                v162 = 1751411059;
                goto LABEL_465;
              }
LABEL_496:
              v203 = (char *)v275;
              v204 = v277;
              v205 = (char *)v267;
              v206 = v269.i64[0];
              v207 = v273.i64[0];
              v208 = v271;
              v209 = 2;
              goto LABEL_512;
            }
LABEL_511:
            v203 = (char *)v275;
            v204 = v277;
            v205 = (char *)v267;
            v206 = v269.i64[0];
            v207 = v273.i64[0];
            v208 = v271;
            v209 = 4;
            goto LABEL_512;
          }
          if (v99 != 1647534392)
          {
            v180 = 1717855600;
LABEL_481:
            if (v99 != v180)
              goto LABEL_521;
            goto LABEL_511;
          }
          v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 4);
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if ((_DWORD)v29)
            goto LABEL_258;
          v195 = (char *)*((_QWORD *)&v275 + 1);
          v196 = *((_QWORD *)&v277 + 1);
          v197 = (char *)*((_QWORD *)&v267 + 1);
          v198 = v269.i64[1];
          v199 = v273.i64[1];
          v200 = *((_QWORD *)&v271 + 1);
          goto LABEL_520;
        }
        if (v99 <= 1278226741)
        {
          if (v99 == 1278226534)
            goto LABEL_511;
          v162 = 1278226536;
          goto LABEL_465;
        }
        if (v99 == 1278226742)
          goto LABEL_496;
        if (v99 == 1380411457)
        {
LABEL_495:
          v203 = (char *)v275;
          v204 = v277;
          v205 = (char *)v267;
          v206 = v269.i64[0];
          v207 = v273.i64[0];
          v208 = v271;
          v209 = 8;
LABEL_512:
          v154 = vtCopyPlane(v203, v204, v205, v206, v207, v208, v209);
          goto LABEL_513;
        }
LABEL_521:
        v154 = FigSignalErrorAt();
        goto LABEL_513;
      }
      if (v99 > 875836517)
      {
        if (v99 > 1111970368)
        {
          if (v99 == 1111970369)
            goto LABEL_511;
          if (v99 == 1278226488)
          {
            v203 = (char *)v275;
            v204 = v277;
            v205 = (char *)v267;
            v206 = v269.i64[0];
            v207 = v273.i64[0];
            v208 = v271;
            v209 = 1;
            goto LABEL_512;
          }
          goto LABEL_521;
        }
        if (v99 == 875836518)
          goto LABEL_488;
        v192 = 875836534;
      }
      else
      {
        if (v99 <= 875704421)
        {
          if (v99 == 32)
            goto LABEL_511;
          v162 = 846624121;
LABEL_465:
          if (v99 != v162)
            goto LABEL_521;
          goto LABEL_496;
        }
        if (v99 == 875704422)
        {
LABEL_488:
          v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 1);
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if ((_DWORD)v29)
            goto LABEL_258;
          v195 = (char *)*((_QWORD *)&v275 + 1);
          v196 = *((_QWORD *)&v277 + 1);
          v197 = (char *)*((_QWORD *)&v267 + 1);
          v198 = v269.i64[1];
          v199 = v273.i64[1];
          v200 = *((_QWORD *)&v271 + 1);
          v201 = 2;
LABEL_509:
          v158 = vtCopyPlane(v195, v196, v197, v198, v199, v200, v201);
          goto LABEL_510;
        }
        v192 = 875704438;
      }
      if (v99 != v192)
        goto LABEL_521;
      goto LABEL_488;
    }
    if (v99 > 2019963441)
    {
      if (v99 > 2021077553)
      {
        if (v99 > 2021078127)
        {
          if (v99 == 2037741171)
            goto LABEL_496;
          if (v99 != 2033463856)
          {
            v180 = 2021078128;
            goto LABEL_481;
          }
          v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 1);
          v35 = v241;
          v34 = v242;
          v31 = v240;
          v40 = a1;
          if ((_DWORD)v29)
            goto LABEL_258;
          v29 = vtCopyPlane(*((char **)&v275 + 1), *((uint64_t *)&v277 + 1), *((char **)&v267 + 1), v269.i64[1], v273.i64[1], *((uint64_t *)&v271 + 1), 1);
          if ((_DWORD)v29)
            goto LABEL_258;
          v195 = (char *)v276;
          v196 = v278;
          v197 = (char *)v268;
          v198 = v270;
          v199 = v274;
          v200 = v272;
LABEL_520:
          v201 = 1;
          goto LABEL_509;
        }
        if (v99 != 2021077554)
        {
          v194 = 13364;
LABEL_499:
          v202 = v194 | 0x78770000;
          goto LABEL_506;
        }
        goto LABEL_507;
      }
      if (v99 > 2019964015)
      {
        if (v99 == 2019964016)
          goto LABEL_511;
        v194 = 12848;
        goto LABEL_499;
      }
      if (v99 == 2019963442)
      {
LABEL_507:
        v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 2);
        v35 = v241;
        v34 = v242;
        v31 = v240;
        v40 = a1;
        if ((_DWORD)v29)
          goto LABEL_258;
        v195 = (char *)*((_QWORD *)&v275 + 1);
        v196 = *((_QWORD *)&v277 + 1);
        v197 = (char *)*((_QWORD *)&v267 + 1);
        v198 = v269.i64[1];
        v199 = v273.i64[1];
        v200 = *((_QWORD *)&v271 + 1);
        v201 = 4;
        goto LABEL_509;
      }
      v191 = 13364;
LABEL_505:
      v202 = v191 | 0x78660000;
LABEL_506:
      if (v99 != v202)
        goto LABEL_521;
      goto LABEL_507;
    }
    if (v99 > 2016686641)
    {
      if (v99 > 2016687215)
      {
        if (v99 == 2016687216)
          goto LABEL_511;
        v191 = 12848;
        goto LABEL_505;
      }
      if (v99 == 2016686642)
        goto LABEL_507;
      v193 = 13364;
    }
    else
    {
      if (v99 <= 1999843441)
      {
        if (v99 != 1815491698)
        {
          v180 = 1983000886;
          goto LABEL_481;
        }
        goto LABEL_495;
      }
      if (v99 == 1999843442)
        goto LABEL_511;
      v193 = 12848;
    }
    v202 = v193 | 0x78340000;
    goto LABEL_506;
  }
  v29 = FigSignalErrorAt();
LABEL_220:
  v37 = v213;
LABEL_221:
  if (*(_BYTE *)(v40 + 232))
  {
    v36 = cf;
    v30 = buffera;
    if (!*(_BYTE *)(v40 + 233))
    {
      v257 = (CFTypeRef)CVPixelBufferGetWidth(pixelBuffera);
      v258 = CVPixelBufferGetHeight(pixelBuffera);
      v259 = vcvtq_s64_f64(v250);
      v260 = vcvtq_s64_f64(v249);
      v29 = VTFillPixelsOutsideDestRectWithBlack(pixelBuffera, (uint64_t *)&v257, (uint64_t **)(v40 + 64));
      if ((_DWORD)v29)
        goto LABEL_227;
    }
  }
  else
  {
    v36 = cf;
    v30 = buffera;
  }
  *(_BYTE *)(v40 + 32) = 1;
LABEL_227:
  v33 = v212;
  v32 = v214;
LABEL_4:
  if (v36)
    CFRelease(v36);
  if (v34)
    CFRelease(v34);
  if (v245)
    CFRelease(v245);
  if (v244)
    CFRelease(v244);
  if (v37)
    CFRelease(v37);
  if (v35)
    CFRelease(v35);
  if (v243)
    CFRelease(v243);
  if (v30)
    CFRelease(v30);
  if (v31)
    CFRelease(v31);
  if (v32)
    CFRelease(v32);
  if (v33)
    CFRelease(v33);
  return v29;
}

uint64_t VTPixelRotationSessionFlush(uint64_t a1, CVOptionFlags a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40);
  if (!v4 || (result = VTPixelTransferChainFlush(v4, a2), !(_DWORD)result))
  {
    result = *(_QWORD *)(a1 + 136);
    if (result)
      return VTMetalTransferSessionFlush(result, a2);
  }
  return result;
}

void VTPixelTransferNodeRotationFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  free(*(void **)(DerivedStorage + 40));
  *(_QWORD *)(DerivedStorage + 40) = 0;
  VTPixelTransferNodeBaseFinalize();
}

const __CFString *VTPixelTransferNodeRotationCopyDebugDescription()
{
  return CFSTR("[VTPixelTransferNodeRotation]");
}

uint64_t VTPixelTransferNodeRotationDoTransfer(uint64_t a1, __CVBuffer *a2, double *a3, __CVBuffer *a4, double *a5)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t DerivedStorage;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  size_t PlaneCount;
  uint64_t v29;
  size_t v30;
  uint64_t (*v32)(_OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *);
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  memset(v40, 0, sizeof(v40));
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  memset(v37, 0, sizeof(v37));
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  v7 = a3[2];
  v8 = a3[3];
  v9 = a3[4];
  v10 = a3[5];
  v11 = a5[2];
  v12 = a5[3];
  v13 = a5[4];
  v14 = a5[5];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = floor(v7);
  v17 = floor(v8);
  v18 = ceil(v7 + v9) - v16;
  v19 = ceil(v8 + v10) - v17;
  v20 = floor(v11);
  v21 = floor(v12);
  v22 = v11 + v13;
  v23 = v16;
  v24 = ceil(v22) - v20;
  v25 = v12 + v14;
  v26 = v17;
  v27 = ceil(v25) - v21;
  if (!vtPixelRotation_IsValidForSoftware(*(_DWORD *)(DerivedStorage + 32), a2, a4, v16, v17, v18, v19, v20, v21, v24, v27))return FigSignalErrorAt();
  PlaneCount = 1;
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a4, 0);
  if (CVPixelBufferIsPlanar(a2))
    PlaneCount = CVPixelBufferGetPlaneCount(a2);
  v29 = vtPixelRotationSession_PrepareRotationParameters(a2, PlaneCount, (size_t *)v40, (size_t *)v39, (void **)v37, (size_t *)v38, (OSType *)(DerivedStorage + 36), (_QWORD *)(DerivedStorage + 40), v23, v26, v18, v19);
  if (!(_DWORD)v29)
  {
    if (CVPixelBufferIsPlanar(a4))
      v30 = CVPixelBufferGetPlaneCount(a4);
    else
      v30 = 1;
    v29 = vtPixelRotationSession_PrepareRotationParameters(a4, v30, (size_t *)v36, (size_t *)v35, (void **)v33, (size_t *)v34, (OSType *)(DerivedStorage + 36), (_QWORD *)(DerivedStorage + 40), v20, v21, v24, v27);
    if (!(_DWORD)v29)
    {
      v32 = *(uint64_t (**)(_OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *))(DerivedStorage + 24);
      if (v32)
        v29 = v32(v40, v39, v38, v37, v36, v35, v34, v33);
      else
        v29 = 0;
    }
  }
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(a4, 0);
  return v29;
}

uint64_t vtPixelRotation_IsValidForSoftware(int a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  OSType PixelFormatType;
  OSType v23;
  size_t Width;
  size_t Height;
  size_t v26;
  size_t v27;
  unint64_t v28;
  uint64_t result;

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v23 = CVPixelBufferGetPixelFormatType(a3);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v26 = CVPixelBufferGetWidth(a3);
  v27 = CVPixelBufferGetHeight(a3);
  if (PixelFormatType != v23 || a4 < 0.0)
    return 0;
  v28 = v27;
  result = 0;
  if (a4 + a6 > (double)Width || a5 < 0.0 || a5 + a7 > (double)Height)
    return result;
  if (a8 < 0.0)
    return 0;
  result = 0;
  if (a8 + a10 > (double)v26 || a9 < 0.0 || a9 + a11 > (double)v28)
    return result;
  if (a1 <= 179)
  {
    if (a1)
      goto LABEL_19;
    goto LABEL_17;
  }
  if (a1 != 270)
  {
    if (a1 != 180)
      return 1;
LABEL_17:
    result = 0;
    if (a6 != a10 || a7 != a11)
      return result;
LABEL_19:
    if (a1 == 90)
      goto LABEL_20;
    return 1;
  }
LABEL_20:
  result = 0;
  if (a6 == a11 && a7 == a10)
    return 1;
  return result;
}

uint64_t vtPixelRotationSession_PrepareRotationParameters(__CVBuffer *a1, size_t a2, size_t *a3, size_t *a4, void **a5, size_t *a6, OSType *a7, _QWORD *a8, double a9, double a10, double a11, double a12)
{
  BOOL v22;
  unint64_t v23;
  size_t Height;
  size_t v25;
  OSType PixelFormatType;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t PixelFormatPixelBlockInfo;
  size_t v33;
  char v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  unint64_t *v40;
  size_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v47;
  BOOL v48;
  unint64_t v49;
  size_t Width;
  unint64_t v52;
  OSType pixelFormat;

  v22 = a10 != 0.0 || a9 != 0.0;
  v23 = (unint64_t)a11;
  Width = CVPixelBufferGetWidth(a1);
  v52 = (unint64_t)a12;
  Height = CVPixelBufferGetHeight(a1);
  v25 = Height;
  v48 = v22;
  v49 = v23;
  if (!v22 && Width == v23 && Height == v52)
  {
LABEL_18:
    if (CVPixelBufferIsPlanar(a1))
    {
      if (!a2)
        return 0;
      v33 = 0;
      do
      {
        a3[v33] = CVPixelBufferGetWidthOfPlane(a1, v33);
        a4[v33] = CVPixelBufferGetHeightOfPlane(a1, v33);
        a5[v33] = CVPixelBufferGetBaseAddressOfPlane(a1, v33);
        a6[v33] = CVPixelBufferGetBytesPerRowOfPlane(a1, v33);
        ++v33;
      }
      while (a2 != v33);
    }
    else
    {
      *a3 = CVPixelBufferGetWidth(a1);
      *a4 = CVPixelBufferGetHeight(a1);
      *a5 = CVPixelBufferGetBaseAddress(a1);
      *a6 = CVPixelBufferGetBytesPerRow(a1);
    }
    v34 = !v48;
    if (!a2)
      v34 = 1;
    if ((v34 & 1) == 0)
    {
      v35 = 0;
      v36 = a2;
      do
      {
        v37 = (_QWORD *)(*a8 + v35);
        v38 = *a6++;
        *a5 = (char *)*a5
            + (v37[2] >> 3) * ((unint64_t)a9 / (v37[3] * *v37))
            + v38 * ((unint64_t)a10 / (v37[4] * v37[1]));
        ++a5;
        v35 += 112;
        --v36;
      }
      while (v36);
    }
    v39 = v25;
    if (Width != v49 && a2)
    {
      v40 = (unint64_t *)(*a8 + 24);
      v41 = a2;
      do
      {
        v42 = *v40;
        v40 += 14;
        *a3++ = (v49 - 1 + v42) / v42;
        --v41;
      }
      while (v41);
    }
    v43 = 0;
    if (v39 == v52 || !a2)
      return v43;
    v44 = (unint64_t *)(*a8 + 32);
    do
    {
      v45 = *v44;
      v44 += 14;
      *a4++ = (v52 - 1 + v45) / v45;
      --a2;
    }
    while (a2);
    return 0;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v28 = (void *)*a8;
  pixelFormat = PixelFormatType;
  if (*a7 == PixelFormatType)
  {
    if (v28)
      goto LABEL_18;
  }
  else
  {
    free(v28);
    *a8 = 0;
    *a7 = 0;
  }
  v47 = a8;
  v29 = malloc_type_calloc(a2, 0x70uLL, 0x100004081F0E799uLL);
  if (!a2)
  {
LABEL_17:
    *a7 = pixelFormat;
    *v47 = v29;
    a8 = v47;
    goto LABEL_18;
  }
  v30 = 0;
  v31 = 0;
  while (1)
  {
    PixelFormatPixelBlockInfo = VTBlackFillGetPixelFormatPixelBlockInfo(pixelFormat, v31, &v29[v30], &v29[v30 + 8], &v29[v30 + 16], &v29[v30 + 24], &v29[v30 + 32], &v29[v30 + 105], &v29[v30 + 40], &v29[v30 + 104], &v29[v30 + 106], &v29[v30 + 110]);
    if ((_DWORD)PixelFormatPixelBlockInfo)
      break;
    ++v31;
    v30 += 112;
    if (a2 == v31)
      goto LABEL_17;
  }
  v43 = PixelFormatPixelBlockInfo;
  free(v29);
  return v43;
}

double vtPixelRotationSessionInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 416) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void vtPixelRotationSessionFinalize(uint64_t a1)
{
  void (*v2)(void);
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  if (a1 && !*(_BYTE *)(a1 + 16))
    *(_BYTE *)(a1 + 16) = 1;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = *(void (**)(void))(a1 + 160);
    if (v2)
    {
      v2();
      *(_QWORD *)(a1 + 168) = 0;
    }
  }
  free(*(void **)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(const void **)(a1 + 176);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v4 = *(const void **)(a1 + 184);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v5 = *(const void **)(a1 + 192);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v6 = *(const void **)(a1 + 200);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 200) = 0;
  }
  v7 = *(const void **)(a1 + 224);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v8 = *(const void **)(a1 + 136);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v9 = *(const void **)(a1 + 144);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v10 = *(const void **)(a1 + 376);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 376) = 0;
  }
  v11 = *(const void **)(a1 + 384);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 384) = 0;
  }
  v12 = *(const void **)(a1 + 392);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 392) = 0;
  }
  v13 = *(const void **)(a1 + 400);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 400) = 0;
  }
  v14 = *(const void **)(a1 + 408);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 408) = 0;
  }
  v15 = *(const void **)(a1 + 416);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 416) = 0;
  }
  v16 = *(const void **)(a1 + 40);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

CFTypeRef vtPixelRotationSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTPixelRotationSession]"));
}

__CFString *vtPixelRotationSessionCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTPixelRotationSession %p [%p]>{"), a1, v4);
  CFStringAppendFormat(Mutable, 0, CFSTR("}"));
  return Mutable;
}

uint64_t vtPixelRotationChainDoTransfer(uint64_t result, CVPixelBufferRef pixelBuffer, __int128 *a3, __CVBuffer *a4, __int128 *a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12[3];
  __int128 v13[3];

  if (result)
  {
    v9 = result;
    *(_QWORD *)&v13[0] = CVPixelBufferGetWidth(pixelBuffer);
    *((_QWORD *)&v13[0] + 1) = CVPixelBufferGetHeight(pixelBuffer);
    v10 = a3[1];
    v13[1] = *a3;
    v13[2] = v10;
    *(_QWORD *)&v12[0] = CVPixelBufferGetWidth(a4);
    *((_QWORD *)&v12[0] + 1) = CVPixelBufferGetHeight(a4);
    v11 = a5[1];
    v12[1] = *a5;
    v12[2] = v11;
    return VTPixelTransferChainDoTransfer(v9, pixelBuffer, v13, a4, v12);
  }
  return result;
}

uint64_t vtPixelRotation_BuildChain(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, const __CFDictionary *a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned __int8 a17, unsigned __int8 a18, uint64_t a19, char a20,uint64_t a21,_BYTE *a22)
{
  signed int PixelFormatType;
  uint64_t v34;
  uint64_t appended;
  __CFDictionary *v36;
  __CFDictionary *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void *v41;
  void *v42;
  int v43;
  int v44;
  const __CFAllocator *v45;
  const CFDictionaryKeyCallBacks *v46;
  const CFDictionaryValueCallBacks *v47;
  CFMutableDictionaryRef Mutable;
  const CFDictionaryValueCallBacks *v49;
  __CFDictionary *v50;
  const void **v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t (*v55)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **);
  uint64_t (*v56)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **);
  uint64_t v57;
  uint64_t (*v58)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **);
  uint64_t (*v59)(uint64_t *, uint64_t, uint64_t *, uint64_t *, _QWORD *, uint64_t *, uint64_t *, uint64_t *);
  void *key;
  void *v62;
  void *v63;
  void *v64;
  void *value;
  void *v66;
  void *v67;
  void *v68;
  __CFDictionary *theDict;
  OSType v70;
  __CFDictionary *cf;
  CFTypeRef v73[2];

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v70 = CVPixelBufferGetPixelFormatType(a3);
  v73[0] = 0;
  v34 = a1;
  VTPixelTransferChainRemoveAllNodes(a1);
  if (a6 && !VTAvoidHardwarePixelTransfer())
  {
    appended = VTPixelTransferChainAppendCelesteRotationNode(a1, a8, a17, a18, 0);
    if (!(_DWORD)appended)
    {
      v39 = 0;
      *(_DWORD *)(a21 + 128) = 3;
      goto LABEL_278;
    }
  }
  else
  {
    appended = 0;
  }
  if (!a7
    || VTAvoidHardwarePixelTransfer()
    || (v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        VTMetalTransferSessionCreate(*MEMORY[0x1E0C9AE00], 0, (uint64_t)v73),
        !v73[0]))
  {
    v36 = 0;
    v37 = 0;
    cf = 0;
LABEL_7:
    v38 = a21;
    goto LABEL_8;
  }
  v46 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v47 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  theDict = CFDictionaryCreateMutable(v45, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Mutable = CFDictionaryCreateMutable(v45, 0, v46, v47);
  v49 = v47;
  v37 = Mutable;
  v50 = CFDictionaryCreateMutable(v45, 0, v46, v49);
  key = (void *)*MEMORY[0x1E0CA8D68];
  value = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8D68]);
  v62 = (void *)*MEMORY[0x1E0CA8E98];
  v66 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8E98]);
  v63 = (void *)*MEMORY[0x1E0CA8EE8];
  v67 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8EE8]);
  v64 = (void *)*MEMORY[0x1E0CA8E40];
  v68 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8E40]);
  VTMetalTransferSessionSetProperties(v73[0], a19);
  if (a8)
    FigCFDictionarySetInt();
  v51 = (const void **)MEMORY[0x1E0C9AE50];
  if (a17)
    CFDictionarySetValue(v37, CFSTR("FlipHorizontalOrientation"), (const void *)*MEMORY[0x1E0C9AE50]);
  cf = v50;
  if (a18)
    CFDictionarySetValue(v37, CFSTR("FlipVerticalOrientation"), *v51);
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  if (value)
    CFDictionarySetValue(v50, key, value);
  v36 = theDict;
  if (v66)
    CFDictionarySetValue(v50, v62, v66);
  if (v67)
    CFDictionarySetValue(v50, v63, v67);
  if (v68)
    CFDictionarySetValue(v50, v64, v68);
  CFDictionarySetValue(theDict, CFSTR("SourceAmendments"), v37);
  CFDictionarySetValue(theDict, CFSTR("DestinationAmendments"), v50);
  if (a20)
    CFDictionarySetValue(theDict, CFSTR("SetGPUPriorityLow"), (const void *)*MEMORY[0x1E0C9AE50]);
  v52 = VTMetalTransferSessionTransferImageSync((const __CFArray *)v73[0], pixelBuffer, a3, theDict);
  if ((_DWORD)v52)
  {
    appended = v52;
    goto LABEL_7;
  }
  v38 = a21;
  if (a22)
    *a22 = 1;
  *(_DWORD *)(a21 + 128) = 2;
  v57 = VTPixelTransferChainAppendNode(v34, v73[0]);
  if ((_DWORD)v57)
  {
    appended = v57;
LABEL_8:
    if (a5)
    {
      v39 = 4294954382;
      goto LABEL_272;
    }
    if (a8 != 180 && a8)
    {
      v39 = 4294954382;
      if (a11 != a16 || a12 != a15)
        goto LABEL_272;
    }
    else
    {
      v39 = 4294954382;
      if (a11 != a15 || a12 != a16)
        goto LABEL_272;
    }
    if (PixelFormatType != v70)
      goto LABEL_271;
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType > 2019963439)
      {
        if (PixelFormatType > 2021078067)
        {
          if (PixelFormatType > 2033463855)
          {
            if (PixelFormatType == 2033463856)
            {
              v40 = a18 | a17;
              if (a8 || v40)
              {
                v42 = 0;
                if (a8 == 90)
                  v41 = vt_Rotate_y420_90CW;
                else
                  v41 = vt_Rotate_y420_180;
                if (a8 != 90 && a8 != 180)
                {
                  v42 = 0;
                  if (a8 == 270)
                    v41 = vt_Rotate_y420_90CCW;
                  else
                    v41 = 0;
                }
              }
              else
              {
                v41 = 0;
                v42 = vt_Copy_y420_Crop;
              }
              v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_y420_Hor;
              if (!a17)
                v55 = 0;
              v56 = vt_Flip_y420_Ver;
              goto LABEL_261;
            }
            if (PixelFormatType == 2037741158 || PixelFormatType == 2037741171)
            {
              v40 = a18 | a17;
              if (a8 || v40)
              {
                v42 = 0;
                if (a8 == 90)
                  v41 = vt_Rotate_yuvs_90CW;
                else
                  v41 = vt_Rotate_yuvs_180;
                if (a8 != 90 && a8 != 180)
                {
                  v42 = 0;
                  if (a8 == 270)
                    v41 = vt_Rotate_yuvs_90CCW;
                  else
                    v41 = 0;
                }
              }
              else
              {
                v41 = 0;
                v42 = vt_Copy_NonPlanar16_Crop;
              }
              v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_yuvs_Hor;
              if (!a17)
                v55 = 0;
              v56 = vt_Flip_yuvs_Ver;
LABEL_261:
              if (a18)
                v58 = v56;
              else
                v58 = v55;
              if (!v40 && v42)
              {
                appended = VTPixelTransferChainAppendSoftwareNode();
                v40 = 0;
                *(_DWORD *)(v38 + 128) = 1;
              }
              goto LABEL_267;
            }
LABEL_190:
            v58 = 0;
            if (a18 | a17)
            {
LABEL_269:
              v39 = VTPixelTransferChainAppendRotationNode(v34, (uint64_t)v58);
              *(_DWORD *)(v38 + 128) = 1;
              goto LABEL_272;
            }
LABEL_271:
            v39 = appended;
            goto LABEL_272;
          }
          if (PixelFormatType != 2021078068)
          {
            v44 = 2021078128;
            goto LABEL_126;
          }
LABEL_107:
          v40 = a18 | a17;
          if (a8 || v40)
          {
            v42 = 0;
            if (a8 == 90)
              v41 = vt_Rotate_x420_90CW;
            else
              v41 = vt_Rotate_x420_180;
            if (a8 != 90 && a8 != 180)
            {
              v42 = 0;
              if (a8 == 270)
                v41 = vt_Rotate_x420_90CCW;
              else
                v41 = 0;
            }
          }
          else
          {
            v41 = 0;
            v42 = vt_Copy_x420_Crop;
            if (PixelFormatType != 2016686640 && PixelFormatType != 2019963440 && PixelFormatType != 2021077552)
            {
              v41 = 0;
              v42 = vt_Copy_x444_Crop;
            }
          }
          v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_x420_Hor;
          if (!a17)
            v55 = 0;
          v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_x420_Ver;
          goto LABEL_261;
        }
        if (PixelFormatType > 2019964015)
        {
          if (PixelFormatType == 2019964016)
            goto LABEL_127;
          v53 = 2021077552;
        }
        else
        {
          if (PixelFormatType == 2019963440)
            goto LABEL_107;
          v53 = 2019963956;
        }
LABEL_96:
        if (PixelFormatType != v53)
          goto LABEL_190;
        goto LABEL_107;
      }
      if (PixelFormatType <= 1999843441)
      {
        if (PixelFormatType <= 1815491697)
        {
          if (PixelFormatType == 1751410032)
            goto LABEL_91;
          v43 = 1751411059;
          goto LABEL_90;
        }
        if (PixelFormatType != 1815491698)
        {
          if (PixelFormatType == 1983000886)
          {
            v40 = a18 | a17;
            if (a8 || v40)
            {
              v42 = 0;
              if (a8 == 90)
                v41 = vt_Rotate_v216_90CW;
              else
                v41 = vt_Rotate_v216_180;
              if (a8 != 90 && a8 != 180)
              {
                v42 = 0;
                if (a8 == 270)
                  v41 = vt_Rotate_v216_90CCW;
                else
                  v41 = 0;
              }
            }
            else
            {
              v41 = 0;
              v42 = vt_Copy_NonPlanar32_Crop;
            }
            v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_v216_Hor;
            if (!a17)
              v55 = 0;
            v56 = vt_Flip_v216_Ver;
            goto LABEL_261;
          }
          goto LABEL_190;
        }
LABEL_144:
        v40 = a18 | a17;
        if (a8 || v40)
        {
          if (a8 == 90)
            v41 = vt_Rotate_64_90CW;
          else
            v41 = vt_Rotate_64_180;
          if (a8 != 90 && a8 != 180)
          {
            if (a8 == 270)
              v41 = vt_Rotate_64_90CCW;
            else
              v41 = 0;
          }
        }
        else
        {
          v41 = 0;
        }
        v59 = vt_Flip_64_Hor;
        if (!a17)
          v59 = 0;
        if (a18)
          v58 = vt_Flip_64_Ver;
        else
          v58 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))v59;
LABEL_267:
        if (v41)
        {
          appended = VTPixelTransferChainAppendRotationNode(v34, (uint64_t)v41);
          *(_DWORD *)(v38 + 128) = 1;
          if (v40)
            goto LABEL_269;
        }
        else if (v40)
        {
          goto LABEL_269;
        }
        goto LABEL_271;
      }
      if (PixelFormatType <= 2016687155)
      {
        if (PixelFormatType == 1999843442)
          goto LABEL_127;
        v53 = 2016686640;
        goto LABEL_96;
      }
      if (PixelFormatType == 2016687156)
        goto LABEL_107;
      v44 = 2016687216;
      goto LABEL_126;
    }
    if (PixelFormatType > 1278226487)
    {
      if (PixelFormatType > 1380411456)
      {
        if (PixelFormatType <= 1717855599)
        {
          if (PixelFormatType != 1380411457)
          {
            if (PixelFormatType == 1647534392)
            {
              v40 = a18 | a17;
              if (a8 || v40)
              {
                v42 = 0;
                if (a8 == 90)
                  v41 = vt_Rotate_b3a8_90CW;
                else
                  v41 = vt_Rotate_b3a8_180;
                if (a8 != 90 && a8 != 180)
                {
                  v42 = 0;
                  if (a8 == 270)
                    v41 = vt_Rotate_b3a8_90CCW;
                  else
                    v41 = 0;
                }
              }
              else
              {
                v41 = 0;
                v42 = vt_Copy_b3a8_b3a8_Crop;
              }
              v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_b3a8_Hor;
              if (!a17)
                v55 = 0;
              v56 = vt_Flip_b3a8_Ver;
              goto LABEL_261;
            }
            goto LABEL_190;
          }
          goto LABEL_144;
        }
        if (PixelFormatType == 1717855600)
          goto LABEL_127;
        v44 = 1717856627;
      }
      else
      {
        if (PixelFormatType > 1278226535)
        {
          if (PixelFormatType == 1278226536)
            goto LABEL_91;
          v43 = 1278226742;
LABEL_90:
          if (PixelFormatType != v43)
            goto LABEL_190;
LABEL_91:
          v40 = a18 | a17;
          if (a8 || v40)
          {
            v42 = 0;
            if (a8 == 90)
              v41 = vt_Rotate_16_90CW;
            else
              v41 = vt_Rotate_16_180;
            if (a8 != 90 && a8 != 180)
            {
              v42 = 0;
              if (a8 == 270)
                v41 = vt_Rotate_16_90CCW;
              else
                v41 = 0;
            }
          }
          else
          {
            v41 = 0;
            v42 = vt_Copy_NonPlanar16_Crop;
          }
          v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_16_Hor;
          if (!a17)
            v55 = 0;
          v56 = vt_Flip_16_Ver;
          goto LABEL_261;
        }
        if (PixelFormatType == 1278226488)
        {
          v40 = a18 | a17;
          if (a8 || v40)
          {
            v42 = 0;
            if (a8 == 90)
              v41 = vt_Rotate_8_90CW;
            else
              v41 = vt_Rotate_8_180;
            if (a8 != 90 && a8 != 180)
            {
              v42 = 0;
              if (a8 == 270)
                v41 = vt_Rotate_8_90CCW;
              else
                v41 = 0;
            }
          }
          else
          {
            v41 = 0;
            v42 = vt_Copy_NonPlanar8_Crop;
          }
          v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_8_Hor;
          if (!a17)
            v55 = 0;
          v56 = vt_Flip_8_Ver;
          goto LABEL_261;
        }
        v44 = 1278226534;
      }
LABEL_126:
      if (PixelFormatType != v44)
        goto LABEL_190;
LABEL_127:
      v40 = a18 | a17;
      if (a8 || v40)
      {
        v42 = 0;
        if (a8 == 90)
          v41 = vt_Rotate_32_90CW;
        else
          v41 = vt_Rotate_32_180;
        if (a8 != 90 && a8 != 180)
        {
          v42 = 0;
          if (a8 == 270)
            v41 = vt_Rotate_32_90CCW;
          else
            v41 = 0;
        }
      }
      else
      {
        v41 = 0;
        v42 = vt_Copy_NonPlanar32_Crop;
      }
      v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_32_Hor;
      if (!a17)
        v55 = 0;
      v56 = vt_Flip_32_Ver;
      goto LABEL_261;
    }
    if (PixelFormatType > 875704437)
    {
      if (PixelFormatType > 875836533)
      {
        if (PixelFormatType != 875836534)
        {
          v44 = 1111970369;
          goto LABEL_126;
        }
LABEL_100:
        v40 = a18 | a17;
        if (a8 || v40)
        {
          v42 = 0;
          if (a8 == 90)
            v41 = vt_Rotate_420v_90CW;
          else
            v41 = vt_Rotate_420v_180;
          if (a8 != 90 && a8 != 180)
          {
            v42 = 0;
            if (a8 == 270)
              v41 = vt_Rotate_420v_90CCW;
            else
              v41 = 0;
          }
        }
        else
        {
          v41 = 0;
          if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066)
            v42 = vt_Copy_420v_Crop;
          else
            v42 = vt_Copy_444v_Crop;
        }
        v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_420v_Hor;
        if (!a17)
          v55 = 0;
        v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_420v_Ver;
        goto LABEL_261;
      }
      if (PixelFormatType == 875704438)
        goto LABEL_100;
      v54 = 875836518;
    }
    else
    {
      if (PixelFormatType <= 846624120)
      {
        if (PixelFormatType == 32)
          goto LABEL_127;
        if (PixelFormatType != 846624102)
          goto LABEL_190;
LABEL_141:
        v40 = a18 | a17;
        if (a8 || v40)
        {
          v42 = 0;
          if (a8 == 90)
            v41 = vt_Rotate_2vuy_90CW;
          else
            v41 = vt_Rotate_2vuy_180;
          if (a8 != 90 && a8 != 180)
          {
            v42 = 0;
            if (a8 == 270)
              v41 = vt_Rotate_2vuy_90CCW;
            else
              v41 = 0;
          }
        }
        else
        {
          v41 = 0;
          v42 = vt_Copy_NonPlanar16_Crop;
        }
        v55 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_2vuy_Hor;
        if (!a17)
          v55 = 0;
        v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, _QWORD *, uint64_t *, uint64_t *, char **))vt_Flip_2vuy_Ver;
        goto LABEL_261;
      }
      if (PixelFormatType == 846624121)
        goto LABEL_141;
      v54 = 875704422;
    }
    if (PixelFormatType != v54)
      goto LABEL_190;
    goto LABEL_100;
  }
  v39 = 0;
LABEL_272:
  if (v36)
    CFRelease(v36);
  if (v37)
    CFRelease(v37);
  if (cf)
    CFRelease(cf);
LABEL_278:
  if (v73[0])
    CFRelease(v73[0]);
  return v39;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, float a3, double _D1, double a5, float16x4_t a6, double _D4)
{
  float16x4_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int32x2_t v62;
  float v65;
  float v66;
  float v67;
  float v73;
  unsigned __int8 *v74;
  int32x2_t v77;
  float v80;
  float v81;
  float v86;
  float v87;
  char v96;
  char v97;
  char v98;
  char v99;
  float v102;
  float v103;
  float v104;
  float v107;
  float v108;
  float v113;
  float v114;
  float v116;
  float v120;
  float v123;
  float v124;
  float v126;
  float v128;
  float v129;
  float v130;
  float v143;
  float v144;
  BOOL v145;
  float v146;
  char v147;
  float v148;
  float v149;
  char v150;
  float v151;
  float v152;
  char v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v167 = 2 * v11 - 2 * v10;
    v15 = *((_QWORD *)result + 19);
    v16 = (uint64_t *)*((_QWORD *)result + 17);
    v17 = **((_QWORD **)result + 8);
    v18 = *v16;
    v19 = v16[1];
    v20 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v21 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v15 + 146);
    v22 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v15 + 148);
    v23 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v15 + 150);
    *(float *)&v24 = (float)LODWORD(_D1);
    v188 = *(float *)&v24;
    v189 = v22;
    LOWORD(v24) = *(_WORD *)(v15 + 152);
    v25 = (float)v24;
    v186 = *(float *)(v15 + 40);
    v187 = *(float *)(v15 + 36);
    v184 = *(float *)(v15 + 48) * 0.25;
    v185 = *(float *)(v15 + 44);
    v182 = *(float *)(v15 + 56) * 0.25;
    v183 = *(float *)(v15 + 52) * 0.25;
    v180 = *(float *)(v15 + 64) * 0.25;
    v181 = *(float *)(v15 + 60) * 0.25;
    v178 = *(float *)(v15 + 68) * 0.25;
    v179 = *(float *)(v15 + 72);
    v176 = *(float *)(v15 + 80);
    v177 = *(float *)(v15 + 76);
    v174 = *(float *)(v15 + 88);
    v175 = *(float *)(v15 + 84);
    v172 = *(float *)(v15 + 96);
    v173 = *(float *)(v15 + 92);
    v26 = *(float *)(v15 + 108);
    v170 = *(float *)(v15 + 104);
    v171 = *(float *)(v15 + 100);
    v27 = v15 + 164;
    v28 = v15 + 16548;
    v29 = v15 + 32932;
    v31 = *(float *)(v15 + 112);
    v30 = *(float *)(v15 + 116);
    v32 = *(float *)(v15 + 120);
    v33 = *((_QWORD *)result + 14);
    v34 = (_QWORD *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v9);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v17 * v14 + 8 * *(_QWORD *)(result + 36));
    v36 = v34[1];
    v37 = (_BYTE *)(*v34 + v35 * v18 + v33);
    v38 = v34[2];
    if (v38)
      v39 = (_BYTE *)(v38 + v35 * v20 + v33);
    else
      v39 = 0;
    v40 = *(unsigned __int8 *)(v15 + 157);
    v41 = *(unsigned __int8 *)(v15 + 156);
    if (v35 >= 0)
      v42 = v35;
    else
      v42 = v35 + 1;
    v164 = v19;
    v43 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v44 = *(unsigned __int8 *)(v15 + 155);
    v45 = *(unsigned __int8 *)(v15 + 154);
    v46 = v36 + (v42 >> 1) * v19 + v33;
    v168 = *(float *)(v15 + 112);
    v169 = *(float *)(v15 + 108);
    v165 = v18;
    v166 = v17;
    v163 = v20;
    do
    {
      v47 = &v39[v20];
      v48 = &v37[v18];
      v49 = &result[v17];
      if (v13)
      {
        v50 = 0;
        v51 = &v39[v20];
        v52 = &v37[v18];
        v53 = &result[v17];
        do
        {
          LOWORD(_D1) = *(_WORD *)&result[2 * v45];
          a6.i16[0] = *(_WORD *)&result[2 * v41];
          v54 = result + 8;
          WORD1(_D1) = *(_WORD *)&result[2 * v44];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v43), 0), v43)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          a6.i16[1] = *(_WORD *)&result[2 * v45 + 8];
          v62 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a6), v43), 0), v43)));
          _H3 = *(_WORD *)(v27 + 2 * v62.u32[0]);
          __asm { FCVT            S17, H3 }
          v65 = fmaxf(_S15, fmaxf(_S16, _S17));
          v66 = (float)((float)((float)(v31 * _S16) + (float)(v26 * _S15)) + (float)(v30 * _S17)) + (float)(v32 * v65);
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = (float)((float)((float)(v31 * _S16) + (float)(v26 * _S15)) + (float)(v30 * _S17)) + (float)(v32 * v65);
            if (v66 < 0.0)
              v67 = 0.0;
          }
          a6.i16[0] = *(_WORD *)&v54[2 * v44];
          _H1 = *(_WORD *)(v27 + 2 * v62.u32[1]);
          a6.i16[1] = *(_WORD *)&v54[2 * v41];
          __asm { FCVT            S19, H1 }
          _D1 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a6), v43), 0), v43)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          *(float *)_D1.i32 = (float)((float)((float)(v31 * _S20) + (float)(v26 * _S19)) + (float)(v30 * _S22))
                            + (float)(v32 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v73 = 8191.0;
          if (*(float *)_D1.i32 <= 8191.0)
          {
            v73 = *(float *)_D1.i32;
            if (*(float *)_D1.i32 < 0.0)
              v73 = 0.0;
          }
          _D1.i16[0] = *(_WORD *)&v53[2 * v45];
          LOWORD(_D4) = *(_WORD *)&v53[2 * v41];
          v74 = v53 + 8;
          _D1.i16[1] = *(_WORD *)&v53[2 * v44];
          _D1 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D1), v43), 0), v43))));
          LOWORD(_D1) = *(_WORD *)(v27 + 2 * LODWORD(_D1));
          __asm { FCVT            S1, H1 }
          _H5 = *(_WORD *)(v27 + 2 * HIDWORD(_D1));
          __asm { FCVT            S12, H5 }
          WORD1(_D4) = *(_WORD *)&v53[2 * v45 + 8];
          v77 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v43), 0), v43)));
          _H5 = *(_WORD *)(v27 + 2 * v77.u32[0]);
          __asm { FCVT            S5, H5 }
          v80 = (float)((float)((float)(v31 * _S12) + (float)(v26 * *(float *)&_D1)) + (float)(v30 * _S5))
              + (float)(v32 * fmaxf(*(float *)&_D1, fmaxf(_S12, _S5)));
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v7.i16[0] = *(_WORD *)&v74[2 * v44];
          _H4 = *(_WORD *)(v27 + 2 * v77.u32[1]);
          v7.i16[1] = *(_WORD *)&v74[2 * v41];
          __asm { FCVT            S7, H4 }
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v7), v43), 0), v43))));
          LOWORD(_D4) = *(_WORD *)(v27 + 2 * LODWORD(_D4));
          __asm { FCVT            S4, H4 }
          _H21 = *(_WORD *)(v27 + 2 * HIDWORD(_D4));
          __asm { FCVT            S21, H21 }
          v86 = (float)((float)((float)(v31 * *(float *)&_D4) + (float)(v26 * _S7)) + (float)(v30 * _S21))
              + (float)(v32 * fmaxf(_S7, fmaxf(*(float *)&_D4, _S21)));
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          if (v39)
          {
            _H23 = *(_WORD *)&result[2 * v40];
            __asm { FCVT            S23, H23 }
            _H25 = *(_WORD *)&v54[2 * v40];
            _H26 = *(_WORD *)&v53[2 * v40];
            __asm
            {
              FCVT            S25, H25
              FCVT            S26, H26
            }
            _H27 = *(_WORD *)&v74[2 * v40];
            __asm { FCVT            S27, H27 }
            v96 = llroundf(_S23 * 255.0);
            v97 = llroundf(_S25 * 255.0);
            v98 = llroundf(_S26 * 255.0);
            v99 = llroundf(_S27 * 255.0);
          }
          else
          {
            v98 = 0;
            v96 = 0;
            v97 = 0;
            v99 = 0;
          }
          _H18 = *(_WORD *)(v28 + 2 * llroundf(v67));
          __asm { FCVT            S18, H18 }
          v102 = _S15 * _S18;
          v103 = _S16 * _S18;
          v104 = _S17 * _S18;
          _H3 = *(_WORD *)(v28 + 2 * llroundf(v73));
          __asm { FCVT            S3, H3 }
          v107 = _S19 * _S3;
          v108 = _S20 * _S3;
          _S3 = _S22 * _S3;
          _H6 = *(_WORD *)(v28 + 2 * llroundf(v81));
          __asm { FCVT            S6, H6 }
          _S1 = *(float *)&_D1 * _S6;
          v113 = _S12 * _S6;
          v114 = _S5 * _S6;
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(v87));
          __asm { FCVT            S6, H6 }
          v116 = _S7 * _S6;
          _S4 = *(float *)&_D4 * _S6;
          _S6 = _S21 * _S6;
          _S21 = (float)((float)(v177 * v103) + (float)(v102 * v179)) + (float)(v104 * v176);
          v120 = (float)((float)(v174 * v103) + (float)(v102 * v175)) + (float)(v104 * v173);
          _S16 = (float)((float)(v171 * v103) + (float)(v102 * v172)) + (float)(v104 * v170);
          _S17 = (float)((float)(v177 * v108) + (float)(v107 * v179)) + (float)(_S3 * v176);
          v123 = (float)((float)(v174 * v108) + (float)(v107 * v175)) + (float)(_S3 * v173);
          v124 = (float)((float)(v171 * v108) + (float)(v107 * v172)) + (float)(_S3 * v170);
          _S19 = (float)((float)(v177 * v113) + (float)(_S1 * v179)) + (float)(v114 * v176);
          v126 = (float)((float)(v174 * v113) + (float)(_S1 * v175)) + (float)(v114 * v173);
          _S20 = (float)((float)(v171 * v113) + (float)(_S1 * v172)) + (float)(v114 * v170);
          v128 = (float)((float)(v177 * _S4) + (float)(v116 * v179)) + (float)(_S6 * v176);
          v129 = (float)((float)(v174 * _S4) + (float)(v116 * v175)) + (float)(_S6 * v173);
          v130 = (float)((float)(v171 * _S4) + (float)(v116 * v172)) + (float)(_S6 * v170);
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H6
            FCVT            S6, H16
          }
          LOWORD(_S16) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S19) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S21, H21
          }
          v143 = (float)((float)((float)(v186 * _S1) + (float)(v187 * _S5)) + (float)(v185 * _S3)) + v21;
          if (v143 < v21)
            v144 = v21;
          else
            v144 = (float)((float)((float)(v186 * _S1) + (float)(v187 * _S5)) + (float)(v185 * _S3)) + v21;
          v145 = v143 <= v23;
          v146 = (float)((float)((float)(v186 * _S7) + (float)(v187 * _S4)) + (float)(v185 * _S6)) + v21;
          if (!v145)
            v144 = v23;
          v147 = llroundf(v144);
          if (v146 < v21)
            v148 = v21;
          else
            v148 = (float)((float)((float)(v186 * _S7) + (float)(v187 * _S4)) + (float)(v185 * _S6)) + v21;
          v145 = v146 <= v23;
          v149 = (float)((float)((float)(v186 * _S16) + (float)(v187 * _S18)) + (float)(v185 * _S17)) + v21;
          if (!v145)
            v148 = v23;
          v150 = llroundf(v148);
          if (v149 < v21)
            v151 = v21;
          else
            v151 = (float)((float)((float)(v186 * _S16) + (float)(v187 * _S18)) + (float)(v185 * _S17)) + v21;
          v145 = v149 <= v23;
          v152 = (float)((float)((float)(v186 * _S20) + (float)(v187 * _S19)) + (float)(v185 * _S21)) + v21;
          if (!v145)
            v151 = v23;
          v153 = llroundf(v151);
          if (v152 < v21)
            v154 = v21;
          else
            v154 = (float)((float)((float)(v186 * _S20) + (float)(v187 * _S19)) + (float)(v185 * _S21)) + v21;
          if (v152 <= v23)
            v155 = v154;
          else
            v155 = v23;
          v156 = (float)((float)(_S5 + _S4) + _S18) + _S19;
          v157 = (float)((float)(_S1 + _S7) + _S16) + _S20;
          *v37 = v147;
          v37[1] = v150;
          *v52 = v153;
          v52[1] = llroundf(v155);
          v158 = (float)((float)(_S3 + _S6) + _S17) + _S21;
          v159 = (float)((float)(v189 + (float)(v156 * v184)) + (float)(v157 * v183)) + (float)(v158 * v182);
          v160 = v25;
          if (v159 <= v25)
          {
            v160 = (float)((float)(v189 + (float)(v156 * v184)) + (float)(v157 * v183)) + (float)(v158 * v182);
            if (v159 < v188)
              v160 = v188;
          }
          v161 = (float)((float)(v189 + (float)(v156 * v181)) + (float)(v157 * v180)) + (float)(v158 * v178);
          *(_BYTE *)(v46 + v50) = llroundf(v160);
          v162 = v25;
          v31 = v168;
          v26 = v169;
          if (v161 <= v25)
          {
            v162 = v161;
            if (v161 < v188)
              v162 = v188;
          }
          *(_BYTE *)(v46 + v50 + 1) = llroundf(v162);
          if (v39)
          {
            *v39 = v96;
            v39[1] = v97;
            v39 += 2;
            *v51 = v98;
            v51[1] = v99;
            v51 += 2;
          }
          result += 16;
          v53 += 16;
          v37 += 2;
          v52 += 2;
          v50 += 2;
        }
        while (v13 > v50);
      }
      v18 = v165;
      v17 = v166;
      result = &v49[v166];
      v37 = &v48[v165];
      v20 = v163;
      v46 += v164;
      v39 = &v47[v163];
      v12 += 2;
    }
    while (v167 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_420vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  float16x4_t v9;
  float16x4_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  float32x2_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v74;
  char v75;
  char v76;
  char v77;
  float v95;
  float v96;
  float v97;
  float v99;
  float v100;
  float v101;
  float v113;
  BOOL v114;
  float v115;
  char v116;
  float v117;
  float v118;
  char v119;
  float v120;
  float v121;
  char v122;
  float v123;
  float v124;
  char v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _BYTE *v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;

  v12 = *(_QWORD *)(result + 28);
  v13 = 2 * *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = (v12 + v12 * a2) / v13;
  if (2 * v15 != 2 * v14)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 20);
    v18 = *(_QWORD *)(result + 44) + 2 * v14;
    v136 = 2 * v15 - 2 * v14;
    v19 = *(_QWORD *)(result + 152);
    v20 = *(uint64_t **)(result + 136);
    v21 = **(_QWORD **)(result + 64);
    v23 = *v20;
    v22 = v20[1];
    v24 = v20[2];
    LOWORD(a3) = *(_WORD *)(v19 + 144);
    v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v19 + 146);
    *(float *)&v26 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v19 + 148);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 150);
    v146 = (float)LODWORD(a4);
    v147 = (float)LODWORD(a6);
    LOWORD(v26) = *(_WORD *)(v19 + 152);
    v28 = (float)v26;
    v29 = *(float *)(v19 + 44);
    v144 = *(float *)(v19 + 40);
    v145 = *(float *)(v19 + 36);
    v142 = *(float *)(v19 + 52) * 0.25;
    v143 = *(float *)(v19 + 48) * 0.25;
    v140 = *(float *)(v19 + 60) * 0.25;
    v141 = *(float *)(v19 + 56) * 0.25;
    v30 = *(float *)(v19 + 72);
    v138 = *(float *)(v19 + 68) * 0.25;
    v139 = *(float *)(v19 + 64) * 0.25;
    v31 = *(float *)(v19 + 76);
    v32 = *(float *)(v19 + 80);
    v33 = *(float *)(v19 + 84);
    v34 = *(float *)(v19 + 88);
    v35 = *(float *)(v19 + 92);
    v36 = *(float *)(v19 + 96);
    v37 = *(float *)(v19 + 100);
    v38 = *(float *)(v19 + 104);
    v39 = v19 + 164;
    v40 = v19 + 16548;
    v41 = *(_QWORD *)(result + 112);
    v42 = *(_QWORD **)(result + 128);
    v43 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v13);
    v44 = **(_QWORD **)(result + 56) + v21 * v18 + 8 * *(_QWORD *)(result + 36);
    v45 = v42[1];
    v46 = (_BYTE *)(*v42 + v43 * v23 + v41);
    v47 = v42[2];
    if (v47)
      v48 = (_BYTE *)(v47 + v43 * v24 + v41);
    else
      v48 = 0;
    result = *(unsigned __int8 *)(v19 + 157);
    v49 = *(unsigned __int8 *)(v19 + 156);
    v50 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v51 = *(unsigned __int8 *)(v19 + 155);
    v52 = *(unsigned __int8 *)(v19 + 154);
    v53 = v45 + v43 / 2 * v22 + v41;
    v134 = v23;
    v135 = v21;
    v133 = v24;
    do
    {
      v137 = &v48[v24];
      v54 = &v46[v23];
      v55 = v44 + v21;
      if (v17)
      {
        v56 = 0;
        v57 = &v48[v24];
        v58 = &v46[v23];
        v59 = v44 + v21;
        do
        {
          v60 = v44 + 8;
          v61 = v59 + 8;
          if (v48)
          {
            _H16 = *(_WORD *)(v61 + 2 * result);
            __asm { FCVT            S16, H16 }
            _H17 = *(_WORD *)(v59 + 2 * result);
            _H18 = *(_WORD *)(v60 + 2 * result);
            __asm
            {
              FCVT            S17, H17
              FCVT            S18, H18
            }
            _H19 = *(_WORD *)(v44 + 2 * result);
            __asm { FCVT            S19, H19 }
            v74 = llroundf(_S19 * 255.0);
            v75 = llroundf(_S18 * 255.0);
            v76 = llroundf(_S17 * 255.0);
            v77 = llroundf(_S16 * 255.0);
          }
          else
          {
            v76 = 0;
            v74 = 0;
            v75 = 0;
            v77 = 0;
          }
          _D16.i16[0] = *(_WORD *)(v44 + 2 * v52);
          v9.i16[0] = *(_WORD *)(v44 + 2 * v49);
          v10.i16[0] = *(_WORD *)(v60 + 2 * v51);
          _D19.i16[0] = *(_WORD *)(v59 + 2 * v52);
          _D13.i16[0] = *(_WORD *)(v59 + 2 * v49);
          _D16.i16[1] = *(_WORD *)(v44 + 2 * v51);
          _D16 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D16), v50), 0), v50)));
          _D16.i16[0] = *(_WORD *)(v39 + 2 * _D16.u32[0]);
          _D14.i16[0] = *(_WORD *)(v61 + 2 * v51);
          __asm { FCVT            S11, H16 }
          _D16.i16[0] = *(_WORD *)(v39 + 2 * _D16.u32[1]);
          __asm { FCVT            S12, H16 }
          v9.i16[1] = *(_WORD *)(v60 + 2 * v52);
          _D16 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v9), v50), 0), v50)));
          _D16.i16[0] = *(_WORD *)(v39 + 2 * _D16.u32[0]);
          _H17 = *(_WORD *)(v39 + 2 * _D16.u32[1]);
          v10.i16[1] = *(_WORD *)(v60 + 2 * v49);
          __asm { FCVT            S15, H16 }
          _D16 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v10), v50), 0), v50)));
          _H18 = *(_WORD *)(v39 + 2 * _D16.u32[0]);
          __asm
          {
            FCVT            S16, H17
            FCVT            S17, H18
          }
          _H18 = *(_WORD *)(v39 + 2 * _D16.u32[1]);
          _D19.i16[1] = *(_WORD *)(v59 + 2 * v51);
          __asm { FCVT            S18, H18 }
          _D19 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D19), v50), 0), v50)));
          _D19.i16[0] = *(_WORD *)(v39 + 2 * _D19.u32[0]);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v39 + 2 * _D19.u32[1]);
          __asm { FCVT            S20, H20 }
          _D13.i16[1] = *(_WORD *)(v61 + 2 * v52);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v50), 0), v50)));
          _D13.i16[0] = *(_WORD *)(v39 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H22 = *(_WORD *)(v39 + 2 * _D13.u32[1]);
          _D14.i16[1] = *(_WORD *)(v61 + 2 * v49);
          _D14 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D14), v50), 0), v50)));
          __asm { FCVT            S22, H22 }
          _D14.i16[0] = *(_WORD *)(v39 + 2 * _D14.u32[0]);
          _H3 = *(_WORD *)(v39 + 2 * _D14.u32[1]);
          __asm
          {
            FCVT            S14, H14
            FCVT            S3, H3
          }
          _S1 = (float)((float)(v31 * _S12) + (float)(_S11 * v30)) + (float)(_S15 * v32);
          v95 = (float)((float)(v34 * _S12) + (float)(_S11 * v33)) + (float)(_S15 * v35);
          v96 = (float)((float)(v37 * _S12) + (float)(_S11 * v36)) + (float)(_S15 * v38);
          v97 = (float)((float)(v31 * _S17) + (float)(*(float *)_D16.i32 * v30)) + (float)(_S18 * v32);
          _S5 = (float)((float)(v34 * _S17) + (float)(*(float *)_D16.i32 * v33)) + (float)(_S18 * v35);
          *(float *)_D16.i32 = (float)((float)(v37 * _S17) + (float)(*(float *)_D16.i32 * v36)) + (float)(_S18 * v38);
          v99 = (float)((float)(v31 * _S20) + (float)(*(float *)_D19.i32 * v30)) + (float)(*(float *)_D13.i32 * v32);
          v100 = (float)((float)(v34 * _S20) + (float)(*(float *)_D19.i32 * v33)) + (float)(*(float *)_D13.i32 * v35);
          *(float *)_D19.i32 = (float)((float)(v37 * _S20) + (float)(*(float *)_D19.i32 * v36))
                             + (float)(*(float *)_D13.i32 * v38);
          v101 = (float)((float)(v31 * *(float *)_D14.i32) + (float)(_S22 * v30)) + (float)(_S3 * v32);
          _S6 = (float)((float)(v34 * *(float *)_D14.i32) + (float)(_S22 * v33)) + (float)(_S3 * v35);
          _S3 = (float)((float)(v37 * *(float *)_D14.i32) + (float)(_S22 * v36)) + (float)(_S3 * v38);
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S13, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S14, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(*(float *)_D16.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S16, H1
            FCVT            S15, H5
          }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S17, H5 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S3, H3
          }
          *(float *)_D19.i32 = (float)((float)((float)(v144 * _S11) + (float)(v145 * *(float *)_D13.i32))
                                     + (float)(v29 * _S12))
                             + v25;
          if (*(float *)_D19.i32 < v25)
            v113 = v25;
          else
            v113 = (float)((float)((float)(v144 * _S11) + (float)(v145 * *(float *)_D13.i32)) + (float)(v29 * _S12))
                 + v25;
          v114 = *(float *)_D19.i32 <= v27;
          v115 = (float)((float)((float)(v144 * *(float *)_D16.i32) + (float)(v145 * *(float *)_D14.i32))
                       + (float)(v29 * _S15))
               + v25;
          if (!v114)
            v113 = v27;
          v116 = llroundf(v113);
          if (v115 < v25)
            v117 = v25;
          else
            v117 = (float)((float)((float)(v144 * *(float *)_D16.i32) + (float)(v145 * *(float *)_D14.i32))
                         + (float)(v29 * _S15))
                 + v25;
          v114 = v115 <= v27;
          v118 = (float)((float)((float)(v144 * _S17) + (float)(v145 * _S1)) + (float)(v29 * _S18)) + v25;
          if (!v114)
            v117 = v27;
          v119 = llroundf(v117);
          if (v118 < v25)
            v120 = v25;
          else
            v120 = (float)((float)((float)(v144 * _S17) + (float)(v145 * _S1)) + (float)(v29 * _S18)) + v25;
          v114 = v118 <= v27;
          v121 = (float)((float)((float)(v144 * _S6) + (float)(v145 * _S5)) + (float)(v29 * _S3)) + v25;
          if (!v114)
            v120 = v27;
          v122 = llroundf(v120);
          if (v121 < v25)
            v123 = v25;
          else
            v123 = (float)((float)((float)(v144 * _S6) + (float)(v145 * _S5)) + (float)(v29 * _S3)) + v25;
          if (v121 <= v27)
            v124 = v123;
          else
            v124 = v27;
          v125 = llroundf(v124);
          v126 = (float)((float)(*(float *)_D13.i32 + *(float *)_D14.i32) + _S1) + _S5;
          v127 = (float)((float)(_S11 + *(float *)_D16.i32) + _S17) + _S6;
          *v46 = v116;
          v46[1] = v119;
          *v58 = v122;
          v58[1] = v125;
          v128 = (float)((float)(_S12 + _S15) + _S18) + _S3;
          v129 = (float)((float)(v146 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
          v130 = v28;
          if (v129 <= v28)
          {
            v130 = (float)((float)(v146 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
            if (v129 < v147)
              v130 = v147;
          }
          v131 = (float)((float)(v146 + (float)(v126 * v140)) + (float)(v127 * v139)) + (float)(v128 * v138);
          *(_BYTE *)(v53 + v56) = llroundf(v130);
          v132 = v28;
          if (v131 <= v28)
          {
            v132 = v131;
            if (v131 < v147)
              v132 = v147;
          }
          *(_BYTE *)(v53 + v56 + 1) = llroundf(v132);
          if (v48)
          {
            *v48 = v74;
            v48[1] = v75;
            v48 += 2;
            *v57 = v76;
            v57[1] = v77;
            v57 += 2;
          }
          v44 += 16;
          v59 += 16;
          v46 += 2;
          v58 += 2;
          v56 += 2;
        }
        while (v17 > v56);
      }
      v23 = v134;
      v21 = v135;
      v44 = v55 + v135;
      v46 = &v54[v134];
      v24 = v133;
      v53 += v22;
      v48 = &v137[v133];
      v16 += 2;
    }
    while (v136 > v16);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_420vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v70;
  char v71;
  char v72;
  char v73;
  float v76;
  float v78;
  float v80;
  float v83;
  float v85;
  float v87;
  float v90;
  float v93;
  float v96;
  float v99;
  float v102;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  char v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v17;
    v20 = v17[1];
    v21 = v17[2];
    v22 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(a8);
    v28 = *(float *)(v16 + 36);
    v29 = *(float *)(v16 + 40);
    v30 = *(float *)(v16 + 44);
    v31 = *(float *)(v16 + 48) * 0.25;
    v32 = *(float *)(v16 + 52) * 0.25;
    v33 = *(float *)(v16 + 56) * 0.25;
    v34 = *(float *)(v16 + 60) * 0.25;
    v35 = *(float *)(v16 + 64) * 0.25;
    v36 = *(float *)(v16 + 68) * 0.25;
    v37 = *(_QWORD *)(result + 112);
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v9);
    v40 = **(_QWORD **)(result + 56) + v18 * v14 + 8 * *(_QWORD *)(result + 36);
    v41 = (_BYTE *)(*v38 + v39 * v19 + v37);
    v42 = v38[2];
    if (v42)
      v43 = (_BYTE *)(v42 + v39 * v21 + v37);
    else
      v43 = 0;
    v44 = *(unsigned __int8 *)(v16 + 157);
    result = *(unsigned __int8 *)(v16 + 156);
    v45 = v38[1] + v39 / 2 * v20;
    v46 = *(unsigned __int8 *)(v16 + 155);
    v47 = *(unsigned __int8 *)(v16 + 154);
    v48 = v45 + v37;
    do
    {
      v49 = &v43[v21];
      v50 = &v41[v19];
      v51 = v40 + v18;
      if (v13)
      {
        v52 = 0;
        v53 = &v43[v21];
        v54 = &v41[v19];
        v55 = v40 + v18;
        do
        {
          v56 = v40 + 8;
          v57 = v55 + 8;
          if (v43)
          {
            _H23 = *(_WORD *)(v57 + 2 * v44);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v55 + 2 * v44);
            _H25 = *(_WORD *)(v56 + 2 * v44);
            __asm
            {
              FCVT            S24, H24
              FCVT            S25, H25
            }
            _H26 = *(_WORD *)(v40 + 2 * v44);
            __asm { FCVT            S26, H26 }
            v70 = llroundf(_S26 * 255.0);
            v71 = llroundf(_S25 * 255.0);
            v72 = llroundf(_S24 * 255.0);
            v73 = llroundf(_S23 * 255.0);
          }
          else
          {
            v72 = 0;
            v70 = 0;
            v71 = 0;
            v73 = 0;
          }
          _H23 = *(_WORD *)(v40 + 2 * v47);
          __asm { FCVT            S23, H23 }
          v76 = v22 * _S23;
          LOWORD(_S23) = *(_WORD *)(v40 + 2 * v46);
          __asm { FCVT            S23, H23 }
          v78 = v22 * _S23;
          LOWORD(_S23) = *(_WORD *)(v40 + 2 * result);
          __asm { FCVT            S23, H23 }
          v80 = v22 * _S23;
          _H26 = *(_WORD *)(v56 + 2 * v47);
          __asm { FCVT            S26, H26 }
          v83 = v22 * _S26;
          LOWORD(_S26) = *(_WORD *)(v56 + 2 * v46);
          __asm { FCVT            S26, H26 }
          v85 = v22 * _S26;
          LOWORD(_S26) = *(_WORD *)(v56 + 2 * result);
          __asm { FCVT            S26, H26 }
          v87 = v22 * _S26;
          _H29 = *(_WORD *)(v55 + 2 * v47);
          __asm { FCVT            S29, H29 }
          v90 = v22 * _S29;
          _H30 = *(_WORD *)(v55 + 2 * v46);
          __asm { FCVT            S30, H30 }
          v93 = v22 * _S30;
          _H31 = *(_WORD *)(v55 + 2 * result);
          __asm { FCVT            S31, H31 }
          v96 = v22 * _S31;
          _H8 = *(_WORD *)(v57 + 2 * v47);
          __asm { FCVT            S8, H8 }
          v99 = v22 * _S8;
          _H9 = *(_WORD *)(v57 + 2 * v46);
          __asm { FCVT            S9, H9 }
          v102 = v22 * _S9;
          _H10 = *(_WORD *)(v57 + 2 * result);
          __asm { FCVT            S10, H10 }
          v105 = v22 * _S10;
          v106 = (float)((float)((float)(v29 * v78) + (float)(v28 * v76)) + (float)(v30 * v80)) + v23;
          v107 = (float)((float)((float)(v29 * v85) + (float)(v28 * v83)) + (float)(v30 * v87)) + v23;
          v108 = (float)((float)((float)(v29 * v93) + (float)(v28 * v90)) + (float)(v30 * v96)) + v23;
          v109 = (float)((float)((float)(v29 * v102) + (float)(v28 * v99)) + (float)(v30 * v105)) + v23;
          if (v106 < v23)
            v110 = v23;
          else
            v110 = (float)((float)((float)(v29 * v78) + (float)(v28 * v76)) + (float)(v30 * v80)) + v23;
          if (v106 <= v25)
            v111 = v110;
          else
            v111 = v25;
          v112 = llroundf(v111);
          if (v107 < v23)
            v113 = v23;
          else
            v113 = (float)((float)((float)(v29 * v85) + (float)(v28 * v83)) + (float)(v30 * v87)) + v23;
          if (v107 > v25)
            v113 = v25;
          *v41 = v112;
          v41[1] = llroundf(v113);
          if (v108 < v23)
            v114 = v23;
          else
            v114 = (float)((float)((float)(v29 * v93) + (float)(v28 * v90)) + (float)(v30 * v96)) + v23;
          if (v108 > v25)
            v114 = v25;
          *v54 = llroundf(v114);
          if (v109 < v23)
            v115 = v23;
          else
            v115 = (float)((float)((float)(v29 * v102) + (float)(v28 * v99)) + (float)(v30 * v105)) + v23;
          if (v109 > v25)
            v115 = v25;
          v54[1] = llroundf(v115);
          v116 = (float)((float)(v76 + v83) + v90) + v99;
          v117 = (float)((float)(v78 + v85) + v93) + v102;
          v118 = (float)((float)(v80 + v87) + v96) + v105;
          v119 = (float)((float)(v24 + (float)(v116 * v31)) + (float)(v117 * v32)) + (float)(v118 * v33);
          v120 = v27;
          if (v119 <= v27)
          {
            v120 = (float)((float)(v24 + (float)(v116 * v31)) + (float)(v117 * v32)) + (float)(v118 * v33);
            if (v119 < v26)
              v120 = v26;
          }
          v121 = (float)((float)(v24 + (float)(v116 * v34)) + (float)(v117 * v35)) + (float)(v118 * v36);
          *(_BYTE *)(v48 + v52) = llroundf(v120);
          v122 = v27;
          if (v121 <= v27)
          {
            v122 = v121;
            if (v121 < v26)
              v122 = v26;
          }
          *(_BYTE *)(v48 + v52 + 1) = llroundf(v122);
          if (v43)
          {
            *v43 = v70;
            v43[1] = v71;
            v43 += 2;
            *v53 = v72;
            v53[1] = v73;
            v53 += 2;
          }
          v40 += 16;
          v55 += 16;
          v41 += 2;
          v54 += 2;
          v52 += 2;
        }
        while (v13 > v52);
      }
      v40 = v51 + v18;
      v41 = &v50[v19];
      v48 += v20;
      v43 = &v49[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_GCD(unint64_t result, uint64_t a2, float a3, double _D1, double a5, float16x4_t a6, double _D4, double a8, double a9, float16x4_t a10)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  float32x2_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int32x2_t v62;
  float v65;
  float v66;
  float v67;
  float v73;
  uint64_t v74;
  int32x2_t v77;
  float v80;
  float v81;
  float v82;
  float v88;
  float v89;
  float v92;
  float v93;
  float v94;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v104;
  float v105;
  float v106;
  float v107;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  unsigned int v134;
  float v137;
  float v138;
  BOOL v139;
  float v140;
  unsigned int v141;
  float v142;
  float v143;
  unsigned int v144;
  float v145;
  float v146;
  unsigned int v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  _WORD *v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;

  v10 = *(_QWORD *)(result + 28);
  v11 = 2 * *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (2 * v13 != 2 * v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 20);
    v16 = *(_QWORD *)(result + 44) + 2 * v12;
    v17 = 2 * v13 - 2 * v12;
    v18 = *(_QWORD *)(result + 152);
    v19 = *(uint64_t **)(result + 136);
    v20 = **(_QWORD **)(result + 64);
    v21 = *v19;
    v22 = v19[1];
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    v23 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v18 + 146);
    v24 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v18 + 148);
    v25 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v18 + 150);
    *(float *)&_D1 = (float)LODWORD(_D1);
    v181 = *(float *)&_D1;
    LOWORD(_D1) = *(_WORD *)(v18 + 152);
    v177 = *(float *)(v18 + 40);
    v178 = *(float *)(v18 + 36);
    v175 = *(float *)(v18 + 48) * 0.25;
    v176 = *(float *)(v18 + 44);
    v173 = *(float *)(v18 + 56) * 0.25;
    v174 = *(float *)(v18 + 52) * 0.25;
    v171 = *(float *)(v18 + 64) * 0.25;
    v172 = *(float *)(v18 + 60) * 0.25;
    v169 = *(float *)(v18 + 68) * 0.25;
    v170 = *(float *)(v18 + 72);
    v167 = *(float *)(v18 + 80);
    v168 = *(float *)(v18 + 76);
    v165 = *(float *)(v18 + 88);
    v166 = *(float *)(v18 + 84);
    v163 = *(float *)(v18 + 96);
    v164 = *(float *)(v18 + 92);
    v26 = *(float *)(v18 + 108);
    v161 = *(float *)(v18 + 104);
    v162 = *(float *)(v18 + 100);
    v27 = v18 + 164;
    v28 = v18 + 16548;
    v29 = v18 + 32932;
    v30 = *(float *)(v18 + 112);
    v31 = *(float *)(v18 + 116);
    v32 = *(float *)(v18 + 120);
    v33 = *(_QWORD *)(result + 112);
    v34 = *(_QWORD *)(result + 104) * a2 / v11;
    v35 = *(_QWORD **)(result + 128);
    v36 = *(_QWORD *)(result + 120) + 2 * v34;
    v37 = **(_QWORD **)(result + 56) + v20 * v16 + 8 * *(_QWORD *)(result + 36);
    v38 = v35[1];
    v39 = (char *)(*v35 + v36 * v21 + 2 * v33);
    v40 = *(unsigned __int8 *)(v18 + 132);
    if (v40 >= 0x11)
      v41 = 0;
    else
      v41 = 16 - v40;
    result = *(unsigned __int8 *)(v18 + 156);
    if (v36 >= 0)
      v42 = v36;
    else
      v42 = v36 + 1;
    v43 = v38 + (v42 >> 1) * v22;
    v44 = *(unsigned __int8 *)(v18 + 155);
    v45 = *(unsigned __int8 *)(v18 + 154);
    v46 = v43 + 2 * v33;
    v47 = v41;
    v48 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v179 = (float)LODWORD(_D1);
    v180 = v24;
    v159 = v26;
    v160 = v30;
    v158 = v31;
    do
    {
      v49 = &v39[v21];
      v50 = v37 + v20;
      if (v15)
      {
        v51 = 0;
        v52 = v37 + v20;
        v53 = &v39[v21];
        do
        {
          LOWORD(_D1) = *(_WORD *)(v37 + 2 * v45);
          a6.i16[0] = *(_WORD *)(v37 + 2 * result);
          v54 = v37 + 8;
          WORD1(_D1) = *(_WORD *)(v37 + 2 * v44);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v48), 0), v48)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          a6.i16[1] = *(_WORD *)(v37 + 8 + 2 * v45);
          v62 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a6), v48), 0), v48)));
          _H3 = *(_WORD *)(v27 + 2 * v62.u32[0]);
          __asm { FCVT            S17, H3 }
          v65 = fmaxf(_S15, fmaxf(_S16, _S17));
          v66 = (float)((float)((float)(v30 * _S16) + (float)(v26 * _S15)) + (float)(v31 * _S17)) + (float)(v32 * v65);
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = (float)((float)((float)(v30 * _S16) + (float)(v26 * _S15)) + (float)(v31 * _S17)) + (float)(v32 * v65);
            if (v66 < 0.0)
              v67 = 0.0;
          }
          a6.i16[0] = *(_WORD *)(v54 + 2 * v44);
          _H1 = *(_WORD *)(v27 + 2 * v62.u32[1]);
          a6.i16[1] = *(_WORD *)(v54 + 2 * result);
          __asm { FCVT            S19, H1 }
          _D1 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a6), v48), 0), v48)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          *(float *)_D1.i32 = (float)((float)((float)(v30 * _S20) + (float)(v26 * _S19)) + (float)(v31 * _S22))
                            + (float)(v32 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v73 = 8191.0;
          if (*(float *)_D1.i32 <= 8191.0)
          {
            v73 = *(float *)_D1.i32;
            if (*(float *)_D1.i32 < 0.0)
              v73 = 0.0;
          }
          _D1.i16[0] = *(_WORD *)(v52 + 2 * v45);
          LOWORD(_D4) = *(_WORD *)(v52 + 2 * result);
          v74 = v52 + 8;
          _D1.i16[1] = *(_WORD *)(v52 + 2 * v44);
          _D1 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D1), v48), 0), v48))));
          LOWORD(_D1) = *(_WORD *)(v27 + 2 * LODWORD(_D1));
          __asm { FCVT            S1, H1 }
          _H5 = *(_WORD *)(v27 + 2 * HIDWORD(_D1));
          __asm { FCVT            S12, H5 }
          WORD1(_D4) = *(_WORD *)(v52 + 8 + 2 * v45);
          v77 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v48), 0), v48)));
          _H5 = *(_WORD *)(v27 + 2 * v77.u32[0]);
          __asm { FCVT            S5, H5 }
          v80 = fmaxf(*(float *)&_D1, fmaxf(_S12, _S5));
          v81 = (float)((float)((float)(v30 * _S12) + (float)(v26 * *(float *)&_D1)) + (float)(v31 * _S5))
              + (float)(v32 * v80);
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = (float)((float)((float)(v30 * _S12) + (float)(v26 * *(float *)&_D1)) + (float)(v31 * _S5))
                + (float)(v32 * v80);
            if (v81 < 0.0)
              v82 = 0.0;
          }
          a10.i16[0] = *(_WORD *)(v74 + 2 * v44);
          _H4 = *(_WORD *)(v27 + 2 * v77.u32[1]);
          a10.i16[1] = *(_WORD *)(v74 + 2 * result);
          __asm { FCVT            S6, H4 }
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a10), v48), 0), v48))));
          LOWORD(_D4) = *(_WORD *)(v27 + 2 * LODWORD(_D4));
          __asm { FCVT            S23, H4 }
          LOWORD(_D4) = *(_WORD *)(v27 + 2 * HIDWORD(_D4));
          __asm { FCVT            S24, H4 }
          LOWORD(_D4) = *(_WORD *)(v28 + 2 * llroundf(v67));
          __asm { FCVT            S7, H4 }
          v88 = _S15 * _S7;
          *(float *)&_D4 = _S16 * _S7;
          v89 = _S17 * _S7;
          _H3 = *(_WORD *)(v28 + 2 * llroundf(v73));
          __asm { FCVT            S3, H3 }
          v92 = _S19 * _S3;
          v93 = _S20 * _S3;
          v94 = _S22 * _S3;
          LOWORD(_S3) = *(_WORD *)(v28 + 2 * llroundf(v82));
          __asm { FCVT            S3, H3 }
          v96 = *(float *)&_D1 * _S3;
          v97 = _S12 * _S3;
          v98 = _S5 * _S3;
          v99 = (float)((float)((float)(v30 * _S23) + (float)(v26 * _S6)) + (float)(v31 * _S24))
              + (float)(v32 * fmaxf(_S6, fmaxf(_S23, _S24)));
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H5 = *(_WORD *)(v28 + 2 * llroundf(v100));
          __asm { FCVT            S5, H5 }
          _S6 = _S6 * _S5;
          v104 = _S23 * _S5;
          v105 = _S24 * _S5;
          v106 = (float)((float)(v168 * *(float *)&_D4) + (float)(v88 * v170)) + (float)(v89 * v167);
          v107 = (float)((float)(v165 * *(float *)&_D4) + (float)(v88 * v166)) + (float)(v89 * v164);
          _S4 = (float)((float)(v162 * *(float *)&_D4) + (float)(v88 * v163)) + (float)(v89 * v161);
          v109 = (float)((float)(v168 * v93) + (float)(v92 * v170)) + (float)(v94 * v167);
          v110 = (float)((float)(v165 * v93) + (float)(v92 * v166)) + (float)(v94 * v164);
          v111 = (float)((float)(v162 * v93) + (float)(v92 * v163)) + (float)(v94 * v161);
          v112 = (float)((float)(v168 * v97) + (float)(v96 * v170)) + (float)(v98 * v167);
          v113 = (float)((float)(v165 * v97) + (float)(v96 * v166)) + (float)(v98 * v164);
          v114 = (float)((float)(v162 * v97) + (float)(v96 * v163)) + (float)(v98 * v161);
          v115 = (float)((float)(v168 * v104) + (float)(_S6 * v170)) + (float)(v105 * v167);
          v116 = (float)((float)(v165 * v104) + (float)(_S6 * v166)) + (float)(v105 * v164);
          v117 = (float)((float)(v162 * v104) + (float)(_S6 * v163)) + (float)(v105 * v161);
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S16, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S3, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H1
            FCVT            S18, H4
          }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S20, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S19, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S22, H4 }
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H4
            FCVT            S4, H6
          }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          v134 = llroundf(fminf(fmaxf(v117, 0.0), 8191.0));
          __asm { FCVT            S5, H6 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * v134);
          __asm { FCVT            S6, H6 }
          v137 = (float)((float)((float)(v177 * _S3) + (float)(v178 * _S16)) + (float)(v176 * _S17)) + v23;
          if (v137 < v23)
            v138 = v23;
          else
            v138 = (float)((float)((float)(v177 * _S3) + (float)(v178 * _S16)) + (float)(v176 * _S17)) + v23;
          v139 = v137 <= v25;
          v140 = (float)((float)((float)(v177 * _S20) + (float)(v178 * _S18)) + (float)(v176 * _S19)) + v23;
          if (!v139)
            v138 = v25;
          v141 = llroundf(v138);
          if (v140 < v23)
            v142 = v23;
          else
            v142 = (float)((float)((float)(v177 * _S20) + (float)(v178 * _S18)) + (float)(v176 * _S19)) + v23;
          v139 = v140 <= v25;
          v143 = (float)((float)((float)(v177 * _S22) + (float)(v178 * _S1)) + (float)(v176 * _S12)) + v23;
          if (!v139)
            v142 = v25;
          v144 = llroundf(v142);
          if (v143 < v23)
            v145 = v23;
          else
            v145 = (float)((float)((float)(v177 * _S22) + (float)(v178 * _S1)) + (float)(v176 * _S12)) + v23;
          v139 = v143 <= v25;
          v146 = (float)((float)((float)(v177 * _S5) + (float)(v178 * _S4)) + (float)(v176 * _S6)) + v23;
          if (!v139)
            v145 = v25;
          v147 = llroundf(v145);
          if (v146 < v23)
            v148 = v23;
          else
            v148 = (float)((float)((float)(v177 * _S5) + (float)(v178 * _S4)) + (float)(v176 * _S6)) + v23;
          if (v146 <= v25)
            v149 = v148;
          else
            v149 = v25;
          v150 = (float)((float)(_S16 + _S18) + _S1) + _S4;
          v151 = (float)((float)(_S3 + _S20) + _S22) + _S5;
          *(_WORD *)v39 = v141 << v47;
          *((_WORD *)v39 + 1) = v144 << v47;
          *(_WORD *)v53 = v147 << v47;
          *((_WORD *)v53 + 1) = llroundf(v149) << v47;
          v152 = (float)((float)(_S17 + _S19) + _S12) + _S6;
          v153 = (float)((float)(v180 + (float)(v150 * v175)) + (float)(v151 * v174)) + (float)(v152 * v173);
          v154 = v179;
          if (v153 <= v179)
          {
            v154 = (float)((float)(v180 + (float)(v150 * v175)) + (float)(v151 * v174)) + (float)(v152 * v173);
            if (v153 < v181)
              v154 = v181;
          }
          v155 = (_WORD *)(v46 + 2 * v51);
          v156 = (float)((float)(v180 + (float)(v150 * v172)) + (float)(v151 * v171)) + (float)(v152 * v169);
          *v155 = llroundf(v154) << v47;
          v157 = v179;
          if (v156 <= v179)
          {
            v157 = v156;
            if (v156 < v181)
              v157 = v181;
          }
          v37 += 16;
          v52 += 16;
          v39 += 4;
          v53 += 4;
          v155[1] = llroundf(v157) << v47;
          v51 += 2;
          v26 = v159;
          v30 = v160;
          v31 = v158;
        }
        while (v15 > v51);
      }
      v37 = v50 + v20;
      v39 = &v49[v21];
      v46 += v22;
      v14 += 2;
    }
    while (v17 > v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  float16x4_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  float32x2_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  float16x4_t v61;
  float v82;
  float v83;
  float v84;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  unsigned int v97;
  float v100;
  float v101;
  BOOL v102;
  float v103;
  unsigned int v104;
  float v105;
  float v106;
  unsigned int v107;
  float v108;
  float v109;
  unsigned int v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  _WORD *v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v11 = *(_QWORD *)(result + 28);
  v12 = 2 * *result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = *(_QWORD *)(result + 44) + 2 * v13;
    v18 = 2 * v14 - 2 * v13;
    v19 = *((_QWORD *)result + 19);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = **((_QWORD **)result + 8);
    v22 = *v20;
    v23 = v20[1];
    LOWORD(a3) = *(_WORD *)(v19 + 144);
    v24 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v19 + 146);
    *(float *)&v25 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v19 + 148);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 150);
    v130 = (float)LODWORD(a6);
    v131 = (float)LODWORD(a4);
    LOWORD(v25) = *(_WORD *)(v19 + 152);
    v27 = (float)v25;
    v128 = *(float *)(v19 + 40);
    v129 = *(float *)(v19 + 36);
    v126 = *(float *)(v19 + 48) * 0.25;
    v127 = *(float *)(v19 + 44);
    v124 = *(float *)(v19 + 56) * 0.25;
    v125 = *(float *)(v19 + 52) * 0.25;
    v122 = *(float *)(v19 + 64) * 0.25;
    v123 = *(float *)(v19 + 60) * 0.25;
    v28 = *(float *)(v19 + 72);
    v121 = *(float *)(v19 + 68) * 0.25;
    v29 = *(float *)(v19 + 76);
    v30 = *(float *)(v19 + 80);
    v31 = *(float *)(v19 + 84);
    v32 = *(float *)(v19 + 88);
    v33 = *(float *)(v19 + 92);
    v34 = *(float *)(v19 + 96);
    v35 = *(float *)(v19 + 100);
    v36 = *(float *)(v19 + 104);
    v37 = v19 + 164;
    v38 = v19 + 16548;
    v39 = *((_QWORD *)result + 14);
    v40 = *((_QWORD *)result + 13) * a2 / v12;
    v41 = (uint64_t *)*((_QWORD *)result + 16);
    v42 = *((_QWORD *)result + 15) + 2 * v40;
    v43 = **((_QWORD **)result + 7) + v21 * v17 + 8 * *(_QWORD *)(result + 36);
    v45 = *v41;
    v44 = v41[1];
    result = (unsigned __int8 *)(v45 + v42 * v22 + 2 * v39);
    v46 = *(unsigned __int8 *)(v19 + 132);
    if (v46 >= 0x11)
      v47 = 0;
    else
      v47 = 16 - v46;
    v48 = *(unsigned __int8 *)(v19 + 156);
    if (v42 >= 0)
      v49 = v42;
    else
      v49 = v42 + 1;
    v50 = v44 + (v49 >> 1) * v23;
    v51 = *(unsigned __int8 *)(v19 + 155);
    v52 = *(unsigned __int8 *)(v19 + 154);
    v53 = v50 + 2 * v39;
    v54 = v47;
    v55 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      v56 = &result[v22];
      v57 = v43 + v21;
      if (v16)
      {
        v58 = 0;
        v59 = v43 + v21;
        v60 = &result[v22];
        do
        {
          _D16.i16[0] = *(_WORD *)(v43 + 2 * v52);
          _D17.i16[0] = *(_WORD *)(v43 + 2 * v48);
          v9.i16[0] = *(_WORD *)(v43 + 8 + 2 * v51);
          _D19.i16[0] = *(_WORD *)(v59 + 2 * v52);
          _D13.i16[0] = *(_WORD *)(v59 + 2 * v48);
          _D16.i16[1] = *(_WORD *)(v43 + 2 * v51);
          v61 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D16), v55), 0), v55)));
          _H11 = *(_WORD *)(v37 + 2 * v61.u32[0]);
          v61.i16[0] = *(_WORD *)(v59 + 8 + 2 * v51);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v37 + 2 * v61.u32[1]);
          _D17.i16[1] = *(_WORD *)(v43 + 8 + 2 * v52);
          _D17 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D17), v55), 0), v55)));
          __asm { FCVT            S14, H12 }
          _D17.i16[0] = *(_WORD *)(v37 + 2 * _D17.u32[0]);
          _H12 = *(_WORD *)(v37 + 2 * _D17.u32[1]);
          __asm
          {
            FCVT            S15, H17
            FCVT            S12, H12
          }
          v9.i16[1] = *(_WORD *)(v43 + 8 + 2 * v48);
          _D17 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v9), v55), 0), v55)));
          _D17.i16[0] = *(_WORD *)(v37 + 2 * _D17.u32[0]);
          __asm { FCVT            S18, H17 }
          _D17.i16[0] = *(_WORD *)(v37 + 2 * _D17.u32[1]);
          __asm { FCVT            S17, H17 }
          _D19.i16[1] = *(_WORD *)(v59 + 2 * v51);
          _D19 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D19), v55), 0), v55)));
          _D19.i16[0] = *(_WORD *)(v37 + 2 * _D19.u32[0]);
          _H20 = *(_WORD *)(v37 + 2 * _D19.u32[1]);
          _D13.i16[1] = *(_WORD *)(v59 + 8 + 2 * v52);
          __asm { FCVT            S19, H19 }
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v55), 0), v55)));
          _D13.i16[0] = *(_WORD *)(v37 + 2 * _D13.u32[0]);
          __asm
          {
            FCVT            S20, H20
            FCVT            S13, H13
          }
          _H22 = *(_WORD *)(v37 + 2 * _D13.u32[1]);
          v61.i16[1] = *(_WORD *)(v59 + 8 + 2 * v48);
          __asm { FCVT            S22, H22 }
          _D16 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v61), v55), 0), v55)));
          _D16.i16[0] = *(_WORD *)(v37 + 2 * _D16.u32[0]);
          __asm { FCVT            S16, H16 }
          _H3 = *(_WORD *)(v37 + 2 * _D16.u32[1]);
          __asm { FCVT            S3, H3 }
          _S1 = (float)((float)(v29 * _S14) + (float)(_S11 * v28)) + (float)(_S15 * v30);
          v82 = (float)((float)(v32 * _S14) + (float)(_S11 * v31)) + (float)(_S15 * v33);
          v83 = (float)((float)(v35 * _S14) + (float)(_S11 * v34)) + (float)(_S15 * v36);
          v84 = (float)((float)(v29 * _S18) + (float)(_S12 * v28)) + (float)(*(float *)_D17.i32 * v30);
          _S5 = (float)((float)(v32 * _S18) + (float)(_S12 * v31)) + (float)(*(float *)_D17.i32 * v33);
          *(float *)_D17.i32 = (float)((float)(v35 * _S18) + (float)(_S12 * v34)) + (float)(*(float *)_D17.i32 * v36);
          v86 = (float)((float)(v29 * _S20) + (float)(*(float *)_D19.i32 * v28)) + (float)(*(float *)_D13.i32 * v30);
          v87 = (float)((float)(v32 * _S20) + (float)(*(float *)_D19.i32 * v31)) + (float)(*(float *)_D13.i32 * v33);
          *(float *)_D19.i32 = (float)((float)(v35 * _S20) + (float)(*(float *)_D19.i32 * v34))
                             + (float)(*(float *)_D13.i32 * v36);
          v88 = (float)((float)(v29 * *(float *)_D16.i32) + (float)(_S22 * v28)) + (float)(_S3 * v30);
          v89 = (float)((float)(v32 * *(float *)_D16.i32) + (float)(_S22 * v31)) + (float)(_S3 * v33);
          v90 = (float)((float)(v35 * *(float *)_D16.i32) + (float)(_S22 * v34)) + (float)(_S3 * v36);
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _D16.i16[0] = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H1
            FCVT            S14, H16
          }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S16, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(*(float *)_D17.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S18, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H1
            FCVT            S1, H5
          }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          v97 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S3, H5 }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * v97);
          __asm { FCVT            S5, H5 }
          v100 = (float)((float)((float)(v128 * _S12) + (float)(v129 * _S11)) + (float)(v127 * *(float *)_D13.i32))
               + v24;
          if (v100 < v24)
            v101 = v24;
          else
            v101 = (float)((float)((float)(v128 * _S12) + (float)(v129 * _S11)) + (float)(v127 * *(float *)_D13.i32))
                 + v24;
          v102 = v100 <= v26;
          v103 = (float)((float)((float)(v128 * *(float *)_D16.i32) + (float)(v129 * _S14)) + (float)(v127 * _S15))
               + v24;
          if (!v102)
            v101 = v26;
          v104 = llroundf(v101);
          if (v103 < v24)
            v105 = v24;
          else
            v105 = (float)((float)((float)(v128 * *(float *)_D16.i32) + (float)(v129 * _S14)) + (float)(v127 * _S15))
                 + v24;
          v102 = v103 <= v26;
          v106 = (float)((float)((float)(v128 * _S18) + (float)(v129 * *(float *)_D17.i32))
                       + (float)(v127 * *(float *)_D19.i32))
               + v24;
          if (!v102)
            v105 = v26;
          v107 = llroundf(v105);
          if (v106 < v24)
            v108 = v24;
          else
            v108 = (float)((float)((float)(v128 * _S18) + (float)(v129 * *(float *)_D17.i32))
                         + (float)(v127 * *(float *)_D19.i32))
                 + v24;
          v102 = v106 <= v26;
          v109 = (float)((float)((float)(v128 * _S3) + (float)(v129 * _S1)) + (float)(v127 * _S5)) + v24;
          if (!v102)
            v108 = v26;
          v110 = llroundf(v108);
          if (v109 < v24)
            v111 = v24;
          else
            v111 = (float)((float)((float)(v128 * _S3) + (float)(v129 * _S1)) + (float)(v127 * _S5)) + v24;
          if (v109 <= v26)
            v112 = v111;
          else
            v112 = v26;
          v113 = (float)((float)(_S11 + _S14) + *(float *)_D17.i32) + _S1;
          v114 = (float)((float)(_S12 + *(float *)_D16.i32) + _S18) + _S3;
          *(_WORD *)result = v104 << v54;
          *((_WORD *)result + 1) = v107 << v54;
          *(_WORD *)v60 = v110 << v54;
          *((_WORD *)v60 + 1) = llroundf(v112) << v54;
          v115 = (float)((float)(*(float *)_D13.i32 + _S15) + *(float *)_D19.i32) + _S5;
          v116 = (float)((float)(v131 + (float)(v113 * v126)) + (float)(v114 * v125)) + (float)(v115 * v124);
          v117 = v27;
          if (v116 <= v27)
          {
            v117 = (float)((float)(v131 + (float)(v113 * v126)) + (float)(v114 * v125)) + (float)(v115 * v124);
            if (v116 < v130)
              v117 = v130;
          }
          v118 = (_WORD *)(v53 + 2 * v58);
          v119 = (float)((float)(v131 + (float)(v113 * v123)) + (float)(v114 * v122)) + (float)(v115 * v121);
          *v118 = llroundf(v117) << v54;
          v120 = v27;
          if (v119 <= v27)
          {
            v120 = v119;
            if (v119 < v130)
              v120 = v130;
          }
          v43 += 16;
          v59 += 16;
          result += 4;
          v60 += 4;
          v118[1] = llroundf(v120) << v54;
          v58 += 2;
        }
        while (v16 > v58);
      }
      v43 = v57 + v21;
      result = &v56[v22];
      v53 += v23;
      v15 += 2;
    }
    while (v18 > v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_xf420_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  float v62;
  float v64;
  float v66;
  float v69;
  float v72;
  float v74;
  float v77;
  float v81;
  float v83;
  float v86;
  float v89;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  _WORD *v107;
  float v108;
  float v109;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v17;
    v20 = v17[1];
    v21 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v26 = (float)LODWORD(a8);
    v27 = *(float *)(v16 + 36);
    v28 = *(float *)(v16 + 40);
    v29 = *(float *)(v16 + 44);
    v30 = *(float *)(v16 + 48) * 0.25;
    v31 = *(float *)(v16 + 52) * 0.25;
    v32 = *(float *)(v16 + 56) * 0.25;
    v33 = *(float *)(v16 + 60) * 0.25;
    v34 = *(float *)(v16 + 64) * 0.25;
    v35 = *(float *)(v16 + 68) * 0.25;
    v36 = *(_QWORD *)(result + 112);
    v37 = *(uint64_t **)(result + 128);
    v38 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v9);
    v39 = **(_QWORD **)(result + 56) + v18 * v14 + 8 * *(_QWORD *)(result + 36);
    v40 = *v37;
    v41 = v37[1];
    v42 = (char *)(v40 + v38 * v19 + 2 * v36);
    v43 = *(unsigned __int8 *)(v16 + 132);
    if (v43 >= 0x11)
      v44 = 0;
    else
      v44 = 16 - v43;
    v45 = *(unsigned __int8 *)(v16 + 156);
    if (v38 >= 0)
      v46 = v38;
    else
      v46 = v38 + 1;
    v47 = v41 + (v46 >> 1) * v20;
    v48 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v49 = v47 + 2 * v36;
    v50 = v44;
    do
    {
      v51 = &v42[v19];
      v52 = v39 + v18;
      if (v13)
      {
        v53 = 0;
        v54 = v39 + v18;
        v55 = &v42[v19];
        do
        {
          _H23 = *(_WORD *)(v39 + 2 * result);
          __asm { FCVT            S23, H23 }
          v62 = v21 * _S23;
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v48);
          __asm { FCVT            S23, H23 }
          v64 = v21 * _S23;
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v45);
          __asm { FCVT            S23, H23 }
          v66 = v21 * _S23;
          _H26 = *(_WORD *)(v39 + 8 + 2 * result);
          __asm { FCVT            S26, H26 }
          v69 = v21 * _S26;
          LOWORD(_S26) = *(_WORD *)(v39 + 8 + 2 * v48);
          __asm { FCVT            S26, H26 }
          _H29 = *(_WORD *)(v39 + 8 + 2 * v45);
          v72 = v21 * _S26;
          __asm { FCVT            S26, H29 }
          v74 = v21 * _S26;
          _H29 = *(_WORD *)(v54 + 2 * result);
          __asm { FCVT            S29, H29 }
          v77 = v21 * _S29;
          _H30 = *(_WORD *)(v54 + 2 * v48);
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v54 + 2 * v45);
          v81 = v21 * _S30;
          __asm { FCVT            S31, H31 }
          v83 = v21 * _S31;
          _H8 = *(_WORD *)(v54 + 8 + 2 * result);
          __asm { FCVT            S8, H8 }
          v86 = v21 * _S8;
          _H9 = *(_WORD *)(v54 + 8 + 2 * v48);
          __asm { FCVT            S9, H9 }
          v89 = v21 * _S9;
          _H10 = *(_WORD *)(v54 + 8 + 2 * v45);
          __asm { FCVT            S10, H10 }
          v92 = v21 * _S10;
          v93 = (float)((float)((float)(v28 * v64) + (float)(v27 * v62)) + (float)(v29 * v66)) + v22;
          v94 = (float)((float)((float)(v28 * v72) + (float)(v27 * v69)) + (float)(v29 * v74)) + v22;
          v95 = (float)((float)((float)(v28 * v81) + (float)(v27 * v77)) + (float)(v29 * v83)) + v22;
          v96 = (float)((float)((float)(v28 * v89) + (float)(v27 * v86)) + (float)(v29 * v92)) + v22;
          if (v93 < v22)
            v97 = v22;
          else
            v97 = (float)((float)((float)(v28 * v64) + (float)(v27 * v62)) + (float)(v29 * v66)) + v22;
          if (v93 <= v24)
            v98 = v97;
          else
            v98 = v24;
          *(_WORD *)v42 = llroundf(v98) << v50;
          if (v94 < v22)
            v99 = v22;
          else
            v99 = (float)((float)((float)(v28 * v72) + (float)(v27 * v69)) + (float)(v29 * v74)) + v22;
          if (v94 > v24)
            v99 = v24;
          *((_WORD *)v42 + 1) = llroundf(v99) << v50;
          if (v95 < v22)
            v100 = v22;
          else
            v100 = (float)((float)((float)(v28 * v81) + (float)(v27 * v77)) + (float)(v29 * v83)) + v22;
          if (v95 > v24)
            v100 = v24;
          *(_WORD *)v55 = llroundf(v100) << v50;
          if (v96 < v22)
            v101 = v22;
          else
            v101 = (float)((float)((float)(v28 * v89) + (float)(v27 * v86)) + (float)(v29 * v92)) + v22;
          if (v96 > v24)
            v101 = v24;
          *((_WORD *)v55 + 1) = llroundf(v101) << v50;
          v102 = (float)((float)(v62 + v69) + v77) + v86;
          v103 = (float)((float)(v64 + v72) + v81) + v89;
          v104 = (float)((float)(v66 + v74) + v83) + v92;
          v105 = (float)((float)(v23 + (float)(v102 * v30)) + (float)(v103 * v31)) + (float)(v104 * v32);
          v106 = v26;
          if (v105 <= v26)
          {
            v106 = (float)((float)(v23 + (float)(v102 * v30)) + (float)(v103 * v31)) + (float)(v104 * v32);
            if (v105 < v25)
              v106 = v25;
          }
          v107 = (_WORD *)(v49 + 2 * v53);
          v108 = (float)((float)(v23 + (float)(v102 * v33)) + (float)(v103 * v34)) + (float)(v104 * v35);
          *v107 = llroundf(v106) << v50;
          v109 = v26;
          if (v108 <= v26)
          {
            v109 = v108;
            if (v108 < v25)
              v109 = v25;
          }
          v39 += 16;
          v54 += 16;
          v42 += 4;
          v55 += 4;
          v107[1] = llroundf(v109) << v50;
          v53 += 2;
        }
        while (v13 > v53);
      }
      v39 = v52 + v18;
      v42 = &v51[v19];
      v49 += v20;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, double _D3)
{
  float16x4_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  float32x2_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  int32x2_t v73;
  float v75;
  float v76;
  float v81;
  char v86;
  char v87;
  float v90;
  float v91;
  float v92;
  float v97;
  float v98;
  float v99;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    LOWORD(a3) = *(_WORD *)(v16 + 144);
    v23 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v16 + 146);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 148);
    v25 = (float)LODWORD(a5);
    LOWORD(_D3) = *(_WORD *)(v16 + 150);
    v26 = (float)LODWORD(_D3);
    LOWORD(_D3) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(_D3);
    v129 = *(float *)(v16 + 36);
    v130 = v26;
    v28 = *(float *)(v16 + 44);
    v127 = *(float *)(v16 + 48) * 0.5;
    v128 = *(float *)(v16 + 40);
    v125 = *(float *)(v16 + 56) * 0.5;
    v126 = *(float *)(v16 + 52) * 0.5;
    v123 = *(float *)(v16 + 64) * 0.5;
    v124 = *(float *)(v16 + 60) * 0.5;
    v29 = *(float *)(v16 + 72);
    v122 = *(float *)(v16 + 68) * 0.5;
    v30 = *(float *)(v16 + 76);
    v31 = *(float *)(v16 + 80);
    v32 = *(float *)(v16 + 84);
    v33 = *(float *)(v16 + 88);
    v34 = *(float *)(v16 + 92);
    v35 = *(float *)(v16 + 96);
    v36 = *(float *)(v16 + 100);
    v37 = *(float *)(v16 + 104);
    v38 = v16 + 164;
    v39 = v16 + 16548;
    v40 = v16 + 32932;
    v42 = *(float *)(v16 + 108);
    v41 = *(float *)(v16 + 112);
    v43 = *(float *)(v16 + 116);
    v44 = *(float *)(v16 + 120);
    v45 = *(uint64_t **)(result + 128);
    v46 = *(_QWORD *)(result + 112);
    v47 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v48 = *(_QWORD *)(result + 36);
    result = *(unsigned __int8 *)(v16 + 157);
    v49 = *(unsigned __int8 *)(v16 + 156);
    v50 = *(unsigned __int8 *)(v16 + 155);
    v51 = *(unsigned __int8 *)(v16 + 154);
    v52 = v45[2];
    if (v52)
      v53 = (_BYTE *)(v52 + v47 * v22 + v46);
    else
      v53 = 0;
    v55 = *v45;
    v54 = v45[1];
    v56 = v54 + v47 * v21 + v46;
    if (!v54)
      v56 = 0;
    v57 = (_BYTE *)(v55 + v47 * v20 + v46);
    v58 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v59 = *v18 + v19 * v14 + 8 * v48;
    do
    {
      if (v13)
      {
        v60 = 0;
        v61 = v53;
        v62 = v57;
        v63 = v59;
        do
        {
          v64 = v24;
          LOWORD(_D3) = *(_WORD *)(v63 + 2 * v51);
          v6.i16[0] = *(_WORD *)(v63 + 2 * v49);
          v65 = v63 + 8;
          WORD1(_D3) = *(_WORD *)(v63 + 2 * v50);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D3), v58), 0), v58)));
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[1]);
          __asm { FCVT            S16, H3 }
          v6.i16[1] = *(_WORD *)(v63 + 8 + 2 * v51);
          _D3 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v6), v58), 0), v58)));
          v73 = vcvt_s32_f32(*(float32x2_t *)&_D3);
          LOWORD(_D3) = *(_WORD *)(v38 + 2 * v73.u32[0]);
          __asm { FCVT            S17, H3 }
          v75 = fmaxf(_S15, fmaxf(_S16, _S17));
          v76 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17)) + (float)(v44 * v75);
          LODWORD(_D3) = 1174403072;
          if (v76 <= 8191.0)
          {
            *(float *)&_D3 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17))
                           + (float)(v44 * v75);
            if (v76 < 0.0)
              LODWORD(_D3) = 0;
          }
          _D18.i16[0] = *(_WORD *)(v65 + 2 * v50);
          _H19 = *(_WORD *)(v38 + 2 * v73.u32[1]);
          _D18.i16[1] = *(_WORD *)(v65 + 2 * v49);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v58), 0), v58)));
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v81 = (float)((float)((float)(v41 * _S20) + (float)(v42 * _S19)) + (float)(v43 * _S22))
              + (float)(v44 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v81 <= 8191.0)
          {
            *(float *)_D18.i32 = v81;
            if (v81 < 0.0)
              _D18.i32[0] = 0;
          }
          if (v61)
          {
            _H13 = *(_WORD *)(v63 + 2 * result);
            __asm { FCVT            S13, H13 }
            _H1 = *(_WORD *)(v65 + 2 * result);
            __asm { FCVT            S1, H1 }
            v86 = llroundf(_S13 * 255.0);
            v87 = llroundf(_S1 * 255.0);
          }
          else
          {
            v86 = 0;
            v87 = 0;
          }
          v24 = v64;
          _H1 = *(_WORD *)(v39 + 2 * llroundf(*(float *)&_D3));
          __asm { FCVT            S1, H1 }
          v90 = _S15 * _S1;
          v91 = _S16 * _S1;
          v92 = _S17 * _S1;
          _H16 = *(_WORD *)(v39 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          v97 = _S22 * _S16;
          v98 = (float)((float)(v30 * v91) + (float)(v90 * v29)) + (float)(v92 * v31);
          v99 = (float)((float)(v33 * v91) + (float)(v90 * v32)) + (float)(v92 * v34);
          _S1 = (float)((float)(v36 * v91) + (float)(v90 * v35)) + (float)(v92 * v37);
          _S3 = (float)((float)(v30 * _S18) + (float)(_S17 * v29)) + (float)(v97 * v31);
          _S5 = (float)((float)(v33 * _S18) + (float)(_S17 * v32)) + (float)(v97 * v34);
          _S16 = (float)((float)(v36 * _S18) + (float)(_S17 * v35)) + (float)(v97 * v37);
          LOWORD(_S17) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          v110 = (float)((float)((float)(v128 * _S18) + (float)(v129 * _S17)) + (float)(v28 * _S1)) + v23;
          v111 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v28 * _S19)) + v23;
          if (v110 < v23)
            v112 = v23;
          else
            v112 = (float)((float)((float)(v128 * _S18) + (float)(v129 * _S17)) + (float)(v28 * _S1)) + v23;
          if (v110 <= v25)
            v113 = v112;
          else
            v113 = v25;
          *v62 = llroundf(v113);
          if (v111 < v23)
            v114 = v23;
          else
            v114 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v28 * _S19)) + v23;
          if (v111 > v25)
            v114 = v25;
          v62[1] = llroundf(v114);
          v115 = _S17 + _S3;
          v116 = _S18 + _S5;
          v117 = _S1 + _S19;
          v118 = (float)((float)(v64 + (float)(v115 * v127)) + (float)((float)(_S18 + _S5) * v126))
               + (float)((float)(_S1 + _S19) * v125);
          v119 = v27;
          if (v118 <= v27)
          {
            v119 = v118;
            if (v118 < v130)
              v119 = v130;
          }
          v120 = (float)((float)(v64 + (float)(v115 * v124)) + (float)(v116 * v123)) + (float)(v117 * v122);
          *(_BYTE *)(v56 + v60) = llroundf(v119);
          v121 = v27;
          if (v120 <= v27)
          {
            v121 = v120;
            if (v120 < v130)
              v121 = v130;
          }
          *(_BYTE *)(v56 + v60 + 1) = llroundf(v121);
          if (v61)
          {
            *v61 = v86;
            v61[1] = v87;
            v61 += 2;
          }
          v63 += 16;
          v60 += 2;
          v62 += 2;
        }
        while (v13 > v60);
      }
      v59 += v19;
      v57 += v20;
      v56 += v21;
      v53 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  float32x2_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  char v74;
  char v75;
  float v84;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 20);
    v16 = v12 + *(_QWORD *)(result + 44);
    v17 = v13 - v12;
    v18 = *(_QWORD *)(result + 152);
    v19 = *(uint64_t **)(result + 136);
    v20 = *(_QWORD **)(result + 56);
    v21 = **(_QWORD **)(result + 64);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    v26 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v18 + 148);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v18 + 150);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v18 + 152);
    v29 = (float)LODWORD(a7);
    v30 = *(float *)(v18 + 36);
    v31 = *(float *)(v18 + 40);
    v32 = *(float *)(v18 + 44);
    v102 = *(float *)(v18 + 52) * 0.5;
    v103 = *(float *)(v18 + 48) * 0.5;
    v100 = *(float *)(v18 + 60) * 0.5;
    v101 = *(float *)(v18 + 56) * 0.5;
    v33 = *(float *)(v18 + 64) * 0.5;
    v34 = *(float *)(v18 + 72);
    v35 = *(float *)(v18 + 68) * 0.5;
    v36 = *(float *)(v18 + 76);
    v37 = *(float *)(v18 + 80);
    v38 = *(float *)(v18 + 84);
    v39 = *(float *)(v18 + 88);
    v40 = *(float *)(v18 + 92);
    v41 = *(float *)(v18 + 96);
    v42 = *(float *)(v18 + 100);
    v43 = *(float *)(v18 + 104);
    v44 = v18 + 164;
    v45 = v18 + 16548;
    v46 = *(uint64_t **)(result + 128);
    v47 = *(_QWORD *)(result + 112);
    v48 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v18 + 157);
    result = *(unsigned __int8 *)(v18 + 156);
    v51 = *(unsigned __int8 *)(v18 + 155);
    v52 = *(unsigned __int8 *)(v18 + 154);
    v53 = v46[2];
    if (v53)
      v54 = (_BYTE *)(v53 + v48 * v24 + v47);
    else
      v54 = 0;
    v56 = *v46;
    v55 = v46[1];
    v57 = v55 + v48 * v23 + v47;
    if (!v55)
      v57 = 0;
    v58 = (_BYTE *)(v56 + v48 * v22 + v47);
    v59 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v60 = *v20 + v21 * v16 + 8 * v49;
    do
    {
      if (v15)
      {
        v61 = 0;
        v62 = v60;
        v63 = v54;
        v64 = v58;
        do
        {
          v65 = v62 + 8;
          if (v63)
          {
            _H11 = *(_WORD *)(v65 + 2 * v50);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v62 + 2 * v50);
            __asm { FCVT            S12, H12 }
            v74 = llroundf(_S12 * 255.0);
            v75 = llroundf(_S11 * 255.0);
          }
          else
          {
            v74 = 0;
            v75 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v62 + 2 * v52);
          _D12.i16[0] = *(_WORD *)(v62 + 2 * result);
          _D11.i16[1] = *(_WORD *)(v62 + 2 * v51);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v59), 0), v59)));
          _D11.i16[0] = *(_WORD *)(v44 + 2 * _D11.u32[0]);
          _D13.i16[0] = *(_WORD *)(v65 + 2 * v51);
          _H14 = *(_WORD *)(v44 + 2 * _D11.u32[1]);
          __asm
          {
            FCVT            S11, H11
            FCVT            S14, H14
          }
          _D12.i16[1] = *(_WORD *)(v65 + 2 * v52);
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v59), 0), v59)));
          _D12.i16[0] = *(_WORD *)(v44 + 2 * _D12.u32[0]);
          __asm { FCVT            S12, H12 }
          _H15 = *(_WORD *)(v44 + 2 * _D12.u32[1]);
          __asm { FCVT            S15, H15 }
          _D13.i16[1] = *(_WORD *)(v65 + 2 * result);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v59), 0), v59)));
          _D13.i16[0] = *(_WORD *)(v44 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H16 = *(_WORD *)(v44 + 2 * _D13.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v36 * _S14) + (float)(*(float *)_D11.i32 * v34)) + (float)(*(float *)_D12.i32 * v37);
          _S18 = (float)((float)(v39 * _S14) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D12.i32 * v40);
          *(float *)_D11.i32 = (float)((float)(v42 * _S14) + (float)(*(float *)_D11.i32 * v41))
                             + (float)(*(float *)_D12.i32 * v43);
          *(float *)_D12.i32 = (float)((float)(v36 * *(float *)_D13.i32) + (float)(_S15 * v34)) + (float)(_S16 * v37);
          v84 = (float)((float)(v39 * *(float *)_D13.i32) + (float)(_S15 * v38)) + (float)(_S16 * v40);
          _S16 = (float)((float)(v42 * *(float *)_D13.i32) + (float)(_S15 * v41)) + (float)(_S16 * v43);
          LOWORD(_S17) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          _D11.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          _D11.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _D12.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          LOWORD(_S16) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          v89 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17)) + (float)(v32 * *(float *)_D13.i32)) + v25;
          v90 = (float)((float)((float)(v31 * *(float *)_D12.i32) + (float)(v30 * *(float *)_D11.i32))
                      + (float)(v32 * _S16))
              + v25;
          if (v89 < v25)
            v91 = v25;
          else
            v91 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17)) + (float)(v32 * *(float *)_D13.i32)) + v25;
          if (v89 > v27)
            v91 = v27;
          *v64 = llroundf(v91);
          if (v90 < v25)
            v92 = v25;
          else
            v92 = (float)((float)((float)(v31 * *(float *)_D12.i32) + (float)(v30 * *(float *)_D11.i32))
                        + (float)(v32 * _S16))
                + v25;
          if (v90 > v27)
            v92 = v27;
          v64[1] = llroundf(v92);
          v93 = _S17 + *(float *)_D11.i32;
          v94 = _S18 + *(float *)_D12.i32;
          v95 = *(float *)_D13.i32 + _S16;
          v96 = (float)((float)(v26 + (float)(v93 * v103)) + (float)(v94 * v102)) + (float)(v95 * v101);
          v97 = v29;
          if (v96 <= v29)
          {
            v97 = (float)((float)(v26 + (float)(v93 * v103)) + (float)(v94 * v102)) + (float)(v95 * v101);
            if (v96 < v28)
              v97 = v28;
          }
          v98 = (float)((float)(v26 + (float)(v93 * v100)) + (float)(v94 * v33)) + (float)(v95 * v35);
          *(_BYTE *)(v57 + v61) = llroundf(v97);
          v99 = v29;
          if (v98 <= v29)
          {
            v99 = v98;
            if (v98 < v28)
              v99 = v28;
          }
          *(_BYTE *)(v57 + v61 + 1) = llroundf(v99);
          if (v63)
          {
            *v63 = v74;
            v63[1] = v75;
            v63 += 2;
          }
          v62 += 16;
          v61 += 2;
          v64 += 2;
        }
        while (v15 > v61);
      }
      v60 += v21;
      v58 += v22;
      v57 += v23;
      v54 += v24;
      ++v14;
    }
    while (v14 != v17);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_422vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  char v66;
  char v67;
  float v70;
  float v73;
  float v76;
  float v79;
  float v82;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48) * 0.5;
    v33 = *(float *)(v16 + 52) * 0.5;
    v34 = *(float *)(v16 + 56) * 0.5;
    v35 = *(float *)(v16 + 60) * 0.5;
    v36 = *(float *)(v16 + 64) * 0.5;
    v37 = *(float *)(v16 + 68) * 0.5;
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 157);
    v43 = *(unsigned __int8 *)(v16 + 156);
    v44 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v45 = v38[2];
    if (v45)
      v46 = (_BYTE *)(v45 + v40 * v22 + v39);
    else
      v46 = 0;
    v49 = v38;
    v48 = *v38;
    v47 = v49[1];
    _ZF = v47 == 0;
    v51 = v47 + v40 * v21 + v39;
    if (_ZF)
      v51 = 0;
    v52 = (_BYTE *)(v48 + v40 * v20 + v39);
    v53 = *v18 + v19 * v14 + 8 * v41;
    do
    {
      if (v13)
      {
        v54 = 0;
        v55 = v53;
        v56 = v46;
        v57 = v52;
        do
        {
          v58 = v55 + 8;
          if (v56)
          {
            _H23 = *(_WORD *)(v58 + 2 * v42);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v55 + 2 * v42);
            __asm { FCVT            S24, H24 }
            v66 = llroundf(_S24 * 255.0);
            v67 = llroundf(_S23 * 255.0);
          }
          else
          {
            v66 = 0;
            v67 = 0;
          }
          _H23 = *(_WORD *)(v55 + 2 * result);
          __asm { FCVT            S23, H23 }
          v70 = v23 * _S23;
          _H24 = *(_WORD *)(v55 + 2 * v44);
          __asm { FCVT            S24, H24 }
          v73 = v23 * _S24;
          _H25 = *(_WORD *)(v55 + 2 * v43);
          __asm { FCVT            S25, H25 }
          v76 = v23 * _S25;
          _H26 = *(_WORD *)(v58 + 2 * result);
          __asm { FCVT            S26, H26 }
          v79 = v23 * _S26;
          _H27 = *(_WORD *)(v58 + 2 * v44);
          __asm { FCVT            S27, H27 }
          v82 = v23 * _S27;
          _H28 = *(_WORD *)(v58 + 2 * v43);
          __asm { FCVT            S28, H28 }
          v85 = v23 * _S28;
          v86 = (float)((float)((float)(v30 * v73) + (float)(v29 * v70)) + (float)(v31 * v76)) + v24;
          v87 = (float)((float)((float)(v30 * v82) + (float)(v29 * v79)) + (float)(v31 * v85)) + v24;
          if (v86 < v24)
            v88 = v24;
          else
            v88 = (float)((float)((float)(v30 * v73) + (float)(v29 * v70)) + (float)(v31 * v76)) + v24;
          if (v86 <= v26)
            v89 = v88;
          else
            v89 = v26;
          *v57 = llroundf(v89);
          if (v87 < v24)
            v90 = v24;
          else
            v90 = (float)((float)((float)(v30 * v82) + (float)(v29 * v79)) + (float)(v31 * v85)) + v24;
          if (v87 > v26)
            v90 = v26;
          v57[1] = llroundf(v90);
          v91 = v70 + v79;
          v92 = v73 + v82;
          v93 = v76 + v85;
          v94 = (float)((float)(v25 + (float)(v91 * v32)) + (float)(v92 * v33)) + (float)(v93 * v34);
          v95 = v28;
          if (v94 <= v28)
          {
            v95 = (float)((float)(v25 + (float)(v91 * v32)) + (float)(v92 * v33)) + (float)(v93 * v34);
            if (v94 < v27)
              v95 = v27;
          }
          v96 = (float)((float)(v25 + (float)(v91 * v35)) + (float)(v92 * v36)) + (float)(v93 * v37);
          *(_BYTE *)(v51 + v54) = llroundf(v95);
          v97 = v28;
          if (v96 <= v28)
          {
            v97 = v96;
            if (v96 < v27)
              v97 = v27;
          }
          *(_BYTE *)(v51 + v54 + 1) = llroundf(v97);
          if (v56)
          {
            *v56 = v66;
            v56[1] = v67;
            v56 += 2;
          }
          v55 += 16;
          v54 += 2;
          v57 += 2;
        }
        while (v13 > v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, float a3, double _D1)
{
  float16x4_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x2_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  int32x2_t v68;
  float v70;
  float v71;
  float v76;
  char v81;
  char v82;
  float v85;
  float v86;
  float v87;
  float v90;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v100;
  float v101;
  unsigned int v103;
  float v108;
  float v110;
  float v111;
  float v112;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  char v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = *((_QWORD *)result + 14);
  v10 = (_QWORD *)*((_QWORD *)result + 16);
  v11 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
  v12 = (uint64_t *)*((_QWORD *)result + 17);
  v13 = (v6 + v6 * a2) / v7;
  v14 = (_BYTE *)v10[1];
  if (v14)
    v14 += v12[1] * v11 + v9;
  if (v13 != v8)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 44);
    v17 = v8 + v16;
    v18 = **((_QWORD **)result + 8);
    v19 = *v12;
    v20 = *((_QWORD *)result + 19);
    v21 = *v10 + v19 * v11;
    v22 = *(_QWORD *)(result + 20);
    v23 = v13 + v16;
    v24 = **((_QWORD **)result + 7) + v18 * v17 + 8 * *(_QWORD *)(result + 36);
    v25 = (_BYTE *)(v21 + v9);
    v26 = v23 - v17;
    LOWORD(a3) = *(_WORD *)(v20 + 144);
    v27 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v20 + 146);
    v28 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 148);
    v29 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 150);
    v30 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 152);
    v31 = (float)LODWORD(_D1);
    v33 = *(float *)(v20 + 36);
    v32 = *(float *)(v20 + 40);
    v34 = *(float *)(v20 + 44);
    v131 = *(float *)(v20 + 48) * 0.5;
    v132 = v28;
    v129 = *(float *)(v20 + 56) * 0.5;
    v130 = *(float *)(v20 + 52) * 0.5;
    v127 = *(float *)(v20 + 64) * 0.5;
    v128 = *(float *)(v20 + 60) * 0.5;
    v125 = *(float *)(v20 + 68) * 0.5;
    v126 = *(float *)(v20 + 72);
    v35 = *(float *)(v20 + 80);
    v124 = *(float *)(v20 + 76);
    v36 = *(float *)(v20 + 84);
    v37 = *(float *)(v20 + 88);
    v38 = *(float *)(v20 + 92);
    v39 = *(float *)(v20 + 96);
    v40 = *(float *)(v20 + 100);
    v41 = *(float *)(v20 + 104);
    v42 = v20 + 164;
    v43 = v20 + 16548;
    result = (unsigned __int8 *)(v20 + 32932);
    v45 = *(float *)(v20 + 108);
    v44 = *(float *)(v20 + 112);
    v46 = *(float *)(v20 + 116);
    v47 = *(float *)(v20 + 120);
    v48 = *(unsigned __int8 *)(v20 + 157);
    v49 = *(unsigned __int8 *)(v20 + 156);
    v50 = *(unsigned __int8 *)(v20 + 155);
    v51 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v52 = *(unsigned __int8 *)(v20 + 154);
    do
    {
      if (v22)
      {
        v53 = 0;
        v54 = v14;
        v55 = v25;
        v56 = v24;
        do
        {
          v57 = v34;
          v58 = v32;
          v59 = v33;
          LOWORD(_D1) = *(_WORD *)(v56 + 2 * v52);
          v4.i16[0] = *(_WORD *)(v56 + 2 * v49);
          v60 = v56 + 8;
          WORD1(_D1) = *(_WORD *)(v56 + 2 * v50);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v51), 0), v51)));
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          v4.i16[1] = *(_WORD *)(v56 + 8 + 2 * v52);
          _D1 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v4), v51), 0), v51)));
          v68 = vcvt_s32_f32(*(float32x2_t *)&_D1);
          LOWORD(_D1) = *(_WORD *)(v42 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          v71 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17)) + (float)(v47 * v70);
          LODWORD(_D1) = 1174403072;
          if (v71 <= 8191.0)
          {
            *(float *)&_D1 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17))
                           + (float)(v47 * v70);
            if (v71 < 0.0)
              LODWORD(_D1) = 0;
          }
          _D18.i16[0] = *(_WORD *)(v60 + 2 * v50);
          _H19 = *(_WORD *)(v42 + 2 * v68.u32[1]);
          _D18.i16[1] = *(_WORD *)(v60 + 2 * v49);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v51), 0), v51)));
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v76 = (float)((float)((float)(v44 * _S20) + (float)(v45 * _S19)) + (float)(v46 * _S22))
              + (float)(v47 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v76 <= 8191.0)
          {
            *(float *)_D18.i32 = v76;
            if (v76 < 0.0)
              _D18.i32[0] = 0;
          }
          if (v54)
          {
            _H13 = *(_WORD *)(v56 + 2 * v48);
            __asm { FCVT            S13, H13 }
            _H5 = *(_WORD *)(v60 + 2 * v48);
            __asm { FCVT            S5, H5 }
            v81 = llroundf(_S13 * 255.0);
            v82 = llroundf(_S5 * 255.0);
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
          v33 = v59;
          v32 = v58;
          v34 = v57;
          _H1 = *(_WORD *)(v43 + 2 * llroundf(*(float *)&_D1));
          __asm { FCVT            S1, H1 }
          v85 = _S15 * _S1;
          v86 = _S16 * _S1;
          v87 = _S17 * _S1;
          _H16 = *(_WORD *)(v43 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          v90 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          v93 = (float)((float)(v124 * v86) + (float)(v85 * v126)) + (float)(v87 * v35);
          v94 = (float)((float)(v37 * v86) + (float)(v85 * v36)) + (float)(v87 * v38);
          v95 = (float)((float)(v40 * v86) + (float)(v85 * v39)) + (float)(v87 * v41);
          v96 = (float)(v124 * _S18) + (float)(v90 * v126);
          v97 = (float)(v37 * _S18) + (float)(v90 * v36);
          v98 = (float)(v40 * _S18) + (float)(v90 * v39);
          _S5 = v96 + (float)(_S16 * v35);
          v100 = v97 + (float)(_S16 * v38);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0))];
          v101 = v98 + (float)(_S16 * v41);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          v103 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v103];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          v108 = (float)(v32 * _S1) + (float)(v33 * _S18);
          _S6 = _S18 + _S16;
          v110 = _S1 + _S17;
          v111 = (float)(v132 + (float)((float)(_S18 + _S16) * v131)) + (float)(v110 * v130);
          v112 = (float)(v132 + (float)(_S6 * v128)) + (float)(v110 * v127);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          v114 = v108 + (float)(v57 * _S20);
          v115 = v111 + (float)((float)(_S20 + _S19) * v129);
          v116 = v112 + (float)((float)(_S20 + _S19) * v125);
          if (v115 < v30)
            v117 = v30;
          else
            v117 = v115;
          v118 = v114 + v27;
          if (v115 > v31)
            v117 = v31;
          v119 = llroundf(v117);
          if (v118 < v27)
            v120 = v27;
          else
            v120 = v118;
          *v55 = v119;
          if (v118 > v29)
            v120 = v29;
          v55[1] = llroundf(v120);
          v121 = v31;
          if (v116 <= v31)
          {
            v121 = v116;
            if (v116 < v30)
              v121 = v30;
          }
          v122 = (float)((float)((float)(v32 * _S17) + (float)(v33 * _S16)) + (float)(v57 * _S19)) + v27;
          v55[2] = llroundf(v121);
          v123 = v29;
          if (v122 <= v29)
          {
            v123 = v122;
            if (v122 < v27)
              v123 = v27;
          }
          v55[3] = llroundf(v123);
          if (v54)
          {
            *v54 = v81;
            v54[1] = v82;
            v54 += 2;
          }
          v56 += 16;
          v53 += 2;
          v55 += 4;
        }
        while (v22 > v53);
      }
      v24 += v18;
      v25 += v19;
      ++v15;
    }
    while (v15 != v26);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_2vuyf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x2_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  char v70;
  char v71;
  float v78;
  float v80;
  float v84;
  float v85;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  char v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD **)(result + 128);
  v15 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
  v16 = *(uint64_t **)(result + 136);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_BYTE *)v14[1];
  if (v18)
    v18 += v16[1] * v15 + v13;
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **(_QWORD **)(result + 64);
    v23 = *v16;
    v24 = *(_QWORD *)(result + 152);
    v25 = *v14 + v23 * v15;
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **(_QWORD **)(result + 56) + v22 * v21 + 8 * *(_QWORD *)(result + 36);
    v29 = (_BYTE *)(v25 + v13);
    v30 = v27 - v21;
    LOWORD(a3) = *(_WORD *)(v24 + 144);
    v31 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v24 + 146);
    v32 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v24 + 148);
    v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v24 + 150);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v24 + 152);
    v35 = (float)LODWORD(a7);
    v36 = *(float *)(v24 + 36);
    v37 = *(float *)(v24 + 40);
    v38 = *(float *)(v24 + 44);
    v100 = *(float *)(v24 + 52) * 0.5;
    v101 = *(float *)(v24 + 48) * 0.5;
    v99 = *(float *)(v24 + 56) * 0.5;
    v39 = *(float *)(v24 + 60) * 0.5;
    v40 = *(float *)(v24 + 64) * 0.5;
    v41 = *(float *)(v24 + 72);
    v42 = *(float *)(v24 + 68) * 0.5;
    v43 = *(float *)(v24 + 76);
    v44 = *(float *)(v24 + 80);
    v45 = *(float *)(v24 + 84);
    v46 = *(float *)(v24 + 88);
    v47 = *(float *)(v24 + 92);
    v48 = *(float *)(v24 + 96);
    v49 = *(float *)(v24 + 100);
    v50 = *(float *)(v24 + 104);
    v51 = v24 + 164;
    v52 = v24 + 16548;
    result = *(unsigned __int8 *)(v24 + 157);
    v53 = *(unsigned __int8 *)(v24 + 156);
    v54 = *(unsigned __int8 *)(v24 + 155);
    v55 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v56 = *(unsigned __int8 *)(v24 + 154);
    do
    {
      if (v26)
      {
        v57 = 0;
        v58 = v28;
        v59 = v18;
        v60 = v29;
        do
        {
          v61 = v58 + 8;
          if (v59)
          {
            _H11 = *(_WORD *)(v61 + 2 * result);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v58 + 2 * result);
            __asm { FCVT            S12, H12 }
            v70 = llroundf(_S12 * 255.0);
            v71 = llroundf(_S11 * 255.0);
          }
          else
          {
            v70 = 0;
            v71 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v58 + 2 * v56);
          _D12.i16[0] = *(_WORD *)(v58 + 2 * v53);
          _D11.i16[1] = *(_WORD *)(v58 + 2 * v54);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v55), 0), v55)));
          _D11.i16[0] = *(_WORD *)(v51 + 2 * _D11.u32[0]);
          _D13.i16[0] = *(_WORD *)(v61 + 2 * v54);
          __asm { FCVT            S11, H11 }
          _H14 = *(_WORD *)(v51 + 2 * _D11.u32[1]);
          _D12.i16[1] = *(_WORD *)(v61 + 2 * v56);
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v55), 0), v55)));
          __asm { FCVT            S14, H14 }
          _D12.i16[0] = *(_WORD *)(v51 + 2 * _D12.u32[0]);
          _H15 = *(_WORD *)(v51 + 2 * _D12.u32[1]);
          __asm
          {
            FCVT            S12, H12
            FCVT            S15, H15
          }
          _D13.i16[1] = *(_WORD *)(v61 + 2 * v53);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v55), 0), v55)));
          _D13.i16[0] = *(_WORD *)(v51 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _S16 = (float)((float)(v43 * _S14) + (float)(*(float *)_D11.i32 * v41)) + (float)(*(float *)_D12.i32 * v44);
          _S17 = (float)((float)(v46 * _S14) + (float)(*(float *)_D11.i32 * v45)) + (float)(*(float *)_D12.i32 * v47);
          *(float *)_D11.i32 = (float)((float)(v49 * _S14) + (float)(*(float *)_D11.i32 * v48))
                             + (float)(*(float *)_D12.i32 * v50);
          *(float *)_D12.i32 = (float)(v43 * *(float *)_D13.i32) + (float)(_S15 * v41);
          v78 = (float)(v46 * *(float *)_D13.i32) + (float)(_S15 * v45);
          *(float *)_D13.i32 = (float)(v49 * *(float *)_D13.i32) + (float)(_S15 * v48);
          LOWORD(_S15) = *(_WORD *)(v51 + 2 * _D13.u32[1]);
          __asm { FCVT            S15, H15 }
          *(float *)_D12.i32 = *(float *)_D12.i32 + (float)(_S15 * v44);
          v80 = v78 + (float)(_S15 * v47);
          LOWORD(_S16) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(_S15 * v50);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _D12.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v84 = (float)(v37 * _S17) + (float)(v36 * _S16);
          v85 = _S16 + *(float *)_D11.i32;
          _S17 = _S17 + *(float *)_D12.i32;
          v87 = (float)(v32 + (float)(v85 * v101)) + (float)(_S17 * v100);
          v88 = (float)(v32 + (float)(v85 * v39)) + (float)(_S17 * v40);
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H17 }
          v89 = v84 + (float)(v38 * _S15);
          v90 = v87 + (float)((float)(_S15 + *(float *)_D13.i32) * v99);
          v91 = v88 + (float)((float)(_S15 + *(float *)_D13.i32) * v42);
          if (v90 < v34)
            v92 = v34;
          else
            v92 = v90;
          v93 = v89 + v31;
          if (v90 > v35)
            v92 = v35;
          v94 = llroundf(v92);
          if (v93 < v31)
            v95 = v31;
          else
            v95 = v93;
          *v60 = v94;
          if (v93 > v33)
            v95 = v33;
          v60[1] = llroundf(v95);
          v96 = v35;
          if (v91 <= v35)
          {
            v96 = v91;
            if (v91 < v34)
              v96 = v34;
          }
          v97 = (float)((float)((float)(v37 * *(float *)_D12.i32) + (float)(v36 * *(float *)_D11.i32))
                      + (float)(v38 * *(float *)_D13.i32))
              + v31;
          v60[2] = llroundf(v96);
          v98 = v33;
          if (v97 <= v33)
          {
            v98 = v97;
            if (v97 < v31)
              v98 = v31;
          }
          v60[3] = llroundf(v98);
          if (v59)
          {
            *v59 = v70;
            v59[1] = v71;
            v59 += 2;
          }
          v58 += 16;
          v57 += 2;
          v60 += 4;
        }
        while (v26 > v57);
      }
      v28 += v22;
      v29 += v23;
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  char v60;
  char v61;
  float v65;
  float v67;
  float v69;
  float v72;
  float v74;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = *(_QWORD *)(result + 112);
  v12 = *(_QWORD **)(result + 128);
  v13 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
  v14 = *(uint64_t **)(result + 136);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_BYTE *)v12[1];
  if (v16)
    v16 += v14[1] * v13 + v11;
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **(_QWORD **)(result + 64);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **(_QWORD **)(result + 56) + v20 * v19 + 8 * *(_QWORD *)(result + 36);
    v27 = (_BYTE *)(v22 + v11);
    v28 = v25 - v19;
    v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v34 = (float)LODWORD(a8);
    v35 = *(float *)(v23 + 36);
    v36 = *(float *)(v23 + 40);
    v37 = *(float *)(v23 + 44);
    v38 = *(float *)(v23 + 48) * 0.5;
    v39 = *(float *)(v23 + 52) * 0.5;
    v40 = *(float *)(v23 + 56) * 0.5;
    v41 = *(float *)(v23 + 60) * 0.5;
    v42 = *(float *)(v23 + 64) * 0.5;
    v43 = *(float *)(v23 + 68) * 0.5;
    v44 = *(unsigned __int8 *)(v23 + 157);
    v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        v47 = 0;
        v48 = v26;
        v49 = v16;
        v50 = v27;
        do
        {
          v51 = v48 + 8;
          if (v49)
          {
            _H23 = *(_WORD *)(v51 + 2 * v44);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v48 + 2 * v44);
            __asm { FCVT            S24, H24 }
            v60 = llroundf(_S24 * 255.0);
            v61 = llroundf(_S23 * 255.0);
          }
          else
          {
            v60 = 0;
            v61 = 0;
          }
          _H23 = *(_WORD *)(v48 + 2 * v46);
          __asm { FCVT            S23, H23 }
          _H24 = *(_WORD *)(v48 + 2 * result);
          v65 = v29 * _S23;
          __asm { FCVT            S23, H24 }
          v67 = v29 * _S23;
          LOWORD(_S23) = *(_WORD *)(v48 + 2 * v45);
          __asm { FCVT            S23, H23 }
          v69 = v29 * _S23;
          LOWORD(_S23) = *(_WORD *)(v51 + 2 * v46);
          __asm { FCVT            S23, H23 }
          _H24 = *(_WORD *)(v51 + 2 * result);
          v72 = v29 * _S23;
          __asm { FCVT            S24, H24 }
          v74 = v29 * _S24;
          _H25 = *(_WORD *)(v51 + 2 * v45);
          __asm { FCVT            S25, H25 }
          v77 = v29 * _S25;
          v78 = (float)((float)((float)(v36 * v67) + (float)(v35 * v65)) + (float)(v37 * v69)) + v30;
          v79 = v65 + v72;
          v80 = v67 + v74;
          v81 = v69 + v77;
          v82 = (float)((float)(v31 + (float)(v79 * v38)) + (float)(v80 * v39)) + (float)(v81 * v40);
          v83 = (float)((float)(v31 + (float)(v79 * v41)) + (float)(v80 * v42)) + (float)(v81 * v43);
          if (v82 < v33)
            v84 = v33;
          else
            v84 = v82;
          if (v82 > v34)
            v84 = v34;
          *v50 = llroundf(v84);
          if (v78 < v30)
            v85 = v30;
          else
            v85 = v78;
          if (v78 > v32)
            v85 = v32;
          v50[1] = llroundf(v85);
          v86 = v34;
          if (v83 <= v34)
          {
            v86 = v83;
            if (v83 < v33)
              v86 = v33;
          }
          v87 = (float)((float)((float)(v36 * v74) + (float)(v35 * v72)) + (float)(v37 * v77)) + v30;
          v50[2] = llroundf(v86);
          v88 = v32;
          if (v87 <= v32)
          {
            v88 = v87;
            if (v87 < v30)
              v88 = v30;
          }
          v50[3] = llroundf(v88);
          if (v49)
          {
            *v49 = v60;
            v49[1] = v61;
            v49 += 2;
          }
          v48 += 16;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, double _D3)
{
  float16x4_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  int32x2_t v66;
  float v68;
  float v69;
  float v74;
  char v79;
  char v80;
  float v83;
  float v84;
  float v86;
  float v88;
  float v89;
  float v91;
  float v92;
  float v96;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = *((_QWORD *)result + 14);
  v12 = (_QWORD *)*((_QWORD *)result + 16);
  v13 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
  v14 = (uint64_t *)*((_QWORD *)result + 17);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_BYTE *)v12[1];
  if (v16)
    v16 += v14[1] * v13 + v11;
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **((_QWORD **)result + 8);
    v21 = *v14;
    v22 = *((_QWORD *)result + 19);
    v23 = *v12 + v21 * v13;
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **((_QWORD **)result + 7) + v20 * v19 + 8 * *(_QWORD *)(result + 36);
    v27 = (_BYTE *)(v23 + v11);
    v28 = v25 - v19;
    LOWORD(a3) = *(_WORD *)(v22 + 144);
    v29 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v22 + 146);
    LOWORD(a5) = *(_WORD *)(v22 + 148);
    v30 = (float)LODWORD(a5);
    LOWORD(_D3) = *(_WORD *)(v22 + 150);
    v121 = (float)LODWORD(_D3);
    LOWORD(_D3) = *(_WORD *)(v22 + 152);
    v31 = (float)LODWORD(_D3);
    v32 = *(float *)(v22 + 40);
    v122 = *(float *)(v22 + 36);
    v123 = (float)LODWORD(a4);
    v33 = *(float *)(v22 + 44);
    v119 = *(float *)(v22 + 52) * 0.5;
    v120 = *(float *)(v22 + 48) * 0.5;
    v117 = *(float *)(v22 + 60) * 0.5;
    v118 = *(float *)(v22 + 56) * 0.5;
    v34 = *(float *)(v22 + 72);
    v115 = *(float *)(v22 + 68) * 0.5;
    v116 = *(float *)(v22 + 64) * 0.5;
    v35 = *(float *)(v22 + 76);
    v36 = *(float *)(v22 + 80);
    v37 = *(float *)(v22 + 84);
    v38 = *(float *)(v22 + 88);
    v39 = *(float *)(v22 + 92);
    v40 = *(float *)(v22 + 96);
    v41 = *(float *)(v22 + 100);
    v42 = *(float *)(v22 + 104);
    v43 = v22 + 164;
    v44 = v22 + 16548;
    result = (unsigned __int8 *)(v22 + 32932);
    v46 = *(float *)(v22 + 108);
    v45 = *(float *)(v22 + 112);
    v47 = *(float *)(v22 + 116);
    v48 = *(float *)(v22 + 120);
    v49 = *(unsigned __int8 *)(v22 + 157);
    v50 = *(unsigned __int8 *)(v22 + 156);
    v51 = *(unsigned __int8 *)(v22 + 155);
    v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v53 = *(unsigned __int8 *)(v22 + 154);
    do
    {
      if (v24)
      {
        v54 = 0;
        v55 = v16;
        v56 = v27;
        v57 = v26;
        do
        {
          LOWORD(_D3) = *(_WORD *)(v57 + 2 * v53);
          v6.i16[0] = *(_WORD *)(v57 + 2 * v50);
          v58 = v57 + 8;
          WORD1(_D3) = *(_WORD *)(v57 + 2 * v51);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D3), v52), 0), v52)));
          _D3.i16[0] = *(_WORD *)(v43 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v43 + 2 * _D3.u32[1]);
          __asm { FCVT            S16, H3 }
          v6.i16[1] = *(_WORD *)(v57 + 8 + 2 * v53);
          _D3 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v6), v52), 0), v52)));
          v66 = vcvt_s32_f32(*(float32x2_t *)&_D3);
          LOWORD(_D3) = *(_WORD *)(v43 + 2 * v66.u32[0]);
          __asm { FCVT            S17, H3 }
          v68 = fmaxf(_S15, fmaxf(_S16, _S17));
          v69 = (float)((float)((float)(v45 * _S16) + (float)(v46 * _S15)) + (float)(v47 * _S17)) + (float)(v48 * v68);
          LODWORD(_D3) = 1174403072;
          if (v69 <= 8191.0)
          {
            *(float *)&_D3 = (float)((float)((float)(v45 * _S16) + (float)(v46 * _S15)) + (float)(v47 * _S17))
                           + (float)(v48 * v68);
            if (v69 < 0.0)
              LODWORD(_D3) = 0;
          }
          _D18.i16[0] = *(_WORD *)(v58 + 2 * v51);
          _H19 = *(_WORD *)(v43 + 2 * v66.u32[1]);
          _D18.i16[1] = *(_WORD *)(v58 + 2 * v50);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v52), 0), v52)));
          _D18.i16[0] = *(_WORD *)(v43 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v43 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v74 = (float)((float)((float)(v45 * _S20) + (float)(v46 * _S19)) + (float)(v47 * _S22))
              + (float)(v48 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v74 <= 8191.0)
          {
            *(float *)_D18.i32 = v74;
            if (v74 < 0.0)
              _D18.i32[0] = 0;
          }
          if (v55)
          {
            _H13 = *(_WORD *)(v57 + 2 * v49);
            __asm { FCVT            S13, H13 }
            _H1 = *(_WORD *)(v58 + 2 * v49);
            __asm { FCVT            S1, H1 }
            v79 = llroundf(_S13 * 255.0);
            v80 = llroundf(_S1 * 255.0);
          }
          else
          {
            v79 = 0;
            v80 = 0;
          }
          _H1 = *(_WORD *)(v44 + 2 * llroundf(*(float *)&_D3));
          __asm { FCVT            S1, H1 }
          v83 = _S15 * _S1;
          v84 = _S16 * _S1;
          _H16 = *(_WORD *)(v44 + 2 * llroundf(*(float *)_D18.i32));
          v86 = _S17 * _S1;
          __asm { FCVT            S16, H16 }
          v88 = _S19 * _S16;
          v89 = _S20 * _S16;
          _S16 = _S22 * _S16;
          v91 = (float)((float)(v35 * v84) + (float)(v83 * v34)) + (float)(v86 * v36);
          v92 = (float)((float)(v38 * v84) + (float)(v83 * v37)) + (float)(v86 * v39);
          _S1 = (float)((float)(v41 * v84) + (float)(v83 * v40)) + (float)(v86 * v42);
          _S3 = (float)((float)(v35 * v89) + (float)(v88 * v34)) + (float)(_S16 * v36);
          _S5 = (float)((float)(v38 * v89) + (float)(v88 * v37)) + (float)(_S16 * v39);
          v96 = (float)((float)(v41 * v89) + (float)(v88 * v40)) + (float)(_S16 * v42);
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0))];
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0))];
          LOWORD(_S1) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
          __asm
          {
            FCVT            S20, H16
            FCVT            S1, H1
          }
          LOWORD(_S3) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          v103 = (float)((float)((float)(v32 * _S20) + (float)(v122 * _S18)) + (float)(v33 * _S1)) + v29;
          v105 = _S20 + _S16;
          v106 = _S1 + _S17;
          v107 = (float)((float)(v123 + (float)((float)(_S18 + _S3) * v120)) + (float)(v105 * v119))
               + (float)((float)(_S1 + _S17) * v118);
          if (v103 < v29)
            v108 = v29;
          else
            v108 = v103;
          if (v103 > v30)
            v108 = v30;
          *v56 = llroundf(v108);
          v109 = v31;
          if (v107 <= v31)
          {
            v109 = (float)((float)(v123 + (float)((float)(_S18 + _S3) * v120)) + (float)(v105 * v119))
                 + (float)(v106 * v118);
            if (v107 < v121)
              v109 = v121;
          }
          v110 = (float)((float)((float)(v32 * _S16) + (float)(v122 * _S3)) + (float)(v33 * _S17)) + v29;
          v104 = _S18 + _S3;
          v111 = (float)((float)(v123 + (float)((float)(_S18 + _S3) * v117)) + (float)(v105 * v116))
               + (float)(v106 * v115);
          v56[1] = llroundf(v109);
          if (v110 < v29)
            v112 = v29;
          else
            v112 = v110;
          if (v110 <= v30)
            v113 = v112;
          else
            v113 = v30;
          v56[2] = llroundf(v113);
          v114 = v31;
          if (v111 <= v31)
          {
            v114 = (float)((float)(v123 + (float)(v104 * v117)) + (float)(v105 * v116)) + (float)(v106 * v115);
            if (v111 < v121)
              v114 = v121;
          }
          v56[3] = llroundf(v114);
          if (v55)
          {
            *v55 = v79;
            v55[1] = v80;
            v55 += 2;
          }
          v57 += 16;
          v54 += 2;
          v56 += 4;
        }
        while (v24 > v54);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_yuvsf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x2_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  char v68;
  char v69;
  float v76;
  float v77;
  float v78;
  unsigned int v81;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;

  v9 = *(_QWORD *)(result + 28);
  v10 = *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = *(_QWORD *)(result + 112);
  v13 = *(_QWORD **)(result + 128);
  v14 = *(_QWORD *)(result + 104) * a2 / v10 + *(_QWORD *)(result + 120);
  v15 = *(uint64_t **)(result + 136);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **(_QWORD **)(result + 64);
    v22 = *v15;
    v23 = *(_QWORD *)(result + 152);
    v24 = *v13 + v22 * v14;
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **(_QWORD **)(result + 56) + v21 * v20 + 8 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v24 + v12);
    v29 = v26 - v20;
    LOWORD(a3) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v23 + 146);
    v31 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 150);
    v33 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v23 + 152);
    v34 = (float)LODWORD(_D4);
    v35 = *(float *)(v23 + 36);
    v36 = *(float *)(v23 + 40);
    v37 = *(float *)(v23 + 44);
    v98 = *(float *)(v23 + 48) * 0.5;
    v97 = *(float *)(v23 + 52) * 0.5;
    v96 = *(float *)(v23 + 56) * 0.5;
    v95 = *(float *)(v23 + 60) * 0.5;
    v38 = *(float *)(v23 + 64) * 0.5;
    v39 = *(float *)(v23 + 72);
    v40 = *(float *)(v23 + 68) * 0.5;
    v41 = *(float *)(v23 + 76);
    v42 = *(float *)(v23 + 80);
    v43 = *(float *)(v23 + 84);
    v44 = *(float *)(v23 + 88);
    v45 = *(float *)(v23 + 92);
    v46 = *(float *)(v23 + 96);
    v47 = *(float *)(v23 + 100);
    v48 = *(float *)(v23 + 104);
    v49 = v23 + 164;
    v50 = v23 + 16548;
    result = *(unsigned __int8 *)(v23 + 157);
    v51 = *(unsigned __int8 *)(v23 + 156);
    v52 = *(unsigned __int8 *)(v23 + 155);
    v53 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v54 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v25)
      {
        v55 = 0;
        v56 = v27;
        v57 = v17;
        v58 = v28;
        do
        {
          v59 = v56 + 8;
          if (v57)
          {
            _H4 = *(_WORD *)(v59 + 2 * result);
            __asm { FCVT            S4, H4 }
            _H16 = *(_WORD *)(v56 + 2 * result);
            __asm { FCVT            S16, H16 }
            v68 = llroundf(_S16 * 255.0);
            v69 = llroundf(_S4 * 255.0);
          }
          else
          {
            v68 = 0;
            v69 = 0;
          }
          LOWORD(_D4) = *(_WORD *)(v56 + 2 * v54);
          _D16.i16[0] = *(_WORD *)(v56 + 2 * v51);
          WORD1(_D4) = *(_WORD *)(v56 + 2 * v52);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v53), 0), v53))));
          LOWORD(_D4) = *(_WORD *)(v49 + 2 * LODWORD(_D4));
          _D17.i16[0] = *(_WORD *)(v59 + 2 * v52);
          __asm { FCVT            S4, H4 }
          _H11 = *(_WORD *)(v49 + 2 * HIDWORD(_D4));
          __asm { FCVT            S11, H11 }
          _D16.i16[1] = *(_WORD *)(v59 + 2 * v54);
          _D16 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D16), v53), 0), v53)));
          _D16.i16[0] = *(_WORD *)(v49 + 2 * _D16.u32[0]);
          _H12 = *(_WORD *)(v49 + 2 * _D16.u32[1]);
          _D17.i16[1] = *(_WORD *)(v59 + 2 * v51);
          __asm { FCVT            S16, H16 }
          _D17 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D17), v53), 0), v53)));
          _D17.i16[0] = *(_WORD *)(v49 + 2 * _D17.u32[0]);
          __asm
          {
            FCVT            S12, H12
            FCVT            S17, H17
          }
          _H13 = *(_WORD *)(v49 + 2 * _D17.u32[1]);
          __asm { FCVT            S13, H13 }
          v76 = (float)((float)(v41 * _S11) + (float)(*(float *)&_D4 * v39)) + (float)(*(float *)_D16.i32 * v42);
          v77 = (float)((float)(v44 * _S11) + (float)(*(float *)&_D4 * v43)) + (float)(*(float *)_D16.i32 * v45);
          *(float *)&_D4 = (float)((float)(v47 * _S11) + (float)(*(float *)&_D4 * v46))
                         + (float)(*(float *)_D16.i32 * v48);
          *(float *)_D16.i32 = (float)((float)(v41 * *(float *)_D17.i32) + (float)(_S12 * v39)) + (float)(_S13 * v42);
          v78 = (float)((float)(v44 * *(float *)_D17.i32) + (float)(_S12 * v43)) + (float)(_S13 * v45);
          *(float *)_D17.i32 = (float)((float)(v47 * *(float *)_D17.i32) + (float)(_S12 * v46)) + (float)(_S13 * v48);
          LOWORD(_S12) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S14, H12 }
          LOWORD(_S12) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          LOWORD(_D4) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(*(float *)&_D4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H12
            FCVT            S4, H4
          }
          _D16.i16[0] = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(*(float *)_D16.i32, 0.0), 8191.0)));
          v81 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S11, H16 }
          _D16.i16[0] = *(_WORD *)(v50 + 2 * v81);
          __asm { FCVT            S12, H16 }
          _D16.i16[0] = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(*(float *)_D17.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          *(float *)_D17.i32 = (float)((float)((float)(v36 * _S15) + (float)(v35 * _S14)) + (float)(v37 * *(float *)&_D4))
                             + v30;
          v85 = _S14 + _S11;
          v86 = _S15 + _S12;
          *(float *)_D16.i32 = *(float *)&_D4 + _S13;
          *(float *)&_D4 = (float)((float)(v31 + (float)(v85 * v98)) + (float)(v86 * v97))
                         + (float)((float)(*(float *)&_D4 + _S13) * v96);
          if (*(float *)_D17.i32 < v30)
            v87 = v30;
          else
            v87 = *(float *)_D17.i32;
          if (*(float *)_D17.i32 <= v32)
            v88 = v87;
          else
            v88 = v32;
          *v58 = llroundf(v88);
          v89 = v34;
          if (*(float *)&_D4 <= v34)
          {
            v89 = *(float *)&_D4;
            if (*(float *)&_D4 < v33)
              v89 = v33;
          }
          v90 = (float)((float)((float)(v36 * _S12) + (float)(v35 * _S11)) + (float)(v37 * _S13)) + v30;
          v91 = (float)((float)(v31 + (float)(v85 * v95)) + (float)(v86 * v38)) + (float)(*(float *)_D16.i32 * v40);
          v58[1] = llroundf(v89);
          if (v90 < v30)
            v92 = v30;
          else
            v92 = (float)((float)((float)(v36 * _S12) + (float)(v35 * _S11)) + (float)(v37 * _S13)) + v30;
          if (v90 <= v32)
            v93 = v92;
          else
            v93 = v32;
          v58[2] = llroundf(v93);
          v94 = v34;
          if (v91 <= v34)
          {
            v94 = v91;
            if (v91 < v33)
              v94 = v33;
          }
          v58[3] = llroundf(v94);
          if (v57)
          {
            *v57 = v68;
            v57[1] = v69;
            v57 += 2;
          }
          v56 += 16;
          v55 += 2;
          v58 += 4;
        }
        while (v25 > v55);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  char v60;
  char v61;
  float v64;
  float v67;
  float v70;
  float v73;
  float v76;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = *(_QWORD *)(result + 112);
  v12 = *(_QWORD **)(result + 128);
  v13 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
  v14 = *(uint64_t **)(result + 136);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_BYTE *)v12[1];
  if (v16)
    v16 += v14[1] * v13 + v11;
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **(_QWORD **)(result + 64);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **(_QWORD **)(result + 56) + v20 * v19 + 8 * *(_QWORD *)(result + 36);
    v27 = (_BYTE *)(v22 + v11);
    v28 = v25 - v19;
    v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v34 = (float)LODWORD(a8);
    v35 = *(float *)(v23 + 36);
    v36 = *(float *)(v23 + 40);
    v37 = *(float *)(v23 + 44);
    v38 = *(float *)(v23 + 48) * 0.5;
    v39 = *(float *)(v23 + 52) * 0.5;
    v40 = *(float *)(v23 + 56) * 0.5;
    v41 = *(float *)(v23 + 60) * 0.5;
    v42 = *(float *)(v23 + 64) * 0.5;
    v43 = *(float *)(v23 + 68) * 0.5;
    v44 = *(unsigned __int8 *)(v23 + 157);
    v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        v47 = 0;
        v48 = v26;
        v49 = v16;
        v50 = v27;
        do
        {
          v51 = v48 + 8;
          if (v49)
          {
            _H23 = *(_WORD *)(v51 + 2 * v44);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v48 + 2 * v44);
            __asm { FCVT            S24, H24 }
            v60 = llroundf(_S24 * 255.0);
            v61 = llroundf(_S23 * 255.0);
          }
          else
          {
            v60 = 0;
            v61 = 0;
          }
          _H23 = *(_WORD *)(v48 + 2 * v46);
          __asm { FCVT            S23, H23 }
          v64 = v29 * _S23;
          _H24 = *(_WORD *)(v48 + 2 * result);
          __asm { FCVT            S24, H24 }
          v67 = v29 * _S24;
          _H25 = *(_WORD *)(v48 + 2 * v45);
          __asm { FCVT            S25, H25 }
          v70 = v29 * _S25;
          _H26 = *(_WORD *)(v51 + 2 * v46);
          __asm { FCVT            S26, H26 }
          v73 = v29 * _S26;
          _H27 = *(_WORD *)(v51 + 2 * result);
          __asm { FCVT            S27, H27 }
          v76 = v29 * _S27;
          _H28 = *(_WORD *)(v51 + 2 * v45);
          __asm { FCVT            S28, H28 }
          v79 = v29 * _S28;
          v80 = (float)((float)((float)(v36 * v67) + (float)(v35 * v64)) + (float)(v37 * v70)) + v30;
          v81 = (float)((float)((float)(v36 * v76) + (float)(v35 * v73)) + (float)(v37 * v79)) + v30;
          v82 = v64 + v73;
          v83 = v67 + v76;
          v84 = v70 + v79;
          v85 = (float)((float)(v31 + (float)(v82 * v38)) + (float)(v83 * v39)) + (float)(v84 * v40);
          v86 = (float)(v31 + (float)(v82 * v41)) + (float)(v83 * v42);
          if (v80 < v30)
            v87 = v30;
          else
            v87 = v80;
          if (v80 > v32)
            v87 = v32;
          v88 = v86 + (float)(v84 * v43);
          *v50 = llroundf(v87);
          if (v85 < v33)
            v89 = v33;
          else
            v89 = v85;
          if (v85 > v34)
            v89 = v34;
          v50[1] = llroundf(v89);
          if (v81 < v30)
            v90 = v30;
          else
            v90 = v81;
          if (v81 > v32)
            v90 = v32;
          v50[2] = llroundf(v90);
          v91 = v34;
          if (v88 <= v34)
          {
            v91 = v88;
            if (v88 < v33)
              v91 = v33;
          }
          v50[3] = llroundf(v91);
          if (v49)
          {
            *v49 = v60;
            v49[1] = v61;
            v49 += 2;
          }
          v48 += 16;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, double _D3)
{
  float16x4_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t v61;
  char v62;
  unint64_t v63;
  _WORD *v64;
  _WORD *v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  int32x2_t v76;
  float v78;
  float v79;
  float v84;
  __int16 v89;
  __int16 v90;
  float v93;
  float v94;
  float v95;
  float v100;
  float v101;
  float v102;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  _WORD *v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    LOWORD(a3) = *(_WORD *)(v16 + 144);
    v23 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v16 + 146);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 148);
    v25 = (float)LODWORD(a5);
    LOWORD(_D3) = *(_WORD *)(v16 + 150);
    v26 = (float)LODWORD(_D3);
    LOWORD(_D3) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(_D3);
    v133 = *(float *)(v16 + 36);
    v134 = v26;
    v28 = *(float *)(v16 + 44);
    v131 = *(float *)(v16 + 48) * 0.5;
    v132 = *(float *)(v16 + 40);
    v129 = *(float *)(v16 + 56) * 0.5;
    v130 = *(float *)(v16 + 52) * 0.5;
    v127 = *(float *)(v16 + 64) * 0.5;
    v128 = *(float *)(v16 + 60) * 0.5;
    v29 = *(float *)(v16 + 72);
    v126 = *(float *)(v16 + 68) * 0.5;
    v30 = *(float *)(v16 + 76);
    v31 = *(float *)(v16 + 80);
    v32 = *(float *)(v16 + 84);
    v33 = *(float *)(v16 + 88);
    v34 = *(float *)(v16 + 92);
    v35 = *(float *)(v16 + 96);
    v36 = *(float *)(v16 + 100);
    v37 = *(float *)(v16 + 104);
    v38 = v16 + 164;
    v39 = v16 + 16548;
    v40 = v16 + 32932;
    v42 = *(float *)(v16 + 108);
    v41 = *(float *)(v16 + 112);
    v43 = *(float *)(v16 + 116);
    v44 = *(float *)(v16 + 120);
    v45 = *(uint64_t **)(result + 128);
    v46 = *(_QWORD *)(result + 112);
    v47 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v16 + 132);
    if (v49 >= 0x11)
      v50 = 0;
    else
      v50 = 16 - v49;
    result = *(unsigned __int8 *)(v16 + 157);
    v51 = *(unsigned __int8 *)(v16 + 156);
    v52 = *(unsigned __int8 *)(v16 + 155);
    v53 = *(unsigned __int8 *)(v16 + 154);
    v54 = v45[2];
    if (v54)
      v55 = v54 + v47 * v22 + 2 * v46;
    else
      v55 = 0;
    v57 = *v45;
    v56 = v45[1];
    v58 = v56 + v47 * v21 + 2 * v46;
    if (!v56)
      v58 = 0;
    v59 = v57 + v47 * v20 + 2 * v46;
    v60 = *v18 + v19 * v14 + 8 * v48;
    v61 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v62 = v50;
    do
    {
      if (v13)
      {
        v63 = 0;
        v64 = (_WORD *)v55;
        v65 = (_WORD *)v59;
        v66 = v60;
        do
        {
          v67 = v24;
          LOWORD(_D3) = *(_WORD *)(v66 + 2 * v53);
          v6.i16[0] = *(_WORD *)(v66 + 2 * v51);
          v68 = v66 + 8;
          WORD1(_D3) = *(_WORD *)(v66 + 2 * v52);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D3), v61), 0), v61)));
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[1]);
          __asm { FCVT            S16, H3 }
          v6.i16[1] = *(_WORD *)(v66 + 8 + 2 * v53);
          _D3 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v6), v61), 0), v61)));
          v76 = vcvt_s32_f32(*(float32x2_t *)&_D3);
          LOWORD(_D3) = *(_WORD *)(v38 + 2 * v76.u32[0]);
          __asm { FCVT            S17, H3 }
          v78 = fmaxf(_S15, fmaxf(_S16, _S17));
          v79 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17)) + (float)(v44 * v78);
          LODWORD(_D3) = 1174403072;
          if (v79 <= 8191.0)
          {
            *(float *)&_D3 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17))
                           + (float)(v44 * v78);
            if (v79 < 0.0)
              LODWORD(_D3) = 0;
          }
          _D18.i16[0] = *(_WORD *)(v68 + 2 * v52);
          _H19 = *(_WORD *)(v38 + 2 * v76.u32[1]);
          _D18.i16[1] = *(_WORD *)(v68 + 2 * v51);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v61), 0), v61)));
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v84 = (float)((float)((float)(v41 * _S20) + (float)(v42 * _S19)) + (float)(v43 * _S22))
              + (float)(v44 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v84 <= 8191.0)
          {
            *(float *)_D18.i32 = v84;
            if (v84 < 0.0)
              _D18.i32[0] = 0;
          }
          if (v64)
          {
            _H13 = *(_WORD *)(v66 + 2 * result);
            __asm { FCVT            S13, H13 }
            _H1 = *(_WORD *)(v68 + 2 * result);
            __asm { FCVT            S1, H1 }
            v89 = llroundf(_S13 * 65535.0);
            v90 = llroundf(_S1 * 65535.0);
          }
          else
          {
            v89 = 0;
            v90 = 0;
          }
          v24 = v67;
          _H1 = *(_WORD *)(v39 + 2 * llroundf(*(float *)&_D3));
          __asm { FCVT            S1, H1 }
          v93 = _S15 * _S1;
          v94 = _S16 * _S1;
          v95 = _S17 * _S1;
          _H16 = *(_WORD *)(v39 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          v100 = _S22 * _S16;
          v101 = (float)((float)(v30 * v94) + (float)(v93 * v29)) + (float)(v95 * v31);
          v102 = (float)((float)(v33 * v94) + (float)(v93 * v32)) + (float)(v95 * v34);
          _S1 = (float)((float)(v36 * v94) + (float)(v93 * v35)) + (float)(v95 * v37);
          _S3 = (float)((float)(v30 * _S18) + (float)(_S17 * v29)) + (float)(v100 * v31);
          _S5 = (float)((float)(v33 * _S18) + (float)(_S17 * v32)) + (float)(v100 * v34);
          _S16 = (float)((float)(v36 * _S18) + (float)(_S17 * v35)) + (float)(v100 * v37);
          LOWORD(_S17) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
          }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          v113 = (float)((float)((float)(v132 * _S18) + (float)(v133 * _S17)) + (float)(v28 * _S1)) + v23;
          v114 = (float)((float)((float)(v132 * _S5) + (float)(v133 * _S3)) + (float)(v28 * _S19)) + v23;
          if (v113 < v23)
            v115 = v23;
          else
            v115 = (float)((float)((float)(v132 * _S18) + (float)(v133 * _S17)) + (float)(v28 * _S1)) + v23;
          if (v113 <= v25)
            v116 = v115;
          else
            v116 = v25;
          *v65 = llroundf(v116) << v62;
          if (v114 < v23)
            v117 = v23;
          else
            v117 = (float)((float)((float)(v132 * _S5) + (float)(v133 * _S3)) + (float)(v28 * _S19)) + v23;
          if (v114 > v25)
            v117 = v25;
          v65[1] = llroundf(v117) << v62;
          v118 = _S17 + _S3;
          v119 = _S18 + _S5;
          v120 = _S1 + _S19;
          v121 = (float)((float)(v67 + (float)(v118 * v131)) + (float)((float)(_S18 + _S5) * v130))
               + (float)((float)(_S1 + _S19) * v129);
          v122 = v27;
          if (v121 <= v27)
          {
            v122 = v121;
            if (v121 < v134)
              v122 = v134;
          }
          v123 = (_WORD *)(v58 + 2 * v63);
          v124 = (float)((float)(v67 + (float)(v118 * v128)) + (float)(v119 * v127)) + (float)(v120 * v126);
          *v123 = llroundf(v122) << v62;
          v125 = v27;
          if (v124 <= v27)
          {
            v125 = v124;
            if (v124 < v134)
              v125 = v134;
          }
          v123[1] = llroundf(v125) << v62;
          if (v64)
          {
            *v64 = v89;
            v64[1] = v90;
            v64 += 2;
          }
          v66 += 16;
          v63 += 2;
          v65 += 2;
        }
        while (v13 > v63);
      }
      v60 += v19;
      v59 += v20;
      v58 += v21;
      v55 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _WORD *v66;
  _WORD *v67;
  uint64_t v68;
  __int16 v77;
  __int16 v78;
  float v87;
  float v88;
  unsigned int v91;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  _WORD *v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 20);
    v16 = v12 + *(_QWORD *)(result + 44);
    v17 = v13 - v12;
    v18 = *(_QWORD *)(result + 152);
    v19 = *(uint64_t **)(result + 136);
    v20 = *(_QWORD **)(result + 56);
    v21 = **(_QWORD **)(result + 64);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    v26 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v18 + 148);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v18 + 150);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v18 + 152);
    v29 = (float)LODWORD(a7);
    v30 = *(float *)(v18 + 36);
    v31 = *(float *)(v18 + 40);
    v32 = *(float *)(v18 + 44);
    v106 = *(float *)(v18 + 52) * 0.5;
    v107 = *(float *)(v18 + 48) * 0.5;
    v104 = *(float *)(v18 + 60) * 0.5;
    v105 = *(float *)(v18 + 56) * 0.5;
    v33 = *(float *)(v18 + 64) * 0.5;
    v34 = *(float *)(v18 + 72);
    v35 = *(float *)(v18 + 68) * 0.5;
    v36 = *(float *)(v18 + 76);
    v37 = *(float *)(v18 + 80);
    v38 = *(float *)(v18 + 84);
    v39 = *(float *)(v18 + 88);
    v40 = *(float *)(v18 + 92);
    v41 = *(float *)(v18 + 96);
    v42 = *(float *)(v18 + 100);
    v43 = *(float *)(v18 + 104);
    v44 = v18 + 164;
    v45 = v18 + 16548;
    v46 = *(uint64_t **)(result + 128);
    v47 = *(_QWORD *)(result + 112);
    v48 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v18 + 132);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = *(unsigned __int8 *)(v18 + 157);
    result = *(unsigned __int8 *)(v18 + 156);
    v53 = *(unsigned __int8 *)(v18 + 155);
    v54 = *(unsigned __int8 *)(v18 + 154);
    v55 = v46[2];
    if (v55)
      v56 = v55 + v48 * v24 + 2 * v47;
    else
      v56 = 0;
    v58 = *v46;
    v57 = v46[1];
    v59 = v57 + v48 * v23 + 2 * v47;
    if (!v57)
      v59 = 0;
    v60 = v58 + v48 * v22 + 2 * v47;
    v61 = *v20 + v21 * v16 + 8 * v49;
    v62 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v63 = v51;
    do
    {
      if (v15)
      {
        v64 = 0;
        v65 = v61;
        v66 = (_WORD *)v56;
        v67 = (_WORD *)v60;
        do
        {
          v68 = v65 + 8;
          if (v66)
          {
            _H11 = *(_WORD *)(v68 + 2 * v52);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v65 + 2 * v52);
            __asm { FCVT            S12, H12 }
            v77 = llroundf(_S12 * 65535.0);
            v78 = llroundf(_S11 * 65535.0);
          }
          else
          {
            v77 = 0;
            v78 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v65 + 2 * v54);
          _D12.i16[0] = *(_WORD *)(v65 + 2 * result);
          _D13.i16[0] = *(_WORD *)(v68 + 2 * v53);
          _D11.i16[1] = *(_WORD *)(v65 + 2 * v53);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v62), 0), v62)));
          _D11.i16[0] = *(_WORD *)(v44 + 2 * _D11.u32[0]);
          _H14 = *(_WORD *)(v44 + 2 * _D11.u32[1]);
          _D12.i16[1] = *(_WORD *)(v68 + 2 * v54);
          __asm { FCVT            S11, H11 }
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v62), 0), v62)));
          _D12.i16[0] = *(_WORD *)(v44 + 2 * _D12.u32[0]);
          __asm
          {
            FCVT            S14, H14
            FCVT            S12, H12
          }
          _H15 = *(_WORD *)(v44 + 2 * _D12.u32[1]);
          _D13.i16[1] = *(_WORD *)(v68 + 2 * result);
          __asm { FCVT            S15, H15 }
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v62), 0), v62)));
          _D13.i16[0] = *(_WORD *)(v44 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H16 = *(_WORD *)(v44 + 2 * _D13.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v36 * _S14) + (float)(*(float *)_D11.i32 * v34)) + (float)(*(float *)_D12.i32 * v37);
          _S18 = (float)((float)(v39 * _S14) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D12.i32 * v40);
          *(float *)_D11.i32 = (float)((float)(v42 * _S14) + (float)(*(float *)_D11.i32 * v41))
                             + (float)(*(float *)_D12.i32 * v43);
          *(float *)_D12.i32 = (float)((float)(v36 * *(float *)_D13.i32) + (float)(_S15 * v34)) + (float)(_S16 * v37);
          v87 = (float)((float)(v39 * *(float *)_D13.i32) + (float)(_S15 * v38)) + (float)(_S16 * v40);
          v88 = (float)((float)(v42 * *(float *)_D13.i32) + (float)(_S15 * v41)) + (float)(_S16 * v43);
          LOWORD(_S17) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _D11.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          _D12.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H11
            FCVT            S11, H12
          }
          _D12.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          v91 = llroundf(fminf(fmaxf(v88, 0.0), 8191.0));
          __asm { FCVT            S16, H12 }
          _D12.i16[0] = *(_WORD *)(v45 + 2 * v91);
          __asm { FCVT            S14, H12 }
          *(float *)_D12.i32 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17))
                                     + (float)(v32 * *(float *)_D13.i32))
                             + v25;
          v94 = (float)((float)((float)(v31 * _S16) + (float)(v30 * *(float *)_D11.i32)) + (float)(v32 * _S14)) + v25;
          if (*(float *)_D12.i32 < v25)
            v95 = v25;
          else
            v95 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17)) + (float)(v32 * *(float *)_D13.i32)) + v25;
          if (*(float *)_D12.i32 > v27)
            v95 = v27;
          *v67 = llroundf(v95) << v63;
          if (v94 < v25)
            v96 = v25;
          else
            v96 = (float)((float)((float)(v31 * _S16) + (float)(v30 * *(float *)_D11.i32)) + (float)(v32 * _S14)) + v25;
          if (v94 > v27)
            v96 = v27;
          v67[1] = llroundf(v96) << v63;
          v97 = _S17 + *(float *)_D11.i32;
          v98 = *(float *)_D13.i32 + _S14;
          v99 = (float)((float)(v26 + (float)(v97 * v107)) + (float)((float)(_S18 + _S16) * v106)) + (float)(v98 * v105);
          v100 = v29;
          if (v99 <= v29)
          {
            v100 = (float)((float)(v26 + (float)(v97 * v107)) + (float)((float)(_S18 + _S16) * v106))
                 + (float)(v98 * v105);
            if (v99 < v28)
              v100 = v28;
          }
          v101 = (_WORD *)(v59 + 2 * v64);
          v102 = (float)((float)(v26 + (float)(v97 * v104)) + (float)((float)(_S18 + _S16) * v33)) + (float)(v98 * v35);
          *v101 = llroundf(v100) << v63;
          v103 = v29;
          if (v102 <= v29)
          {
            v103 = v102;
            if (v102 < v28)
              v103 = v28;
          }
          v101[1] = llroundf(v103) << v63;
          if (v66)
          {
            *v66 = v77;
            v66[1] = v78;
            v66 += 2;
          }
          v65 += 16;
          v64 += 2;
          v67 += 2;
        }
        while (v15 > v64);
      }
      v61 += v21;
      v60 += v22;
      v59 += v23;
      v56 += v24;
      ++v14;
    }
    while (v14 != v17);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_xf422_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _WORD *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v69;
  __int16 v70;
  float v73;
  float v76;
  float v79;
  float v80;
  float v81;
  float v84;
  float v87;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  _WORD *v98;
  float v99;
  float v100;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48) * 0.5;
    v33 = *(float *)(v16 + 52) * 0.5;
    v34 = *(float *)(v16 + 56) * 0.5;
    v35 = *(float *)(v16 + 60) * 0.5;
    v36 = *(float *)(v16 + 64) * 0.5;
    v37 = *(float *)(v16 + 68) * 0.5;
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11)
      v43 = 0;
    else
      v43 = 16 - v42;
    v44 = *(unsigned __int8 *)(v16 + 157);
    v45 = *(unsigned __int8 *)(v16 + 156);
    v46 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v47 = v38[2];
    if (v47)
      v48 = v47 + v40 * v22 + 2 * v39;
    else
      v48 = 0;
    v51 = v38;
    v50 = *v38;
    v49 = v51[1];
    _ZF = v49 == 0;
    v53 = v49 + v40 * v21 + 2 * v39;
    if (_ZF)
      v53 = 0;
    v54 = v50 + v40 * v20 + 2 * v39;
    v55 = *v18 + v19 * v14 + 8 * v41;
    v56 = v43;
    do
    {
      if (v13)
      {
        v57 = 0;
        v58 = v55;
        v59 = (_WORD *)v48;
        v60 = (_WORD *)v54;
        do
        {
          v61 = v58 + 8;
          if (v59)
          {
            _H24 = *(_WORD *)(v61 + 2 * v44);
            __asm { FCVT            S24, H24 }
            _H25 = *(_WORD *)(v58 + 2 * v44);
            __asm { FCVT            S25, H25 }
            v69 = llroundf(_S25 * 65535.0);
            v70 = llroundf(_S24 * 65535.0);
          }
          else
          {
            v69 = 0;
            v70 = 0;
          }
          _H24 = *(_WORD *)(v58 + 2 * result);
          __asm { FCVT            S24, H24 }
          v73 = v23 * _S24;
          _H25 = *(_WORD *)(v58 + 2 * v46);
          __asm { FCVT            S25, H25 }
          v76 = v23 * _S25;
          _H26 = *(_WORD *)(v58 + 2 * v45);
          __asm { FCVT            S26, H26 }
          v79 = v23 * _S26;
          v80 = (float)((float)((float)(v30 * v76) + (float)(v29 * v73)) + (float)(v31 * v79)) + v24;
          v81 = v26;
          if (v80 <= v26)
          {
            v81 = (float)((float)((float)(v30 * v76) + (float)(v29 * v73)) + (float)(v31 * v79)) + v24;
            if (v80 < v24)
              v81 = v24;
          }
          _H27 = *(_WORD *)(v61 + 2 * result);
          __asm { FCVT            S27, H27 }
          v84 = v23 * _S27;
          _H28 = *(_WORD *)(v61 + 2 * v46);
          __asm { FCVT            S28, H28 }
          v87 = v23 * _S28;
          _H29 = *(_WORD *)(v61 + 2 * v45);
          __asm { FCVT            S29, H29 }
          v90 = v23 * _S29;
          v91 = (float)((float)((float)(v30 * v87) + (float)(v29 * v84)) + (float)(v31 * v90)) + v24;
          *v60 = llroundf(v81) << v56;
          v92 = v26;
          if (v91 <= v26)
          {
            v92 = (float)((float)((float)(v30 * v87) + (float)(v29 * v84)) + (float)(v31 * v90)) + v24;
            if (v91 < v24)
              v92 = v24;
          }
          v60[1] = llroundf(v92) << v56;
          v93 = v73 + v84;
          v94 = v76 + v87;
          v95 = v79 + v90;
          v96 = (float)((float)(v25 + (float)(v93 * v32)) + (float)(v94 * v33)) + (float)(v95 * v34);
          v97 = v28;
          if (v96 <= v28)
          {
            v97 = (float)((float)(v25 + (float)(v93 * v32)) + (float)(v94 * v33)) + (float)(v95 * v34);
            if (v96 < v27)
              v97 = v27;
          }
          v98 = (_WORD *)(v53 + 2 * v57);
          v99 = (float)((float)(v25 + (float)(v93 * v35)) + (float)(v94 * v36)) + (float)(v95 * v37);
          *v98 = llroundf(v97) << v56;
          v100 = v28;
          if (v99 <= v28)
          {
            v100 = v99;
            if (v99 < v27)
              v100 = v27;
          }
          v98[1] = llroundf(v100) << v56;
          if (v59)
          {
            *v59 = v69;
            v59[1] = v70;
            v59 += 2;
          }
          v58 += 16;
          v57 += 2;
          v60 += 2;
        }
        while (v13 > v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, float a3, double _D1)
{
  float16x4_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x2_t v51;
  uint64_t v52;
  unint64_t v53;
  _WORD *v54;
  _WORD *v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  int32x2_t v68;
  float v70;
  float v71;
  float v76;
  __int16 v81;
  __int16 v82;
  float v85;
  float v86;
  float v87;
  float v90;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v100;
  float v101;
  unsigned int v103;
  float v108;
  float v110;
  float v111;
  float v112;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  __int16 v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = *((_QWORD *)result + 14);
  v10 = (_QWORD *)*((_QWORD *)result + 16);
  v11 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
  v12 = (uint64_t *)*((_QWORD *)result + 17);
  v13 = (v6 + v6 * a2) / v7;
  v14 = (_WORD *)v10[1];
  if (v14)
    v14 = (_WORD *)((char *)v14 + 2 * v9 + v12[1] * v11);
  if (v13 != v8)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 44);
    v17 = v8 + v16;
    v18 = **((_QWORD **)result + 8);
    v19 = *v12;
    v20 = *((_QWORD *)result + 19);
    v21 = *v10 + v19 * v11;
    v22 = *(_QWORD *)(result + 20);
    v23 = v13 + v16;
    v24 = **((_QWORD **)result + 7) + v18 * v17 + 8 * *(_QWORD *)(result + 36);
    v25 = (_WORD *)(v21 + 2 * v9);
    v26 = v23 - v17;
    LOWORD(a3) = *(_WORD *)(v20 + 144);
    v27 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v20 + 146);
    v28 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 148);
    v29 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 150);
    v30 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 152);
    v31 = (float)LODWORD(_D1);
    v33 = *(float *)(v20 + 36);
    v32 = *(float *)(v20 + 40);
    v34 = *(float *)(v20 + 44);
    v131 = *(float *)(v20 + 48) * 0.5;
    v132 = v28;
    v129 = *(float *)(v20 + 56) * 0.5;
    v130 = *(float *)(v20 + 52) * 0.5;
    v127 = *(float *)(v20 + 64) * 0.5;
    v128 = *(float *)(v20 + 60) * 0.5;
    v125 = *(float *)(v20 + 68) * 0.5;
    v126 = *(float *)(v20 + 72);
    v35 = *(float *)(v20 + 80);
    v124 = *(float *)(v20 + 76);
    v36 = *(float *)(v20 + 84);
    v37 = *(float *)(v20 + 88);
    v38 = *(float *)(v20 + 92);
    v39 = *(float *)(v20 + 96);
    v40 = *(float *)(v20 + 100);
    v41 = *(float *)(v20 + 104);
    v42 = v20 + 164;
    v43 = v20 + 16548;
    result = (unsigned __int8 *)(v20 + 32932);
    v45 = *(float *)(v20 + 108);
    v44 = *(float *)(v20 + 112);
    v46 = *(float *)(v20 + 116);
    v47 = *(float *)(v20 + 120);
    v48 = *(unsigned __int8 *)(v20 + 157);
    v49 = *(unsigned __int8 *)(v20 + 156);
    v50 = *(unsigned __int8 *)(v20 + 155);
    v51 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v52 = *(unsigned __int8 *)(v20 + 154);
    do
    {
      if (v22)
      {
        v53 = 0;
        v54 = v14;
        v55 = v25;
        v56 = v24;
        do
        {
          v57 = v34;
          v58 = v32;
          v59 = v33;
          LOWORD(_D1) = *(_WORD *)(v56 + 2 * v52);
          v4.i16[0] = *(_WORD *)(v56 + 2 * v49);
          v60 = v56 + 8;
          WORD1(_D1) = *(_WORD *)(v56 + 2 * v50);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v51), 0), v51)));
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          v4.i16[1] = *(_WORD *)(v56 + 8 + 2 * v52);
          _D1 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v4), v51), 0), v51)));
          v68 = vcvt_s32_f32(*(float32x2_t *)&_D1);
          LOWORD(_D1) = *(_WORD *)(v42 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          v71 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17)) + (float)(v47 * v70);
          LODWORD(_D1) = 1174403072;
          if (v71 <= 8191.0)
          {
            *(float *)&_D1 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17))
                           + (float)(v47 * v70);
            if (v71 < 0.0)
              LODWORD(_D1) = 0;
          }
          _D18.i16[0] = *(_WORD *)(v60 + 2 * v50);
          _H19 = *(_WORD *)(v42 + 2 * v68.u32[1]);
          _D18.i16[1] = *(_WORD *)(v60 + 2 * v49);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v51), 0), v51)));
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v76 = (float)((float)((float)(v44 * _S20) + (float)(v45 * _S19)) + (float)(v46 * _S22))
              + (float)(v47 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v76 <= 8191.0)
          {
            *(float *)_D18.i32 = v76;
            if (v76 < 0.0)
              _D18.i32[0] = 0;
          }
          if (v54)
          {
            _H13 = *(_WORD *)(v56 + 2 * v48);
            __asm { FCVT            S13, H13 }
            _H5 = *(_WORD *)(v60 + 2 * v48);
            __asm { FCVT            S5, H5 }
            v81 = llroundf(_S13 * 65535.0);
            v82 = llroundf(_S5 * 65535.0);
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
          v33 = v59;
          v32 = v58;
          v34 = v57;
          _H1 = *(_WORD *)(v43 + 2 * llroundf(*(float *)&_D1));
          __asm { FCVT            S1, H1 }
          v85 = _S15 * _S1;
          v86 = _S16 * _S1;
          v87 = _S17 * _S1;
          _H16 = *(_WORD *)(v43 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          v90 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          v93 = (float)((float)(v124 * v86) + (float)(v85 * v126)) + (float)(v87 * v35);
          v94 = (float)((float)(v37 * v86) + (float)(v85 * v36)) + (float)(v87 * v38);
          v95 = (float)((float)(v40 * v86) + (float)(v85 * v39)) + (float)(v87 * v41);
          v96 = (float)(v124 * _S18) + (float)(v90 * v126);
          v97 = (float)(v37 * _S18) + (float)(v90 * v36);
          v98 = (float)(v40 * _S18) + (float)(v90 * v39);
          _S5 = v96 + (float)(_S16 * v35);
          v100 = v97 + (float)(_S16 * v38);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0))];
          v101 = v98 + (float)(_S16 * v41);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          v103 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v103];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          v108 = (float)(v32 * _S1) + (float)(v33 * _S18);
          _S6 = _S18 + _S16;
          v110 = _S1 + _S17;
          v111 = (float)(v132 + (float)((float)(_S18 + _S16) * v131)) + (float)(v110 * v130);
          v112 = (float)(v132 + (float)(_S6 * v128)) + (float)(v110 * v127);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          v114 = v108 + (float)(v57 * _S20);
          v115 = v111 + (float)((float)(_S20 + _S19) * v129);
          v116 = v112 + (float)((float)(_S20 + _S19) * v125);
          if (v115 < v27)
            v117 = v27;
          else
            v117 = v115;
          v118 = v114 + v27;
          if (v115 > v29)
            v117 = v29;
          v119 = llroundf(v117);
          if (v118 < v30)
            v120 = v30;
          else
            v120 = v118;
          *v55 = v119;
          if (v118 > v31)
            v120 = v31;
          v55[1] = llroundf(v120);
          v121 = v29;
          if (v116 <= v29)
          {
            v121 = v116;
            if (v116 < v27)
              v121 = v27;
          }
          v122 = (float)((float)((float)(v32 * _S17) + (float)(v33 * _S16)) + (float)(v57 * _S19)) + v27;
          v55[2] = llroundf(v121);
          v123 = v31;
          if (v122 <= v31)
          {
            v123 = v122;
            if (v122 < v30)
              v123 = v30;
          }
          v55[3] = llroundf(v123);
          if (v54)
          {
            *v54 = v81;
            v54[1] = v82;
            v54 += 2;
          }
          v56 += 16;
          v53 += 2;
          v55 += 4;
        }
        while (v22 > v53);
      }
      v24 += v18;
      v25 = (_WORD *)((char *)v25 + v19);
      ++v15;
    }
    while (v15 != v26);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_v216_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x2_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _WORD *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v70;
  __int16 v71;
  float v78;
  float v80;
  float v84;
  float v85;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  __int16 v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD **)(result + 128);
  v15 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
  v16 = *(uint64_t **)(result + 136);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_WORD *)v14[1];
  if (v18)
    v18 = (_WORD *)((char *)v18 + 2 * v13 + v16[1] * v15);
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **(_QWORD **)(result + 64);
    v23 = *v16;
    v24 = *(_QWORD *)(result + 152);
    v25 = *v14 + v23 * v15;
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **(_QWORD **)(result + 56) + v22 * v21 + 8 * *(_QWORD *)(result + 36);
    v29 = (_WORD *)(v25 + 2 * v13);
    v30 = v27 - v21;
    LOWORD(a3) = *(_WORD *)(v24 + 144);
    v31 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v24 + 146);
    v32 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v24 + 148);
    v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v24 + 150);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v24 + 152);
    v35 = (float)LODWORD(a7);
    v36 = *(float *)(v24 + 36);
    v37 = *(float *)(v24 + 40);
    v38 = *(float *)(v24 + 44);
    v100 = *(float *)(v24 + 52) * 0.5;
    v101 = *(float *)(v24 + 48) * 0.5;
    v99 = *(float *)(v24 + 56) * 0.5;
    v39 = *(float *)(v24 + 60) * 0.5;
    v40 = *(float *)(v24 + 64) * 0.5;
    v41 = *(float *)(v24 + 72);
    v42 = *(float *)(v24 + 68) * 0.5;
    v43 = *(float *)(v24 + 76);
    v44 = *(float *)(v24 + 80);
    v45 = *(float *)(v24 + 84);
    v46 = *(float *)(v24 + 88);
    v47 = *(float *)(v24 + 92);
    v48 = *(float *)(v24 + 96);
    v49 = *(float *)(v24 + 100);
    v50 = *(float *)(v24 + 104);
    v51 = v24 + 164;
    v52 = v24 + 16548;
    result = *(unsigned __int8 *)(v24 + 157);
    v53 = *(unsigned __int8 *)(v24 + 156);
    v54 = *(unsigned __int8 *)(v24 + 155);
    v55 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v56 = *(unsigned __int8 *)(v24 + 154);
    do
    {
      if (v26)
      {
        v57 = 0;
        v58 = v28;
        v59 = v18;
        v60 = v29;
        do
        {
          v61 = v58 + 8;
          if (v59)
          {
            _H11 = *(_WORD *)(v61 + 2 * result);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v58 + 2 * result);
            __asm { FCVT            S12, H12 }
            v70 = llroundf(_S12 * 65535.0);
            v71 = llroundf(_S11 * 65535.0);
          }
          else
          {
            v70 = 0;
            v71 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v58 + 2 * v56);
          _D12.i16[0] = *(_WORD *)(v58 + 2 * v53);
          _D11.i16[1] = *(_WORD *)(v58 + 2 * v54);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v55), 0), v55)));
          _D11.i16[0] = *(_WORD *)(v51 + 2 * _D11.u32[0]);
          _D13.i16[0] = *(_WORD *)(v61 + 2 * v54);
          __asm { FCVT            S11, H11 }
          _H14 = *(_WORD *)(v51 + 2 * _D11.u32[1]);
          _D12.i16[1] = *(_WORD *)(v61 + 2 * v56);
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v55), 0), v55)));
          __asm { FCVT            S14, H14 }
          _D12.i16[0] = *(_WORD *)(v51 + 2 * _D12.u32[0]);
          _H15 = *(_WORD *)(v51 + 2 * _D12.u32[1]);
          __asm
          {
            FCVT            S12, H12
            FCVT            S15, H15
          }
          _D13.i16[1] = *(_WORD *)(v61 + 2 * v53);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v55), 0), v55)));
          _D13.i16[0] = *(_WORD *)(v51 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _S16 = (float)((float)(v43 * _S14) + (float)(*(float *)_D11.i32 * v41)) + (float)(*(float *)_D12.i32 * v44);
          _S17 = (float)((float)(v46 * _S14) + (float)(*(float *)_D11.i32 * v45)) + (float)(*(float *)_D12.i32 * v47);
          *(float *)_D11.i32 = (float)((float)(v49 * _S14) + (float)(*(float *)_D11.i32 * v48))
                             + (float)(*(float *)_D12.i32 * v50);
          *(float *)_D12.i32 = (float)(v43 * *(float *)_D13.i32) + (float)(_S15 * v41);
          v78 = (float)(v46 * *(float *)_D13.i32) + (float)(_S15 * v45);
          *(float *)_D13.i32 = (float)(v49 * *(float *)_D13.i32) + (float)(_S15 * v48);
          LOWORD(_S15) = *(_WORD *)(v51 + 2 * _D13.u32[1]);
          __asm { FCVT            S15, H15 }
          *(float *)_D12.i32 = *(float *)_D12.i32 + (float)(_S15 * v44);
          v80 = v78 + (float)(_S15 * v47);
          LOWORD(_S16) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(_S15 * v50);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _D12.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v84 = (float)(v37 * _S17) + (float)(v36 * _S16);
          v85 = _S16 + *(float *)_D11.i32;
          _S17 = _S17 + *(float *)_D12.i32;
          v87 = (float)(v32 + (float)(v85 * v101)) + (float)(_S17 * v100);
          v88 = (float)(v32 + (float)(v85 * v39)) + (float)(_S17 * v40);
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H17 }
          v89 = v84 + (float)(v38 * _S15);
          v90 = v87 + (float)((float)(_S15 + *(float *)_D13.i32) * v99);
          v91 = v88 + (float)((float)(_S15 + *(float *)_D13.i32) * v42);
          if (v90 < v31)
            v92 = v31;
          else
            v92 = v90;
          v93 = v89 + v31;
          if (v90 > v33)
            v92 = v33;
          v94 = llroundf(v92);
          if (v93 < v34)
            v95 = v34;
          else
            v95 = v93;
          *v60 = v94;
          if (v93 > v35)
            v95 = v35;
          v60[1] = llroundf(v95);
          v96 = v33;
          if (v91 <= v33)
          {
            v96 = v91;
            if (v91 < v31)
              v96 = v31;
          }
          v97 = (float)((float)((float)(v37 * *(float *)_D12.i32) + (float)(v36 * *(float *)_D11.i32))
                      + (float)(v38 * *(float *)_D13.i32))
              + v31;
          v60[2] = llroundf(v96);
          v98 = v35;
          if (v97 <= v35)
          {
            v98 = v97;
            if (v97 < v34)
              v98 = v34;
          }
          v60[3] = llroundf(v98);
          if (v59)
          {
            *v59 = v70;
            v59[1] = v71;
            v59 += 2;
          }
          v58 += 16;
          v57 += 2;
          v60 += 4;
        }
        while (v26 > v57);
      }
      v28 += v22;
      v29 = (_WORD *)((char *)v29 + v23);
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _WORD *v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v60;
  __int16 v61;
  float v65;
  float v67;
  float v69;
  float v72;
  float v74;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = *(_QWORD *)(result + 112);
  v12 = *(_QWORD **)(result + 128);
  v13 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
  v14 = *(uint64_t **)(result + 136);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_WORD *)v12[1];
  if (v16)
    v16 = (_WORD *)((char *)v16 + 2 * v11 + v14[1] * v13);
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **(_QWORD **)(result + 64);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **(_QWORD **)(result + 56) + v20 * v19 + 8 * *(_QWORD *)(result + 36);
    v27 = (_WORD *)(v22 + 2 * v11);
    v28 = v25 - v19;
    v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v34 = (float)LODWORD(a8);
    v35 = *(float *)(v23 + 36);
    v36 = *(float *)(v23 + 40);
    v37 = *(float *)(v23 + 44);
    v38 = *(float *)(v23 + 48) * 0.5;
    v39 = *(float *)(v23 + 52) * 0.5;
    v40 = *(float *)(v23 + 56) * 0.5;
    v41 = *(float *)(v23 + 60) * 0.5;
    v42 = *(float *)(v23 + 64) * 0.5;
    v43 = *(float *)(v23 + 68) * 0.5;
    v44 = *(unsigned __int8 *)(v23 + 157);
    v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        v47 = 0;
        v48 = v26;
        v49 = v16;
        v50 = v27;
        do
        {
          v51 = v48 + 8;
          if (v49)
          {
            _H24 = *(_WORD *)(v51 + 2 * v44);
            __asm { FCVT            S24, H24 }
            _H25 = *(_WORD *)(v48 + 2 * v44);
            __asm { FCVT            S25, H25 }
            v60 = llroundf(_S25 * 65535.0);
            v61 = llroundf(_S24 * 65535.0);
          }
          else
          {
            v60 = 0;
            v61 = 0;
          }
          _H24 = *(_WORD *)(v48 + 2 * v46);
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v48 + 2 * result);
          v65 = v29 * _S24;
          __asm { FCVT            S24, H25 }
          v67 = v29 * _S24;
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * v45);
          __asm { FCVT            S24, H24 }
          v69 = v29 * _S24;
          LOWORD(_S24) = *(_WORD *)(v51 + 2 * v46);
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v51 + 2 * result);
          v72 = v29 * _S24;
          __asm { FCVT            S25, H25 }
          v74 = v29 * _S25;
          _H26 = *(_WORD *)(v51 + 2 * v45);
          __asm { FCVT            S26, H26 }
          v77 = v29 * _S26;
          v78 = (float)((float)((float)(v36 * v67) + (float)(v35 * v65)) + (float)(v37 * v69)) + v30;
          v79 = v65 + v72;
          v80 = v67 + v74;
          v81 = v69 + v77;
          v82 = (float)((float)(v31 + (float)(v79 * v38)) + (float)(v80 * v39)) + (float)(v81 * v40);
          v83 = (float)((float)(v31 + (float)(v79 * v41)) + (float)(v80 * v42)) + (float)(v81 * v43);
          if (v82 < v30)
            v84 = v30;
          else
            v84 = v82;
          if (v82 > v32)
            v84 = v32;
          *v50 = llroundf(v84);
          if (v78 < v33)
            v85 = v33;
          else
            v85 = v78;
          if (v78 > v34)
            v85 = v34;
          v50[1] = llroundf(v85);
          v86 = v32;
          if (v83 <= v32)
          {
            v86 = v83;
            if (v83 < v30)
              v86 = v30;
          }
          v87 = (float)((float)((float)(v36 * v74) + (float)(v35 * v72)) + (float)(v37 * v77)) + v30;
          v50[2] = llroundf(v86);
          v88 = v34;
          if (v87 <= v34)
          {
            v88 = v87;
            if (v87 < v33)
              v88 = v33;
          }
          v50[3] = llroundf(v88);
          if (v49)
          {
            *v49 = v60;
            v49[1] = v61;
            v49 += 2;
          }
          v48 += 16;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 = (_WORD *)((char *)v27 + v21);
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  float32x2_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  float v74;
  unsigned int v76;
  float v79;
  float v80;
  float v84;
  float v85;
  float v86;
  float v87;
  float v92;
  float v93;
  float v95;
  float v96;
  float v97;
  float v98;
  float v100;
  float v101;
  float v102;
  float v103;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(_D4);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v103 = *(float *)(v15 + 48);
    v102 = *(float *)(v15 + 52);
    v101 = *(float *)(v15 + 56);
    v30 = *(float *)(v15 + 64);
    v100 = *(float *)(v15 + 60);
    v31 = *(float *)(v15 + 68);
    v32 = *(float *)(v15 + 72);
    v33 = *(float *)(v15 + 76);
    v34 = *(float *)(v15 + 80);
    v35 = *(float *)(v15 + 84);
    v36 = *(float *)(v15 + 88);
    v37 = *(float *)(v15 + 92);
    v38 = *(float *)(v15 + 96);
    v39 = *(float *)(v15 + 100);
    v40 = *(float *)(v15 + 104);
    v41 = v15 + 164;
    v42 = v15 + 16548;
    v43 = v15 + 32932;
    v45 = *(float *)(v15 + 108);
    v44 = *(float *)(v15 + 112);
    v46 = *(float *)(v15 + 116);
    v47 = *(float *)(v15 + 120);
    v48 = *(uint64_t **)(result + 128);
    v49 = *(_QWORD *)(result + 112);
    v50 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v51 = *(_QWORD *)(result + 36);
    result = *(unsigned __int8 *)(v15 + 157);
    v52 = *(unsigned __int8 *)(v15 + 156);
    v53 = *(unsigned __int8 *)(v15 + 155);
    v54 = *(unsigned __int8 *)(v15 + 154);
    v55 = v48[2];
    if (v55)
      v56 = (_BYTE *)(v55 + v50 * v21 + v49);
    else
      v56 = 0;
    v58 = *v48;
    v57 = v48[1];
    v59 = (_BYTE *)(v57 + v50 * v20 + v49);
    if (!v57)
      v59 = 0;
    v60 = (_BYTE *)(v58 + v50 * v19 + v49);
    v61 = *v17 + v18 * v13 + 8 * v51;
    v62 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v63 = v12;
        v64 = v56;
        v65 = v59;
        v66 = v60;
        v67 = v61;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v67 + 2 * v54);
          WORD1(_D4) = *(_WORD *)(v67 + 2 * v53);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v62), 0), v62))));
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * LODWORD(_D4));
          _H16 = *(_WORD *)(v67 + 2 * v52);
          __asm { FCVT            S16, H16 }
          v74 = _S16 * 8191.0;
          __asm { FCVT            S16, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * HIDWORD(_D4));
          v76 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          __asm { FCVT            S17, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * v76);
          __asm { FCVT            S13, H4 }
          v79 = fmaxf(_S16, fmaxf(_S17, _S13));
          v80 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v79);
          LODWORD(_D4) = 1174403072;
          if (v80 <= 8191.0)
          {
            *(float *)&_D4 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13))
                           + (float)(v47 * v79);
            if (v80 < 0.0)
              LODWORD(_D4) = 0;
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(*(float *)&_D4));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          v84 = _S17 * _S4;
          v85 = _S13 * _S4;
          v86 = (float)((float)(v33 * v84) + (float)(_S16 * v32)) + (float)(v85 * v34);
          v87 = (float)((float)(v36 * v84) + (float)(_S16 * v35)) + (float)(v85 * v37);
          _S4 = (float)((float)(v39 * v84) + (float)(_S16 * v38)) + (float)(v85 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          v92 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          v93 = v24;
          if (v92 <= v24)
          {
            v93 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v92 < v22)
              v93 = v22;
          }
          _H15 = *(_WORD *)(v67 + 2 * result);
          *v66++ = llroundf(v93);
          if (v65)
          {
            v95 = (float)((float)(v23 + (float)(_S13 * v103)) + (float)(_S16 * v102)) + (float)(_S17 * v101);
            v96 = v26;
            if (v95 <= v26)
            {
              v96 = (float)((float)(v23 + (float)(_S13 * v103)) + (float)(_S16 * v102)) + (float)(_S17 * v101);
              if (v95 < v25)
                v96 = v25;
            }
            v97 = (float)((float)(v23 + (float)(_S13 * v100)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *v65 = llroundf(v96);
            v98 = v26;
            if (v97 <= v26)
            {
              v98 = v97;
              if (v97 < v25)
                v98 = v25;
            }
            v65[1] = llroundf(v98);
            v65 += 2;
          }
          if (v64)
          {
            __asm { FCVT            S4, H15 }
            *v64++ = llroundf(_S4 * 255.0);
          }
          v67 += 8;
          --v63;
        }
        while (v63);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  float v76;
  float v77;
  float v81;
  float v82;
  float v84;
  float v85;
  float v86;
  float v87;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(_D4);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v30 = *(float *)(v15 + 48);
    v31 = *(float *)(v15 + 52);
    v32 = *(float *)(v15 + 56);
    v33 = *(float *)(v15 + 60);
    v34 = *(float *)(v15 + 64);
    v35 = *(float *)(v15 + 68);
    v36 = *(float *)(v15 + 72);
    v37 = *(float *)(v15 + 76);
    v38 = *(float *)(v15 + 80);
    v39 = *(float *)(v15 + 84);
    v40 = *(float *)(v15 + 88);
    v41 = *(float *)(v15 + 92);
    v42 = *(float *)(v15 + 96);
    v43 = *(float *)(v15 + 100);
    v44 = *(float *)(v15 + 104);
    v45 = v15 + 164;
    v46 = v15 + 16548;
    v47 = *(uint64_t **)(result + 128);
    v48 = *(_QWORD *)(result + 112);
    v49 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v50 = *(_QWORD *)(result + 36);
    v51 = *(unsigned __int8 *)(v15 + 157);
    result = *(unsigned __int8 *)(v15 + 156);
    v52 = *(unsigned __int8 *)(v15 + 155);
    v53 = *(unsigned __int8 *)(v15 + 154);
    v54 = v47[2];
    if (v54)
      v55 = (_BYTE *)(v54 + v49 * v21 + v48);
    else
      v55 = 0;
    v57 = *v47;
    v56 = v47[1];
    v58 = (_BYTE *)(v56 + v49 * v20 + v48);
    if (!v56)
      v58 = 0;
    v59 = (_BYTE *)(v57 + v49 * v19 + v48);
    v60 = *v17 + v18 * v13 + 8 * v50;
    v61 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v62 = v12;
        v63 = v60;
        v64 = v55;
        v65 = v58;
        v66 = v59;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v63 + 2 * v53);
          WORD1(_D4) = *(_WORD *)(v63 + 2 * v52);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v61), 0), v61))));
          LOWORD(_D4) = *(_WORD *)(v45 + 2 * LODWORD(_D4));
          _H11 = *(_WORD *)(v63 + 2 * result);
          __asm
          {
            FCVT            S11, H11
            FCVT            S4, H4
          }
          _H12 = *(_WORD *)(v45 + 2 * HIDWORD(_D4));
          __asm { FCVT            S12, H12 }
          LOWORD(_S11) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S11 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v76 = (float)((float)(v37 * _S12) + (float)(*(float *)&_D4 * v36)) + (float)(_S11 * v38);
          v77 = (float)((float)(v40 * _S12) + (float)(*(float *)&_D4 * v39)) + (float)(_S11 * v41);
          *(float *)&_D4 = (float)((float)(v43 * _S12) + (float)(*(float *)&_D4 * v42)) + (float)(_S11 * v44);
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          LOWORD(_D4) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(*(float *)&_D4, 0.0), 8191.0)));
          __asm { FCVT            S14, H4 }
          v81 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
          v82 = v24;
          if (v81 <= v24)
          {
            v82 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
            if (v81 < v22)
              v82 = v22;
          }
          _H11 = *(_WORD *)(v63 + 2 * v51);
          *v66++ = llroundf(v82);
          if (v65)
          {
            v84 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
            v85 = v26;
            if (v84 <= v26)
            {
              v85 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
              if (v84 < v25)
                v85 = v25;
            }
            v86 = (float)((float)(v23 + (float)(_S12 * v33)) + (float)(_S13 * v34)) + (float)(_S14 * v35);
            *v65 = llroundf(v85);
            v87 = v26;
            if (v86 <= v26)
            {
              v87 = v86;
              if (v86 < v25)
                v87 = v25;
            }
            v65[1] = llroundf(v87);
            v65 += 2;
          }
          if (v64)
          {
            __asm { FCVT            S4, H11 }
            *v64++ = llroundf(_S4 * 255.0);
          }
          v63 += 8;
          --v62;
        }
        while (v62);
      }
      v60 += v18;
      v59 += v19;
      v58 += v20;
      v55 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_444vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  float v64;
  float v66;
  float v68;
  float v69;
  float v70;
  float v72;
  float v73;
  float v74;
  float v75;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48);
    v33 = *(float *)(v16 + 52);
    v34 = *(float *)(v16 + 56);
    v35 = *(float *)(v16 + 60);
    v36 = *(float *)(v16 + 64);
    v37 = *(float *)(v16 + 68);
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 157);
    v43 = *(unsigned __int8 *)(v16 + 156);
    v44 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v45 = v38[2];
    if (v45)
      v46 = (_BYTE *)(v45 + v40 * v22 + v39);
    else
      v46 = 0;
    v49 = v38;
    v48 = *v38;
    v47 = v49[1];
    _ZF = v47 == 0;
    v51 = (_BYTE *)(v47 + v40 * v21 + v39);
    if (_ZF)
      v51 = 0;
    v52 = (_BYTE *)(v48 + v40 * v20 + v39);
    v53 = *v18 + v19 * v14 + 8 * v41;
    do
    {
      if (v13)
      {
        v54 = v13;
        v55 = v53;
        v56 = v46;
        v57 = v51;
        v58 = v52;
        do
        {
          _H23 = *(_WORD *)(v55 + 2 * result);
          __asm { FCVT            S23, H23 }
          v64 = v23 * _S23;
          LOWORD(_S23) = *(_WORD *)(v55 + 2 * v44);
          __asm { FCVT            S23, H23 }
          v66 = v23 * _S23;
          LOWORD(_S23) = *(_WORD *)(v55 + 2 * v43);
          __asm { FCVT            S23, H23 }
          v68 = v23 * _S23;
          v69 = (float)((float)((float)(v30 * v66) + (float)(v29 * v64)) + (float)(v31 * (float)(v23 * _S23))) + v24;
          v70 = v26;
          if (v69 <= v26)
          {
            v70 = v69;
            if (v69 < v24)
              v70 = v24;
          }
          _H23 = *(_WORD *)(v55 + 2 * v42);
          *v58++ = llroundf(v70);
          if (v57)
          {
            v72 = (float)((float)(v25 + (float)(v64 * v32)) + (float)(v66 * v33)) + (float)(v68 * v34);
            v73 = v28;
            if (v72 <= v28)
            {
              v73 = (float)((float)(v25 + (float)(v64 * v32)) + (float)(v66 * v33)) + (float)(v68 * v34);
              if (v72 < v27)
                v73 = v27;
            }
            v74 = (float)((float)(v25 + (float)(v64 * v35)) + (float)(v66 * v36)) + (float)(v68 * v37);
            *v57 = llroundf(v73);
            v75 = v28;
            if (v74 <= v28)
            {
              v75 = v74;
              if (v74 < v27)
                v75 = v27;
            }
            v57[1] = llroundf(v75);
            v57 += 2;
          }
          if (v56)
          {
            __asm { FCVT            S23, H23 }
            *v56++ = llroundf(_S23 * 255.0);
          }
          v55 += 8;
          --v54;
        }
        while (v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float32x2_t v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  _WORD *v69;
  uint64_t v70;
  float v77;
  unsigned int v79;
  float v82;
  float v83;
  float v87;
  float v88;
  float v89;
  float v90;
  float v95;
  float v96;
  float v98;
  float v99;
  float v100;
  float v101;
  float v103;
  float v104;
  float v105;
  float v106;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(_D4);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v106 = *(float *)(v15 + 48);
    v105 = *(float *)(v15 + 52);
    v104 = *(float *)(v15 + 56);
    v30 = *(float *)(v15 + 64);
    v103 = *(float *)(v15 + 60);
    v31 = *(float *)(v15 + 68);
    v32 = *(float *)(v15 + 72);
    v33 = *(float *)(v15 + 76);
    v34 = *(float *)(v15 + 80);
    v35 = *(float *)(v15 + 84);
    v36 = *(float *)(v15 + 88);
    v37 = *(float *)(v15 + 92);
    v38 = *(float *)(v15 + 96);
    v39 = *(float *)(v15 + 100);
    v40 = *(float *)(v15 + 104);
    v41 = v15 + 164;
    v42 = v15 + 16548;
    v43 = v15 + 32932;
    v45 = *(float *)(v15 + 108);
    v44 = *(float *)(v15 + 112);
    v46 = *(float *)(v15 + 116);
    v47 = *(float *)(v15 + 120);
    v48 = *(uint64_t **)(result + 128);
    v49 = *(_QWORD *)(result + 112);
    v50 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v51 = *(_QWORD *)(result + 36);
    v52 = *(unsigned __int8 *)(v15 + 132);
    if (v52 >= 0x11)
      v53 = 0;
    else
      v53 = 16 - v52;
    result = *(unsigned __int8 *)(v15 + 157);
    v54 = *(unsigned __int8 *)(v15 + 156);
    v55 = *(unsigned __int8 *)(v15 + 155);
    v56 = *(unsigned __int8 *)(v15 + 154);
    v57 = v48[2];
    if (v57)
      v58 = v57 + v50 * v21 + 2 * v49;
    else
      v58 = 0;
    v60 = *v48;
    v59 = v48[1];
    v61 = v59 + v50 * v20 + 2 * v49;
    if (!v59)
      v61 = 0;
    v62 = v60 + v50 * v19 + 2 * v49;
    v63 = *v17 + v18 * v13 + 8 * v51;
    v64 = v53;
    v65 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v66 = v12;
        v67 = (_WORD *)v58;
        v68 = (_WORD *)v61;
        v69 = (_WORD *)v62;
        v70 = v63;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v70 + 2 * v56);
          WORD1(_D4) = *(_WORD *)(v70 + 2 * v55);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v65), 0), v65))));
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * LODWORD(_D4));
          _H16 = *(_WORD *)(v70 + 2 * v54);
          __asm { FCVT            S16, H16 }
          v77 = _S16 * 8191.0;
          __asm { FCVT            S16, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * HIDWORD(_D4));
          v79 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S17, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * v79);
          __asm { FCVT            S13, H4 }
          v82 = fmaxf(_S16, fmaxf(_S17, _S13));
          v83 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v82);
          LODWORD(_D4) = 1174403072;
          if (v83 <= 8191.0)
          {
            *(float *)&_D4 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13))
                           + (float)(v47 * v82);
            if (v83 < 0.0)
              LODWORD(_D4) = 0;
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(*(float *)&_D4));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          v87 = _S17 * _S4;
          v88 = _S13 * _S4;
          v89 = (float)((float)(v33 * v87) + (float)(_S16 * v32)) + (float)(v88 * v34);
          v90 = (float)((float)(v36 * v87) + (float)(_S16 * v35)) + (float)(v88 * v37);
          _S4 = (float)((float)(v39 * v87) + (float)(_S16 * v38)) + (float)(v88 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          v95 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          v96 = v24;
          if (v95 <= v24)
          {
            v96 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v95 < v22)
              v96 = v22;
          }
          _H15 = *(_WORD *)(v70 + 2 * result);
          *v69++ = llroundf(v96) << v64;
          if (v68)
          {
            v98 = (float)((float)(v23 + (float)(_S13 * v106)) + (float)(_S16 * v105)) + (float)(_S17 * v104);
            v99 = v26;
            if (v98 <= v26)
            {
              v99 = (float)((float)(v23 + (float)(_S13 * v106)) + (float)(_S16 * v105)) + (float)(_S17 * v104);
              if (v98 < v25)
                v99 = v25;
            }
            v100 = (float)((float)(v23 + (float)(_S13 * v103)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *v68 = llroundf(v99) << v64;
            v101 = v26;
            if (v100 <= v26)
            {
              v101 = v100;
              if (v100 < v25)
                v101 = v25;
            }
            v68[1] = llroundf(v101) << v64;
            v68 += 2;
          }
          if (v67)
          {
            __asm { FCVT            S4, H15 }
            *v67++ = llroundf(_S4 * 65535.0);
          }
          v70 += 8;
          --v66;
        }
        while (v66);
      }
      v63 += v18;
      v62 += v19;
      v61 += v20;
      v58 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  float32x2_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  _WORD *v67;
  _WORD *v68;
  float v78;
  float v79;
  float v83;
  float v85;
  float v86;
  float v87;
  float v88;
  float v90;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(_D4);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v90 = *(float *)(v15 + 48);
    v30 = *(float *)(v15 + 52);
    v31 = *(float *)(v15 + 56);
    v32 = *(float *)(v15 + 60);
    v33 = *(float *)(v15 + 64);
    v34 = *(float *)(v15 + 68);
    v35 = *(float *)(v15 + 72);
    v36 = *(float *)(v15 + 76);
    v37 = *(float *)(v15 + 80);
    v38 = *(float *)(v15 + 84);
    v39 = *(float *)(v15 + 88);
    v40 = *(float *)(v15 + 92);
    v41 = *(float *)(v15 + 96);
    v42 = *(float *)(v15 + 100);
    v43 = *(float *)(v15 + 104);
    v44 = v15 + 164;
    v45 = v15 + 16548;
    v46 = *(uint64_t **)(result + 128);
    v47 = *(_QWORD *)(result + 112);
    v48 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v15 + 132);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = *(unsigned __int8 *)(v15 + 157);
    result = *(unsigned __int8 *)(v15 + 156);
    v53 = *(unsigned __int8 *)(v15 + 155);
    v54 = *(unsigned __int8 *)(v15 + 154);
    v55 = v46[2];
    if (v55)
      v56 = v55 + v48 * v21 + 2 * v47;
    else
      v56 = 0;
    v58 = *v46;
    v57 = v46[1];
    v59 = v57 + v48 * v20 + 2 * v47;
    if (!v57)
      v59 = 0;
    v60 = v58 + v48 * v19 + 2 * v47;
    v61 = *v17 + v18 * v13 + 8 * v49;
    v62 = v51;
    v63 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v64 = v12;
        v65 = v61;
        v66 = (_WORD *)v56;
        v67 = (_WORD *)v59;
        v68 = (_WORD *)v60;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v65 + 2 * v54);
          WORD1(_D4) = *(_WORD *)(v65 + 2 * v53);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v63), 0), v63))));
          LOWORD(_D4) = *(_WORD *)(v44 + 2 * LODWORD(_D4));
          _H9 = *(_WORD *)(v65 + 2 * result);
          __asm
          {
            FCVT            S9, H9
            FCVT            S4, H4
          }
          _H12 = *(_WORD *)(v44 + 2 * HIDWORD(_D4));
          __asm { FCVT            S12, H12 }
          LOWORD(_S9) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S9 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          v78 = (float)((float)(v36 * _S12) + (float)(*(float *)&_D4 * v35)) + (float)(_S9 * v37);
          v79 = (float)((float)(v39 * _S12) + (float)(*(float *)&_D4 * v38)) + (float)(_S9 * v40);
          *(float *)&_D4 = (float)((float)(v42 * _S12) + (float)(*(float *)&_D4 * v41)) + (float)(_S9 * v43);
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H9 }
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S14, H9 }
          LOWORD(_D4) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)&_D4, 0.0), 8191.0)));
          __asm { FCVT            S15, H4 }
          v83 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
          *(float *)&_D4 = v24;
          if (v83 <= v24)
          {
            *(float *)&_D4 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
            if (v83 < v22)
              *(float *)&_D4 = v22;
          }
          _H12 = *(_WORD *)(v65 + 2 * v52);
          *v68++ = llroundf(*(float *)&_D4) << v62;
          if (v67)
          {
            v85 = (float)((float)(v23 + (float)(_S13 * v90)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
            v86 = v26;
            if (v85 <= v26)
            {
              v86 = (float)((float)(v23 + (float)(_S13 * v90)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
              if (v85 < v25)
                v86 = v25;
            }
            v87 = (float)((float)(v23 + (float)(_S13 * v32)) + (float)(_S14 * v33)) + (float)(_S15 * v34);
            *v67 = llroundf(v86) << v62;
            v88 = v26;
            if (v87 <= v26)
            {
              v88 = v87;
              if (v87 < v25)
                v88 = v25;
            }
            v67[1] = llroundf(v88) << v62;
            v67 += 2;
          }
          if (v66)
          {
            __asm { FCVT            S4, H12 }
            *v66++ = llroundf(_S4 * 65535.0);
          }
          v65 += 8;
          --v64;
        }
        while (v64);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_xf444_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  _WORD *v60;
  _WORD *v61;
  float v67;
  float v69;
  float v71;
  float v72;
  float v73;
  float v75;
  float v76;
  float v77;
  float v78;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48);
    v33 = *(float *)(v16 + 52);
    v34 = *(float *)(v16 + 56);
    v35 = *(float *)(v16 + 60);
    v36 = *(float *)(v16 + 64);
    v37 = *(float *)(v16 + 68);
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11)
      v43 = 0;
    else
      v43 = 16 - v42;
    v44 = *(unsigned __int8 *)(v16 + 157);
    v45 = *(unsigned __int8 *)(v16 + 156);
    v46 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v47 = v38[2];
    if (v47)
      v48 = v47 + v40 * v22 + 2 * v39;
    else
      v48 = 0;
    v51 = v38;
    v50 = *v38;
    v49 = v51[1];
    _ZF = v49 == 0;
    v53 = v49 + v40 * v21 + 2 * v39;
    if (_ZF)
      v53 = 0;
    v54 = v50 + v40 * v20 + 2 * v39;
    v55 = *v18 + v19 * v14 + 8 * v41;
    v56 = v43;
    do
    {
      if (v13)
      {
        v57 = v13;
        v58 = v55;
        v59 = (_WORD *)v48;
        v60 = (_WORD *)v53;
        v61 = (_WORD *)v54;
        do
        {
          _H24 = *(_WORD *)(v58 + 2 * result);
          __asm { FCVT            S24, H24 }
          v67 = v23 * _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v46);
          __asm { FCVT            S24, H24 }
          v69 = v23 * _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v45);
          __asm { FCVT            S24, H24 }
          v71 = v23 * _S24;
          v72 = (float)((float)((float)(v30 * v69) + (float)(v29 * v67)) + (float)(v31 * (float)(v23 * _S24))) + v24;
          v73 = v26;
          if (v72 <= v26)
          {
            v73 = v72;
            if (v72 < v24)
              v73 = v24;
          }
          _H24 = *(_WORD *)(v58 + 2 * v44);
          *v61++ = llroundf(v73) << v56;
          if (v60)
          {
            v75 = (float)((float)(v25 + (float)(v67 * v32)) + (float)(v69 * v33)) + (float)(v71 * v34);
            v76 = v28;
            if (v75 <= v28)
            {
              v76 = (float)((float)(v25 + (float)(v67 * v32)) + (float)(v69 * v33)) + (float)(v71 * v34);
              if (v75 < v27)
                v76 = v27;
            }
            v77 = (float)((float)(v25 + (float)(v67 * v35)) + (float)(v69 * v36)) + (float)(v71 * v37);
            *v60 = llroundf(v76) << v56;
            v78 = v28;
            if (v77 <= v28)
            {
              v78 = v77;
              if (v77 < v27)
                v78 = v27;
            }
            v60[1] = llroundf(v78) << v56;
            v60 += 2;
          }
          if (v59)
          {
            __asm { FCVT            S24, H24 }
            *v59++ = llroundf(_S24 * 65535.0);
          }
          v58 += 8;
          --v57;
        }
        while (v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v56;
  float v60;
  float v61;
  float v64;
  float v65;
  float v66;
  float v69;
  float v71;
  float v72;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v13 = **((_QWORD **)result + 8);
    v14 = **((_QWORD **)result + 17);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = v11 + 164;
    v24 = v11 + 16548;
    v25 = v11 + 32932;
    v26 = *(float *)(v11 + 104);
    v27 = *(float *)(v11 + 108);
    v28 = *(float *)(v11 + 112);
    v29 = *(float *)(v11 + 116);
    v30 = *(float *)(v11 + 120);
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = *((_QWORD *)result + 14);
    v33 = *((_QWORD *)result + 13) * a2 / v4 + *((_QWORD *)result + 15);
    v34 = *(_QWORD *)(result + 36);
    v35 = *(unsigned __int8 *)(v11 + 161);
    v36 = *(unsigned __int8 *)(v11 + 160);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 159);
    v37 = *(unsigned __int8 *)(v11 + 158);
    v38 = *(unsigned __int8 *)(v11 + 157);
    v39 = *(unsigned __int8 *)(v11 + 156);
    v40 = *v31 + v33 * v14;
    v41 = *(unsigned __int8 *)(v11 + 155);
    v42 = *(unsigned __int8 *)(v11 + 154);
    v43 = v40 + 4 * v32;
    v44 = *v12 + v13 * v9 + 8 * v34;
    v45 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v46 = v8;
        v47 = v44;
        v48 = v43;
        do
        {
          _D25.i16[0] = *(_WORD *)(v47 + 2 * v42);
          _D25.i16[1] = *(_WORD *)(v47 + 2 * v41);
          _D25 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D25), v45), 0), v45)));
          _D25.i16[0] = *(_WORD *)(v23 + 2 * _D25.u32[0]);
          _H26 = *(_WORD *)(v47 + 2 * v39);
          __asm
          {
            FCVT            S26, H26
            FCVT            S25, H25
          }
          _H27 = *(_WORD *)(v23 + 2 * _D25.u32[1]);
          v56 = llroundf(fminf(fmaxf(_S26 * 8191.0, 0.0), 8191.0));
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v23 + 2 * v56);
          __asm { FCVT            S28, H27 }
          v60 = (float)((float)((float)(v28 * _S26) + (float)(v27 * *(float *)_D25.i32)) + (float)(v29 * _S28))
              + (float)(v30 * fmaxf(*(float *)_D25.i32, fmaxf(_S26, _S28)));
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = v60;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          _H27 = *(_WORD *)(v24 + 2 * llroundf(v61));
          __asm { FCVT            S30, H27 }
          v64 = *(float *)_D25.i32 * _S30;
          v65 = _S26 * _S30;
          v66 = _S28 * _S30;
          _H26 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * (float)(_S26 * _S30))+ (float)((float)(*(float *)_D25.i32 * _S30) * v15))+ (float)(v66 * v17), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v69 = 255.0;
          if (_S26 <= 255.0)
          {
            v69 = _S26;
            if (_S26 < 0.0)
              v69 = 0.0;
          }
          _H26 = *(_WORD *)(v47 + 2 * v38);
          v71 = (float)((float)(v19 * v65) + (float)(v64 * v18)) + (float)(v66 * v20);
          v72 = (float)((float)(v22 * v65) + (float)(v64 * v21)) + (float)(v66 * v26);
          _H28 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          *(_BYTE *)(v48 + v37) = llroundf(v69);
          __asm { FCVT            S30, H28 }
          _S29 = 255.0;
          if (_S30 <= 255.0)
          {
            if (_S30 >= 0.0)
              __asm { FCVT            S29, H28 }
            else
              _S29 = 0.0;
          }
          result[v48] = llroundf(_S29);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          __asm { FCVT            S26, H26 }
          v47 += 8;
          *(_BYTE *)(v48 + v36) = llroundf(_S28);
          *(_BYTE *)(v48 + v35) = llroundf(_S26 * 255.0);
          v48 += 4;
          --v46;
        }
        while (v46);
      }
      v44 += v13;
      v43 += v14;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v55;
  float v57;
  float v58;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v12 = (_QWORD *)*((_QWORD *)result + 16);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = **((_QWORD **)result + 8);
    v15 = **((_QWORD **)result + 17);
    v16 = *(float *)(v11 + 72);
    v17 = *(float *)(v11 + 76);
    v18 = *(float *)(v11 + 80);
    v19 = *(float *)(v11 + 84);
    v20 = *(float *)(v11 + 88);
    v21 = *(float *)(v11 + 92);
    v22 = *(float *)(v11 + 96);
    v23 = *(float *)(v11 + 100);
    v24 = *(float *)(v11 + 104);
    v25 = v11 + 164;
    v26 = v11 + 16548;
    v27 = *((_QWORD *)result + 14);
    v28 = *((_QWORD *)result + 13) * a2 / v4 + *((_QWORD *)result + 15);
    v29 = *(_QWORD *)(result + 36);
    v30 = *(unsigned __int8 *)(v11 + 161);
    v31 = *(unsigned __int8 *)(v11 + 160);
    v32 = *(unsigned __int8 *)(v11 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 158);
    v33 = *(unsigned __int8 *)(v11 + 157);
    v34 = *(unsigned __int8 *)(v11 + 156);
    v35 = *v12 + v28 * v15;
    v36 = *(unsigned __int8 *)(v11 + 155);
    v37 = *(unsigned __int8 *)(v11 + 154);
    v38 = v35 + 4 * v27;
    v39 = *v13 + v14 * v9 + 8 * v29;
    v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v41 = v8;
        v42 = v39;
        v43 = v38;
        do
        {
          _D21.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D21.i16[1] = *(_WORD *)(v42 + 2 * v36);
          _D21 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D21), v40), 0), v40)));
          _D21.i16[0] = *(_WORD *)(v25 + 2 * _D21.u32[0]);
          _H22 = *(_WORD *)(v42 + 2 * v34);
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v25 + 2 * _D21.u32[1]);
          __asm
          {
            FCVT            S23, H21
            FCVT            S24, H24
          }
          _D21.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S22 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S25, H21 }
          LOWORD(_S22) = *(_WORD *)(v26
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v17 * _S24) + (float)(_S23 * v16)) + (float)(_S25 * v18), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v55 = 255.0;
          if (_S22 <= 255.0)
          {
            v55 = _S22;
            if (_S22 < 0.0)
              v55 = 0.0;
          }
          _H22 = *(_WORD *)(v42 + 2 * v33);
          v57 = (float)((float)(v20 * _S24) + (float)(_S23 * v19)) + (float)(_S25 * v21);
          v58 = (float)((float)(v23 * _S24) + (float)(_S23 * v22)) + (float)(_S25 * v24);
          _H24 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          result[v43] = llroundf(v55);
          __asm { FCVT            S26, H24 }
          _S25 = 255.0;
          if (_S26 <= 255.0)
          {
            if (_S26 >= 0.0)
              __asm { FCVT            S25, H24 }
            else
              _S25 = 0.0;
          }
          *(_BYTE *)(v43 + v32) = llroundf(_S25);
          __asm { FCVT            S25, H23 }
          _S24 = 255.0;
          if (_S25 <= 255.0)
          {
            if (_S25 >= 0.0)
              __asm { FCVT            S24, H23 }
            else
              _S24 = 0.0;
          }
          __asm { FCVT            S22, H22 }
          v42 += 8;
          *(_BYTE *)(v43 + v31) = llroundf(_S24);
          *(_BYTE *)(v43 + v30) = llroundf(_S22 * 255.0);
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v14;
      v38 += v15;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_BGRA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_BGRA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v38;
  float v43;
  float v44;
  char v46;
  float v47;
  float v48;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 128);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = (float)*(unsigned int *)(v10 + 136);
    v16 = *(_QWORD *)(result + 112);
    v17 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v18 = *(_QWORD *)(result + 36);
    v19 = *(unsigned __int8 *)(v10 + 161);
    v20 = *(unsigned __int8 *)(v10 + 160);
    v21 = *(unsigned __int8 *)(v10 + 159);
    v22 = *(unsigned __int8 *)(v10 + 158);
    v23 = *(unsigned __int8 *)(v10 + 157);
    result = *(unsigned __int8 *)(v10 + 156);
    v24 = *v11 + v17 * v14;
    v25 = *(unsigned __int8 *)(v10 + 155);
    v26 = *(unsigned __int8 *)(v10 + 154);
    v27 = v24 + 4 * v16;
    v28 = *v12 + v13 * v8 + 8 * v18;
    do
    {
      if (v7)
      {
        v29 = v7;
        v30 = v28;
        v31 = v27;
        do
        {
          _H1 = *(_WORD *)(v30 + 2 * v26);
          __asm { FCVT            S1, H1 }
          v38 = 255.0;
          if ((float)(v15 * _S1) <= 255.0)
          {
            v38 = v15 * _S1;
            if ((float)(v15 * _S1) < 0.0)
              v38 = 0.0;
          }
          _H2 = *(_WORD *)(v30 + 2 * v25);
          __asm { FCVT            S5, H2 }
          _H3 = *(_WORD *)(v30 + 2 * result);
          _H2 = *(_WORD *)(v30 + 2 * v23);
          v43 = v15 * _S5;
          *(_BYTE *)(v31 + v22) = llroundf(v38);
          v44 = 255.0;
          if (v43 <= 255.0)
          {
            v44 = v43;
            if (v43 < 0.0)
              v44 = 0.0;
          }
          __asm { FCVT            S3, H3 }
          v46 = llroundf(v44);
          v47 = v15 * _S3;
          *(_BYTE *)(v31 + v21) = v46;
          v48 = 255.0;
          if (v47 <= 255.0)
          {
            v48 = v47;
            if (v47 < 0.0)
              v48 = 0.0;
          }
          __asm { FCVT            S2, H2 }
          v30 += 8;
          *(_BYTE *)(v31 + v20) = llroundf(v48);
          *(_BYTE *)(v31 + v19) = llroundf(_S2 * 255.0);
          v31 += 4;
          --v29;
        }
        while (v29);
      }
      v28 += v13;
      v27 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  float32x2_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  float v55;
  float v56;
  float v59;
  float v60;
  float v61;
  float v64;
  BOOL v65;
  float v66;
  float v69;
  float v70;
  float v73;
  float v74;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  float v80;

  v4 = *(_QWORD *)(result + 28);
  v5 = *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *(_QWORD *)(result + 152);
    v13 = *(_QWORD **)(result + 56);
    v14 = **(_QWORD **)(result + 64);
    v15 = **(_QWORD **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v12 + 144);
    v16 = (float)LODWORD(a3);
    v17 = *(float *)(v12 + 72);
    v18 = *(float *)(v12 + 76);
    v19 = *(float *)(v12 + 80);
    v20 = *(float *)(v12 + 84);
    v21 = *(float *)(v12 + 88);
    v22 = *(float *)(v12 + 92);
    v23 = *(float *)(v12 + 96);
    v24 = *(float *)(v12 + 100);
    v25 = v12 + 164;
    v26 = v12 + 16548;
    v27 = v12 + 32932;
    v28 = *(float *)(v12 + 104);
    v29 = *(float *)(v12 + 108);
    v30 = *(float *)(v12 + 112);
    v31 = *(float *)(v12 + 116);
    v32 = *(float *)(v12 + 120);
    v33 = *(_QWORD *)(result + 112);
    v34 = *(_QWORD *)(result + 104) * a2 / v5 + *(_QWORD *)(result + 120);
    v35 = *(_QWORD *)(result + 36);
    v36 = *(unsigned __int8 *)(v12 + 157);
    v37 = *(unsigned __int8 *)(v12 + 156);
    v38 = **(_QWORD **)(result + 128) + v34 * v15;
    result = *(unsigned __int8 *)(v12 + 155);
    v39 = *(unsigned __int8 *)(v12 + 154);
    v40 = (unsigned int *)(v38 + 16 * v33);
    v41 = *v13 + v14 * v10 + 8 * v35;
    v42 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v9)
      {
        v43 = v9;
        v44 = v40;
        v45 = v41;
        do
        {
          _D28.i16[0] = *(_WORD *)(v45 + 2 * v39);
          _D28.i16[1] = *(_WORD *)(v45 + 2 * result);
          _D28 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D28), v42), 0), v42)));
          _D28.i16[0] = *(_WORD *)(v25 + 2 * _D28.u32[0]);
          _H29 = *(_WORD *)(v45 + 2 * v37);
          __asm
          {
            FCVT            S29, H29
            FCVT            S28, H28
          }
          _H30 = *(_WORD *)(v25 + 2 * _D28.u32[1]);
          __asm { FCVT            S30, H30 }
          LOWORD(_S29) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S29 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S8, H29 }
          v55 = (float)((float)((float)(v30 * _S30) + (float)(v29 * *(float *)_D28.i32)) + (float)(v31 * _S8))
              + (float)(v32 * fmaxf(*(float *)_D28.i32, fmaxf(_S30, _S8)));
          v56 = 8191.0;
          if (v55 <= 8191.0)
          {
            v56 = v55;
            if (v55 < 0.0)
              v56 = 0.0;
          }
          _H29 = *(_WORD *)(v26 + 2 * llroundf(v56));
          __asm { FCVT            S9, H29 }
          v59 = *(float *)_D28.i32 * _S9;
          v60 = _S30 * _S9;
          v61 = _S8 * _S9;
          _H28 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v24 * v60) + (float)((float)(*(float *)_D28.i32 * _S9) * v23))+ (float)((float)(_S8 * _S9) * v28), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          v64 = v16 + _S28;
          v65 = (float)(v16 + _S28) <= 1023.0;
          v66 = 1023.0;
          if (v65)
          {
            v66 = v64;
            if (v64 < 0.0)
              v66 = 0.0;
          }
          _H8 = *(_WORD *)(v27
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v21 * v60) + (float)(v59 * v20)) + (float)(v61 * v22), 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          v69 = v16 + _S8;
          v65 = (float)(v16 + _S8) <= 1023.0;
          v70 = 1023.0;
          if (v65)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          _H29 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * v60) + (float)(v59 * v17)) + (float)(v61 * v19), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v73 = v16 + _S29;
          v65 = (float)(v16 + _S29) <= 1023.0;
          v74 = 1023.0;
          if (v65)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          _H30 = *(_WORD *)(v45 + 2 * v36);
          __asm { FCVT            S30, H30 }
          v77 = llroundf(v66);
          v45 += 8;
          v78 = llroundf(v70) << 10;
          v79 = llroundf(v74);
          v80 = (float)llroundf(_S30 * 3.0);
          if (v80 > 3.0)
            v80 = 3.0;
          *v44++ = v78 | v77 | (llroundf(v80) << 30) | (v79 << 20);
          --v43;
        }
        while (v43);
      }
      v41 += v14;
      v40 = (unsigned int *)((char *)v40 + v15);
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  float32x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  float v47;
  float v51;
  BOOL v52;
  float v55;
  float v56;
  float v59;
  float v60;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  float v66;

  v4 = *(_QWORD *)(result + 28);
  v5 = *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *(_QWORD *)(result + 152);
    v13 = *(_QWORD **)(result + 56);
    v14 = **(_QWORD **)(result + 64);
    v15 = **(_QWORD **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v12 + 144);
    v16 = (float)LODWORD(a3);
    v17 = *(float *)(v12 + 72);
    v18 = *(float *)(v12 + 76);
    v19 = *(float *)(v12 + 80);
    v20 = *(float *)(v12 + 84);
    v21 = *(float *)(v12 + 88);
    v22 = *(float *)(v12 + 92);
    v23 = *(float *)(v12 + 96);
    v24 = *(float *)(v12 + 100);
    v25 = *(float *)(v12 + 104);
    v26 = v12 + 164;
    v27 = v12 + 16548;
    v28 = *(_QWORD *)(result + 112);
    v29 = *(_QWORD *)(result + 104) * a2 / v5 + *(_QWORD *)(result + 120);
    v30 = *(_QWORD *)(result + 36);
    v31 = *(unsigned __int8 *)(v12 + 157);
    v32 = *(unsigned __int8 *)(v12 + 156);
    v33 = **(_QWORD **)(result + 128) + v29 * v15;
    v34 = *(unsigned __int8 *)(v12 + 155);
    result = *(unsigned __int8 *)(v12 + 154);
    v35 = (unsigned int *)(v33 + 16 * v28);
    v36 = *v13 + v14 * v10 + 8 * v30;
    v37 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v9)
      {
        v38 = v9;
        v39 = v36;
        v40 = v35;
        do
        {
          _D24.i16[0] = *(_WORD *)(v39 + 2 * result);
          _D24.i16[1] = *(_WORD *)(v39 + 2 * v34);
          _D24 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D24), v37), 0), v37)));
          _D24.i16[0] = *(_WORD *)(v26 + 2 * _D24.u32[0]);
          _H25 = *(_WORD *)(v39 + 2 * v32);
          __asm { FCVT            S25, H25 }
          v47 = _S25 * 8191.0;
          __asm { FCVT            S25, H24 }
          _D24.i16[0] = *(_WORD *)(v26 + 2 * _D24.u32[1]);
          __asm { FCVT            S26, H24 }
          _D24.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v47, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          _D24.i16[0] = *(_WORD *)(v27
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v24 * _S26) + (float)(_S25 * v23)) + (float)(_S27 * v25), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v51 = v16 + *(float *)_D24.i32;
          v52 = (float)(v16 + *(float *)_D24.i32) <= 1023.0;
          _D24.i32[0] = 1149222912;
          if (v52)
          {
            *(float *)_D24.i32 = v51;
            if (v51 < 0.0)
              _D24.i32[0] = 0;
          }
          _H28 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * _S26) + (float)(_S25 * v20)) + (float)(_S27 * v22), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          v55 = v16 + _S28;
          v52 = (float)(v16 + _S28) <= 1023.0;
          v56 = 1023.0;
          if (v52)
          {
            v56 = v55;
            if (v55 < 0.0)
              v56 = 0.0;
          }
          _H25 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * _S26) + (float)(_S25 * v17)) + (float)(_S27 * v19), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v59 = v16 + _S25;
          v52 = (float)(v16 + _S25) <= 1023.0;
          v60 = 1023.0;
          if (v52)
          {
            v60 = v59;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          _H26 = *(_WORD *)(v39 + 2 * v31);
          __asm { FCVT            S26, H26 }
          v63 = llroundf(*(float *)_D24.i32);
          v39 += 8;
          v64 = llroundf(v56) << 10;
          v65 = llroundf(v60);
          v66 = (float)llroundf(_S26 * 3.0);
          if (v66 > 3.0)
            v66 = 3.0;
          *v40++ = v64 | v63 | (llroundf(v66) << 30) | (v65 << 20);
          --v38;
        }
        while (v38);
      }
      v36 += v14;
      v35 = (unsigned int *)((char *)v35 + v15);
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int *v25;
  float v33;
  float v37;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  float v45;
  float v46;
  float v47;
  unsigned int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned int v53;
  float v54;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *((_QWORD *)result + 19);
    v13 = **((_QWORD **)result + 8);
    v14 = **((_QWORD **)result + 17);
    v15 = (float)*(unsigned int *)(v12 + 136);
    LOWORD(a4) = *(_WORD *)(v12 + 144);
    v16 = (float)LODWORD(a4);
    v17 = *((_QWORD *)result + 13) * a2 / v5 + *((_QWORD *)result + 15);
    v18 = *(unsigned __int8 *)(v12 + 157);
    v19 = *(unsigned __int8 *)(v12 + 156);
    v20 = *(unsigned __int8 *)(v12 + 155);
    v21 = *(unsigned __int8 *)(v12 + 154);
    v22 = **((_QWORD **)result + 16) + v17 * v14 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v13 * v10 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v9)
      {
        v23 = v9;
        v24 = result;
        v25 = (unsigned int *)v22;
        do
        {
          _H5 = *(_WORD *)&v24[2 * v21];
          _H6 = *(_WORD *)&v24[2 * v20];
          __asm { FCVT            S5, H5 }
          v33 = v15 * _S5;
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)&v24[2 * v19];
          __asm { FCVT            S7, H7 }
          v37 = v15 * _S6;
          _H16 = *(_WORD *)&v24[2 * v18];
          __asm { FCVT            S16, H16 }
          v40 = llroundf(_S16 * 3.0);
          v41 = (float)(v15 * _S7) + v16;
          if (v41 < 0.0)
            v42 = 0.0;
          else
            v42 = v41;
          if (v41 <= 1023.0)
            v43 = v42;
          else
            v43 = 1023.0;
          v44 = llroundf(v43);
          v45 = v37 + v16;
          if (v45 < 0.0)
            v46 = 0.0;
          else
            v46 = v45;
          if (v45 <= 1023.0)
            v47 = v46;
          else
            v47 = 1023.0;
          v48 = llroundf(v47);
          v49 = v33 + v16;
          if (v49 < 0.0)
            v50 = 0.0;
          else
            v50 = v49;
          if (v49 <= 1023.0)
            v51 = v50;
          else
            v51 = 1023.0;
          v52 = (float)v40;
          v53 = llroundf(v51);
          v24 += 8;
          if (v52 <= 3.0)
            v54 = v52;
          else
            v54 = 3.0;
          *v25++ = (v48 << 10) | v44 | (llroundf(v54) << 30) | (v53 << 20);
          --v23;
        }
        while (v23);
      }
      result += v13;
      v22 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  float v53;
  float v54;
  float v57;
  float v58;
  float v59;
  float v62;
  float v65;
  float v66;
  float v70;
  float v73;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = v11 + 164;
    v24 = v11 + 16548;
    v25 = v11 + 32932;
    v26 = *(float *)(v11 + 104);
    v27 = *(float *)(v11 + 108);
    v28 = *(float *)(v11 + 112);
    v29 = *(float *)(v11 + 116);
    v30 = *(float *)(v11 + 120);
    v31 = *(_QWORD *)(result + 112);
    v32 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v33 = *(_QWORD *)(result + 36);
    v34 = *(unsigned __int8 *)(v11 + 157);
    v35 = *(unsigned __int8 *)(v11 + 156);
    v36 = **(_QWORD **)(result + 128) + v32 * v14;
    result = *(unsigned __int8 *)(v11 + 155);
    v37 = *(unsigned __int8 *)(v11 + 154);
    v38 = (_WORD *)(v36 + 8 * v31);
    v39 = *v12 + v13 * v9 + 8 * v33;
    v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v41 = v8;
        v42 = v39;
        v43 = v38;
        do
        {
          _D26.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D26.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D26 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D26), v40), 0), v40)));
          _D26.i16[0] = *(_WORD *)(v23 + 2 * _D26.u32[0]);
          _H27 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S27, H27
            FCVT            S26, H26
          }
          _H28 = *(_WORD *)(v23 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          LOWORD(_S27) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S27 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          v53 = (float)((float)((float)(v28 * _S28) + (float)(v27 * *(float *)_D26.i32)) + (float)(v29 * _S30))
              + (float)(v30 * fmaxf(*(float *)_D26.i32, fmaxf(_S28, _S30)));
          v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            v54 = v53;
            if (v53 < 0.0)
              v54 = 0.0;
          }
          _H27 = *(_WORD *)(v24 + 2 * llroundf(v54));
          __asm { FCVT            S31, H27 }
          v57 = *(float *)_D26.i32 * _S31;
          v58 = _S28 * _S31;
          v59 = _S30 * _S31;
          _H31 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * v58) + (float)((float)(*(float *)_D26.i32 * _S31) * v15))+ (float)((float)(_S30 * _S31) * v17), 0.0), 8191.0)));
          __asm { FCVT            S26, H31 }
          v62 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S30, H31 }
            _NF = _S30 < 0.0;
            v62 = _S26;
            if (_NF)
              v62 = 0.0;
          }
          _H26 = *(_WORD *)(v42 + 2 * v34);
          v65 = (float)((float)(v19 * v58) + (float)(v57 * v18)) + (float)(v59 * v20);
          v66 = (float)((float)(v22 * v58) + (float)(v57 * v21)) + (float)(v59 * v26);
          _H28 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S31, H28 }
          *v43 = llroundf(v62);
          v70 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v70 = _S31;
            if (_S28 < 0.0)
              v70 = 0.0;
          }
          __asm { FCVT            S30, H27 }
          v43[1] = llroundf(v70);
          v73 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S27, H27 }
            v73 = _S30;
            if (_S27 < 0.0)
              v73 = 0.0;
          }
          __asm { FCVT            S26, H26 }
          v42 += 8;
          v43[2] = llroundf(v73);
          v43[3] = llroundf(_S26 * 65535.0);
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      v38 = (_WORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  float v45;
  float v50;
  float v53;
  float v54;
  float v58;
  float v61;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = *(float *)(v11 + 104);
    v24 = v11 + 164;
    v25 = v11 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v28 = *(_QWORD *)(result + 36);
    v29 = *(unsigned __int8 *)(v11 + 157);
    v30 = *(unsigned __int8 *)(v11 + 156);
    v31 = **(_QWORD **)(result + 128) + v27 * v14;
    v32 = *(unsigned __int8 *)(v11 + 155);
    result = *(unsigned __int8 *)(v11 + 154);
    v33 = (_WORD *)(v31 + 8 * v26);
    v34 = *v12 + v13 * v9 + 8 * v28;
    v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v36 = v8;
        v37 = v34;
        v38 = v33;
        do
        {
          _D22.i16[0] = *(_WORD *)(v37 + 2 * result);
          _D22.i16[1] = *(_WORD *)(v37 + 2 * v32);
          _D22 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D22), v35), 0), v35)));
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[0]);
          _H23 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S23, H23 }
          v45 = _S23 * 8191.0;
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S24) + (float)(_S23 * v15)) + (float)(_S25 * v17), 0.0), 8191.0)));
          __asm { FCVT            S22, H27 }
          v50 = 65535.0;
          if (*(float *)_D22.i32 <= 65535.0)
          {
            __asm { FCVT            S26, H27 }
            _NF = _S26 < 0.0;
            v50 = *(float *)_D22.i32;
            if (_NF)
              v50 = 0.0;
          }
          _H22 = *(_WORD *)(v37 + 2 * v29);
          v53 = (float)((float)(v19 * _S24) + (float)(_S23 * v18)) + (float)(_S25 * v20);
          v54 = (float)((float)(v22 * _S24) + (float)(_S23 * v21)) + (float)(_S25 * v23);
          _H24 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v54, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          *v38 = llroundf(v50);
          v58 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCVT            S24, H24 }
            v58 = _S27;
            if (_S24 < 0.0)
              v58 = 0.0;
          }
          __asm { FCVT            S26, H23 }
          v38[1] = llroundf(v58);
          v61 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S23, H23 }
            v61 = _S26;
            if (_S23 < 0.0)
              v61 = 0.0;
          }
          __asm { FCVT            S22, H22 }
          v37 += 8;
          v38[2] = llroundf(v61);
          v38[3] = llroundf(_S22 * 65535.0);
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      v33 = (_WORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _WORD *v22;
  float v29;
  float v30;
  float v35;
  float v36;
  float v38;
  BOOL v39;
  float v40;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = (float)*(unsigned int *)(v10 + 136);
    v14 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v15 = *(unsigned __int8 *)(v10 + 157);
    v16 = *(unsigned __int8 *)(v10 + 156);
    v17 = *(unsigned __int8 *)(v10 + 155);
    v18 = *(unsigned __int8 *)(v10 + 154);
    v19 = **((_QWORD **)result + 16) + v14 * v12 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v11 * v8 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v20 = v7;
        v21 = result;
        v22 = (_WORD *)v19;
        do
        {
          _H2 = *(_WORD *)&v21[2 * v18];
          __asm { FCVT            S2, H2 }
          v29 = v13 * _S2;
          v30 = 65535.0;
          if (v29 <= 65535.0)
          {
            v30 = v29;
            if (v29 < 0.0)
              v30 = 0.0;
          }
          _H2 = *(_WORD *)&v21[2 * v17];
          __asm { FCVT            S5, H2 }
          _H3 = *(_WORD *)&v21[2 * v16];
          _H2 = *(_WORD *)&v21[2 * v15];
          v35 = v13 * _S5;
          *v22 = llroundf(v30);
          v36 = 65535.0;
          if (v35 <= 65535.0)
          {
            v36 = v35;
            if (v35 < 0.0)
              v36 = 0.0;
          }
          __asm { FCVT            S3, H3 }
          v38 = v13 * _S3;
          v22[1] = llroundf(v36);
          v39 = (float)(v13 * _S3) <= 65535.0;
          v40 = 65535.0;
          if (v39)
          {
            v40 = v38;
            if (v38 < 0.0)
              v40 = 0.0;
          }
          __asm { FCVT            S2, H2 }
          v21 += 8;
          v22[2] = llroundf(v40);
          v22[3] = llroundf(_S2 * 65535.0);
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  float v53;
  float v54;
  float v57;
  float v58;
  float v59;
  float v62;
  float v66;
  float v70;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = v11 + 164;
    v24 = v11 + 16548;
    v25 = v11 + 32932;
    v26 = *(float *)(v11 + 104);
    v27 = *(float *)(v11 + 108);
    v28 = *(float *)(v11 + 112);
    v29 = *(float *)(v11 + 116);
    v30 = *(float *)(v11 + 120);
    v31 = *(_QWORD *)(result + 112);
    v32 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v33 = *(_QWORD *)(result + 36);
    v34 = *(unsigned __int8 *)(v11 + 157);
    v35 = *(unsigned __int8 *)(v11 + 156);
    v36 = **(_QWORD **)(result + 128) + v32 * v14;
    result = *(unsigned __int8 *)(v11 + 155);
    v37 = *(unsigned __int8 *)(v11 + 154);
    v38 = (_WORD *)(v36 + 8 * v31);
    v39 = *v12 + v13 * v9 + 8 * v33;
    v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v41 = v8;
        v42 = v39;
        v43 = v38;
        do
        {
          _D26.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D26.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D26 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D26), v40), 0), v40)));
          _D26.i16[0] = *(_WORD *)(v23 + 2 * _D26.u32[0]);
          _H27 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S27, H27
            FCVT            S26, H26
          }
          _H28 = *(_WORD *)(v23 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          LOWORD(_S27) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S27 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          v53 = (float)((float)((float)(v28 * _S28) + (float)(v27 * *(float *)_D26.i32)) + (float)(v29 * _S30))
              + (float)(v30 * fmaxf(*(float *)_D26.i32, fmaxf(_S28, _S30)));
          v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            v54 = v53;
            if (v53 < 0.0)
              v54 = 0.0;
          }
          _H27 = *(_WORD *)(v24 + 2 * llroundf(v54));
          __asm { FCVT            S31, H27 }
          v57 = *(float *)_D26.i32 * _S31;
          v58 = _S28 * _S31;
          v59 = _S30 * _S31;
          _H31 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * v58) + (float)((float)(*(float *)_D26.i32 * _S31) * v15))+ (float)((float)(_S30 * _S31) * v17), 0.0), 8191.0)));
          __asm { FCVT            S30, H31 }
          v62 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S26, H31 }
            _NF = _S26 < 0.0;
            v62 = _S30;
            if (_NF)
              v62 = 0.0;
          }
          _H8 = *(_WORD *)(v25
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v19 * v58) + (float)(v57 * v18)) + (float)(v59 * v20), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          v66 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S30, H8 }
            _NF = _S30 < 0.0;
            v66 = _S31;
            if (_NF)
              v66 = 0.0;
          }
          _H29 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * v58) + (float)(v57 * v21)) + (float)(v59 * v26), 0.0), 8191.0)));
          __asm { FCVT            S28, H29 }
          v70 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S27, H29 }
            _NF = _S27 < 0.0;
            v70 = _S28;
            if (_NF)
              v70 = 0.0;
          }
          _H28 = *(_WORD *)(v42 + 2 * v34);
          __asm { FCVT            S28, H28 }
          v42 += 8;
          *v43 = __rev16(llroundf(_S28 * 65535.0));
          v43[1] = __rev16(llroundf(v62));
          v43[2] = __rev16(llroundf(v66));
          v43[3] = __rev16(llroundf(v70));
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      v38 = (_WORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  float v45;
  float v54;
  float v58;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = *(float *)(v11 + 104);
    v24 = v11 + 164;
    v25 = v11 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v28 = *(_QWORD *)(result + 36);
    v29 = *(unsigned __int8 *)(v11 + 157);
    v30 = *(unsigned __int8 *)(v11 + 156);
    v31 = **(_QWORD **)(result + 128) + v27 * v14;
    v32 = *(unsigned __int8 *)(v11 + 155);
    result = *(unsigned __int8 *)(v11 + 154);
    v33 = (_WORD *)(v31 + 8 * v26);
    v34 = *v12 + v13 * v9 + 8 * v28;
    v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v36 = v8;
        v37 = v34;
        v38 = v33;
        do
        {
          _D22.i16[0] = *(_WORD *)(v37 + 2 * result);
          _D22.i16[1] = *(_WORD *)(v37 + 2 * v32);
          _D22 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D22), v35), 0), v35)));
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[0]);
          _H23 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S23, H23 }
          v45 = _S23 * 8191.0;
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S24) + (float)(_S23 * v15)) + (float)(_S25 * v17), 0.0), 8191.0)));
          __asm { FCVT            S26, H27 }
          _D22.i32[0] = 1199570688;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S22, H27 }
            _NF = _S22 < 0.0;
            *(float *)_D22.i32 = _S26;
            if (_NF)
              _D22.i32[0] = 0;
          }
          _H28 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S24) + (float)(_S23 * v18)) + (float)(_S25 * v20), 0.0), 8191.0)));
          __asm { FCVT            S27, H28 }
          v54 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCVT            S26, H28 }
            _NF = _S26 < 0.0;
            v54 = _S27;
            if (_NF)
              v54 = 0.0;
          }
          _H25 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S24) + (float)(_S23 * v21)) + (float)(_S25 * v23), 0.0), 8191.0)));
          __asm { FCVT            S24, H25 }
          v58 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCVT            S23, H25 }
            _NF = _S23 < 0.0;
            v58 = _S24;
            if (_NF)
              v58 = 0.0;
          }
          _H24 = *(_WORD *)(v37 + 2 * v29);
          __asm { FCVT            S24, H24 }
          v37 += 8;
          *v38 = __rev16(llroundf(_S24 * 65535.0));
          v38[1] = __rev16(llroundf(*(float *)_D22.i32));
          v38[2] = __rev16(llroundf(v54));
          v38[3] = __rev16(llroundf(v58));
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      v33 = (_WORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _WORD *v22;
  float v29;
  BOOL v30;
  float v31;
  float v34;
  float v35;
  float v38;
  float v39;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = (float)*(unsigned int *)(v10 + 136);
    v14 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v15 = *(unsigned __int8 *)(v10 + 157);
    v16 = *(unsigned __int8 *)(v10 + 156);
    v17 = *(unsigned __int8 *)(v10 + 155);
    v18 = *(unsigned __int8 *)(v10 + 154);
    v19 = **((_QWORD **)result + 16) + v14 * v12 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v11 * v8 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v20 = v7;
        v21 = result;
        v22 = (_WORD *)v19;
        do
        {
          _H2 = *(_WORD *)&v21[2 * v18];
          __asm { FCVT            S2, H2 }
          v29 = v13 * _S2;
          v30 = (float)(v13 * _S2) <= 65535.0;
          v31 = 65535.0;
          if (v30)
          {
            v31 = v29;
            if (v29 < 0.0)
              v31 = 0.0;
          }
          _H3 = *(_WORD *)&v21[2 * v17];
          __asm { FCVT            S3, H3 }
          v34 = v13 * _S3;
          v30 = (float)(v13 * _S3) <= 65535.0;
          v35 = 65535.0;
          if (v30)
          {
            v35 = v34;
            if (v34 < 0.0)
              v35 = 0.0;
          }
          _H4 = *(_WORD *)&v21[2 * v16];
          __asm { FCVT            S4, H4 }
          v38 = v13 * _S4;
          v30 = (float)(v13 * _S4) <= 65535.0;
          v39 = 65535.0;
          if (v30)
          {
            v39 = v38;
            if (v38 < 0.0)
              v39 = 0.0;
          }
          _H5 = *(_WORD *)&v21[2 * v15];
          __asm { FCVT            S5, H5 }
          v21 += 8;
          *v22 = __rev16(llroundf(_S5 * 65535.0));
          v22[1] = __rev16(llroundf(v31));
          v22[2] = __rev16(llroundf(v35));
          v22[3] = __rev16(llroundf(v39));
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  unsigned int v51;
  float v55;
  float v56;
  __int16 v57;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = v11 + 164;
    v24 = v11 + 16548;
    v25 = v11 + 32932;
    v26 = *(float *)(v11 + 104);
    v27 = *(float *)(v11 + 108);
    v28 = *(float *)(v11 + 112);
    v29 = *(float *)(v11 + 116);
    v30 = *(float *)(v11 + 120);
    v31 = *(_QWORD *)(result + 112);
    v32 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v33 = *(_QWORD *)(result + 36);
    v34 = *(unsigned __int8 *)(v11 + 157);
    v35 = *(unsigned __int8 *)(v11 + 156);
    v36 = **(_QWORD **)(result + 128) + v32 * v14;
    result = *(unsigned __int8 *)(v11 + 155);
    v37 = *(unsigned __int8 *)(v11 + 154);
    v38 = (_WORD *)(v36 + 8 * v31);
    v39 = *v12 + v13 * v9 + 8 * v33;
    v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v41 = v8;
        v42 = v39;
        v43 = v38;
        do
        {
          _D25.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D25.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D25 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D25), v40), 0), v40)));
          _D25.i16[0] = *(_WORD *)(v23 + 2 * _D25.u32[0]);
          _H26 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S26, H26
            FCVT            S25, H25
          }
          _H27 = *(_WORD *)(v23 + 2 * _D25.u32[1]);
          v51 = llroundf(fminf(fmaxf(_S26 * 8191.0, 0.0), 8191.0));
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v23 + 2 * v51);
          __asm { FCVT            S27, H27 }
          v55 = (float)((float)((float)(v28 * _S26) + (float)(v27 * *(float *)_D25.i32)) + (float)(v29 * _S27))
              + (float)(v30 * fmaxf(*(float *)_D25.i32, fmaxf(_S26, _S27)));
          v56 = 8191.0;
          if (v55 <= 8191.0)
          {
            v56 = v55;
            if (v55 < 0.0)
              v56 = 0.0;
          }
          v57 = *(_WORD *)(v42 + 2 * v34);
          _H28 = *(_WORD *)(v24 + 2 * llroundf(v56));
          __asm { FCVT            S28, H28 }
          v60 = *(float *)_D25.i32 * _S28;
          v61 = _S26 * _S28;
          v62 = _S27 * _S28;
          v63 = (float)((float)(v16 * v61) + (float)(v60 * v15)) + (float)(v62 * v17);
          v64 = (float)((float)(v19 * v61) + (float)(v60 * v18)) + (float)(v62 * v20);
          v65 = (float)((float)(v22 * v61) + (float)(v60 * v21)) + (float)(v62 * v26);
          LOWORD(v62) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          LOWORD(v65) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          *v43 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          v43[1] = LOWORD(v62);
          v42 += 8;
          v43[2] = LOWORD(v65);
          v43[3] = v57;
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      v38 = (_WORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  __int16 v45;
  unsigned __int32 v47;
  float v50;
  float v51;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = *(float *)(v11 + 104);
    v24 = v11 + 164;
    v25 = v11 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v28 = *(_QWORD *)(result + 36);
    v29 = *(unsigned __int8 *)(v11 + 157);
    v30 = *(unsigned __int8 *)(v11 + 156);
    v31 = **(_QWORD **)(result + 128) + v27 * v14;
    v32 = *(unsigned __int8 *)(v11 + 155);
    result = *(unsigned __int8 *)(v11 + 154);
    v33 = (_WORD *)(v31 + 8 * v26);
    v34 = *v12 + v13 * v9 + 8 * v28;
    v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v36 = v8;
        v37 = v34;
        v38 = v33;
        do
        {
          _D21.i16[0] = *(_WORD *)(v37 + 2 * result);
          _D21.i16[1] = *(_WORD *)(v37 + 2 * v32);
          _H22 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S22, H22 }
          _D21 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D21), v35), 0), v35)));
          v45 = *(_WORD *)(v37 + 2 * v29);
          _H24 = *(_WORD *)(v24 + 2 * _D21.u32[1]);
          v47 = _D21.i32[0];
          *(float *)_D21.i32 = fmaxf(_S22 * 8191.0, 0.0);
          LOWORD(_S22) = *(_WORD *)(v24 + 2 * v47);
          _D21.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(*(float *)_D21.i32, 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S24, H24
            FCVT            S21, H21
          }
          v50 = (float)((float)(v16 * _S24) + (float)(_S22 * v15)) + (float)(*(float *)_D21.i32 * v17);
          v51 = (float)((float)(v19 * _S24) + (float)(_S22 * v18)) + (float)(*(float *)_D21.i32 * v20);
          *(float *)_D21.i32 = (float)((float)(v22 * _S24) + (float)(_S22 * v21)) + (float)(*(float *)_D21.i32 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          _D21.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(*(float *)_D21.i32, 0.0), 8191.0)));
          *v38 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          v38[1] = LOWORD(_S22);
          v37 += 8;
          v38[2] = _D21.i16[0];
          v38[3] = v45;
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      v33 = (_WORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = **((_QWORD **)result + 8);
    v11 = **((_QWORD **)result + 17);
    v12 = (unsigned __int8 *)*((_QWORD *)result + 19);
    v13 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v14 = v12[157];
    v15 = v12[156];
    v16 = v12[155];
    v17 = v12[154];
    v18 = **((_QWORD **)result + 16) + v13 * v11 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v10 * v8 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v19 = v7;
        v20 = result;
        v21 = (_WORD *)v18;
        do
        {
          v22 = *(_WORD *)&v20[2 * v17];
          v23 = *(_WORD *)&v20[2 * v16];
          v24 = *(_WORD *)&v20[2 * v15];
          v25 = *(_WORD *)&v20[2 * v14];
          v20 += 8;
          *v21 = v22;
          v21[1] = v23;
          v21[2] = v24;
          v21[3] = v25;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v51;
  float v55;
  float v56;
  float v61;
  float v64;
  float v65;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = v11 + 164;
    v24 = v11 + 16548;
    v25 = v11 + 32932;
    v26 = *(float *)(v11 + 104);
    v27 = *(float *)(v11 + 108);
    v28 = *(float *)(v11 + 112);
    v29 = *(float *)(v11 + 116);
    v30 = *(float *)(v11 + 120);
    v31 = *(_QWORD *)(result + 112);
    v32 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v33 = *(_QWORD *)(result + 36);
    v34 = *(unsigned __int8 *)(v11 + 157);
    v35 = *(unsigned __int8 *)(v11 + 156);
    v36 = **(_QWORD **)(result + 128) + v32 * v14;
    result = *(unsigned __int8 *)(v11 + 155);
    v37 = *(unsigned __int8 *)(v11 + 154);
    v38 = (_DWORD *)(v36 + 16 * v31);
    v39 = *v12 + v13 * v9 + 8 * v33;
    v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v41 = v8;
        v42 = v39;
        v43 = v38;
        do
        {
          _D25.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D25.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D25 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D25), v40), 0), v40)));
          _D25.i16[0] = *(_WORD *)(v23 + 2 * _D25.u32[0]);
          _H26 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S26, H26
            FCVT            S25, H25
          }
          _H27 = *(_WORD *)(v23 + 2 * _D25.u32[1]);
          v51 = llroundf(fminf(fmaxf(_S26 * 8191.0, 0.0), 8191.0));
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v23 + 2 * v51);
          __asm { FCVT            S27, H27 }
          v55 = (float)((float)((float)(v28 * _S26) + (float)(v27 * *(float *)_D25.i32)) + (float)(v29 * _S27))
              + (float)(v30 * fmaxf(*(float *)_D25.i32, fmaxf(_S26, _S27)));
          v56 = 8191.0;
          if (v55 <= 8191.0)
          {
            v56 = v55;
            if (v55 < 0.0)
              v56 = 0.0;
          }
          _H29 = *(_WORD *)(v42 + 2 * v34);
          __asm { FCVT            S29, H29 }
          v42 += 8;
          _H28 = *(_WORD *)(v24 + 2 * llroundf(v56));
          __asm { FCVT            S28, H28 }
          v61 = *(float *)_D25.i32 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          v64 = (float)((float)(v16 * _S26) + (float)(v61 * v15)) + (float)(_S27 * v17);
          v65 = (float)((float)(v19 * _S26) + (float)(v61 * v18)) + (float)(_S27 * v20);
          _S25 = (float)((float)(v22 * _S26) + (float)(v61 * v21)) + (float)(_S27 * v26);
          LOWORD(_S26) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          LOWORD(_S27) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S25) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          *v43 = _S26;
          v43[1] = _S27;
          __asm { FCVT            S25, H25 }
          v43[2] = _S25;
          v43[3] = _S29;
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      v38 = (_DWORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  float v50;
  float v51;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = *(float *)(v11 + 72);
    v16 = *(float *)(v11 + 76);
    v17 = *(float *)(v11 + 80);
    v18 = *(float *)(v11 + 84);
    v19 = *(float *)(v11 + 88);
    v20 = *(float *)(v11 + 92);
    v21 = *(float *)(v11 + 96);
    v22 = *(float *)(v11 + 100);
    v23 = *(float *)(v11 + 104);
    v24 = v11 + 164;
    v25 = v11 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v28 = *(_QWORD *)(result + 36);
    v29 = *(unsigned __int8 *)(v11 + 157);
    v30 = *(unsigned __int8 *)(v11 + 156);
    v31 = **(_QWORD **)(result + 128) + v27 * v14;
    v32 = *(unsigned __int8 *)(v11 + 155);
    result = *(unsigned __int8 *)(v11 + 154);
    v33 = (_DWORD *)(v31 + 16 * v26);
    v34 = *v12 + v13 * v9 + 8 * v28;
    v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v36 = v8;
        v37 = v34;
        v38 = v33;
        do
        {
          _D21.i16[0] = *(_WORD *)(v37 + 2 * result);
          _H22 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v37 + 2 * v29);
          _D21.i16[1] = *(_WORD *)(v37 + 2 * v32);
          __asm { FCVT            S23, H23 }
          _D21 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D21), v35), 0), v35)));
          _D21.i16[0] = *(_WORD *)(v24 + 2 * _D21.u32[0]);
          v37 += 8;
          __asm { FCVT            S21, H21 }
          _H24 = *(_WORD *)(v24 + 2 * _D21.u32[1]);
          __asm { FCVT            S24, H24 }
          LOWORD(_S22) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S22 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v50 = (float)((float)(v16 * _S24) + (float)(*(float *)_D21.i32 * v15)) + (float)(_S22 * v17);
          v51 = (float)((float)(v19 * _S24) + (float)(*(float *)_D21.i32 * v18)) + (float)(_S22 * v20);
          *(float *)_D21.i32 = (float)((float)(v22 * _S24) + (float)(*(float *)_D21.i32 * v21)) + (float)(_S22 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S24) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _D21.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(*(float *)_D21.i32, 0.0), 8191.0)));
          *v38 = _S22;
          v38[1] = _S24;
          __asm { FCVT            S21, H21 }
          v38[2] = _D21.i32[0];
          v38[3] = _S23;
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      v33 = (_DWORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _DWORD *v21;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = **((_QWORD **)result + 8);
    v11 = **((_QWORD **)result + 17);
    v12 = (unsigned __int8 *)*((_QWORD *)result + 19);
    v13 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v14 = v12[157];
    v15 = v12[156];
    v16 = v12[155];
    v17 = v12[154];
    v18 = **((_QWORD **)result + 16) + v13 * v11 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v10 * v8 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v19 = v7;
        v20 = result;
        v21 = (_DWORD *)v18;
        do
        {
          _H0 = *(_WORD *)&v20[2 * v17];
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)&v20[2 * v16];
          _H2 = *(_WORD *)&v20[2 * v15];
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          _H3 = *(_WORD *)&v20[2 * v14];
          __asm { FCVT            S3, H3 }
          v20 += 8;
          *v21 = _S0;
          v21[1] = _S1;
          v21[2] = _S2;
          v21[3] = _S3;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t ParavirtualizedVideoEncoder_CreateInstanceWithSpecification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  if (!a5)
    return 4294954394;
  VTVideoEncoderGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
    return FigSignalErrorAt();
  return v5;
}

uint64_t paravirtualizedVideoEncoder_forgetPendingFramePixelBuffersByUUIDs(uint64_t a1, int a2, int a3, CFArrayRef theArray)
{
  CFIndex i;
  CFIndex v9;
  const void *ValueAtIndex;
  uint64_t result;

  for (i = 0; ; ++i)
  {
    v9 = theArray ? CFArrayGetCount(theArray) : 0;
    if (i >= v9)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    result = paravirtualizedVideoEncoder_forgetPendingFramePixelBufferByUUID(a1, a2, a3, ValueAtIndex);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t paravirtualizedVideoEncoder_forgetPendingFramePixelBufferByUUID(uint64_t a1, int a2, int a3, const void *a4)
{
  uint64_t DerivedStorage;
  __CFDictionary *Value;
  const __CFString *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 84));
  Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 88), a4);
  if (Value)
  {
    if (a2)
    {
      v9 = CFSTR("PVEncodeFrameDidComplete");
LABEL_6:
      CFDictionarySetValue(Value, v9, (const void *)*MEMORY[0x1E0C9AE50]);
      goto LABEL_7;
    }
    if (a3)
    {
      v9 = CFSTR("PVFrameWasEmitted");
      goto LABEL_6;
    }
  }
LABEL_7:
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 84));
  return 0;
}

uint64_t paravirtualizedVideoEncoder_lookupRetainAndForgetPendingTilePixelBufferByUUID(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5)
{
  uint64_t DerivedStorage;
  const void *SInt64;
  const __CFDictionary *Value;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  __CFDictionary *v13;
  const __CFString *v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 96));
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), a5);
  if (Value)
  {
    v11 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("TilesDict"));
    if (!v11)
    {
LABEL_11:
      v15 = 0;
      goto LABEL_12;
    }
    v12 = v11;
    v13 = (__CFDictionary *)CFDictionaryGetValue(v11, SInt64);
    if (v13)
    {
      if (a3)
      {
        v14 = CFSTR("EncodeTileDidComplete");
      }
      else
      {
        if (!a4)
          goto LABEL_9;
        v14 = CFSTR("TileWasEmitted");
      }
      CFDictionarySetValue(v13, v14, (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_9:
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      if (!CFDictionaryGetCount(v12))
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a5);
      goto LABEL_11;
    }
  }
  v15 = FigSignalErrorAt();
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 96));
  if (SInt64)
    CFRelease(SInt64);
  return v15;
}

uint64_t ParavirtualizedVideoEncoder_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t MessageAndByteStream;
  unsigned int SInt32;
  uint64_t v3;
  CFTypeRef v5;
  CFTypeRef cf;
  unsigned int v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v5 = 0;
  cf = 0;
  MessageAndByteStream = VTParavirtualizationCreateMessageAndByteStream(1701408374, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, 0);
  if ((_DWORD)MessageAndByteStream
    || (MessageAndByteStream = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v5), (_DWORD)MessageAndByteStream))
  {
    v3 = MessageAndByteStream;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v5, 744845938, &v7);
    if (SInt32)
      v3 = SInt32;
    else
      v3 = v7;
  }
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return v3;
}

void ParavirtualizedVideoEncoder_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  *(_DWORD *)(DerivedStorage + 16) = 0;
  *(_QWORD *)DerivedStorage = 0;
  *(_QWORD *)(DerivedStorage + 8) = 0;
  if (!VTParavirtualizationCreateMessageAndByteStream(761622115, 0, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, 0))VTParavirtualizationGuestSendMessageToHostAsync((OpaqueCMBlockBuffer *)cf);
  VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)(DerivedStorage + 64));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 88);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 112);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 120);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 128);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  if (cf)
    CFRelease(cf);
}

__CFString *ParavirtualizedVideoEncoder_CopyDebugDescription(uint64_t a1)
{
  unsigned __int8 *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<ParavirtualizedVideoEncoder %p UUID %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x>"), a1, DerivedStorage[64], DerivedStorage[65], DerivedStorage[66], DerivedStorage[67], DerivedStorage[68], DerivedStorage[69], DerivedStorage[70], DerivedStorage[71], DerivedStorage[72], DerivedStorage[73], DerivedStorage[74], DerivedStorage[75], DerivedStorage[76], DerivedStorage[77], DerivedStorage[78],
    DerivedStorage[79]);
  return Mutable;
}

uint64_t ParavirtualizedVideoEncoder_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t appended;
  unsigned int v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  cf = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  if (FigCFEqual())
  {
    v6 = *(CFTypeRef *)(DerivedStorage + 120);
    if (v6)
      v6 = CFRetain(v6);
    v7 = 0;
    *a4 = v6;
  }
  else
  {
    appended = VTParavirtualizationCreateMessageAndByteStream(1701015408, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v13);
    if ((_DWORD)appended
      || (appended = VTParavirtualizationMessageAppendCFPropertyList(), (_DWORD)appended)
      || (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v12),
          (_DWORD)appended)
      || (appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v12, 744845938, &v10), (_DWORD)appended))
    {
      v7 = appended;
    }
    else
    {
      v7 = v10;
      if (!v10)
      {
        v7 = VTParavirtualizationMessageCopyCFPropertyList((OpaqueCMBlockBuffer *)v12, 745955692, &v11);
        if (!(_DWORD)v7)
        {
          *a4 = v11;
          v11 = 0;
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  return v7;
}

uint64_t ParavirtualizedVideoEncoder_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  uint64_t v8;
  uint64_t v9;
  unsigned int SInt32;
  const void *v11;
  CFTypeRef cf;
  unsigned int v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v14 = 0;
  cf = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1702061428, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&v17, &v16);
  if (!(_DWORD)appended)
  {
    v8 = paravirtualizedVideoEncoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(a1, a2, a3, &cf);
    if ((_DWORD)v8 == -19096)
    {
      v9 = 0;
      goto LABEL_14;
    }
    v9 = v8;
    if ((_DWORD)v8)
      goto LABEL_12;
    appended = VTParavirtualizationMessageAppendCFPropertyList();
    if (!(_DWORD)appended)
    {
      appended = VTParavirtualizationMessageAppendCFPropertyList();
      if (!(_DWORD)appended)
      {
        appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v17, &v15);
        if (!(_DWORD)appended)
        {
          SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v15, 744845938, &v14);
          if (SInt32)
            v9 = SInt32;
          else
            v9 = v14;
          if (!(_DWORD)v9)
            goto LABEL_14;
          goto LABEL_12;
        }
      }
    }
  }
  v9 = appended;
LABEL_12:
  v11 = (const void *)FigCFCopyCompactDescription();
  if (v11)
    CFRelease(v11);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  return v9;
}

uint64_t paravirtualizedVideoEncoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t Value;
  CFTypeRef v9;

  if (paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce != -1)
    dispatch_once(&paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce, &__block_literal_global_16);
  Value = FigCFDictionaryGetValue();
  if (Value)
    return (*(uint64_t (**)(uint64_t, const void *, _QWORD *))(Value + 8))(a1, a3, a4);
  if (a3)
    v9 = CFRetain(a3);
  else
    v9 = 0;
  *a4 = v9;
  return 0;
}

CFDictionaryRef __paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_block_invoke()
{
  CFDictionaryRef result;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  values = &kParavirtualizedVideoEncoder_BaseClass_block_invoke_specialCasePropertyAndHandlerPairs;
  keys[0] = CFSTR("MultiPassStorage");
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], 0);
  paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_sSpecialCaseHandlersForSettingProperties = (uint64_t)result;
  return result;
}

uint64_t paravirtualizedVideoEncoder_handleMultiPassStorageSetPropertyAndCopyReplacementValue(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  CFTypeRef *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(const void **)(DerivedStorage + 120);
  *(_QWORD *)(DerivedStorage + 120) = a2;
  if (a2)
    CFRetain(a2);
  if (v6)
    CFRelease(v6);
  v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  if (a2)
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  *a3 = CFRetain(*v7);
  return 0;
}

uint64_t ParavirtualizedVideoEncoder_StartSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t appended;
  unsigned int SInt32;
  uint64_t v8;
  unsigned int v10;
  OpaqueCMBlockBuffer *v11;
  CFTypeRef v12;
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v12 = 0;
  cf = 0;
  v11 = 0;
  v10 = 0;
  *DerivedStorage = a2;
  DerivedStorage[4] = a3;
  appended = VTParavirtualizationCreateMessageAndByteStream(1702065249, 1, (uint64_t)(DerivedStorage + 8), 0, (CMBlockBufferRef *)&cf, &v12);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendCMVideoDimensions(), (_DWORD)appended)
    || (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v11),
        (_DWORD)appended))
  {
    v8 = appended;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32(v11, 744845938, &v10);
    if (SInt32)
      v8 = SInt32;
    else
      v8 = v10;
  }
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v8;
}

uint64_t ParavirtualizedVideoEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t DerivedStorage;
  CFUUIDRef v13;
  uint64_t appended;
  int v15;
  uint64_t v16;
  int v18;
  IOSurfaceRef IOSurface;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef cf;
  unsigned int v23;

  v23 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  cf = 0;
  IOSurface = 0;
  v20 = 0;
  v18 = 0;
  if (CVPixelBufferGetWidth(a3) != *(_DWORD *)(DerivedStorage + 32)
    || CVPixelBufferGetHeight(a3) != *(_DWORD *)(DerivedStorage + 36))
  {
    v16 = FigSignalErrorAt();
    v13 = 0;
    goto LABEL_23;
  }
  if (a3)
  {
    v13 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    paravirtualizedVideoEncoder_rememberPendingFramePixelBufferAndUUID(a1, v13, a3);
  }
  else
  {
    v13 = 0;
  }
  IOSurface = CVPixelBufferGetIOSurface(a3);
  if (!IOSurface)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_23;
  }
  appended = VTParavirtualizationCreateMessageAndByteStream(1701212781, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v21);
  if (!(_DWORD)appended)
  {
    appended = VTParavirtualizationMessageAppendSInt64();
    if (!(_DWORD)appended)
    {
      appended = VTParavirtualizationMessageAppendCMTime();
      if (!(_DWORD)appended)
      {
        appended = VTParavirtualizationMessageAppendCMTime();
        if (!(_DWORD)appended)
        {
          if (!a6
            || (appended = VTParavirtualizationMessageAppendCFDictionary(v21, 744910962, a6), !(_DWORD)appended))
          {
            if (!v13
              || (appended = VTParavirtualizationMessageAppendCFUUID((uint64_t)v21, 745895273, v13), !(_DWORD)appended))
            {
              if (!a3
                || (appended = VTParavirtualizationMessageAppendPixelBufferAndIOSurfaceAttachments((uint64_t)v21, a3),
                    !(_DWORD)appended))
              {
                appended = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, (uint64_t)&IOSurface, 1, &v20);
                if (!(_DWORD)appended)
                {
                  appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v20, 744845938, &v23);
                  if (!(_DWORD)appended)
                  {
                    appended = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v20, 745107046, &v18);
                    if (!(_DWORD)appended)
                    {
                      v15 = v18;
                      appended = paravirtualizedVideoEncoder_forgetPendingFramePixelBufferByUUID(a1, 1, 0, v13);
                      if (!(_DWORD)appended)
                      {
                        v16 = v23;
                        if (a7)
                          *a7 = v15;
LABEL_23:
                        if (!(_DWORD)v16)
                          goto LABEL_25;
                        goto LABEL_24;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v16 = appended;
LABEL_24:
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)DerivedStorage, a2, v16, 0, 0);
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v13)
    CFRelease(v13);
  return v16;
}

uint64_t ParavirtualizedVideoEncoder_CompleteFrames()
{
  uint64_t DerivedStorage;
  uint64_t appended;
  unsigned int SInt32;
  uint64_t v3;
  unsigned int v5;
  CFTypeRef cf;
  CFTypeRef v7;
  CMBlockBufferRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = 0;
  cf = 0;
  v5 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1701013106, 1, DerivedStorage + 64, 0, &v8, &v7);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendCMTime(), (_DWORD)appended)
    || (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v8, &cf), (_DWORD)appended))
  {
    v3 = appended;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v5);
    if (SInt32)
      v3 = SInt32;
    else
      v3 = v5;
  }
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t SInt32;
  const void *v7;
  unsigned int v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40))
  {
    v4 = 0;
  }
  else
  {
    v5 = CMBaseObjectGetDerivedStorage();
    v12 = 0;
    cf = 0;
    v10 = 0;
    v11 = 0;
    v9 = 0;
    SInt32 = VTParavirtualizationCreateMessageAndByteStream(1702065520, 1, v5 + 64, 0, (CMBlockBufferRef *)&cf, &v12);
    if ((_DWORD)SInt32
      || (SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v11),
          (_DWORD)SInt32)
      || (SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v11, 744845938, &v9), (_DWORD)SInt32))
    {
      v4 = SInt32;
    }
    else
    {
      v4 = v9;
      if (!v9)
      {
        v4 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)v11, 745764208, &v10);
        if (!(_DWORD)v4)
        {
          *(_QWORD *)(DerivedStorage + 40) = v10;
          v10 = 0;
        }
      }
    }
    if (cf)
      CFRelease(cf);
    if (v12)
      CFRelease(v12);
    if (v11)
      CFRelease(v11);
    if (v10)
      CFRelease(v10);
  }
  if (!a2)
    return FigSignalErrorAt();
  v7 = *(const void **)(DerivedStorage + 40);
  if (!v7)
    return FigSignalErrorAt();
  *a2 = CFRetain(v7);
  return v4;
}

uint64_t ParavirtualizedVideoEncoder_SetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t CMBaseObject;
  CFMutableDictionaryRef Mutable;
  const __CFArray *v8;
  uint64_t Count;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  const void *ValueAtIndex;
  const void *Value;
  unsigned int v15;
  uint64_t appended;
  unsigned int SInt32;
  unsigned int v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v19 = 0;
  v5 = VTParavirtualizationCreateMessageAndByteStream(1701672300, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&v22, &v21);
  if ((_DWORD)v5)
  {
    v12 = v5;
  }
  else
  {
    CMBaseObject = VTVideoEncoderGetCMBaseObject(a1);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      v10 = Count;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
        Value = CFDictionaryGetValue(a2, ValueAtIndex);
        cf = 0;
        v15 = paravirtualizedVideoEncoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(CMBaseObject, (uint64_t)ValueAtIndex, Value, &cf);
        if (v15 == -19096)
        {
          if (v10 == 1)
          {
            if (Mutable)
              CFRelease(Mutable);
            if (cf)
              CFRelease(cf);
            Mutable = 0;
            if (!v8)
              goto LABEL_19;
LABEL_18:
            CFRelease(v8);
            goto LABEL_19;
          }
        }
        else
        {
          if ((_DWORD)v12)
            v12 = v12;
          else
            v12 = v15;
          if (!v15)
            FigCFDictionarySetValue();
          if (cf)
            CFRelease(cf);
        }
        if (v10 == ++v11)
          goto LABEL_17;
      }
    }
    v12 = 0;
LABEL_17:
    if (v8)
      goto LABEL_18;
LABEL_19:
    if ((_DWORD)v12)
    {
LABEL_25:
      if (!Mutable)
        goto LABEL_27;
      goto LABEL_26;
    }
    appended = VTParavirtualizationMessageAppendCFDictionary(v21, 745566831, Mutable);
    if (!(_DWORD)appended)
    {
      appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v22, &v20);
      if (!(_DWORD)appended)
      {
        SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v20, 744845938, &v19);
        if (SInt32)
          v12 = SInt32;
        else
          v12 = v19;
        goto LABEL_25;
      }
    }
    v12 = appended;
    if (Mutable)
LABEL_26:
      CFRelease(Mutable);
  }
LABEL_27:
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  return v12;
}

uint64_t ParavirtualizedVideoEncoder_CopySerializableProperties(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t SInt32;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  CMBlockBufferRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v11 = 0;
  cf = 0;
  v10 = 0;
  v9 = 0;
  SInt32 = VTParavirtualizationCreateMessageAndByteStream(1701015408, 1, DerivedStorage + 64, 0, &v13, &cf);
  if ((_DWORD)SInt32
    || (SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v13, &v11), (_DWORD)SInt32)
    || (SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v11, 744845938, &v9), (_DWORD)SInt32))
  {
    v6 = SInt32;
  }
  else
  {
    v6 = v9;
    if (!v9)
    {
      v7 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)v11, 745566831, &v10);
      v6 = v7;
      if (a3)
      {
        if (!(_DWORD)v7)
        {
          *a3 = v10;
          v10 = 0;
        }
      }
    }
  }
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return v6;
}

uint64_t ParavirtualizedVideoEncoder_PrepareToEncodeFrames()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int SInt32;
  uint64_t v3;
  unsigned int v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  cf = 0;
  v6 = 0;
  v5 = 0;
  v1 = VTParavirtualizationCreateMessageAndByteStream(1701865074, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v7);
  if ((_DWORD)v1
    || (v1 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v6), (_DWORD)v1))
  {
    v3 = v1;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v6, 744845938, &v5);
    if (SInt32)
      v3 = SInt32;
    else
      v3 = v5;
  }
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_BeginPass()
{
  uint64_t DerivedStorage;
  uint64_t appended;
  unsigned int SInt32;
  uint64_t v3;
  unsigned int v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  cf = 0;
  v6 = 0;
  v5 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1700950131, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v7);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendUInt32(), (_DWORD)appended)
    || (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v6),
        (_DWORD)appended))
  {
    v3 = appended;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v6, 744845938, &v5);
    if (SInt32)
      v3 = SInt32;
    else
      v3 = v5;
  }
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_EndPass(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t SInt32;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  cf = 0;
  v8 = 0;
  v9 = 0;
  v4 = VTParavirtualizationCreateMessageAndByteStream(1701146739, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v10);
  if ((_DWORD)v4
    || (v4 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v9), (_DWORD)v4)
    || (v4 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v9, 744845938, (_DWORD *)&v8 + 1), (_DWORD)v4))
  {
    v5 = v4;
  }
  else
  {
    v5 = HIDWORD(v8);
    if (!HIDWORD(v8))
    {
      SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v9, 744910962, &v8);
      v5 = SInt32;
      if (a2)
      {
        if (!(_DWORD)SInt32)
          *a2 = (_DWORD)v8 != 0;
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  return v5;
}

uint64_t ParavirtualizedVideoEncoder_StartTileSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  unsigned int SInt32;
  uint64_t v8;
  unsigned int v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  cf = 0;
  v11 = 0;
  v10 = 0;
  *(_QWORD *)(DerivedStorage + 8) = a2;
  appended = VTParavirtualizationCreateMessageAndByteStream(1702065267, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v12);
  if ((_DWORD)appended
    || a3 && (appended = VTParavirtualizationMessageAppendCFDictionary(v12, 744846192, a3), (_DWORD)appended)
    || (VTParavirtualizationMessageAppendVTInt32Size(),
        appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v11),
        (_DWORD)appended))
  {
    v8 = appended;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v11, 744845938, &v10);
    if (SInt32)
      v8 = SInt32;
    else
      v8 = v10;
  }
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  return v8;
}

uint64_t ParavirtualizedVideoEncoder_PrepareToEncodeTiles()
{
  uint64_t DerivedStorage;
  uint64_t appended;
  unsigned int SInt32;
  uint64_t v3;
  unsigned int v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  cf = 0;
  v6 = 0;
  v5 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1701868649, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v7);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendSInt32(), (_DWORD)appended)
    || (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v6),
        (_DWORD)appended))
  {
    v3 = appended;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v6, 744845938, &v5);
    if (SInt32)
      v3 = SInt32;
    else
      v3 = v5;
  }
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_EncodeTile(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  uint64_t v14;
  const __CFAllocator *v15;
  int64_t Count;
  const void **v17;
  const void **v18;
  const void **v19;
  uint64_t v20;
  const void *v21;
  char v22;
  const __CFDictionary *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  __CFDictionary *Mutable;
  __CFDictionary *v27;
  const __CFUUID *v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  __CFDictionary *v32;
  const void *v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  uint64_t SInt32;
  int v37;
  uint64_t v38;
  void *value;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  os_unfair_lock_s *lock;
  const void **v46;
  void *key;
  int v48;
  IOSurfaceRef IOSurface;
  CFTypeRef cf;
  CFTypeRef v51;
  CMBlockBufferRef v52;
  unsigned int v53;

  v53 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v51 = 0;
  v52 = 0;
  IOSurface = 0;
  cf = 0;
  v48 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1702127980, 1, DerivedStorage + 64, 0, &v52, &v51);
  if ((_DWORD)appended || (appended = VTParavirtualizationMessageAppendSInt64(), (_DWORD)appended))
  {
    v38 = appended;
    v29 = 0;
    goto LABEL_47;
  }
  if (!a3)
  {
    v29 = 0;
    goto LABEL_35;
  }
  v44 = a6;
  v42 = a1;
  v43 = a7;
  v14 = CMBaseObjectGetDerivedStorage();
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  key = (void *)FigCFNumberCreateSInt64();
  lock = (os_unfair_lock_s *)(v14 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 96));
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v14 + 104));
  v17 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  v18 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  v46 = v17;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v14 + 104), v17, v18);
  v19 = (const void **)MEMORY[0x1E0C9AE40];
  if (Count >= 1)
  {
    v41 = a2;
    v20 = 0;
    v21 = 0;
    value = (void *)*MEMORY[0x1E0C9AE40];
    v22 = 1;
    while (1)
    {
      while (1)
      {
        v23 = (const __CFDictionary *)v18[v20];
        if (CFDictionaryGetValue(v23, CFSTR("PVPixelBuffer")) == a3)
          break;
        if (Count == ++v20)
        {
          if ((v22 & 1) != 0)
          {
            a2 = v41;
            v19 = (const void **)MEMORY[0x1E0C9AE40];
            goto LABEL_18;
          }
LABEL_23:
          v30 = 0;
          a2 = v41;
          goto LABEL_24;
        }
      }
      v24 = (__CFDictionary *)CFDictionaryGetValue(v23, CFSTR("TilesDict"));
      if (!v24)
        break;
      v25 = v24;
      Mutable = CFDictionaryCreateMutable(v15, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        break;
      v27 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("EncodeTileDidComplete"), value);
      CFDictionarySetValue(v27, CFSTR("TileWasEmitted"), value);
      CFDictionarySetValue(v25, key, v27);
      v21 = CFRetain(v46[v20]);
      CFRelease(v27);
      v22 = 0;
      if (Count - 1 == v20++)
        goto LABEL_23;
    }
    FigSignalErrorAt();
    v29 = 0;
    v30 = 0;
    a2 = v41;
    goto LABEL_63;
  }
  v21 = 0;
LABEL_18:
  v30 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v30)
    goto LABEL_59;
  v31 = CFDictionaryCreateMutable(v15, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v31
    || (v32 = v31,
        v33 = *v19,
        CFDictionarySetValue(v31, CFSTR("EncodeTileDidComplete"), v33),
        CFDictionarySetValue(v32, CFSTR("TileWasEmitted"), v33),
        CFDictionarySetValue(v30, key, v32),
        (v21 = CFUUIDCreate(v15)) == 0)
    || (v34 = CFDictionaryCreateMutable(v15, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
LABEL_59:
    FigSignalErrorAt();
    v29 = 0;
LABEL_63:
    a1 = v42;
    a7 = v43;
    goto LABEL_25;
  }
  v35 = v34;
  CFDictionarySetValue(v34, CFSTR("PVPixelBuffer"), a3);
  CFDictionarySetValue(v35, CFSTR("TilesDict"), v30);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 104), v21, v35);
  CFRelease(v35);
  CFRelease(v32);
LABEL_24:
  a1 = v42;
  a7 = v43;
  CFDictionaryGetCount(*(CFDictionaryRef *)(v14 + 104));
  v29 = (const __CFUUID *)v21;
  v21 = 0;
LABEL_25:
  os_unfair_lock_unlock(lock);
  if (key)
    CFRelease(key);
  if (v21)
    CFRelease(v21);
  free(v46);
  free(v18);
  if (v30)
    CFRelease(v30);
  if (v29)
  {
    SInt32 = VTParavirtualizationMessageAppendCFUUID((uint64_t)v51, 745895273, v29);
    a6 = v44;
    if ((_DWORD)SInt32)
    {
LABEL_57:
      v38 = SInt32;
LABEL_47:
      VTEncoderSessionEmitEncodedTile(*(uint64_t **)(DerivedStorage + 8), a2, v38, 0, 0);
      goto LABEL_48;
    }
  }
  else
  {
    a6 = v44;
  }
LABEL_35:
  IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)a3);
  if (IOSurface)
  {
    SInt32 = VTParavirtualizationMessageAppendVTInt32Point();
    if ((_DWORD)SInt32)
      goto LABEL_57;
    SInt32 = VTParavirtualizationMessageAppendVTInt32Size();
    if ((_DWORD)SInt32)
      goto LABEL_57;
    if (a6)
    {
      SInt32 = VTParavirtualizationMessageAppendCFDictionary(v51, 745826672, a6);
      if ((_DWORD)SInt32)
        goto LABEL_57;
    }
    SInt32 = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(v52, (uint64_t)&IOSurface, 1, &cf);
    if ((_DWORD)SInt32)
      goto LABEL_57;
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v53);
    if ((_DWORD)SInt32)
      goto LABEL_57;
    SInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)cf, 744842860, &v48);
    if ((_DWORD)SInt32)
      goto LABEL_57;
    v37 = v48;
    SInt32 = paravirtualizedVideoEncoder_lookupRetainAndForgetPendingTilePixelBufferByUUID(a1, a2, 1, 0, v29);
    if ((_DWORD)SInt32)
      goto LABEL_57;
    v38 = v53;
    if (a7)
      *a7 = v37;
    if ((_DWORD)v38)
      goto LABEL_47;
  }
  else
  {
    v38 = FigSignalErrorAt();
    if ((_DWORD)v38)
      goto LABEL_47;
  }
LABEL_48:
  if (v52)
    CFRelease(v52);
  if (v51)
    CFRelease(v51);
  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
  return v38;
}

uint64_t ParavirtualizedVideoEncoder_CompleteTiles()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int SInt32;
  uint64_t v3;
  unsigned int v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  cf = 0;
  v6 = 0;
  v5 = 0;
  v1 = VTParavirtualizationCreateMessageAndByteStream(1701016681, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v7);
  if ((_DWORD)v1
    || (v1 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v6), (_DWORD)v1))
  {
    v3 = v1;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v6, 744845938, &v5);
    if (SInt32)
      v3 = SInt32;
    else
      v3 = v5;
  }
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_EncodeMultiImageFrame(uint64_t a1, const void *a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t **DerivedStorage;
  const __CFAllocator *v12;
  const CFArrayCallBacks *v13;
  __CFArray *Mutable;
  __CFArray *v15;
  __CFArray *v16;
  size_t Count;
  CFIndex v18;
  __CVBuffer *CVPixelBufferAtIndex;
  IOSurfaceRef IOSurface;
  CMTagCollectionRef TagCollectionAtIndex;
  CMTagCollectionRef v22;
  CFUUIDRef v23;
  CFIndex v24;
  const void *ValueAtIndex;
  const void *v26;
  uint64_t v27;
  uint64_t appended;
  OpaqueCMBlockBuffer *v29;
  CFIndex v30;
  int v31;
  uint64_t v32;
  _DWORD *v34;
  const void *v36;
  uint64_t **v37;
  _QWORD *v38;
  int v39;
  CFTypeRef v40;
  CFTypeRef cf;
  CMBlockBufferRef v42;
  unsigned int v43;

  v43 = 0;
  DerivedStorage = (uint64_t **)CMBaseObjectGetDerivedStorage();
  v42 = 0;
  v40 = 0;
  cf = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v15 = CFArrayCreateMutable(v12, 0, v13);
  v16 = CFArrayCreateMutable(v12, 0, v13);
  Count = CMTaggedBufferGroupGetCount(a3);
  v38 = malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  v39 = 0;
  if (CMTaggedBufferGroupGetCount(a3) <= 0 || !Mutable || !v15 || !v16 || !v38)
  {
    v32 = FigSignalErrorAt();
    goto LABEL_31;
  }
  v34 = a7;
  v36 = a2;
  v37 = DerivedStorage;
  if (CMTaggedBufferGroupGetCount(a3) >= 1)
  {
    v18 = 0;
    while (1)
    {
      CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      IOSurface = CVPixelBufferGetIOSurface(CVPixelBufferAtIndex);
      TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(a3, v18);
      if (!IOSurface)
        break;
      v22 = TagCollectionAtIndex;
      v38[v18] = IOSurface;
      if (CVPixelBufferAtIndex)
      {
        v23 = CFUUIDCreate(v12);
        CFArrayAppendValue(v15, v23);
        CFArrayAppendValue(Mutable, CVPixelBufferAtIndex);
        if (v23)
          CFRelease(v23);
      }
      if (!v22)
        break;
      CFArrayAppendValue(v16, v22);
      if (++v18 >= CMTaggedBufferGroupGetCount(a3))
        goto LABEL_14;
    }
    v32 = FigSignalErrorAt();
    a2 = v36;
    DerivedStorage = v37;
LABEL_31:
    if (!(_DWORD)v32)
      goto LABEL_33;
    goto LABEL_32;
  }
LABEL_14:
  if (CFArrayGetCount(v15) >= 1)
  {
    v24 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v15, v24);
      v26 = CFArrayGetValueAtIndex(Mutable, v24);
      paravirtualizedVideoEncoder_rememberPendingFramePixelBufferAndUUID(a1, ValueAtIndex, v26);
      ++v24;
    }
    while (v24 < CFArrayGetCount(v15));
  }
  DerivedStorage = v37;
  v27 = VTParavirtualizationCreateMessageAndByteStream(1701669222, 1, (uint64_t)(v37 + 8), 0, &v42, &cf);
  if ((_DWORD)v27)
  {
    v32 = v27;
    a2 = v36;
  }
  else
  {
    a2 = v36;
    appended = VTParavirtualizationMessageAppendSInt64();
    if (!(_DWORD)appended)
    {
      appended = VTParavirtualizationMessageAppendCMTime();
      if (!(_DWORD)appended)
      {
        appended = VTParavirtualizationMessageAppendCMTime();
        if (!(_DWORD)appended)
        {
          if (!a6 || (appended = VTParavirtualizationMessageAppendCFDictionary(cf, 744910962, a6), !(_DWORD)appended))
          {
            appended = VTParavirtualizationMessageAppendCFUUIDArray((uint64_t)cf, 745892139, v15);
            if (!(_DWORD)appended)
            {
              appended = VTParavirtualizationMessageAppendFigTagCollectionArray((uint64_t)cf, 745825067, v16);
              if (!(_DWORD)appended)
              {
                v29 = v42;
                v30 = CFArrayGetCount(Mutable);
                appended = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(v29, (uint64_t)v38, v30, &v40);
                if (!(_DWORD)appended)
                {
                  appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v40, 744845938, &v43);
                  if (!(_DWORD)appended)
                  {
                    appended = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v40, 745107046, &v39);
                    if (!(_DWORD)appended)
                    {
                      v31 = v39;
                      appended = paravirtualizedVideoEncoder_forgetPendingFramePixelBuffersByUUIDs(a1, 1, 0, v15);
                      if (!(_DWORD)appended)
                      {
                        v32 = v43;
                        if (v34)
                          *v34 = v31;
                        goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v32 = appended;
  }
LABEL_32:
  VTEncoderSessionEmitEncodedFrame(*DerivedStorage, a2, v32, 0, 0);
LABEL_33:
  if (v42)
    CFRelease(v42);
  if (cf)
    CFRelease(cf);
  if (v40)
    CFRelease(v40);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  if (Mutable)
    CFRelease(Mutable);
  free(v38);
  return v32;
}

void paravirtualizedVideoEncoder_rememberPendingFramePixelBufferAndUUID(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 84));
  CFDictionarySetValue(Mutable, CFSTR("PVPixelBuffer"), a3);
  v7 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("PVEncodeFrameDidComplete"), (const void *)*MEMORY[0x1E0C9AE40]);
  CFDictionarySetValue(Mutable, CFSTR("PVFrameWasEmitted"), v7);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), a2, Mutable);
  CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 88));
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 84));
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t VTHDRPerFrameMetadataGenerationSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTHDRPerFrameMetadataGenerationSessionGetTypeID_sRegisterVTHDRPerFrameMetadataGenerationSessionOnce, RegisterVTHDRPerFrameMetadataGenerationSession);
  return sVTHDRPerFrameMetadataGenerationSessionID;
}

uint64_t RegisterVTHDRPerFrameMetadataGenerationSession()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTHDRPerFrameMetadataGenerationSessionID = result;
  return result;
}

uint64_t VTHDRPerFrameMetadataGenerationSessionCreate(uint64_t a1, float a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  if (!a4)
    return 4294954394;
  if (a2 <= 0.0)
    return FigSignalErrorAt();
  MEMORY[0x1940281CC](&VTHDRPerFrameMetadataGenerationSessionGetTypeID_sRegisterVTHDRPerFrameMetadataGenerationSessionOnce, RegisterVTHDRPerFrameMetadataGenerationSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294954392;
  v8 = Instance;
  *(_BYTE *)(Instance + 17) = 1;
  *(float *)(Instance + 20) = a2;
  FigCFDictionaryGetValue();
  result = FigCFArrayContainsValue();
  *(_BYTE *)(v8 + 24) = result;
  if ((_DWORD)result)
  {
    result = VTHDRMetadataGenerationSessionCreate(a1, 4, 0, &v10);
    *(_QWORD *)(v8 + 32) = v10;
  }
  *a4 = v8;
  return result;
}

uint64_t VTHDRPerFrameMetadataGenerationSessionAttachMetadata(uint64_t a1, CVBufferRef buffer, int a3)
{
  CFTypeRef v6;
  const void *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Statistics;
  uint64_t DataFromStatistics;
  _OWORD v14[7];
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v15 = 0;
  memset(v14, 0, 108);
  if (!buffer)
  {
    DataFromStatistics = FigSignalErrorAt();
    goto LABEL_19;
  }
  v6 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  v7 = v6;
  if (v6 && *(_BYTE *)(a1 + 17))
  {
    *(_BYTE *)(a1 + 17) = 0;
    *(_QWORD *)(a1 + 48) = CFRetain(v6);
  }
  else if (!FigCFEqual())
  {
    Statistics = FigSignalErrorAt();
LABEL_24:
    DataFromStatistics = Statistics;
    goto LABEL_17;
  }
  if (!FigCFEqual() && !FigCFEqual() || !FigCFEqual() || !*(_BYTE *)(a1 + 24))
  {
    DataFromStatistics = 0;
    goto LABEL_17;
  }
  v8 = (const __CFString *)*MEMORY[0x1E0CA8DC0];
  CVBufferRemoveAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8DC0]);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
LABEL_13:
    Statistics = VTHDRImageStatisticsGenerationSessionCreateStatistics(v9, buffer, (float *)&v17 + 1, (float *)&v17, (float *)&v16 + 1, (float *)&v16);
    if (!(_DWORD)Statistics)
    {
      DataFromStatistics = VTHDRMetadataGenerationSessionCreateDataFromStatistics(*(_QWORD *)(a1 + 32), 0, 1, (uint64_t)v14, a3);
      if (!(_DWORD)DataFromStatistics)
        CVBufferSetAttachment(buffer, v8, v15, kCVAttachmentMode_ShouldPropagate);
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  v10 = VTHDRImageStatisticsGenerationSessionCreate(*(_QWORD *)(a1 + 56), 0, (uint64_t *)(a1 + 40));
  if (!(_DWORD)v10)
  {
    v9 = *(_QWORD *)(a1 + 40);
    goto LABEL_13;
  }
  DataFromStatistics = v10;
  FigSignalErrorAt();
LABEL_17:
  if (v7)
    CFRelease(v7);
LABEL_19:
  if (v15)
    CFRelease(v15);
  return DataFromStatistics;
}

void VTHDRPerFrameMetadataGenerationSessionInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x73E0uLL);
}

void VTHDRPerFrameMetadataGenerationSessionFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
}

CFTypeRef VTHDRPerFrameMetadataGenerationSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTHDRPerFrameMetadataGenerationSession]"));
}

__CFString *VTHDRPerFrameMetadataGenerationSessionCopyDebugDesc(unsigned __int8 *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTHDRPerFrameMetadataGenerationSession %p [%p]>{invalid:%d, }"), a1, v4, a1[16]);
  return Mutable;
}

uint64_t VTAvoidHardwarePixelTransfer()
{
  return sVTAvoidHardwarePixelTransfer;
}

uint64_t VTAvoidIOSurfaceBackings()
{
  return sVTAvoidIOSurfaceBackings;
}

uint64_t VTAvoidHardwareDecoders()
{
  return sVTAvoidHardwareDecoders;
}

uint64_t VTAvoidHardwareJPEGDecoders()
{
  return 0;
}

uint64_t VTShouldRunVideoDecodersInProcess()
{
  if (VTShouldRunVideoDecodersInProcess_entitlementCheckOnce != -1)
    dispatch_once(&VTShouldRunVideoDecodersInProcess_entitlementCheckOnce, &__block_literal_global_4);
  return sVTRunVideoDecodersInProcess;
}

uint64_t currentProcessHasTrueBooleanEntitlement(const __CFString *a1)
{
  __SecTask *v2;
  __SecTask *v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  CFTypeID v6;
  uint64_t Value;
  CFErrorRef error;

  error = 0;
  v2 = SecTaskCreateFromSelf(0);
  if (v2)
  {
    v3 = v2;
    v4 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v2, a1, &error);
    if (v4)
    {
      v5 = v4;
      v6 = CFGetTypeID(v4);
      if (v6 == CFBooleanGetTypeID())
        Value = CFBooleanGetValue(v5);
      else
        Value = 0;
      CFRelease(v5);
    }
    else
    {
      Value = 0;
    }
    if (error)
      CFRelease(error);
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return Value;
}

uint64_t VTShouldRunVideoEncodersInProcess()
{
  if (VTShouldRunVideoEncodersInProcess_entitlementCheckOnce != -1)
    dispatch_once(&VTShouldRunVideoEncodersInProcess_entitlementCheckOnce, &__block_literal_global_5);
  return sVTRunVideoEncodersInProcess;
}

uint64_t VTAvoidHardwareEncoders()
{
  return sVTAvoidHardwareEncoders;
}

uint64_t VTGetAllowedDecoderList()
{
  return sVTAllowedDecoderList;
}

uint64_t VTRestrictVideoDecoders(unsigned int a1, unsigned int *a2, CFIndex a3)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  unsigned int v9;
  CFStringRef v10;
  CFStringRef v11;
  int v12;
  UInt8 bytes[4];

  if (!VTHasVideoDecoderRegistryBeenCreated()
    && (a1 & 1) != 0
    && (a1 & 2) != 0
    && (a1 & 4) != 0
    && (a1 & 8) != 0
    && !sVTAllowedDecoderList
    && !VTRestrictVideoDecoders_sVTVideoDecoderRestrictionFlags)
  {
    if ((sVTRunVideoDecodersInProcess & 1) != 0
      || (sVTAvoidHardwareDecoders & 1) != 0
      || (sVTAvoidIOSurfaceBackings & 1) != 0
      || (sVTAvoidHardwarePixelTransfer & 1) != 0
      || (sVTRunVideoEncodersInProcess & 1) != 0
      || sVTAvoidHardwareEncoders == 1)
    {
      FigSignalErrorAt();
    }
    else if ((a1 & 0x40) == 0 || a3)
    {
      if (a2)
      {
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, MEMORY[0x1E0C9B378]);
        if (!Mutable)
          return 0;
        v8 = Mutable;
        if (a3 >= 1)
        {
          do
          {
            v9 = *a2++;
            *(_DWORD *)bytes = bswap32(v9);
            v10 = CFStringCreateWithBytes(v6, bytes, 4, 0x600u, 0);
            if (!v10)
              return 0;
            v11 = v10;
            CFArrayAppendValue(v8, v10);
            CFRelease(v11);
          }
          while (--a3);
        }
        sVTAllowedDecoderList = (uint64_t)v8;
        v12 = VTRestrictVideoDecoders_sVTVideoDecoderRestrictionFlags;
      }
      else
      {
        v12 = 0;
      }
      VTRestrictVideoDecoders_sVTVideoDecoderRestrictionFlags = v12 | a1;
      VTSetVideoDecoderRestrictions(v12 | a1);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t VTSetVideoDecoderRestrictions(uint64_t result)
{
  if ((result & 8) != 0)
  {
    sVTAvoidHardwarePixelTransfer = 1;
    if ((result & 4) == 0)
    {
LABEL_3:
      if ((result & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((result & 4) == 0)
  {
    goto LABEL_3;
  }
  sVTAvoidIOSurfaceBackings = 1;
  if ((result & 2) == 0)
  {
LABEL_4:
    if ((result & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  sVTAvoidHardwareDecoders = 1;
  if ((result & 1) == 0)
  {
LABEL_5:
    if ((result & 0x40) == 0)
      return result;
LABEL_11:
    sVTShouldRegisterLimitedSystemDecodersOnlyAndWithoutValidation = 1;
    return result;
  }
LABEL_10:
  sVTRunVideoDecodersInProcess = 1;
  if ((result & 0x40) != 0)
    goto LABEL_11;
  return result;
}

uint64_t VTAreVideoDecodersRunningInProcess()
{
  return sVTRunVideoDecodersInProcess;
}

uint64_t VTApplyRestrictions(uint64_t a1)
{
  if (VTHasVideoDecoderRegistryBeenCreated() || VTHasVideoEncoderRegistryBeenCreated())
    return FigSignalErrorAt();
  VTSetVideoDecoderRestrictions(a1);
  if ((a1 & 0x10) != 0)
    sVTRunVideoEncodersInProcess = 1;
  if ((a1 & 0x20) != 0)
    sVTAvoidHardwareEncoders = 1;
  return 0;
}

uint64_t VTTestMode(int a1)
{
  uint64_t result;

  result = os_variant_has_internal_content();
  if (!(_DWORD)result)
    goto LABEL_11;
  if (a1 > 825828465)
  {
    if (a1 == 825828466)
    {
      sVTRunVideoDecodersInProcess = 0;
    }
    else
    {
      if (a1 != 1193481106)
        goto LABEL_11;
      sVTRunVideoEncodersInProcess = 0;
    }
  }
  else
  {
    if (a1 != 658674451)
    {
      if (a1 == 691090036)
      {
        sVTRunVideoEncodersInProcess = 1;
        return result;
      }
LABEL_11:
      abort();
    }
    sVTRunVideoDecodersInProcess = 1;
  }
  return result;
}

double dsrxpc_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 256) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void dsrxpc_Finalize(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  VTDecompressionSessionRemoteXPC_Invalidate((uint64_t)a1);
  v2 = a1[15];
  if (v2)
  {
    dispatch_release(v2);
    a1[15] = 0;
  }
  v3 = a1[16];
  if (v3)
  {
    dispatch_release(v3);
    a1[16] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  FigSimpleMutexDestroy();
  a1[6] = 0;
  FigSemaphoreDestroy();
  a1[7] = 0;
  FigSemaphoreDestroy();
  a1[9] = 0;
  FigSemaphoreDestroy();
  a1[11] = 0;
  FigSemaphoreDestroy();
  a1[13] = 0;
  FigSimpleMutexDestroy();
  a1[17] = 0;
  v5 = (const void *)a1[19];
  if (v5)
  {
    CFRelease(v5);
    a1[19] = 0;
  }
  v6 = (const void *)a1[30];
  if (v6)
  {
    CFRelease(v6);
    a1[30] = 0;
  }
  v7 = (const void *)a1[26];
  if (v7)
  {
    CFRelease(v7);
    a1[26] = 0;
  }
  v8 = (const void *)a1[18];
  if (v8)
  {
    CFRelease(v8);
    a1[18] = 0;
  }
  v9 = (const void *)a1[21];
  if (v9)
  {
    CFRelease(v9);
    a1[21] = 0;
  }
  v10 = (const void *)a1[20];
  if (v10)
  {
    CFRelease(v10);
    a1[20] = 0;
  }
  v11 = (const void *)a1[31];
  if (v11)
  {
    CFRelease(v11);
    a1[31] = 0;
  }
  v12 = (const void *)a1[32];
  if (v12)
  {
    CFRelease(v12);
    a1[32] = 0;
  }
}

CFStringRef dsrxpc_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VTDecompressionSessionXPCRemote %p] [objId = %016llx] "), a1, *(_QWORD *)(a1 + 16));
}

uint64_t VTDecompressionSessionRemoteXPC_Create(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, _OWORD *a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t NewSession;
  pid_t v16;
  __CFDictionary *MutableCopy;
  __CFDictionary *v18;
  __CFDictionary *v19;
  uint64_t v20;
  uint64_t uint64;
  uint64_t started;
  uint64_t v23;
  CFTypeRef cf;
  _OWORD buffer[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  cf = 0;
  memset(buffer, 0, sizeof(buffer));
  if (!a1)
  {
    NewSession = FigSignalErrorAt();
LABEL_31:
    v23 = NewSession;
    goto LABEL_32;
  }
  NewSession = dsrxpc_oneTimeInitialization();
  if ((_DWORD)NewSession)
    goto LABEL_31;
  NewSession = dsrxpc_copyPixelBufferRecipient(0);
  if ((_DWORD)NewSession)
    goto LABEL_31;
  NewSession = FigXPCRemoteClientCopyMemoryOrigin();
  if ((_DWORD)NewSession)
    goto LABEL_31;
  NewSession = FigXPCRemoteClientCopyMemoryRecipient();
  if ((_DWORD)NewSession)
    goto LABEL_31;
  NewSession = dsrxpc_CreateNewSession(a1, 0, a2, (uint64_t *)&cf);
  if ((_DWORD)NewSession)
    goto LABEL_31;
  if (a6)
    *((_OWORD *)cf + 11) = *a6;
  NewSession = FigXPCCreateBasicMessage();
  if ((_DWORD)NewSession)
    goto LABEL_31;
  v16 = getpid();
  proc_name(v16, buffer, 0x20u);
  xpc_dictionary_set_string(0, (const char *)*MEMORY[0x1E0CA36B8], (const char *)buffer);
  NewSession = FigXPCMessageSetFormatDescription();
  if ((_DWORD)NewSession)
    goto LABEL_31;
  if (!a4)
  {
    v19 = 0;
    goto LABEL_18;
  }
  if (CFDictionaryContainsKey(a4, CFSTR("CMSession")))
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a4);
    if (MutableCopy)
    {
      v18 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, CFSTR("CMSession"));
      v19 = v18;
      goto LABEL_17;
    }
    v23 = 0;
LABEL_32:
    v19 = 0;
    goto LABEL_33;
  }
  v19 = 0;
LABEL_17:
  v20 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v20)
  {
LABEL_29:
    v23 = v20;
    goto LABEL_33;
  }
LABEL_18:
  if (a7)
  {
    v20 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v20)
      goto LABEL_29;
  }
  if (a5)
  {
    v20 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v20)
      goto LABEL_29;
  }
  if (FigServer_IsServerProcess())
    xpc_dictionary_set_BOOL(0, "ClientNeverSuspends", 1);
  v20 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v20)
    goto LABEL_29;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  *((_QWORD *)cf + 2) = uint64;
  v20 = FigXPCRemoteClientAssociateObject();
  if ((_DWORD)v20)
    goto LABEL_29;
  started = FigStartMonitoringMediaServicesProcessDeath();
  v23 = started;
  if (a8 && !(_DWORD)started)
  {
    *a8 = cf;
    cf = 0;
    goto LABEL_35;
  }
LABEL_33:
  if (cf)
    CFRelease(cf);
LABEL_35:
  if (v19)
    CFRelease(v19);
  FigXPCRelease();
  FigXPCRelease();
  return v23;
}

uint64_t dsrxpc_oneTimeInitialization()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __dsrxpc_oneTimeInitialization_block_invoke;
  block[3] = &unk_1E2F62570;
  block[4] = &v3;
  if (dsrxpc_oneTimeInitialization_once != -1)
    dispatch_once(&dsrxpc_oneTimeInitialization_once, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t dsrxpc_copyPixelBufferRecipient(CFTypeRef *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t updated;

  v2 = MEMORY[0x1940280C4](gPixelBufferRecipientLock);
  if ((_DWORD)v2)
  {
    v4 = v2;
    goto LABEL_13;
  }
  v3 = (const void *)gPixelBufferRecipient;
  if (!gPixelBufferRecipient)
  {
    updated = FigXPCCreateBasicMessage();
    if ((_DWORD)updated
      || (updated = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)updated)
      || (updated = FigXPCCreateBasicMessage(), (_DWORD)updated)
      || (updated = FigPixelBufferRecipientCreateWithXPCMessage1AndUpdateXPCMessage2(), (_DWORD)updated)
      || (updated = FigXPCRemoteClientSendSyncMessage(), (_DWORD)updated))
    {
      v4 = updated;
      goto LABEL_12;
    }
    v3 = 0;
    gPixelBufferRecipient = 0;
    if (a1)
      goto LABEL_4;
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  if (!a1)
    goto LABEL_11;
LABEL_4:
  v4 = 0;
  *a1 = CFRetain(v3);
LABEL_12:
  MEMORY[0x1940280D0](gPixelBufferRecipientLock);
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t dsrxpc_CreateNewSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (!a4)
    return FigSignalErrorAt();
  if (VTDecompressionSessionXPCRemoteGetTypeID_once != -1)
    dispatch_once(&VTDecompressionSessionXPCRemoteGetTypeID_once, &__block_literal_global_5);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v8 = Instance;
  if ((a1 != 0) == (a2 != 0))
  {
    v12 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v8);
    return v12;
  }
  else
  {
    if (a1 | a2)
      *(_QWORD *)(Instance + 160) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_WORD *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 28) = 0;
    *(_QWORD *)(v8 + 120) = dispatch_group_create();
    *(_QWORD *)(v8 + 128) = dispatch_queue_create("com.apple.coremedia.decompressionsession.clientcallbackret", 0);
    *(_QWORD *)(v8 + 32) = 1;
    *(_QWORD *)(v8 + 56) = FigSemaphoreCreate();
    v9 = FigSemaphoreCreate();
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = v9;
    *(_DWORD *)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 208) = 0;
    *(_QWORD *)(v8 + 40) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(v8 + 48) = FigSimpleMutexCreate();
    v10 = FigSimpleMutexCreate();
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = v10;
    *(_QWORD *)(v8 + 88) = FigSemaphoreCreate();
    *(_DWORD *)(v8 + 96) = 0;
    *(_QWORD *)(v8 + 104) = FigSemaphoreCreate();
    *(_DWORD *)(v8 + 112) = 0;
    *a4 = v8;
    return 0;
  }
}

uint64_t VTTileDecompressionSessionRemoteXPC_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTypeRef *a7)
{
  uint64_t NewSession;
  _QWORD *v14;
  pid_t v15;
  uint64_t uint64;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef cf;
  _OWORD buffer[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  cf = 0;
  memset(buffer, 0, sizeof(buffer));
  NewSession = dsrxpc_oneTimeInitialization();
  if ((_DWORD)NewSession)
    goto LABEL_14;
  NewSession = dsrxpc_copyPixelBufferRecipient(0);
  if ((_DWORD)NewSession)
    goto LABEL_14;
  NewSession = dsrxpc_CreateNewSession(0, a1, a2, (uint64_t *)&cf);
  if ((_DWORD)NewSession)
    goto LABEL_14;
  v14 = cf;
  *((_QWORD *)cf + 28) = a6;
  v14[29] = a5;
  NewSession = FigXPCCreateBasicMessage();
  if ((_DWORD)NewSession)
    goto LABEL_14;
  v15 = getpid();
  proc_name(v15, buffer, 0x20u);
  xpc_dictionary_set_string(0, (const char *)*MEMORY[0x1E0CA36B8], (const char *)buffer);
  NewSession = FigXPCMessageSetFormatDescription();
  if ((_DWORD)NewSession)
    goto LABEL_14;
  if (a4)
  {
    NewSession = FigXPCMessageSetCFDictionary();
    if ((_DWORD)NewSession)
      goto LABEL_14;
  }
  if (FigServer_IsServerProcess())
    xpc_dictionary_set_BOOL(0, "ClientNeverSuspends", 1);
  NewSession = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)NewSession)
  {
LABEL_14:
    v18 = NewSession;
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
    *((_QWORD *)cf + 2) = uint64;
    v17 = FigXPCRemoteClientAssociateObject();
    v18 = v17;
    if (a7 && !(_DWORD)v17)
    {
      *a7 = cf;
      cf = 0;
      goto LABEL_17;
    }
  }
  if (cf)
    CFRelease(cf);
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  return v18;
}

uint64_t VTDecompressionSessionRemoteXPC_DecodeFrame(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  return dsrxpc_DecodeFrameCommon(a1, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t dsrxpc_DecodeFrameCommon(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6, const void *a7, const void *a8)
{
  uint64_t v15;
  CMItemCount NumSamples;
  uint64_t *v17;
  __CFArray *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unsigned int v27;
  CMTime v29;
  CFTypeRef v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  xpc_object_t v35;

  v35 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 0;
  v30 = 0;
  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    v21 = FigSignalErrorAt();
    v17 = 0;
    goto LABEL_13;
  }
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 48));
  v15 = *(_QWORD *)(a1 + 32);
  NumSamples = CMSampleBufferGetNumSamples(a2);
  CMSampleBufferGetOutputPresentationTimeStamp(&v29, a2);
  v17 = (uint64_t *)DSRXPC_PendingFrameInfoCreate(v15, a5, a7, a8, NumSamples, (__int128 *)&v29.value);
  if (!v17)
  {
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
    v21 = FigSignalErrorAt();
LABEL_13:
    v23 = 1;
    goto LABEL_39;
  }
  v18 = *(__CFArray **)(a1 + 40);
  ++*(_QWORD *)(a1 + 32);
  CFArrayAppendValue(v18, v17);
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
  v19 = FigXPCRemoteClientCopyMemoryOrigin();
  if (v19)
    goto LABEL_44;
  if (!*(_QWORD *)(a1 + 248))
    goto LABEL_14;
  if (!*(_QWORD *)(a1 + 256))
    *(_QWORD *)(a1 + 256) = FigCopyCommonMemoryPool();
  v20 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
  v21 = v20;
  if (!(_DWORD)v20)
  {
    v22 = 0;
    goto LABEL_30;
  }
  if ((_DWORD)v20 != -19428)
  {
LABEL_14:
    v19 = FigXPCCreateBasicMessage();
    if (!v19)
    {
      if (dsrxpc_sampleBufferAttachmentsKeysToDrop_onceToken != -1)
        dispatch_once(&dsrxpc_sampleBufferAttachmentsKeysToDrop_onceToken, &__block_literal_global_15);
      v19 = FigXPCMessageAddCMSampleBufferForPID();
      if (!v19)
      {
        xpc_dictionary_set_uint64(v35, "FrameRefCon", v17[2]);
        xpc_dictionary_set_uint64(v35, "DecoderFlags", a3);
        if (a8)
          xpc_dictionary_set_BOOL(v35, "RequiresMultiImageOutputHandler", 1);
        v19 = FigXPCMessageSetCFDictionary();
        if (!v19)
        {
          v19 = FigXPCRemoteClientSendSyncMessage();
          if (!v19)
          {
            if (!*(_BYTE *)(a1 + 25))
            {
              v24 = 1;
              do
              {
                if (*(_DWORD *)(a1 + 28))
                  break;
                if (FigSemaphoreWaitRelative() != -12792)
                  break;
                v24 *= 2;
              }
              while (!*(_BYTE *)(a1 + 25));
            }
            v21 = *(unsigned int *)(a1 + 64);
            *((_DWORD *)v32 + 6) = *(_DWORD *)(a1 + 68);
            v22 = v21 != 0;
            goto LABEL_30;
          }
        }
      }
    }
LABEL_44:
    v27 = v19;
    v25 = (_QWORD *)a1;
    v26 = (uint64_t *)v17;
    goto LABEL_36;
  }
  FigOSEventLinkRemoteInvalidate();
  v21 = 4294947868;
  v22 = 1;
LABEL_30:
  *(_QWORD *)(a1 + 64) = 0;
  if (a6)
    *a6 = *((_DWORD *)v32 + 6);
  if ((a3 & 1) != 0 && !v22)
  {
    v23 = 0;
    goto LABEL_39;
  }
  v25 = (_QWORD *)a1;
  v26 = (uint64_t *)v17;
  v27 = v21;
LABEL_36:
  dsrxpc_emitPendingFramesForOneSampleWithError(v25, v26, v27);
  if ((a3 & 1) == 0)
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
  v23 = 0;
  v21 = 0;
LABEL_39:
  if (v30)
    CFRelease(v30);
  FigXPCRelease();
  if ((v23 & 1) == 0)
    CFRelease(v17);
  _Block_object_dispose(&v31, 8);
  return v21;
}

uint64_t VTDecompressionSessionRemoteXPC_DecodeFrameWithOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, _DWORD *a5, unint64_t a6, unint64_t a7)
{
  if (a6 | a7)
    return dsrxpc_DecodeFrameCommon(a1, a2, a3, a4, 0, a5, (const void *)a6, (const void *)a7);
  else
    return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionRemoteXPC_DecodeTile(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v17;
  uint64_t *v18;
  CFTypeRef v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  const void *v27;
  unsigned int v28;
  uint64_t v30;
  CMTime v31;
  CFTypeRef cf;
  xpc_object_t xdict;

  cf = 0;
  xdict = 0;
  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    v20 = FigSignalErrorAt();
    v18 = 0;
    goto LABEL_8;
  }
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 48));
  v17 = *(_QWORD *)(a1 + 32);
  CMSampleBufferGetOutputPresentationTimeStamp(&v31, a2);
  v18 = (uint64_t *)DSRXPC_PendingFrameInfoCreate(v17, a8, 0, 0, 1, (__int128 *)&v31.value);
  if (!v18)
  {
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
    v20 = FigSignalErrorAt();
LABEL_8:
    v21 = 1;
    goto LABEL_28;
  }
  ++*(_QWORD *)(a1 + 32);
  if (a5)
    v19 = CFRetain(a5);
  else
    v19 = 0;
  v18[11] = (uint64_t)v19;
  v18[12] = a3;
  v18[13] = a4;
  v18[14] = a6;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v18);
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
  v22 = FigXPCCreateBasicMessage();
  if (v22)
  {
    v28 = v22;
    v24 = a7;
    goto LABEL_25;
  }
  v23 = FigXPCRemoteClientCopyMemoryOrigin();
  v24 = a7;
  if (!v23)
  {
    v23 = VTAddCMSampleBufferToXPCMessage();
    if (!v23)
    {
      if (FigCFEqual())
        goto LABEL_19;
      IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)a5);
      if (IOSurface)
      {
        XPCObject = IOSurfaceCreateXPCObject(IOSurface);
        xpc_dictionary_set_value(xdict, "CanvasioSurface", XPCObject);
        FigXPCRelease();
        v27 = *(const void **)(a1 + 208);
        *(_QWORD *)(a1 + 208) = a5;
        if (a5)
          CFRetain(a5);
        if (v27)
          CFRelease(v27);
LABEL_19:
        xpc_dictionary_set_uint64(xdict, "FrameRefCon", v18[2]);
        xpc_dictionary_set_uint64(xdict, "DecoderFlags", a7);
        xpc_dictionary_set_uint64(xdict, "TileCropOffsetXY", (a3 << 32) | (a3 >> 32));
        xpc_dictionary_set_uint64(xdict, "TileCropDimensionWH", (a4 << 32) | (a4 >> 32));
        xpc_dictionary_set_uint64(xdict, "OffsetInImageBufferXY", (a6 << 32) | (a6 >> 32));
        v23 = FigXPCRemoteClientSendSyncMessage();
        if (!v23)
        {
          if (!*(_BYTE *)(a1 + 25))
          {
            v30 = 1;
            do
            {
              if (*(_DWORD *)(a1 + 28))
                break;
              if (FigSemaphoreWaitRelative() != -12792)
                break;
              v30 *= 2;
            }
            while (!*(_BYTE *)(a1 + 25));
          }
          v28 = *(_DWORD *)(a1 + 64);
          if (a9)
            *a9 = *(_DWORD *)(a1 + 68);
          *(_QWORD *)(a1 + 64) = 0;
          if ((a7 & 1) != 0 && !v28)
            goto LABEL_27;
          goto LABEL_25;
        }
        goto LABEL_41;
      }
      v23 = FigSignalErrorAt();
    }
  }
LABEL_41:
  v28 = v23;
LABEL_25:
  dsrxpc_emitPendingFramesForOneSampleWithError((_QWORD *)a1, (uint64_t *)v18, v28);
  if ((v24 & 1) == 0)
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
LABEL_27:
  v21 = 0;
  v20 = 0;
LABEL_28:
  if (cf)
    CFRelease(cf);
  FigXPCRelease();
  if ((v21 & 1) == 0)
    CFRelease(v18);
  return v20;
}

uint64_t DSRXPC_PendingFrameInfoCreate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, __int128 *a6)
{
  uint64_t Instance;
  __int128 v13;

  if (DSRXPC_PendingFrameInfoGetTypeID_once != -1)
    dispatch_once(&DSRXPC_PendingFrameInfoGetTypeID_once, &__block_literal_global_18);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = a1;
  *(_QWORD *)(Instance + 24) = a2;
  *(_QWORD *)(Instance + 48) = _Block_copy(a3);
  *(_QWORD *)(Instance + 56) = _Block_copy(a4);
  *(_QWORD *)(Instance + 32) = a5;
  *(_QWORD *)(Instance + 40) = a5;
  v13 = *a6;
  *(_QWORD *)(Instance + 80) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(Instance + 64) = v13;
  return Instance;
}

uint64_t dsrxpc_emitPendingFramesForOneSampleWithError(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t result;
  __int128 *v7;
  void (*v8)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, __int128 *);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *);
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (a3)
    v5 = a3;
  else
    v5 = 4294954385;
  result = dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit((uint64_t)a1, a2[2]);
  if ((_DWORD)result)
  {
    v7 = (__int128 *)MEMORY[0x1E0CA2E18];
    do
    {
      v8 = (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1[29];
      if (v8)
      {
        v8(a1[28], a2[3], a2[12], a2[13], a2[11], a2[14], v5, 2);
      }
      else
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))a1[24];
        if (v9)
        {
          v10 = a1[25];
        }
        else
        {
          v12 = a2[7];
          if (v12)
          {
            v13 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, __int128 *))(v12 + 16);
            v18 = *v7;
            v19 = *((_QWORD *)v7 + 2);
            v16 = v18;
            v17 = v19;
            v13(v12, v5, 2, 0, 0, &v18, &v16);
            goto LABEL_13;
          }
          v9 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))a1[22];
          if (!v9)
          {
            v14 = a2[6];
            if (v14)
            {
              v15 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))(v14 + 16);
              v18 = *v7;
              v19 = *((_QWORD *)v7 + 2);
              v16 = v18;
              v17 = v19;
              v15(v14, v5, 2, 0, &v18, &v16);
            }
            goto LABEL_13;
          }
          v10 = a1[23];
        }
        v11 = a2[3];
        v18 = *v7;
        v19 = *((_QWORD *)v7 + 2);
        v16 = v18;
        v17 = v19;
        v9(v10, v11, v5, 2, 0, &v18, &v16);
      }
LABEL_13:
      dsrxpc_decrementPendingFrameInfoOutstandingSampleCount((uint64_t)a1, a2[2]);
      result = dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit((uint64_t)a1, a2[2]);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t VTDecompressionSessionRemoteXPC_CopySupportedPropertyDictionary(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
    return FigSignalErrorAt();
  else
    return dsrxpc_copyDictionary();
}

uint64_t dsrxpc_copyDictionary()
{
  uint64_t v0;
  uint64_t v1;

  v0 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v0)
  {
    v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v0)
      v0 = FigXPCMessageCopyCFDictionary();
  }
  v1 = v0;
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t VTDecompressionSessionRemoteXPC_CopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
    return FigSignalErrorAt();
  v4 = dsrxpc_copyDictionary();
  if (!(_DWORD)v4)
    *a3 = 0;
  return v4;
}

uint64_t VTDecompressionSessionRemoteXPC_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  uint64_t v13;
  const __CFDictionary *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  int v19;
  __CFDictionary *Mutable;
  uint64_t v21;
  const void *v22;
  CFDictionaryRef pixelBufferAttributes;
  CFTypeRef cf;

  if (!a4)
    return 0;
  if (!a1 || *(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("PixelBufferPool")))
  {
    pixelBufferAttributes = 0;
    cf = 0;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 136));
    v8 = VTDecompressionSessionRemoteXPC_CopyProperty(a1, CFSTR("PoolPixelBufferAttributesSeed"), a3, &cf);
    if (!(_DWORD)v8)
    {
      if (FigCFEqual())
      {
LABEL_19:
        if (pixelBufferAttributes && !*(_QWORD *)(a1 + 152))
        {
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v14 = Mutable;
          if (pixelBufferAttributes)
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9068], CFSTR("dsrxpc_cloned_pool"));
            v21 = CVPixelBufferPoolCreate(a3, v14, pixelBufferAttributes, (CVPixelBufferPoolRef *)(a1 + 152));
          }
          else
          {
            v21 = FigSignalErrorAt();
          }
          v13 = v21;
          goto LABEL_33;
        }
        v13 = 0;
LABEL_22:
        v14 = 0;
LABEL_33:
        MEMORY[0x1940280D0](*(_QWORD *)(a1 + 136));
        if (cf)
          CFRelease(cf);
        if (pixelBufferAttributes)
          CFRelease(pixelBufferAttributes);
        if (v14)
          CFRelease(v14);
        if ((_DWORD)v13)
          return v13;
        v22 = *(const void **)(a1 + 152);
        if (v22)
          v22 = CFRetain(v22);
        goto LABEL_45;
      }
      v9 = *(const void **)(a1 + 144);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(a1 + 144) = 0;
      }
      v8 = VTDecompressionSessionRemoteXPC_CopyProperty(a1, CFSTR("PoolPixelBufferAttributes"), a3, &pixelBufferAttributes);
      if (!(_DWORD)v8)
      {
        if (pixelBufferAttributes)
        {
          v10 = *(const void **)(a1 + 152);
          if (v10)
          {
            CFRelease(v10);
            *(_QWORD *)(a1 + 152) = 0;
          }
        }
        v11 = *(const void **)(a1 + 144);
        v12 = cf;
        *(_QWORD *)(a1 + 144) = cf;
        if (v12)
          CFRetain(v12);
        if (v11)
          CFRelease(v11);
        goto LABEL_19;
      }
    }
    v13 = v8;
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("NumberOfFramesBeingDecoded")))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 48));
      v15 = *(const __CFArray **)(a1 + 40);
      if (v15 && (Count = CFArrayGetCount(v15), Count >= 1))
      {
        v17 = Count;
        v18 = 0;
        v19 = 0;
        do
          v19 += *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v18++) + 4);
        while (v17 != v18);
      }
      else
      {
        v19 = 0;
      }
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
    }
    else
    {
      v19 = 0;
    }
    LODWORD(cf) = v19;
    v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &cf);
LABEL_45:
    v13 = 0;
    *a4 = v22;
    return v13;
  }
  return FigXPCSendStdCopyPropertyMessage();
}

uint64_t VTDecompressionSessionRemoteXPC_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if (!a1 || *(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
    return FigSignalErrorAt();
  if (FigCFEqual())
  {
    v6 = (_QWORD *)(a1 + 208);
    v5 = *(const void **)(a1 + 208);
    if (!v5)
      return FigXPCSendStdSetPropertyMessage();
LABEL_7:
    CFRelease(v5);
    *v6 = 0;
    return FigXPCSendStdSetPropertyMessage();
  }
  if (!FigCFEqual())
  {
    if (!FigCFEqual())
      return FigXPCSendStdSetPropertyMessage();
    if (a3)
    {
      FigCFNumberGetUInt32();
      if (*(_QWORD *)(a1 + 248))
      {
        result = FigOSEventLinkRemoteSetMessageHandlingThreadFigThreadPriority();
        if (!(_DWORD)result)
          return FigXPCSendStdSetPropertyMessage();
        return result;
      }
      v8 = a1;
LABEL_23:
      result = dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread(v8);
      if (!(_DWORD)result)
        return FigXPCSendStdSetPropertyMessage();
      return result;
    }
LABEL_19:
    v6 = (_QWORD *)(a1 + 248);
    v5 = *(const void **)(a1 + 248);
    if (!v5)
      return FigXPCSendStdSetPropertyMessage();
    goto LABEL_7;
  }
  if (!a3)
    goto LABEL_19;
  FigCFNumberGetSInt32();
  if (!*(_QWORD *)(a1 + 248))
  {
    v8 = a1;
    goto LABEL_23;
  }
  result = FigOSEventLinkRemoteSetMessageHandlingThreadMachThreadPriority();
  if (!(_DWORD)result)
    return FigXPCSendStdSetPropertyMessage();
  return result;
}

uint64_t dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread(uint64_t a1)
{
  uint64_t v2;
  uint64_t AssociatedEventLink;

  if (*(_QWORD *)(a1 + 248))
    return FigSignalErrorAt();
  if (dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_onceToken != -1)
    dispatch_once(&dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_onceToken, &__block_literal_global_24);
  if (!dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_prefersEventLink)
    return 0;
  v2 = FigXPCRemoteClientCopyPrimaryConnection();
  if ((_DWORD)v2)
    return v2;
  AssociatedEventLink = FigXPCConnectionCreateAssociatedEventLink();
  if (!(_DWORD)AssociatedEventLink)
    *(_QWORD *)(a1 + 248) = 0;
  return AssociatedEventLink;
}

uint64_t VTDecompressionSessionRemoteXPC_SetProperties(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    v2 = FigSignalErrorAt();
  }
  else
  {
    v1 = FigXPCCreateBasicMessage();
    if ((_DWORD)v1 || (v1 = FigXPCMessageSetCFDictionary(), (_DWORD)v1))
      v2 = v1;
    else
      v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t VTDecompressionSessionRemoteXPC_FinishDelayedFrames(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    v2 = FigSignalErrorAt();
LABEL_15:
    v3 = v2;
    goto LABEL_8;
  }
  v2 = FigXPCCreateBasicMessage();
  if ((_DWORD)v2)
    goto LABEL_15;
  v2 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v2)
    goto LABEL_15;
  if (!*(_BYTE *)(a1 + 25))
  {
    v5 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 28))
        break;
      if (FigSemaphoreWaitRelative() != -12792)
        break;
      v5 *= 2;
    }
    while (!*(_BYTE *)(a1 + 25));
  }
  v3 = *(unsigned int *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = 0;
LABEL_8:
  FigXPCRelease();
  return v3;
}

BOOL VTDecompressionSessionRemoteXPC_CanAcceptFormatDescription(uint64_t a1)
{
  _BOOL8 v1;

  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    FigSignalErrorAt();
LABEL_10:
    v1 = 0;
    goto LABEL_8;
  }
  if (FigXPCCreateBasicMessage()
    || FigXPCMessageSetFormatDescription()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    goto LABEL_10;
  }
  v1 = xpc_dictionary_get_BOOL(0, "CanacceptFormat");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t VTDecompressionSessionRemoteXPC_WaitForAsynchronousFrames(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
    return FigSignalErrorAt();
  else
    return dsrxpc_waitForAsynchronousFrames(a1);
}

uint64_t dsrxpc_waitForAsynchronousFrames(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25))
  {
    v2 = FigSignalErrorAt();
LABEL_14:
    v3 = v2;
    goto LABEL_7;
  }
  v2 = FigXPCCreateBasicMessage();
  if ((_DWORD)v2)
    goto LABEL_14;
  v2 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v2)
    goto LABEL_14;
  if (!*(_BYTE *)(a1 + 25))
  {
    v5 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 28))
        break;
      if (FigSemaphoreWaitRelative() != -12792)
        break;
      v5 *= 2;
    }
    while (!*(_BYTE *)(a1 + 25));
  }
  v3 = *(unsigned int *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = 0;
LABEL_7:
  FigXPCRelease();
  return v3;
}

uint64_t VTDecompressionSessionRemoteXPC_CopyBlackPixelBuffer(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v7;
  CFTypeRef cf;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v7 = 0;
  cf = 0;
  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    v3 = FigSignalErrorAt();
LABEL_16:
    v5 = v3;
    goto LABEL_10;
  }
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3)
    goto LABEL_16;
  v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v3)
    goto LABEL_16;
  v3 = dsrxpc_copyPixelBufferRecipient(&v7);
  if ((_DWORD)v3)
    goto LABEL_16;
  v4 = FigPixelBufferRecipientCopyPixelBufferFromXPCMessage();
  v5 = v4;
  if (a2 && !(_DWORD)v4)
  {
    *a2 = cf;
    cf = 0;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  return v5;
}

uint64_t VTDecompressionSessionRemoteXPC_GetMinOutputPresentationTimeStampOfFramesBeingDecoded@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    FigSignalErrorAt();
  }
  else if (!FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    FigXPCMessageGetCMTime();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t VTDecompressionSessionRemoteXPC_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, CMTime *a2, CMTime *a3)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  char *ValueAtIndex;
  CMTime v12;
  CMTime time1;
  CMTime v14;
  CMTime v15;

  if (*(_DWORD *)(a1 + 28))
    return FigSignalErrorAt();
  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  if (*(_QWORD *)(a1 + 40))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 48));
    v6 = *(const __CFArray **)(a1 + 40);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), i);
          time1 = v15;
          v12 = *(CMTime *)(ValueAtIndex + 64);
          CMTimeMinimum(&v15, &time1, &v12);
          time1 = v14;
          v12 = *(CMTime *)(ValueAtIndex + 64);
          CMTimeMaximum(&v14, &time1, &v12);
        }
      }
    }
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
  }
  if (a2)
    *a2 = v15;
  if (a3)
    *a3 = v14;
  return 0;
}

uint64_t VTDecompressionSessionRemoteXPC_Invalidate(uint64_t a1)
{
  NSObject *v2;

  if (FigAtomicCompareAndSwap32())
  {
    dsrxpc_waitForAsynchronousFrames(a1);
    if (!*(_BYTE *)(a1 + 24) && !FigXPCCreateBasicMessage())
      FigXPCRemoteClientSendAsyncMessage();
    FigXPCRemoteClientDisassociateObject();
    if (!*(_QWORD *)(a1 + 224))
      FigStopMonitoringMediaServicesProcessDeath();
    if (*(_QWORD *)(a1 + 56))
      FigSemaphoreSignal();
    if (*(_QWORD *)(a1 + 72))
      FigSemaphoreSignal();
    if (*(_QWORD *)(a1 + 88))
      FigSemaphoreSignal();
    if (*(_QWORD *)(a1 + 104))
      FigSemaphoreSignal();
    v2 = *(NSObject **)(a1 + 120);
    if (v2)
      dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  }
  return FigXPCRelease();
}

uint64_t VTDecompressionSessionRemoteXPC_FinishDelayedTiles(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    v2 = FigSignalErrorAt();
LABEL_15:
    v3 = v2;
    goto LABEL_8;
  }
  v2 = FigXPCCreateBasicMessage();
  if ((_DWORD)v2)
    goto LABEL_15;
  v2 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v2)
    goto LABEL_15;
  if (!*(_BYTE *)(a1 + 25))
  {
    v5 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 28))
        break;
      if (FigSemaphoreWaitRelative() != -12792)
        break;
      v5 *= 2;
    }
    while (!*(_BYTE *)(a1 + 25));
  }
  v3 = *(unsigned int *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = 0;
LABEL_8:
  FigXPCRelease();
  return v3;
}

uint64_t VTDecompressionSessionRemoteXPC_SetMultiImageCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a1 && a2 && !*(_QWORD *)(a1 + 192))
  {
    *(_QWORD *)(a1 + 192) = a2;
    *(_QWORD *)(a1 + 200) = a3;
    v3 = FigXPCCreateBasicMessage();
    if ((_DWORD)v3)
      v4 = v3;
    else
      v4 = FigXPCRemoteClientSendSyncMessage();
  }
  else
  {
    FigSignalErrorAt();
    v4 = 0;
  }
  FigXPCRelease();
  return v4;
}

void __dsrxpc_oneTimeInitialization_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;

  gPixelBufferRecipientLock = FigSimpleMutexCreate();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t dsrxpc_xpcClient_DeadConnectionCallback(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 24))
    {
      return FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(result + 24) = 1;
      return dsrxpc_handleServerSessionIsGone((_DWORD *)result);
    }
  }
  return result;
}

uint64_t dsrxpc_xpcClient_NotificationFilter()
{
  return 0;
}

uint64_t dsrxpc_xpcClient_MessageHandler()
{
  uint64_t OpCode;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294954394;
}

void dsrxpc_xpcClient_DeadServerConnectionCallback()
{
  MEMORY[0x1940280C4](gPixelBufferRecipientLock);
  if (gPixelBufferRecipient)
  {
    CFRelease((CFTypeRef)gPixelBufferRecipient);
    gPixelBufferRecipient = 0;
  }
  JUMPOUT(0x1940280D0);
}

uint64_t dsrxpc_xpcClient_SetUpEventLink()
{
  return FigOSEventLinkServerSetCallbacks();
}

uint64_t dsrxpc_handleServerSessionIsGone(_DWORD *cf)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];

  if (!cf || cf[7] || *((_BYTE *)cf + 25))
    return FigSignalErrorAt();
  *((_BYTE *)cf + 25) = 1;
  CFRetain(cf);
  v2 = *((_QWORD *)cf + 15);
  v3 = *((_QWORD *)cf + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __dsrxpc_handleServerSessionIsGone_block_invoke;
  block[3] = &__block_descriptor_tmp_6_1;
  block[4] = cf;
  dispatch_group_async(v2, v3, block);
  if (*((_QWORD *)cf + 7))
    FigSemaphoreSignal();
  if (*((_QWORD *)cf + 9))
    FigSemaphoreSignal();
  if (*((_QWORD *)cf + 11))
    FigSemaphoreSignal();
  if (*((_QWORD *)cf + 13))
    FigSemaphoreSignal();
  return 0;
}

void __dsrxpc_handleServerSessionIsGone_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  const void *FirstValue;
  uint64_t *v4;
  const void *v5;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    while (v2[5])
    {
      MEMORY[0x1940280C4](v2[6]);
      FirstValue = (const void *)FigCFArrayGetFirstValue();
      if (!FirstValue)
      {
        MEMORY[0x1940280D0](v2[6]);
        break;
      }
      v4 = (uint64_t *)CFRetain(FirstValue);
      MEMORY[0x1940280D0](v2[6]);
      if (!v4)
        break;
      dsrxpc_emitPendingFramesForOneSampleWithError(v2, v4, 0xFFFFCD91);
      CFRelease(v4);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
}

CFTypeRef dsrxpc_copyPendingFrameInfoFromPendingList(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _QWORD *ValueAtIndex;
  CFTypeRef v9;

  if (!a1 || !*(_QWORD *)(a1 + 40))
    return 0;
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 48));
  v4 = *(const __CFArray **)(a1 + 40);
  if (v4 && (Count = CFArrayGetCount(v4), Count >= 1))
  {
    v6 = Count;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v7);
      if (ValueAtIndex[2] == a2)
        break;
      if (v6 == ++v7)
        goto LABEL_8;
    }
    v9 = CFRetain(ValueAtIndex);
  }
  else
  {
LABEL_8:
    v9 = 0;
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
  return v9;
}

uint64_t dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _QWORD *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;

  if (!a1 || !*(_QWORD *)(a1 + 40))
    return 0;
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 48));
  v4 = *(const __CFArray **)(a1 + 40);
  if (!v4)
    goto LABEL_11;
  Count = CFArrayGetCount(v4);
  if (Count < 1)
    goto LABEL_11;
  v6 = Count;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v7);
    if (ValueAtIndex[2] == a2)
      break;
    if (v6 == ++v7)
      goto LABEL_11;
  }
  v9 = ValueAtIndex[5];
  if (v9)
  {
    ValueAtIndex[5] = v9 - 1;
    v10 = 1;
  }
  else
  {
LABEL_11:
    v10 = 0;
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 48));
  return v10;
}

void dsrxpc_handleEmitFrame(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *);
  uint64_t v16;
  const void *v17;
  CFMutableDictionaryRef Mutable;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(a1 + 176);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 184);
    v11 = a2[3];
    v21 = *a6;
    v22 = *((_QWORD *)a6 + 2);
    v19 = *a7;
    v20 = *((_QWORD *)a7 + 2);
    v9(v10, v11, a4, a5, a3, &v21, &v19);
  }
  else
  {
    v12 = a2[6];
    if (v12)
    {
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(v12 + 16);
      v21 = *a6;
      v22 = *((_QWORD *)a6 + 2);
      v19 = *a7;
      v20 = *((_QWORD *)a7 + 2);
      v13(v12, a4, a5, a3, &v21, &v19);
    }
    else
    {
      v14 = a2[7];
      if (v14)
      {
        v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))(v14 + 16);
        v21 = *a6;
        v22 = *((_QWORD *)a6 + 2);
        v19 = *a7;
        v20 = *((_QWORD *)a7 + 2);
        v15(v14, a4, a5, a3, 0, &v21, &v19);
      }
    }
  }
  dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(a1, a2[2]);
  v16 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v16)
  {
    v17 = (const void *)v16;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt64();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v17);
    if (Mutable)
      CFRelease(Mutable);
  }
}

uint64_t dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _QWORD *ValueAtIndex;
  uint64_t v9;

  if (result)
  {
    v2 = result;
    if (*(_QWORD *)(result + 40))
    {
      MEMORY[0x1940280C4](*(_QWORD *)(result + 48));
      v4 = *(const __CFArray **)(v2 + 40);
      if (v4)
      {
        Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          v6 = Count;
          v7 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 40), v7);
            if (ValueAtIndex[2] == a2)
              break;
            if (v6 == ++v7)
              goto LABEL_13;
          }
          v9 = ValueAtIndex[4] - 1;
          ValueAtIndex[4] = v9;
          if (!v9)
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 40), v7);
        }
      }
LABEL_13:
      JUMPOUT(0x1940280D0);
    }
  }
  return result;
}

void __dsrxpc_callback_handleEmitTile_block_invoke(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v3;
  const void *v4;
  const void *v5;

  if (dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16)))
  {
    v2 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD **)(a1 + 40);
      v2(*(_QWORD *)(a1 + 56), v3[3], v3[12], v3[13], v3[11], v3[14], *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 84));
    }
    dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
  }
  if (!FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendSyncMessage();
  FigXPCRelease();
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
}

void __dsrxpc_handleEmitMultiImage_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, __int128 *);
  uint64_t v14;
  const void *v15;
  CFMutableDictionaryRef Mutable;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *);
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(unsigned int *)(a1 + 96);
  v30 = 0;
  if (!dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(*(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16)))goto LABEL_10;
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(v3 + 192);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 200);
    v6 = *(unsigned int *)(a1 + 100);
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(_QWORD *)(a1 + 80);
    v28 = *(_OWORD *)(a1 + 104);
    v29 = *(_QWORD *)(a1 + 120);
    v26 = *(_OWORD *)(a1 + 128);
    v27 = *(_QWORD *)(a1 + 144);
    v9 = v2;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
    {
      v11 = *(unsigned int *)(a1 + 100);
      v12 = *(_QWORD *)(a1 + 80);
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, __int128 *))(v10 + 16);
      v28 = *(_OWORD *)(a1 + 104);
      v29 = *(_QWORD *)(a1 + 120);
      v26 = *(_OWORD *)(a1 + 128);
      v27 = *(_QWORD *)(a1 + 144);
      v13(v10, v2, v11, 0, v12, &v28, &v26);
      goto LABEL_7;
    }
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(a1 + 152);
    if (!v4)
    {
      v23 = *(_QWORD *)(a1 + 40);
      if (v23)
      {
        if (!(_DWORD)v2)
        {
          if (*(_QWORD *)(a1 + 80))
            v2 = 4294949597;
          else
            v2 = 0;
        }
        v24 = *(unsigned int *)(a1 + 100);
        v25 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))(v23 + 16);
        v28 = *MEMORY[0x1E0CA2E18];
        v29 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v26 = v28;
        v27 = v29;
        v25(v23, v2, v24, 0, &v28, &v26);
      }
      goto LABEL_7;
    }
    if (!(_DWORD)v2)
    {
      if (*(_QWORD *)(a1 + 80))
        v2 = 4294949597;
      else
        v2 = 0;
    }
    v5 = *(_QWORD *)(a1 + 160);
    v7 = *(_QWORD *)(a1 + 72);
    v6 = *(unsigned int *)(a1 + 100);
    v28 = *MEMORY[0x1E0CA2E18];
    v29 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v26 = v28;
    v27 = v29;
    v9 = v2;
    v8 = 0;
  }
  v4(v5, v7, v9, v6, v8, &v28, &v26);
LABEL_7:
  dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(*(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16));
  v14 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v14)
  {
    v15 = (const void *)v14;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt64();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v15);
    if (Mutable)
      CFRelease(Mutable);
  }
LABEL_10:
  if (!FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendSyncMessage();
  v17 = *(const void **)(a1 + 40);
  if (v17)
    _Block_release(v17);
  v18 = *(const void **)(a1 + 32);
  if (v18)
    _Block_release(v18);
  FigXPCRelease();
  v19 = *(const void **)(a1 + 80);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 64);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 56);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 48);
  if (v22)
    CFRelease(v22);
}

uint64_t dsrxpc_eventLink_MessageHandler(int a1, int a2, CMBlockBufferRef theBuffer)
{
  uint64_t DataPointer;
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t lengthAtOffsetOut[2];
  uint64_t v14;
  char *dataPointerOut[2];
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef v18;

  lengthAtOffsetOut[0] = 0;
  dataPointerOut[0] = 0;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, lengthAtOffsetOut, 0, dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v4 = dataPointerOut[0];
  if (((uint64_t)dataPointerOut[0] & 7) != 0)
    return 4294949291;
  v5 = lengthAtOffsetOut[0];
  if (lengthAtOffsetOut[0] <= 0x57)
    return 4294949290;
  v6 = FigXPCRemoteClientLookupAndRetainAssociatedObject();
  if ((_DWORD)v6)
    return v6;
  if (*((_DWORD *)v4 + 2) != 1701672038)
    return 4294954394;
  v17 = 0;
  v18 = 0;
  if (*((_QWORD *)v4 + 10) > v5 - 88)
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    v7 = dsrxpc_copyPixelBufferRecipient(&v17);
    if (!(_DWORD)v7)
    {
      if (!*((_QWORD *)v4 + 10))
      {
        DataPointer = 0;
        goto LABEL_15;
      }
      v7 = FigPixelBufferRecipientCopyPixelBufferFromIPCMessageData();
    }
  }
  DataPointer = v7;
LABEL_15:
  v8 = (uint64_t *)dsrxpc_copyPendingFrameInfoFromPendingList(0, *((_QWORD *)v4 + 3));
  if (v8)
  {
    dispatch_group_enter(MEMORY[0x78]);
    if (dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(0, v8[2]))
    {
      v9 = (uint64_t)v18;
      if ((_DWORD)DataPointer)
      {
        if (v18)
        {
          CFRelease(v18);
          v9 = 0;
          v18 = 0;
        }
        v10 = 4294954385;
      }
      else
      {
        v10 = *((unsigned int *)v4 + 4);
      }
      v11 = *((unsigned int *)v4 + 5);
      *(_OWORD *)dataPointerOut = *((_OWORD *)v4 + 2);
      v16 = *((_QWORD *)v4 + 6);
      *(_OWORD *)lengthAtOffsetOut = *(_OWORD *)(v4 + 56);
      v14 = *((_QWORD *)v4 + 9);
      dsrxpc_handleEmitFrame(0, v8, v9, v10, v11, (__int128 *)dataPointerOut, (__int128 *)lengthAtOffsetOut);
    }
    dispatch_group_leave(MEMORY[0x78]);
  }
  else
  {
    DataPointer = FigSignalErrorAt();
  }
  if (v18)
    CFRelease(v18);
  if (v8)
    CFRelease(v8);
  if (v17)
    CFRelease(v17);
  return DataPointer;
}

CFArrayRef __dsrxpc_sampleBufferAttachmentsKeysToDrop_block_invoke()
{
  const __CFAllocator *AllocatorForPermanentAllocations;
  CFArrayRef result;

  AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
  result = CFArrayCreate(AllocatorForPermanentAllocations, MEMORY[0x1E0CA26C8], 1, MEMORY[0x1E0C9B378]);
  dsrxpc_sampleBufferAttachmentsKeysToDrop_sKeys = (uint64_t)result;
  return result;
}

double dsrxpc_pfi_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void dsrxpc_pfi_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[6];
  if (v2)
    _Block_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[11];
  if (v4)
    CFRelease(v4);
}

CFStringRef dsrxpc_pfi_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[pendingFrameInfo %p] [perSessionUniqueFrameID = %llu]"), a1, *(_QWORD *)(a1 + 16));
}

uint64_t __dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_prefersEventLink = result;
  return result;
}

uint64_t DecodeBlocks(uint64_t a1, unsigned __int8 **a2, char *a3, _BYTE *a4, uint64_t a5)
{
  char *v7;
  int v10;
  __int16 v11;
  uint64_t v12;
  char *v13;
  __int16 v14;
  __int16 v15;
  unsigned __int16 v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned __int8 *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  __int16 v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  __int16 v82;
  uint64_t v83;
  char v84;

  v7 = a3;
  v10 = *(__int16 *)(a1 + 3274);
  if (v10 < 1)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = *(unsigned __int16 *)(a1 + 3274);
    v13 = (char *)(a1 + 3400);
    do
    {
      v14 = *v13++;
      v11 += v14;
      --v12;
    }
    while (v12);
  }
  v15 = -12902;
  if (v11 > 48 || v10 > 5)
    return v15;
  v16 = 4 * v11;
  if ((v16 & 0xFFFC) != 0)
    bzero(a3, 32 * v16);
  v17 = *((_DWORD *)a2 + 2);
  v18 = *((_DWORD *)a2 + 3);
  v19 = *a2;
  if (v10 < 1)
  {
LABEL_214:
    v15 = 0;
    *a4 = 0;
    *((_DWORD *)a2 + 2) = v17;
    *((_DWORD *)a2 + 3) = v18;
    *a2 = v19;
    return v15;
  }
  v20 = 0;
  v21 = &a2[7][(_QWORD)a2[3]];
  v22 = (unint64_t)(v21 - 1);
  v23 = (unint64_t)(v21 - 6);
  v24 = *((_DWORD *)a2 + 5);
  v81 = (unint64_t)(v21 - 2);
  while (*(char *)(a1 + v20 + 3400) < 1)
  {
LABEL_213:
    if (++v20 >= (__int16)v10)
      goto LABEL_214;
  }
  LOWORD(v25) = 0;
  v26 = (_QWORD *)(a1 + 8 * v20);
  v27 = v26[410];
  v28 = v26[415];
  v83 = *(_QWORD *)(v28 + 8);
  v80 = *(_QWORD *)(v28 + 16);
  v29 = v26[420];
  v30 = *(_QWORD *)(v29 + 8);
  v31 = *(_QWORD *)(v29 + 16);
  v32 = *(_WORD *)(v27 + 128);
  v33 = 1 << (v32 - 1);
  v34 = *(_WORD *)(v29 + 2);
  v35 = *(__int16 *)(v29 + 4);
  v82 = 32 - *(_WORD *)v28;
  v78 = 32 - *(_WORD *)(v28 + 2);
  v79 = *(__int16 *)(v28 + 4);
  v36 = 32 - *(_WORD *)v29;
  v84 = 32 - v34;
  while (2)
  {
    v37 = *(__int16 *)(a5 + 2 * v20);
    if (v18 >= 0x10)
    {
      if ((unint64_t)v19 <= v23)
      {
        v38 = *v19;
        v39 = v19 + 2;
        v40 = v19[1];
        if (v24 == v38)
        {
          if (v40 == 216)
          {
            if (*v39 == 255 && v19[3] == 216)
              return -2;
            v40 = 216;
          }
          else if (!v19[1])
          {
            v39 = v19 + 3;
            v40 = v19[2];
          }
        }
        if (v24 == v40)
        {
          if (*v39)
          {
            if (*v39 == 216 && v39[1] == 255 && v39[2] == 216)
              return -2;
          }
          else
          {
            ++v39;
          }
        }
        v17 = (v17 << 16) | (v38 << 8) | v40;
        v18 -= 16;
        v19 = v39;
      }
      else if ((unint64_t)v19 <= v22)
      {
        v41 = *v19;
        if ((unint64_t)(v19 + 1) <= v22)
        {
          v42 = v19[1];
          v19 += 2;
        }
        else
        {
          v42 = 0;
          ++v19;
        }
        if (v24 == v41)
        {
          if (v42 == 216)
          {
            if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216)
              return -2;
            v42 = 216;
          }
          else if (!v42)
          {
            if ((unint64_t)v19 > v22)
              return -2;
            v43 = *v19++;
            v42 = v43;
          }
        }
        if (v42 == v24 && (unint64_t)v19 <= v22)
        {
          if (*v19)
          {
            if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216))
              return -2;
          }
          else
          {
            ++v19;
          }
        }
        v17 = v42 | (v17 << 16) | (v41 << 8);
        v18 -= 16;
      }
      else if (v18 > 0x1F)
      {
        return -2;
      }
    }
    v44 = *(__int16 *)(v83 + 2 * ((v17 << v18) >> v82));
    if (v44 <= -31745)
    {
      v18 += v79;
      if (v80)
        v44 = *(__int16 *)(v80 + 2 * ((v17 << v18) >> v78));
      if (v44 < -31744)
        return -1;
    }
    if (v44 < 0)
    {
      v45 = (v44 >> 11) & 0xF;
      v37 += (char)v44;
    }
    else
    {
      v18 += v44 >> 8;
      v45 = v44 & 0xF;
      if ((v44 & 0xF) != 0)
      {
        v46 = v18 - 16;
        if (v18 >= 0x10)
        {
          if ((unint64_t)v19 <= v23)
          {
            v47 = *v19;
            v48 = v19 + 2;
            v49 = v19[1];
            if (v24 == v47)
            {
              if (v49 == 216)
              {
                if (*v48 == 255 && v19[3] == 216)
                  return -2;
                v49 = 216;
              }
              else if (!v19[1])
              {
                v48 = v19 + 3;
                v49 = v19[2];
              }
            }
            if (v24 == v49)
            {
              if (*v48)
              {
                if (*v48 == 216 && v48[1] == 255 && v48[2] == 216)
                  return -2;
              }
              else
              {
                ++v48;
              }
            }
            v17 = (v17 << 16) | (v47 << 8) | v49;
            v18 = v46;
            v19 = v48;
          }
          else if ((unint64_t)v19 <= v22)
          {
            v50 = *v19;
            if ((unint64_t)(v19 + 1) <= v22)
            {
              v51 = v19[1];
              v19 += 2;
            }
            else
            {
              v51 = 0;
              ++v19;
            }
            if (v24 == v50)
            {
              if (v51 == 216)
              {
                if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216)
                  return -2;
                v51 = 216;
              }
              else if (!v51)
              {
                if ((unint64_t)v19 > v22)
                  return -2;
                v52 = *v19++;
                v51 = v52;
              }
            }
            if (v51 == v24 && (unint64_t)v19 <= v22)
            {
              if (*v19)
              {
                if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216))
                  return -2;
              }
              else
              {
                ++v19;
              }
            }
            v17 = v51 | (v17 << 16) | (v50 << 8);
            v18 = v46;
          }
          else if (v18 > 0x1F)
          {
            return -2;
          }
        }
        v37 = ((v17 << v18) >> -(char)v45)
            + v37
            - ((((v17 << v18) >> 31) - 1) >> -(char)v45);
      }
    }
    v53 = 0;
    v54 = 0u;
    *(_WORD *)(a5 + 2 * v20) = v37;
    v18 += v45;
    do
    {
      v55 = v18 - 16;
      if (v18 >= 0x10)
      {
        if ((unint64_t)v19 <= v23)
        {
          v56 = *v19;
          v57 = v19 + 2;
          v58 = v19[1];
          if (v24 == v56)
          {
            if (v58 == 216)
            {
              if (*v57 == 255 && v19[3] == 216)
                return -2;
              v58 = 216;
            }
            else if (!v19[1])
            {
              v57 = v19 + 3;
              v58 = v19[2];
            }
          }
          if (v24 == v58)
          {
            if (*v57)
            {
              if (*v57 == 216 && v57[1] == 255 && v57[2] == 216)
                return -2;
            }
            else
            {
              ++v57;
            }
          }
          v17 = (v17 << 16) | (v56 << 8) | v58;
          v18 = v55;
          v19 = v57;
        }
        else if ((unint64_t)v19 <= v22)
        {
          v59 = *v19;
          if ((unint64_t)(v19 + 1) <= v22)
          {
            v60 = v19[1];
            v19 += 2;
          }
          else
          {
            v60 = 0;
            ++v19;
          }
          if (v24 == v59)
          {
            if (v60 == 216)
            {
              if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216)
                return -2;
              v60 = 216;
            }
            else if (!v60)
            {
              if ((unint64_t)v19 > v22)
                return -2;
              v61 = *v19++;
              v60 = v61;
            }
          }
          if (v60 == v24 && (unint64_t)v19 <= v22)
          {
            if (*v19)
            {
              if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216))
                return -2;
            }
            else
            {
              ++v19;
            }
          }
          v17 = v60 | (v17 << 16) | (v59 << 8);
          v18 -= 16;
        }
        else if (v18 > 0x1F)
        {
          return -2;
        }
      }
      v62 = tables[v54];
      if (v53 <= (int)v62)
        v53 = tables[v54];
      v63 = (int)(v33 + v37 * *(unsigned __int16 *)(v27 + v62)) >> v32;
      v64 = (__int16)v63 ^ v63;
      *(_WORD *)&v7[v62] = v63;
      v37 = *(__int16 *)(v30 + 2 * ((v17 << v18) >> v36));
      v54 = (v64 | v54) + 1;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_152;
      if ((unsigned __int16)((unsigned __int16)v37 >> 10) > 0x20u)
      {
        v66 = (v37 >> 11) & 0xF;
        v65 = (v37 >> 8) & 7;
        v37 = (char)v37;
        goto LABEL_205;
      }
      v18 += v35;
      if (v31)
        v37 = *(__int16 *)(v31 + 2 * ((v17 << v18) >> v84));
      if ((v37 & 0x80000000) != 0)
      {
        if (v37 <= 0xFFFF83FF)
          return -3;
        v66 = (v37 >> 11) & 0xF;
        v65 = (v37 >> 8) & 7;
        v37 = (char)v37;
      }
      else
      {
LABEL_152:
        v65 = v37 >> 4;
        v18 += v37 >> 8;
        v66 = v37 & 0xF;
        if ((v37 & 0xF) != 0)
        {
          v67 = v18 - 16;
          if (v18 >= 0x10)
          {
            if ((unint64_t)v19 <= v23)
            {
              v68 = *v19;
              v69 = v19 + 2;
              v70 = v19[1];
              if (v24 == v68)
              {
                if (v70 == 216)
                {
                  if (*v69 == 255 && v19[3] == 216)
                    return -2;
                  v70 = 216;
                }
                else if (!v19[1])
                {
                  v69 = v19 + 3;
                  v70 = v19[2];
                }
              }
              if (v24 == v70)
              {
                if (*v69)
                {
                  if (*v69 == 216 && v69[1] == 255 && v69[2] == 216)
                    return -2;
                }
                else
                {
                  ++v69;
                }
              }
              v17 = (v17 << 16) | (v68 << 8) | v70;
              v18 = v67;
              v19 = v69;
            }
            else if ((unint64_t)v19 <= v22)
            {
              v71 = *v19;
              if ((unint64_t)(v19 + 1) <= v22)
              {
                v72 = v19[1];
                v19 += 2;
              }
              else
              {
                v72 = 0;
                ++v19;
              }
              if (v24 == v71)
              {
                if (v72 == 216)
                {
                  if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216)
                    return -2;
                  v72 = 216;
                }
                else if (!v72)
                {
                  if ((unint64_t)v19 > v22)
                    return -2;
                  v73 = *v19++;
                  v72 = v73;
                }
              }
              if (v72 == v24 && (unint64_t)v19 <= v22)
              {
                if (*v19)
                {
                  if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216))
                    return -2;
                }
                else
                {
                  ++v19;
                }
              }
              v17 = v72 | (v17 << 16) | (v71 << 8);
              v18 = v67;
            }
            else if (v18 > 0x1F)
            {
              return -2;
            }
          }
          v37 = ((v17 << v18) >> -(char)v66) - ((((v17 << v18) >> 31) - 1) >> -(char)v66);
        }
        else
        {
          v37 = 0;
          if (!v65)
            break;
          v66 = 0;
        }
      }
LABEL_205:
      v54 += v65;
      v18 += v66;
    }
    while (v54 < 0x3F);
    if (v54 > 0x3F)
      return -1;
    v74 = tables[v54];
    v75 = (int)(v33 + v37 * *(unsigned __int16 *)(v27 + v74)) >> v32;
    if (v75 == (__int16)v75)
    {
      if (v53 <= v74)
        v76 = v74;
      else
        v76 = v53;
      *(_WORD *)&v7[v74] = v75;
      *a4++ = (v76 >> 4) + 1;
      v7 += 128;
      v25 = (__int16)(v25 + 1);
      if (v25 >= *(char *)(a1 + v20 + 3400))
      {
        LOWORD(v10) = *(_WORD *)(a1 + 3274);
        goto LABEL_213;
      }
      continue;
    }
    break;
  }
  return -6;
}

uint64_t IDCTRows(uint64_t a1, _DWORD *a2, int a3)
{
  __int16 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  int v32;

  v3 = (__int16 *)(a1 + 8);
  v4 = a3;
  do
  {
    v5 = *(v3 - 3);
    v6 = v3[3];
    v7 = v3[1];
    v8 = *(v3 - 1);
    v9 = *(v3 - 2);
    v10 = v3[2];
    v11 = *(v3 - 4);
    v12 = *v3;
    v13 = ((6518 * v5 + 0x4000) >> 15) - v6;
    v14 = v5 + ((6518 * v6 + 0x4000) >> 15);
    v15 = v8 + ((21895 * v7 + 0x4000) >> 15);
    v16 = v7 + ((-21895 * v8 + 0x4000) >> 15);
    v17 = ((13573 * v9 + 0x4000) >> 15) - v10;
    v18 = v9 + ((13573 * v10 + 0x4000) >> 15);
    v19 = v12 + v11;
    v20 = v11 - v12;
    v21 = v16 + v13;
    v22 = v13 - v16;
    v23 = v15 + v14;
    v24 = v14 - v15;
    v25 = v18 + v19;
    v26 = v19 - v18;
    v27 = v20 + v17;
    v28 = v20 - v17;
    v29 = 23170 * (v22 + v24) + 0x4000;
    *a2 = v25 + v23;
    a2[8] = v27 + (v29 >> 15);
    v30 = 23170 * (v24 - v22) + 0x4000;
    result = (v28 + (v30 >> 15));
    a2[16] = result;
    a2[24] = v26 + v21;
    a2[32] = v26 - v21;
    a2[40] = v28 - (v30 >> 15);
    a2[48] = v27 - (v29 >> 15);
    a2[56] = v25 - v23;
    ++a2;
    v3 += 8;
    --v4;
  }
  while (v4);
  if ((unsigned __int16)a3 != 8)
  {
    v32 = 8 - a3;
    do
    {
      --v32;
      *a2 = 0;
      a2[8] = 0;
      a2[16] = 0;
      a2[24] = 0;
      a2[32] = 0;
      a2[40] = 0;
      a2[48] = 0;
      a2[56] = 0;
      ++a2;
    }
    while ((_WORD)v32);
  }
  return result;
}

uint64_t IDCTCols(uint64_t result, uint64_t a2)
{
  __int32 *v2;
  uint64_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t *v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int32x4_t v84;

  v2 = (__int32 *)(result + 128);
  v3 = 96;
  v4 = vdupq_n_s32(0x1976u);
  v5 = vdupq_n_s32(0x5587u);
  v6 = vdupq_n_s32(0xFFFFAA79);
  v7 = vdupq_n_s32(0x3505u);
  v8 = vdupq_n_s32(0x5A82u);
  do
  {
    v10.i32[0] = *v2;
    v9.i32[0] = v2[1];
    v9.i32[1] = v2[9];
    v11.i32[0] = v2[6];
    v12.i32[0] = v2[7];
    v12.i32[1] = v2[15];
    v13.i64[0] = 0x400000004000;
    v13.i64[1] = 0x400000004000;
    v14.i64[0] = 0x400000004000;
    v14.i64[1] = 0x400000004000;
    v15.i64[0] = 0x400000004000;
    v15.i64[1] = 0x400000004000;
    v9.i32[2] = v2[17];
    v16.i64[0] = 0x400000004000;
    v16.i64[1] = 0x400000004000;
    v17.i64[0] = 0x400000004000;
    v17.i64[1] = 0x400000004000;
    v18.i64[0] = 0x400000004000;
    v18.i64[1] = 0x400000004000;
    v12.i32[2] = v2[23];
    v19.i32[0] = *(v2 - 31);
    v19.i32[1] = *(v2 - 23);
    v20.i32[0] = *(v2 - 25);
    v20.i32[1] = *(v2 - 17);
    v21.i32[0] = *(v2 - 27);
    v21.i32[1] = *(v2 - 19);
    v22.i64[0] = 0x400000004000;
    v22.i64[1] = 0x400000004000;
    v24.i32[0] = v2[4];
    v23.i32[0] = v2[5];
    v9.i32[3] = v2[25];
    v23.i32[1] = v2[13];
    v12.i32[3] = v2[31];
    v23.i32[2] = v2[21];
    v23.i32[3] = v2[29];
    v19.i32[2] = *(v2 - 15);
    v25.i32[0] = *(v2 - 29);
    v25.i32[1] = *(v2 - 21);
    v20.i32[2] = *(v2 - 9);
    v26.i32[0] = v2[2];
    v27.i32[0] = v2[3];
    v21.i32[2] = *(v2 - 11);
    v27.i32[1] = v2[11];
    v25.i32[2] = *(v2 - 13);
    v27.i32[2] = v2[19];
    v19.i32[3] = *(v2 - 7);
    v27.i32[3] = v2[27];
    v20.i32[3] = *(v2 - 1);
    v26.i32[1] = v2[10];
    v21.i32[3] = *(v2 - 3);
    v26.i32[2] = v2[18];
    v25.i32[3] = *(v2 - 5);
    v28.i32[0] = *(v2 - 30);
    v28.i32[1] = *(v2 - 22);
    v26.i32[3] = v2[26];
    v28.i32[2] = *(v2 - 14);
    v28.i32[3] = *(v2 - 6);
    v29.i32[0] = *(v2 - 26);
    v29.i32[1] = *(v2 - 18);
    v30 = vmlaq_s32(v13, v9, v4);
    v29.i32[2] = *(v2 - 10);
    v29.i32[3] = *(v2 - 2);
    v31.i64[0] = 0x400000004000;
    v31.i64[1] = 0x400000004000;
    v11.i32[1] = v2[14];
    v11.i32[2] = v2[22];
    v11.i32[3] = v2[30];
    v32 = vmlaq_s32(v14, v19, v4);
    v33.i32[0] = *(v2 - 32);
    v33.i32[1] = *(v2 - 24);
    v33.i32[2] = *(v2 - 16);
    v33.i32[3] = *(v2 - 8);
    v34 = vmlaq_s32(v31, v27, v6);
    v10.i32[1] = v2[8];
    v35 = vsraq_n_s32(v9, vmlaq_s32(v16, v12, v4), 0xFuLL);
    v10.i32[2] = v2[16];
    v10.i32[3] = v2[24];
    v36 = vsraq_n_s32(v27, vmlaq_s32(v18, v23, v5), 0xFuLL);
    v16.i32[0] = *(v2 - 28);
    v16.i32[1] = *(v2 - 20);
    v16.i32[2] = *(v2 - 12);
    v16.i32[3] = *(v2 - 4);
    v37 = vsubq_s32(vshrq_n_s32(v30, 0xFuLL), v12);
    v38 = vmlaq_s32(v22, v25, v6);
    v24.i32[1] = v2[12];
    v39 = vsraq_n_s32(v19, vmlaq_s32(v15, v20, v4), 0xFuLL);
    v24.i32[2] = v2[20];
    v24.i32[3] = v2[28];
    v40 = vsraq_n_s32(v25, vmlaq_s32(v17, v21, v5), 0xFuLL);
    v41 = vsraq_n_s32(v23, v34, 0xFuLL);
    v42 = vsraq_n_s32(v21, v38, 0xFuLL);
    v30.i64[0] = 0x400000004000;
    v30.i64[1] = 0x400000004000;
    v43 = vsubq_s32(vshrq_n_s32(v32, 0xFuLL), v20);
    v15.i64[0] = 0x400000004000;
    v15.i64[1] = 0x400000004000;
    v44 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v30, v26, v7), 0xFuLL), v11);
    v17.i64[0] = 0x400000004000;
    v17.i64[1] = 0x400000004000;
    v45 = vshrq_n_s32(vmlaq_s32(v15, v28, v7), 0xFuLL);
    v46 = vmlaq_s32(v17, v11, v7);
    v11.i64[0] = 0x400000004000;
    v11.i64[1] = 0x400000004000;
    v47 = vsraq_n_s32(v26, v46, 0xFuLL);
    v48 = vsraq_n_s32(v28, vmlaq_s32(v11, v29, v7), 0xFuLL);
    v49 = vsubq_s32(v45, v29);
    v50 = vaddq_s32(v24, v10);
    v51 = vaddq_s32(v16, v33);
    v52 = vsubq_s32(v10, v24);
    v53 = vsubq_s32(v33, v16);
    v54 = vaddq_s32(v41, v37);
    v55 = vsubq_s32(v43, v42);
    v56 = vsubq_s32(v37, v41);
    v57 = vaddq_s32(v40, v39);
    v58 = vaddq_s32(v36, v35);
    v59 = vsubq_s32(v39, v40);
    v60 = vsubq_s32(v35, v36);
    v61 = vaddq_s32(v42, v43);
    v62 = vaddq_s32(v48, v51);
    v63 = vaddq_s32(v47, v50);
    v64 = vsubq_s32(v51, v48);
    v65 = vsubq_s32(v50, v47);
    v66 = vaddq_s32(v52, v44);
    v67 = vaddq_s32(v53, v49);
    v68 = (int16x8_t *)(a2 + v3);
    v69 = vsubq_s32(v53, v49);
    v70 = vsubq_s32(v52, v44);
    v71 = vaddq_s32(v56, v60);
    v72 = vsubq_s32(v60, v56);
    v73 = (int16x8_t)vaddq_s32(v63, v58);
    v74 = (int16x8_t)vsubq_s32(v63, v58);
    v75 = (int16x8_t)vaddq_s32(v65, v54);
    v76 = (int16x8_t)vaddq_s32(v64, v61);
    v77 = (int16x8_t)vsubq_s32(v65, v54);
    v78 = (int16x8_t)vsubq_s32(v64, v61);
    v64.i64[0] = 0x400000004000;
    v64.i64[1] = 0x400000004000;
    v79 = vmlaq_s32(v64, v71, v8);
    v71.i64[0] = 0x400000004000;
    v71.i64[1] = 0x400000004000;
    v80 = vmlaq_s32(v71, vaddq_s32(v55, v59), v8);
    v81 = (int16x8_t)vsubq_s32(v66, vshrq_n_s32(v79, 0xFuLL));
    v82 = (int16x8_t)vsraq_n_s32(v66, v79, 0xFuLL);
    v79.i64[0] = 0x400000004000;
    v79.i64[1] = 0x400000004000;
    v83 = vmlaq_s32(v79, v72, v8);
    v54.i64[0] = 0x400000004000;
    v54.i64[1] = 0x400000004000;
    v84 = vmlaq_s32(v54, vsubq_s32(v59, v55), v8);
    v68[-6] = vuzp1q_s16((int16x8_t)vaddq_s32(v62, v57), v73);
    *v68 = vuzp1q_s16(v76, v75);
    v68[2] = vuzp1q_s16(v78, v77);
    v68[-4] = vuzp1q_s16((int16x8_t)vsraq_n_s32(v67, v80, 0xFuLL), v82);
    v68[4] = vuzp1q_s16((int16x8_t)vsubq_s32(v69, vshrq_n_s32(v84, 0xFuLL)), (int16x8_t)vsubq_s32(v70, vshrq_n_s32(v83, 0xFuLL)));
    v68[6] = vuzp1q_s16((int16x8_t)vsubq_s32(v67, vshrq_n_s32(v80, 0xFuLL)), v81);
    v68[-2] = vuzp1q_s16((int16x8_t)vsraq_n_s32(v69, v84, 0xFuLL), (int16x8_t)vsraq_n_s32(v70, v83, 0xFuLL));
    v68[8] = vuzp1q_s16((int16x8_t)vsubq_s32(v62, v57), v74);
    v3 += 16;
    v2 += 64;
  }
  while (v3 != 128);
  return result;
}

int16x8_t IDCTFlexCols(__int32 *a1, int16x8_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8_t result;

  v3.i32[0] = a1[32];
  v2.i32[0] = a1[33];
  v2.i32[1] = a1[41];
  v2.i32[2] = a1[49];
  v2.i32[3] = a1[57];
  v5.i32[0] = *a1;
  v4.i32[0] = a1[1];
  v4.i32[1] = a1[9];
  v4.i32[2] = a1[17];
  v4.i32[3] = a1[25];
  v6.i32[0] = a1[6];
  v7.i32[0] = a1[7];
  v7.i32[1] = a1[15];
  v7.i32[2] = a1[23];
  v7.i32[3] = a1[31];
  v8.i32[0] = a1[38];
  v9.i32[0] = a1[39];
  v9.i32[1] = a1[47];
  v9.i32[2] = a1[55];
  v9.i32[3] = a1[63];
  v11.i32[0] = a1[4];
  v10.i32[0] = a1[5];
  v10.i32[1] = a1[13];
  v10.i32[2] = a1[21];
  v10.i32[3] = a1[29];
  v13.i32[0] = a1[36];
  v12.i32[0] = a1[37];
  v12.i32[1] = a1[45];
  v12.i32[2] = a1[53];
  v12.i32[3] = a1[61];
  v14.i32[0] = a1[2];
  v15.i32[0] = a1[3];
  v15.i32[1] = a1[11];
  v15.i32[2] = a1[19];
  v15.i32[3] = a1[27];
  v16 = vdupq_n_s32(0x1976u);
  v17.i64[0] = 0x400000004000;
  v17.i64[1] = 0x400000004000;
  v18.i64[0] = 0x400000004000;
  v18.i64[1] = 0x400000004000;
  v19.i64[0] = 0x400000004000;
  v19.i64[1] = 0x400000004000;
  v20 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v18, v2, v16), 0xFuLL), v9);
  v21 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v19, v4, v16), 0xFuLL), v7);
  v22.i64[0] = 0x400000004000;
  v22.i64[1] = 0x400000004000;
  v23 = vmlaq_s32(v22, v7, v16);
  v7.i64[0] = 0x400000004000;
  v7.i64[1] = 0x400000004000;
  v24 = vsraq_n_s32(v2, vmlaq_s32(v7, v9, v16), 0xFuLL);
  v25 = vdupq_n_s32(0x5587u);
  v26 = vsraq_n_s32(v4, v23, 0xFuLL);
  v9.i64[0] = 0x400000004000;
  v9.i64[1] = 0x400000004000;
  v27 = vmlaq_s32(v9, v10, v25);
  v16.i64[0] = 0x400000004000;
  v16.i64[1] = 0x400000004000;
  v28 = vmlaq_s32(v16, v12, v25);
  v29 = vdupq_n_s32(0xFFFFAA79);
  v23.i64[0] = 0x400000004000;
  v23.i64[1] = 0x400000004000;
  v30 = vmlaq_s32(v23, v15, v29);
  v31 = vsraq_n_s32(v15, v27, 0xFuLL);
  v27.i64[0] = 0x400000004000;
  v27.i64[1] = 0x400000004000;
  v33.i32[0] = a1[34];
  v32.i32[0] = a1[35];
  v32.i32[1] = a1[43];
  v32.i32[2] = a1[51];
  v32.i32[3] = a1[59];
  v34 = vmlaq_s32(v27, v32, v29);
  v35 = vsraq_n_s32(v32, v28, 0xFuLL);
  v36 = vsraq_n_s32(v12, v34, 0xFuLL);
  v37 = vsraq_n_s32(v10, v30, 0xFuLL);
  v33.i32[1] = a1[42];
  v33.i32[2] = a1[50];
  v33.i32[3] = a1[58];
  v29.i64[0] = 0x400000004000;
  v29.i64[1] = 0x400000004000;
  v38 = vdupq_n_s32(0x3505u);
  v14.i32[1] = a1[10];
  v14.i32[2] = a1[18];
  v14.i32[3] = a1[26];
  v6.i32[1] = a1[14];
  v6.i32[2] = a1[22];
  v6.i32[3] = a1[30];
  v8.i32[1] = a1[46];
  v8.i32[2] = a1[54];
  v8.i32[3] = a1[62];
  v5.i32[1] = a1[8];
  v5.i32[2] = a1[16];
  v5.i32[3] = a1[24];
  v3.i32[1] = a1[40];
  v3.i32[2] = a1[48];
  v3.i32[3] = a1[56];
  v11.i32[1] = a1[12];
  v11.i32[2] = a1[20];
  v11.i32[3] = a1[28];
  v13.i32[1] = a1[44];
  v13.i32[2] = a1[52];
  v13.i32[3] = a1[60];
  v28.i64[0] = 0x400000004000;
  v28.i64[1] = 0x400000004000;
  v39 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v29, v33, v38), 0xFuLL), v8);
  v40 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v28, v14, v38), 0xFuLL), v6);
  v30.i64[0] = 0x400000004000;
  v30.i64[1] = 0x400000004000;
  v41 = vmlaq_s32(v30, v6, v38);
  v6.i64[0] = 0x400000004000;
  v6.i64[1] = 0x400000004000;
  v42 = vsraq_n_s32(v33, vmlaq_s32(v6, v8, v38), 0xFuLL);
  v43 = vsraq_n_s32(v14, v41, 0xFuLL);
  v44 = vaddq_s32(v13, v3);
  v45 = vaddq_s32(v11, v5);
  v46 = vsubq_s32(v3, v13);
  v47 = vsubq_s32(v5, v11);
  v48 = vaddq_s32(v37, v21);
  v49 = vaddq_s32(v36, v20);
  v50 = vsubq_s32(v21, v37);
  v51 = vsubq_s32(v20, v36);
  v52 = vaddq_s32(v31, v26);
  v53 = vaddq_s32(v35, v24);
  v54 = vsubq_s32(v26, v31);
  v55 = vsubq_s32(v24, v35);
  v56 = vaddq_s32(v43, v45);
  v57 = vaddq_s32(v42, v44);
  v58 = vsubq_s32(v45, v43);
  v59 = vsubq_s32(v44, v42);
  v60 = vaddq_s32(v47, v40);
  v61 = vaddq_s32(v46, v39);
  v62 = vsubq_s32(v47, v40);
  v63 = vsubq_s32(v46, v39);
  v64 = (int16x8_t)vaddq_s32(v59, v49);
  v65 = (int16x8_t)vsubq_s32(v59, v49);
  v66 = vdupq_n_s32(0x5A82u);
  v42.i64[0] = 0x400000004000;
  v42.i64[1] = 0x400000004000;
  v67 = vmlaq_s32(v42, vaddq_s32(v51, v55), v66);
  v39.i64[0] = 0x400000004000;
  v39.i64[1] = 0x400000004000;
  v68 = vmlaq_s32(v39, vaddq_s32(v50, v54), v66);
  v69 = (int16x8_t)vsubq_s32(v61, vshrq_n_s32(v67, 0xFuLL));
  v70 = (int16x8_t)vsraq_n_s32(v61, v67, 0xFuLL);
  v71 = (int16x8_t)vsubq_s32(v60, vshrq_n_s32(v68, 0xFuLL));
  v72 = (int16x8_t)vsraq_n_s32(v60, v68, 0xFuLL);
  v68.i64[0] = 0x400000004000;
  v68.i64[1] = 0x400000004000;
  v73 = vmlaq_s32(v68, vsubq_s32(v55, v51), v66);
  v74 = vmlaq_s32(v17, vsubq_s32(v54, v50), v66);
  *a2 = vuzp1q_s16((int16x8_t)vaddq_s32(v56, v52), (int16x8_t)vaddq_s32(v57, v53));
  a2[1] = vuzp1q_s16(v72, v70);
  a2[2] = vuzp1q_s16((int16x8_t)vsraq_n_s32(v62, v74, 0xFuLL), (int16x8_t)vsraq_n_s32(v63, v73, 0xFuLL));
  a2[3] = vuzp1q_s16((int16x8_t)vaddq_s32(v58, v48), v64);
  a2[4] = vuzp1q_s16((int16x8_t)vsubq_s32(v58, v48), v65);
  a2[5] = vuzp1q_s16((int16x8_t)vsubq_s32(v62, vshrq_n_s32(v74, 0xFuLL)), (int16x8_t)vsubq_s32(v63, vshrq_n_s32(v73, 0xFuLL)));
  result = vuzp1q_s16((int16x8_t)vsubq_s32(v56, v52), (int16x8_t)vsubq_s32(v57, v53));
  a2[6] = vuzp1q_s16(v71, v69);
  a2[7] = result;
  return result;
}

uint64_t IDCT(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char v6;
  unsigned __int8 *v7;
  _DWORD *v8;
  int v9;
  _BYTE v11[512];
  uint64_t v12;
  _QWORD v13[65];

  v13[64] = *MEMORY[0x1E0C80C00];
  bzero(v11, 0x600uLL);
  v6 = *a3;
  if (*a3)
  {
    v7 = a3 + 1;
    v8 = v11;
    do
    {
      IDCTRows(a1, v8, v6);
      a1 += 128;
      v8 += 64;
      v9 = *v7++;
      v6 = v9;
    }
    while (v9);
  }
  IDCTCols((uint64_t)v11, a2);
  IDCTCols((uint64_t)&v12, a2 + 256);
  return IDCTCols((uint64_t)v13, a2 + 512);
}

void IDCTFlex(uint64_t a1, int16x8_t *a2, _BYTE *a3)
{
  char v3;
  unsigned __int8 *v6;
  int v7;
  _OWORD v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  v3 = *a3;
  if (*a3)
  {
    v6 = a3 + 1;
    do
    {
      IDCTRows(a1, v8, v3);
      IDCTFlexCols((__int32 *)v8, a2);
      a1 += 128;
      a2 += 8;
      v7 = *v6++;
      v3 = v7;
    }
    while (v7);
  }
}

uint64_t ParavirtualizedVideoDecoder_CreateInstanceWithSpecification()
{
  uint64_t result;

  VTVideoDecoderGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t paravirtualizedVideoDecoder_FillPixelBufferWithYCbCrColor(__CVBuffer *a1, int a2, char a3, char a4)
{
  char *BaseAddressOfPlane;
  char *v8;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v11;
  size_t BytesPerRowOfPlane;
  size_t v13;
  size_t v15;
  _BYTE __pattern4[4];

  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v8 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v15 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v13 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  __pattern4[0] = a3;
  __pattern4[1] = a4;
  __pattern4[2] = a3;
  for (__pattern4[3] = a4; HeightOfPlane; --HeightOfPlane)
  {
    memset(BaseAddressOfPlane, a2, WidthOfPlane);
    BaseAddressOfPlane += BytesPerRowOfPlane;
  }
  for (; v11; --v11)
  {
    memset_pattern4(v8, __pattern4, 2 * v15);
    v8 += v13;
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t paravirtualizedVideoDecoder_DrawCharsToPixelBuffer(__CVBuffer *a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  int WidthOfPlane;
  int HeightOfPlane;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  int v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v16 = WidthOfPlane - a2;
  v17 = HeightOfPlane - a3;
  if (WidthOfPlane - a2 >= 6 * a4 * a6)
    v18 = 6 * a4 * a6;
  else
    v18 = WidthOfPlane - a2;
  if (v17 >= 9 * a4)
    v17 = 9 * a4;
  if (v17 < 1)
    return 0;
  v19 = 0;
  v20 = &BaseAddressOfPlane[BytesPerRowOfPlane * a3 + a2];
  if (6 * a4 * a6 < (uint64_t)v16)
    v16 = 6 * a4 * a6;
  while (v18 < 1)
  {
LABEL_19:
    v20 += BytesPerRowOfPlane;
    if (++v19 == v17)
      return 0;
  }
  v21 = 0;
  while (&v20[v21] < &BaseAddressOfPlane[BytesPerRowOfPlane * HeightOfPlane] && v20 >= BaseAddressOfPlane)
  {
    if (((kGlyphs[9 * *(char *)(a5 + (int)v21 / a4 / 6) - 288 + v19 / a4] << ((int)v21 / a4 % 6)) & 0x80) != 0)
      v20[v21] = -1;
    if (v16 == (_DWORD)++v21)
      goto LABEL_19;
  }
  return 4294954387;
}

uint64_t paravirtualizedVideoDecoder_lookupRetainAndForgetPendingFramePixelBuffersByUUIDs(uint64_t a1, const __CFArray *a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Value;
  uint64_t v11;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 56));
  if (!Mutable)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 64), ValueAtIndex);
      if (Value)
        CFArrayAppendValue(Mutable, Value);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 64), ValueAtIndex);
    }
  }
  if (CFArrayGetCount(Mutable) != Count)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v11 = 0;
  if (!a3)
  {
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 56));
    CFRelease(Mutable);
    return v11;
  }
  *a3 = Mutable;
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 56));
  return v11;
}

uint64_t ParavirtualizedVideoDecoder_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t MessageAndByteStream;
  unsigned int SInt32;
  uint64_t v3;
  CFTypeRef v5;
  CFTypeRef cf;
  unsigned int v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v5 = 0;
  cf = 0;
  MessageAndByteStream = VTParavirtualizationCreateMessageAndByteStream(1684631158, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, 0);
  if ((_DWORD)MessageAndByteStream
    || (MessageAndByteStream = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v5), (_DWORD)MessageAndByteStream))
  {
    v3 = MessageAndByteStream;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v5, 744845938, &v7);
    if (SInt32)
      v3 = SInt32;
    else
      v3 = v7;
  }
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return v3;
}

void ParavirtualizedVideoDecoder_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  *(_QWORD *)DerivedStorage = 0;
  *(_QWORD *)(DerivedStorage + 8) = 0;
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 88);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  if (!VTParavirtualizationCreateMessageAndByteStream(761554275, 0, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, 0))VTParavirtualizationGuestSendMessageToHostAsync((OpaqueCMBlockBuffer *)cf);
  VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)(DerivedStorage + 24));
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  if (cf)
    CFRelease(cf);
}

__CFString *ParavirtualizedVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  unsigned __int8 *DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR("<ParavirtualizedVideoDecoder %p UUID %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x>"), a1, DerivedStorage[24], DerivedStorage[25], DerivedStorage[26], DerivedStorage[27], DerivedStorage[28], DerivedStorage[29], DerivedStorage[30], DerivedStorage[31], DerivedStorage[32], DerivedStorage[33], DerivedStorage[34], DerivedStorage[35], DerivedStorage[36], DerivedStorage[37], DerivedStorage[38],
    DerivedStorage[39]);
  return Mutable;
}

uint64_t ParavirtualizedVideoDecoder_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  uint64_t v7;
  unsigned int v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  cf = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1684238192, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v12);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendCFPropertyList(), (_DWORD)appended)
    || (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v11),
        (_DWORD)appended)
    || (appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v11, 744845938, &v9), (_DWORD)appended))
  {
    v7 = appended;
  }
  else
  {
    v7 = v9;
    if (!v9)
    {
      v7 = VTParavirtualizationMessageCopyCFPropertyList((OpaqueCMBlockBuffer *)v11, 745955692, &v10);
      if (!(_DWORD)v7)
      {
        *a4 = v10;
        v10 = 0;
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return v7;
}

uint64_t ParavirtualizedVideoDecoder_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  uint64_t v8;
  uint64_t v9;
  unsigned int SInt32;
  const void *v11;
  unsigned int v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  cf = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1685284212, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&v16, &v15);
  if (!(_DWORD)appended)
  {
    appended = VTParavirtualizationMessageAppendCFPropertyList();
    if (!(_DWORD)appended)
    {
      v8 = paravirtualizedVideoDecoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(a1, a2, a3, &cf);
      if ((_DWORD)v8 == -19096)
      {
        v9 = 0;
        goto LABEL_14;
      }
      v9 = v8;
      if ((_DWORD)v8)
        goto LABEL_12;
      appended = VTParavirtualizationMessageAppendCFPropertyList();
      if (!(_DWORD)appended)
      {
        appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v16, &v14);
        if (!(_DWORD)appended)
        {
          SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v14, 744845938, &v13);
          if (SInt32)
            v9 = SInt32;
          else
            v9 = v13;
          if (!(_DWORD)v9)
            goto LABEL_14;
          goto LABEL_12;
        }
      }
    }
  }
  v9 = appended;
LABEL_12:
  v11 = (const void *)FigCFCopyCompactDescription();
  if (v11)
    CFRelease(v11);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  return v9;
}

uint64_t paravirtualizedVideoDecoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t Value;
  CFTypeRef v9;

  if (paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce != -1)
    dispatch_once(&paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce, &__block_literal_global_14);
  Value = FigCFDictionaryGetValue();
  if (Value)
    return (*(uint64_t (**)(uint64_t, const void *, _QWORD *))(Value + 8))(a1, a3, a4);
  if (a3)
    v9 = CFRetain(a3);
  else
    v9 = 0;
  *a4 = v9;
  return 0;
}

CFDictionaryRef __paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_block_invoke()
{
  CFDictionaryRef result;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("AV1FilmGrainMode");
  keys[1] = CFSTR("GuestExternalProtectionStatus");
  values[0] = &kParavirtualizedVideoDecoder_BaseClass_block_invoke_specialCasePropertyAndHandlerPairs;
  values[1] = &off_1E2F62918;
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], 0);
  paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_sSpecialCaseHandlersForSettingProperties = (uint64_t)result;
  return result;
}

uint64_t paravirtualizedVideoDecoder_handleAV1FilmGrainModeSetPropertyAndCopyReplacementValue(uint64_t a1, const __CFString *a2, _QWORD *a3)
{
  CFTypeRef v5;

  if (!FigCFEqual())
  {
    if (a2)
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  a2 = CFSTR("Immediate");
  if (!CFSTR("Immediate"))
    goto LABEL_5;
LABEL_3:
  v5 = CFRetain(a2);
LABEL_6:
  *a3 = v5;
  return 0;
}

uint64_t paravirtualizedVideoDecoder_handleGuestExternalProtectionStatusSetPropertyAndCopyReplacementValue(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  int UInt32;
  uint64_t result;
  CFTypeRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UInt32 = FigCFNumberGetUInt32();
  if (*(_DWORD *)(DerivedStorage + 96) == UInt32)
    return 4294948200;
  *(_DWORD *)(DerivedStorage + 96) = UInt32;
  if (a2)
    v8 = CFRetain(a2);
  else
    v8 = 0;
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t ParavirtualizedVideoDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;
  const void *v6;
  uint64_t appended;
  unsigned int SInt32;
  uint64_t v9;
  unsigned int v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v13 = 0;
  cf = 0;
  v12 = 0;
  v11 = 0;
  *DerivedStorage = a2;
  v6 = (const void *)DerivedStorage[2];
  DerivedStorage[2] = a3;
  if (a3)
    CFRetain(a3);
  if (v6)
    CFRelease(v6);
  DerivedStorage[11] = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1685288033, 1, (uint64_t)(DerivedStorage + 3), 0, (CMBlockBufferRef *)&cf, &v13);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendCMFormatDescription((uint64_t)v13, 744907891, (const opaqueCMFormatDescription *)a3), (_DWORD)appended)|| (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v12), (_DWORD)appended))
  {
    v9 = appended;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v12, 744845938, &v11);
    if (SInt32)
      v9 = SInt32;
    else
      v9 = v11;
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t ParavirtualizedVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, uint64_t a4, _DWORD *a5)
{
  return ParavirtualizedVideoDecoder_DecodeFrameWithOptions(a1, a2, a3, a4, 0, a5);
}

uint64_t ParavirtualizedVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFDictionaryRef v6;
  uint64_t SInt32;
  uint64_t v8;
  uint64_t MutableCopy;
  const void *v10;
  unsigned int v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 48))
    goto LABEL_27;
  VTVideoDecoderGetCMBaseObject(a1);
  v5 = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  cf = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  SInt32 = VTParavirtualizationCreateMessageAndByteStream(1685288304, 1, v5 + 24, 0, (CMBlockBufferRef *)&cf, &v15);
  if ((_DWORD)SInt32
    || (SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v14),
        (_DWORD)SInt32)
    || (SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v14, 744845938, &v12), (_DWORD)SInt32))
  {
    v8 = SInt32;
  }
  else
  {
    v8 = v12;
    if (!v12)
    {
      v8 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)v14, 745764208, &v13);
      if (!(_DWORD)v8)
      {
        MutableCopy = FigCFDictionaryCreateMutableCopy();
        FigCFDictionarySetValue();
        *(_QWORD *)(DerivedStorage + 48) = MutableCopy;
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v6)
    CFRelease(v6);
  if (!(_DWORD)v8)
  {
LABEL_27:
    if (a2 && (v10 = *(const void **)(DerivedStorage + 48)) != 0)
    {
      v8 = 0;
      *a2 = CFRetain(v10);
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v8;
}

uint64_t ParavirtualizedVideoDecoder_SetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t CMBaseObject;
  CFMutableDictionaryRef Mutable;
  const __CFArray *v8;
  uint64_t Count;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  const void *ValueAtIndex;
  const void *Value;
  unsigned int v15;
  uint64_t appended;
  unsigned int SInt32;
  const void *v18;
  unsigned int v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v20 = 0;
  v5 = VTParavirtualizationCreateMessageAndByteStream(1684895084, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&v23, &v22);
  if ((_DWORD)v5)
  {
    v12 = v5;
    Mutable = 0;
  }
  else
  {
    CMBaseObject = VTVideoDecoderGetCMBaseObject(a1);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      v10 = Count;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
        Value = CFDictionaryGetValue(a2, ValueAtIndex);
        cf = 0;
        v15 = paravirtualizedVideoDecoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(CMBaseObject, (uint64_t)ValueAtIndex, Value, &cf);
        if (v15 == -19096)
        {
          if (v10 == 1)
          {
            if (Mutable)
              CFRelease(Mutable);
            if (cf)
              CFRelease(cf);
            Mutable = 0;
            if (!v8)
              goto LABEL_19;
LABEL_18:
            CFRelease(v8);
            goto LABEL_19;
          }
        }
        else
        {
          if ((_DWORD)v12)
            v12 = v12;
          else
            v12 = v15;
          if (!v15)
            FigCFDictionarySetValue();
          if (cf)
            CFRelease(cf);
        }
        if (v10 == ++v11)
          goto LABEL_17;
      }
    }
    v12 = 0;
LABEL_17:
    if (v8)
      goto LABEL_18;
LABEL_19:
    if (!(_DWORD)v12)
    {
      appended = VTParavirtualizationMessageAppendCFDictionary(v22, 745566831, Mutable);
      if ((_DWORD)appended
        || (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v23, &v21),
            (_DWORD)appended))
      {
        v12 = appended;
      }
      else
      {
        SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v21, 744845938, &v20);
        if (SInt32)
          v12 = SInt32;
        else
          v12 = v20;
        if (!(_DWORD)v12)
          goto LABEL_28;
      }
    }
  }
  v18 = (const void *)FigCFCopyCompactDescription();
  if (v18)
    CFRelease(v18);
LABEL_28:
  if (Mutable)
    CFRelease(Mutable);
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  return v12;
}

uint64_t ParavirtualizedVideoDecoder_CopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t SInt32;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  CFTypeRef v13;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v11 = 0;
  cf = 0;
  v10 = 0;
  v9 = 0;
  SInt32 = VTParavirtualizationCreateMessageAndByteStream(1685283190, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v11);
  if ((_DWORD)SInt32
    || (SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v10),
        (_DWORD)SInt32)
    || (SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v10, 744845938, &v9), (_DWORD)SInt32))
  {
    v6 = SInt32;
  }
  else
  {
    v6 = v9;
    if (!v9)
    {
      v7 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)v10, 745566831, &v13);
      v6 = v7;
      if (a3)
      {
        if (!(_DWORD)v7)
        {
          *a3 = v13;
          v13 = 0;
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (v13)
    CFRelease(v13);
  return v6;
}

BOOL ParavirtualizedVideoDecoder_CanAcceptFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage;
  int v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  cf = 0;
  v6 = 0;
  v5 = 0;
  if (!VTParavirtualizationCreateMessageAndByteStream(1684234606, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v7)&& !VTParavirtualizationMessageAppendCMFormatDescription((uint64_t)v7, 744907891, a2)&& !VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v6))
  {
    VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v6, 744710510, &v5);
  }
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v5 != 0;
}

uint64_t ParavirtualizedVideoDecoder_FinishDelayedFrames(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  unsigned int SInt32;
  uint64_t v4;
  unsigned int v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  cf = 0;
  v7 = 0;
  v6 = 0;
  v2 = VTParavirtualizationCreateMessageAndByteStream(1684433262, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v8);
  if ((_DWORD)v2
    || (v2 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v7), (_DWORD)v2))
  {
    v4 = v2;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v7, 744845938, &v6);
    if (SInt32)
      v4 = SInt32;
    else
      v4 = v6;
  }
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  return v4;
}

uint64_t ParavirtualizedVideoDecoder_StartTileSession(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  uint64_t appended;
  unsigned int SInt32;
  uint64_t v9;
  unsigned int v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  cf = 0;
  v12 = 0;
  v11 = 0;
  v6 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_QWORD *)(DerivedStorage + 16) = a3;
  if (a3)
    CFRetain(a3);
  if (v6)
    CFRelease(v6);
  appended = VTParavirtualizationCreateMessageAndByteStream(1685288051, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v13);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendCMFormatDescription((uint64_t)v13, 744907891, (const opaqueCMFormatDescription *)a3), (_DWORD)appended)|| (appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v12), (_DWORD)appended))
  {
    v9 = appended;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v12, 744845938, &v11);
    if (SInt32)
      v9 = SInt32;
    else
      v9 = v11;
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t ParavirtualizedVideoDecoder_DecodeTile(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, __CVBuffer *a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  uint64_t appended;
  uint64_t v16;
  int64_t Count;
  const void **v18;
  const void **v19;
  const __CFUUID *v20;
  uint64_t v21;
  char v22;
  const __CFUUID *v23;
  uint64_t v24;
  const __CFDictionary *v25;
  BOOL v26;
  const __CFAllocator *v27;
  CFMutableArrayRef Mutable;
  CFUUIDRef v29;
  const __CFAllocator *v30;
  CFMutableDictionaryRef v31;
  uint64_t v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t SInt32;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  opaqueCMSampleBuffer *v41;
  uint64_t v42;
  os_unfair_lock_s *lock;
  uint64_t v44;
  IOSurfaceRef IOSurface;
  uint64_t v46;
  CFTypeRef v47;
  CFTypeRef cf;
  CFTypeRef v49;
  CFTypeRef v50;
  CMBlockBufferRef v51;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v50 = 0;
  v51 = 0;
  cf = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v14 = DerivedStorage + 24;
  IOSurface = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1685350764, 1, DerivedStorage + 24, 0, &v51, &v50);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendSInt64(), (_DWORD)appended)
    || (appended = VTParavirtualizationMessageAppendVTInt32Point(), (_DWORD)appended)
    || (appended = VTParavirtualizationMessageAppendVTInt32Size(), (_DWORD)appended))
  {
    v36 = appended;
    v20 = 0;
    goto LABEL_60;
  }
  if (a6)
  {
    v41 = a3;
    v42 = DerivedStorage;
    v44 = a2;
    VTVideoDecoderGetCMBaseObject(a1);
    v16 = CMBaseObjectGetDerivedStorage();
    lock = (os_unfair_lock_s *)(v16 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(v16 + 72));
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v16 + 80));
    v18 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    v19 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v16 + 80), v18, v19);
    if (Count < 1)
      goto LABEL_16;
    v20 = 0;
    v21 = 0;
    v22 = 1;
    v40 = v16;
LABEL_8:
    v23 = v20;
    v24 = v21;
    do
    {
      v25 = (const __CFDictionary *)v19[v24];
      if (CFDictionaryGetValue(v25, CFSTR("PixelBufferKey")) == a6)
      {
        CFDictionaryGetValue(v25, CFSTR("TilesUsingPixelBuffer"));
        FigCFArrayAppendInt64();
        v20 = (const __CFUUID *)CFRetain(v18[v24]);
        v22 = 0;
        v21 = v24 + 1;
        v26 = Count - 1 == v24;
        v16 = v40;
        if (v26)
          goto LABEL_20;
        goto LABEL_8;
      }
      ++v24;
    }
    while (Count != v24);
    v20 = v23;
    v16 = v40;
    if ((v22 & 1) != 0)
    {
LABEL_16:
      v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      FigCFArrayAppendInt64();
      v29 = CFUUIDCreate(v27);
      v30 = v27;
      v20 = v29;
      v31 = CFDictionaryCreateMutable(v30, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (v31)
        CFRelease(v31);
      if (Mutable)
        CFRelease(Mutable);
    }
LABEL_20:
    CFDictionaryGetCount(*(CFDictionaryRef *)(v16 + 80));
    os_unfair_lock_unlock(lock);
    free(v18);
    free(v19);
    if (v20)
    {
      v32 = VTParavirtualizationMessageAppendCFUUID((uint64_t)v50, 745895273, v20);
      a2 = v44;
      a3 = v41;
      DerivedStorage = v42;
      if ((_DWORD)v32)
      {
LABEL_59:
        v36 = v32;
LABEL_60:
        v38 = *(_QWORD *)(DerivedStorage + 8);
LABEL_61:
        v39 = v36;
LABEL_62:
        VTDecoderSessionEmitDecodedTile(v38, a2, v39, 0, 0);
        goto LABEL_46;
      }
    }
    else
    {
      a2 = v44;
      a3 = v41;
      DerivedStorage = v42;
    }
  }
  else
  {
    v20 = 0;
  }
  IOSurface = CVPixelBufferGetIOSurface(a6);
  if (!IOSurface)
  {
    v36 = FigSignalErrorAt();
    v38 = *(_QWORD *)(DerivedStorage + 8);
    if ((_DWORD)v36)
      goto LABEL_61;
    v39 = 0;
LABEL_68:
    v36 = 0;
    goto LABEL_62;
  }
  v32 = VTParavirtualizationMessageAppendVTInt32Point();
  if ((_DWORD)v32)
    goto LABEL_59;
  v32 = VTParavirtualizationMessageAppendUInt32();
  if ((_DWORD)v32)
    goto LABEL_59;
  v32 = VTParavirtualizationMessageAppendCMSampleBufferWithLimitAndCopyRemainingData((uint64_t)v50, 745759334, *(_DWORD *)(DerivedStorage + 40), 0x200000uLL, a3, (CFTypeRef *)(DerivedStorage + 88), (CMBlockBufferRef *)&cf);
  if ((_DWORD)v32)
    goto LABEL_59;
  if (cf)
  {
    do
    {
      v32 = VTParavirtualizationMessageChangeMessageFlags(v51, 16, 17);
      if ((_DWORD)v32)
        goto LABEL_59;
      v32 = VTParavirtualizationGuestSendMessageToHostAsync(v51);
      if ((_DWORD)v32)
        goto LABEL_59;
      if (v51)
      {
        CFRelease(v51);
        v51 = 0;
      }
      if (v50)
      {
        CFRelease(v50);
        v50 = 0;
      }
      v32 = VTParavirtualizationCreateMessageAndByteStream(1685350764, 1, v14, 0, &v51, &v50);
      if ((_DWORD)v32)
        goto LABEL_59;
      v32 = VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData((uint64_t)v50, 745759334, 0x200000uLL, (void *)cf, (CMBlockBufferRef *)&v47);
      if ((_DWORD)v32)
        goto LABEL_59;
      if (cf)
        CFRelease(cf);
      v33 = v47;
      v47 = 0;
      cf = v33;
    }
    while (v33);
  }
  v34 = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(v51, (uint64_t)&IOSurface, 1, &v49);
  if ((_DWORD)v34)
  {
    v39 = v34;
    v38 = *(_QWORD *)(DerivedStorage + 8);
    goto LABEL_68;
  }
  SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v49, 744845938, (_DWORD *)&v46 + 1);
  if ((_DWORD)SInt32
    || (SInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v49, 745107046, &v46), (_DWORD)SInt32))
  {
    v36 = SInt32;
  }
  else
  {
    v36 = HIDWORD(v46);
    if (a9)
      *a9 = v46;
  }
LABEL_46:
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (v49)
    CFRelease(v49);
  if (cf)
    CFRelease(cf);
  if (v47)
    CFRelease(v47);
  if (v20)
    CFRelease(v20);
  return v36;
}

uint64_t ParavirtualizedVideoDecoder_FinishDelayedTiles(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  unsigned int SInt32;
  uint64_t v4;
  unsigned int v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  cf = 0;
  v7 = 0;
  v6 = 0;
  v2 = VTParavirtualizationCreateMessageAndByteStream(1685349993, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v8);
  if ((_DWORD)v2
    || (v2 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v7), (_DWORD)v2))
  {
    v4 = v2;
  }
  else
  {
    SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v7, 744845938, &v6);
    if (SInt32)
      v4 = SInt32;
    else
      v4 = v6;
  }
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  return v4;
}

uint64_t ParavirtualizedVideoDecoder_DecodeFrameWithOptions(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t SInt32;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef cf;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  cf = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  appended = VTParavirtualizationCreateMessageAndByteStream(1684435565, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v22);
  if ((_DWORD)appended
    || (appended = VTParavirtualizationMessageAppendSInt64(), (_DWORD)appended)
    || (appended = VTParavirtualizationMessageAppendUInt32(), (_DWORD)appended)
    || a5
    && *(_DWORD *)(DerivedStorage + 40) >= 4u
    && (appended = VTParavirtualizationMessageAppendCFDictionary(v22, 744910704, a5), (_DWORD)appended)
    || (appended = VTParavirtualizationMessageAppendCMSampleBufferWithLimitAndCopyRemainingData((uint64_t)v22, 745759334, *(_DWORD *)(DerivedStorage + 40), 0x200000uLL, a3, (CFTypeRef *)(DerivedStorage + 88), (CMBlockBufferRef *)&v20), (_DWORD)appended))
  {
LABEL_36:
    v15 = appended;
    v17 = appended;
LABEL_37:
    VTDecoderSessionEmitDecodedFrame(*(uint64_t **)DerivedStorage, a2, v17, 0, 0);
    goto LABEL_25;
  }
  if (v20)
  {
    do
    {
      appended = VTParavirtualizationMessageChangeMessageFlags((OpaqueCMBlockBuffer *)cf, 16, 17);
      if ((_DWORD)appended)
        goto LABEL_36;
      appended = VTParavirtualizationGuestSendMessageToHostAsync((OpaqueCMBlockBuffer *)cf);
      if ((_DWORD)appended)
        goto LABEL_36;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v22)
      {
        CFRelease(v22);
        v22 = 0;
      }
      appended = VTParavirtualizationCreateMessageAndByteStream(1684435565, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, &v22);
      if ((_DWORD)appended)
        goto LABEL_36;
      appended = VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData((uint64_t)v22, 745759334, 0x200000uLL, (void *)v20, (CMBlockBufferRef *)&v19);
      if ((_DWORD)appended)
        goto LABEL_36;
      if (v20)
        CFRelease(v20);
      v12 = v19;
      v19 = 0;
      v20 = v12;
    }
    while (v12);
  }
  v13 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, &v21);
  if ((_DWORD)v13)
  {
    v17 = v13;
    v15 = 0;
    goto LABEL_37;
  }
  SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v21, 744845938, (_DWORD *)&v18 + 1);
  if ((_DWORD)SInt32
    || (SInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v21, 745107046, &v18), (_DWORD)SInt32))
  {
    v15 = SInt32;
  }
  else
  {
    v15 = HIDWORD(v18);
    if (a6)
      *a6 = v18;
  }
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  return v15;
}

uint64_t reset_DC_pred(uint64_t result)
{
  *(_WORD *)(result + 3184) = 0;
  *(_QWORD *)(result + 3176) = 0;
  return result;
}

uint64_t marker_detect(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, int a6)
{
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  int SOS;
  _BYTE *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  __int16 v28;
  int v29;
  int v30;
  int16x8_t *v31;
  int v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  char *v37;
  unsigned int v38;
  unsigned __int16 v39;
  int v40;
  int v41;
  int v42;
  __int16 v44;
  __int16 v45;
  _BYTE *v46;
  int v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v52 = 0;
  v51 = 0;
  v6 = *(unsigned __int8 **)a2;
  v7 = *(_QWORD *)(a2 + 56);
  v8 = v7 < 0;
  v9 = *(_QWORD *)a2 + v7;
  if (v8)
    v10 = -1;
  else
    v10 = v9;
  if ((unint64_t)v6 >= *(_QWORD *)(a2 + 64))
    goto LABEL_94;
  *(_QWORD *)a2 = v6 + 1;
  v12 = *v6;
  v48 = 0;
  *(_WORD *)(a2 + 48) = 0;
  if (v12 == 218)
    goto LABEL_6;
  v18 = (_BYTE *)(a1 + 4128);
  while (2)
  {
    if ((_BYTE)v12 == 0xFF)
      goto LABEL_16;
    v19 = *(unsigned __int8 **)a2;
    do
    {
      if ((unint64_t)v19 >= v10)
        goto LABEL_16;
      if ((unint64_t)v19 >= *(_QWORD *)(a2 + 64))
      {
LABEL_94:
        LOWORD(SOS) = -12909;
        return (__int16)SOS;
      }
      *(_QWORD *)a2 = v19 + 1;
      v12 = *v19++;
    }
    while (v12 != 255);
    while (1)
    {
LABEL_16:
      if (v12 != 255)
      {
        if (!(_BYTE)v12)
          goto LABEL_6;
        if ((v12 & 0xFE) == 0xC0)
        {
          v26 = read_SOF(a1, (unint64_t *)a2, a3, a4, (__int16 *)&v51, &v49, a6);
          v48 = v26;
          if (v26)
            goto LABEL_6;
          *v18 = 0;
          goto LABEL_70;
        }
        if (v12 > 0xD9u)
        {
          if (v12 == 219)
          {
            v50 = 0;
            v27 = popbytesCallback(a2, 2, &v50);
            v28 = v50;
            if (!v50)
            {
              v47 = v27 - 2;
              if (v27 == 2)
              {
LABEL_65:
                v48 = 0;
                LOBYTE(v12) = -37;
                goto LABEL_70;
              }
              v46 = v18;
LABEL_46:
              v29 = popbytesCallback(a2, 1, &v50);
              v28 = v50;
              if (!v50)
              {
                v30 = v29 >> 4;
                if (v29 < 0x10 || v30 == 1)
                {
                  if ((v29 & 0xFu) > 3)
                  {
                    v28 = 201;
                  }
                  else
                  {
                    v31 = (int16x8_t *)(a1 + 130 * (v29 & 0xF) + 3410);
                    if (v30 == 1)
                    {
                      v47 -= 129;
                      v32 = 64;
                      v33 = tables;
                      while (1)
                      {
                        v34 = popbytesCallback(a2, 2, &v50);
                        v28 = v50;
                        if (v50)
                          break;
                        if (a6)
                        {
                          v35 = *v33++;
                          *(__int16 *)((char *)v31->i16 + v35) = v34;
                        }
                        if (!--v32)
                          goto LABEL_62;
                      }
                    }
                    else
                    {
                      v47 -= 65;
                      v36 = 64;
                      v37 = tables;
                      while (1)
                      {
                        v34 = popbytesCallback(a2, 1, &v50);
                        v28 = v50;
                        if (v50)
                          break;
                        if (a6)
                        {
                          v38 = *v37++;
                          *(__int16 *)((char *)v31->i16 + v38) = v34;
                        }
                        if (!--v36)
                        {
LABEL_62:
                          v18 = v46;
                          if (a6)
                            scale_QT(v34, v31);
                          if (v47)
                            goto LABEL_46;
                          goto LABEL_65;
                        }
                      }
                    }
                  }
                }
                else
                {
                  v28 = 200;
                }
              }
            }
            v48 = v28;
            goto LABEL_6;
          }
          if (v12 == 218)
          {
            v45 = v49;
            SOS = read_SOS(a1, (unint64_t *)a2, v49, (uint64_t)&v51, a6);
            v48 = SOS;
            if (SOS)
              goto LABEL_6;
            *(_WORD *)(a1 + 3274) = v45;
            return (__int16)SOS;
          }
        }
        else
        {
          if (v12 == 196)
          {
            SOS = read_HT(a1, (uint64_t (*)(uint64_t, uint64_t, __int16 *))popbytesCallback, a2, *(_QWORD *)(a2 + 64) - *(_QWORD *)a2);
            v48 = SOS;
            if (SOS)
              return (__int16)SOS;
            LOBYTE(v12) = -60;
            goto LABEL_70;
          }
          if (v12 == 194)
          {
            if (*(_DWORD *)(a1 + 4100) == 1785750887)
            {
              SOS = read_SOF(a1, (unint64_t *)a2, a3, a4, (__int16 *)&v51, &v49, a6);
              v48 = SOS;
              if (!SOS)
              {
                *v18 = 1;
                v44 = v49;
                *(_DWORD *)(a1 + 4132) = v49;
                *(_WORD *)(a1 + 3274) = v44;
                *(_DWORD *)(a1 + 4184) = (__int16)v51;
                *(_DWORD *)(a1 + 4188) = SWORD1(v51);
                *(_DWORD *)(a1 + 4192) = SWORD2(v51);
                return (__int16)SOS;
              }
            }
            goto LABEL_6;
          }
        }
        if ((v12 & 0xF8) == 0xD0)
          goto LABEL_70;
        if (v12 == 220)
        {
          if (*(_QWORD *)a2 + 4 >= v10)
            goto LABEL_6;
          popbytes(a2, 2, &v48);
          LOWORD(SOS) = v48;
          if (!v48)
          {
            popbytes(a2, 2, &v48);
            LOWORD(SOS) = v48;
            if (!v48)
            {
              LOBYTE(v12) = -36;
              goto LABEL_70;
            }
          }
          return (__int16)SOS;
        }
        if (v12 != 254)
        {
          if (v12 == 221)
          {
            if (*(_QWORD *)a2 + 4 >= v10)
              goto LABEL_6;
            popbytes(a2, 2, &v48);
            LOWORD(SOS) = v48;
            if (!v48)
            {
              v39 = popbytes(a2, 2, &v48);
              *(_WORD *)(a2 + 48) = v39;
              LOWORD(SOS) = v48;
              if (!v48)
              {
                *(_DWORD *)(a2 + 52) = v39 + 1;
                LOBYTE(v12) = -35;
                goto LABEL_70;
              }
            }
            return (__int16)SOS;
          }
          if ((v12 & 0xF0) != 0xE0)
          {
            v21 = v12 & 0xFE;
            goto LABEL_19;
          }
        }
        if (*(_QWORD *)a2 + 2 >= v10)
          goto LABEL_6;
        v40 = popbytes(a2, 2, &v48);
        LOWORD(SOS) = v48;
        if (!v48)
        {
          v41 = v40 - 2;
          if (*(_QWORD *)a2 + v41 >= v10)
            goto LABEL_6;
          while (1)
          {
            v42 = v41 - 0x4000;
            if (v41 < 0x4000)
              break;
            if (*(_QWORD *)a2 + 0x4000 >= v10)
              return FigSignalErrorAt();
            popbytes(a2, 0x4000, &v48);
            LOWORD(SOS) = v48;
            v41 = v42;
            if (v48)
              return (__int16)SOS;
          }
          popbytes(a2, (__int16)v41, &v48);
          LOWORD(SOS) = v48;
          if (!v48)
            goto LABEL_70;
        }
        return (__int16)SOS;
      }
      v20 = *(unsigned __int8 **)a2;
      if (*(_QWORD *)a2 >= v10)
        break;
      if ((unint64_t)v20 >= *(_QWORD *)(a2 + 64))
        goto LABEL_94;
      *(_QWORD *)a2 = v20 + 1;
      LOBYTE(v12) = *v20;
    }
    v21 = -2;
LABEL_19:
    if ((v12 + 63) >= 0xFu && v21 != 222)
    {
      if ((v12 + 16) > 0xDu)
      {
        if (v12 - 216 < 2 || v12 == 1 || v12 > 0xBFu)
          goto LABEL_70;
      }
      else
      {
        if (*(_QWORD *)a2 + 2 >= v10)
          break;
        v22 = popbytes(a2, 2, &v48);
        LOWORD(SOS) = v48;
        if (v48)
          return (__int16)SOS;
        v23 = v22 - 2;
        v24 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 + v23 >= v10)
          break;
        if (v23)
        {
          v25 = *(_QWORD *)(a2 + 64);
          while (v24 < v25)
          {
            *(_QWORD *)a2 = ++v24;
            if (!--v23)
              goto LABEL_70;
          }
          goto LABEL_94;
        }
LABEL_70:
        if (v12 != 218)
          continue;
      }
    }
    break;
  }
LABEL_6:
  LOWORD(SOS) = FigSignalErrorAt();
  return (__int16)SOS;
}

uint64_t read_SOF(uint64_t a1, unint64_t *a2, _DWORD *a3, _DWORD *a4, __int16 *a5, __int16 *a6, int a7)
{
  __int16 v14;
  _BYTE *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v27;
  __int16 v29;

  v29 = 0;
  popbytes((uint64_t)a2, 2, &v29);
  v14 = v29;
  if (!v29)
  {
    v15 = (_BYTE *)*a2;
    if (*a2 >= a2[8])
      return -12909;
    *a2 = (unint64_t)(v15 + 1);
    if (*v15 != 8)
      return -12910;
    *a4 = popbytes((uint64_t)a2, 2, &v29);
    v14 = v29;
    if (!v29)
    {
      *a3 = popbytes((uint64_t)a2, 2, &v29);
      v14 = v29;
      if (!v29)
      {
        v16 = (unsigned __int8 *)*a2;
        if (*a2 < a2[8])
        {
          *a2 = (unint64_t)(v16 + 1);
          v17 = *v16;
          *a6 = v17;
          if ((v17 - 6) < 0xFFFFFFFB)
            return -12910;
          if (a7)
          {
            *(_WORD *)(a1 + 3274) = v17;
            LOWORD(v17) = *a6;
          }
          if ((__int16)v17 < 1)
            return 0;
          v18 = 0;
          v19 = 0;
          LOWORD(v20) = 0;
          v21 = a1 + 3280;
          while (1)
          {
            v22 = (unsigned __int8 *)*a2;
            v23 = a2[8];
            if (*a2 >= v23)
              break;
            *a2 = (unint64_t)(v22 + 1);
            *a5 = *v22;
            if ((unint64_t)(v22 + 1) >= v23)
              return -12909;
            *a2 = (unint64_t)(v22 + 2);
            if ((unint64_t)(v22 + 2) >= v23)
              return -12909;
            v24 = v22[1];
            *a2 = (unint64_t)(v22 + 3);
            v25 = v22[2];
            if (v25 > 3)
              return -12909;
            if (v24 > 0x22 || ((1 << v24) & 0x600060000) == 0)
              return -12909;
            if (a7)
            {
              *(_QWORD *)(v21 + 8 * v18) = a1 + 130 * v25 + 3410;
              if (*a6 == 1)
              {
                *(_WORD *)(a1 + 4096) = 17;
                *(_BYTE *)(a1 + 3405) = 17;
                *(_BYTE *)(a1 + 3400) = 1;
              }
              else
              {
                v27 = v21 + v18;
                *(_BYTE *)(v27 + 125) = v24;
                *(_BYTE *)(v27 + 120) = (v24 >> 4) * (v24 & 0xF);
                if ((__int16)v20 <= (int)(v24 >> 4))
                  v20 = v24 >> 4;
                if (v19 <= (v24 & 0xF))
                  v19 = v24 & 0xF;
                *(_WORD *)(a1 + 4096) = v19 | (16 * v20);
              }
            }
            v14 = 0;
            ++v18;
            ++a5;
            if (v18 >= *a6)
              return v14;
          }
          a6 = a5;
        }
        v14 = -12909;
        *a6 = -12909;
      }
    }
  }
  return v14;
}

uint64_t read_SOS(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, int a5)
{
  __int16 v10;
  unsigned __int8 *v11;
  unint64_t v12;
  _BYTE *v13;
  int v14;
  __int16 v15;
  unsigned __int8 *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  __int16 v27;
  BOOL v28;
  __int16 v30;

  v30 = 0;
  popbytes((uint64_t)a2, 2, &v30);
  v10 = v30;
  if (!v30)
  {
    v11 = (unsigned __int8 *)*a2;
    v12 = a2[8];
    if (*a2 >= v12)
      return -12909;
    v13 = v11 + 1;
    *a2 = (unint64_t)(v11 + 1);
    v14 = *v11;
    if (v14 != a3)
      return 53;
    if (v14)
    {
      v15 = 0;
      while (1)
      {
        v16 = (unsigned __int8 *)*a2;
        v17 = a2[8];
        if (*a2 >= v17)
          return -12909;
        *a2 = (unint64_t)(v16 + 1);
        if ((unint64_t)(v16 + 1) >= v17)
          return -12909;
        v18 = *v16;
        *a2 = (unint64_t)(v16 + 2);
        if (v18 != *(__int16 *)(a4 + 2 * v15))
          return 54;
        v19 = v16[1];
        if (v19 > 0x3F || (v19 & 0xC) != 0)
          return 33;
        if (a5)
        {
          v21 = v19 >> 4;
          v22 = v19 & 0xF;
          v23 = a1 + 24 * v21;
          v24 = a1 + 8 * v15;
          *(_QWORD *)(v24 + 3320) = v23 + 3936;
          *(_QWORD *)(v24 + 3360) = a1 + 24 * v22;
          if (!*(_QWORD *)(v23 + 3944) || !*(_QWORD *)(a1 + 24 * v22 + 8))
            return 40;
        }
        if (v14 <= ++v15)
        {
          v13 = (_BYTE *)*a2;
          v12 = a2[8];
          break;
        }
      }
    }
    if ((unint64_t)v13 >= v12)
      return -12909;
    v25 = v13 + 1;
    *a2 = (unint64_t)(v13 + 1);
    if (*v13)
    {
      if ((unint64_t)v25 < v12)
      {
        *a2 = (unint64_t)(v13 + 2);
        return 18;
      }
      return -12909;
    }
    if ((unint64_t)v25 >= v12)
      return -12909;
    *a2 = (unint64_t)(v13 + 2);
    if ((unint64_t)(v13 + 2) >= v12)
      return -12909;
    v26 = v13[1];
    *a2 = (unint64_t)(v13 + 3);
    if (v13[2])
      v27 = 20;
    else
      v27 = 0;
    if (v26)
      v28 = v26 == 63;
    else
      v28 = 1;
    if (v28)
      return v27;
    else
      return 19;
  }
  return v10;
}

uint64_t read_HT(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, __int16 *), uint64_t a3, unint64_t a4)
{
  int v8;
  __int16 v9;
  int v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  signed int v15;
  uint64_t i;
  unsigned __int8 v17;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  uint64_t k;
  int v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned __int8 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t j;
  int v46;
  unsigned __int8 *v47;
  char *v48;
  uint64_t v49;
  __int16 *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  __int16 v56;
  unsigned __int8 v57[256];
  _BYTE v58[17];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v56 = 0;
  v58[0] = 0;
  v8 = a2(a3, 2, &v56);
  if (v8 > a4)
    return -12909;
  v9 = v56;
  if (v56)
    return v9;
  v11 = v8 - 2;
  if (v8 == 2)
    return 0;
  while (1)
  {
    v12 = a2(a3, 1, &v56);
    v9 = v56;
    if (v56)
      return v9;
    v13 = v12;
    v14 = v12 << 16;
    if ((v12 & 0xFFFC) != 0x10 && v14 > 0x20000 && v14 != 196608)
      return 300;
    if (v11 < 17)
      return -12909;
    v15 = 0;
    v54 = v12 << 16;
    v55 = (__int16)v12;
    for (i = 1; i != 17; ++i)
    {
      v17 = a2(a3, 1, &v56);
      v58[i] = v17;
      v9 = v56;
      if (v56)
        return v9;
      v15 += v17;
    }
    if (v15 > 0x100 || v15 >= v11 - 16)
      return -12909;
    if (v15)
    {
      v19 = 0;
      v20 = v57;
      v11 -= 17;
      while (1)
      {
        *v20 = a2(a3, 1, &v56);
        v9 = v56;
        if (v56)
          return v9;
        ++v20;
        --v11;
        if (v15 <= (__int16)++v19)
          goto LABEL_25;
      }
    }
    v11 -= 17;
LABEL_25:
    v21 = v55;
    if (v55 - 16 >= 4)
      break;
    v22 = (__int16)v15;
    if (!matchesRememberedHT(a1, v55, (uint64_t)v58, v57, (__int16)v15))
    {
      v31 = 0;
      v32 = v13 & 0xF;
      do
      {
        if (v58[v31 + 1] != tables[v31 + 201])
          goto LABEL_55;
        ++v31;
      }
      while (v31 != 16);
      if (v15)
      {
        v33 = 0;
        v34 = v57;
        v35 = &byte_1928E139A;
        while (*v34 == *v35)
        {
          ++v35;
          ++v34;
          if (v15 <= (__int16)++v33)
            goto LABEL_45;
        }
LABEL_55:
        for (j = 0; j != 16; ++j)
        {
          if (v58[j + 1] != tables[j + 218])
            goto LABEL_66;
        }
        if (v15)
        {
          v46 = 0;
          v47 = v57;
          v48 = &byte_1928E143C;
          while (*v47 == *v48)
          {
            ++v48;
            ++v47;
            if (v15 <= (__int16)++v46)
              goto LABEL_62;
          }
LABEL_66:
          DisposeDecodeTable(a1 + 24 * v32);
          if (MakeDecodeTable((_WORD *)0xC, (uint64_t)v58, (uint64_t)v57, (__int16 *)(a1 + 24 * v32)))
          {
            v53 = a1 + 24 * v32;
            goto LABEL_76;
          }
          goto LABEL_67;
        }
LABEL_62:
        v36 = a1 + 24 * v32;
        DisposeDecodeTable(v36);
        v49 = *(_QWORD *)(a1 + 3168);
        v38 = *(_QWORD *)(v49 + 88);
        v39 = *(_OWORD *)(v49 + 72);
      }
      else
      {
LABEL_45:
        v36 = a1 + 24 * v32;
        DisposeDecodeTable(v36);
        v37 = *(_QWORD *)(a1 + 3168);
        v38 = *(_QWORD *)(v37 + 64);
        v39 = *(_OWORD *)(v37 + 48);
      }
      *(_OWORD *)v36 = v39;
      *(_QWORD *)(v36 + 16) = v38;
LABEL_67:
      v52 = v32 | 0x10;
      v51 = a1;
LABEL_68:
      if (rememberHT(v51, v52, (uint64_t)v58, v57, v22))
        return -12904;
    }
LABEL_69:
    if (!v11)
      return v56;
  }
  if (v55 > 3)
    return -1;
  v22 = (__int16)v15;
  if (matchesRememberedHT(a1, v55, (uint64_t)v58, v57, (__int16)v15))
    goto LABEL_69;
  for (k = 0; k != 16; ++k)
  {
    if (v58[k + 1] != tables[k + 167])
      goto LABEL_46;
  }
  if (!v15)
  {
LABEL_35:
    if ((v54 | 0xFFFFu) <= 0x4FFFE)
    {
      v27 = a1 + 24 * v13;
      DisposeDecodeTable(v27 + 3936);
      v28 = *(__int128 **)(a1 + 3168);
      v29 = *v28;
      v30 = *((_QWORD *)v28 + 2);
LABEL_54:
      *(_QWORD *)(v27 + 3952) = v30;
      *(_OWORD *)(v27 + 3936) = v29;
      v21 = v55;
    }
    goto LABEL_65;
  }
  v24 = 0;
  v25 = 0;
  v26 = v57;
  while (v24 == *v26)
  {
    ++v26;
    v24 = (__int16)++v25;
    if (v15 <= (__int16)v25)
      goto LABEL_35;
  }
LABEL_46:
  v40 = 0;
  while (v58[v40 + 1] == tables[v40 + 184])
  {
    if (++v40 == 16)
    {
      if (!v15)
      {
LABEL_53:
        v27 = a1 + 24 * v13;
        DisposeDecodeTable(v27 + 3936);
        v44 = *(_QWORD *)(a1 + 3168);
        v29 = *(_OWORD *)(v44 + 24);
        v30 = *(_QWORD *)(v44 + 40);
        goto LABEL_54;
      }
      v41 = 0;
      v42 = 0;
      v43 = v57;
      while (v41 == *v43)
      {
        ++v43;
        v41 = (__int16)++v42;
        if (v15 <= (__int16)v42)
          goto LABEL_53;
      }
      break;
    }
  }
  v50 = (__int16 *)(a1 + 24 * v13 + 3936);
  DisposeDecodeTable((uint64_t)v50);
  if (!MakeDecodeTable((_WORD *)5, (uint64_t)v58, (uint64_t)v57, v50))
  {
LABEL_65:
    v51 = a1;
    v52 = v21;
    goto LABEL_68;
  }
  v53 = (uint64_t)v50;
LABEL_76:
  DisposeDecodeTable(v53);
  return -12904;
}

uint64_t consume_progressive_mode_markers(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  int v6;
  int HT;
  _BYTE *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __int16 *);
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __int16 *);
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int16x8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  signed int v33;
  __int16 v34;
  unsigned __int8 *v35;
  unint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  __int16 v47;
  int v48;
  unsigned __int16 v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  unint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unint64_t v58;
  unsigned __int8 *v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v2 = *(unsigned __int8 **)a2;
  v3 = *(_QWORD *)(a2 + 56);
  if (v3 < 0)
    v4 = -1;
  else
    v4 = *(_QWORD *)a2 + v3;
  if ((unint64_t)v2 >= *(_QWORD *)(a2 + 64))
    goto LABEL_6;
  *(_QWORD *)a2 = v2 + 1;
  v6 = *v2;
  v60 = 0;
  *(_WORD *)(a2 + 48) = 0;
  if (v6 == 217)
    goto LABEL_6;
  v10 = (_BYTE *)(a1 + 4408);
  v11 = a1 + 4344;
  v12 = (uint64_t (*)(uint64_t, uint64_t, __int16 *))popbytesCallback;
  while (2)
  {
    v13 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= v4)
      goto LABEL_6;
    if ((_BYTE)v6 == 0xFF)
    {
      v15 = *(unsigned __int8 **)a2;
LABEL_20:
      v17 = v15;
      while (v6 == 255)
      {
        if ((unint64_t)v17 >= v4)
          goto LABEL_110;
        if ((unint64_t)v17 >= *(_QWORD *)(a2 + 64))
          goto LABEL_6;
        *(_QWORD *)a2 = v17 + 1;
        LOBYTE(v6) = *v17;
        ++v15;
        ++v17;
      }
      if (v6 > 0xC3u)
      {
        switch(v6)
        {
          case 0xC4u:
            HT = read_HT(a1, v12, a2, *(_QWORD *)(a2 + 64) - (_QWORD)v15);
            v60 = HT;
            if (HT)
              return (__int16)HT;
            LOBYTE(v6) = -60;
            goto LABEL_123;
          case 0xDAu:
            v61 = 0;
            popbytes(a2, 2, &v61);
            if (v61)
              goto LABEL_6;
            v30 = *(unsigned __int8 **)a2;
            v31 = *(_QWORD *)(a2 + 64);
            if (*(_QWORD *)a2 >= v31)
              goto LABEL_6;
            v32 = v30 + 1;
            *(_QWORD *)a2 = v30 + 1;
            v33 = *v30;
            *(_DWORD *)(a1 + 4392) = v33;
            if (*(_DWORD *)(a1 + 4132) < v33)
              goto LABEL_6;
            if (v33)
            {
              v34 = 0;
              while (1)
              {
                v35 = *(unsigned __int8 **)a2;
                v36 = *(_QWORD *)(a2 + 64);
                if (*(_QWORD *)a2 >= v36)
                  goto LABEL_6;
                *(_QWORD *)a2 = v35 + 1;
                if ((unint64_t)(v35 + 1) >= v36)
                  goto LABEL_6;
                v37 = *v35;
                *(_QWORD *)a2 = v35 + 2;
                v38 = *(_DWORD *)(a1 + 4132);
                if (v38 < 1)
                  goto LABEL_6;
                v39 = v35[1];
                if (*(_DWORD *)(a1 + 4184) != v37)
                {
                  v42 = 0;
                  while (v38 > ++v42)
                  {
                    v40 = v42;
                    if (*(_DWORD *)(a1 + 4 * v42 + 4184) == v37)
                    {
                      v41 = v42;
                      goto LABEL_68;
                    }
                  }
                  goto LABEL_6;
                }
                v40 = 0;
                v41 = 0;
LABEL_68:
                *(_DWORD *)(a1 + 4 * v34 + 4396) = v40;
                if ((v39 & 0xF) > 3)
                  goto LABEL_6;
                v43 = a1 + 8 * v41;
                *(_QWORD *)(v43 + 4296) = a1 + 24 * (v39 & 0xF);
                if (v39 > 0x3F)
                  goto LABEL_6;
                *(_QWORD *)(v43 + 4320) = a1 + 24 * (v39 >> 4) + 3936;
                if (v33 <= ++v34)
                {
                  v32 = *(unsigned __int8 **)a2;
                  v31 = *(_QWORD *)(a2 + 64);
                  break;
                }
              }
            }
            if ((unint64_t)v32 >= v31)
            {
              *v10 = -109;
              goto LABEL_6;
            }
            *(_QWORD *)a2 = v32 + 1;
            v44 = *v32;
            *v10 = v44;
            if ((unint64_t)(v32 + 1) >= v31)
            {
              v10[1] = -109;
              goto LABEL_6;
            }
            *(_QWORD *)a2 = v32 + 2;
            v45 = v32[1];
            v10[1] = v45;
            if (v44 > v45 || v45 > 0x3F || (unint64_t)(v32 + 2) >= v31)
              goto LABEL_6;
            *(_QWORD *)a2 = v32 + 3;
            v46 = v32[2];
            v10[2] = v46 >> 4;
            v10[3] = v46 & 0xF;
            if (v33)
            {
              v47 = 0;
              while (1)
              {
                v48 = *(_DWORD *)(a1 + 4 * v47 + 4396);
                if (!v44 && !*(_QWORD *)(*(_QWORD *)(a1 + 8 * (__int16)v48 + 4320) + 8))
                  goto LABEL_6;
                if (v45 && !*(_QWORD *)(*(_QWORD *)(a1 + 8 * (__int16)v48 + 4296) + 8))
                  goto LABEL_6;
                if (v33 <= ++v47)
                {
                  if (*(_QWORD *)(a1 + 3280)
                    && (v33 < 2 || *(_QWORD *)(a1 + 3288) && *(_QWORD *)(a1 + 3296)))
                  {
                    goto LABEL_97;
                  }
                  goto LABEL_6;
                }
              }
            }
            if (!*(_QWORD *)(a1 + 3280))
              goto LABEL_6;
LABEL_97:
            *(_DWORD *)(v11 + 8) = 0;
            *(_QWORD *)v11 = 0;
            v50 = DecodeProgressiveScan(a1, a2);
            v60 = v50;
            if (v50)
              goto LABEL_6;
            v51 = *(unsigned __int8 **)a2;
            if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 64))
              goto LABEL_6;
            *(_QWORD *)a2 = v51 + 1;
            LOBYTE(v6) = *v51;
            goto LABEL_123;
          case 0xDBu:
            v18 = v10;
            v19 = v11;
            v20 = v12;
            v62 = 0;
            v21 = popbytesCallback(a2, 2, &v62);
            if (v62)
              goto LABEL_6;
            v22 = v21 - 2;
            if (v21 != 2)
            {
LABEL_34:
              v23 = popbytesCallback(a2, 1, &v62);
              if (!v62)
              {
                v24 = v23 >> 4 != 1 && v23 > 0xF;
                if (!v24 && (v23 & 0xFu) <= 3)
                {
                  v26 = (int16x8_t *)(a1 + 130 * (v23 & 0xF) + 3410);
                  if (v23 >> 4 == 1)
                  {
                    v27 = 0;
                    v22 -= 129;
                    while (1)
                    {
                      v28 = popbytesCallback(a2, 2, &v62);
                      if (v62)
                        break;
                      *(__int16 *)((char *)v26->i16 + tables[v27++]) = v28;
                      if ((_DWORD)v27 == 64)
                        goto LABEL_50;
                    }
                  }
                  else
                  {
                    v29 = 0;
                    v22 -= 65;
                    while (1)
                    {
                      v28 = popbytesCallback(a2, 1, &v62);
                      if (v62)
                        break;
                      *(__int16 *)((char *)v26->i16 + tables[v29++]) = v28;
                      if ((_DWORD)v29 == 64)
                      {
LABEL_50:
                        scale_QT(v28, v26);
                        if (v22)
                          goto LABEL_34;
                        goto LABEL_51;
                      }
                    }
                  }
                }
              }
              goto LABEL_6;
            }
LABEL_51:
            v60 = 0;
            LOBYTE(v6) = -37;
            v12 = v20;
            v11 = v19;
            v10 = v18;
            goto LABEL_123;
        }
      }
      else
      {
        LOWORD(HT) = -12909;
        if (v6 - 192 < 3 || !(_BYTE)v6)
          return (__int16)HT;
      }
      if ((v6 & 0xF8) != 0xD0)
      {
        if (v6 == 220)
        {
          popbytes(a2, 2, &v60);
          LOWORD(HT) = v60;
          if (v60)
            return (__int16)HT;
          popbytes(a2, 2, &v60);
          LOWORD(HT) = v60;
          if (v60)
            return (__int16)HT;
          LOBYTE(v6) = -36;
          goto LABEL_123;
        }
        if (v6 != 254)
        {
          if (v6 == 221)
          {
            popbytes(a2, 2, &v60);
            LOWORD(HT) = v60;
            if (v60)
              return (__int16)HT;
            v49 = popbytes(a2, 2, &v60);
            *(_WORD *)(a2 + 48) = v49;
            LOWORD(HT) = v60;
            if (v60)
              return (__int16)HT;
            *(_DWORD *)(a2 + 52) = v49 + 1;
            LOBYTE(v6) = -35;
            goto LABEL_123;
          }
          if ((v6 & 0xF0) != 0xE0)
          {
LABEL_110:
            if ((v6 + 63) < 0xFu || (v6 & 0xFE) == 0xDE)
              goto LABEL_6;
            if ((v6 + 16) > 0xDu)
            {
              if (v6 != 1)
              {
                if (v6 == 216)
                  goto LABEL_6;
                if (v6 == 217)
                {
                  LOWORD(HT) = 0;
                  return (__int16)HT;
                }
                if (v6 <= 0xBFu)
                  goto LABEL_6;
              }
            }
            else
            {
              v56 = popbytes(a2, 2, &v60);
              LOWORD(HT) = v60;
              if (v60)
                return (__int16)HT;
              v57 = v56 - 2;
              if (v57)
              {
                v58 = *(_QWORD *)(a2 + 64);
                v59 = *(unsigned __int8 **)a2;
                while ((unint64_t)v59 < v58)
                {
                  *(_QWORD *)a2 = ++v59;
                  if (!--v57)
                    goto LABEL_123;
                }
                goto LABEL_6;
              }
            }
            goto LABEL_123;
          }
        }
        v52 = popbytes(a2, 2, &v60);
        LOWORD(HT) = v60;
        if (v60)
          return (__int16)HT;
        v53 = v52 - 2;
        if (v53)
        {
          v54 = *(_QWORD *)(a2 + 64);
          v55 = *(unsigned __int8 **)a2;
          while ((unint64_t)v55 < v54)
          {
            *(_QWORD *)a2 = ++v55;
            if (!--v53)
              goto LABEL_123;
          }
          goto LABEL_6;
        }
      }
LABEL_123:
      if (v6 != 217)
        continue;
      goto LABEL_6;
    }
    break;
  }
  v14 = *(_QWORD *)(a2 + 64);
  while ((unint64_t)v13 < v14)
  {
    v15 = v13 + 1;
    *(_QWORD *)a2 = v13 + 1;
    v6 = *v13;
    v16 = v6 == 255 || (unint64_t)v15 >= v4;
    ++v13;
    if (v16)
      goto LABEL_20;
  }
LABEL_6:
  LOWORD(HT) = -12909;
  return (__int16)HT;
}

void scale_QT(uint64_t a1, int16x8_t *a2)
{
  uint64_t v2;
  int v3;
  _BYTE *v4;
  int16x8_t *v5;
  unint64_t v6;
  double v7;
  double v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x8_t *v16;
  _OWORD v17[4];
  _BYTE v18[256];
  uint64_t v19;

  v2 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v17[0] = xmmword_1928E1270;
  v17[1] = xmmword_1928E1280;
  v17[2] = xmmword_1928E1290;
  v17[3] = xmmword_1928E12A0;
  v3 = 1;
  v4 = v18;
  v5 = a2;
  do
  {
    v6 = 0;
    v7 = 262144.0;
    v8 = *((double *)v17 + v2) * 4.0 * 262144.0;
    do
    {
      LOWORD(v7) = v5[v6 / 8].i16[0];
      v7 = v8 * *(double *)((char *)v17 + v6) * (double)*(unint64_t *)&v7;
      if (v3 <= (int)v7)
        v3 = (int)v7;
      *(_DWORD *)&v4[4 * v6] = (int)v7;
      v6 += 8;
    }
    while (v6 != 64);
    ++v2;
    v4 += 4;
    v5 = (int16x8_t *)((char *)v5 + 2);
  }
  while (v2 != 8);
  v9 = -1;
  do
  {
    v10 = v9 + 1;
    v11 = 1 << (v9 + 1);
    v12 = (int)(v11 + v3) >> (v9++ + 2);
  }
  while (v12 >= 0x10000);
  v13 = 0;
  v14 = vdupq_n_s32(v11);
  v15 = vnegq_s32(vdupq_n_s32(v10 + 1));
  v16 = a2;
  do
  {
    *v16++ = vuzp1q_s16((int16x8_t)vshlq_s32(vaddq_s32(*(int32x4_t *)&v18[v13], v14), v15), (int16x8_t)vshlq_s32(vaddq_s32(*(int32x4_t *)&v18[v13 + 16], v14), v15));
    v13 += 32;
  }
  while (v13 != 256);
  a2[8].i16[0] = 12 - v10;
}

uint64_t matchesRememberedHT(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v5 = (uint64_t *)(a1 + 8 * a2 + 4032);
  if (a2 >= 16)
    v5 = (uint64_t *)(a1 + 8 * (a2 & 0xF) + 4064);
  v6 = *v5;
  if (v6)
  {
    v7 = 0;
    while (*(unsigned __int8 *)(v6 + v7) == *(unsigned __int8 *)(a3 + 1 + v7))
    {
      if (++v7 == 16)
      {
        if (a5 < 1)
          return 1;
        v8 = (unsigned __int16)a5;
        v9 = (unsigned __int8 *)(v6 + 16);
        while (1)
        {
          v11 = *v9++;
          v10 = v11;
          v12 = *a4++;
          if (v10 != v12)
            break;
          if (!--v8)
            return 1;
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t rememberHT(uint64_t a1, int a2, uint64_t a3, const void *a4, int a5)
{
  size_t v9;
  _OWORD *v10;
  _OWORD *v11;
  void **v12;
  void *v13;

  v9 = a5;
  v10 = malloc_type_malloc(a5 + 16, 0xAB6DF505uLL);
  v11 = v10;
  if (v10)
  {
    *v10 = *(_OWORD *)(a3 + 1);
    memmove(v10 + 1, a4, v9);
  }
  if (a2 > 15)
  {
    v12 = (void **)(a1 + 8 * (a2 & 0xF) + 4064);
    v13 = *v12;
    if (!*v12)
      goto LABEL_8;
    goto LABEL_7;
  }
  v12 = (void **)(a1 + 8 * a2 + 4032);
  v13 = *v12;
  if (*v12)
LABEL_7:
    free(v13);
LABEL_8:
  *v12 = v11;
  if (v11)
    return 0;
  else
    return 4294954392;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  float v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  size_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  unsigned int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  unsigned int v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  unsigned int v119;
  float v132;
  float v133;
  float v134;
  float v139;
  float v140;
  float v145;
  float v146;
  float v147;
  float v152;
  float v153;
  float v154;
  float v156;
  float v157;
  float v158;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v174;
  float v176;
  float v177;
  float v178;
  float v180;
  float v200;
  float v201;
  float v202;
  char v203;
  float v204;
  float v205;
  char v206;
  float v207;
  float v208;
  char v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;

  v4 = *(_QWORD *)((char *)result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)((char *)result + 20);
    v10 = *(_QWORD *)((char *)result + 36);
    v11 = *(_QWORD *)((char *)result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = result[14];
    v14 = (_QWORD *)result[16];
    v15 = result[15] + 2 * (result[13] * a2 / v5);
    v16 = result[19];
    v18 = (_QWORD *)result[7];
    v17 = (uint64_t *)result[8];
    v19 = (uint64_t *)result[17];
    v20 = *v17;
    v21 = v17[1];
    v217 = v17[2];
    v219 = v18[2];
    v22 = (char *)(v219 + v217 * v11 + v10);
    v23 = *v19;
    v24 = v19[1];
    v25 = v19[2];
    v218 = v14[2];
    v26 = (char *)(v218 + v25 * v15 + v13);
    v27 = 8191.0;
    *(float *)&v28 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v29 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v30 = (float)LODWORD(a4);
    v31 = *(float *)&v28 * *(float *)v16;
    v32 = *(float *)&v28 * *(float *)(v16 + 8);
    v33 = *(float *)&v28 * *(float *)(v16 + 16);
    v34 = *(float *)&v28 * *(float *)(v16 + 20);
    v35 = *(float *)&v28 * *(float *)(v16 + 28);
    LOWORD(v28) = *(_WORD *)(v16 + 144);
    v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 146);
    v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 148);
    v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 150);
    *(float *)&v39 = (float)v28;
    v249 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v16 + 152);
    v243 = (float)v39;
    v244 = v37;
    v241 = *(float *)(v16 + 40);
    v242 = *(float *)(v16 + 36);
    v239 = *(float *)(v16 + 48) * 0.25;
    v240 = *(float *)(v16 + 44);
    v237 = *(float *)(v16 + 56) * 0.25;
    v238 = *(float *)(v16 + 52) * 0.25;
    v40 = *(float *)(v16 + 60) * 0.25;
    v235 = *(float *)(v16 + 64) * 0.25;
    v236 = v40;
    v233 = *(float *)(v16 + 68) * 0.25;
    v234 = *(float *)(v16 + 72);
    v231 = *(float *)(v16 + 80);
    v232 = *(float *)(v16 + 76);
    v230 = *(float *)(v16 + 84);
    v228 = *(float *)(v16 + 88);
    v225 = *(float *)(v16 + 96);
    v226 = *(float *)(v16 + 92);
    v41 = *(float *)(v16 + 104);
    v223 = v41;
    v224 = *(float *)(v16 + 100);
    v42 = v16 + 164;
    v43 = v18[1];
    v44 = (_BYTE *)(*v18 + *v17 * v11 + v10);
    v45 = (_BYTE *)(v43 + v21 * v11 + v10);
    result = (_QWORD *)(v16 + 16548);
    if (v43)
      v46 = v45;
    else
      v46 = 0;
    v47 = *v14 + v23 * v15;
    v48 = v14[1] + v19[1] * (v15 / 2);
    v49 = v16 + 32932;
    v50 = (_BYTE *)(v47 + v13);
    v51 = v48 + v13;
    v52 = *(float *)(v16 + 108);
    v53 = *(float *)(v16 + 112);
    v55 = *(float *)(v16 + 116);
    v54 = *(float *)(v16 + 120);
    v247 = v33;
    v248 = v32;
    v245 = v35;
    v246 = v34;
    v222 = v30;
    v229 = v29;
    v227 = v31;
    v220 = v55;
    v221 = v53;
    do
    {
      v56 = &v50[v23];
      v57 = &v46[v21];
      v58 = &v44[v20];
      if (v9)
      {
        v59 = 0;
        v60 = &v44[v20];
        v61 = &v46[v21];
        v62 = &v50[v23];
        do
        {
          if (v46)
          {
            LOBYTE(v41) = *v46;
            *(float *)&v63 = (float)LODWORD(v41);
            v64 = *(float *)&v63 - v30;
            LOBYTE(v63) = v46[1];
            v65 = (float)v63 - v30;
            v46 += 2;
            v66 = v32 * v65;
            v67 = (float)(v34 * v65) + (float)(v64 * v33);
            v68 = v35 * v64;
          }
          else
          {
            v68 = 0.0;
            v67 = 0.0;
            v66 = 0.0;
          }
          LOBYTE(v40) = *v44;
          v69 = v31 * (float)((float)LODWORD(v40) - v29);
          v70 = v66 + v69;
          v71 = (float)(v66 + v69) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v67 + v69;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v68 + v69;
          if (v75 <= 8191.0)
          {
            v27 = v75;
            if (v75 < 0.0)
              v27 = 0.0;
          }
          if (v46)
          {
            LOBYTE(v75) = *v46;
            v76 = (float)LODWORD(v75) - v30;
            LOBYTE(v73) = v46[1];
            v77 = (float)LODWORD(v73) - v30;
            v46 += 2;
            v78 = v32 * v77;
            v79 = (float)(v34 * v77) + (float)(v76 * v33);
            v80 = v35 * v76;
          }
          else
          {
            v80 = 0.0;
            v79 = 0.0;
            v78 = 0.0;
          }
          LOBYTE(v70) = v44[1];
          v81 = v31 * (float)((float)LODWORD(v70) - v29);
          v82 = v78 + v81;
          v83 = 8191.0;
          v84 = 8191.0;
          if (v82 <= 8191.0)
          {
            v84 = v82;
            if (v82 < 0.0)
              v84 = 0.0;
          }
          v85 = v79 + v81;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v80 + v81;
          if (v87 <= 8191.0)
          {
            v83 = v87;
            if (v87 < 0.0)
              v83 = 0.0;
          }
          if (v61)
          {
            LOBYTE(v87) = *v61;
            *(float *)&v88 = (float)LODWORD(v87);
            v81 = *(float *)&v88 - v30;
            LOBYTE(v88) = v61[1];
            v89 = (float)v88 - v30;
            v61 += 2;
            v90 = v32 * v89;
            v91 = (float)(v34 * v89) + (float)(v81 * v33);
            v92 = v35 * v81;
          }
          else
          {
            v92 = 0.0;
            v91 = 0.0;
            v90 = 0.0;
          }
          LOBYTE(v81) = *v60;
          v93 = v31 * (float)((float)LODWORD(v81) - v29);
          v94 = v90 + v93;
          v95 = 8191.0;
          v71 = (float)(v90 + v93) <= 8191.0;
          v96 = 8191.0;
          if (v71)
          {
            v96 = v94;
            if (v94 < 0.0)
              v96 = 0.0;
          }
          v97 = v91 + v93;
          v71 = (float)(v91 + v93) <= 8191.0;
          v98 = 8191.0;
          if (v71)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v92 + v93;
          if (v99 <= 8191.0)
          {
            v95 = v99;
            if (v99 < 0.0)
              v95 = 0.0;
          }
          if (v61)
          {
            LOBYTE(v99) = *v61;
            *(float *)&v100 = (float)LODWORD(v99);
            v97 = *(float *)&v100 - v30;
            LOBYTE(v100) = v61[1];
            v101 = (float)v100 - v30;
            v61 += 2;
            v102 = v32 * v101;
            v103 = (float)(v34 * v101) + (float)(v97 * v33);
            v104 = v35 * v97;
          }
          else
          {
            v104 = 0.0;
            v103 = 0.0;
            v102 = 0.0;
          }
          LOBYTE(v97) = v60[1];
          v105 = v31 * (float)((float)LODWORD(v97) - v29);
          v106 = v102 + v105;
          v71 = (float)(v102 + v105) <= 8191.0;
          v107 = 8191.0;
          if (v71)
          {
            v107 = v106;
            if (v106 < 0.0)
              v107 = 0.0;
          }
          v108 = v103 + v105;
          v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            v109 = v108;
            if (v108 < 0.0)
              v109 = 0.0;
          }
          v110 = v104 + v105;
          v71 = (float)(v104 + v105) <= 8191.0;
          v111 = 8191.0;
          if (v71)
          {
            v111 = v110;
            if (v110 < 0.0)
              v111 = 0.0;
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          v119 = llroundf(fminf(fmaxf(v27, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v42 + 2 * v119);
          __asm { FCVT            S30, H20 }
          _H20 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          v132 = fmaxf(_S0, fmaxf(_S19, _S30));
          v133 = (float)((float)((float)(v53 * _S19) + (float)(v52 * _S0)) + (float)(v55 * _S30)) + (float)(v54 * v132);
          v134 = 8191.0;
          if (v133 <= 8191.0)
          {
            v134 = (float)((float)((float)(v53 * _S19) + (float)(v52 * _S0)) + (float)(v55 * _S30))
                 + (float)(v54 * v132);
            if (v133 < 0.0)
              v134 = 0.0;
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *((_WORD *)result + llroundf(v134));
          v139 = (float)((float)((float)(v53 * _S22) + (float)(v52 * _S21)) + (float)(v55 * _S23))
               + (float)(v54 * fmaxf(_S21, fmaxf(_S22, _S23)));
          v140 = 8191.0;
          if (v139 <= 8191.0)
          {
            v140 = v139;
            if (v139 < 0.0)
              v140 = 0.0;
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *((_WORD *)result + llroundf(v140));
          v145 = fmaxf(_S9, fmaxf(_S10, _S11));
          v146 = (float)((float)((float)(v53 * _S10) + (float)(v52 * _S9)) + (float)(v55 * _S11)) + (float)(v54 * v145);
          v147 = 8191.0;
          if (v146 <= 8191.0)
          {
            v147 = (float)((float)((float)(v53 * _S10) + (float)(v52 * _S9)) + (float)(v55 * _S11))
                 + (float)(v54 * v145);
            if (v146 < 0.0)
              v147 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          v152 = _S0 * _S1;
          v153 = _S19 * _S1;
          v154 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          v156 = _S21 * _S0;
          v157 = _S22 * _S0;
          v158 = _S23 * _S0;
          LOWORD(_S0) = *((_WORD *)result + llroundf(v147));
          __asm { FCVT            S1, H0 }
          v160 = _S9 * _S1;
          v161 = _S10 * _S1;
          v162 = _S11 * _S1;
          v163 = (float)((float)((float)(v53 * _S31) + (float)(v52 * _S29)) + (float)(v55 * _S8))
               + (float)(v54 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v164 = 8191.0;
          if (v163 <= 8191.0)
          {
            v164 = v163;
            if (v163 < 0.0)
              v164 = 0.0;
          }
          _H21 = *((_WORD *)result + llroundf(v164));
          __asm { FCVT            S21, H21 }
          v167 = _S29 * _S21;
          v168 = _S31 * _S21;
          v169 = _S8 * _S21;
          v170 = (float)((float)(v232 * v153) + (float)(v152 * v234)) + (float)(v154 * v231);
          v171 = (float)((float)(v228 * v153) + (float)(v152 * v230)) + (float)(v154 * v226);
          _S7 = (float)((float)(v224 * v153) + (float)(v152 * v225)) + (float)(v154 * v223);
          _S19 = (float)((float)(v232 * v157) + (float)(v156 * v234)) + (float)(v158 * v231);
          v174 = (float)((float)(v228 * v157) + (float)(v156 * v230)) + (float)(v158 * v226);
          _S5 = (float)((float)(v224 * v157) + (float)(v156 * v225)) + (float)(v158 * v223);
          v176 = (float)((float)(v232 * v161) + (float)(v160 * v234)) + (float)(v162 * v231);
          v177 = (float)((float)(v228 * v161) + (float)(v160 * v230)) + (float)(v162 * v226);
          v178 = (float)((float)(v224 * v161) + (float)(v160 * v225)) + (float)(v162 * v223);
          _S1 = (float)(v228 * v168) + (float)(v167 * v230);
          v180 = (float)(v224 * v168) + (float)(v167 * v225);
          _S22 = (float)((float)(v232 * v168) + (float)(v167 * v234)) + (float)(v169 * v231);
          _S23 = _S1 + (float)(v169 * v226);
          _S21 = v180 + (float)(v169 * v223);
          _H0 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          __asm { FCVT            S3, H0 }
          _H0 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S5, H5
          }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          __asm { FCVT            S20, H7 }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S21, H21
          }
          v200 = (float)((float)((float)(v241 * _S0) + (float)(v242 * _S3)) + (float)(v240 * _S1)) + v36;
          if (v200 < v36)
            v201 = v36;
          else
            v201 = (float)((float)((float)(v241 * _S0) + (float)(v242 * _S3)) + (float)(v240 * _S1)) + v36;
          v71 = v200 <= v38;
          v202 = (float)((float)((float)(v241 * _S6) + (float)(v242 * _S4)) + (float)(v240 * _S5)) + v36;
          if (!v71)
            v201 = v38;
          v203 = llroundf(v201);
          if (v202 < v36)
            v204 = v36;
          else
            v204 = (float)((float)((float)(v241 * _S6) + (float)(v242 * _S4)) + (float)(v240 * _S5)) + v36;
          v71 = v202 <= v38;
          v205 = (float)((float)((float)(v241 * _S7) + (float)(v242 * _S20)) + (float)(v240 * _S19)) + v36;
          if (!v71)
            v204 = v38;
          v206 = llroundf(v204);
          if (v205 < v36)
            v207 = v36;
          else
            v207 = (float)((float)((float)(v241 * _S7) + (float)(v242 * _S20)) + (float)(v240 * _S19)) + v36;
          v71 = v205 <= v38;
          v208 = (float)((float)((float)(v241 * _S23) + (float)(v242 * _S22)) + (float)(v240 * _S21)) + v36;
          if (!v71)
            v207 = v38;
          v209 = llroundf(v207);
          if (v208 < v36)
            v210 = v36;
          else
            v210 = (float)((float)((float)(v241 * _S23) + (float)(v242 * _S22)) + (float)(v240 * _S21)) + v36;
          if (v208 <= v38)
            v211 = v210;
          else
            v211 = v38;
          v212 = (float)((float)(_S3 + _S4) + _S20) + _S22;
          v213 = (float)((float)(_S0 + _S6) + _S7) + _S23;
          *v50 = v203;
          v50[1] = v206;
          *v62 = v209;
          v62[1] = llroundf(v211);
          v214 = (float)((float)(_S1 + _S5) + _S19) + _S21;
          v215 = (float)((float)(v244 + (float)(v212 * v239)) + (float)(v213 * v238)) + (float)(v214 * v237);
          v40 = v243;
          if (v215 <= v243)
          {
            v40 = (float)((float)(v244 + (float)(v212 * v239)) + (float)(v213 * v238)) + (float)(v214 * v237);
            if (v215 < v249)
              v40 = v249;
          }
          v216 = (float)((float)(v244 + (float)(v212 * v236)) + (float)(v213 * v235)) + (float)(v214 * v233);
          *(_BYTE *)(v51 + v59) = llroundf(v40);
          v41 = v243;
          v29 = v229;
          v31 = v227;
          v32 = v248;
          if (v216 <= v243)
          {
            v41 = v216;
            if (v216 < v249)
              v41 = v249;
          }
          v44 += 2;
          v60 += 2;
          v50 += 2;
          v62 += 2;
          *(_BYTE *)(v51 + v59 + 1) = llroundf(v41);
          v59 += 2;
          v34 = v246;
          v33 = v247;
          v35 = v245;
          v27 = 8191.0;
          v30 = v222;
          v55 = v220;
          v53 = v221;
        }
        while (v9 > v59);
      }
      v44 = &v58[v20];
      v46 = &v57[v21];
      v50 = &v56[v23];
      v51 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v219 && v218)
    {
      do
      {
        result = memcpy(v26, v22, v9);
        v22 += v217;
        v26 += v25;
        --v12;
      }
      while (v12);
    }
    else if (v218)
    {
      do
      {
        if (v9)
          result = memset(v26, 255, v9);
        v26 += v25;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  size_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  unsigned int v140;
  float v142;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v151;
  float v152;
  float v155;
  float v156;
  float v170;
  float v171;
  float v172;
  char v173;
  float v174;
  float v175;
  char v176;
  float v177;
  float v178;
  char v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;

  v4 = *(_QWORD *)((char *)result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)((char *)result + 20);
    v10 = *(_QWORD *)((char *)result + 36);
    v11 = *(_QWORD *)((char *)result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = result[14];
    v14 = (_QWORD *)result[16];
    v15 = result[15] + 2 * (result[13] * a2 / v5);
    v16 = result[19];
    v18 = (_QWORD *)result[7];
    v17 = (uint64_t *)result[8];
    v19 = (uint64_t *)result[17];
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v188 = v18[2];
    v23 = (char *)(v188 + v22 * v11 + v10);
    v24 = *v19;
    v25 = v19[1];
    v26 = v19[2];
    v187 = v14[2];
    v27 = (char *)(v187 + v26 * v15 + v13);
    *(float *)&v28 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v29 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v30 = (float)LODWORD(a4);
    v31 = *(float *)&v28 * *(float *)v16;
    v32 = *(float *)&v28 * *(float *)(v16 + 8);
    v33 = *(float *)&v28 * *(float *)(v16 + 16);
    v34 = *(float *)&v28 * *(float *)(v16 + 20);
    v35 = *(float *)&v28 * *(float *)(v16 + 28);
    LOWORD(v28) = *(_WORD *)(v16 + 144);
    v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 146);
    v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 148);
    v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 150);
    *(float *)&v39 = (float)v28;
    v206 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v16 + 152);
    v200 = (float)v39;
    v201 = v37;
    v198 = *(float *)(v16 + 40);
    v199 = *(float *)(v16 + 36);
    v196 = *(float *)(v16 + 48) * 0.25;
    v197 = *(float *)(v16 + 44);
    v194 = *(float *)(v16 + 56) * 0.25;
    v195 = *(float *)(v16 + 52) * 0.25;
    v192 = *(float *)(v16 + 64) * 0.25;
    v193 = *(float *)(v16 + 60) * 0.25;
    v40 = *(float *)(v16 + 72);
    v190 = *(float *)(v16 + 68) * 0.25;
    v191 = v40;
    v41 = *(float *)(v16 + 76);
    v42 = *(float *)(v16 + 80);
    v189 = v41;
    v43 = *(float *)(v16 + 84);
    v44 = *(float *)(v16 + 88);
    v45 = *(float *)(v16 + 92);
    v46 = *(float *)(v16 + 96);
    v47 = *(float *)(v16 + 100);
    v48 = *(float *)(v16 + 104);
    v49 = v18[1];
    v50 = (_BYTE *)(*v18 + *v17 * v11 + v10);
    v51 = (_BYTE *)(v49 + v21 * v11 + v10);
    v52 = v16 + 16548;
    result = (_QWORD *)(v16 + 164);
    if (v49)
      v53 = v51;
    else
      v53 = 0;
    v54 = (_BYTE *)(*v14 + v24 * v15 + v13);
    v55 = v14[1] + v19[1] * (v15 / 2) + v13;
    v204 = v33;
    v205 = v32;
    v202 = v35;
    v203 = v34;
    do
    {
      v56 = &v54[v24];
      v57 = &v53[v21];
      v58 = &v50[v20];
      if (v9)
      {
        v59 = 0;
        v60 = &v50[v20];
        v61 = &v53[v21];
        v62 = &v54[v24];
        do
        {
          if (v53)
          {
            LOBYTE(v41) = *v53;
            *(float *)&v63 = (float)LODWORD(v41);
            v64 = *(float *)&v63 - v30;
            LOBYTE(v63) = v53[1];
            v65 = (float)v63 - v30;
            v53 += 2;
            v66 = v32 * v65;
            v40 = v34 * v65;
            v67 = v40 + (float)(v64 * v33);
            v68 = v35 * v64;
          }
          else
          {
            v68 = 0.0;
            v67 = 0.0;
            v66 = 0.0;
          }
          LOBYTE(v40) = *v50;
          v69 = v31 * (float)((float)LODWORD(v40) - v29);
          v70 = v66 + v69;
          v71 = (float)(v66 + v69) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v67 + v69;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v68 + v69;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          if (v53)
          {
            LOBYTE(v75) = *v53;
            v77 = (float)LODWORD(v75) - v30;
            LOBYTE(v69) = v53[1];
            v78 = (float)LODWORD(v69) - v30;
            v53 += 2;
            v79 = v32 * v78;
            v80 = (float)(v34 * v78) + (float)(v77 * v33);
            v81 = v35 * v77;
          }
          else
          {
            v81 = 0.0;
            v80 = 0.0;
            v79 = 0.0;
          }
          LOBYTE(v70) = v50[1];
          v82 = v31 * (float)((float)LODWORD(v70) - v29);
          v83 = v79 + v82;
          v84 = 8191.0;
          v85 = 8191.0;
          if (v83 <= 8191.0)
          {
            v85 = v83;
            if (v83 < 0.0)
              v85 = 0.0;
          }
          v86 = v80 + v82;
          v87 = 8191.0;
          if ((float)(v80 + v82) <= 8191.0)
          {
            v87 = v80 + v82;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v81 + v82;
          if (v88 <= 8191.0)
          {
            v84 = v88;
            if (v88 < 0.0)
              v84 = 0.0;
          }
          if (v61)
          {
            LOBYTE(v88) = *v61;
            v89 = (float)LODWORD(v88) - v30;
            LOBYTE(v86) = v61[1];
            v90 = (float)LODWORD(v86) - v30;
            v61 += 2;
            v91 = v32 * v90;
            v80 = v34 * v90;
            v92 = v80 + (float)(v89 * v33);
            v93 = v35 * v89;
          }
          else
          {
            v93 = 0.0;
            v92 = 0.0;
            v91 = 0.0;
          }
          LOBYTE(v80) = *v60;
          v94 = v31 * (float)((float)LODWORD(v80) - v29);
          v95 = v91 + v94;
          v96 = 8191.0;
          v97 = 8191.0;
          if (v95 <= 8191.0)
          {
            v97 = v95;
            if (v95 < 0.0)
              v97 = 0.0;
          }
          v98 = v92 + v94;
          v71 = (float)(v92 + v94) <= 8191.0;
          v99 = 8191.0;
          if (v71)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v93 + v94;
          if (v100 <= 8191.0)
          {
            v96 = v100;
            if (v100 < 0.0)
              v96 = 0.0;
          }
          if (v61)
          {
            LOBYTE(v100) = *v61;
            v101 = (float)LODWORD(v100) - v30;
            LOBYTE(v98) = v61[1];
            v102 = (float)LODWORD(v98) - v30;
            v61 += 2;
            v103 = v32 * v102;
            v98 = v34 * v102;
            v104 = v98 + (float)(v101 * v33);
            v105 = v35 * v101;
          }
          else
          {
            v105 = 0.0;
            v104 = 0.0;
            v103 = 0.0;
          }
          LOBYTE(v98) = v60[1];
          v106 = v29;
          v107 = v31 * (float)((float)LODWORD(v98) - v29);
          v108 = v103 + v107;
          v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            v109 = v108;
            if (v108 < 0.0)
              v109 = 0.0;
          }
          v110 = v104 + v107;
          v71 = (float)(v104 + v107) <= 8191.0;
          v111 = 8191.0;
          if (v71)
          {
            v111 = v110;
            if (v110 < 0.0)
              v111 = 0.0;
          }
          v112 = v105 + v107;
          v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            v113 = v112;
            if (v112 < 0.0)
              v113 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S27, H27
          }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          v140 = llroundf(fminf(fmaxf(v113, 0.0), 8191.0));
          _S1 = (float)((float)(v189 * _S3) + (float)(_S0 * v191)) + (float)(_S6 * v42);
          v142 = (float)((float)(v44 * _S3) + (float)(_S0 * v43)) + (float)(_S6 * v45);
          _S3 = (float)((float)(v47 * _S3) + (float)(_S0 * v46)) + (float)(_S6 * v48);
          v144 = (float)((float)(v189 * _S25) + (float)(_S24 * v191)) + (float)(_S27 * v42);
          v145 = (float)((float)(v44 * _S25) + (float)(_S24 * v43)) + (float)(_S27 * v45);
          v146 = (float)((float)(v47 * _S25) + (float)(_S24 * v46)) + (float)(_S27 * v48);
          v147 = (float)((float)(v189 * _S5) + (float)(_S4 * v191)) + (float)(_S17 * v42);
          v148 = (float)((float)(v44 * _S5) + (float)(_S4 * v43)) + (float)(_S17 * v45);
          v149 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S17 * v48);
          _S0 = (float)(v189 * _S7) + (float)(_S21 * v191);
          v151 = (float)(v44 * _S7) + (float)(_S21 * v43);
          v152 = (float)(v47 * _S7) + (float)(_S21 * v46);
          LOWORD(_S7) = *((_WORD *)result + v140);
          __asm { FCVT            S7, H7 }
          _S21 = _S0 + (float)(_S7 * v42);
          v155 = v151 + (float)(_S7 * v45);
          v156 = v152 + (float)(_S7 * v48);
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H1
            FCVT            S17, H3
          }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H21
            FCVT            S19, H19
          }
          v170 = (float)((float)((float)(v198 * _S0) + (float)(v199 * _S5)) + (float)(v197 * _S4)) + v36;
          if (v170 < v36)
            v171 = v36;
          else
            v171 = (float)((float)((float)(v198 * _S0) + (float)(v199 * _S5)) + (float)(v197 * _S4)) + v36;
          v71 = v170 <= v38;
          v172 = (float)((float)((float)(v198 * _S24) + (float)(v199 * _S6)) + (float)(v197 * _S17)) + v36;
          if (!v71)
            v171 = v38;
          v173 = llroundf(v171);
          if (v172 < v36)
            v174 = v36;
          else
            v174 = (float)((float)((float)(v198 * _S24) + (float)(v199 * _S6)) + (float)(v197 * _S17)) + v36;
          v71 = v172 <= v38;
          v175 = (float)((float)((float)(v198 * _S7) + (float)(v199 * _S1)) + (float)(v197 * _S25)) + v36;
          if (!v71)
            v174 = v38;
          v176 = llroundf(v174);
          if (v175 < v36)
            v177 = v36;
          else
            v177 = (float)((float)((float)(v198 * _S7) + (float)(v199 * _S1)) + (float)(v197 * _S25)) + v36;
          v71 = v175 <= v38;
          v178 = (float)((float)((float)(v198 * _S20) + (float)(v199 * _S3)) + (float)(v197 * _S19)) + v36;
          if (!v71)
            v177 = v38;
          v179 = llroundf(v177);
          if (v178 < v36)
            v180 = v36;
          else
            v180 = (float)((float)((float)(v198 * _S20) + (float)(v199 * _S3)) + (float)(v197 * _S19)) + v36;
          if (v178 <= v38)
            v181 = v180;
          else
            v181 = v38;
          v182 = (float)((float)(_S5 + _S6) + _S1) + _S3;
          v183 = (float)((float)(_S0 + _S24) + _S7) + _S20;
          *v54 = v173;
          v54[1] = v176;
          *v62 = v179;
          v62[1] = llroundf(v181);
          v40 = (float)((float)(_S4 + _S17) + _S25) + _S19;
          v184 = (float)((float)(v201 + (float)(v182 * v196)) + (float)(v183 * v195)) + (float)(v40 * v194);
          v185 = v200;
          if (v184 <= v200)
          {
            v185 = (float)((float)(v201 + (float)(v182 * v196)) + (float)(v183 * v195)) + (float)(v40 * v194);
            if (v184 < v206)
              v185 = v206;
          }
          v186 = (float)((float)(v201 + (float)(v182 * v193)) + (float)(v183 * v192)) + (float)(v40 * v190);
          *(_BYTE *)(v55 + v59) = llroundf(v185);
          v41 = v200;
          v29 = v106;
          v33 = v204;
          v32 = v205;
          if (v186 <= v200)
          {
            v41 = v186;
            if (v186 < v206)
              v41 = v206;
          }
          v50 += 2;
          v60 += 2;
          v54 += 2;
          v62 += 2;
          *(_BYTE *)(v55 + v59 + 1) = llroundf(v41);
          v59 += 2;
          v35 = v202;
          v34 = v203;
        }
        while (v9 > v59);
      }
      v50 = &v58[v20];
      v53 = &v57[v21];
      v54 = &v56[v24];
      v55 += v25;
      v8 += 2;
    }
    while (v12 > v8);
    if (v188 && v187)
    {
      do
      {
        result = memcpy(v27, v23, v9);
        v23 += v22;
        v27 += v26;
        --v12;
      }
      while (v12);
    }
    else if (v187)
    {
      do
      {
        if (v9)
          result = memset(v27, 255, v9);
        v27 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_rgb_420vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  char *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  size_t v77;
  _BYTE *v78;
  _BYTE *v79;
  _BYTE *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  unsigned int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  unsigned int v100;
  float v101;
  float v102;
  float v103;
  unsigned int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  char v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;

  v13 = *(_QWORD *)((char *)result + 28);
  v14 = 2 * *(unsigned __int8 *)result;
  v15 = v13 * a2 / v14;
  v16 = (v13 + v13 * a2) / v14;
  if (2 * v16 == 2 * v15)
    return result;
  v17 = 0;
  v18 = *(_QWORD *)((char *)result + 20);
  v19 = *(_QWORD *)((char *)result + 36);
  v20 = *(_QWORD *)((char *)result + 44) + 2 * v15;
  v21 = 2 * v16 - 2 * v15;
  v22 = result[14];
  v23 = (_QWORD *)result[16];
  v24 = result[15] + 2 * (result[13] * a2 / v14);
  v25 = result[19];
  v27 = (_QWORD *)result[7];
  v26 = (uint64_t *)result[8];
  v28 = (uint64_t *)result[17];
  v29 = *v26;
  v30 = v26[1];
  v31 = v26[2];
  v32 = v27[2];
  v33 = (char *)(v32 + v31 * v20 + v19);
  v34 = *v28;
  v35 = v28[1];
  v36 = v28[2];
  v37 = v23[2];
  v38 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
  LOWORD(a6) = *(_WORD *)(v25 + 140);
  LOWORD(a7) = *(_WORD *)(v25 + 142);
  v39 = *(float *)v25;
  v40 = *(float *)(v25 + 8);
  v41 = *(float *)(v25 + 16);
  v42 = *(float *)(v25 + 20);
  v43 = *(float *)(v25 + 28);
  LOWORD(v8) = *(_WORD *)(v25 + 144);
  LOWORD(v9) = *(_WORD *)(v25 + 146);
  LOWORD(v10) = *(_WORD *)(v25 + 148);
  LOWORD(v11) = *(_WORD *)(v25 + 150);
  LOWORD(v12) = *(_WORD *)(v25 + 152);
  v44 = *(float *)(v25 + 36);
  v45 = *(float *)(v25 + 40);
  v46 = *(float *)(v25 + 44);
  v47 = *(float *)(v25 + 48);
  v48 = *(float *)(v25 + 52);
  v49 = *(float *)(v25 + 56);
  v50 = *(float *)(v25 + 60);
  v51 = *(float *)(v25 + 64);
  v52 = *(float *)(v25 + 68);
  v53 = v27[1];
  v54 = (_BYTE *)(*v27 + v29 * v20 + v19);
  v55 = (_BYTE *)(v53 + v30 * v20 + v19);
  v56 = (char *)(v37 + v36 * v24 + v22);
  v57 = (float)LODWORD(a6);
  v58 = (float)LODWORD(a7);
  v59 = v38 * v39;
  v60 = v38 * v40;
  v61 = v38 * v41;
  v62 = v38 * v42;
  v63 = v38 * v43;
  v64 = (float)v8;
  v65 = (float)v9;
  v66 = (float)v10;
  v67 = (float)v11;
  v68 = (float)v12;
  v69 = v47 * 0.25;
  v136 = v48 * 0.25;
  v137 = v47 * 0.25;
  v134 = v50 * 0.25;
  v135 = v49 * 0.25;
  v70 = v51 * 0.25;
  v71 = v52 * 0.25;
  v132 = v52 * 0.25;
  v133 = v51 * 0.25;
  if (v53)
    v72 = v55;
  else
    v72 = 0;
  v73 = (_BYTE *)(*v23 + v34 * v24 + v22);
  v74 = *(_QWORD *)(result[16] + 8) + v35 * (v24 / 2) + v22;
  do
  {
    result = &v73[v34];
    v75 = &v72[v30];
    v76 = &v54[v29];
    if (v18)
    {
      v77 = 0;
      v78 = &v54[v29];
      v79 = &v72[v30];
      v80 = &v73[v34];
      do
      {
        v81 = 0.0;
        if (v72)
        {
          LOBYTE(v71) = *v72;
          v71 = (float)LODWORD(v71) - v58;
          LOBYTE(v69) = v72[1];
          v82 = (float)LODWORD(v69) - v58;
          v72 += 2;
          v83 = v60 * v82;
          v84 = (float)(v62 * v82) + (float)(v71 * v61);
          v85 = v63 * v71;
          if (v72)
          {
            LOBYTE(v71) = *v72;
            v71 = (float)LODWORD(v71) - v58;
            LOBYTE(v81) = v72[1];
            v86 = (float)LODWORD(v81) - v58;
            v72 += 2;
            v87 = v60 * v86;
            v88 = (float)(v62 * v86) + (float)(v71 * v61);
            v81 = v63 * v71;
            goto LABEL_13;
          }
        }
        else
        {
          v85 = 0.0;
          v84 = 0.0;
          v83 = 0.0;
        }
        v88 = 0.0;
        v87 = 0.0;
LABEL_13:
        v89 = 0.0;
        if (!v79)
        {
          v94 = 0.0;
          v93 = 0.0;
          v92 = 0.0;
LABEL_17:
          v99 = 0.0;
          v98 = 0.0;
          goto LABEL_18;
        }
        LOBYTE(v71) = *v79;
        v90 = (float)LODWORD(v71) - v58;
        LOBYTE(v7) = v79[1];
        v91 = (float)LODWORD(v7) - v58;
        v79 += 2;
        v92 = v60 * v91;
        v93 = (float)(v62 * v91) + (float)(v90 * v61);
        v94 = v63 * v90;
        if (!v79)
          goto LABEL_17;
        LOBYTE(v90) = *v79;
        *(float *)&v95 = (float)LODWORD(v90);
        v96 = *(float *)&v95 - v58;
        LOBYTE(v95) = v79[1];
        v97 = (float)v95 - v58;
        v79 += 2;
        v98 = v60 * v97;
        v99 = (float)(v62 * v97) + (float)(v96 * v61);
        v89 = v63 * v96;
LABEL_18:
        LOBYTE(v70) = *v54;
        *(float *)&v100 = v59 * (float)((float)LODWORD(v70) - v57);
        v101 = v83 + *(float *)&v100;
        v102 = v84 + *(float *)&v100;
        v103 = v85 + *(float *)&v100;
        LOBYTE(v100) = v54[1];
        *(float *)&v104 = v59 * (float)((float)v100 - v57);
        v105 = v87 + *(float *)&v104;
        v106 = v88 + *(float *)&v104;
        v107 = v81 + *(float *)&v104;
        LOBYTE(v104) = *v78;
        v108 = v59 * (float)((float)v104 - v57);
        v109 = v92 + v108;
        v110 = v93 + v108;
        v111 = v94 + v108;
        LOBYTE(v94) = v78[1];
        v112 = v59 * (float)((float)LODWORD(v94) - v57);
        v113 = v98 + v112;
        v114 = v99 + v112;
        v115 = v89 + v112;
        v7 = (float)((float)((float)(v45 * v102) + (float)(v44 * v101)) + (float)(v46 * v103)) + v64;
        v116 = (float)((float)((float)(v45 * v106) + (float)(v44 * v105)) + (float)(v46 * v107)) + v64;
        v117 = (float)((float)((float)(v45 * v110) + (float)(v44 * v109)) + (float)(v46 * v111)) + v64;
        if (v7 < v64)
          v118 = v64;
        else
          v118 = (float)((float)((float)(v45 * v102) + (float)(v44 * v101)) + (float)(v46 * v103)) + v64;
        if (v7 > v66)
          v118 = v66;
        *v73 = llroundf(v118);
        if (v116 < v64)
          v119 = v64;
        else
          v119 = (float)((float)((float)(v45 * v106) + (float)(v44 * v105)) + (float)(v46 * v107)) + v64;
        if (v116 <= v66)
          v120 = v119;
        else
          v120 = v66;
        v121 = llroundf(v120);
        v122 = (float)((float)((float)(v45 * v114) + (float)(v44 * v113)) + (float)(v46 * v115)) + v64;
        v73[1] = v121;
        if (v117 < v64)
          v123 = v64;
        else
          v123 = (float)((float)((float)(v45 * v110) + (float)(v44 * v109)) + (float)(v46 * v111)) + v64;
        if (v117 <= v66)
          v124 = v123;
        else
          v124 = v66;
        *v80 = llroundf(v124);
        if (v122 < v64)
          v125 = v64;
        else
          v125 = (float)((float)((float)(v45 * v114) + (float)(v44 * v113)) + (float)(v46 * v115)) + v64;
        if (v122 <= v66)
          v126 = v125;
        else
          v126 = v66;
        v80[1] = llroundf(v126);
        v127 = (float)((float)(v101 + v105) + v109) + v113;
        v128 = (float)((float)(v102 + v106) + v110) + v114;
        v129 = (float)((float)(v103 + v107) + v111) + v115;
        v130 = (float)((float)(v65 + (float)(v127 * v137)) + (float)(v128 * v136)) + (float)(v129 * v135);
        v69 = v68;
        if (v130 <= v68)
        {
          v69 = (float)((float)(v65 + (float)(v127 * v137)) + (float)(v128 * v136)) + (float)(v129 * v135);
          if (v130 < v67)
            v69 = v67;
        }
        v70 = v132;
        v131 = (float)((float)(v65 + (float)(v127 * v134)) + (float)(v128 * v133)) + (float)(v129 * v132);
        *(_BYTE *)(v74 + v77) = llroundf(v69);
        v71 = v68;
        if (v131 <= v68)
        {
          v71 = v131;
          if (v131 < v67)
            v71 = v67;
        }
        v54 += 2;
        v78 += 2;
        v73 += 2;
        v80 += 2;
        *(_BYTE *)(v74 + v77 + 1) = llroundf(v71);
        v77 += 2;
      }
      while (v18 > v77);
    }
    v54 = &v76[v29];
    v72 = &v75[v30];
    v73 = (char *)result + v34;
    v74 += v35;
    v17 += 2;
  }
  while (v21 > v17);
  if (v32 && v37)
  {
    do
    {
      result = memcpy(v56, v33, v18);
      v33 += v31;
      v56 += v36;
      --v21;
    }
    while (v21);
  }
  else if (v37)
  {
    do
    {
      if (v18)
        result = memset(v56, 255, v18);
      v56 += v36;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_GCD(_QWORD *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  float v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char v57;
  float v58;
  float v59;
  float v60;
  float v61;
  char *v62;
  _BYTE *v63;
  _BYTE *v64;
  unint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  char *v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  unsigned int v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  unsigned int v124;
  float v137;
  float v138;
  float v139;
  float v144;
  float v145;
  float v150;
  float v151;
  float v152;
  float v157;
  float v158;
  float v159;
  float v161;
  float v162;
  float v163;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v181;
  float v182;
  float v183;
  float v188;
  float v204;
  float v205;
  float v206;
  unsigned int v207;
  float v208;
  float v209;
  unsigned int v210;
  float v211;
  float v212;
  unsigned int v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  _WORD *v220;
  float v221;
  uint64_t v222;
  unint64_t v223;
  _WORD *v224;
  unsigned __int8 *v225;
  __int16 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;

  v4 = *(_QWORD *)((char *)result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)((char *)result + 20);
    v10 = *(_QWORD *)((char *)result + 36);
    v11 = *(_QWORD *)((char *)result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = result[14];
    v14 = (uint64_t *)result[16];
    v15 = result[15] + 2 * (result[13] * a2 / v5);
    v16 = result[19];
    v17 = (_QWORD *)result[7];
    v18 = (uint64_t *)result[8];
    v19 = (uint64_t *)result[17];
    v20 = *v18;
    v21 = v18[1];
    v227 = v18[2];
    v230 = v17[2];
    v22 = (unsigned __int8 *)(v230 + v227 * v11 + v10);
    v23 = *v19;
    v24 = v19[1];
    v228 = v19[2];
    v229 = v14[2];
    v25 = (char *)(v229 + v228 * v15 + 2 * v13);
    v26 = 8191.0;
    *(float *)&v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v29 = (float)LODWORD(a4);
    v30 = *(float *)&v27 * *(float *)v16;
    v31 = *(float *)&v27 * *(float *)(v16 + 8);
    v32 = *(float *)&v27 * *(float *)(v16 + 16);
    v33 = *(float *)&v27 * *(float *)(v16 + 20);
    v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    *(float *)&v36 = (float)v27;
    v255 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v16 + 148);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v16 + 150);
    *(float *)&v38 = (float)v36;
    v260 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    v253 = *(float *)(v16 + 36);
    v254 = (float)v38;
    v251 = *(float *)(v16 + 44);
    v252 = *(float *)(v16 + 40);
    v249 = *(float *)(v16 + 52) * 0.25;
    v250 = *(float *)(v16 + 48) * 0.25;
    v247 = *(float *)(v16 + 60) * 0.25;
    v248 = *(float *)(v16 + 56) * 0.25;
    v39 = *(float *)(v16 + 64) * 0.25;
    v245 = *(float *)(v16 + 72);
    v246 = v39;
    v243 = *(float *)(v16 + 76);
    v244 = *(float *)(v16 + 68) * 0.25;
    v241 = *(float *)(v16 + 84);
    v242 = *(float *)(v16 + 80);
    v239 = *(float *)(v16 + 88);
    v236 = *(float *)(v16 + 96);
    v237 = *(float *)(v16 + 92);
    v40 = *(float *)(v16 + 104);
    v234 = v40;
    v235 = *(float *)(v16 + 100);
    result = (_QWORD *)(v16 + 164);
    v41 = v16 + 16548;
    v42 = v17[1];
    v43 = (_BYTE *)(*v17 + *v18 * v11 + v10);
    if (v42)
      v44 = (_BYTE *)(v42 + v21 * v11 + v10);
    else
      v44 = 0;
    v45 = *(unsigned __int8 *)(v16 + 132);
    v46 = 16 - v45;
    _CF = v45 >= 0x11;
    v49 = *v14;
    v48 = v14[1];
    v50 = v49 + v23 * v15;
    if (_CF)
      v51 = 0;
    else
      v51 = v46;
    if (v15 >= 0)
      v52 = v15;
    else
      v52 = v15 + 1;
    v53 = v48 + v24 * (v52 >> 1);
    v54 = v16 + 32932;
    v55 = (char *)(v50 + 2 * v13);
    v56 = v53 + 2 * v13;
    v57 = v51;
    v58 = *(float *)(v16 + 108);
    v59 = *(float *)(v16 + 112);
    v61 = *(float *)(v16 + 116);
    v60 = *(float *)(v16 + 120);
    v258 = v32;
    v259 = v31;
    v256 = v34;
    v257 = v33;
    v233 = (float)LODWORD(a4);
    v240 = v28;
    v238 = v30;
    v231 = v61;
    v232 = v59;
    do
    {
      v62 = &v55[v23];
      v63 = &v44[v21];
      v64 = &v43[v20];
      if (v9)
      {
        v65 = 0;
        v66 = &v43[v20];
        v67 = &v44[v21];
        v68 = &v55[v23];
        do
        {
          if (v44)
          {
            LOBYTE(v40) = *v44;
            *(float *)&v69 = (float)LODWORD(v40);
            v70 = *(float *)&v69 - v29;
            LOBYTE(v69) = v44[1];
            v71 = (float)v69 - v29;
            v44 += 2;
            v72 = v31 * v71;
            v73 = (float)(v33 * v71) + (float)(v70 * v32);
            v74 = v34 * v70;
          }
          else
          {
            v74 = 0.0;
            v73 = 0.0;
            v72 = 0.0;
          }
          LOBYTE(v39) = *v43;
          v75 = v30 * (float)((float)LODWORD(v39) - v28);
          v76 = v72 + v75;
          v77 = (float)(v72 + v75) <= 8191.0;
          v78 = 8191.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v74 + v75;
          if (v81 <= 8191.0)
          {
            v26 = v81;
            if (v81 < 0.0)
              v26 = 0.0;
          }
          if (v44)
          {
            LOBYTE(v81) = *v44;
            v82 = (float)LODWORD(v81) - v29;
            LOBYTE(v79) = v44[1];
            v83 = (float)LODWORD(v79) - v29;
            v44 += 2;
            v84 = v31 * v83;
            v85 = (float)(v33 * v83) + (float)(v82 * v32);
            v86 = v34 * v82;
          }
          else
          {
            v86 = 0.0;
            v85 = 0.0;
            v84 = 0.0;
          }
          LOBYTE(v76) = v43[1];
          v87 = v30 * (float)((float)LODWORD(v76) - v28);
          v88 = v84 + v87;
          v89 = 8191.0;
          v90 = 8191.0;
          if (v88 <= 8191.0)
          {
            v90 = v88;
            if (v88 < 0.0)
              v90 = 0.0;
          }
          v91 = v85 + v87;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v86 + v87;
          if (v93 <= 8191.0)
          {
            v89 = v93;
            if (v93 < 0.0)
              v89 = 0.0;
          }
          if (v67)
          {
            LOBYTE(v93) = *v67;
            *(float *)&v94 = (float)LODWORD(v93);
            v87 = *(float *)&v94 - v29;
            LOBYTE(v94) = v67[1];
            v95 = (float)v94 - v29;
            v67 += 2;
            v96 = v31 * v95;
            v97 = (float)(v33 * v95) + (float)(v87 * v32);
            v98 = v34 * v87;
          }
          else
          {
            v98 = 0.0;
            v97 = 0.0;
            v96 = 0.0;
          }
          LOBYTE(v87) = *v66;
          v99 = v30 * (float)((float)LODWORD(v87) - v28);
          v100 = v96 + v99;
          v101 = 8191.0;
          v77 = (float)(v96 + v99) <= 8191.0;
          v102 = 8191.0;
          if (v77)
          {
            v102 = v100;
            if (v100 < 0.0)
              v102 = 0.0;
          }
          v103 = v97 + v99;
          v77 = (float)(v97 + v99) <= 8191.0;
          v104 = 8191.0;
          if (v77)
          {
            v104 = v103;
            if (v103 < 0.0)
              v104 = 0.0;
          }
          v105 = v98 + v99;
          if (v105 <= 8191.0)
          {
            v101 = v105;
            if (v105 < 0.0)
              v101 = 0.0;
          }
          if (v67)
          {
            LOBYTE(v105) = *v67;
            *(float *)&v106 = (float)LODWORD(v105);
            v103 = *(float *)&v106 - v29;
            LOBYTE(v106) = v67[1];
            v107 = (float)v106 - v29;
            v67 += 2;
            v108 = v31 * v107;
            v109 = (float)(v33 * v107) + (float)(v103 * v32);
            v110 = v34 * v103;
          }
          else
          {
            v110 = 0.0;
            v109 = 0.0;
            v108 = 0.0;
          }
          LOBYTE(v103) = v66[1];
          v111 = v30 * (float)((float)LODWORD(v103) - v28);
          v112 = v108 + v111;
          v77 = (float)(v108 + v111) <= 8191.0;
          v113 = 8191.0;
          if (v77)
          {
            v113 = v112;
            if (v112 < 0.0)
              v113 = 0.0;
          }
          v114 = v109 + v111;
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          v116 = v110 + v111;
          v77 = (float)(v110 + v111) <= 8191.0;
          v117 = 8191.0;
          if (v77)
          {
            v117 = v116;
            if (v116 < 0.0)
              v117 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          v124 = llroundf(fminf(fmaxf(v26, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *((_WORD *)result + v124);
          __asm { FCVT            S30, H20 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H29 = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H31 = *((_WORD *)result + llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          v137 = fmaxf(_S0, fmaxf(_S19, _S30));
          v138 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S0)) + (float)(v61 * _S30)) + (float)(v60 * v137);
          v139 = 8191.0;
          if (v138 <= 8191.0)
          {
            v139 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S0)) + (float)(v61 * _S30))
                 + (float)(v60 * v137);
            if (v138 < 0.0)
              v139 = 0.0;
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *(_WORD *)(v41 + 2 * llroundf(v139));
          v144 = (float)((float)((float)(v59 * _S22) + (float)(v58 * _S21)) + (float)(v61 * _S23))
               + (float)(v60 * fmaxf(_S21, fmaxf(_S22, _S23)));
          v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            v145 = v144;
            if (v144 < 0.0)
              v145 = 0.0;
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *(_WORD *)(v41 + 2 * llroundf(v145));
          v150 = fmaxf(_S9, fmaxf(_S10, _S11));
          v151 = (float)((float)((float)(v59 * _S10) + (float)(v58 * _S9)) + (float)(v61 * _S11)) + (float)(v60 * v150);
          v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            v152 = (float)((float)((float)(v59 * _S10) + (float)(v58 * _S9)) + (float)(v61 * _S11))
                 + (float)(v60 * v150);
            if (v151 < 0.0)
              v152 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          v157 = _S0 * _S1;
          v158 = _S19 * _S1;
          v159 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          v161 = _S21 * _S0;
          v162 = _S22 * _S0;
          v163 = _S23 * _S0;
          LOWORD(_S0) = *(_WORD *)(v41 + 2 * llroundf(v152));
          __asm { FCVT            S1, H0 }
          v165 = _S9 * _S1;
          v166 = _S10 * _S1;
          v167 = _S11 * _S1;
          v168 = (float)((float)((float)(v59 * _S31) + (float)(v58 * _S29)) + (float)(v61 * _S8))
               + (float)(v60 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v169 = 8191.0;
          if (v168 <= 8191.0)
          {
            v169 = v168;
            if (v168 < 0.0)
              v169 = 0.0;
          }
          _H21 = *(_WORD *)(v41 + 2 * llroundf(v169));
          __asm { FCVT            S21, H21 }
          v172 = _S29 * _S21;
          v173 = _S31 * _S21;
          v174 = _S8 * _S21;
          v175 = (float)((float)(v243 * v158) + (float)(v157 * v245)) + (float)(v159 * v242);
          v176 = (float)((float)(v239 * v158) + (float)(v157 * v241)) + (float)(v159 * v237);
          _S7 = (float)((float)(v235 * v158) + (float)(v157 * v236)) + (float)(v159 * v234);
          _S19 = (float)((float)(v243 * v162) + (float)(v161 * v245)) + (float)(v163 * v242);
          _S20 = (float)((float)(v239 * v162) + (float)(v161 * v241)) + (float)(v163 * v237);
          _S5 = (float)((float)(v235 * v162) + (float)(v161 * v236)) + (float)(v163 * v234);
          v181 = (float)((float)(v243 * v166) + (float)(v165 * v245)) + (float)(v167 * v242);
          v182 = (float)((float)(v239 * v166) + (float)(v165 * v241)) + (float)(v167 * v237);
          v183 = (float)((float)(v235 * v166) + (float)(v165 * v236)) + (float)(v167 * v234);
          _S1 = (float)(v239 * v173) + (float)(v172 * v241);
          _S3 = (float)(v235 * v173) + (float)(v172 * v236);
          _S22 = (float)((float)(v243 * v173) + (float)(v172 * v245)) + (float)(v174 * v242);
          _S23 = _S1 + (float)(v174 * v237);
          v188 = _S3 + (float)(v174 * v234);
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v182, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v204 = (float)((float)((float)(v252 * _S1) + (float)(v253 * _S0)) + (float)(v251 * _S3)) + v35;
          if (v204 < v35)
            v205 = v35;
          else
            v205 = (float)((float)((float)(v252 * _S1) + (float)(v253 * _S0)) + (float)(v251 * _S3)) + v35;
          v77 = v204 <= v37;
          v206 = (float)((float)((float)(v252 * _S6) + (float)(v253 * _S4)) + (float)(v251 * _S5)) + v35;
          if (!v77)
            v205 = v37;
          v207 = llroundf(v205);
          if (v206 < v35)
            v208 = v35;
          else
            v208 = (float)((float)((float)(v252 * _S6) + (float)(v253 * _S4)) + (float)(v251 * _S5)) + v35;
          v77 = v206 <= v37;
          v209 = (float)((float)((float)(v252 * _S19) + (float)(v253 * _S7)) + (float)(v251 * _S21)) + v35;
          if (!v77)
            v208 = v37;
          v210 = llroundf(v208);
          if (v209 < v35)
            v211 = v35;
          else
            v211 = (float)((float)((float)(v252 * _S19) + (float)(v253 * _S7)) + (float)(v251 * _S21)) + v35;
          v77 = v209 <= v37;
          v212 = (float)((float)((float)(v252 * _S22) + (float)(v253 * _S20)) + (float)(v251 * _S23)) + v35;
          if (!v77)
            v211 = v37;
          v213 = llroundf(v211);
          if (v212 < v35)
            v214 = v35;
          else
            v214 = (float)((float)((float)(v252 * _S22) + (float)(v253 * _S20)) + (float)(v251 * _S23)) + v35;
          if (v212 <= v37)
            v215 = v214;
          else
            v215 = v37;
          v216 = (float)((float)(_S0 + _S4) + _S7) + _S20;
          v217 = (float)((float)(_S1 + _S6) + _S19) + _S22;
          *(_WORD *)v55 = v207 << v57;
          *((_WORD *)v55 + 1) = v210 << v57;
          *(_WORD *)v68 = v213 << v57;
          *((_WORD *)v68 + 1) = llroundf(v215) << v57;
          v218 = (float)((float)(_S3 + _S5) + _S21) + _S23;
          v219 = (float)((float)(v255 + (float)(v216 * v250)) + (float)(v217 * v249)) + (float)(v218 * v248);
          v39 = v254;
          if (v219 <= v254)
          {
            v39 = (float)((float)(v255 + (float)(v216 * v250)) + (float)(v217 * v249)) + (float)(v218 * v248);
            if (v219 < v260)
              v39 = v260;
          }
          v220 = (_WORD *)(v56 + 2 * v65);
          v221 = (float)((float)(v255 + (float)(v216 * v247)) + (float)(v217 * v246)) + (float)(v218 * v244);
          *v220 = llroundf(v39) << v57;
          v40 = v254;
          v28 = v240;
          v30 = v238;
          v31 = v259;
          if (v221 <= v254)
          {
            v40 = v221;
            if (v221 < v260)
              v40 = v260;
          }
          v43 += 2;
          v66 += 2;
          v55 += 4;
          v68 += 4;
          v220[1] = llroundf(v40) << v57;
          v65 += 2;
          v33 = v257;
          v32 = v258;
          v34 = v256;
          v26 = 8191.0;
          v29 = v233;
          v61 = v231;
          v59 = v232;
        }
        while (v9 > v65);
      }
      v43 = &v64[v20];
      v44 = &v63[v21];
      v55 = &v62[v23];
      v56 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v230 && v229)
    {
      v222 = 0;
      do
      {
        if (v9)
        {
          v223 = v9;
          v224 = v25;
          v225 = v22;
          do
          {
            v226 = *v225++;
            *v224++ = v226 | (v226 << 8);
            --v223;
          }
          while (v223);
        }
        v22 += v227;
        v25 += v228;
        ++v222;
      }
      while (v222 != v12);
    }
    else if (v229)
    {
      do
      {
        if (v9)
          result = memset(v25, 255, 2 * v9);
        v25 += v228;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_xf420_GCD(_QWORD *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  char v59;
  char *v60;
  _BYTE *v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  char *v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  BOOL v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  unsigned int v144;
  float v146;
  float v147;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v157;
  float v160;
  float v161;
  unsigned int v166;
  unsigned int v173;
  float v177;
  float v178;
  float v179;
  unsigned int v180;
  float v181;
  float v182;
  unsigned int v183;
  float v184;
  float v185;
  unsigned int v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  _WORD *v193;
  float v194;
  uint64_t v195;
  unint64_t v196;
  _WORD *v197;
  unsigned __int8 *v198;
  __int16 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;

  v4 = *(_QWORD *)((char *)result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)((char *)result + 20);
    v10 = *(_QWORD *)((char *)result + 36);
    v11 = *(_QWORD *)((char *)result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = result[14];
    v14 = (_QWORD *)result[16];
    v15 = result[15] + 2 * (result[13] * a2 / v5);
    v16 = result[19];
    v17 = (_QWORD *)result[7];
    v18 = (uint64_t *)result[8];
    v19 = (uint64_t *)result[17];
    v20 = *v18;
    v21 = v18[1];
    v200 = v18[2];
    v202 = v17[2];
    v22 = (unsigned __int8 *)(v202 + v200 * v11 + v10);
    v23 = *v19;
    v24 = v19[1];
    v25 = v19[2];
    v201 = v14[2];
    v26 = (char *)(v201 + v25 * v15 + 2 * v13);
    *(float *)&v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v29 = (float)LODWORD(a4);
    v30 = *(float *)&v27 * *(float *)v16;
    v31 = *(float *)&v27 * *(float *)(v16 + 8);
    v32 = *(float *)&v27 * *(float *)(v16 + 16);
    v33 = *(float *)&v27 * *(float *)(v16 + 20);
    v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    v36 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 148);
    v37 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 150);
    *(float *)&v38 = (float)v27;
    v219 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    v213 = (float)v38;
    v214 = v36;
    v211 = *(float *)(v16 + 40);
    v212 = *(float *)(v16 + 36);
    v209 = *(float *)(v16 + 48) * 0.25;
    v210 = *(float *)(v16 + 44);
    v207 = *(float *)(v16 + 56) * 0.25;
    v208 = *(float *)(v16 + 52) * 0.25;
    v205 = *(float *)(v16 + 64) * 0.25;
    v206 = *(float *)(v16 + 60) * 0.25;
    v39 = *(float *)(v16 + 72);
    v40 = *(float *)(v16 + 68) * 0.25;
    v203 = v40;
    v204 = v39;
    v42 = *(float *)(v16 + 76);
    v41 = *(float *)(v16 + 80);
    v43 = *(float *)(v16 + 84);
    v44 = *(float *)(v16 + 88);
    v45 = *(float *)(v16 + 92);
    v46 = *(float *)(v16 + 96);
    v47 = *(float *)(v16 + 100);
    v48 = *(float *)(v16 + 104);
    result = (_QWORD *)(v16 + 164);
    v49 = v17[1];
    v50 = (_BYTE *)(*v17 + *v18 * v11 + v10);
    v51 = (_BYTE *)(v49 + v21 * v11 + v10);
    v52 = v16 + 16548;
    if (v49)
      v53 = v51;
    else
      v53 = 0;
    v54 = *(unsigned __int8 *)(v16 + 132);
    v55 = v14[1];
    v56 = (char *)(*v14 + v23 * v15 + 2 * v13);
    if (v54 >= 0x11)
      v57 = 0;
    else
      v57 = 16 - v54;
    v58 = v55 + v19[1] * (v15 / 2) + 2 * v13;
    v59 = v57;
    v217 = v32;
    v218 = v31;
    v215 = v34;
    v216 = v33;
    do
    {
      v60 = &v56[v23];
      v61 = &v53[v21];
      v62 = &v50[v20];
      if (v9)
      {
        v63 = 0;
        v64 = &v50[v20];
        v65 = &v53[v21];
        v66 = &v56[v23];
        do
        {
          if (v53)
          {
            LOBYTE(v40) = *v53;
            *(float *)&v67 = (float)LODWORD(v40);
            v68 = *(float *)&v67 - v29;
            LOBYTE(v67) = v53[1];
            v69 = (float)v67 - v29;
            v53 += 2;
            v70 = v31 * v69;
            v39 = v33 * v69;
            v71 = v39 + (float)(v68 * v32);
            v72 = v34 * v68;
          }
          else
          {
            v72 = 0.0;
            v71 = 0.0;
            v70 = 0.0;
          }
          LOBYTE(v39) = *v50;
          v73 = v30 * (float)((float)LODWORD(v39) - v28);
          v74 = v70 + v73;
          v75 = (float)(v70 + v73) <= 8191.0;
          v76 = 8191.0;
          if (v75)
          {
            v76 = v74;
            if (v74 < 0.0)
              v76 = 0.0;
          }
          v77 = v71 + v73;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v72 + v73;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          if (v53)
          {
            LOBYTE(v79) = *v53;
            v81 = (float)LODWORD(v79) - v29;
            LOBYTE(v73) = v53[1];
            v82 = (float)LODWORD(v73) - v29;
            v53 += 2;
            v83 = v31 * v82;
            v84 = (float)(v33 * v82) + (float)(v81 * v32);
            v85 = v34 * v81;
          }
          else
          {
            v85 = 0.0;
            v84 = 0.0;
            v83 = 0.0;
          }
          LOBYTE(v74) = v50[1];
          v86 = v30 * (float)((float)LODWORD(v74) - v28);
          v87 = v83 + v86;
          v88 = 8191.0;
          v89 = 8191.0;
          if (v87 <= 8191.0)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v84 + v86;
          v91 = 8191.0;
          if ((float)(v84 + v86) <= 8191.0)
          {
            v91 = v84 + v86;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v85 + v86;
          if (v92 <= 8191.0)
          {
            v88 = v92;
            if (v92 < 0.0)
              v88 = 0.0;
          }
          if (v65)
          {
            LOBYTE(v92) = *v65;
            v93 = (float)LODWORD(v92) - v29;
            LOBYTE(v90) = v65[1];
            v94 = (float)LODWORD(v90) - v29;
            v65 += 2;
            v95 = v31 * v94;
            v84 = v33 * v94;
            v96 = v84 + (float)(v93 * v32);
            v97 = v34 * v93;
          }
          else
          {
            v97 = 0.0;
            v96 = 0.0;
            v95 = 0.0;
          }
          LOBYTE(v84) = *v64;
          v98 = v30 * (float)((float)LODWORD(v84) - v28);
          v99 = v95 + v98;
          v100 = 8191.0;
          v101 = 8191.0;
          if (v99 <= 8191.0)
          {
            v101 = v99;
            if (v99 < 0.0)
              v101 = 0.0;
          }
          v102 = v96 + v98;
          v75 = (float)(v96 + v98) <= 8191.0;
          v103 = 8191.0;
          if (v75)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          v104 = v97 + v98;
          if (v104 <= 8191.0)
          {
            v100 = v104;
            if (v104 < 0.0)
              v100 = 0.0;
          }
          if (v65)
          {
            LOBYTE(v104) = *v65;
            v105 = (float)LODWORD(v104) - v29;
            LOBYTE(v102) = v65[1];
            v106 = (float)LODWORD(v102) - v29;
            v65 += 2;
            v107 = v31 * v106;
            v102 = v33 * v106;
            v108 = v102 + (float)(v105 * v32);
            v109 = v34 * v105;
          }
          else
          {
            v109 = 0.0;
            v108 = 0.0;
            v107 = 0.0;
          }
          LOBYTE(v102) = v64[1];
          v110 = v28;
          v111 = v30;
          v112 = v30 * (float)((float)LODWORD(v102) - v28);
          v113 = v107 + v112;
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          v115 = v108 + v112;
          v75 = (float)(v108 + v112) <= 8191.0;
          v116 = 8191.0;
          if (v75)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          v117 = v109 + v112;
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S21, H21
          }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          v144 = llroundf(fminf(fmaxf(v118, 0.0), 8191.0));
          __asm { FCVT            S1, H7 }
          v146 = (float)((float)(v42 * _S3) + (float)(_S0 * v204)) + (float)(_S6 * v41);
          v147 = (float)((float)(v44 * _S3) + (float)(_S0 * v43)) + (float)(_S6 * v45);
          _S3 = (float)((float)(v47 * _S3) + (float)(_S0 * v46)) + (float)(_S6 * v48);
          _S6 = (float)((float)(v42 * _S25) + (float)(_S24 * v204)) + (float)(_S27 * v41);
          v150 = (float)((float)(v44 * _S25) + (float)(_S24 * v43)) + (float)(_S27 * v45);
          v151 = (float)((float)(v47 * _S25) + (float)(_S24 * v46)) + (float)(_S27 * v48);
          v152 = (float)((float)(v42 * _S5) + (float)(_S4 * v204)) + (float)(_S17 * v41);
          v153 = (float)((float)(v44 * _S5) + (float)(_S4 * v43)) + (float)(_S17 * v45);
          v154 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S17 * v48);
          _S0 = (float)(v42 * _S1) + (float)(_S21 * v204);
          _S4 = (float)(v44 * _S1) + (float)(_S21 * v43);
          v157 = (float)(v47 * _S1) + (float)(_S21 * v46);
          LOWORD(_S5) = *((_WORD *)result + v144);
          __asm { FCVT            S5, H5 }
          _S21 = _S0 + (float)(_S5 * v41);
          v160 = _S4 + (float)(_S5 * v45);
          v161 = v157 + (float)(_S5 * v48);
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H3
            FCVT            S17, H6
          }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          v166 = llroundf(fminf(fmaxf(v151, 0.0), 8191.0));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * v166);
          __asm { FCVT            S6, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H3
            FCVT            S3, H21
          }
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          v173 = llroundf(fminf(fmaxf(v161, 0.0), 8191.0));
          __asm { FCVT            S1, H21 }
          _H19 = *(_WORD *)(v52 + 2 * v173);
          __asm { FCVT            S19, H19 }
          v177 = (float)((float)((float)(v211 * _S4) + (float)(v212 * _S0)) + (float)(v210 * _S5)) + v35;
          if (v177 < v35)
            v178 = v35;
          else
            v178 = (float)((float)((float)(v211 * _S4) + (float)(v212 * _S0)) + (float)(v210 * _S5)) + v35;
          v75 = v177 <= v37;
          v179 = (float)((float)((float)(v211 * _S24) + (float)(v212 * _S17)) + (float)(v210 * _S6)) + v35;
          if (!v75)
            v178 = v37;
          v180 = llroundf(v178);
          if (v179 < v35)
            v181 = v35;
          else
            v181 = (float)((float)((float)(v211 * _S24) + (float)(v212 * _S17)) + (float)(v210 * _S6)) + v35;
          v75 = v179 <= v37;
          v182 = (float)((float)((float)(v211 * _S25) + (float)(v212 * _S7)) + (float)(v210 * _S27)) + v35;
          if (!v75)
            v181 = v37;
          v183 = llroundf(v181);
          if (v182 < v35)
            v184 = v35;
          else
            v184 = (float)((float)((float)(v211 * _S25) + (float)(v212 * _S7)) + (float)(v210 * _S27)) + v35;
          v75 = v182 <= v37;
          v185 = (float)((float)((float)(v211 * _S1) + (float)(v212 * _S3)) + (float)(v210 * _S19)) + v35;
          if (!v75)
            v184 = v37;
          v186 = llroundf(v184);
          if (v185 < v35)
            v187 = v35;
          else
            v187 = (float)((float)((float)(v211 * _S1) + (float)(v212 * _S3)) + (float)(v210 * _S19)) + v35;
          if (v185 <= v37)
            v188 = v187;
          else
            v188 = v37;
          v189 = (float)((float)(_S0 + _S17) + _S7) + _S3;
          v190 = (float)((float)(_S4 + _S24) + _S25) + _S1;
          *(_WORD *)v56 = v180 << v59;
          *((_WORD *)v56 + 1) = v183 << v59;
          *(_WORD *)v66 = v186 << v59;
          *((_WORD *)v66 + 1) = llroundf(v188) << v59;
          v39 = (float)((float)(_S5 + _S6) + _S27) + _S19;
          v191 = (float)((float)(v214 + (float)(v189 * v209)) + (float)(v190 * v208)) + (float)(v39 * v207);
          v192 = v213;
          if (v191 <= v213)
          {
            v192 = (float)((float)(v214 + (float)(v189 * v209)) + (float)(v190 * v208)) + (float)(v39 * v207);
            if (v191 < v219)
              v192 = v219;
          }
          v193 = (_WORD *)(v58 + 2 * v63);
          v194 = (float)((float)(v214 + (float)(v189 * v206)) + (float)(v190 * v205)) + (float)(v39 * v203);
          *v193 = llroundf(v192) << v59;
          v40 = v213;
          v28 = v110;
          v30 = v111;
          v31 = v218;
          if (v194 <= v213)
          {
            v40 = v194;
            if (v194 < v219)
              v40 = v219;
          }
          v50 += 2;
          v64 += 2;
          v56 += 4;
          v66 += 4;
          v193[1] = llroundf(v40) << v59;
          v63 += 2;
          v33 = v216;
          v32 = v217;
          v34 = v215;
        }
        while (v9 > v63);
      }
      v50 = &v62[v20];
      v53 = &v61[v21];
      v56 = &v60[v23];
      v58 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v202 && v201)
    {
      v195 = 0;
      do
      {
        if (v9)
        {
          v196 = v9;
          v197 = v26;
          v198 = v22;
          do
          {
            v199 = *v198++;
            *v197++ = v199 | (v199 << 8);
            --v196;
          }
          while (v196);
        }
        v22 += v200;
        v26 += v25;
        ++v195;
      }
      while (v195 != v12);
    }
    else if (v201)
    {
      do
      {
        if (v9)
          result = memset(v26, 255, 2 * v9);
        v26 += v25;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_rgb_xf420_GCD(_QWORD *result, uint64_t a2)
{
  float v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  _BYTE *v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  char *v64;
  _BYTE *v65;
  _BYTE *v66;
  unint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  char *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  unsigned int v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  _WORD *v118;
  float v119;
  uint64_t v120;
  unint64_t v121;
  _WORD *v122;
  unsigned __int8 *v123;
  __int16 v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;

  v8 = *(_QWORD *)((char *)result + 28);
  v9 = 2 * *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 == 2 * v10)
    return result;
  v12 = 0;
  v13 = *(_QWORD *)((char *)result + 20);
  v14 = *(_QWORD *)((char *)result + 36);
  v15 = *(_QWORD *)((char *)result + 44) + 2 * v10;
  v16 = 2 * v11 - 2 * v10;
  v17 = result[14];
  v18 = (_QWORD *)result[16];
  v19 = result[15] + 2 * (result[13] * a2 / v9);
  v20 = result[19];
  v22 = (_QWORD *)result[7];
  v21 = (uint64_t *)result[8];
  v23 = (uint64_t *)result[17];
  v24 = *v21;
  v25 = v21[1];
  v26 = v21[2];
  v27 = v22[1];
  v28 = v22[2];
  v29 = (unsigned __int8 *)(v28 + v26 * v15 + v14);
  v30 = *v23;
  v31 = v23[1];
  v32 = v23[2];
  v33 = v18[2];
  v34 = (_BYTE *)(*v22 + v24 * v15 + v14);
  v35 = (char *)(v33 + v32 * v19 + 2 * v17);
  *(float *)&v36 = (float)*(unsigned int *)(v20 + 128);
  *(float *)&v37 = (float)*(unsigned int *)(v20 + 136);
  v38 = *(float *)&v37 / *(float *)&v36;
  LOWORD(v36) = *(_WORD *)(v20 + 140);
  v39 = (float)v36;
  LOWORD(v37) = *(_WORD *)(v20 + 142);
  v40 = (float)v37;
  v41 = v38 * *(float *)v20;
  v42 = v38 * *(float *)(v20 + 8);
  v43 = v38 * *(float *)(v20 + 16);
  v44 = v38 * *(float *)(v20 + 20);
  v45 = *(float *)(v20 + 28);
  v46 = v38 * v45;
  LOWORD(v45) = *(_WORD *)(v20 + 144);
  v47 = (float)LODWORD(v45);
  LOWORD(v3) = *(_WORD *)(v20 + 146);
  v48 = (float)v3;
  LOWORD(v4) = *(_WORD *)(v20 + 148);
  v49 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v20 + 150);
  v50 = (float)v5;
  LOWORD(v6) = *(_WORD *)(v20 + 152);
  v51 = (float)v6;
  v52 = *(float *)(v20 + 36);
  v53 = *(float *)(v20 + 40);
  v54 = *(float *)(v20 + 44);
  v129 = *(float *)(v20 + 52) * 0.25;
  v130 = *(float *)(v20 + 48) * 0.25;
  v127 = *(float *)(v20 + 60) * 0.25;
  v128 = *(float *)(v20 + 56) * 0.25;
  v55 = *(float *)(v20 + 64) * 0.25;
  v56 = *(float *)(v20 + 68) * 0.25;
  v125 = v56;
  v126 = v55;
  if (v27)
    v57 = (_BYTE *)(v27 + v25 * v15 + v14);
  else
    v57 = 0;
  v58 = *(unsigned __int8 *)(v20 + 132);
  v59 = 16 - v58;
  v60 = v18[1];
  v61 = (char *)(*v18 + v30 * v19 + 2 * v17);
  if (v58 >= 0x11)
    v59 = 0;
  if (v19 >= 0)
    v62 = v19;
  else
    v62 = v19 + 1;
  result = (_QWORD *)(v60 + v31 * (v62 >> 1) + 2 * v17);
  v63 = v59;
  do
  {
    v64 = &v61[v30];
    v65 = &v57[v25];
    v66 = &v34[v24];
    if (v13)
    {
      v67 = 0;
      v68 = &v34[v24];
      v69 = &v57[v25];
      v70 = &v61[v30];
      do
      {
        v71 = 0.0;
        if (v57)
        {
          LOBYTE(v56) = *v57;
          v56 = (float)LODWORD(v56) - v40;
          LOBYTE(v7) = v57[1];
          v72 = (float)LODWORD(v7) - v40;
          v57 += 2;
          v73 = v42 * v72;
          v74 = (float)(v44 * v72) + (float)(v56 * v43);
          v75 = v46 * v56;
          if (v57)
          {
            LOBYTE(v56) = *v57;
            v56 = (float)LODWORD(v56) - v40;
            LOBYTE(v71) = v57[1];
            v76 = (float)LODWORD(v71) - v40;
            v57 += 2;
            v77 = v42 * v76;
            v78 = (float)(v44 * v76) + (float)(v56 * v43);
            v71 = v46 * v56;
            goto LABEL_18;
          }
        }
        else
        {
          v75 = 0.0;
          v74 = 0.0;
          v73 = 0.0;
        }
        v78 = 0.0;
        v77 = 0.0;
LABEL_18:
        v79 = 0.0;
        if (!v69)
        {
          v84 = 0.0;
          v83 = 0.0;
          v82 = 0.0;
LABEL_22:
          v89 = 0.0;
          v88 = 0.0;
          goto LABEL_23;
        }
        LOBYTE(v56) = *v69;
        v80 = (float)LODWORD(v56) - v40;
        LOBYTE(v2) = v69[1];
        v81 = (float)LODWORD(v2) - v40;
        v69 += 2;
        v82 = v42 * v81;
        v83 = (float)(v44 * v81) + (float)(v80 * v43);
        v84 = v46 * v80;
        if (!v69)
          goto LABEL_22;
        LOBYTE(v80) = *v69;
        *(float *)&v85 = (float)LODWORD(v80);
        v86 = *(float *)&v85 - v40;
        LOBYTE(v85) = v69[1];
        v87 = (float)v85 - v40;
        v69 += 2;
        v88 = v42 * v87;
        v89 = (float)(v44 * v87) + (float)(v86 * v43);
        v79 = v46 * v86;
LABEL_23:
        LOBYTE(v55) = *v34;
        *(float *)&v90 = v41 * (float)((float)LODWORD(v55) - v39);
        v91 = v73 + *(float *)&v90;
        v92 = v74 + *(float *)&v90;
        v93 = v75 + *(float *)&v90;
        LOBYTE(v90) = v34[1];
        *(float *)&v94 = v41 * (float)((float)v90 - v39);
        v95 = v77 + *(float *)&v94;
        v96 = v78 + *(float *)&v94;
        v97 = v71 + *(float *)&v94;
        LOBYTE(v94) = *v68;
        v98 = v41 * (float)((float)v94 - v39);
        v99 = v82 + v98;
        v100 = v83 + v98;
        v101 = v84 + v98;
        LOBYTE(v84) = v68[1];
        v102 = v41 * (float)((float)LODWORD(v84) - v39);
        v103 = v88 + v102;
        v104 = v89 + v102;
        v105 = v79 + v102;
        v2 = (float)((float)((float)(v53 * v92) + (float)(v52 * v91)) + (float)(v54 * v93)) + v47;
        v106 = (float)((float)((float)(v53 * v96) + (float)(v52 * v95)) + (float)(v54 * v97)) + v47;
        v107 = (float)((float)((float)(v53 * v100) + (float)(v52 * v99)) + (float)(v54 * v101)) + v47;
        v108 = (float)((float)((float)(v53 * v104) + (float)(v52 * v103)) + (float)(v54 * v105)) + v47;
        if (v2 < v47)
          v109 = v47;
        else
          v109 = (float)((float)((float)(v53 * v92) + (float)(v52 * v91)) + (float)(v54 * v93)) + v47;
        if (v2 > v49)
          v109 = v49;
        *(_WORD *)v61 = llroundf(v109) << v63;
        if (v106 < v47)
          v110 = v47;
        else
          v110 = (float)((float)((float)(v53 * v96) + (float)(v52 * v95)) + (float)(v54 * v97)) + v47;
        if (v106 <= v49)
          v111 = v110;
        else
          v111 = v49;
        *((_WORD *)v61 + 1) = llroundf(v111) << v63;
        if (v107 < v47)
          v112 = v47;
        else
          v112 = (float)((float)((float)(v53 * v100) + (float)(v52 * v99)) + (float)(v54 * v101)) + v47;
        if (v107 > v49)
          v112 = v49;
        *(_WORD *)v70 = llroundf(v112) << v63;
        if (v108 < v47)
          v113 = v47;
        else
          v113 = (float)((float)((float)(v53 * v104) + (float)(v52 * v103)) + (float)(v54 * v105)) + v47;
        if (v108 > v49)
          v113 = v49;
        *((_WORD *)v70 + 1) = llroundf(v113) << v63;
        v114 = (float)((float)(v91 + v95) + v99) + v103;
        v115 = (float)((float)(v92 + v96) + v100) + v104;
        v116 = (float)((float)(v93 + v97) + v101) + v105;
        v117 = (float)((float)(v48 + (float)(v114 * v130)) + (float)(v115 * v129)) + (float)(v116 * v128);
        v7 = v51;
        if (v117 <= v51)
        {
          v7 = (float)((float)(v48 + (float)(v114 * v130)) + (float)(v115 * v129)) + (float)(v116 * v128);
          if (v117 < v50)
            v7 = v50;
        }
        v118 = (_WORD *)result + v67;
        v55 = v125;
        v119 = (float)((float)(v48 + (float)(v114 * v127)) + (float)(v115 * v126)) + (float)(v116 * v125);
        *v118 = llroundf(v7) << v63;
        v56 = v51;
        if (v119 <= v51)
        {
          v56 = v119;
          if (v119 < v50)
            v56 = v50;
        }
        v34 += 2;
        v68 += 2;
        v61 += 4;
        v70 += 4;
        v118[1] = llroundf(v56) << v63;
        v67 += 2;
      }
      while (v13 > v67);
    }
    v34 = &v66[v24];
    v57 = &v65[v25];
    v61 = &v64[v30];
    result = (_QWORD *)((char *)result + v31);
    v12 += 2;
  }
  while (v16 > v12);
  if (v28 && v33)
  {
    v120 = 0;
    do
    {
      if (v13)
      {
        v121 = v13;
        v122 = v35;
        v123 = v29;
        do
        {
          v124 = *v123++;
          *v122++ = v124 | (v124 << 8);
          --v121;
        }
        while (v121);
      }
      v29 += v26;
      v35 += v32;
      ++v120;
    }
    while (v120 != v16);
  }
  else if (v33)
  {
    do
    {
      if (v13)
        result = memset(v35, 255, 2 * v13);
      v35 += v32;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  size_t v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  unsigned int v105;
  float v112;
  float v113;
  float v114;
  float v119;
  float v120;
  float v122;
  float v123;
  float v124;
  float v127;
  float v130;
  float v131;
  float v133;
  unsigned int v138;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (char *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v165 = v31 * *(float *)(v17 + 16);
    v166 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v163 = *(float *)&v36;
    v164 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&v40 = (float)v36;
    v167 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    v41 = (float)v40;
    v161 = *(float *)(v17 + 36);
    v162 = v38;
    v42 = *(float *)(v17 + 44);
    v43 = 0.5;
    v159 = *(float *)(v17 + 48) * 0.5;
    v160 = *(float *)(v17 + 40);
    v157 = *(float *)(v17 + 56) * 0.5;
    v158 = *(float *)(v17 + 52) * 0.5;
    v155 = *(float *)(v17 + 64) * 0.5;
    v156 = *(float *)(v17 + 60) * 0.5;
    v44 = *(float *)(v17 + 72);
    v45 = *(float *)(v17 + 68) * 0.5;
    v154 = v45;
    v47 = *(float *)(v17 + 76);
    v46 = *(float *)(v17 + 80);
    v48 = *(float *)(v17 + 84);
    v49 = *(float *)(v17 + 88);
    v50 = *(float *)(v17 + 92);
    v51 = *(float *)(v17 + 96);
    v52 = *(float *)(v17 + 100);
    v53 = *(float *)(v17 + 104);
    v54 = v17 + 164;
    v55 = v17 + 16548;
    v56 = v15[1];
    _ZF = v56 == 0;
    v58 = v56 + v27 * v16;
    v59 = *v15 + v26 * v16;
    result = (_QWORD *)(v17 + 32932);
    v60 = v58 + v14;
    if (_ZF)
      v60 = 0;
    v61 = (_BYTE *)(v59 + v14);
    v63 = *v18;
    v62 = v18[1];
    v64 = (_BYTE *)(v62 + v22 * v12 + v11);
    if (!v62)
      v64 = 0;
    v65 = (_BYTE *)(v63 + v21 * v12 + v11);
    v66 = *(float *)(v17 + 108);
    v67 = *(float *)(v17 + 112);
    v68 = *(float *)(v17 + 116);
    v69 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        v70 = 0;
        v71 = v65;
        v72 = v64;
        v73 = v61;
        do
        {
          if (v72)
          {
            LOBYTE(v45) = *v72;
            *(float *)&v74 = (float)LODWORD(v45);
            v43 = *(float *)&v74 - v33;
            LOBYTE(v74) = v72[1];
            v75 = (float)v74 - v33;
            v72 += 2;
            v76 = v166 * v75;
            v77 = (float)(v164 * v75) + (float)(v43 * v165);
            v78 = v163 * v43;
          }
          else
          {
            v78 = 0.0;
            v77 = 0.0;
            v76 = 0.0;
          }
          LOBYTE(v43) = *v71;
          v79 = v34 * (float)((float)LODWORD(v43) - v32);
          v80 = v76 + v79;
          v81 = (float)(v76 + v79) <= 8191.0;
          v82 = 8191.0;
          if (v81)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          v83 = v77 + v79;
          v84 = 8191.0;
          if ((float)(v77 + v79) <= 8191.0)
          {
            v84 = v77 + v79;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v78 + v79;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          if (v72)
          {
            LOBYTE(v85) = *v72;
            v85 = (float)LODWORD(v85) - v33;
            LOBYTE(v83) = v72[1];
            v87 = (float)LODWORD(v83) - v33;
            v72 += 2;
            v88 = v166 * v87;
            v89 = (float)(v164 * v87) + (float)(v85 * v165);
            v90 = v163 * v85;
          }
          else
          {
            v90 = 0.0;
            v89 = 0.0;
            v88 = 0.0;
          }
          LOBYTE(v85) = v71[1];
          v91 = v34 * (float)((float)LODWORD(v85) - v32);
          v92 = v88 + v91;
          v81 = (float)(v88 + v91) <= 8191.0;
          v93 = 8191.0;
          if (v81)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v89 + v91;
          v81 = (float)(v89 + v91) <= 8191.0;
          v95 = 8191.0;
          if (v81)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          v96 = v32;
          v97 = v90 + v91;
          v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          v105 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v54 + 2 * v105);
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          v112 = fmaxf(_S0, fmaxf(_S4, _S30));
          v113 = (float)((float)((float)(v67 * _S4) + (float)(v66 * _S0)) + (float)(v68 * _S30)) + (float)(v69 * v112);
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = (float)((float)((float)(v67 * _S4) + (float)(v66 * _S0)) + (float)(v68 * _S30)) + (float)(v69 * v112);
            if (v113 < 0.0)
              v114 = 0.0;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v114));
          v119 = (float)((float)((float)(v67 * _S6) + (float)(v66 * _S1)) + (float)(v68 * _S7))
               + (float)(v69 * fmaxf(_S1, fmaxf(_S6, _S7)));
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = v119;
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm { FCVT            S3, H19 }
          v122 = _S0 * _S3;
          v123 = _S4 * _S3;
          v124 = _S30 * _S3;
          _H17 = *(_WORD *)(v55 + 2 * llroundf(v120));
          __asm { FCVT            S17, H17 }
          v127 = _S1 * _S17;
          _S6 = _S6 * _S17;
          _S7 = _S7 * _S17;
          v130 = (float)((float)(v47 * v123) + (float)(v122 * v44)) + (float)(v124 * v46);
          v131 = (float)((float)(v49 * v123) + (float)(v122 * v48)) + (float)(v124 * v50);
          _S0 = (float)((float)(v52 * v123) + (float)(v122 * v51)) + (float)(v124 * v53);
          v133 = (float)((float)(v47 * _S6) + (float)(v127 * v44)) + (float)(_S7 * v46);
          _S4 = (float)((float)(v49 * _S6) + (float)(v127 * v48)) + (float)(_S7 * v50);
          _S1 = (float)((float)(v52 * _S6) + (float)(v127 * v51)) + (float)(_S7 * v53);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          v138 = llroundf(fminf(fmaxf(v133, 0.0), 8191.0));
          __asm { FCVT            S3, H0 }
          LOWORD(_S0) = *((_WORD *)result + v138);
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          v143 = (float)((float)((float)(v160 * _S7) + (float)(v161 * _S6)) + (float)(v42 * _S3)) + v37;
          v144 = (float)((float)((float)(v160 * _S4) + (float)(v161 * _S0)) + (float)(v42 * _S17)) + v37;
          if (v143 < v37)
            v145 = v37;
          else
            v145 = (float)((float)((float)(v160 * _S7) + (float)(v161 * _S6)) + (float)(v42 * _S3)) + v37;
          if (v143 <= v39)
            v146 = v145;
          else
            v146 = v39;
          *v73 = llroundf(v146);
          if (v144 < v37)
            v147 = v37;
          else
            v147 = (float)((float)((float)(v160 * _S4) + (float)(v161 * _S0)) + (float)(v42 * _S17)) + v37;
          if (v144 > v39)
            v147 = v39;
          v73[1] = llroundf(v147);
          v148 = _S6 + _S0;
          v149 = _S7 + _S4;
          v150 = (float)(v162 + (float)(v148 * v159)) + (float)((float)(_S7 + _S4) * v158);
          v151 = _S3 + _S17;
          v152 = v150 + (float)((float)(_S3 + _S17) * v157);
          v153 = v41;
          if (v152 <= v41)
          {
            v153 = v152;
            if (v152 < v167)
              v153 = v167;
          }
          v45 = (float)((float)(v162 + (float)(v148 * v156)) + (float)(v149 * v155)) + (float)(v151 * v154);
          *(_BYTE *)(v60 + v70) = llroundf(v153);
          v43 = v41;
          v32 = v96;
          if (v45 <= v41)
          {
            v43 = v45;
            if (v45 < v167)
              v43 = v167;
          }
          *(_BYTE *)(v60 + v70 + 1) = llroundf(v43);
          v70 += 2;
          v71 += 2;
          v73 += 2;
        }
        while (v10 > v70);
      }
      v65 += v21;
      v64 += v22;
      v61 += v26;
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      do
      {
        result = memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _BYTE *v65;
  _BYTE *v66;
  size_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  unsigned int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  unsigned int v103;
  float v111;
  float v112;
  float v114;
  unsigned int v119;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (uint64_t *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (_QWORD *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (char *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    *(float *)&v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = *(float *)&v31 * *(float *)v17;
    v141 = *(float *)&v31 * *(float *)(v17 + 16);
    v142 = *(float *)&v31 * *(float *)(v17 + 8);
    v35 = *(float *)&v31 * *(float *)(v17 + 20);
    v36 = *(float *)&v31 * *(float *)(v17 + 28);
    LOWORD(v31) = *(_WORD *)(v17 + 144);
    v37 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 146);
    v38 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 148);
    v39 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 150);
    v40 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 152);
    v41 = (float)v31;
    v42 = *(float *)(v17 + 36);
    v43 = *(float *)(v17 + 40);
    v44 = *(float *)(v17 + 44);
    v139 = *(float *)(v17 + 48) * 0.5;
    v140 = v35;
    v137 = *(float *)(v17 + 56) * 0.5;
    v138 = *(float *)(v17 + 52) * 0.5;
    v45 = *(float *)(v17 + 64);
    v135 = v45 * 0.5;
    v136 = *(float *)(v17 + 60) * 0.5;
    v46 = *(float *)(v17 + 72);
    v47 = *(float *)(v17 + 68) * 0.5;
    v134 = v47;
    v49 = *(float *)(v17 + 76);
    v48 = *(float *)(v17 + 80);
    v50 = *(float *)(v17 + 84);
    v51 = *(float *)(v17 + 88);
    v52 = *(float *)(v17 + 92);
    v53 = *(float *)(v17 + 96);
    v54 = *(float *)(v17 + 100);
    v55 = *(float *)(v17 + 104);
    v56 = v17 + 164;
    v57 = v17 + 16548;
    v59 = *v15;
    v58 = *(_QWORD *)(result[16] + 8);
    _ZF = v58 == 0;
    result = (_QWORD *)(v58 + v27 * v16 + v14);
    if (_ZF)
      result = 0;
    v61 = (_BYTE *)(v59 + v26 * v16 + v14);
    v64 = v18;
    v63 = *v18;
    v62 = v64[1];
    if (v62)
      v65 = (_BYTE *)(v62 + v22 * v12 + v11);
    else
      v65 = 0;
    v66 = (_BYTE *)(v63 + v21 * v12 + v11);
    do
    {
      if (v10)
      {
        v67 = 0;
        v68 = v66;
        v69 = v65;
        v70 = v61;
        do
        {
          if (v69)
          {
            LOBYTE(v47) = *v69;
            *(float *)&v71 = (float)LODWORD(v47);
            v45 = *(float *)&v71 - v33;
            LOBYTE(v71) = v69[1];
            v72 = (float)v71 - v33;
            v69 += 2;
            v73 = v142 * v72;
            v74 = (float)(v140 * v72) + (float)(v45 * v141);
            v75 = v36 * v45;
          }
          else
          {
            v75 = 0.0;
            v74 = 0.0;
            v73 = 0.0;
          }
          LOBYTE(v45) = *v68;
          v76 = v34 * (float)((float)LODWORD(v45) - v32);
          v77 = v73 + v76;
          v78 = (float)(v73 + v76) <= 8191.0;
          v79 = 8191.0;
          if (v78)
          {
            v79 = v77;
            if (v77 < 0.0)
              v79 = 0.0;
          }
          v80 = v74 + v76;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v75 + v76;
          v83 = 8191.0;
          if ((float)(v75 + v76) <= 8191.0)
          {
            v83 = v75 + v76;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          if (v69)
          {
            LOBYTE(v82) = *v69;
            *(float *)&v84 = (float)LODWORD(v82);
            v76 = *(float *)&v84 - v33;
            LOBYTE(v84) = v69[1];
            v85 = (float)v84 - v33;
            v69 += 2;
            v86 = v142 * v85;
            v87 = (float)(v140 * v85) + (float)(v76 * v141);
            v88 = v36 * v76;
          }
          else
          {
            v88 = 0.0;
            v87 = 0.0;
            v86 = 0.0;
          }
          LOBYTE(v76) = v68[1];
          v89 = v34 * (float)((float)LODWORD(v76) - v32);
          v90 = 8191.0;
          if ((float)(v86 + v89) <= 8191.0)
          {
            v90 = v86 + v89;
            if ((float)(v86 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = v87 + v89;
          v78 = (float)(v87 + v89) <= 8191.0;
          v92 = 8191.0;
          if (v78)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v88 + v89;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm
          {
            FCVT            S0, H0
            FCVT            S5, H5
          }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          v103 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S6, H24 }
          _H24 = *(_WORD *)(v56 + 2 * v103);
          __asm { FCVT            S24, H24 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v111 = (float)((float)(v49 * _S5) + (float)(_S0 * v46)) + (float)(_S6 * v48);
          v112 = (float)((float)(v51 * _S5) + (float)(_S0 * v50)) + (float)(_S6 * v52);
          _S0 = (float)((float)(v54 * _S5) + (float)(_S0 * v53)) + (float)(_S6 * v55);
          v114 = (float)((float)(v49 * _S4) + (float)(_S24 * v46)) + (float)(_S26 * v48);
          _S6 = (float)((float)(v51 * _S4) + (float)(_S24 * v50)) + (float)(_S26 * v52);
          _S4 = (float)((float)(v54 * _S4) + (float)(_S24 * v53)) + (float)(_S26 * v55);
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          v119 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * v119);
          __asm { FCVT            S0, H0 }
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S25, H4 }
          v124 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          v125 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          if (v124 < v37)
            v126 = v37;
          else
            v126 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          if (v124 <= v39)
            v127 = v126;
          else
            v127 = v39;
          *v70 = llroundf(v127);
          if (v125 < v37)
            v128 = v37;
          else
            v128 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          if (v125 > v39)
            v128 = v39;
          v70[1] = llroundf(v128);
          v129 = _S24 + _S0;
          v130 = _S26 + _S6;
          v45 = _S5 + _S25;
          v131 = (float)((float)(v38 + (float)(v129 * v139)) + (float)((float)(_S26 + _S6) * v138))
               + (float)(v45 * v137);
          v132 = v41;
          if (v131 <= v41)
          {
            v132 = v131;
            if (v131 < v40)
              v132 = v40;
          }
          v47 = (float)((float)(v38 + (float)(v129 * v136)) + (float)(v130 * v135)) + (float)(v45 * v134);
          *((_BYTE *)result + v67) = llroundf(v132);
          v133 = v41;
          if (v47 <= v41)
          {
            v133 = v47;
            if (v47 < v40)
              v133 = v40;
          }
          *((_BYTE *)result + v67 + 1) = llroundf(v133);
          v67 += 2;
          v68 += 2;
          v70 += 2;
        }
        while (v10 > v67);
      }
      v66 += v21;
      v65 += v22;
      v61 += v26;
      result = (_QWORD *)((char *)result + v27);
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      do
      {
        result = memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_rgb_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  size_t v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;

  v13 = *(_QWORD *)((char *)result + 28);
  v14 = *(unsigned __int8 *)result;
  v15 = v13 * a2 / v14;
  v16 = (v13 + v13 * a2) / v14;
  if (v16 == v15)
    return result;
  v17 = 0;
  v18 = *(_QWORD *)((char *)result + 20);
  v19 = *(_QWORD *)((char *)result + 36);
  v20 = v15 + *(_QWORD *)((char *)result + 44);
  v21 = v16 - v15;
  v22 = result[14];
  v23 = (uint64_t *)result[16];
  v24 = result[13] * a2 / v14 + result[15];
  v25 = result[19];
  v27 = (uint64_t *)result[7];
  v26 = (uint64_t *)result[8];
  v28 = (uint64_t *)result[17];
  v29 = *v26;
  v30 = v26[1];
  v31 = v26[2];
  v32 = v27[2];
  v33 = (char *)(v32 + v31 * v20 + v19);
  v34 = *v28;
  v35 = v28[1];
  v36 = v28[2];
  v37 = v23[2];
  v38 = (char *)(v37 + v36 * v24 + v22);
  *(float *)&v39 = (float)*(unsigned int *)(v25 + 136);
  LOWORD(a5) = *(_WORD *)(v25 + 140);
  v40 = *(float *)&v39 / (float)*(unsigned int *)(v25 + 128);
  v41 = (float)LODWORD(a5);
  LOWORD(v39) = *(_WORD *)(v25 + 142);
  v42 = (float)v39;
  v43 = v40 * *(float *)v25;
  v44 = v40 * *(float *)(v25 + 8);
  v45 = v40 * *(float *)(v25 + 16);
  v46 = v40 * *(float *)(v25 + 20);
  v47 = *(float *)(v25 + 28);
  v48 = v40 * v47;
  LOWORD(v47) = *(_WORD *)(v25 + 144);
  v49 = (float)LODWORD(v47);
  LOWORD(v7) = *(_WORD *)(v25 + 146);
  v50 = (float)v7;
  LOWORD(v8) = *(_WORD *)(v25 + 148);
  v51 = (float)v8;
  LOWORD(v9) = *(_WORD *)(v25 + 150);
  v52 = (float)v9;
  LOWORD(v10) = *(_WORD *)(v25 + 152);
  v53 = (float)v10;
  v54 = *(float *)(v25 + 36);
  v55 = *(float *)(v25 + 40);
  v56 = *(float *)(v25 + 44);
  v57 = *(float *)(v25 + 48) * 0.5;
  v58 = *(float *)(v25 + 52) * 0.5;
  v59 = *(float *)(v25 + 56) * 0.5;
  v60 = *(float *)(v25 + 60) * 0.5;
  v61 = *(float *)(v25 + 64) * 0.5;
  v62 = *(float *)(v25 + 68) * 0.5;
  v64 = *v23;
  v63 = v23[1];
  v65 = v63 + v35 * v24 + v22;
  if (!v63)
    v65 = 0;
  v66 = (_BYTE *)(v64 + v34 * v24 + v22);
  v68 = *v27;
  v67 = v27[1];
  v69 = (_BYTE *)(v67 + v30 * v20 + v19);
  if (!v67)
    v69 = 0;
  result = (_QWORD *)(v68 + v29 * v20 + v19);
  do
  {
    if (v18)
    {
      v70 = 0;
      v71 = result;
      v72 = v69;
      v73 = v66;
      while (1)
      {
        v74 = 0.0;
        if (!v72)
          break;
        LOBYTE(v11) = *v72;
        v75 = (float)LODWORD(v11) - v42;
        LOBYTE(v12) = v72[1];
        v76 = (float)LODWORD(v12) - v42;
        v72 += 2;
        v77 = v44 * v76;
        v78 = (float)(v46 * v76) + (float)(v75 * v45);
        v79 = v48 * v75;
        if (!v72)
          goto LABEL_13;
        LOBYTE(v74) = *v72;
        v80 = (float)LODWORD(v74) - v42;
        LOBYTE(v5) = v72[1];
        v81 = (float)LODWORD(v5) - v42;
        v72 += 2;
        v82 = v44 * v81;
        v83 = (float)(v46 * v81) + (float)(v80 * v45);
        v74 = v48 * v80;
LABEL_14:
        LOBYTE(v6) = *v71;
        v84 = v43 * (float)((float)LODWORD(v6) - v41);
        v85 = v77 + v84;
        v86 = v78 + v84;
        v6 = v79 + v84;
        LOBYTE(v79) = v71[1];
        v87 = v43 * (float)((float)LODWORD(v79) - v41);
        v88 = v82 + v87;
        v89 = v83 + v87;
        v90 = v74 + v87;
        v91 = (float)((float)((float)(v55 * v86) + (float)(v54 * v85)) + (float)(v56 * v6)) + v49;
        v92 = (float)((float)((float)(v55 * v89) + (float)(v54 * v88)) + (float)(v56 * v90)) + v49;
        if (v91 < v49)
          v93 = v49;
        else
          v93 = (float)((float)((float)(v55 * v86) + (float)(v54 * v85)) + (float)(v56 * v6)) + v49;
        if (v91 <= v51)
          v94 = v93;
        else
          v94 = v51;
        *v73 = llroundf(v94);
        if (v92 < v49)
          v95 = v49;
        else
          v95 = (float)((float)((float)(v55 * v89) + (float)(v54 * v88)) + (float)(v56 * v90)) + v49;
        if (v92 > v51)
          v95 = v51;
        v73[1] = llroundf(v95);
        v96 = v85 + v88;
        v97 = v86 + v89;
        v98 = (float)(v50 + (float)((float)(v85 + v88) * v57)) + (float)((float)(v86 + v89) * v58);
        v12 = v6 + v90;
        v5 = v98 + (float)((float)(v6 + v90) * v59);
        v99 = v53;
        if (v5 <= v53)
        {
          v99 = v5;
          if (v5 < v52)
            v99 = v52;
        }
        v100 = (float)((float)(v50 + (float)(v96 * v60)) + (float)(v97 * v61)) + (float)(v12 * v62);
        *(_BYTE *)(v65 + v70) = llroundf(v99);
        v11 = v53;
        if (v100 <= v53)
        {
          v11 = v100;
          if (v100 < v52)
            v11 = v52;
        }
        *(_BYTE *)(v65 + v70 + 1) = llroundf(v11);
        v70 += 2;
        v71 += 2;
        v73 += 2;
        if (v18 <= v70)
          goto LABEL_32;
      }
      v79 = 0.0;
      v78 = 0.0;
      v77 = 0.0;
LABEL_13:
      v83 = 0.0;
      v82 = 0.0;
      goto LABEL_14;
    }
LABEL_32:
    result = (_QWORD *)((char *)result + v29);
    v69 += v30;
    v66 += v34;
    v65 += v35;
    ++v17;
  }
  while (v17 != v21);
  if (v32 && v37)
  {
    do
    {
      result = memcpy(v38, v33, v18);
      v33 += v31;
      v38 += v36;
      --v21;
    }
    while (v21);
  }
  else if (v37)
  {
    do
    {
      if (v18)
        result = memset(v38, 255, v18);
      v38 += v36;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v54;
  _BYTE *v55;
  float v56;
  float v57;
  float v58;
  size_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _WORD *v62;
  _BYTE *v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  unsigned int v97;
  float v104;
  float v105;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v118;
  float v121;
  float v122;
  float v124;
  float v125;
  float v126;
  float v128;
  float v129;
  unsigned int v135;
  float v136;
  float v138;
  float v139;
  float v140;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  char v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = result[13] * a2 / v6;
  v11 = (_QWORD *)result[16];
  v12 = v10 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + v9);
  v17 = v8 / v6;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v9);
  else
    v18 = 0;
  if (v17 != v7)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v7 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v7;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a4);
    v35 = v33 * *(float *)v24;
    v171 = v33 * *(float *)(v24 + 16);
    v172 = v33 * *(float *)(v24 + 8);
    v170 = v33 * *(float *)(v24 + 20);
    *(float *)&v36 = v33 * *(float *)(v24 + 28);
    v168 = (float)LODWORD(a5);
    v169 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v24 + 36);
    v43 = *(float *)(v24 + 40);
    v44 = *(float *)(v24 + 44);
    v167 = *(float *)(v24 + 48) * 0.5;
    v165 = *(float *)(v24 + 56) * 0.5;
    v166 = *(float *)(v24 + 52) * 0.5;
    v163 = *(float *)(v24 + 64) * 0.5;
    v164 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 72);
    v161 = *(float *)(v24 + 68) * 0.5;
    v162 = v45;
    v159 = *(float *)(v24 + 80);
    v160 = *(float *)(v24 + 76);
    v157 = *(float *)(v24 + 88);
    v158 = *(float *)(v24 + 84);
    v155 = *(float *)(v24 + 96);
    v156 = *(float *)(v24 + 92);
    v46 = *(float *)(v24 + 104);
    v47 = *(float *)(v24 + 108);
    v153 = v46;
    v154 = *(float *)(v24 + 100);
    v48 = v24 + 164;
    v49 = v24 + 16548;
    v50 = *v11 + v32 * v12;
    v51 = v24 + 32932;
    result = (_QWORD *)(v50 + v9);
    v52 = v25[1];
    _ZF = v52 == 0;
    v54 = (_BYTE *)(v52 + v28 * v22 + v21);
    if (_ZF)
      v54 = 0;
    v55 = (_BYTE *)(*v25 + v27 * v22 + v21);
    v57 = *(float *)(v24 + 112);
    v56 = *(float *)(v24 + 116);
    v58 = *(float *)(v24 + 120);
    v152 = v40;
    do
    {
      if (v20)
      {
        v59 = 0;
        v60 = v55;
        v61 = v54;
        v62 = v18;
        v63 = result;
        do
        {
          if (v61)
          {
            LOBYTE(v46) = *v61;
            *(float *)&v64 = (float)LODWORD(v46);
            v45 = *(float *)&v64 - v168;
            LOBYTE(v64) = v61[1];
            v65 = (float)v64 - v168;
            v61 += 2;
            v66 = v172 * v65;
            v67 = (float)(v170 * v65) + (float)(v45 * v171);
            v68 = v169 * v45;
          }
          else
          {
            v68 = 0.0;
            v67 = 0.0;
            v66 = 0.0;
          }
          LOBYTE(v45) = *v60;
          v69 = v35 * (float)((float)LODWORD(v45) - v34);
          v70 = v66 + v69;
          v71 = (float)(v66 + v69) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v67 + v69;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v68 + v69;
          v71 = (float)(v68 + v69) <= 8191.0;
          v76 = 8191.0;
          if (v71)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          if (v61)
          {
            LOBYTE(v75) = *v61;
            *(float *)&v77 = (float)LODWORD(v75);
            v69 = *(float *)&v77 - v168;
            LOBYTE(v77) = v61[1];
            v78 = (float)v77 - v168;
            v61 += 2;
            v79 = v172 * v78;
            v80 = (float)(v170 * v78) + (float)(v69 * v171);
            v81 = v169 * v69;
          }
          else
          {
            v81 = 0.0;
            v80 = 0.0;
            v79 = 0.0;
          }
          LOBYTE(v69) = v60[1];
          v82 = v34;
          v83 = v35;
          v84 = v35 * (float)((float)LODWORD(v69) - v34);
          v85 = v79 + v84;
          v71 = (float)(v79 + v84) <= 8191.0;
          v86 = 8191.0;
          if (v71)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v80 + v84;
          v71 = (float)(v80 + v84) <= 8191.0;
          v88 = 8191.0;
          if (v71)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v81 + v84;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          v97 = llroundf(fminf(fmaxf(v76, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v48 + 2 * v97);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          v104 = (float)((float)((float)(v57 * _S4) + (float)(v47 * _S0)) + (float)(v56 * _S7))
               + (float)(v58 * fmaxf(_S0, fmaxf(_S4, _S7)));
          v105 = 8191.0;
          if (v104 <= 8191.0)
          {
            v105 = v104;
            if (v104 < 0.0)
              v105 = 0.0;
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(v105));
          __asm { FCVT            S1, H1 }
          v111 = _S0 * _S1;
          v112 = _S4 * _S1;
          v113 = _S7 * _S1;
          v114 = (float)((float)((float)(v57 * _S6) + (float)(v47 * _S3)) + (float)(v56 * _S30))
               + (float)(v58 * fmaxf(_S3, fmaxf(_S6, _S30)));
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(v115));
          __asm { FCVT            S7, H7 }
          v118 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          v121 = (float)((float)(v160 * v112) + (float)(v111 * v162)) + (float)(v113 * v159);
          v122 = (float)((float)(v157 * v112) + (float)(v111 * v158)) + (float)(v113 * v156);
          _S0 = (float)((float)(v154 * v112) + (float)(v111 * v155)) + (float)(v113 * v153);
          v124 = (float)(v160 * _S6) + (float)(v118 * v162);
          v125 = (float)(v157 * _S6) + (float)(v118 * v158);
          v126 = (float)(v154 * _S6) + (float)(v118 * v155);
          _S1 = v124 + (float)(_S7 * v159);
          v128 = v125 + (float)(_S7 * v156);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          v129 = v126 + (float)(_S7 * v153);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          v135 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          v136 = (float)(v43 * _S7) + (float)(v42 * _S6);
          _S1 = _S6 + _S0;
          v138 = _S7 + _S4;
          v139 = (float)(v38 + (float)((float)(_S6 + _S0) * v167)) + (float)(v138 * v166);
          v140 = (float)(v38 + (float)(_S1 * v164)) + (float)(v138 * v163);
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * v135);
          __asm { FCVT            S1, H1 }
          v142 = v136 + (float)(v44 * _S17);
          v143 = v139 + (float)((float)(_S17 + _S1) * v165);
          v144 = v140 + (float)((float)(_S17 + _S1) * v161);
          if (v143 < v152)
            v145 = v152;
          else
            v145 = v143;
          v71 = v143 <= v41;
          v146 = v142 + v37;
          if (!v71)
            v145 = v41;
          v147 = llroundf(v145);
          if (v146 < v37)
            v148 = v37;
          else
            v148 = v142 + v37;
          *v63 = v147;
          if (v146 <= v39)
            v149 = v148;
          else
            v149 = v39;
          v63[1] = llroundf(v149);
          v150 = v41;
          if (v144 <= v41)
          {
            v150 = v144;
            if (v144 < v152)
              v150 = v152;
          }
          v45 = v43 * _S4;
          v46 = (float)((float)((float)(v43 * _S4) + (float)(v42 * _S0)) + (float)(v44 * _S1)) + v37;
          v63[2] = llroundf(v150);
          v151 = v39;
          v34 = v82;
          v35 = v83;
          if (v46 <= v39)
          {
            v151 = v46;
            if (v46 < v37)
              v151 = v37;
          }
          v63[3] = llroundf(v151);
          if (v62)
            *v62++ = 0;
          v59 += 2;
          v60 += 2;
          v63 += 4;
        }
        while (v20 > v59);
      }
      v55 += v27;
      v54 += v28;
      result = (_QWORD *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  size_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _WORD *v65;
  _BYTE *v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v106;
  float v108;
  float v109;
  float v113;
  float v114;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  char v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (char *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = (char *)(v29 + v28 * v21 + v20);
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = *(float *)&v32 * *(float *)v23;
    v138 = *(float *)&v32 * *(float *)(v23 + 16);
    v139 = *(float *)&v32 * *(float *)(v23 + 8);
    v36 = *(float *)&v32 * *(float *)(v23 + 20);
    v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    v42 = (float)v32;
    v43 = *(float *)(v23 + 36);
    v44 = *(float *)(v23 + 40);
    v45 = *(float *)(v23 + 44);
    v136 = *(float *)(v23 + 48) * 0.5;
    v137 = v36;
    v134 = *(float *)(v23 + 56) * 0.5;
    v135 = *(float *)(v23 + 52) * 0.5;
    _S5 = *(float *)(v23 + 64);
    v132 = _S5 * 0.5;
    v133 = *(float *)(v23 + 60) * 0.5;
    v47 = *(float *)(v23 + 72);
    v48 = *(float *)(v23 + 68) * 0.5;
    v131 = v48;
    v50 = *(float *)(v23 + 76);
    v49 = *(float *)(v23 + 80);
    v51 = *(float *)(v23 + 84);
    v52 = *(float *)(v23 + 88);
    v53 = *(float *)(v23 + 92);
    v54 = *(float *)(v23 + 96);
    v55 = *(float *)(v23 + 100);
    v56 = *(float *)(v23 + 104);
    v57 = v23 + 16548;
    v58 = v23 + 164;
    v59 = (_BYTE *)(*v10 + v31 * v11 + v9);
    v60 = v24[1];
    if (v60)
      result = (_QWORD *)(v60 + v27 * v21 + v20);
    else
      result = 0;
    v61 = (_BYTE *)(*v24 + v26 * v21 + v20);
    do
    {
      if (v19)
      {
        v62 = 0;
        v63 = v61;
        v64 = result;
        v65 = v17;
        v66 = v59;
        do
        {
          if (v64)
          {
            LOBYTE(v48) = *v64;
            *(float *)&v67 = (float)LODWORD(v48);
            _S5 = *(float *)&v67 - v34;
            LOBYTE(v67) = v64[1];
            v68 = (float)v67 - v34;
            v64 += 2;
            v69 = v139 * v68;
            v70 = (float)(v137 * v68) + (float)(_S5 * v138);
            v71 = v37 * _S5;
          }
          else
          {
            v71 = 0.0;
            v70 = 0.0;
            v69 = 0.0;
          }
          LOBYTE(_S5) = *v63;
          v72 = v35 * (float)((float)LODWORD(_S5) - v33);
          v73 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v70 + v72;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v71 + v72;
          v79 = 8191.0;
          if ((float)(v71 + v72) <= 8191.0)
          {
            v79 = v71 + v72;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v64)
          {
            LOBYTE(v78) = *v64;
            *(float *)&v80 = (float)LODWORD(v78);
            v72 = *(float *)&v80 - v34;
            LOBYTE(v80) = v64[1];
            v81 = (float)v80 - v34;
            v64 += 2;
            v82 = v139 * v81;
            v83 = (float)(v137 * v81) + (float)(v72 * v138);
            v84 = v37 * v72;
          }
          else
          {
            v84 = 0.0;
            v83 = 0.0;
            v82 = 0.0;
          }
          LOBYTE(v72) = v63[1];
          v85 = v35 * (float)((float)LODWORD(v72) - v33);
          v86 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            v86 = v82 + v85;
            if ((float)(v82 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = v83 + v85;
          v74 = (float)(v83 + v85) <= 8191.0;
          v88 = 8191.0;
          if (v74)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v84 + v85;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v50 * _S5) + (float)(_S0 * v47)) + (float)(_S24 * v49);
          v106 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          _S0 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S24 * v56);
          v108 = (float)(v50 * _S4) + (float)(_S6 * v47);
          v109 = (float)(v52 * _S4) + (float)(_S6 * v51);
          _S4 = (float)(v55 * _S4) + (float)(_S6 * v54);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v108 + (float)(_S6 * v49);
          v113 = v109 + (float)(_S6 * v53);
          LOWORD(_S26) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          v114 = _S4 + (float)(_S6 * v56);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v120 = (float)(v39 + (float)((float)(_S26 + _S0) * v133)) + (float)((float)(_S28 + _S4) * v132);
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v121 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          v122 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v136)) + (float)((float)(_S28 + _S4) * v135))
               + (float)((float)(_S30 + _S5) * v134);
          v123 = v120 + (float)((float)(_S30 + _S5) * v131);
          if (v122 < v41)
            v124 = v41;
          else
            v124 = v122;
          v125 = v121 + v38;
          if (v122 > v42)
            v124 = v42;
          v126 = llroundf(v124);
          if (v125 < v38)
            v127 = v38;
          else
            v127 = v125;
          *v66 = v126;
          if (v125 <= v40)
            v128 = v127;
          else
            v128 = v40;
          v66[1] = llroundf(v128);
          v129 = v42;
          if (v123 <= v42)
          {
            v129 = v123;
            if (v123 < v41)
              v129 = v41;
          }
          v48 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v66[2] = llroundf(v129);
          v130 = v40;
          if (v48 <= v40)
          {
            v130 = v48;
            if (v48 < v38)
              v130 = v38;
          }
          v66[3] = llroundf(v130);
          if (v65)
            *v65++ = 0;
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v61 += v26;
      result = (_QWORD *)((char *)result + v27);
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      do
      {
        result = memcpy(v15, v30, v19);
        v30 += v28;
        v15 += v13;
        --v22;
      }
      while (v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _WORD *v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  char *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  unsigned __int8 *v67;
  size_t v68;
  _BYTE *v69;
  _WORD *v70;
  _BYTE *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;

  v15 = *(_QWORD *)(result + 28);
  v16 = *result;
  v17 = v15 * a2 / v16;
  v18 = *((_QWORD *)result + 14);
  v19 = (_QWORD *)*((_QWORD *)result + 16);
  v20 = *((_QWORD *)result + 13) * a2 / v16 + *((_QWORD *)result + 15);
  v21 = (uint64_t *)*((_QWORD *)result + 17);
  v22 = v21[1];
  v23 = v19[1];
  v24 = (char *)(v23 + v22 * v20 + v18);
  v25 = (v15 + v15 * a2) / v16;
  if (v23)
    v26 = (_WORD *)(v23 + v22 * v20 + v18);
  else
    v26 = 0;
  if (v25 == v17)
    return result;
  v27 = 0;
  v28 = *(_QWORD *)(result + 20);
  v29 = *(_QWORD *)(result + 36);
  v30 = v17 + *(_QWORD *)(result + 44);
  v31 = v25 - v17;
  v32 = *((_QWORD *)result + 19);
  v33 = (_QWORD *)*((_QWORD *)result + 7);
  v34 = (uint64_t *)*((_QWORD *)result + 8);
  v35 = *v34;
  v36 = v34[1];
  v37 = v34[2];
  v38 = v33[2];
  LOWORD(a6) = *(_WORD *)(v32 + 140);
  LOWORD(a7) = *(_WORD *)(v32 + 142);
  v39 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
  LOWORD(v9) = *(_WORD *)(v32 + 144);
  LOWORD(v10) = *(_WORD *)(v32 + 146);
  LOWORD(v11) = *(_WORD *)(v32 + 148);
  LOWORD(v12) = *(_WORD *)(v32 + 150);
  LOWORD(v13) = *(_WORD *)(v32 + 152);
  v40 = *(float *)(v32 + 36);
  v41 = *(float *)(v32 + 40);
  v42 = *(float *)(v32 + 44);
  v43 = (char *)(v38 + v37 * v30 + v29);
  v44 = *v21;
  v45 = (float)LODWORD(a6);
  v46 = (float)LODWORD(a7);
  v47 = v39 * *(float *)v32;
  v48 = v39 * *(float *)(v32 + 8);
  v49 = v39 * *(float *)(v32 + 16);
  v50 = v39 * *(float *)(v32 + 20);
  v51 = v39 * *(float *)(v32 + 28);
  v52 = (float)v9;
  v53 = (float)v10;
  v54 = (float)v11;
  v55 = (float)v12;
  v56 = (float)v13;
  v57 = 0.5;
  v58 = *(float *)(v32 + 48) * 0.5;
  v59 = *(float *)(v32 + 52) * 0.5;
  v60 = *(float *)(v32 + 56) * 0.5;
  v61 = *(float *)(v32 + 60) * 0.5;
  v62 = *(float *)(v32 + 64) * 0.5;
  v63 = *(float *)(v32 + 68) * 0.5;
  v64 = (_BYTE *)(*v19 + v44 * v20 + v18);
  v65 = v33[1];
  result = (unsigned __int8 *)(v65 + v36 * v30 + v29);
  if (v65)
    v66 = (_BYTE *)(v65 + v36 * v30 + v29);
  else
    v66 = 0;
  v67 = (unsigned __int8 *)(*v33 + v35 * v30 + v29);
  do
  {
    if (v28)
    {
      v68 = 0;
      result = v67;
      v69 = v66;
      v70 = v26;
      v71 = v64;
      while (1)
      {
        v72 = 0.0;
        if (!v69)
          break;
        LOBYTE(v57) = *v69;
        v73 = (float)LODWORD(v57) - v46;
        LOBYTE(v14) = v69[1];
        v74 = (float)LODWORD(v14) - v46;
        v69 += 2;
        v75 = v48 * v74;
        v76 = (float)(v50 * v74) + (float)(v73 * v49);
        v77 = v51 * v73;
        if (!v69)
          goto LABEL_15;
        LOBYTE(v72) = *v69;
        v78 = (float)LODWORD(v72) - v46;
        LOBYTE(v7) = v69[1];
        v79 = (float)LODWORD(v7) - v46;
        v69 += 2;
        v80 = v48 * v79;
        v81 = (float)(v50 * v79) + (float)(v78 * v49);
        v72 = v51 * v78;
LABEL_16:
        LOBYTE(v8) = *result;
        v82 = v47 * (float)((float)v8 - v45);
        v83 = v75 + v82;
        v84 = v76 + v82;
        v85 = v77 + v82;
        LOBYTE(v77) = result[1];
        v86 = v47 * (float)((float)LODWORD(v77) - v45);
        v87 = v80 + v86;
        v88 = v81 + v86;
        v89 = v72 + v86;
        v90 = (float)((float)((float)(v41 * v84) + (float)(v40 * v83)) + (float)(v42 * v85)) + v52;
        v91 = v83 + (float)(v80 + v86);
        v92 = v84 + v88;
        v93 = v85 + v89;
        v94 = (float)((float)(v53 + (float)(v91 * v58)) + (float)(v92 * v59)) + (float)(v93 * v60);
        v95 = (float)((float)(v53 + (float)(v91 * v61)) + (float)(v92 * v62)) + (float)(v93 * v63);
        if (v94 < v55)
          *(float *)&v8 = v55;
        else
          *(float *)&v8 = v94;
        if (v94 <= v56)
          v96 = *(float *)&v8;
        else
          v96 = v56;
        *v71 = llroundf(v96);
        if (v90 < v52)
          v97 = v52;
        else
          v97 = v90;
        if (v90 <= v54)
          v98 = v97;
        else
          v98 = v54;
        v71[1] = llroundf(v98);
        v7 = v56;
        if (v95 <= v56)
        {
          v7 = v95;
          if (v95 < v55)
            v7 = v55;
        }
        v14 = v41 * v88;
        v99 = (float)((float)(v14 + (float)(v40 * v87)) + (float)(v42 * v89)) + v52;
        v71[2] = llroundf(v7);
        v57 = v54;
        if (v99 <= v54)
        {
          v57 = v99;
          if (v99 < v52)
            v57 = v52;
        }
        v71[3] = llroundf(v57);
        if (v70)
          *v70++ = 0;
        v68 += 2;
        result += 2;
        v71 += 4;
        if (v28 <= v68)
          goto LABEL_37;
      }
      v77 = 0.0;
      v76 = 0.0;
      v75 = 0.0;
LABEL_15:
      v81 = 0.0;
      v80 = 0.0;
      goto LABEL_16;
    }
LABEL_37:
    v67 += v35;
    v66 += v36;
    v64 += v44;
    ++v27;
  }
  while (v27 != v31);
  if (v38 && v26)
  {
    do
    {
      result = (unsigned __int8 *)memcpy(v24, v43, v28);
      v43 += v37;
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  else if (v26)
  {
    do
    {
      if (v28)
        result = (unsigned __int8 *)memset(v24, 255, v28);
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v62;
  _BYTE *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  size_t v68;
  _BYTE *v69;
  _BYTE *v70;
  _WORD *v71;
  _BYTE *v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  unsigned int v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  unsigned int v105;
  float v112;
  float v113;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v126;
  float v128;
  float v129;
  float v130;
  float v134;
  unsigned int v135;
  unsigned int v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  char v154;
  float v155;
  char v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = result[13] * a2 / v6;
  v11 = (_QWORD *)result[16];
  v12 = v10 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + v9);
  v17 = v8 / v6;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v9);
  else
    v18 = 0;
  if (v17 != v7)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v7 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v7;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a4);
    v35 = (float)LODWORD(a5);
    v36 = v33 * *(float *)v24;
    v170 = v33 * *(float *)(v24 + 16);
    v171 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v168 = *(float *)&v38;
    v169 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v166 = *(float *)(v24 + 36);
    v167 = v40;
    v44 = *(float *)(v24 + 44);
    v164 = *(float *)(v24 + 48) * 0.5;
    v165 = *(float *)(v24 + 40);
    v162 = *(float *)(v24 + 56) * 0.5;
    v163 = *(float *)(v24 + 52) * 0.5;
    v45 = *(float *)(v24 + 64);
    v160 = v45 * 0.5;
    v161 = *(float *)(v24 + 60) * 0.5;
    v46 = *(float *)(v24 + 72);
    v47 = *(float *)(v24 + 68) * 0.5;
    v159 = v47;
    v49 = *(float *)(v24 + 76);
    v48 = *(float *)(v24 + 80);
    v50 = *(float *)(v24 + 84);
    v51 = *(float *)(v24 + 88);
    v52 = *(float *)(v24 + 92);
    v53 = *(float *)(v24 + 96);
    v54 = *(float *)(v24 + 100);
    v55 = *(float *)(v24 + 104);
    v56 = v24 + 164;
    v57 = v24 + 16548;
    v58 = *v11 + v32 * v12;
    v59 = v24 + 32932;
    result = (_QWORD *)(v58 + v9);
    v60 = v25[1];
    _ZF = v60 == 0;
    v62 = (_BYTE *)(v60 + v28 * v22 + v21);
    if (_ZF)
      v62 = 0;
    v63 = (_BYTE *)(*v25 + v27 * v22 + v21);
    v64 = *(float *)(v24 + 108);
    v65 = *(float *)(v24 + 112);
    v66 = *(float *)(v24 + 116);
    v67 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        v68 = 0;
        v69 = v63;
        v70 = v62;
        v71 = v18;
        v72 = result;
        do
        {
          if (v70)
          {
            LOBYTE(v47) = *v70;
            *(float *)&v73 = (float)LODWORD(v47);
            v45 = *(float *)&v73 - v35;
            LOBYTE(v73) = v70[1];
            v74 = (float)v73 - v35;
            v70 += 2;
            v75 = v171 * v74;
            v76 = (float)(v169 * v74) + (float)(v45 * v170);
            v77 = v168 * v45;
          }
          else
          {
            v77 = 0.0;
            v76 = 0.0;
            v75 = 0.0;
          }
          LOBYTE(v45) = *v69;
          v78 = v36 * (float)((float)LODWORD(v45) - v34);
          v79 = v75 + v78;
          v80 = (float)(v75 + v78) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v76 + v78;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v77 + v78;
          v80 = (float)(v77 + v78) <= 8191.0;
          v85 = 8191.0;
          if (v80)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          if (v70)
          {
            LOBYTE(v84) = *v70;
            *(float *)&v86 = (float)LODWORD(v84);
            v78 = *(float *)&v86 - v35;
            LOBYTE(v86) = v70[1];
            v87 = (float)v86 - v35;
            v70 += 2;
            v88 = v171 * v87;
            v89 = (float)(v169 * v87) + (float)(v78 * v170);
            v90 = v168 * v78;
          }
          else
          {
            v90 = 0.0;
            v89 = 0.0;
            v88 = 0.0;
          }
          LOBYTE(v78) = v69[1];
          v91 = v34;
          v92 = v36 * (float)((float)LODWORD(v78) - v34);
          v93 = v88 + v92;
          v80 = (float)(v88 + v92) <= 8191.0;
          v94 = 8191.0;
          if (v80)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v89 + v92;
          v80 = (float)(v89 + v92) <= 8191.0;
          v96 = 8191.0;
          if (v80)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v90 + v92;
          v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          v105 = llroundf(fminf(fmaxf(v85, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v56 + 2 * v105);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          v112 = (float)((float)((float)(v65 * _S4) + (float)(v64 * _S0)) + (float)(v66 * _S7))
               + (float)(v67 * fmaxf(_S0, fmaxf(_S4, _S7)));
          v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            v113 = v112;
            if (v112 < 0.0)
              v113 = 0.0;
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(v113));
          __asm { FCVT            S1, H1 }
          v119 = _S0 * _S1;
          v120 = _S4 * _S1;
          v121 = _S7 * _S1;
          v122 = (float)((float)((float)(v65 * _S6) + (float)(v64 * _S3)) + (float)(v66 * _S30))
               + (float)(v67 * fmaxf(_S3, fmaxf(_S6, _S30)));
          v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            v123 = v122;
            if (v122 < 0.0)
              v123 = 0.0;
          }
          _H7 = *(_WORD *)(v57 + 2 * llroundf(v123));
          __asm { FCVT            S7, H7 }
          v126 = _S3 * _S7;
          _S6 = _S6 * _S7;
          v128 = _S30 * _S7;
          v129 = (float)((float)(v49 * v120) + (float)(v119 * v46)) + (float)(v121 * v48);
          v130 = (float)((float)(v51 * v120) + (float)(v119 * v50)) + (float)(v121 * v52);
          _S0 = (float)((float)(v54 * v120) + (float)(v119 * v53)) + (float)(v121 * v55);
          _S1 = (float)(v49 * _S6) + (float)(v126 * v46);
          _S4 = (float)(v51 * _S6) + (float)(v126 * v50);
          v134 = (float)((float)(v54 * _S6) + (float)(v126 * v53)) + (float)(v128 * v55);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          v135 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S1 + (float)(v128 * v48), 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S4 + (float)(v128 * v52), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v140 = llroundf(fminf(fmaxf(v134, 0.0), 8191.0));
          v141 = (float)(v165 * _S0) + (float)(v166 * _S6);
          v142 = (float)(v165 * _S4) + (float)(v166 * _S1);
          v143 = _S6 + _S1;
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * v135);
          v144 = _S0 + _S4;
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * v140);
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          v147 = (float)(v141 + (float)(v44 * _S6)) + v39;
          v148 = v142 + (float)(v44 * _S4);
          v149 = _S6 + _S4;
          v150 = (float)(v167 + (float)(v143 * v164)) + (float)(v144 * v163);
          v151 = (float)(v167 + (float)(v143 * v161)) + (float)(v144 * v160);
          if (v147 < v39)
            v152 = v39;
          else
            v152 = v147;
          v80 = v147 <= v41;
          v153 = v150 + (float)(v149 * v162);
          if (!v80)
            v152 = v41;
          v154 = llroundf(v152);
          if (v153 < v42)
            v155 = v42;
          else
            v155 = v150 + (float)(v149 * v162);
          if (v153 > v43)
            v155 = v43;
          v156 = llroundf(v155);
          v47 = v151 + (float)(v149 * v159);
          if ((float)(v148 + v39) < v39)
            v45 = v39;
          else
            v45 = v148 + v39;
          *v72 = v154;
          v72[1] = v156;
          if ((float)(v148 + v39) <= v41)
            v157 = v45;
          else
            v157 = v41;
          v72[2] = llroundf(v157);
          v158 = v43;
          if (v47 <= v43)
          {
            v158 = v47;
            if (v47 < v42)
              v158 = v42;
          }
          v72[3] = llroundf(v158);
          v34 = v91;
          if (v71)
            *v71++ = 0;
          v68 += 2;
          v69 += 2;
          v72 += 4;
        }
        while (v20 > v68);
      }
      v63 += v27;
      v62 += v28;
      result = (_QWORD *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  size_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _WORD *v65;
  _BYTE *v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v105;
  float v106;
  float v108;
  float v109;
  float v110;
  float v114;
  unsigned int v115;
  unsigned int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  char v134;
  float v135;
  float v136;
  char v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (char *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = (char *)(v29 + v28 * v21 + v20);
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = *(float *)&v32 * *(float *)v23;
    v147 = *(float *)&v32 * *(float *)(v23 + 16);
    v148 = *(float *)&v32 * *(float *)(v23 + 8);
    v36 = *(float *)&v32 * *(float *)(v23 + 20);
    v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    v42 = (float)v32;
    v43 = *(float *)(v23 + 36);
    v44 = *(float *)(v23 + 40);
    v45 = *(float *)(v23 + 44);
    v145 = *(float *)(v23 + 48) * 0.5;
    v146 = v36;
    v143 = *(float *)(v23 + 56) * 0.5;
    v144 = *(float *)(v23 + 52) * 0.5;
    v46 = *(float *)(v23 + 64);
    v141 = v46 * 0.5;
    v142 = *(float *)(v23 + 60) * 0.5;
    v47 = *(float *)(v23 + 72);
    v48 = *(float *)(v23 + 68) * 0.5;
    v140 = v48;
    v50 = *(float *)(v23 + 76);
    v49 = *(float *)(v23 + 80);
    v51 = *(float *)(v23 + 84);
    v52 = *(float *)(v23 + 88);
    v53 = *(float *)(v23 + 92);
    v54 = *(float *)(v23 + 96);
    v55 = *(float *)(v23 + 100);
    v56 = *(float *)(v23 + 104);
    v57 = v23 + 16548;
    v58 = v23 + 164;
    v59 = (_BYTE *)(*v10 + v31 * v11 + v9);
    v60 = v24[1];
    if (v60)
      result = (_QWORD *)(v60 + v27 * v21 + v20);
    else
      result = 0;
    v61 = (_BYTE *)(*v24 + v26 * v21 + v20);
    do
    {
      if (v19)
      {
        v62 = 0;
        v63 = v61;
        v64 = result;
        v65 = v17;
        v66 = v59;
        do
        {
          if (v64)
          {
            LOBYTE(v48) = *v64;
            *(float *)&v67 = (float)LODWORD(v48);
            v46 = *(float *)&v67 - v34;
            LOBYTE(v67) = v64[1];
            v68 = (float)v67 - v34;
            v64 += 2;
            v69 = v148 * v68;
            v70 = (float)(v146 * v68) + (float)(v46 * v147);
            v71 = v37 * v46;
          }
          else
          {
            v71 = 0.0;
            v70 = 0.0;
            v69 = 0.0;
          }
          LOBYTE(v46) = *v63;
          v72 = v35 * (float)((float)LODWORD(v46) - v33);
          v73 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v70 + v72;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v71 + v72;
          v79 = 8191.0;
          if ((float)(v71 + v72) <= 8191.0)
          {
            v79 = v71 + v72;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v64)
          {
            LOBYTE(v78) = *v64;
            *(float *)&v80 = (float)LODWORD(v78);
            v72 = *(float *)&v80 - v34;
            LOBYTE(v80) = v64[1];
            v81 = (float)v80 - v34;
            v64 += 2;
            v82 = v148 * v81;
            v83 = (float)(v146 * v81) + (float)(v72 * v147);
            v84 = v37 * v72;
          }
          else
          {
            v84 = 0.0;
            v83 = 0.0;
            v82 = 0.0;
          }
          LOBYTE(v72) = v63[1];
          v85 = v35 * (float)((float)LODWORD(v72) - v33);
          v86 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            v86 = v82 + v85;
            if ((float)(v82 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = v83 + v85;
          v74 = (float)(v83 + v85) <= 8191.0;
          v88 = 8191.0;
          if (v74)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v84 + v85;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v105 = (float)((float)(v50 * _S5) + (float)(_S0 * v47)) + (float)(_S24 * v49);
          v106 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          _S0 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S24 * v56);
          v108 = (float)(v50 * _S4) + (float)(_S6 * v47);
          v109 = (float)(v52 * _S4) + (float)(_S6 * v51);
          v110 = (float)(v55 * _S4) + (float)(_S6 * v54);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v108 + (float)(_S6 * v49);
          _S24 = v109 + (float)(_S6 * v53);
          v114 = v110 + (float)(_S6 * v56);
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          v115 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v120 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          v121 = (float)(v44 * _S0) + (float)(v43 * _S6);
          v122 = (float)(v44 * _S24) + (float)(v43 * _S5);
          v123 = _S6 + _S5;
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * v115);
          v124 = _S0 + _S24;
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * v120);
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          v127 = (float)(v121 + (float)(v45 * _S6)) + v38;
          v128 = v122 + (float)(v45 * _S24);
          v129 = _S6 + _S24;
          v130 = (float)(v39 + (float)(v123 * v145)) + (float)(v124 * v144);
          v131 = (float)(v39 + (float)(v123 * v142)) + (float)(v124 * v141);
          if (v127 < v38)
            v132 = v38;
          else
            v132 = v127;
          v74 = v127 <= v40;
          v133 = v130 + (float)(v129 * v143);
          if (!v74)
            v132 = v40;
          v134 = llroundf(v132);
          if (v133 < v41)
            v135 = v41;
          else
            v135 = v130 + (float)(v129 * v143);
          if (v133 <= v42)
            v136 = v135;
          else
            v136 = v42;
          v137 = llroundf(v136);
          v48 = v131 + (float)(v129 * v140);
          if ((float)(v128 + v38) < v38)
            v46 = v38;
          else
            v46 = v128 + v38;
          *v66 = v134;
          v66[1] = v137;
          if ((float)(v128 + v38) <= v40)
            v138 = v46;
          else
            v138 = v40;
          v66[2] = llroundf(v138);
          v139 = v42;
          if (v48 <= v42)
          {
            v139 = v48;
            if (v48 < v41)
              v139 = v41;
          }
          v66[3] = llroundf(v139);
          if (v65)
            *v65++ = 0;
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v61 += v26;
      result = (_QWORD *)((char *)result + v27);
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      do
      {
        result = memcpy(v15, v30, v19);
        v30 += v28;
        v15 += v13;
        --v22;
      }
      while (v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _WORD *v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  char *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  unsigned __int8 *v67;
  size_t v68;
  _BYTE *v69;
  _WORD *v70;
  _BYTE *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;

  v15 = *(_QWORD *)(result + 28);
  v16 = *result;
  v17 = v15 * a2 / v16;
  v18 = *((_QWORD *)result + 14);
  v19 = (_QWORD *)*((_QWORD *)result + 16);
  v20 = *((_QWORD *)result + 13) * a2 / v16 + *((_QWORD *)result + 15);
  v21 = (uint64_t *)*((_QWORD *)result + 17);
  v22 = v21[1];
  v23 = v19[1];
  v24 = (char *)(v23 + v22 * v20 + v18);
  v25 = (v15 + v15 * a2) / v16;
  if (v23)
    v26 = (_WORD *)(v23 + v22 * v20 + v18);
  else
    v26 = 0;
  if (v25 == v17)
    return result;
  v27 = 0;
  v28 = *(_QWORD *)(result + 20);
  v29 = *(_QWORD *)(result + 36);
  v30 = v17 + *(_QWORD *)(result + 44);
  v31 = v25 - v17;
  v32 = *((_QWORD *)result + 19);
  v33 = (_QWORD *)*((_QWORD *)result + 7);
  v34 = (uint64_t *)*((_QWORD *)result + 8);
  v35 = *v34;
  v36 = v34[1];
  v37 = v34[2];
  v38 = v33[2];
  LOWORD(a6) = *(_WORD *)(v32 + 140);
  LOWORD(a7) = *(_WORD *)(v32 + 142);
  v39 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
  LOWORD(v9) = *(_WORD *)(v32 + 144);
  LOWORD(v10) = *(_WORD *)(v32 + 146);
  LOWORD(v11) = *(_WORD *)(v32 + 148);
  LOWORD(v12) = *(_WORD *)(v32 + 150);
  LOWORD(v13) = *(_WORD *)(v32 + 152);
  v40 = *(float *)(v32 + 36);
  v41 = *(float *)(v32 + 40);
  v42 = *(float *)(v32 + 44);
  v43 = (char *)(v38 + v37 * v30 + v29);
  v44 = *v21;
  v45 = (float)LODWORD(a6);
  v46 = (float)LODWORD(a7);
  v47 = v39 * *(float *)v32;
  v48 = v39 * *(float *)(v32 + 8);
  v49 = v39 * *(float *)(v32 + 16);
  v50 = v39 * *(float *)(v32 + 20);
  v51 = v39 * *(float *)(v32 + 28);
  v52 = (float)v9;
  v53 = (float)v10;
  v54 = (float)v11;
  v55 = (float)v12;
  v56 = (float)v13;
  v57 = 0.5;
  v58 = *(float *)(v32 + 48) * 0.5;
  v59 = *(float *)(v32 + 52) * 0.5;
  v60 = *(float *)(v32 + 56) * 0.5;
  v61 = *(float *)(v32 + 60) * 0.5;
  v62 = *(float *)(v32 + 64) * 0.5;
  v63 = *(float *)(v32 + 68) * 0.5;
  v64 = (_BYTE *)(*v19 + v44 * v20 + v18);
  v65 = v33[1];
  result = (unsigned __int8 *)(v65 + v36 * v30 + v29);
  if (v65)
    v66 = (_BYTE *)(v65 + v36 * v30 + v29);
  else
    v66 = 0;
  v67 = (unsigned __int8 *)(*v33 + v35 * v30 + v29);
  do
  {
    if (v28)
    {
      v68 = 0;
      result = v67;
      v69 = v66;
      v70 = v26;
      v71 = v64;
      while (1)
      {
        v72 = 0.0;
        if (!v69)
          break;
        LOBYTE(v57) = *v69;
        v73 = (float)LODWORD(v57) - v46;
        LOBYTE(v14) = v69[1];
        v74 = (float)v14 - v46;
        v69 += 2;
        v75 = v48 * v74;
        v76 = (float)(v50 * v74) + (float)(v73 * v49);
        v77 = v51 * v73;
        if (!v69)
          goto LABEL_15;
        LOBYTE(v72) = *v69;
        v78 = (float)LODWORD(v72) - v46;
        LOBYTE(v7) = v69[1];
        v79 = (float)LODWORD(v7) - v46;
        v69 += 2;
        v80 = v48 * v79;
        v81 = (float)(v50 * v79) + (float)(v78 * v49);
        v72 = v51 * v78;
LABEL_16:
        LOBYTE(v8) = *result;
        *(float *)&v82 = v47 * (float)((float)LODWORD(v8) - v45);
        v83 = v75 + *(float *)&v82;
        v84 = v76 + *(float *)&v82;
        v85 = v77 + *(float *)&v82;
        LOBYTE(v82) = result[1];
        v86 = v47 * (float)((float)v82 - v45);
        v87 = v80 + v86;
        v88 = v81 + v86;
        v89 = v72 + v86;
        v8 = (float)((float)((float)(v41 * v84) + (float)(v40 * v83)) + (float)(v42 * v85)) + v52;
        v90 = (float)((float)((float)(v41 * v88) + (float)(v40 * v87)) + (float)(v42 * v89)) + v52;
        v91 = v83 + v87;
        v92 = v84 + v88;
        v7 = (float)(v53 + (float)(v91 * v58)) + (float)(v92 * v59);
        v93 = v85 + v89;
        v94 = v7 + (float)(v93 * v60);
        v95 = (float)(v53 + (float)(v91 * v61)) + (float)(v92 * v62);
        if (v8 < v52)
          v96 = v52;
        else
          v96 = v8;
        if (v8 > v54)
          v96 = v54;
        v97 = v95 + (float)(v93 * v63);
        *v71 = llroundf(v96);
        if (v94 < v55)
          *(float *)&v14 = v55;
        else
          *(float *)&v14 = v94;
        if (v94 <= v56)
          v98 = *(float *)&v14;
        else
          v98 = v56;
        v71[1] = llroundf(v98);
        if (v90 < v52)
          v99 = v52;
        else
          v99 = v90;
        if (v90 > v54)
          v99 = v54;
        v71[2] = llroundf(v99);
        v57 = v56;
        if (v97 <= v56)
        {
          v57 = v97;
          if (v97 < v55)
            v57 = v55;
        }
        v71[3] = llroundf(v57);
        if (v70)
          *v70++ = 0;
        v68 += 2;
        result += 2;
        v71 += 4;
        if (v28 <= v68)
          goto LABEL_38;
      }
      v77 = 0.0;
      v76 = 0.0;
      v75 = 0.0;
LABEL_15:
      v81 = 0.0;
      v80 = 0.0;
      goto LABEL_16;
    }
LABEL_38:
    v67 += v35;
    v66 += v36;
    v64 += v44;
    ++v27;
  }
  while (v27 != v31);
  if (v38 && v26)
  {
    do
    {
      result = (unsigned __int8 *)memcpy(v24, v43, v28);
      v43 += v37;
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  else if (v26)
  {
    do
    {
      if (v28)
        result = (unsigned __int8 *)memset(v24, 255, v28);
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  char v66;
  float v67;
  float v68;
  float v69;
  float v70;
  unint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _WORD *v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  unsigned int v105;
  float v112;
  float v113;
  float v114;
  float v115;
  float v120;
  float v121;
  float v124;
  float v125;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v143;
  float v144;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  _WORD *v155;
  uint64_t v156;
  unint64_t v157;
  _WORD *v158;
  unsigned __int8 *v159;
  __int16 v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (unsigned __int8 *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v173 = v31 * *(float *)(v17 + 16);
    v174 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v171 = *(float *)&v36;
    v172 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v17 + 36);
    v175 = v40;
    v176 = *(float *)(v17 + 40);
    v43 = *(float *)(v17 + 44);
    v169 = *(float *)(v17 + 48) * 0.5;
    v170 = v38;
    v167 = *(float *)(v17 + 56) * 0.5;
    v168 = *(float *)(v17 + 52) * 0.5;
    v165 = *(float *)(v17 + 64) * 0.5;
    v166 = *(float *)(v17 + 60) * 0.5;
    v163 = *(float *)(v17 + 68) * 0.5;
    v164 = *(float *)(v17 + 72);
    v44 = *(float *)(v17 + 76);
    v45 = *(float *)(v17 + 80);
    v46 = *(float *)(v17 + 84);
    v161 = v45;
    v162 = v44;
    v47 = *(float *)(v17 + 88);
    v48 = *(float *)(v17 + 92);
    v49 = *(float *)(v17 + 96);
    v50 = *(float *)(v17 + 100);
    v51 = *(float *)(v17 + 104);
    result = (_QWORD *)(v17 + 164);
    v52 = v17 + 16548;
    v53 = *(unsigned __int8 *)(v17 + 132);
    if (v53 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v53;
    v55 = v15[1];
    _ZF = v55 == 0;
    v57 = v55 + v27 * v16;
    v58 = *v15 + v26 * v16;
    v59 = v17 + 32932;
    v60 = v57 + 2 * v14;
    if (_ZF)
      v60 = 0;
    v61 = (_WORD *)(v58 + 2 * v14);
    v63 = *v18;
    v62 = v18[1];
    v64 = (_BYTE *)(v62 + v22 * v12 + v11);
    if (!v62)
      v64 = 0;
    v65 = (_BYTE *)(v63 + v21 * v12 + v11);
    v66 = v54;
    v67 = *(float *)(v17 + 108);
    v68 = *(float *)(v17 + 112);
    v69 = *(float *)(v17 + 116);
    v70 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        v71 = 0;
        v72 = v65;
        v73 = v64;
        v74 = v61;
        do
        {
          if (v73)
          {
            LOBYTE(v45) = *v73;
            *(float *)&v75 = (float)LODWORD(v45);
            v44 = *(float *)&v75 - v33;
            LOBYTE(v75) = v73[1];
            v76 = (float)v75 - v33;
            v73 += 2;
            v77 = v174 * v76;
            v78 = (float)(v172 * v76) + (float)(v44 * v173);
            v79 = v171 * v44;
          }
          else
          {
            v79 = 0.0;
            v78 = 0.0;
            v77 = 0.0;
          }
          LOBYTE(v44) = *v72;
          v80 = v34 * (float)((float)LODWORD(v44) - v32);
          v81 = v77 + v80;
          v82 = (float)(v77 + v80) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          v84 = v78 + v80;
          v85 = 8191.0;
          if ((float)(v78 + v80) <= 8191.0)
          {
            v85 = v78 + v80;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v79 + v80;
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          if (v73)
          {
            LOBYTE(v86) = *v73;
            v86 = (float)LODWORD(v86) - v33;
            LOBYTE(v84) = v73[1];
            v88 = (float)LODWORD(v84) - v33;
            v73 += 2;
            v89 = v174 * v88;
            v90 = (float)(v172 * v88) + (float)(v86 * v173);
            v91 = v171 * v86;
          }
          else
          {
            v91 = 0.0;
            v90 = 0.0;
            v89 = 0.0;
          }
          LOBYTE(v86) = v72[1];
          v92 = v34 * (float)((float)LODWORD(v86) - v32);
          v93 = v89 + v92;
          v82 = (float)(v89 + v92) <= 8191.0;
          v94 = 8191.0;
          if (v82)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v90 + v92;
          v82 = (float)(v90 + v92) <= 8191.0;
          v96 = 8191.0;
          if (v82)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v91 + v92;
          v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          v105 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *((_WORD *)result + v105);
          __asm { FCVT            S30, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          v112 = fmaxf(_S0, fmaxf(_S4, _S30));
          v113 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v112);
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v112);
            if (v113 < 0.0)
              v114 = 0.0;
          }
          v115 = v42;
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v52 + 2 * llroundf(v114));
          v120 = (float)((float)((float)(v68 * _S6) + (float)(v67 * _S1)) + (float)(v69 * _S7))
               + (float)(v70 * fmaxf(_S1, fmaxf(_S6, _S7)));
          v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            v121 = v120;
            if (v120 < 0.0)
              v121 = 0.0;
          }
          __asm { FCVT            S3, H19 }
          _S0 = _S0 * _S3;
          v124 = _S4 * _S3;
          v125 = _S30 * _S3;
          _H17 = *(_WORD *)(v52 + 2 * llroundf(v121));
          __asm { FCVT            S17, H17 }
          _S1 = _S1 * _S17;
          v129 = _S6 * _S17;
          v130 = _S7 * _S17;
          v131 = (float)((float)(v162 * v124) + (float)(_S0 * v164)) + (float)(v125 * v161);
          v132 = (float)((float)(v47 * v124) + (float)(_S0 * v46)) + (float)(v125 * v48);
          v133 = (float)((float)(v50 * v124) + (float)(_S0 * v49)) + (float)(v125 * v51);
          v134 = (float)((float)(v162 * v129) + (float)(_S1 * v164)) + (float)(v130 * v161);
          v135 = (float)((float)(v47 * v129) + (float)(_S1 * v46)) + (float)(v130 * v48);
          v136 = (float)((float)(v50 * v129) + (float)(_S1 * v49)) + (float)(v130 * v51);
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          v42 = v115;
          v143 = (float)((float)((float)(v176 * _S4) + (float)(v115 * _S0)) + (float)(v43 * _S30)) + v37;
          v144 = v39;
          if (v143 <= v39)
          {
            v144 = (float)((float)((float)(v176 * _S4) + (float)(v115 * _S0)) + (float)(v43 * _S30)) + v37;
            if (v143 < v37)
              v144 = v37;
          }
          __asm
          {
            FCVT            S7, H1
            FCVT            S6, H6
            FCVT            S1, H19
          }
          v148 = (float)((float)((float)(v176 * _S6) + (float)(v115 * _S7)) + (float)(v43 * _S1)) + v37;
          *v74 = llroundf(v144) << v66;
          v149 = v39;
          if (v148 <= v39)
          {
            v149 = (float)((float)((float)(v176 * _S6) + (float)(v115 * _S7)) + (float)(v43 * _S1)) + v37;
            if (v148 < v37)
              v149 = v37;
          }
          v74[1] = llroundf(v149) << v66;
          v150 = _S0 + _S7;
          v151 = _S4 + _S6;
          v152 = _S30 + _S1;
          v153 = (float)((float)(v170 + (float)(v150 * v169)) + (float)(v151 * v168)) + (float)(v152 * v167);
          v154 = v41;
          if (v153 <= v41)
          {
            v154 = (float)((float)(v170 + (float)(v150 * v169)) + (float)(v151 * v168)) + (float)(v152 * v167);
            if (v153 < v175)
              v154 = v175;
          }
          v155 = (_WORD *)(v60 + 2 * v71);
          v45 = (float)((float)(v170 + (float)(v150 * v166)) + (float)(v151 * v165)) + (float)(v152 * v163);
          *v155 = llroundf(v154) << v66;
          v44 = v41;
          if (v45 <= v41)
          {
            v44 = v45;
            if (v45 < v175)
              v44 = v175;
          }
          v155[1] = llroundf(v44) << v66;
          v71 += 2;
          v72 += 2;
          v74 += 2;
        }
        while (v10 > v71);
      }
      v65 += v21;
      v64 += v22;
      v61 = (_WORD *)((char *)v61 + v26);
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v156 = 0;
      do
      {
        if (v10)
        {
          v157 = v10;
          v158 = v30;
          v159 = v25;
          do
          {
            v160 = *v159++;
            *v158++ = v160 | (v160 << 8);
            --v157;
          }
          while (v157);
        }
        v25 += v23;
        v30 += v28;
        ++v156;
      }
      while (v156 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, 2 * v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  char v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  _WORD *v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  BOOL v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v124;
  float v125;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  _WORD *v136;
  float v137;
  float v138;
  uint64_t v139;
  unint64_t v140;
  _WORD *v141;
  unsigned __int8 *v142;
  __int16 v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (uint64_t *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (unsigned __int8 *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v152 = v31 * *(float *)(v17 + 16);
    v153 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v150 = *(float *)&v36;
    v151 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&v40 = (float)v36;
    v154 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    v41 = (float)v40;
    v42 = *(float *)(v17 + 36);
    v43 = *(float *)(v17 + 40);
    v44 = *(float *)(v17 + 44);
    v148 = *(float *)(v17 + 52) * 0.5;
    v149 = *(float *)(v17 + 48) * 0.5;
    v45 = *(float *)(v17 + 64);
    v146 = *(float *)(v17 + 60) * 0.5;
    v147 = *(float *)(v17 + 56) * 0.5;
    v46 = *(float *)(v17 + 72);
    v47 = *(float *)(v17 + 68) * 0.5;
    v144 = v47;
    v145 = v45 * 0.5;
    v49 = *(float *)(v17 + 76);
    v48 = *(float *)(v17 + 80);
    v50 = *(float *)(v17 + 84);
    v51 = *(float *)(v17 + 88);
    v52 = *(float *)(v17 + 92);
    v53 = *(float *)(v17 + 96);
    v54 = *(float *)(v17 + 100);
    v55 = *(float *)(v17 + 104);
    result = (_QWORD *)(v17 + 164);
    v56 = v17 + 16548;
    v57 = *(unsigned __int8 *)(v17 + 132);
    if (v57 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v57;
    v60 = *v15;
    v59 = v15[1];
    v61 = v59 + v27 * v16 + 2 * v14;
    if (!v59)
      v61 = 0;
    v62 = v60 + v26 * v16 + 2 * v14;
    v64 = *v18;
    v63 = v18[1];
    v65 = (_BYTE *)(v63 + v22 * v12 + v11);
    if (!v63)
      v65 = 0;
    v66 = (_BYTE *)(v64 + v21 * v12 + v11);
    v67 = v58;
    do
    {
      if (v10)
      {
        v68 = 0;
        v69 = v66;
        v70 = v65;
        v71 = (_WORD *)v62;
        do
        {
          if (v70)
          {
            LOBYTE(v47) = *v70;
            *(float *)&v72 = (float)LODWORD(v47);
            v45 = *(float *)&v72 - v33;
            LOBYTE(v72) = v70[1];
            v73 = (float)v72 - v33;
            v70 += 2;
            v74 = v153 * v73;
            v75 = (float)(v151 * v73) + (float)(v45 * v152);
            v76 = v150 * v45;
          }
          else
          {
            v76 = 0.0;
            v75 = 0.0;
            v74 = 0.0;
          }
          LOBYTE(v45) = *v69;
          v77 = v34 * (float)((float)LODWORD(v45) - v32);
          v78 = v74 + v77;
          v79 = (float)(v74 + v77) <= 8191.0;
          v80 = 8191.0;
          if (v79)
          {
            v80 = v78;
            if (v78 < 0.0)
              v80 = 0.0;
          }
          v81 = v75 + v77;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v76 + v77;
          v84 = 8191.0;
          if ((float)(v76 + v77) <= 8191.0)
          {
            v84 = v76 + v77;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          if (v70)
          {
            LOBYTE(v83) = *v70;
            *(float *)&v85 = (float)LODWORD(v83);
            v77 = *(float *)&v85 - v33;
            LOBYTE(v85) = v70[1];
            v86 = (float)v85 - v33;
            v70 += 2;
            v87 = v153 * v86;
            v88 = (float)(v151 * v86) + (float)(v77 * v152);
            v89 = v150 * v77;
          }
          else
          {
            v89 = 0.0;
            v88 = 0.0;
            v87 = 0.0;
          }
          LOBYTE(v77) = v69[1];
          v90 = v34 * (float)((float)LODWORD(v77) - v32);
          v91 = 8191.0;
          if ((float)(v87 + v90) <= 8191.0)
          {
            v91 = v87 + v90;
            if ((float)(v87 + v90) < 0.0)
              v91 = 0.0;
          }
          v92 = v88 + v90;
          v79 = (float)(v88 + v90) <= 8191.0;
          v93 = 8191.0;
          if (v79)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v89 + v90;
          v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v112 = (float)((float)(v49 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v48);
          v113 = (float)((float)(v51 * _S5) + (float)(_S0 * v50)) + (float)(_S24 * v52);
          v114 = (float)((float)(v54 * _S5) + (float)(_S0 * v53)) + (float)(_S24 * v55);
          v115 = (float)((float)(v49 * _S4) + (float)(_S6 * v46)) + (float)(_S26 * v48);
          v116 = (float)((float)(v51 * _S4) + (float)(_S6 * v50)) + (float)(_S26 * v52);
          v117 = (float)((float)(v54 * _S4) + (float)(_S6 * v53)) + (float)(_S26 * v55);
          LOWORD(_S0) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S24, H4 }
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          v124 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
          v125 = v39;
          if (v124 <= v39)
          {
            v125 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
            if (v124 < v37)
              v125 = v37;
          }
          __asm
          {
            FCVT            S25, H4
            FCVT            S5, H5
            FCVT            S4, H28
          }
          v129 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
          *v71 = llroundf(v125) << v67;
          v130 = v39;
          if (v129 <= v39)
          {
            v130 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
            if (v129 < v37)
              v130 = v37;
          }
          v71[1] = llroundf(v130) << v67;
          v131 = _S0 + _S25;
          v132 = _S24 + _S5;
          v133 = _S26 + _S4;
          v134 = (float)((float)(v38 + (float)(v131 * v149)) + (float)(v132 * v148)) + (float)(v133 * v147);
          v135 = v41;
          if (v134 <= v41)
          {
            v135 = (float)((float)(v38 + (float)(v131 * v149)) + (float)(v132 * v148)) + (float)(v133 * v147);
            if (v134 < v154)
              v135 = v154;
          }
          v136 = (_WORD *)(v61 + 2 * v68);
          v137 = (float)(v38 + (float)(v131 * v146)) + (float)(v132 * v145);
          v45 = v144;
          v47 = v137 + (float)(v133 * v144);
          *v136 = llroundf(v135) << v67;
          v138 = v41;
          if (v47 <= v41)
          {
            v138 = v47;
            if (v47 < v154)
              v138 = v154;
          }
          v136[1] = llroundf(v138) << v67;
          v68 += 2;
          v69 += 2;
          v71 += 2;
        }
        while (v10 > v68);
      }
      v66 += v21;
      v65 += v22;
      v62 += v26;
      v61 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v139 = 0;
      do
      {
        if (v10)
        {
          v140 = v10;
          v141 = v30;
          v142 = v25;
          do
          {
            v143 = *v142++;
            *v141++ = v143 | (v143 << 8);
            --v140;
          }
          while (v140);
        }
        v25 += v23;
        v30 += v28;
        ++v139;
      }
      while (v139 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, 2 * v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_rgb_xf422_GCD(_QWORD *result, uint64_t a2)
{
  float v2;
  float v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  char v70;
  unint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _WORD *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  _WORD *v100;
  float v101;
  uint64_t v102;
  unint64_t v103;
  _WORD *v104;
  unsigned __int8 *v105;
  __int16 v106;

  v10 = *(_QWORD *)((char *)result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 == v12)
    return result;
  v14 = 0;
  v15 = *(_QWORD *)((char *)result + 20);
  v16 = *(_QWORD *)((char *)result + 36);
  v17 = v12 + *(_QWORD *)((char *)result + 44);
  v18 = v13 - v12;
  v19 = result[14];
  v20 = (uint64_t *)result[16];
  v21 = result[13] * a2 / v11 + result[15];
  v22 = result[19];
  v23 = (uint64_t *)result[7];
  v24 = (uint64_t *)result[8];
  v25 = (uint64_t *)result[17];
  v26 = *v24;
  v27 = v24[1];
  v28 = v24[2];
  v29 = v23[2];
  v30 = (unsigned __int8 *)(v29 + v28 * v17 + v16);
  v31 = *v25;
  v32 = v25[1];
  v33 = v25[2];
  v34 = v20[2];
  v35 = (char *)(v34 + v33 * v21 + 2 * v19);
  *(float *)&v36 = (float)*(unsigned int *)(v22 + 128);
  *(float *)&v37 = (float)*(unsigned int *)(v22 + 136);
  v38 = *(float *)&v37 / *(float *)&v36;
  LOWORD(v36) = *(_WORD *)(v22 + 140);
  v39 = (float)v36;
  LOWORD(v37) = *(_WORD *)(v22 + 142);
  v40 = (float)v37;
  v41 = v38 * *(float *)v22;
  v42 = v38 * *(float *)(v22 + 8);
  v43 = v38 * *(float *)(v22 + 16);
  v44 = v38 * *(float *)(v22 + 20);
  v45 = *(float *)(v22 + 28);
  v46 = v38 * v45;
  LOWORD(v45) = *(_WORD *)(v22 + 144);
  v47 = (float)LODWORD(v45);
  LOWORD(v4) = *(_WORD *)(v22 + 146);
  v48 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v22 + 148);
  v49 = (float)v5;
  LOWORD(v6) = *(_WORD *)(v22 + 150);
  v50 = (float)v6;
  LOWORD(v7) = *(_WORD *)(v22 + 152);
  v51 = (float)v7;
  v52 = *(float *)(v22 + 36);
  v53 = *(float *)(v22 + 40);
  v54 = *(float *)(v22 + 44);
  v55 = *(float *)(v22 + 48) * 0.5;
  v56 = *(float *)(v22 + 52) * 0.5;
  v57 = *(float *)(v22 + 56) * 0.5;
  v58 = *(float *)(v22 + 60) * 0.5;
  v59 = *(float *)(v22 + 64) * 0.5;
  v60 = *(float *)(v22 + 68) * 0.5;
  v61 = *(unsigned __int8 *)(v22 + 132);
  v62 = 16 - v61;
  if (v61 >= 0x11)
    v62 = 0;
  v64 = *v20;
  v63 = v20[1];
  v65 = v63 + v32 * v21 + 2 * v19;
  if (!v63)
    v65 = 0;
  result = (_QWORD *)(v64 + v31 * v21 + 2 * v19);
  v67 = *v23;
  v66 = v23[1];
  v68 = (_BYTE *)(v66 + v27 * v17 + v16);
  if (!v66)
    v68 = 0;
  v69 = (_BYTE *)(v67 + v26 * v17 + v16);
  v70 = v62;
  do
  {
    if (v15)
    {
      v71 = 0;
      v72 = v69;
      v73 = v68;
      v74 = result;
      do
      {
        v75 = 0.0;
        if (v73)
        {
          LOBYTE(v8) = *v73;
          v76 = (float)LODWORD(v8) - v40;
          LOBYTE(v9) = v73[1];
          v77 = (float)LODWORD(v9) - v40;
          v73 += 2;
          v78 = v42 * v77;
          v79 = (float)(v44 * v77) + (float)(v76 * v43);
          v80 = v46 * v76;
          if (v73)
          {
            LOBYTE(v75) = *v73;
            v81 = (float)LODWORD(v75) - v40;
            LOBYTE(v2) = v73[1];
            v82 = (float)LODWORD(v2) - v40;
            v73 += 2;
            v83 = v42 * v82;
            v84 = (float)(v44 * v82) + (float)(v81 * v43);
            v75 = v46 * v81;
            goto LABEL_16;
          }
        }
        else
        {
          v80 = 0.0;
          v79 = 0.0;
          v78 = 0.0;
        }
        v84 = 0.0;
        v83 = 0.0;
LABEL_16:
        LOBYTE(v3) = *v72;
        v85 = v41 * (float)((float)LODWORD(v3) - v39);
        v86 = v78 + v85;
        v87 = v79 + v85;
        v88 = v80 + v85;
        v89 = (float)((float)((float)(v53 * v87) + (float)(v52 * v86)) + (float)(v54 * v88)) + v47;
        v90 = v49;
        if (v89 <= v49)
        {
          v90 = (float)((float)((float)(v53 * v87) + (float)(v52 * v86)) + (float)(v54 * v88)) + v47;
          if (v89 < v47)
            v90 = v47;
        }
        LOBYTE(v89) = v72[1];
        v91 = v41 * (float)((float)LODWORD(v89) - v39);
        v92 = v83 + v91;
        v93 = v84 + v91;
        v94 = v75 + v91;
        v95 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v94)) + v47;
        *v74 = llroundf(v90) << v70;
        v3 = v49;
        if (v95 <= v49)
        {
          v3 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v94)) + v47;
          if (v95 < v47)
            v3 = v47;
        }
        v74[1] = llroundf(v3) << v70;
        v96 = v86 + v92;
        v97 = v87 + v93;
        v98 = v88 + v94;
        v2 = (float)((float)(v48 + (float)(v96 * v55)) + (float)(v97 * v56)) + (float)(v98 * v57);
        v99 = v51;
        if (v2 <= v51)
        {
          v99 = (float)((float)(v48 + (float)(v96 * v55)) + (float)(v97 * v56)) + (float)(v98 * v57);
          if (v2 < v50)
            v99 = v50;
        }
        v100 = (_WORD *)(v65 + 2 * v71);
        v9 = (float)(v48 + (float)(v96 * v58)) + (float)(v97 * v59);
        v101 = v9 + (float)(v98 * v60);
        *v100 = llroundf(v99) << v70;
        v8 = v51;
        if (v101 <= v51)
        {
          v8 = v101;
          if (v101 < v50)
            v8 = v50;
        }
        v100[1] = llroundf(v8) << v70;
        v71 += 2;
        v72 += 2;
        v74 += 2;
      }
      while (v15 > v71);
    }
    v69 += v26;
    v68 += v27;
    result = (_QWORD *)((char *)result + v31);
    v65 += v32;
    ++v14;
  }
  while (v14 != v18);
  if (v29 && v34)
  {
    v102 = 0;
    do
    {
      if (v15)
      {
        v103 = v15;
        v104 = v35;
        v105 = v30;
        do
        {
          v106 = *v105++;
          *v104++ = v106 | (v106 << 8);
          --v103;
        }
        while (v103);
      }
      v30 += v28;
      v35 += v33;
      ++v102;
    }
    while (v102 != v18);
  }
  else if (v34)
  {
    do
    {
      if (v15)
        result = memset(v35, 255, 2 * v15);
      v35 += v33;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _BYTE *v55;
  _BYTE *v56;
  float v57;
  float v58;
  float v59;
  unint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  _DWORD *v63;
  _WORD *v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v98;
  float v105;
  float v106;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v119;
  float v122;
  float v123;
  float v125;
  float v126;
  float v127;
  float v129;
  float v130;
  unsigned int v136;
  float v137;
  float v139;
  float v140;
  float v141;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  __int16 v148;
  float v149;
  float v150;
  float v151;
  float v152;
  uint64_t v153;
  unint64_t v154;
  _WORD *v155;
  unsigned __int8 *v156;
  __int16 v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  v16 = v8 / v6;
  if (v14)
    v17 = v14 + v13 * v11 + 2 * v9;
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = (unsigned __int8 *)(v29 + v28 * v21 + v20);
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = v32 * *(float *)v23;
    v176 = v32 * *(float *)(v23 + 16);
    v177 = v32 * *(float *)(v23 + 8);
    v175 = v32 * *(float *)(v23 + 20);
    *(float *)&v35 = v32 * *(float *)(v23 + 28);
    v173 = (float)LODWORD(a5);
    v174 = *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    *(float *)&v39 = (float)v35;
    v178 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v23 + 152);
    v40 = (float)v39;
    v41 = *(float *)(v23 + 36);
    v42 = *(float *)(v23 + 40);
    v43 = *(float *)(v23 + 44);
    v172 = *(float *)(v23 + 48) * 0.5;
    v170 = *(float *)(v23 + 56) * 0.5;
    v171 = *(float *)(v23 + 52) * 0.5;
    v168 = *(float *)(v23 + 64) * 0.5;
    v169 = *(float *)(v23 + 60) * 0.5;
    v44 = *(float *)(v23 + 72);
    v166 = *(float *)(v23 + 68) * 0.5;
    v167 = v44;
    v164 = *(float *)(v23 + 80);
    v165 = *(float *)(v23 + 76);
    v162 = *(float *)(v23 + 88);
    v163 = *(float *)(v23 + 84);
    v160 = *(float *)(v23 + 96);
    v161 = *(float *)(v23 + 92);
    v45 = *(float *)(v23 + 104);
    v46 = *(float *)(v23 + 108);
    v158 = v45;
    v159 = *(float *)(v23 + 100);
    v47 = v23 + 164;
    result = (_QWORD *)(v23 + 16548);
    v48 = *v10 + v31 * v11;
    v49 = v23 + 32932;
    v50 = (_WORD *)(v48 + 2 * v9);
    v53 = v24;
    v52 = *v24;
    v51 = v53[1];
    _ZF = v51 == 0;
    v55 = (_BYTE *)(v51 + v27 * v21 + v20);
    if (_ZF)
      v55 = 0;
    v56 = (_BYTE *)(v52 + v26 * v21 + v20);
    v58 = *(float *)(v23 + 112);
    v57 = *(float *)(v23 + 116);
    v59 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        v60 = 0;
        v61 = v56;
        v62 = v55;
        v63 = (_DWORD *)v17;
        v64 = v50;
        do
        {
          if (v62)
          {
            LOBYTE(v45) = *v62;
            *(float *)&v65 = (float)LODWORD(v45);
            v44 = *(float *)&v65 - v173;
            LOBYTE(v65) = v62[1];
            v66 = (float)v65 - v173;
            v62 += 2;
            v67 = v177 * v66;
            v68 = (float)(v175 * v66) + (float)(v44 * v176);
            v69 = v174 * v44;
          }
          else
          {
            v69 = 0.0;
            v68 = 0.0;
            v67 = 0.0;
          }
          LOBYTE(v44) = *v61;
          v70 = v34 * (float)((float)LODWORD(v44) - v33);
          v71 = v67 + v70;
          v72 = (float)(v67 + v70) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v68 + v70;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v69 + v70;
          v72 = (float)(v69 + v70) <= 8191.0;
          v77 = 8191.0;
          if (v72)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v62)
          {
            LOBYTE(v76) = *v62;
            *(float *)&v78 = (float)LODWORD(v76);
            v70 = *(float *)&v78 - v173;
            LOBYTE(v78) = v62[1];
            v79 = (float)v78 - v173;
            v62 += 2;
            v80 = v177 * v79;
            v81 = (float)(v175 * v79) + (float)(v70 * v176);
            v82 = v174 * v70;
          }
          else
          {
            v82 = 0.0;
            v81 = 0.0;
            v80 = 0.0;
          }
          LOBYTE(v70) = v61[1];
          v83 = v33;
          v84 = v34;
          v85 = v34 * (float)((float)LODWORD(v70) - v33);
          v86 = v80 + v85;
          v72 = (float)(v80 + v85) <= 8191.0;
          v87 = 8191.0;
          if (v72)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v81 + v85;
          v72 = (float)(v81 + v85) <= 8191.0;
          v89 = 8191.0;
          if (v72)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v82 + v85;
          v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H0 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          v98 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v47 + 2 * v98);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          v105 = (float)((float)((float)(v58 * _S4) + (float)(v46 * _S0)) + (float)(v57 * _S7))
               + (float)(v59 * fmaxf(_S0, fmaxf(_S4, _S7)));
          v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            v106 = v105;
            if (v105 < 0.0)
              v106 = 0.0;
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *((_WORD *)result + llroundf(v106));
          __asm { FCVT            S1, H1 }
          v112 = _S0 * _S1;
          v113 = _S4 * _S1;
          v114 = _S7 * _S1;
          v115 = (float)((float)((float)(v58 * _S6) + (float)(v46 * _S3)) + (float)(v57 * _S30))
               + (float)(v59 * fmaxf(_S3, fmaxf(_S6, _S30)));
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          _H7 = *((_WORD *)result + llroundf(v116));
          __asm { FCVT            S7, H7 }
          v119 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          v122 = (float)((float)(v165 * v113) + (float)(v112 * v167)) + (float)(v114 * v164);
          v123 = (float)((float)(v162 * v113) + (float)(v112 * v163)) + (float)(v114 * v161);
          _S0 = (float)((float)(v159 * v113) + (float)(v112 * v160)) + (float)(v114 * v158);
          v125 = (float)(v165 * _S6) + (float)(v119 * v167);
          v126 = (float)(v162 * _S6) + (float)(v119 * v163);
          v127 = (float)(v159 * _S6) + (float)(v119 * v160);
          _S1 = v125 + (float)(_S7 * v164);
          v129 = v126 + (float)(_S7 * v161);
          LOWORD(_S6) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          v130 = v127 + (float)(_S7 * v158);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          v136 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          v137 = (float)(v42 * _S7) + (float)(v41 * _S6);
          _S1 = _S6 + _S0;
          v139 = _S7 + _S4;
          v140 = (float)(v37 + (float)((float)(_S6 + _S0) * v172)) + (float)(v139 * v171);
          v141 = (float)(v37 + (float)(_S1 * v169)) + (float)(v139 * v168);
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * v136);
          __asm { FCVT            S1, H1 }
          v143 = v137 + (float)(v43 * _S17);
          v144 = v140 + (float)((float)(_S17 + _S1) * v170);
          v145 = v141 + (float)((float)(_S17 + _S1) * v166);
          if (v144 < v36)
            v146 = v36;
          else
            v146 = v144;
          v72 = v144 <= v38;
          v147 = v143 + v36;
          if (!v72)
            v146 = v38;
          v148 = llroundf(v146);
          v149 = v178;
          if (v147 >= v178)
            v149 = v143 + v36;
          *v64 = v148;
          if (v147 <= v40)
            v150 = v149;
          else
            v150 = v40;
          v64[1] = llroundf(v150);
          v151 = v38;
          if (v145 <= v38)
          {
            v151 = v145;
            if (v145 < v36)
              v151 = v36;
          }
          v44 = v42 * _S4;
          v45 = (float)((float)((float)(v42 * _S4) + (float)(v41 * _S0)) + (float)(v43 * _S1)) + v36;
          v64[2] = llroundf(v151);
          v152 = v40;
          v33 = v83;
          v34 = v84;
          if (v45 <= v40)
          {
            v152 = v45;
            if (v45 < v178)
              v152 = v178;
          }
          v64[3] = llroundf(v152);
          if (v63)
            *v63++ = 0;
          v60 += 2;
          v61 += 2;
          v64 += 4;
        }
        while (v19 > v60);
      }
      v56 += v26;
      v55 += v27;
      v50 = (_WORD *)((char *)v50 + v31);
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v153 = 0;
      do
      {
        if (v19)
        {
          v154 = v19;
          v155 = v15;
          v156 = v30;
          do
          {
            v157 = *v156++;
            *v155++ = v157 | (v157 << 8);
            --v154;
          }
          while (v154);
        }
        v30 += v28;
        v15 += v13;
        ++v153;
      }
      while (v153 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, 2 * v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  unint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _DWORD *v65;
  _WORD *v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v106;
  float v108;
  float v109;
  float v113;
  float v114;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  __int16 v126;
  float v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  unint64_t v132;
  _WORD *v133;
  unsigned __int8 *v134;
  __int16 v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  v16 = v8 / v6;
  if (v14)
    v17 = v14 + v13 * v11 + 2 * v9;
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = (unsigned __int8 *)(v29 + v28 * v21 + v20);
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = *(float *)&v32 * *(float *)v23;
    v143 = *(float *)&v32 * *(float *)(v23 + 16);
    v144 = *(float *)&v32 * *(float *)(v23 + 8);
    v36 = *(float *)&v32 * *(float *)(v23 + 20);
    v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    v42 = (float)v32;
    v43 = *(float *)(v23 + 36);
    v44 = *(float *)(v23 + 40);
    v45 = *(float *)(v23 + 44);
    v141 = *(float *)(v23 + 48) * 0.5;
    v142 = v36;
    v139 = *(float *)(v23 + 56) * 0.5;
    v140 = *(float *)(v23 + 52) * 0.5;
    _S5 = *(float *)(v23 + 64);
    v137 = _S5 * 0.5;
    v138 = *(float *)(v23 + 60) * 0.5;
    v47 = *(float *)(v23 + 72);
    v48 = *(float *)(v23 + 68) * 0.5;
    v136 = v48;
    v50 = *(float *)(v23 + 76);
    v49 = *(float *)(v23 + 80);
    v51 = *(float *)(v23 + 84);
    v52 = *(float *)(v23 + 88);
    v53 = *(float *)(v23 + 92);
    v54 = *(float *)(v23 + 96);
    v55 = *(float *)(v23 + 100);
    v56 = *(float *)(v23 + 104);
    v57 = v23 + 16548;
    result = (_QWORD *)(v23 + 164);
    v58 = *v10 + v31 * v11 + 2 * v9;
    v59 = v24[1];
    if (v59)
      v60 = (_BYTE *)(v59 + v27 * v21 + v20);
    else
      v60 = 0;
    v61 = (_BYTE *)(*v24 + v26 * v21 + v20);
    do
    {
      if (v19)
      {
        v62 = 0;
        v63 = v61;
        v64 = v60;
        v65 = (_DWORD *)v17;
        v66 = (_WORD *)v58;
        do
        {
          if (v64)
          {
            LOBYTE(v48) = *v64;
            *(float *)&v67 = (float)LODWORD(v48);
            _S5 = *(float *)&v67 - v34;
            LOBYTE(v67) = v64[1];
            v68 = (float)v67 - v34;
            v64 += 2;
            v69 = v144 * v68;
            v70 = (float)(v142 * v68) + (float)(_S5 * v143);
            v71 = v37 * _S5;
          }
          else
          {
            v71 = 0.0;
            v70 = 0.0;
            v69 = 0.0;
          }
          LOBYTE(_S5) = *v63;
          v72 = v35 * (float)((float)LODWORD(_S5) - v33);
          v73 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v70 + v72;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v71 + v72;
          v79 = 8191.0;
          if ((float)(v71 + v72) <= 8191.0)
          {
            v79 = v71 + v72;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v64)
          {
            LOBYTE(v78) = *v64;
            *(float *)&v80 = (float)LODWORD(v78);
            v72 = *(float *)&v80 - v34;
            LOBYTE(v80) = v64[1];
            v81 = (float)v80 - v34;
            v64 += 2;
            v82 = v144 * v81;
            v83 = (float)(v142 * v81) + (float)(v72 * v143);
            v84 = v37 * v72;
          }
          else
          {
            v84 = 0.0;
            v83 = 0.0;
            v82 = 0.0;
          }
          LOBYTE(v72) = v63[1];
          v85 = v35 * (float)((float)LODWORD(v72) - v33);
          v86 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            v86 = v82 + v85;
            if ((float)(v82 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = v83 + v85;
          v74 = (float)(v83 + v85) <= 8191.0;
          v88 = 8191.0;
          if (v74)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v84 + v85;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v50 * _S5) + (float)(_S0 * v47)) + (float)(_S24 * v49);
          v106 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          _S0 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S24 * v56);
          v108 = (float)(v50 * _S4) + (float)(_S6 * v47);
          v109 = (float)(v52 * _S4) + (float)(_S6 * v51);
          _S4 = (float)(v55 * _S4) + (float)(_S6 * v54);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v108 + (float)(_S6 * v49);
          v113 = v109 + (float)(_S6 * v53);
          LOWORD(_S26) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          v114 = _S4 + (float)(_S6 * v56);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v120 = (float)(v39 + (float)((float)(_S26 + _S0) * v138)) + (float)((float)(_S28 + _S4) * v137);
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v121 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          v122 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v141)) + (float)((float)(_S28 + _S4) * v140))
               + (float)((float)(_S30 + _S5) * v139);
          v123 = v120 + (float)((float)(_S30 + _S5) * v136);
          if (v122 < v38)
            v124 = v38;
          else
            v124 = v122;
          v125 = v121 + v38;
          if (v122 > v40)
            v124 = v40;
          v126 = llroundf(v124);
          if (v125 < v41)
            v127 = v41;
          else
            v127 = v125;
          *v66 = v126;
          if (v125 <= v42)
            v128 = v127;
          else
            v128 = v42;
          v66[1] = llroundf(v128);
          v129 = v40;
          if (v123 <= v40)
          {
            v129 = v123;
            if (v123 < v38)
              v129 = v38;
          }
          v48 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v66[2] = llroundf(v129);
          v130 = v42;
          if (v48 <= v42)
          {
            v130 = v48;
            if (v48 < v41)
              v130 = v41;
          }
          v66[3] = llroundf(v130);
          if (v65)
            *v65++ = 0;
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v61 += v26;
      v60 += v27;
      v58 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v131 = 0;
      do
      {
        if (v19)
        {
          v132 = v19;
          v133 = v15;
          v134 = v30;
          do
          {
            v135 = *v134++;
            *v133++ = v135 | (v135 << 8);
            --v132;
          }
          while (v132);
        }
        v30 += v28;
        v15 += v13;
        ++v131;
      }
      while (v131 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, 2 * v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_rgb_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned __int8 *v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  unint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  _DWORD *v82;
  _WORD *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  unint64_t v113;
  _WORD *v114;
  unsigned __int8 *v115;
  __int16 v116;

  v15 = *(_QWORD *)((char *)result + 28);
  v16 = *(unsigned __int8 *)result;
  v17 = v15 * a2 / v16;
  v18 = v15 + v15 * a2;
  v19 = result[14];
  v20 = (_QWORD *)result[16];
  v21 = result[13] * a2 / v16 + result[15];
  v22 = (uint64_t *)result[17];
  v23 = v22[1];
  v24 = v20[1];
  v25 = (char *)(v24 + v23 * v21 + 2 * v19);
  v26 = v18 / v16;
  if (v24)
    v27 = v24 + v23 * v21 + 2 * v19;
  else
    v27 = 0;
  if (v26 == v17)
    return result;
  v28 = 0;
  v29 = *(_QWORD *)((char *)result + 20);
  v30 = *(_QWORD *)((char *)result + 36);
  v31 = v17 + *(_QWORD *)((char *)result + 44);
  v32 = v26 - v17;
  v33 = result[19];
  v34 = (_QWORD *)result[7];
  v35 = (uint64_t *)result[8];
  v36 = *v35;
  v37 = v35[1];
  v38 = v35[2];
  v39 = v34[2];
  LOWORD(a6) = *(_WORD *)(v33 + 140);
  LOWORD(a7) = *(_WORD *)(v33 + 142);
  v40 = *(float *)v33;
  v41 = (float)*(unsigned int *)(v33 + 136) / (float)*(unsigned int *)(v33 + 128);
  v42 = *(float *)(v33 + 8);
  v43 = *(float *)(v33 + 16);
  v44 = *(float *)(v33 + 20);
  v45 = *(float *)(v33 + 28);
  LOWORD(v9) = *(_WORD *)(v33 + 144);
  LOWORD(v10) = *(_WORD *)(v33 + 146);
  LOWORD(v11) = *(_WORD *)(v33 + 148);
  LOWORD(v12) = *(_WORD *)(v33 + 150);
  LOWORD(v13) = *(_WORD *)(v33 + 152);
  v46 = *(float *)(v33 + 36);
  v47 = *(float *)(v33 + 40);
  v48 = *(float *)(v33 + 44);
  v49 = *(float *)(v33 + 48);
  v50 = *(float *)(v33 + 52);
  v51 = *(float *)(v33 + 56);
  v52 = *(float *)(v33 + 60);
  v53 = *(float *)(v33 + 64);
  v54 = *(float *)(v33 + 68);
  v55 = (unsigned __int8 *)(v39 + v38 * v31 + v30);
  v56 = *v22;
  v57 = (float)LODWORD(a6);
  v58 = (float)LODWORD(a7);
  v59 = v41 * v40;
  v60 = v41 * v42;
  v61 = v41 * v43;
  v62 = v41 * v44;
  v63 = v41 * v45;
  v64 = (float)v9;
  v65 = (float)v10;
  v66 = (float)v11;
  v67 = (float)v12;
  v68 = (float)v13;
  v69 = 0.5;
  v70 = v49 * 0.5;
  v71 = v50 * 0.5;
  v72 = v51 * 0.5;
  v73 = v52 * 0.5;
  v74 = v53 * 0.5;
  v75 = v54 * 0.5;
  v76 = *v20 + v56 * v21 + 2 * v19;
  v77 = v34[1];
  if (v77)
    v78 = (_BYTE *)(v77 + v37 * v31 + v30);
  else
    v78 = 0;
  result = (_QWORD *)(*v34 + v36 * v31 + v30);
  do
  {
    if (v29)
    {
      v79 = 0;
      v80 = result;
      v81 = v78;
      v82 = (_DWORD *)v27;
      v83 = (_WORD *)v76;
      while (1)
      {
        v84 = 0.0;
        if (!v81)
          break;
        LOBYTE(v69) = *v81;
        v85 = (float)LODWORD(v69) - v58;
        LOBYTE(v14) = v81[1];
        v86 = (float)LODWORD(v14) - v58;
        v81 += 2;
        v87 = v60 * v86;
        v88 = (float)(v62 * v86) + (float)(v85 * v61);
        v89 = v63 * v85;
        if (!v81)
          goto LABEL_15;
        LOBYTE(v84) = *v81;
        v90 = (float)LODWORD(v84) - v58;
        LOBYTE(v7) = v81[1];
        v91 = (float)LODWORD(v7) - v58;
        v81 += 2;
        v92 = v60 * v91;
        v93 = (float)(v62 * v91) + (float)(v90 * v61);
        v84 = v63 * v90;
LABEL_16:
        LOBYTE(v8) = *v80;
        v94 = v59 * (float)((float)v8 - v57);
        v95 = v87 + v94;
        v96 = v88 + v94;
        v97 = v89 + v94;
        LOBYTE(v89) = v80[1];
        v98 = v59 * (float)((float)LODWORD(v89) - v57);
        v99 = v92 + v98;
        v100 = v93 + v98;
        v101 = v84 + v98;
        v102 = (float)((float)((float)(v47 * v96) + (float)(v46 * v95)) + (float)(v48 * v97)) + v64;
        v103 = v95 + (float)(v92 + v98);
        v104 = v96 + v100;
        v105 = v97 + v101;
        v106 = (float)((float)(v65 + (float)(v103 * v70)) + (float)(v104 * v71)) + (float)(v105 * v72);
        v107 = (float)((float)(v65 + (float)(v103 * v73)) + (float)(v104 * v74)) + (float)(v105 * v75);
        if (v106 < v64)
          *(float *)&v8 = v64;
        else
          *(float *)&v8 = v106;
        if (v106 <= v66)
          v108 = *(float *)&v8;
        else
          v108 = v66;
        *v83 = llroundf(v108);
        if (v102 < v67)
          v109 = v67;
        else
          v109 = v102;
        if (v102 <= v68)
          v110 = v109;
        else
          v110 = v68;
        v83[1] = llroundf(v110);
        v7 = v66;
        if (v107 <= v66)
        {
          v7 = v107;
          if (v107 < v64)
            v7 = v64;
        }
        v14 = v47 * v100;
        v111 = (float)((float)(v14 + (float)(v46 * v99)) + (float)(v48 * v101)) + v64;
        v83[2] = llroundf(v7);
        v69 = v68;
        if (v111 <= v68)
        {
          v69 = v111;
          if (v111 < v67)
            v69 = v67;
        }
        v83[3] = llroundf(v69);
        if (v82)
          *v82++ = 0;
        v79 += 2;
        v80 += 2;
        v83 += 4;
        if (v29 <= v79)
          goto LABEL_37;
      }
      v89 = 0.0;
      v88 = 0.0;
      v87 = 0.0;
LABEL_15:
      v93 = 0.0;
      v92 = 0.0;
      goto LABEL_16;
    }
LABEL_37:
    result = (_QWORD *)((char *)result + v36);
    v78 += v37;
    v76 += v56;
    ++v28;
  }
  while (v28 != v32);
  if (v39 && v27)
  {
    v112 = 0;
    do
    {
      if (v29)
      {
        v113 = v29;
        v114 = v25;
        v115 = v55;
        do
        {
          v116 = *v115++;
          *v114++ = v116 | (v116 << 8);
          --v113;
        }
        while (v113);
      }
      v55 += v38;
      v25 += v23;
      ++v112;
    }
    while (v112 != v32);
  }
  else if (v27)
  {
    do
    {
      if (v29)
        result = memset(v25, 255, 2 * v29);
      v25 += v23;
      --v32;
    }
    while (v32);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _BYTE *v69;
  unsigned __int8 *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  size_t v75;
  unsigned __int8 *v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *i;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  float v103;
  float v104;
  float v109;
  float v110;
  float v111;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (_QWORD *)result[16];
    v18 = v16 + result[15];
    v19 = result[19];
    v20 = (_QWORD *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (char *)(v26 + v25 * v13 + v12);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + v15);
    LOWORD(a4) = *(_WORD *)(v19 + 140);
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a4);
    v35 = (float)LODWORD(a5);
    v36 = v33 * *(float *)v19;
    v126 = v33 * *(float *)(v19 + 16);
    v127 = v33 * *(float *)(v19 + 8);
    v37 = v33 * *(float *)(v19 + 20);
    *(float *)&v38 = v33 * *(float *)(v19 + 28);
    v124 = *(float *)&v38;
    v125 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v19 + 36);
    v45 = *(float *)(v19 + 40);
    v46 = *(float *)(v19 + 44);
    v122 = *(float *)(v19 + 52);
    v123 = *(float *)(v19 + 48);
    v120 = *(float *)(v19 + 60);
    v121 = *(float *)(v19 + 56);
    v47 = *(float *)(v19 + 64);
    v48 = *(float *)(v19 + 68);
    v119 = v47;
    v49 = *(float *)(v19 + 72);
    v50 = *(float *)(v19 + 76);
    v51 = *(float *)(v19 + 80);
    v52 = *(float *)(v19 + 84);
    v53 = *(float *)(v19 + 88);
    v54 = *(float *)(v19 + 92);
    v55 = *(float *)(v19 + 96);
    v56 = *(float *)(v19 + 100);
    v57 = *(float *)(v19 + 104);
    v58 = v19 + 164;
    v59 = v19 + 16548;
    v60 = v17[1];
    _ZF = v60 == 0;
    v62 = v60 + v29 * v18;
    v63 = *v17 + v28 * v18;
    v64 = v19 + 32932;
    result = (_QWORD *)(v62 + v15);
    if (_ZF)
      result = 0;
    v65 = (_BYTE *)(v63 + v15);
    v68 = v20;
    v67 = *v20;
    v66 = v68[1];
    _ZF = v66 == 0;
    v69 = (_BYTE *)(v66 + v24 * v13 + v12);
    if (_ZF)
      v69 = 0;
    v70 = (unsigned __int8 *)(v67 + v23 * v13 + v12);
    v72 = *(float *)(v19 + 108);
    v71 = *(float *)(v19 + 112);
    v73 = *(float *)(v19 + 116);
    v74 = *(float *)(v19 + 120);
    do
    {
      v75 = v11;
      v76 = v70;
      v77 = v69;
      v78 = result;
      for (i = v65; v75; --v75)
      {
        if (v77)
        {
          LOBYTE(v47) = *v77;
          v80 = (float)LODWORD(v47) - v35;
          LOBYTE(_S24) = v77[1];
          v81 = (float)LODWORD(_S24) - v35;
          v77 += 2;
          v82 = v127 * v81;
          v83 = (float)(v125 * v81) + (float)(v80 * v126);
          v84 = v124 * v80;
        }
        else
        {
          v84 = 0.0;
          v83 = 0.0;
          v82 = 0.0;
        }
        v85 = *v76++;
        v86 = v36 * (float)((float)v85 - v34);
        v87 = v82 + v86;
        v88 = 8191.0;
        if (v87 <= 8191.0)
        {
          v88 = v87;
          if (v87 < 0.0)
            v88 = 0.0;
        }
        v89 = v83 + v86;
        v90 = (float)(v83 + v86) <= 8191.0;
        v91 = 8191.0;
        if (v90)
        {
          v91 = v89;
          if (v89 < 0.0)
            v91 = 0.0;
        }
        v92 = v84 + v86;
        v93 = 8191.0;
        if (v92 <= 8191.0)
        {
          v93 = v92;
          if (v92 < 0.0)
            v93 = 0.0;
        }
        _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v103 = (float)((float)((float)(v71 * _S25) + (float)(v72 * _S24)) + (float)(v73 * _S26))
             + (float)(v74 * fmaxf(_S24, fmaxf(_S25, _S26)));
        v104 = 8191.0;
        if (v103 <= 8191.0)
        {
          v104 = v103;
          if (v103 < 0.0)
            v104 = 0.0;
        }
        _H0 = *(_WORD *)(v59 + 2 * llroundf(v104));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        v109 = _S26 * _S0;
        v110 = (float)((float)(v50 * _S25) + (float)(_S24 * v49)) + (float)(v109 * v51);
        v111 = (float)((float)(v53 * _S25) + (float)(_S24 * v52)) + (float)(v109 * v54);
        _S0 = (float)((float)(v56 * _S25) + (float)(_S24 * v55)) + (float)(v109 * v57);
        LOWORD(_S24) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v47 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S24)) + (float)(v46 * _S26)) + v39;
        v115 = v41;
        if (v47 <= v41)
        {
          v115 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S24)) + (float)(v46 * _S26)) + v39;
          if (v47 < v39)
            v115 = v39;
        }
        *i++ = llroundf(v115);
        if (v78)
        {
          v116 = (float)((float)(v40 + (float)(_S24 * v123)) + (float)(_S25 * v122)) + (float)(_S26 * v121);
          v117 = v43;
          if (v116 <= v43)
          {
            v117 = (float)((float)(v40 + (float)(_S24 * v123)) + (float)(_S25 * v122)) + (float)(_S26 * v121);
            if (v116 < v42)
              v117 = v42;
          }
          v47 = (float)(v40 + (float)(_S24 * v120)) + (float)(_S25 * v119);
          _S24 = v47 + (float)(_S26 * v48);
          *v78 = llroundf(v117);
          v118 = v43;
          if (_S24 <= v43)
          {
            v118 = v47 + (float)(_S26 * v48);
            if (_S24 < v42)
              v118 = v42;
          }
          v78[1] = llroundf(v118);
          v78 += 2;
        }
      }
      v70 += v23;
      v69 += v24;
      v65 += v28;
      result = (_QWORD *)((char *)result + v29);
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      do
      {
        result = memcpy(v32, v27, v11);
        v27 += v25;
        v32 += v30;
        --v14;
      }
      while (v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  unsigned __int8 *v69;
  size_t v70;
  unsigned __int8 *v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *i;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v99;
  float v100;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (uint64_t *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (char *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v111 = v31 * *(float *)(v17 + 16);
    v112 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    _S4 = *(float *)(v17 + 28);
    *(float *)&v37 = v31 * _S4;
    v109 = *(float *)&v37;
    v110 = v35;
    LOWORD(v37) = *(_WORD *)(v17 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v17 + 36);
    v44 = *(float *)(v17 + 40);
    v46 = *(float *)(v17 + 44);
    v45 = *(float *)(v17 + 48);
    v108 = v45;
    v47 = *(float *)(v17 + 52);
    v48 = *(float *)(v17 + 56);
    v49 = *(float *)(v17 + 60);
    v50 = *(float *)(v17 + 64);
    v51 = *(float *)(v17 + 68);
    v52 = *(float *)(v17 + 72);
    v54 = *(float *)(v17 + 76);
    v53 = *(float *)(v17 + 80);
    v55 = *(float *)(v17 + 84);
    v56 = *(float *)(v17 + 88);
    v57 = *(float *)(v17 + 92);
    v58 = *(float *)(v17 + 96);
    v59 = *(float *)(v17 + 100);
    v60 = *(float *)(v17 + 104);
    v61 = v17 + 164;
    v62 = v17 + 16548;
    v64 = *v15;
    v63 = v15[1];
    v65 = (_BYTE *)(v63 + v27 * v16 + v14);
    if (!v63)
      v65 = 0;
    result = (_QWORD *)(v64 + v26 * v16 + v14);
    v67 = *v18;
    v66 = v18[1];
    v68 = (_BYTE *)(v66 + v22 * v12 + v11);
    if (!v66)
      v68 = 0;
    v69 = (unsigned __int8 *)(v67 + v21 * v12 + v11);
    do
    {
      v70 = v10;
      v71 = v69;
      v72 = v68;
      v73 = v65;
      for (i = result; v70; --v70)
      {
        if (v72)
        {
          LOBYTE(v45) = *v72;
          v75 = (float)LODWORD(v45) - v33;
          LOBYTE(_S4) = v72[1];
          v76 = (float)LODWORD(_S4) - v33;
          v72 += 2;
          v77 = v112 * v76;
          v78 = (float)(v110 * v76) + (float)(v75 * v111);
          v79 = v109 * v75;
        }
        else
        {
          v79 = 0.0;
          v78 = 0.0;
          v77 = 0.0;
        }
        v80 = *v71++;
        v81 = v34 * (float)((float)v80 - v32);
        v82 = v77 + v81;
        v83 = 8191.0;
        if (v82 <= 8191.0)
        {
          v83 = v82;
          if (v82 < 0.0)
            v83 = 0.0;
        }
        v84 = v78 + v81;
        v85 = (float)(v78 + v81) <= 8191.0;
        v86 = 8191.0;
        if (v85)
        {
          v86 = v84;
          if (v84 < 0.0)
            v86 = 0.0;
        }
        v87 = v79 + v81;
        v85 = (float)(v79 + v81) <= 8191.0;
        v88 = 8191.0;
        if (v85)
        {
          v88 = v87;
          if (v87 < 0.0)
            v88 = 0.0;
        }
        _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        v99 = (float)((float)(v54 * _S5) + (float)(_S0 * v52)) + (float)(_S4 * v53);
        v100 = (float)((float)(v56 * _S5) + (float)(_S0 * v55)) + (float)(_S4 * v57);
        _S0 = (float)((float)(v59 * _S5) + (float)(_S0 * v58)) + (float)(_S4 * v60);
        LOWORD(_S4) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        v45 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v46 * _S6)) + v38;
        v104 = v40;
        if (v45 <= v40)
        {
          v104 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v46 * _S6)) + v38;
          if (v45 < v38)
            v104 = v38;
        }
        *i++ = llroundf(v104);
        if (v73)
        {
          v105 = (float)((float)(v39 + (float)(_S4 * v108)) + (float)(_S5 * v47)) + (float)(_S6 * v48);
          v106 = v42;
          if (v105 <= v42)
          {
            v106 = (float)((float)(v39 + (float)(_S4 * v108)) + (float)(_S5 * v47)) + (float)(_S6 * v48);
            if (v105 < v41)
              v106 = v41;
          }
          v45 = (float)(v39 + (float)(_S4 * v49)) + (float)(_S5 * v50);
          _S4 = v45 + (float)(_S6 * v51);
          *v73 = llroundf(v106);
          v107 = v42;
          if (_S4 <= v42)
          {
            v107 = v45 + (float)(_S6 * v51);
            if (_S4 < v41)
              v107 = v41;
          }
          v73[1] = llroundf(v107);
          v73 += 2;
        }
      }
      v69 += v21;
      v68 += v22;
      result = (_QWORD *)((char *)result + v26);
      v65 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      do
      {
        result = memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_rgb_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  size_t v67;
  unsigned __int8 *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *i;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;

  v10 = *(_QWORD *)((char *)result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)((char *)result + 20);
    v16 = *(_QWORD *)((char *)result + 36);
    v17 = v12 + *(_QWORD *)((char *)result + 44);
    v18 = v13 - v12;
    v19 = result[14];
    v20 = (uint64_t *)result[16];
    v21 = result[13] * a2 / v11 + result[15];
    v22 = result[19];
    v24 = (uint64_t *)result[7];
    v23 = (uint64_t *)result[8];
    v25 = (uint64_t *)result[17];
    v26 = *v23;
    v27 = v23[1];
    v28 = v23[2];
    v29 = v24[2];
    v30 = (char *)(v29 + v28 * v17 + v16);
    v31 = *v25;
    v32 = v25[1];
    v33 = v25[2];
    v34 = v20[2];
    v35 = (char *)(v34 + v33 * v21 + v19);
    *(float *)&v36 = (float)*(unsigned int *)(v22 + 136);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    v37 = *(float *)&v36 / (float)*(unsigned int *)(v22 + 128);
    v38 = (float)LODWORD(a5);
    LOWORD(v36) = *(_WORD *)(v22 + 142);
    v39 = (float)v36;
    v40 = v37 * *(float *)v22;
    v41 = v37 * *(float *)(v22 + 8);
    v42 = v37 * *(float *)(v22 + 16);
    v43 = v37 * *(float *)(v22 + 20);
    v44 = *(float *)(v22 + 28);
    v45 = v37 * v44;
    LOWORD(v44) = *(_WORD *)(v22 + 144);
    v46 = (float)LODWORD(v44);
    LOWORD(v5) = *(_WORD *)(v22 + 146);
    v47 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v22 + 148);
    v48 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 150);
    v49 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 152);
    v50 = (float)v8;
    v51 = *(float *)(v22 + 36);
    v52 = *(float *)(v22 + 40);
    v53 = *(float *)(v22 + 44);
    v54 = *(float *)(v22 + 48);
    v55 = *(float *)(v22 + 52);
    v56 = *(float *)(v22 + 56);
    v57 = *(float *)(v22 + 60);
    v58 = *(float *)(v22 + 64);
    v59 = *(float *)(v22 + 68);
    v61 = *v20;
    v60 = v20[1];
    v62 = (_BYTE *)(v60 + v32 * v21 + v19);
    if (!v60)
      v62 = 0;
    v63 = (_BYTE *)(v61 + v31 * v21 + v19);
    v65 = *v24;
    v64 = v24[1];
    v66 = (_BYTE *)(v64 + v27 * v17 + v16);
    if (!v64)
      v66 = 0;
    result = (_QWORD *)(v65 + v26 * v17 + v16);
    do
    {
      v67 = v15;
      v68 = (unsigned __int8 *)result;
      v69 = v66;
      v70 = v62;
      for (i = v63; v67; --v67)
      {
        if (v69)
        {
          LOBYTE(v9) = *v69;
          *(float *)&v72 = (float)LODWORD(v9);
          v73 = *(float *)&v72 - v39;
          LOBYTE(v72) = v69[1];
          v74 = (float)v72 - v39;
          v69 += 2;
          v75 = v41 * v74;
          v76 = (float)(v43 * v74) + (float)(v73 * v42);
          v77 = v45 * v73;
        }
        else
        {
          v77 = 0.0;
          v76 = 0.0;
          v75 = 0.0;
        }
        v78 = *v68++;
        v79 = v40 * (float)((float)v78 - v38);
        v9 = v75 + v79;
        v80 = v76 + v79;
        v81 = v77 + v79;
        v82 = (float)((float)((float)(v52 * v80) + (float)(v51 * v9)) + (float)(v53 * v81)) + v46;
        v83 = v48;
        if (v82 <= v48)
        {
          v83 = (float)((float)((float)(v52 * v80) + (float)(v51 * v9)) + (float)(v53 * v81)) + v46;
          if (v82 < v46)
            v83 = v46;
        }
        *i++ = llroundf(v83);
        if (v70)
        {
          v84 = (float)((float)(v47 + (float)(v9 * v54)) + (float)(v80 * v55)) + (float)(v81 * v56);
          v85 = v50;
          if (v84 <= v50)
          {
            v85 = (float)((float)(v47 + (float)(v9 * v54)) + (float)(v80 * v55)) + (float)(v81 * v56);
            if (v84 < v49)
              v85 = v49;
          }
          v9 = (float)((float)(v47 + (float)(v9 * v57)) + (float)(v80 * v58)) + (float)(v81 * v59);
          *v70 = llroundf(v85);
          v86 = v50;
          if (v9 <= v50)
          {
            v86 = v9;
            if (v9 < v49)
              v86 = v49;
          }
          v70[1] = llroundf(v86);
          v70 += 2;
        }
      }
      result = (_QWORD *)((char *)result + v26);
      v66 += v27;
      v63 += v31;
      v62 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      do
      {
        result = memcpy(v35, v30, v15);
        v30 += v28;
        v35 += v33;
        --v18;
      }
      while (v18);
    }
    else if (v34)
    {
      do
      {
        if (v15)
          result = memset(v35, 255, v15);
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _WORD *v65;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  unsigned __int8 *v70;
  char v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t v76;
  unsigned __int8 *v77;
  _BYTE *v78;
  _WORD *v79;
  _WORD *i;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  unsigned int v86;
  float v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  float v94;
  float v104;
  float v105;
  float v110;
  float v111;
  float v112;
  float v116;
  float v117;
  float v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  _WORD *v122;
  unsigned __int8 *v123;
  __int16 v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = (_QWORD *)result[16];
    v17 = result[13] * a2 / v7 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (unsigned __int8 *)(v25 + v24 * v13 + v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v132 = v32 * *(float *)(v18 + 16);
    v133 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    *(float *)&v37 = v32 * *(float *)(v18 + 28);
    v130 = *(float *)&v37;
    v131 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v18 + 36);
    v44 = *(float *)(v18 + 40);
    v45 = *(float *)(v18 + 44);
    v128 = *(float *)(v18 + 52);
    v129 = *(float *)(v18 + 48);
    v126 = *(float *)(v18 + 60);
    v127 = *(float *)(v18 + 56);
    v46 = *(float *)(v18 + 64);
    v47 = *(float *)(v18 + 68);
    v125 = v46;
    v48 = *(float *)(v18 + 72);
    v49 = *(float *)(v18 + 76);
    v50 = *(float *)(v18 + 80);
    v51 = *(float *)(v18 + 84);
    v52 = *(float *)(v18 + 88);
    v53 = *(float *)(v18 + 92);
    v54 = *(float *)(v18 + 96);
    v55 = *(float *)(v18 + 100);
    v56 = *(float *)(v18 + 104);
    v57 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v58 = *(unsigned __int8 *)(v18 + 132);
    if (v58 >= 0x11)
      v59 = 0;
    else
      v59 = 16 - v58;
    v60 = v16[1];
    _ZF = v60 == 0;
    v62 = v60 + v28 * v17;
    v63 = *v16 + v27 * v17;
    v64 = v18 + 32932;
    v65 = (_WORD *)(v62 + 2 * v15);
    if (_ZF)
      v65 = 0;
    v66 = (_WORD *)(v63 + 2 * v15);
    v68 = *v19;
    v67 = v19[1];
    v69 = (_BYTE *)(v67 + v23 * v13 + v12);
    if (!v67)
      v69 = 0;
    v70 = (unsigned __int8 *)(v68 + v22 * v13 + v12);
    v71 = v59;
    v73 = *(float *)(v18 + 108);
    v72 = *(float *)(v18 + 112);
    v74 = *(float *)(v18 + 116);
    v75 = *(float *)(v18 + 120);
    do
    {
      v76 = v11;
      v77 = v70;
      v78 = v69;
      v79 = v65;
      for (i = v66; v76; --v76)
      {
        if (v78)
        {
          LOBYTE(v46) = *v78;
          v81 = (float)LODWORD(v46) - v34;
          LOBYTE(_S24) = v78[1];
          v82 = (float)LODWORD(_S24) - v34;
          v78 += 2;
          v83 = v133 * v82;
          v84 = (float)(v131 * v82) + (float)(v81 * v132);
          v85 = v130 * v81;
        }
        else
        {
          v85 = 0.0;
          v84 = 0.0;
          v83 = 0.0;
        }
        v86 = *v77++;
        v87 = v35 * (float)((float)v86 - v33);
        v88 = v83 + v87;
        v89 = 8191.0;
        if (v88 <= 8191.0)
        {
          v89 = v88;
          if (v88 < 0.0)
            v89 = 0.0;
        }
        v90 = v84 + v87;
        v91 = (float)(v84 + v87) <= 8191.0;
        v92 = 8191.0;
        if (v91)
        {
          v92 = v90;
          if (v90 < 0.0)
            v92 = 0.0;
        }
        v93 = v85 + v87;
        v94 = 8191.0;
        if (v93 <= 8191.0)
        {
          v94 = v93;
          if (v93 < 0.0)
            v94 = 0.0;
        }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v104 = (float)((float)((float)(v72 * _S25) + (float)(v73 * _S24)) + (float)(v74 * _S26))
             + (float)(v75 * fmaxf(_S24, fmaxf(_S25, _S26)));
        v105 = 8191.0;
        if (v104 <= 8191.0)
        {
          v105 = v104;
          if (v104 < 0.0)
            v105 = 0.0;
        }
        _H0 = *((_WORD *)result + llroundf(v105));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        v110 = _S26 * _S0;
        v111 = (float)((float)(v49 * _S25) + (float)(_S24 * v48)) + (float)(v110 * v50);
        v112 = (float)((float)(v52 * _S25) + (float)(_S24 * v51)) + (float)(v110 * v53);
        _S0 = (float)((float)(v55 * _S25) + (float)(_S24 * v54)) + (float)(v110 * v56);
        LOWORD(_S24) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v46 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
        v116 = v40;
        if (v46 <= v40)
        {
          v116 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          if (v46 < v38)
            v116 = v38;
        }
        *i++ = llroundf(v116) << v71;
        if (v79)
        {
          v117 = (float)((float)(v39 + (float)(_S24 * v129)) + (float)(_S25 * v128)) + (float)(_S26 * v127);
          v118 = v42;
          if (v117 <= v42)
          {
            v118 = (float)((float)(v39 + (float)(_S24 * v129)) + (float)(_S25 * v128)) + (float)(_S26 * v127);
            if (v117 < v41)
              v118 = v41;
          }
          v46 = (float)(v39 + (float)(_S24 * v126)) + (float)(_S25 * v125);
          _S24 = v46 + (float)(_S26 * v47);
          *v79 = llroundf(v118) << v71;
          v119 = v42;
          if (_S24 <= v42)
          {
            v119 = v46 + (float)(_S26 * v47);
            if (_S24 < v41)
              v119 = v41;
          }
          v79[1] = llroundf(v119) << v71;
          v79 += 2;
        }
      }
      v70 += v22;
      v69 += v23;
      v66 = (_WORD *)((char *)v66 + v27);
      v65 = (_WORD *)((char *)v65 + v28);
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      v120 = 0;
      do
      {
        if (v11)
        {
          v121 = v11;
          v122 = v31;
          v123 = v26;
          do
          {
            v124 = *v123++;
            *v122++ = v124 | (v124 << 8);
            --v121;
          }
          while (v121);
        }
        v26 += v24;
        v31 += v29;
        ++v120;
      }
      while (v120 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, 2 * v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_TRC_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  unsigned __int8 *v72;
  char v73;
  uint64_t v74;
  unsigned __int8 *v75;
  _BYTE *v76;
  _WORD *v77;
  _WORD *i;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  float v88;
  BOOL v89;
  float v90;
  float v91;
  float v92;
  float v103;
  float v104;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  _WORD *v114;
  unsigned __int8 *v115;
  __int16 v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (uint64_t *)result[16];
    v17 = v15 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (unsigned __int8 *)(v25 + v24 * v12 + v11);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v120 = v32 * *(float *)(v18 + 16);
    v121 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    _S4 = *(float *)(v18 + 28);
    *(float *)&v38 = v32 * _S4;
    v118 = *(float *)&v38;
    v119 = v36;
    LOWORD(v38) = *(_WORD *)(v18 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v18 + 36);
    v45 = *(float *)(v18 + 40);
    v47 = *(float *)(v18 + 44);
    v46 = *(float *)(v18 + 48);
    v117 = v46;
    v48 = *(float *)(v18 + 52);
    v49 = *(float *)(v18 + 56);
    v50 = *(float *)(v18 + 60);
    v51 = *(float *)(v18 + 64);
    v52 = *(float *)(v18 + 68);
    v53 = *(float *)(v18 + 72);
    v55 = *(float *)(v18 + 76);
    v54 = *(float *)(v18 + 80);
    v56 = *(float *)(v18 + 84);
    v57 = *(float *)(v18 + 88);
    v58 = *(float *)(v18 + 92);
    v59 = *(float *)(v18 + 96);
    v60 = *(float *)(v18 + 100);
    v61 = *(float *)(v18 + 104);
    v62 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v63 = *(unsigned __int8 *)(v18 + 132);
    if (v63 >= 0x11)
      v64 = 0;
    else
      v64 = 16 - v63;
    v66 = *v16;
    v65 = v16[1];
    v67 = v65 + v28 * v17 + 2 * v14;
    if (!v65)
      v67 = 0;
    v68 = v66 + v27 * v17 + 2 * v14;
    v70 = *v19;
    v69 = v19[1];
    v71 = (_BYTE *)(v69 + v23 * v12 + v11);
    if (!v69)
      v71 = 0;
    v72 = (unsigned __int8 *)(v70 + v22 * v12 + v11);
    v73 = v64;
    do
    {
      v74 = v10;
      v75 = v72;
      v76 = v71;
      v77 = (_WORD *)v67;
      for (i = (_WORD *)v68; v74; --v74)
      {
        if (v76)
        {
          LOBYTE(v46) = *v76;
          v79 = (float)LODWORD(v46) - v34;
          LOBYTE(_S4) = v76[1];
          v80 = (float)LODWORD(_S4) - v34;
          v76 += 2;
          v81 = v121 * v80;
          v82 = (float)(v119 * v80) + (float)(v79 * v120);
          v83 = v118 * v79;
        }
        else
        {
          v83 = 0.0;
          v82 = 0.0;
          v81 = 0.0;
        }
        v84 = *v75++;
        v85 = v35 * (float)((float)v84 - v33);
        v86 = v81 + v85;
        v87 = 8191.0;
        if (v86 <= 8191.0)
        {
          v87 = v86;
          if (v86 < 0.0)
            v87 = 0.0;
        }
        v88 = v82 + v85;
        v89 = (float)(v82 + v85) <= 8191.0;
        v90 = 8191.0;
        if (v89)
        {
          v90 = v88;
          if (v88 < 0.0)
            v90 = 0.0;
        }
        v91 = v83 + v85;
        v89 = (float)(v83 + v85) <= 8191.0;
        v92 = 8191.0;
        if (v89)
        {
          v92 = v91;
          if (v91 < 0.0)
            v92 = 0.0;
        }
        _H0 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        v103 = (float)((float)(v55 * _S5) + (float)(_S0 * v53)) + (float)(_S4 * v54);
        v104 = (float)((float)(v57 * _S5) + (float)(_S0 * v56)) + (float)(_S4 * v58);
        _S0 = (float)((float)(v60 * _S5) + (float)(_S0 * v59)) + (float)(_S4 * v61);
        LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        v46 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v47 * _S6)) + v39;
        v108 = v41;
        if (v46 <= v41)
        {
          v108 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v47 * _S6)) + v39;
          if (v46 < v39)
            v108 = v39;
        }
        *i++ = llroundf(v108) << v73;
        if (v77)
        {
          v109 = (float)((float)(v40 + (float)(_S4 * v117)) + (float)(_S5 * v48)) + (float)(_S6 * v49);
          v110 = v43;
          if (v109 <= v43)
          {
            v110 = (float)((float)(v40 + (float)(_S4 * v117)) + (float)(_S5 * v48)) + (float)(_S6 * v49);
            if (v109 < v42)
              v110 = v42;
          }
          v46 = (float)(v40 + (float)(_S4 * v50)) + (float)(_S5 * v51);
          _S4 = v46 + (float)(_S6 * v52);
          *v77 = llroundf(v110) << v73;
          v111 = v43;
          if (_S4 <= v43)
          {
            v111 = v46 + (float)(_S6 * v52);
            if (_S4 < v42)
              v111 = v42;
          }
          v77[1] = llroundf(v111) << v73;
          v77 += 2;
        }
      }
      v72 += v22;
      v71 += v23;
      v68 += v27;
      v67 += v28;
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      v112 = 0;
      do
      {
        if (v10)
        {
          v113 = v10;
          v114 = v31;
          v115 = v26;
          do
          {
            v116 = *v115++;
            *v114++ = v116 | (v116 << 8);
            --v113;
          }
          while (v113);
        }
        v26 += v24;
        v31 += v29;
        ++v112;
      }
      while (v112 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, 2 * v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_444vf_rgb_xf444_GCD(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned __int8 *v66;
  char v67;
  uint64_t v68;
  unsigned __int8 *v69;
  _BYTE *v70;
  _WORD *v71;
  _WORD *i;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  unsigned int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  _WORD *v90;
  unsigned __int8 *v91;
  __int16 v92;

  v7 = *(_QWORD *)((char *)result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)((char *)result + 20);
    v13 = *(_QWORD *)((char *)result + 36);
    v14 = v9 + *(_QWORD *)((char *)result + 44);
    v15 = v10 - v9;
    v16 = result[14];
    v17 = (uint64_t *)result[16];
    v18 = result[13] * a2 / v8 + result[15];
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (unsigned __int8 *)(v26 + v25 * v14 + v13);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + 2 * v16);
    *(float *)&v33 = (float)*(unsigned int *)(v19 + 128);
    *(float *)&v34 = (float)*(unsigned int *)(v19 + 136);
    v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v19 + 140);
    v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v19 + 142);
    v37 = (float)v34;
    v38 = v35 * *(float *)v19;
    v39 = v35 * *(float *)(v19 + 8);
    v40 = v35 * *(float *)(v19 + 16);
    v41 = v35 * *(float *)(v19 + 20);
    v42 = *(float *)(v19 + 28);
    v43 = v35 * v42;
    LOWORD(v42) = *(_WORD *)(v19 + 144);
    v44 = (float)LODWORD(v42);
    LOWORD(v2) = *(_WORD *)(v19 + 146);
    v45 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v19 + 148);
    v46 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v19 + 150);
    v47 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v19 + 152);
    v48 = (float)v5;
    v49 = *(float *)(v19 + 36);
    v50 = *(float *)(v19 + 40);
    v51 = *(float *)(v19 + 44);
    v52 = *(float *)(v19 + 48);
    v53 = *(float *)(v19 + 52);
    v54 = *(float *)(v19 + 56);
    v55 = *(float *)(v19 + 60);
    v56 = *(float *)(v19 + 64);
    v57 = *(float *)(v19 + 68);
    v58 = *(unsigned __int8 *)(v19 + 132);
    v59 = 16 - v58;
    if (v58 >= 0x11)
      v59 = 0;
    v61 = *v17;
    v60 = v17[1];
    v62 = v60 + v29 * v18 + 2 * v16;
    if (!v60)
      v62 = 0;
    result = (_QWORD *)(v61 + v28 * v18 + 2 * v16);
    v64 = *v20;
    v63 = v20[1];
    v65 = (_BYTE *)(v63 + v24 * v14 + v13);
    if (!v63)
      v65 = 0;
    v66 = (unsigned __int8 *)(v64 + v23 * v14 + v13);
    v67 = v59;
    do
    {
      v68 = v12;
      v69 = v66;
      v70 = v65;
      v71 = (_WORD *)v62;
      for (i = result; v68; --v68)
      {
        if (v70)
        {
          LOBYTE(v6) = *v70;
          *(float *)&v73 = (float)LODWORD(v6);
          v74 = *(float *)&v73 - v37;
          LOBYTE(v73) = v70[1];
          v75 = (float)v73 - v37;
          v70 += 2;
          v76 = v39 * v75;
          v77 = (float)(v41 * v75) + (float)(v74 * v40);
          v78 = v43 * v74;
        }
        else
        {
          v78 = 0.0;
          v77 = 0.0;
          v76 = 0.0;
        }
        v79 = *v69++;
        v80 = v38 * (float)((float)v79 - v36);
        v6 = v76 + v80;
        v81 = v77 + v80;
        v82 = v78 + v80;
        v83 = (float)((float)((float)(v50 * v81) + (float)(v49 * v6)) + (float)(v51 * v82)) + v44;
        v84 = v46;
        if (v83 <= v46)
        {
          v84 = (float)((float)((float)(v50 * v81) + (float)(v49 * v6)) + (float)(v51 * v82)) + v44;
          if (v83 < v44)
            v84 = v44;
        }
        *i++ = llroundf(v84) << v67;
        if (v71)
        {
          v85 = (float)((float)(v45 + (float)(v6 * v52)) + (float)(v81 * v53)) + (float)(v82 * v54);
          v86 = v48;
          if (v85 <= v48)
          {
            v86 = (float)((float)(v45 + (float)(v6 * v52)) + (float)(v81 * v53)) + (float)(v82 * v54);
            if (v85 < v47)
              v86 = v47;
          }
          v6 = (float)((float)(v45 + (float)(v6 * v55)) + (float)(v81 * v56)) + (float)(v82 * v57);
          *v71 = llroundf(v86) << v67;
          v87 = v48;
          if (v6 <= v48)
          {
            v87 = v6;
            if (v6 < v47)
              v87 = v47;
          }
          v71[1] = llroundf(v87) << v67;
          v71 += 2;
        }
      }
      v66 += v23;
      v65 += v24;
      result = (_QWORD *)((char *)result + v28);
      v62 += v29;
      ++v11;
    }
    while (v11 != v15);
    if (v26 && v31)
    {
      v88 = 0;
      do
      {
        if (v12)
        {
          v89 = v12;
          v90 = v32;
          v91 = v27;
          do
          {
            v92 = *v91++;
            *v90++ = v92 | (v92 << 8);
            --v89;
          }
          while (v89);
        }
        v27 += v25;
        v32 += v30;
        ++v88;
      }
      while (v88 != v15);
    }
    else if (v31)
    {
      do
      {
        if (v12)
          result = memset(v32, 255, 2 * v12);
        v32 += v30;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  char *v63;
  _BYTE *v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  unsigned int v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  char v80;
  char v81;
  unsigned int v89;
  float v93;
  float v94;
  float v97;
  float v98;
  float v99;
  float v102;
  float v103;
  float v104;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = (_QWORD *)*((_QWORD *)result + 16);
    v47 = *((_QWORD *)result + 14);
    v48 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 161);
    v50 = *(unsigned __int8 *)(v14 + 160);
    v51 = *(unsigned __int8 *)(v14 + 159);
    v52 = *(unsigned __int8 *)(v14 + 158);
    v53 = *v46 + v48 * v20 + 4 * v47;
    v54 = v15[2];
    if (v54)
      v55 = (char *)(v54 + v19 * v12 + v49);
    else
      v55 = 0;
    v57 = *v15;
    v56 = v15[1];
    v58 = (_BYTE *)(v56 + v18 * v12 + v49);
    if (!v56)
      v58 = 0;
    v59 = (unsigned __int8 *)(v57 + v17 * v12 + v49);
    do
    {
      if (v11)
      {
        v60 = v11;
        v61 = v59;
        v62 = v53;
        v63 = v55;
        v64 = v58;
        do
        {
          if (v64)
          {
            LOBYTE(_S30) = *v64;
            *(float *)&v65 = (float)LODWORD(_S30);
            v66 = *(float *)&v65 - v24;
            LOBYTE(v65) = v64[1];
            v67 = (float)v65 - v24;
            v64 += 2;
            v68 = v26 * v67;
            v69 = (float)(v28 * v67) + (float)(v66 * v27);
            v70 = v29 * v66;
          }
          else
          {
            v70 = 0.0;
            v69 = 0.0;
            v68 = 0.0;
          }
          v71 = *v61++;
          v72 = v25 * (float)((float)v71 - v23);
          v73 = v68 + v72;
          v74 = (float)(v68 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v77 = 8191.0;
          if (v74)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v70 + v72;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v63)
          {
            v81 = *v63++;
            v80 = v81;
          }
          else
          {
            v80 = 0;
          }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v89 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S31, H8 }
          _H8 = *(_WORD *)(v38 + 2 * v89);
          __asm { FCVT            S9, H8 }
          v93 = (float)((float)((float)(v43 * _S31) + (float)(v42 * _S30)) + (float)(v44 * _S9))
              + (float)(v45 * fmaxf(_S30, fmaxf(_S31, _S9)));
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H8 = *(_WORD *)(v39 + 2 * llroundf(v94));
          __asm { FCVT            S10, H8 }
          v97 = _S30 * _S10;
          v98 = _S31 * _S10;
          v99 = _S9 * _S10;
          _H9 = *(_WORD *)(v40
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v31 * v98) + (float)(v97 * v30)) + (float)((float)(_S9 * _S10) * v32), 0.0), 8191.0)));
          if (!v63)
            v80 = -1;
          __asm { FCVT            S10, H9 }
          v102 = 255.0;
          if (_S10 <= 255.0)
          {
            v102 = _S10;
            if (_S10 < 0.0)
              v102 = 0.0;
          }
          v103 = (float)((float)(v34 * v98) + (float)(v97 * v33)) + (float)(v99 * v35);
          v104 = (float)((float)(v37 * v98) + (float)(v97 * v36)) + (float)(v99 * v41);
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          _S30 = fminf(fmaxf(v104, 0.0), 8191.0);
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(_S30));
          *(_BYTE *)(v62 + v52) = llroundf(v102);
          __asm { FCVT            S9, H31 }
          _S8 = 255.0;
          if (_S9 <= 255.0)
          {
            if (_S9 >= 0.0)
              __asm { FCVT            S8, H31 }
            else
              _S8 = 0.0;
          }
          *(_BYTE *)(v62 + v51) = llroundf(_S8);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          *(_BYTE *)(v62 + v50) = llroundf(_S31);
          result[v62] = v80;
          v62 += 4;
          --v60;
        }
        while (v60);
      }
      v59 += v17;
      v58 += v18;
      v55 += v19;
      v53 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  char *v58;
  _BYTE *v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  unsigned int v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  char v75;
  char v76;
  float v89;
  float v90;
  float v91;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = *((_QWORD *)result + 14);
    v43 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v14 + 161);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 160);
    v46 = *(unsigned __int8 *)(v14 + 159);
    v47 = *(unsigned __int8 *)(v14 + 158);
    v48 = *v41 + v43 * v20 + 4 * v42;
    v49 = v15[2];
    if (v49)
      v50 = (char *)(v49 + v19 * v12 + v44);
    else
      v50 = 0;
    v52 = *v15;
    v51 = v15[1];
    v53 = (_BYTE *)(v51 + v18 * v12 + v44);
    if (!v51)
      v53 = 0;
    v54 = (unsigned __int8 *)(v52 + v17 * v12 + v44);
    do
    {
      if (v11)
      {
        v55 = v11;
        v56 = v54;
        v57 = v48;
        v58 = v50;
        v59 = v53;
        do
        {
          if (v59)
          {
            LOBYTE(_S26) = *v59;
            *(float *)&v60 = (float)LODWORD(_S26);
            v61 = *(float *)&v60 - v24;
            LOBYTE(v60) = v59[1];
            v62 = (float)v60 - v24;
            v59 += 2;
            v63 = v26 * v62;
            v64 = (float)(v28 * v62) + (float)(v61 * v27);
            v65 = v29 * v61;
          }
          else
          {
            v65 = 0.0;
            v64 = 0.0;
            v63 = 0.0;
          }
          v66 = *v56++;
          v67 = v25 * (float)((float)v66 - v23);
          v68 = v63 + v67;
          v69 = (float)(v63 + v67) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v64 + v67;
          v69 = (float)(v64 + v67) <= 8191.0;
          v72 = 8191.0;
          if (v69)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v65 + v67;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          if (v58)
          {
            v76 = *v58++;
            v75 = v76;
          }
          else
          {
            v75 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S28, H28
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H29 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v31 * _S28) + (float)(_S26 * v30)) + (float)(_S27 * v32), 0.0), 8191.0)));
          if (!v58)
            v75 = -1;
          __asm { FCVT            S30, H29 }
          v89 = 255.0;
          if (_S30 <= 255.0)
          {
            v89 = _S30;
            if (_S30 < 0.0)
              v89 = 0.0;
          }
          v90 = (float)((float)(v34 * _S28) + (float)(_S26 * v33)) + (float)(_S27 * v35);
          v91 = (float)((float)(v37 * _S28) + (float)(_S26 * v36)) + (float)(_S27 * v38);
          _H27 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _S26 = fminf(fmaxf(v91, 0.0), 8191.0);
          LOWORD(_S26) = *(_WORD *)(v40 + 2 * llroundf(_S26));
          *(_BYTE *)(v57 + v47) = llroundf(v89);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          *(_BYTE *)(v57 + v46) = llroundf(_S28);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          result[v57] = llroundf(_S27);
          *(_BYTE *)(v57 + v45) = v75;
          v57 += 4;
          --v55;
        }
        while (v55);
      }
      v54 += v17;
      v53 += v18;
      v50 += v19;
      v48 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  char *v46;
  _BYTE *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  char v53;
  char v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  unsigned __int8 v59;
  float v60;
  float v61;
  char v62;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 7);
    v13 = (uint64_t *)*((_QWORD *)result + 8);
    v14 = *v13;
    v15 = v13[1];
    v16 = v13[2];
    v17 = **((_QWORD **)result + 17);
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    *(float *)&v19 = (float)*(unsigned int *)(v11 + 136);
    v20 = *(float *)&v19 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 140);
    v21 = (float)v18;
    LOWORD(v19) = *(_WORD *)(v11 + 142);
    v22 = (float)v19;
    v23 = v20 * *(float *)v11;
    v24 = v20 * *(float *)(v11 + 8);
    v25 = v20 * *(float *)(v11 + 16);
    v26 = v20 * *(float *)(v11 + 20);
    v27 = *(float *)(v11 + 28);
    v28 = v20 * v27;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = *((_QWORD *)result + 14);
    v31 = *((_QWORD *)result + 13) * a2 / v4 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v11 + 161);
    v34 = *(unsigned __int8 *)(v11 + 160);
    v35 = *(unsigned __int8 *)(v11 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 158);
    v36 = *v29 + v31 * v17 + 4 * v30;
    v37 = v12[2];
    if (v37)
      v38 = (char *)(v37 + v16 * v9 + v32);
    else
      v38 = 0;
    v40 = *v12;
    v39 = v12[1];
    v41 = (_BYTE *)(v39 + v15 * v9 + v32);
    if (!v39)
      v41 = 0;
    v42 = (unsigned __int8 *)(v40 + v14 * v9 + v32);
    while (!v8)
    {
LABEL_27:
      v42 += v14;
      v41 += v15;
      v38 += v16;
      v36 += v17;
      if (++v7 == v10)
        return result;
    }
    v43 = v8;
    v44 = v42;
    v45 = v36;
    v46 = v38;
    v47 = v41;
    while (1)
    {
      if (v47)
      {
        LOBYTE(v27) = *v47;
        v48 = (float)LODWORD(v27) - v22;
        LOBYTE(v2) = v47[1];
        v49 = (float)LODWORD(v2) - v22;
        v47 += 2;
        v50 = v24 * v49;
        v51 = (float)(v26 * v49) + (float)(v48 * v25);
        v52 = v28 * v48;
        if (!v46)
          goto LABEL_14;
      }
      else
      {
        v52 = 0.0;
        v51 = 0.0;
        v50 = 0.0;
        if (!v46)
        {
LABEL_14:
          v53 = 0;
          goto LABEL_15;
        }
      }
      v54 = *v46++;
      v53 = v54;
LABEL_15:
      v55 = *v44++;
      v56 = v23 * (float)((float)v55 - v21);
      v57 = v50 + v56;
      if (!v46)
        v53 = -1;
      v58 = 255.0;
      if (v57 <= 255.0)
      {
        v58 = v57;
        if (v57 < 0.0)
          v58 = 0.0;
      }
      v59 = llroundf(v58);
      v60 = v51 + v56;
      result[v45] = v59;
      v61 = 255.0;
      if (v60 <= 255.0)
      {
        v61 = v60;
        if (v60 < 0.0)
          v61 = 0.0;
      }
      v62 = llroundf(v61);
      v2 = v52 + v56;
      *(_BYTE *)(v45 + v35) = v62;
      v27 = 255.0;
      if (v2 <= 255.0)
      {
        v27 = v2;
        if (v2 < 0.0)
          v27 = 0.0;
      }
      *(_BYTE *)(v45 + v34) = llroundf(v27);
      *(_BYTE *)(v45 + v33) = v53;
      v45 += 4;
      if (!--v43)
        goto LABEL_27;
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _BYTE *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int *v58;
  unsigned __int8 *v59;
  _BYTE *v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  unsigned int v67;
  float v68;
  float v69;
  BOOL v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v85;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v104;
  float v105;
  float v107;
  float v108;
  float v110;
  float v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = *(float *)(v14 + 28);
    v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v14 + 144);
    v31 = (float)LODWORD(v29);
    v32 = *(float *)(v14 + 72);
    v33 = *(float *)(v14 + 76);
    v34 = *(float *)(v14 + 80);
    v35 = *(float *)(v14 + 84);
    v36 = *(float *)(v14 + 88);
    v37 = *(float *)(v14 + 92);
    v38 = *(float *)(v14 + 96);
    v39 = *(float *)(v14 + 100);
    v40 = v14 + 164;
    v41 = v14 + 16548;
    v42 = v14 + 32932;
    v43 = *(float *)(v14 + 104);
    v44 = *(float *)(v14 + 108);
    v45 = *(float *)(v14 + 112);
    v46 = *(float *)(v14 + 116);
    v47 = *(float *)(v14 + 120);
    v48 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 16 * *((_QWORD *)result + 14));
    v49 = v15[2];
    if (v49)
      v50 = (unsigned __int8 *)(v49 + v19 * v12 + v48);
    else
      v50 = 0;
    v53 = v15;
    v52 = *v15;
    v51 = v53[1];
    if (v51)
      v54 = (_BYTE *)(v51 + v18 * v12 + v48);
    else
      v54 = 0;
    v55 = (unsigned __int8 *)(v52 + v17 * v12 + v48);
    do
    {
      if (v11)
      {
        v56 = v11;
        v57 = v55;
        v58 = (unsigned int *)result;
        v59 = v50;
        v60 = v54;
        do
        {
          if (v60)
          {
            LOBYTE(v5) = *v60;
            *(float *)&v61 = (float)LODWORD(v5);
            v62 = *(float *)&v61 - v24;
            LOBYTE(v61) = v60[1];
            v63 = (float)v61 - v24;
            v60 += 2;
            v64 = v26 * v63;
            v65 = (float)(v28 * v63) + (float)(v62 * v27);
            v66 = v30 * v62;
          }
          else
          {
            v66 = 0.0;
            v65 = 0.0;
            v64 = 0.0;
          }
          v67 = *v57++;
          v68 = v25 * (float)((float)v67 - v23);
          v69 = v64 + v68;
          v70 = (float)(v64 + v68) <= 8191.0;
          v71 = 8191.0;
          if (v70)
          {
            v71 = v69;
            if (v69 < 0.0)
              v71 = 0.0;
          }
          v72 = v65 + v68;
          v70 = (float)(v65 + v68) <= 8191.0;
          v73 = 8191.0;
          if (v70)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v66 + v68;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          if (v59)
          {
            v77 = *v59++;
            v76 = v77;
          }
          else
          {
            v76 = 0;
          }
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H12 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          v85 = llroundf(fminf(fmaxf(v75, 0.0), 8191.0));
          __asm { FCVT            S11, H12 }
          _H12 = *(_WORD *)(v40 + 2 * v85);
          __asm { FCVT            S12, H12 }
          v89 = (float)((float)((float)(v45 * _S11) + (float)(v44 * _S10)) + (float)(v46 * _S12))
              + (float)(v47 * fmaxf(_S10, fmaxf(_S11, _S12)));
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          if (v59)
          {
            v91 = (double)v76 * 3.0 / 255.0;
            v92 = llroundf(v91);
          }
          else
          {
            v92 = 3;
          }
          _H13 = *(_WORD *)(v41 + 2 * llroundf(v90));
          __asm { FCVT            S13, H13 }
          v95 = _S10 * _S13;
          v96 = _S11 * _S13;
          v97 = _S12 * _S13;
          v98 = (float)((float)(v33 * v96) + (float)(v95 * v32)) + (float)(v97 * v34);
          v99 = (float)((float)(v36 * v96) + (float)(v95 * v35)) + (float)(v97 * v37);
          _S10 = (float)((float)(v39 * v96) + (float)(v95 * v38)) + (float)(v97 * v43);
          _H11 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v104 = v31 + _S10;
          v70 = (float)(v31 + _S10) <= 1023.0;
          v105 = 1023.0;
          if (v70)
          {
            v105 = v104;
            if (v104 < 0.0)
              v105 = 0.0;
          }
          __asm { FCVT            S12, H12 }
          v107 = v31 + _S12;
          v70 = (float)(v31 + _S12) <= 1023.0;
          v108 = 1023.0;
          if (v70)
          {
            v108 = v107;
            if (v107 < 0.0)
              v108 = 0.0;
          }
          __asm { FCVT            S11, H11 }
          v110 = v31 + _S11;
          v70 = (float)(v31 + _S11) <= 1023.0;
          v111 = 1023.0;
          if (v70)
          {
            v111 = v110;
            if (v110 < 0.0)
              v111 = 0.0;
          }
          v112 = llroundf(v105);
          v113 = llroundf(v108) << 10;
          v114 = llroundf(v111);
          v5 = (float)v92;
          if ((float)v92 > 3.0)
            v5 = 3.0;
          *v58++ = v113 | v112 | (llroundf(v5) << 30) | (v114 << 20);
          --v56;
        }
        while (v56);
      }
      v55 += v17;
      v54 += v18;
      v50 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int *v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unsigned int v62;
  float v63;
  float v64;
  BOOL v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  unsigned int v71;
  unsigned int v72;
  float v73;
  unsigned int v74;
  unsigned int v76;
  float v88;
  float v89;
  float v90;
  float v94;
  float v95;
  float v97;
  float v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = *(float *)(v14 + 28);
    v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v14 + 144);
    v31 = (float)LODWORD(v29);
    v32 = *(float *)(v14 + 72);
    v33 = *(float *)(v14 + 76);
    v34 = *(float *)(v14 + 80);
    v35 = *(float *)(v14 + 84);
    v36 = *(float *)(v14 + 88);
    v37 = *(float *)(v14 + 92);
    v38 = *(float *)(v14 + 96);
    v39 = *(float *)(v14 + 100);
    v40 = *(float *)(v14 + 104);
    v41 = v14 + 164;
    v42 = v14 + 16548;
    v43 = *(_QWORD *)(result + 36);
    v44 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 16 * *((_QWORD *)result + 14);
    v45 = v15[2];
    if (v45)
      result = (unsigned __int8 *)(v45 + v19 * v12 + v43);
    else
      result = 0;
    v48 = v15;
    v47 = *v15;
    v46 = v48[1];
    if (v46)
      v49 = (_BYTE *)(v46 + v18 * v12 + v43);
    else
      v49 = 0;
    v50 = (unsigned __int8 *)(v47 + v17 * v12 + v43);
    do
    {
      if (v11)
      {
        v51 = v11;
        v52 = v50;
        v53 = (unsigned int *)v44;
        v54 = result;
        v55 = v49;
        do
        {
          if (v55)
          {
            LOBYTE(v5) = *v55;
            *(float *)&v56 = (float)LODWORD(v5);
            v57 = *(float *)&v56 - v24;
            LOBYTE(v56) = v55[1];
            v58 = (float)v56 - v24;
            v55 += 2;
            v59 = v26 * v58;
            v60 = (float)(v28 * v58) + (float)(v57 * v27);
            v61 = v30 * v57;
          }
          else
          {
            v61 = 0.0;
            v60 = 0.0;
            v59 = 0.0;
          }
          v62 = *v52++;
          v63 = v25 * (float)((float)v62 - v23);
          v64 = v59 + v63;
          v65 = (float)(v59 + v63) <= 8191.0;
          v66 = 8191.0;
          if (v65)
          {
            v66 = v64;
            if (v64 < 0.0)
              v66 = 0.0;
          }
          v67 = v60 + v63;
          v65 = (float)(v60 + v63) <= 8191.0;
          v68 = 8191.0;
          if (v65)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = v61 + v63;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          if (v54 && (v72 = *v54, ++v54, v71 = v72, v54))
          {
            v73 = (double)v71 * 3.0 / 255.0;
            v74 = llroundf(v73);
          }
          else
          {
            v74 = 3;
          }
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          v76 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v41 + 2 * v76);
          __asm { FCVT            S10, H31 }
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S9, H31 }
          _H31 = *(_WORD *)(v42
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v39 * _S10) + (float)(_S8 * v38)) + (float)(_S9 * v40), 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v88 = v31 + _S31;
          v65 = (float)(v31 + _S31) <= 1023.0;
          v89 = 1023.0;
          if (v65)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = (float)((float)(v33 * _S10) + (float)(_S8 * v32)) + (float)(_S9 * v34);
          _S8 = (float)((float)(v36 * _S10) + (float)(_S8 * v35)) + (float)(_S9 * v37);
          _H9 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          v94 = v31 + _S8;
          v65 = (float)(v31 + _S8) <= 1023.0;
          v95 = 1023.0;
          if (v65)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          __asm { FCVT            S9, H9 }
          v97 = v31 + _S9;
          v65 = (float)(v31 + _S9) <= 1023.0;
          v98 = 1023.0;
          if (v65)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = llroundf(v89);
          v100 = llroundf(v95) << 10;
          v101 = llroundf(v98);
          v5 = (float)v74;
          if ((float)v74 > 3.0)
            v5 = 3.0;
          *v53++ = v100 | v99 | (llroundf(v5) << 30) | (v101 << 20);
          --v51;
        }
        while (v51);
      }
      v50 += v17;
      v49 += v18;
      result += v19;
      v44 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int *v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unsigned int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v13 = (uint64_t *)*((_QWORD *)result + 7);
    v12 = (uint64_t *)*((_QWORD *)result + 8);
    v14 = *v12;
    v15 = v12[1];
    v16 = v12[2];
    v17 = **((_QWORD **)result + 17);
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    *(float *)&v19 = (float)*(unsigned int *)(v11 + 136);
    v20 = *(float *)&v19 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 140);
    v21 = (float)v18;
    LOWORD(v19) = *(_WORD *)(v11 + 142);
    v22 = (float)v19;
    v23 = v20 * *(float *)v11;
    v24 = v20 * *(float *)(v11 + 8);
    v25 = v20 * *(float *)(v11 + 16);
    v26 = v20 * *(float *)(v11 + 20);
    v27 = *(float *)(v11 + 28);
    v28 = v20 * v27;
    LOWORD(v27) = *(_WORD *)(v11 + 144);
    v29 = (float)LODWORD(v27);
    v30 = *((_QWORD *)result + 14);
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = *((_QWORD *)result + 13) * a2 / v4 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    v34 = *v31 + v32 * v17 + 16 * v30;
    v35 = v13[2];
    if (v35)
      v36 = (unsigned __int8 *)(v35 + v16 * v9 + v33);
    else
      v36 = 0;
    v38 = *v13;
    v37 = v13[1];
    v39 = (_BYTE *)(v37 + v15 * v9 + v33);
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v14 * v9 + v33);
    while (!v8)
    {
LABEL_27:
      result += v14;
      v39 += v15;
      v36 += v16;
      v34 += v17;
      if (++v7 == v10)
        return result;
    }
    v40 = v8;
    v41 = result;
    v42 = (unsigned int *)v34;
    v43 = v36;
    v44 = v39;
    while (1)
    {
      if (v44)
      {
        LOBYTE(v2) = *v44;
        *(float *)&v45 = (float)LODWORD(v2);
        v46 = *(float *)&v45 - v22;
        LOBYTE(v45) = v44[1];
        v47 = (float)v45 - v22;
        v44 += 2;
        v48 = v24 * v47;
        v49 = (float)(v26 * v47) + (float)(v46 * v25);
        v50 = v28 * v46;
        if (v43)
          goto LABEL_12;
      }
      else
      {
        v50 = 0.0;
        v49 = 0.0;
        v48 = 0.0;
        if (v43)
        {
LABEL_12:
          v51 = *v43++;
          v52 = (double)v51 * 3.0 / 255.0;
          v53 = llroundf(v52);
          goto LABEL_15;
        }
      }
      v53 = 3;
LABEL_15:
      v54 = *v41++;
      v55 = v23 * (float)((float)v54 - v21);
      v56 = (float)(v50 + v55) + v29;
      v57 = 1023.0;
      if (v56 <= 1023.0)
      {
        v57 = v56;
        if (v56 < 0.0)
          v57 = 0.0;
      }
      v58 = (float)(v49 + v55) + v29;
      v59 = 1023.0;
      if (v58 <= 1023.0)
      {
        v59 = v58;
        if (v58 < 0.0)
          v59 = 0.0;
      }
      v60 = (float)(v48 + v55) + v29;
      v61 = 1023.0;
      if (v60 <= 1023.0)
      {
        v61 = v60;
        if (v60 < 0.0)
          v61 = 0.0;
      }
      v62 = llroundf(v57);
      v63 = llroundf(v59) << 10;
      v64 = llroundf(v61);
      v2 = (float)v53;
      if ((float)v53 > 3.0)
        v2 = 3.0;
      *v42++ = v63 | v62 | (llroundf(v2) << 30) | (v64 << 20);
      if (!--v40)
        goto LABEL_27;
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  _WORD *v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  __int16 v74;
  __int16 v75;
  unsigned int v83;
  float v87;
  float v88;
  float v91;
  float v92;
  float v93;
  __int16 v96;
  float v97;
  float v99;
  float v100;
  float v103;
  float v106;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 8 * *((_QWORD *)result + 14));
    v47 = v15[2];
    if (v47)
      v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    else
      v48 = 0;
    v51 = v15;
    v50 = *v15;
    v49 = v51[1];
    if (v49)
      v52 = (_BYTE *)(v49 + v18 * v12 + v46);
    else
      v52 = 0;
    v53 = (unsigned __int8 *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        v54 = v11;
        v55 = v53;
        v56 = result;
        v57 = v48;
        v58 = v52;
        do
        {
          if (v58)
          {
            LOBYTE(_S31) = *v58;
            *(float *)&v59 = (float)LODWORD(_S31);
            v60 = *(float *)&v59 - v24;
            LOBYTE(v59) = v58[1];
            v61 = (float)v59 - v24;
            v58 += 2;
            v62 = v26 * v61;
            v63 = (float)(v28 * v61) + (float)(v60 * v27);
            v64 = v29 * v60;
          }
          else
          {
            v64 = 0.0;
            v63 = 0.0;
            v62 = 0.0;
          }
          v65 = *v55++;
          v66 = v25 * (float)((float)v65 - v23);
          v67 = v62 + v66;
          v68 = (float)(v62 + v66) <= 8191.0;
          v69 = 8191.0;
          if (v68)
          {
            v69 = v67;
            if (v67 < 0.0)
              v69 = 0.0;
          }
          v70 = v63 + v66;
          v68 = (float)(v63 + v66) <= 8191.0;
          v71 = 8191.0;
          if (v68)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = v64 + v66;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          if (v57)
          {
            v75 = *v57++;
            v74 = v75;
          }
          else
          {
            v74 = 0;
          }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          v83 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v38 + 2 * v83);
          __asm { FCVT            S10, H9 }
          v87 = (float)((float)((float)(v43 * _S8) + (float)(v42 * _S31)) + (float)(v44 * _S10))
              + (float)(v45 * fmaxf(_S31, fmaxf(_S8, _S10)));
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          _H9 = *(_WORD *)(v39 + 2 * llroundf(v88));
          __asm { FCVT            S11, H9 }
          v91 = _S31 * _S11;
          v92 = _S8 * _S11;
          v93 = _S10 * _S11;
          _H12 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v31 * v92) + (float)(v91 * v30)) + (float)((float)(_S10 * _S11) * v32), 0.0), 8191.0)));
          __asm { FCVT            S11, H12 }
          v96 = v74 | (v74 << 8);
          if (!v57)
            v96 = -1;
          v97 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S10, H12 }
            _NF = _S10 < 0.0;
            v97 = _S11;
            if (_NF)
              v97 = 0.0;
          }
          v99 = (float)((float)(v34 * v92) + (float)(v91 * v33)) + (float)(v93 * v35);
          v100 = (float)((float)(v37 * v92) + (float)(v91 * v36)) + (float)(v93 * v41);
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _S31 = fminf(fmaxf(v100, 0.0), 8191.0);
          LOWORD(_S31) = *(_WORD *)(v40 + 2 * llroundf(_S31));
          __asm { FCVT            S11, H8 }
          *v56 = llroundf(v97);
          v103 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S8, H8 }
            v103 = _S11;
            if (_S8 < 0.0)
              v103 = 0.0;
          }
          __asm { FCVT            S10, H31 }
          v56[1] = llroundf(v103);
          v106 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S31, H31 }
            v106 = _S10;
            if (_S31 < 0.0)
              v106 = 0.0;
          }
          v56[2] = llroundf(v106);
          v56[3] = v96;
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _WORD *v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unsigned int v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  __int16 v69;
  __int16 v70;
  __int16 v83;
  float v84;
  float v86;
  float v87;
  float v90;
  float v93;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *(_QWORD *)(result + 36);
    v42 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 8 * *((_QWORD *)result + 14);
    v43 = v15[2];
    if (v43)
      result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    else
      result = 0;
    v46 = v15;
    v45 = *v15;
    v44 = v46[1];
    if (v44)
      v47 = (_BYTE *)(v44 + v18 * v12 + v41);
    else
      v47 = 0;
    v48 = (unsigned __int8 *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        v49 = v11;
        v50 = v48;
        v51 = (_WORD *)v42;
        v52 = result;
        v53 = v47;
        do
        {
          if (v53)
          {
            LOBYTE(_S27) = *v53;
            *(float *)&v54 = (float)LODWORD(_S27);
            v55 = *(float *)&v54 - v24;
            LOBYTE(v54) = v53[1];
            v56 = (float)v54 - v24;
            v53 += 2;
            v57 = v26 * v56;
            v58 = (float)(v28 * v56) + (float)(v55 * v27);
            v59 = v29 * v55;
          }
          else
          {
            v59 = 0.0;
            v58 = 0.0;
            v57 = 0.0;
          }
          v60 = *v50++;
          v61 = v25 * (float)((float)v60 - v23);
          v62 = v57 + v61;
          v63 = (float)(v57 + v61) <= 8191.0;
          v64 = 8191.0;
          if (v63)
          {
            v64 = v62;
            if (v62 < 0.0)
              v64 = 0.0;
          }
          v65 = v58 + v61;
          v63 = (float)(v58 + v61) <= 8191.0;
          v66 = 8191.0;
          if (v63)
          {
            v66 = v65;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          v67 = v59 + v61;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          if (v52)
          {
            v70 = *v52++;
            v69 = v70;
          }
          else
          {
            v69 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S29, H29
          }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H8 = *(_WORD *)(v40
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v31 * _S29) + (float)(_S27 * v30)) + (float)(_S28 * v32), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          v83 = v69 | (v69 << 8);
          if (!v52)
            v83 = -1;
          v84 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S30, H8 }
            _NF = _S30 < 0.0;
            v84 = _S31;
            if (_NF)
              v84 = 0.0;
          }
          v86 = (float)((float)(v34 * _S29) + (float)(_S27 * v33)) + (float)(_S28 * v35);
          v87 = (float)((float)(v37 * _S29) + (float)(_S27 * v36)) + (float)(_S28 * v38);
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _S27 = fminf(fmaxf(v87, 0.0), 8191.0);
          LOWORD(_S27) = *(_WORD *)(v40 + 2 * llroundf(_S27));
          __asm { FCVT            S31, H28 }
          *v51 = llroundf(v84);
          v90 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v90 = _S31;
            if (_S28 < 0.0)
              v90 = 0.0;
          }
          __asm { FCVT            S30, H27 }
          v51[1] = llroundf(v90);
          v93 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S27, H27 }
            v93 = _S30;
            if (_S27 < 0.0)
              v93 = 0.0;
          }
          v51[2] = llroundf(v93);
          v51[3] = v83;
          v51 += 4;
          --v49;
        }
        while (v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  __int16 v49;
  __int16 v50;
  unsigned int v51;
  float v52;
  float v53;
  __int16 v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v13 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v13;
    v16 = v13[1];
    v17 = v13[2];
    v18 = **((_QWORD **)result + 17);
    *(float *)&v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&v20 = (float)*(unsigned int *)(v12 + 136);
    v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    v23 = (float)v20;
    v24 = v21 * *(float *)v12;
    v25 = v21 * *(float *)(v12 + 8);
    v26 = v21 * *(float *)(v12 + 16);
    v27 = v21 * *(float *)(v12 + 20);
    v28 = v21 * *(float *)(v12 + 28);
    v29 = *((_QWORD *)result + 14);
    v30 = (_QWORD *)*((_QWORD *)result + 16);
    v31 = *((_QWORD *)result + 13) * a2 / v5 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    v33 = *v30 + v31 * v18 + 8 * v29;
    v34 = v14[2];
    if (v34)
      v35 = (unsigned __int8 *)(v34 + v17 * v10 + v32);
    else
      v35 = 0;
    v37 = *v14;
    v36 = v14[1];
    v38 = (_BYTE *)(v36 + v16 * v10 + v32);
    if (!v36)
      v38 = 0;
    result = (unsigned __int8 *)(v37 + v15 * v10 + v32);
    while (!v9)
    {
LABEL_29:
      result += v15;
      v38 += v16;
      v35 += v17;
      v33 += v18;
      if (++v8 == v11)
        return result;
    }
    v39 = v9;
    v40 = result;
    v41 = (_WORD *)v33;
    v42 = v35;
    v43 = v38;
    while (1)
    {
      if (v43)
      {
        LOBYTE(v2) = *v43;
        v44 = (float)LODWORD(v2) - v23;
        LOBYTE(v3) = v43[1];
        v45 = (float)LODWORD(v3) - v23;
        v43 += 2;
        v46 = v25 * v45;
        v47 = (float)(v27 * v45) + (float)(v44 * v26);
        v48 = v28 * v44;
        if (!v42)
          goto LABEL_14;
      }
      else
      {
        v48 = 0.0;
        v47 = 0.0;
        v46 = 0.0;
        if (!v42)
        {
LABEL_14:
          v49 = 0;
          goto LABEL_15;
        }
      }
      v50 = *v42++;
      v49 = v50;
LABEL_15:
      v51 = *v40++;
      v52 = v24 * (float)((float)v51 - v22);
      v53 = v46 + v52;
      v54 = v49 | (v49 << 8);
      if (!v42)
        v54 = -1;
      v55 = 65535.0;
      if (v53 <= 65535.0)
      {
        v55 = v53;
        if (v53 < 0.0)
          v55 = 0.0;
      }
      v56 = v47 + v52;
      *v41 = llroundf(v55);
      v57 = (float)(v47 + v52) <= 65535.0;
      v3 = 65535.0;
      if (v57)
      {
        v3 = v56;
        if (v56 < 0.0)
          v3 = 0.0;
      }
      v58 = v48 + v52;
      v41[1] = llroundf(v3);
      v57 = (float)(v48 + v52) <= 65535.0;
      v2 = 65535.0;
      if (v57)
      {
        v2 = v58;
        if (v58 < 0.0)
          v2 = 0.0;
      }
      v41[2] = llroundf(v2);
      v41[3] = v54;
      v41 += 4;
      if (!--v39)
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  _WORD *v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  int v74;
  int v75;
  unsigned int v83;
  float v87;
  float v88;
  float v91;
  float v92;
  float v93;
  unsigned int v96;
  float v98;
  float v99;
  float v103;
  float v106;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 8 * *((_QWORD *)result + 14));
    v47 = v15[2];
    if (v47)
      v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    else
      v48 = 0;
    v51 = v15;
    v50 = *v15;
    v49 = v51[1];
    if (v49)
      v52 = (_BYTE *)(v49 + v18 * v12 + v46);
    else
      v52 = 0;
    v53 = (unsigned __int8 *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        v54 = v11;
        v55 = v53;
        v56 = result;
        v57 = v48;
        v58 = v52;
        do
        {
          if (v58)
          {
            LOBYTE(v5) = *v58;
            *(float *)&v59 = (float)LODWORD(v5);
            v60 = *(float *)&v59 - v24;
            LOBYTE(v59) = v58[1];
            v61 = (float)v59 - v24;
            v58 += 2;
            v62 = v26 * v61;
            v63 = (float)(v28 * v61) + (float)(v60 * v27);
            v64 = v29 * v60;
          }
          else
          {
            v64 = 0.0;
            v63 = 0.0;
            v62 = 0.0;
          }
          v65 = *v55++;
          v66 = v25 * (float)((float)v65 - v23);
          v67 = v62 + v66;
          v68 = (float)(v62 + v66) <= 8191.0;
          v69 = 8191.0;
          if (v68)
          {
            v69 = v67;
            if (v67 < 0.0)
              v69 = 0.0;
          }
          v70 = v63 + v66;
          v68 = (float)(v63 + v66) <= 8191.0;
          v71 = 8191.0;
          if (v68)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = v64 + v66;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          if (v57)
          {
            v75 = *v57++;
            v74 = v75;
          }
          else
          {
            v74 = 0;
          }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          v83 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v38 + 2 * v83);
          __asm { FCVT            S11, H9 }
          v87 = (float)((float)((float)(v43 * _S8) + (float)(v42 * _S31)) + (float)(v44 * _S11))
              + (float)(v45 * fmaxf(_S31, fmaxf(_S8, _S11)));
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          _H9 = *(_WORD *)(v39 + 2 * llroundf(v88));
          __asm { FCVT            S12, H9 }
          v91 = _S31 * _S12;
          v92 = _S8 * _S12;
          v93 = _S11 * _S12;
          _H12 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v31 * v92) + (float)((float)(_S31 * _S12) * v30))+ (float)((float)(_S11 * _S12) * v32), 0.0), 8191.0)));
          __asm { FCVT            S11, H12 }
          v96 = v74 | (v74 << 8);
          if (!v57)
            v96 = -1;
          v5 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S31, H12 }
            _NF = _S31 < 0.0;
            v5 = _S11;
            if (_NF)
              v5 = 0.0;
          }
          v98 = (float)((float)(v34 * v92) + (float)(v91 * v33)) + (float)(v93 * v35);
          v99 = (float)(v37 * v92) + (float)(v91 * v36);
          _H11 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S10, H11 }
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99 + (float)(v93 * v41), 0.0), 8191.0)));
          v103 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S8, H11 }
            _NF = _S8 < 0.0;
            v103 = _S10;
            if (_NF)
              v103 = 0.0;
          }
          __asm { FCVT            S11, H9 }
          v106 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S9, H9 }
            v106 = _S11;
            if (_S9 < 0.0)
              v106 = 0.0;
          }
          *v56 = bswap32(v96) >> 16;
          v56[1] = __rev16(llroundf(v5));
          v56[2] = __rev16(llroundf(v103));
          v56[3] = __rev16(llroundf(v106));
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _WORD *v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unsigned int v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int v69;
  int v70;
  unsigned int v83;
  float v87;
  float v91;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *(_QWORD *)(result + 36);
    v42 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 8 * *((_QWORD *)result + 14);
    v43 = v15[2];
    if (v43)
      result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    else
      result = 0;
    v46 = v15;
    v45 = *v15;
    v44 = v46[1];
    if (v44)
      v47 = (_BYTE *)(v44 + v18 * v12 + v41);
    else
      v47 = 0;
    v48 = (unsigned __int8 *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        v49 = v11;
        v50 = v48;
        v51 = (_WORD *)v42;
        v52 = result;
        v53 = v47;
        do
        {
          if (v53)
          {
            LOBYTE(v5) = *v53;
            *(float *)&v54 = (float)LODWORD(v5);
            v55 = *(float *)&v54 - v24;
            LOBYTE(v54) = v53[1];
            v56 = (float)v54 - v24;
            v53 += 2;
            v57 = v26 * v56;
            v58 = (float)(v28 * v56) + (float)(v55 * v27);
            v59 = v29 * v55;
          }
          else
          {
            v59 = 0.0;
            v58 = 0.0;
            v57 = 0.0;
          }
          v60 = *v50++;
          v61 = v25 * (float)((float)v60 - v23);
          v62 = v57 + v61;
          v63 = (float)(v57 + v61) <= 8191.0;
          v64 = 8191.0;
          if (v63)
          {
            v64 = v62;
            if (v62 < 0.0)
              v64 = 0.0;
          }
          v65 = v58 + v61;
          v63 = (float)(v58 + v61) <= 8191.0;
          v66 = 8191.0;
          if (v63)
          {
            v66 = v65;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          v67 = v59 + v61;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          if (v52)
          {
            v70 = *v52++;
            v69 = v70;
          }
          else
          {
            v69 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H27
            FCVT            S29, H29
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          _H8 = *(_WORD *)(v40
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v31 * _S29) + (float)(_S28 * v30)) + (float)(_S30 * v32), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          v83 = v69 | (v69 << 8);
          if (!v52)
            v83 = -1;
          v5 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S27, H8 }
            _NF = _S27 < 0.0;
            v5 = _S31;
            if (_NF)
              v5 = 0.0;
          }
          _H9 = *(_WORD *)(v40
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v34 * _S29) + (float)(_S28 * v33)) + (float)(_S30 * v35), 0.0), 8191.0)));
          __asm { FCVT            S8, H9 }
          v87 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S31, H9 }
            _NF = _S31 < 0.0;
            v87 = _S8;
            if (_NF)
              v87 = 0.0;
          }
          _H30 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v37 * _S29) + (float)(_S28 * v36)) + (float)(_S30 * v38), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v91 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S28, H30 }
            _NF = _S28 < 0.0;
            v91 = _S29;
            if (_NF)
              v91 = 0.0;
          }
          *v51 = bswap32(v83) >> 16;
          v51[1] = __rev16(llroundf(v5));
          v51[2] = __rev16(llroundf(v87));
          v51[3] = __rev16(llroundf(v91));
          v51 += 4;
          --v49;
        }
        while (v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  int v50;
  unsigned int v51;
  float v52;
  float v53;
  unsigned int v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v13 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v13;
    v16 = v13[1];
    v17 = v13[2];
    v18 = **((_QWORD **)result + 17);
    *(float *)&v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&v20 = (float)*(unsigned int *)(v12 + 136);
    v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    v23 = (float)v20;
    v24 = v21 * *(float *)v12;
    v25 = v21 * *(float *)(v12 + 8);
    v26 = v21 * *(float *)(v12 + 16);
    v27 = v21 * *(float *)(v12 + 20);
    v28 = v21 * *(float *)(v12 + 28);
    v29 = *((_QWORD *)result + 14);
    v30 = (_QWORD *)*((_QWORD *)result + 16);
    v31 = *((_QWORD *)result + 13) * a2 / v5 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    v33 = *v30 + v31 * v18 + 8 * v29;
    v34 = v14[2];
    if (v34)
      v35 = (unsigned __int8 *)(v34 + v17 * v10 + v32);
    else
      v35 = 0;
    v37 = *v14;
    v36 = v14[1];
    v38 = (_BYTE *)(v36 + v16 * v10 + v32);
    if (!v36)
      v38 = 0;
    result = (unsigned __int8 *)(v37 + v15 * v10 + v32);
    while (!v9)
    {
LABEL_28:
      result += v15;
      v38 += v16;
      v35 += v17;
      v33 += v18;
      if (++v8 == v11)
        return result;
    }
    v39 = v9;
    v40 = result;
    v41 = (_WORD *)v33;
    v42 = v35;
    v43 = v38;
    while (1)
    {
      if (v43)
      {
        LOBYTE(v2) = *v43;
        v44 = (float)LODWORD(v2) - v23;
        LOBYTE(v3) = v43[1];
        v45 = (float)LODWORD(v3) - v23;
        v43 += 2;
        v46 = v25 * v45;
        v47 = (float)(v27 * v45) + (float)(v44 * v26);
        v48 = v28 * v44;
        if (!v42)
          goto LABEL_14;
      }
      else
      {
        v48 = 0.0;
        v47 = 0.0;
        v46 = 0.0;
        if (!v42)
        {
LABEL_14:
          v49 = 0;
          goto LABEL_15;
        }
      }
      v50 = *v42++;
      v49 = v50;
LABEL_15:
      v51 = *v40++;
      v52 = v24 * (float)((float)v51 - v22);
      v53 = v46 + v52;
      v54 = v49 | (v49 << 8);
      if (!v42)
        v54 = -1;
      v55 = 65535.0;
      if (v53 <= 65535.0)
      {
        v55 = v53;
        if (v53 < 0.0)
          v55 = 0.0;
      }
      v56 = v47 + v52;
      v57 = (float)(v47 + v52) <= 65535.0;
      v3 = 65535.0;
      if (v57)
      {
        v3 = v56;
        if (v56 < 0.0)
          v3 = 0.0;
      }
      v58 = v48 + v52;
      v2 = 65535.0;
      if (v58 <= 65535.0)
      {
        v2 = v58;
        if (v58 < 0.0)
          v2 = 0.0;
      }
      *v41 = bswap32(v54) >> 16;
      v41[1] = __rev16(llroundf(v55));
      v41[2] = __rev16(llroundf(v3));
      v41[3] = __rev16(llroundf(v2));
      v41 += 4;
      if (!--v39)
        goto LABEL_28;
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  _BYTE *v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  unsigned int v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v84;
  float v88;
  float v89;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;

  v7 = *(_QWORD *)(result + 28);
  v8 = *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *((_QWORD *)result + 19);
    v16 = (_QWORD *)*((_QWORD *)result + 7);
    v17 = (uint64_t *)*((_QWORD *)result + 8);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = **((_QWORD **)result + 17);
    *(float *)&v22 = (float)*(unsigned int *)(v15 + 128);
    v23 = 8191.0 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v15 + 142);
    v25 = (float)LODWORD(a5);
    v26 = v23 * *(float *)v15;
    v27 = v23 * *(float *)(v15 + 8);
    v28 = v23 * *(float *)(v15 + 16);
    v29 = v23 * *(float *)(v15 + 20);
    v30 = v23 * *(float *)(v15 + 28);
    v31 = *(float *)(v15 + 72);
    v32 = *(float *)(v15 + 76);
    v33 = *(float *)(v15 + 80);
    v34 = *(float *)(v15 + 84);
    v35 = *(float *)(v15 + 88);
    v36 = *(float *)(v15 + 92);
    v37 = *(float *)(v15 + 96);
    v38 = *(float *)(v15 + 100);
    v39 = v15 + 164;
    v40 = v15 + 16548;
    v41 = v15 + 32932;
    v42 = *(float *)(v15 + 104);
    v43 = *(float *)(v15 + 108);
    v44 = *(float *)(v15 + 112);
    v45 = *(float *)(v15 + 116);
    v46 = *(float *)(v15 + 120);
    v47 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v8 + *((_QWORD *)result + 15)) * v21
                               + 8 * *((_QWORD *)result + 14));
    v48 = v16[2];
    if (v48)
      v49 = (unsigned __int8 *)(v48 + v20 * v13 + v47);
    else
      v49 = 0;
    v52 = v16;
    v51 = *v16;
    v50 = v52[1];
    if (v50)
      v53 = (_BYTE *)(v50 + v19 * v13 + v47);
    else
      v53 = 0;
    v54 = (unsigned __int8 *)(v51 + v18 * v13 + v47);
    LOWORD(v6) = 15360;
    do
    {
      if (v12)
      {
        v55 = v12;
        v56 = v54;
        v57 = result;
        v58 = v49;
        v59 = v53;
        do
        {
          if (v59)
          {
            LOBYTE(v5) = *v59;
            *(float *)&v60 = (float)v5;
            v61 = *(float *)&v60 - v25;
            LOBYTE(v60) = v59[1];
            v62 = (float)v60 - v25;
            v59 += 2;
            v63 = v27 * v62;
            v64 = (float)(v29 * v62) + (float)(v61 * v28);
            v65 = v30 * v61;
          }
          else
          {
            v65 = 0.0;
            v64 = 0.0;
            v63 = 0.0;
          }
          v66 = *v56++;
          v67 = v26 * (float)((float)v66 - v24);
          v68 = v63 + v67;
          v69 = (float)(v63 + v67) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v64 + v67;
          v69 = (float)(v64 + v67) <= 8191.0;
          v72 = 8191.0;
          if (v69)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v65 + v67;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          if (v58)
          {
            v76 = *v58++;
            v75 = v76;
          }
          else
          {
            v75 = 0;
          }
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          v84 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v39 + 2 * v84);
          __asm { FCVT            S10, H10 }
          v88 = (float)((float)((float)(v44 * _S9) + (float)(v43 * _S8)) + (float)(v45 * _S10))
              + (float)(v46 * fmaxf(_S8, fmaxf(_S9, _S10)));
          v89 = 8191.0;
          if (v88 <= 8191.0)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          _H11 = *(_WORD *)(v40 + 2 * llroundf(v89));
          __asm { FCVT            S11, H11 }
          v92 = _S8 * _S11;
          v93 = _S9 * _S11;
          v94 = _S10 * _S11;
          v95 = (float)((float)(v32 * v93) + (float)(v92 * v31)) + (float)(v94 * v33);
          v96 = (float)((float)(v35 * v93) + (float)(v92 * v34)) + (float)(v94 * v36);
          v97 = (float)((float)(v38 * v93) + (float)(v92 * v37)) + (float)(v94 * v42);
          LOWORD(v93) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          LOWORD(v94) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          LOWORD(v97) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _S11 = (float)v75 * 0.0039216;
          __asm { FCVT            H11, S11 }
          *v57 = LOWORD(v93);
          v57[1] = LOWORD(v94);
          v57[2] = LOWORD(v97);
          if (v58)
            *(float *)&v5 = _S11;
          else
            v5 = v6;
          v57[3] = v5;
          v57 += 4;
          --v55;
        }
        while (v55);
      }
      v54 += v18;
      v53 += v19;
      v49 += v20;
      result += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _WORD *v52;
  unsigned __int8 *v53;
  _BYTE *v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unsigned int v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  unsigned int v71;
  float v82;
  float v83;
  float v84;

  v7 = *(_QWORD *)(result + 28);
  v8 = *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *((_QWORD *)result + 19);
    v16 = (_QWORD *)*((_QWORD *)result + 7);
    v17 = (uint64_t *)*((_QWORD *)result + 8);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = **((_QWORD **)result + 17);
    *(float *)&v22 = (float)*(unsigned int *)(v15 + 128);
    v23 = 8191.0 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v15 + 142);
    v25 = (float)LODWORD(a5);
    v26 = v23 * *(float *)v15;
    v27 = v23 * *(float *)(v15 + 8);
    v28 = v23 * *(float *)(v15 + 16);
    v29 = v23 * *(float *)(v15 + 20);
    v30 = v23 * *(float *)(v15 + 28);
    v31 = *(float *)(v15 + 72);
    v32 = *(float *)(v15 + 76);
    v33 = *(float *)(v15 + 80);
    v34 = *(float *)(v15 + 84);
    v35 = *(float *)(v15 + 88);
    v36 = *(float *)(v15 + 92);
    v37 = *(float *)(v15 + 96);
    v38 = *(float *)(v15 + 100);
    v39 = *(float *)(v15 + 104);
    v40 = v15 + 164;
    v41 = v15 + 16548;
    v42 = *(_QWORD *)(result + 36);
    v43 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v8 + *((_QWORD *)result + 15)) * v21
        + 8 * *((_QWORD *)result + 14);
    v44 = v16[2];
    if (v44)
      result = (unsigned __int8 *)(v44 + v20 * v13 + v42);
    else
      result = 0;
    v47 = v16;
    v46 = *v16;
    v45 = v47[1];
    if (v45)
      v48 = (_BYTE *)(v45 + v19 * v13 + v42);
    else
      v48 = 0;
    v49 = (unsigned __int8 *)(v46 + v18 * v13 + v42);
    LOWORD(v5) = 15360;
    do
    {
      if (v12)
      {
        v50 = v12;
        v51 = v49;
        v52 = (_WORD *)v43;
        v53 = result;
        v54 = v48;
        do
        {
          if (v54)
          {
            LOBYTE(v6) = *v54;
            *(float *)&v55 = (float)v6;
            v56 = *(float *)&v55 - v25;
            LOBYTE(v55) = v54[1];
            v57 = (float)v55 - v25;
            v54 += 2;
            v58 = v27 * v57;
            v59 = (float)(v29 * v57) + (float)(v56 * v28);
            v60 = v30 * v56;
          }
          else
          {
            v60 = 0.0;
            v59 = 0.0;
            v58 = 0.0;
          }
          v61 = *v51++;
          v62 = v26 * (float)((float)v61 - v24);
          v63 = v58 + v62;
          v64 = (float)(v58 + v62) <= 8191.0;
          v65 = 8191.0;
          if (v64)
          {
            v65 = v63;
            if (v63 < 0.0)
              v65 = 0.0;
          }
          v66 = v59 + v62;
          v64 = (float)(v59 + v62) <= 8191.0;
          v67 = 8191.0;
          if (v64)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = v60 + v62;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = v68;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          if (v53)
          {
            v71 = *v53++;
            v70 = v71;
          }
          else
          {
            v70 = 0;
          }
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v82 = (float)((float)(v32 * _S30) + (float)(_S28 * v31)) + (float)(_S29 * v33);
          v83 = (float)((float)(v35 * _S30) + (float)(_S28 * v34)) + (float)(_S29 * v36);
          v84 = (float)((float)(v38 * _S30) + (float)(_S28 * v37)) + (float)(_S29 * v39);
          LOWORD(_S29) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          LOWORD(v84) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _S31 = (float)v70 * 0.0039216;
          __asm { FCVT            H31, S31 }
          *v52 = LOWORD(_S29);
          v52[1] = LOWORD(_S30);
          v52[2] = LOWORD(v84);
          if (v53)
            *(float *)&v6 = _S31;
          else
            v6 = v5;
          v52[3] = v6;
          v52 += 4;
          --v50;
        }
        while (v50);
      }
      v49 += v18;
      v48 += v19;
      result += v20;
      v43 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  float v53;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 1.0;
    v22 = 1.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v23 = (float)v20;
    LOWORD(v21) = *(_WORD *)(v13 + 142);
    v24 = (float)v21;
    v25 = v22 * *(float *)v13;
    v26 = v22 * *(float *)(v13 + 8);
    v27 = v22 * *(float *)(v13 + 16);
    v28 = v22 * *(float *)(v13 + 20);
    v29 = v22 * *(float *)(v13 + 28);
    v30 = *((_QWORD *)result + 14);
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    v34 = *v31 + v32 * v19 + 8 * v30;
    v35 = v15[2];
    if (v35)
      v36 = (unsigned __int8 *)(v35 + v18 * v11 + v33);
    else
      v36 = 0;
    v38 = *v15;
    v37 = v15[1];
    v39 = (_BYTE *)(v37 + v17 * v11 + v33);
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v16 * v11 + v33);
    LOWORD(v2) = 15360;
    while (!v10)
    {
LABEL_19:
      result += v16;
      v39 += v17;
      v36 += v18;
      v34 += v19;
      if (++v9 == v12)
        return result;
    }
    v40 = v10;
    v41 = result;
    v42 = (_WORD *)v34;
    v43 = v36;
    v44 = v39;
    while (1)
    {
      if (v44)
      {
        LOBYTE(v3) = *v44;
        v45 = (float)v3 - v24;
        LOBYTE(_S18) = v44[1];
        v46 = (float)LODWORD(_S18) - v24;
        v44 += 2;
        v47 = v26 * v46;
        v48 = (float)(v28 * v46) + (float)(v45 * v27);
        v49 = v29 * v45;
        if (!v43)
          goto LABEL_14;
      }
      else
      {
        v49 = 0.0;
        v48 = 0.0;
        v47 = 0.0;
        if (!v43)
        {
LABEL_14:
          v50 = 0;
          goto LABEL_15;
        }
      }
      v51 = *v43++;
      v50 = v51;
LABEL_15:
      v52 = *v41++;
      v53 = v25 * (float)((float)v52 - v23);
      _S19 = v47 + v53;
      _S18 = v48 + v53;
      _S17 = v49 + v53;
      _S20 = (float)v50 * 0.0039216;
      __asm
      {
        FCVT            H20, S20
        FCVT            H19, S19
      }
      *v42 = LOWORD(_S19);
      __asm { FCVT            H18, S18 }
      v42[1] = LOWORD(_S18);
      __asm { FCVT            H17, S17 }
      v42[2] = LOWORD(_S17);
      if (v43)
        *(float *)&v3 = _S20;
      else
        v3 = v2;
      v42[3] = v3;
      v42 += 4;
      if (!--v40)
        goto LABEL_19;
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v83;
  float v87;
  float v88;
  float v91;
  float v94;
  float v95;
  float v99;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 16 * *((_QWORD *)result + 14));
    v47 = v15[2];
    if (v47)
      v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    else
      v48 = 0;
    v51 = v15;
    v50 = *v15;
    v49 = v51[1];
    if (v49)
      v52 = (_BYTE *)(v49 + v18 * v12 + v46);
    else
      v52 = 0;
    v53 = (unsigned __int8 *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        v54 = v11;
        v55 = v53;
        v56 = result;
        v57 = v48;
        v58 = v52;
        do
        {
          if (v58)
          {
            LOBYTE(_S8) = *v58;
            *(float *)&v59 = (float)_S8;
            v60 = *(float *)&v59 - v24;
            LOBYTE(v59) = v58[1];
            v61 = (float)v59 - v24;
            v58 += 2;
            v62 = v26 * v61;
            v63 = (float)(v28 * v61) + (float)(v60 * v27);
            v64 = v29 * v60;
          }
          else
          {
            v64 = 0.0;
            v63 = 0.0;
            v62 = 0.0;
          }
          v65 = *v55++;
          v66 = v25 * (float)((float)v65 - v23);
          v67 = v62 + v66;
          v68 = (float)(v62 + v66) <= 8191.0;
          v69 = 8191.0;
          if (v68)
          {
            v69 = v67;
            if (v67 < 0.0)
              v69 = 0.0;
          }
          v70 = v63 + v66;
          v68 = (float)(v63 + v66) <= 8191.0;
          v71 = 8191.0;
          if (v68)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = v64 + v66;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          if (v57)
          {
            v75 = *v57++;
            v74 = v75;
          }
          else
          {
            v74 = 0;
          }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          v83 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v38 + 2 * v83);
          __asm { FCVT            S10, H10 }
          v87 = (float)((float)((float)(v43 * _S9) + (float)(v42 * _S8)) + (float)(v44 * _S10))
              + (float)(v45 * fmaxf(_S8, fmaxf(_S9, _S10)));
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(v88));
          __asm { FCVT            S11, H11 }
          v91 = _S8 * _S11;
          _S9 = _S9 * _S11;
          _S10 = _S10 * _S11;
          v94 = (float)((float)(v31 * _S9) + (float)(v91 * v30)) + (float)(_S10 * v32);
          v95 = (float)((float)(v34 * _S9) + (float)(v91 * v33)) + (float)(_S10 * v35);
          _S8 = (float)((float)(v37 * _S9) + (float)(v91 * v36)) + (float)(_S10 * v41);
          LOWORD(_S9) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S8) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          *(_DWORD *)v56 = _S9;
          *((_DWORD *)v56 + 1) = _S10;
          if (v57)
            v99 = (float)v74 * 0.0039216;
          else
            v99 = 1.0;
          *((_DWORD *)v56 + 2) = _S8;
          *((float *)v56 + 3) = v99;
          v56 += 16;
          --v54;
        }
        while (v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unsigned int v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  float v81;
  float v82;
  float v86;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *(_QWORD *)(result + 36);
    v42 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 16 * *((_QWORD *)result + 14);
    v43 = v15[2];
    if (v43)
      result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    else
      result = 0;
    v46 = v15;
    v45 = *v15;
    v44 = v46[1];
    if (v44)
      v47 = (_BYTE *)(v44 + v18 * v12 + v41);
    else
      v47 = 0;
    v48 = (unsigned __int8 *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        v49 = v11;
        v50 = v48;
        v51 = v42;
        v52 = result;
        v53 = v47;
        do
        {
          if (v53)
          {
            LOBYTE(_S28) = *v53;
            *(float *)&v54 = (float)_S28;
            v55 = *(float *)&v54 - v24;
            LOBYTE(v54) = v53[1];
            v56 = (float)v54 - v24;
            v53 += 2;
            v57 = v26 * v56;
            v58 = (float)(v28 * v56) + (float)(v55 * v27);
            v59 = v29 * v55;
          }
          else
          {
            v59 = 0.0;
            v58 = 0.0;
            v57 = 0.0;
          }
          v60 = *v50++;
          v61 = v25 * (float)((float)v60 - v23);
          v62 = v57 + v61;
          v63 = (float)(v57 + v61) <= 8191.0;
          v64 = 8191.0;
          if (v63)
          {
            v64 = v62;
            if (v62 < 0.0)
              v64 = 0.0;
          }
          v65 = v58 + v61;
          v63 = (float)(v58 + v61) <= 8191.0;
          v66 = 8191.0;
          if (v63)
          {
            v66 = v65;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          v67 = v59 + v61;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          if (v52)
          {
            v70 = *v52++;
            v69 = v70;
          }
          else
          {
            v69 = 0;
          }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v81 = (float)((float)(v31 * _S30) + (float)(_S28 * v30)) + (float)(_S29 * v32);
          v82 = (float)((float)(v34 * _S30) + (float)(_S28 * v33)) + (float)(_S29 * v35);
          _S28 = (float)((float)(v37 * _S30) + (float)(_S28 * v36)) + (float)(_S29 * v38);
          LOWORD(_S29) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          LOWORD(_S28) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          *(_DWORD *)v51 = _S29;
          *(_DWORD *)(v51 + 4) = _S30;
          if (v52)
            v86 = (float)v69 * 0.0039216;
          else
            v86 = 1.0;
          *(_DWORD *)(v51 + 8) = _S28;
          *(float *)(v51 + 12) = v86;
          v51 += 16;
          --v49;
        }
        while (v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  float *v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  float v54;

  v7 = *(_QWORD *)(result + 28);
  v8 = *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v18 = *v16;
    v19 = v16[1];
    v20 = v16[2];
    v21 = **((_QWORD **)result + 17);
    *(float *)&v22 = (float)*(unsigned int *)(v15 + 128);
    v23 = 1.0 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v15 + 142);
    v25 = (float)LODWORD(a5);
    v26 = v23 * *(float *)v15;
    v27 = v23 * *(float *)(v15 + 8);
    v28 = v23 * *(float *)(v15 + 16);
    v29 = v23 * *(float *)(v15 + 20);
    v30 = v23 * *(float *)(v15 + 28);
    v31 = *((_QWORD *)result + 14);
    v32 = (_QWORD *)*((_QWORD *)result + 16);
    v33 = *((_QWORD *)result + 13) * a2 / v8 + *((_QWORD *)result + 15);
    v34 = *(_QWORD *)(result + 36);
    v35 = *v32 + v33 * v21 + 16 * v31;
    v36 = v17[2];
    if (v36)
      v37 = (unsigned __int8 *)(v36 + v20 * v13 + v34);
    else
      v37 = 0;
    v39 = *v17;
    v38 = v17[1];
    v40 = (_BYTE *)(v38 + v19 * v13 + v34);
    if (!v38)
      v40 = 0;
    result = (unsigned __int8 *)(v39 + v18 * v13 + v34);
    while (!v12)
    {
LABEL_19:
      result += v18;
      v40 += v19;
      v37 += v20;
      v35 += v21;
      if (++v11 == v14)
        return result;
    }
    v41 = v12;
    v42 = result;
    v43 = (float *)v35;
    v44 = v37;
    v45 = v40;
    while (1)
    {
      if (v45)
      {
        LOBYTE(v5) = *v45;
        v46 = (float)LODWORD(v5) - v25;
        LOBYTE(v6) = v45[1];
        v47 = (float)LODWORD(v6) - v25;
        v45 += 2;
        v48 = v27 * v47;
        v49 = (float)(v29 * v47) + (float)(v46 * v28);
        v50 = v30 * v46;
        if (!v44)
          goto LABEL_14;
      }
      else
      {
        v50 = 0.0;
        v49 = 0.0;
        v48 = 0.0;
        if (!v44)
        {
LABEL_14:
          v51 = 0;
          goto LABEL_15;
        }
      }
      v52 = *v44++;
      v51 = v52;
LABEL_15:
      v53 = *v42++;
      v54 = v26 * (float)((float)v53 - v24);
      v5 = v50 + v54;
      *v43 = v48 + v54;
      v43[1] = v49 + v54;
      if (v44)
        v6 = (float)v51 * 0.0039216;
      else
        v6 = 1.0;
      v43[2] = v5;
      v43[3] = v6;
      v43 += 4;
      if (!--v41)
        goto LABEL_19;
    }
  }
  return result;
}

uint64_t jpeg_predecompress(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  LODWORD(result) = marker_detect(a1, a2, (_DWORD *)&v10 + 1, &v10, a5, a6);
  if (a3 && SHIDWORD(v10) < *a3)
    *a3 = HIDWORD(v10);
  if (a4 && (int)v10 < *a4)
    *a4 = v10;
  if ((_DWORD)result == -12904 || (_DWORD)result == 0)
    return result;
  else
    return 4294954387;
}

uint64_t jpeg_decompress(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, int a4, int a5, int a6)
{
  void *BaseAddress;
  size_t BytesPerRow;
  size_t v14;
  size_t v15;
  char v16;
  uint64_t PixelFormatType;
  int v18;
  uint64_t result;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t i;
  int v25;
  int v26;
  size_t extraRowsOnBottom;
  _OWORD v28[15];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  v14 = BytesPerRow;
  if (a6 == 2)
    v15 = BytesPerRow;
  else
    v15 = 0;
  v16 = (a6 - 1) < 2;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  extraRowsOnBottom = 0;
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, 0, 0, &extraRowsOnBottom);
  v18 = *(__int16 *)(a1 + 4096);
  result = 4294954394;
  if (v18 > 32)
  {
    if (v18 == 34)
    {
      v25 = a4;
      v26 = a5;
      v21 = 16;
      v20 = 16;
    }
    else
    {
      if (v18 != 33)
        return result;
      v25 = a4;
      v26 = a5;
      v20 = 8;
      v21 = 16;
    }
  }
  else if (v18 == 17)
  {
    v25 = a4;
    v26 = a5;
    v21 = 8;
    v20 = 8;
  }
  else
  {
    if (v18 != 18)
      return result;
    v25 = a4;
    v26 = a5;
    v20 = 16;
    v21 = 8;
  }
  result = GetConversionRoutine(a1, (uint64_t (**)(uint64_t, uint64_t *, uint64_t))(a1 + 3192), a1 + 3200, (uint64_t)BaseAddress + v15, v14 << v16, *(__int16 *)(a1 + 3274), (unsigned __int8 *)(a1 + 3405), *(_DWORD *)(a1 + 3276), PixelFormatType, 1);
  if (!(_DWORD)result)
  {
    v22 = (v26 + v20 - 1) & -v20;
    jpegPlanarOutput_setup(PixelFormatType, v21, v20, pixelBuffer, v28);
    if (v22 < 1)
    {
      return 0;
    }
    else
    {
      LOWORD(v23) = 0;
      while (!getyuvMB(a1, a2, a1 + 3176, (uint64_t)v28, PixelFormatType, (__int16)(((v25 + v21 - 1) & -v21) / v21)))
      {
        for (i = 0; i != 15; i += 5)
          *(int64x2_t *)((char *)&v28[i] + 8) = vdupq_n_s64(*((_QWORD *)&v28[i] + 1) + *((_QWORD *)&v28[i + 2] + 1));
        v23 = (__int16)(v23 + v20);
        if (v23 >= v22)
          return 0;
      }
      return 4294954387;
    }
  }
  return result;
}

void jpegPlanarOutput_setup(signed int a1, unint64_t a2, uint64_t a3, CVPixelBufferRef pixelBuffer, _OWORD *a5)
{
  size_t PlaneCount;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  size_t HeightOfPlane;
  int v12;
  uint64_t v13;
  const __CFDictionary *v14;
  size_t v15;
  uint64_t v16;
  int64x2_t *v17;
  char v18;
  char v19;
  const __CFArray *Value;
  void *key;
  uint64_t v22;
  size_t extraRowsOnBottom;

  extraRowsOnBottom = 0;
  *a5 = 0u;
  a5[1] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[6] = 0u;
  a5[7] = 0u;
  a5[8] = 0u;
  a5[9] = 0u;
  a5[10] = 0u;
  a5[11] = 0u;
  a5[12] = 0u;
  a5[13] = 0u;
  a5[14] = 0u;
  if (CVPixelBufferIsPlanar(pixelBuffer))
  {
    PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
  }
  else
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
    HeightOfPlane = CVPixelBufferGetHeight(pixelBuffer);
    PlaneCount = 1;
  }
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, 0, 0, &extraRowsOnBottom);
  if (a1 <= 1278555700)
  {
    if (a1 == 32)
    {
LABEL_12:
      v13 = 4 * a2;
LABEL_14:
      a2 = v13;
      goto LABEL_15;
    }
    if (a1 != 846624121)
    {
      v12 = 1111970369;
      goto LABEL_11;
    }
LABEL_13:
    v13 = 2 * a2;
    goto LABEL_14;
  }
  if (a1 == 1278555701 || a1 == 2037741171)
    goto LABEL_13;
  v12 = 1983131704;
LABEL_11:
  if (a1 == v12)
    goto LABEL_12;
LABEL_15:
  v14 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
  v15 = 0;
  key = (void *)*MEMORY[0x1E0CA91B0];
  if (PlaneCount <= 1)
    v16 = 1;
  else
    v16 = PlaneCount;
  v22 = v16;
  v17 = (int64x2_t *)((char *)a5 + 40);
  do
  {
    v18 = a1 == 2033463856;
    v19 = v15 != 0;
    if (!v15)
      v18 = 0;
    v17[-3].i64[1] = (uint64_t)BaseAddressOfPlane;
    v17[-1].i64[1] = BytesPerRowOfPlane;
    v17->i64[0] = (BytesPerRowOfPlane * a3) >> v19;
    v17->i64[1] = a2 >> v18;
    if (CVPixelBufferIsPlanar(pixelBuffer))
    {
      Value = (const __CFArray *)CFDictionaryGetValue(v14, key);
      CFArrayGetValueAtIndex(Value, v15);
      FigCFDictionaryGetInt32IfPresent();
    }
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    v17[1].i64[0] = 0;
    v17[1].i64[1] = (8 * BytesPerRowOfPlane) >> v19;
    v17[-2] = vdupq_n_s64((unint64_t)BaseAddressOfPlane);
    v17[-1].i64[0] = (uint64_t)&BaseAddressOfPlane[((extraRowsOnBottom >> v19) + HeightOfPlane) * BytesPerRowOfPlane];
    v17[2].i8[0] = v15++ != 0;
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v15);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v15);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v15);
    v17 += 5;
  }
  while (v22 != v15);
  if (v14)
    CFRelease(v14);
}

uint64_t jpeg_decompressProgressive(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, int a4, int a5)
{
  char *BaseAddress;
  size_t BytesPerRow;
  uint64_t PixelFormatType;
  size_t Height;
  int v13;
  __int16 v14;
  int v15;
  int v16;
  int ConversionRoutine;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  int v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  size_t extraRowsOnBottom;
  _OWORD v46[15];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  extraRowsOnBottom = 0;
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, 0, 0, &extraRowsOnBottom);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  *(_QWORD *)(a1 + 5984) = &BaseAddress[(extraRowsOnBottom + Height) * BytesPerRow];
  v13 = *(__int16 *)(a1 + 4096);
  v14 = -12902;
  if (v13 > 32)
  {
    if (v13 == 34)
    {
      v16 = 16;
      v15 = 16;
    }
    else
    {
      if (v13 != 33)
        goto LABEL_44;
      v15 = 8;
      v16 = 16;
    }
  }
  else if (v13 == 17)
  {
    v16 = 8;
    v15 = 8;
  }
  else
  {
    if (v13 != 18)
      goto LABEL_44;
    v15 = 16;
    v16 = 8;
  }
  ConversionRoutine = GetConversionRoutine(a1, (uint64_t (**)(uint64_t, uint64_t *, uint64_t))(a1 + 3192), a1 + 3200, (uint64_t)BaseAddress, BytesPerRow, *(__int16 *)(a1 + 3274), (unsigned __int8 *)(a1 + 3405), *(_DWORD *)(a1 + 3276), PixelFormatType, 1);
  v14 = ConversionRoutine;
  if (ConversionRoutine)
    return v14;
  v18 = (a4 + v16 - 1) & -v16;
  v19 = (a5 + v15 - 1) & -v15;
  jpegPlanarOutput_setup(PixelFormatType, v16, v15, pixelBuffer, v46);
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_QWORD *)(a1 + 4216) = 0;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_DWORD *)(a1 + 4136) = *(char *)(a1 + 3400);
  *(_DWORD *)(a1 + 4140) = *(char *)(a1 + 3401);
  *(_DWORD *)(a1 + 4144) = *(char *)(a1 + 3402);
  *(_DWORD *)(a1 + 4148) = *(char *)(a1 + 3405);
  *(_DWORD *)(a1 + 4152) = *(char *)(a1 + 3406);
  *(_DWORD *)(a1 + 4156) = *(char *)(a1 + 3407);
  *(_DWORD *)(a1 + 4384) = (v16 + v18 - 1) / v16;
  *(_DWORD *)(a1 + 4388) = (v15 + v19 - 1) / v15;
  if (*(int *)(a1 + 4132) >= 1)
  {
    v20 = 0;
    v21 = v18 | 7;
    if (v18 < 0)
      v21 = (v18 | 7) + 7;
    v22 = v21 >> 3;
    if (v22 >= 0)
      v23 = v22 & 1;
    else
      v23 = -(v22 & 1);
    v24 = v19 | 7;
    if (v19 < 0)
      v24 = (v19 | 7) + 7;
    v25 = v24 >> 3;
    if (v25 >= 0)
      v26 = v25 & 1;
    else
      v26 = -(v25 & 1);
    do
    {
      v27 = a1 + 4 * v20;
      *(_DWORD *)(v27 + 4160) = 0;
      v28 = *(_DWORD *)(v27 + 4148);
      if (v28 >> 4 != 1)
      {
        if (v28 >> 4 != 2)
          goto LABEL_43;
        *(_DWORD *)(v27 + 4160) = v23;
      }
      v29 = a1 + 4 * v20;
      *(_DWORD *)(v29 + 4172) = 0;
      v30 = v28 & 0xF;
      if (v30 != 1)
      {
        if (v30 != 2)
          goto LABEL_43;
        *(_DWORD *)(v29 + 4172) = v26;
      }
      ++v20;
      v31 = *(_DWORD *)(a1 + 4132);
    }
    while (v31 > v20);
    if (v31 >= 1)
    {
      v32 = 0;
      do
      {
        v33 = v32;
        v34 = *(unsigned int *)(a1 + 4 * v32 + 4136);
        if ((int)v34 >= 1)
        {
          v35 = v34 * *(int *)(a1 + 4384) * *(int *)(a1 + 4388);
          v36 = (_QWORD *)(a1 + 8 * v33);
          v36[534] = 0;
          v36[525] = 0;
          v36[528] = v35 << 7;
          v37 = malloc_type_calloc(1uLL, v35 << 7, 0x2000F8EBuLL);
          v36[525] = v37;
          if (!v37)
          {
            v14 = -12904;
            goto LABEL_44;
          }
          v36[531] = v37;
          v31 = *(_DWORD *)(a1 + 4132);
        }
        v32 = v33 + 1;
      }
      while (v31 > (__int16)(v33 + 1));
    }
  }
  v14 = consume_progressive_mode_markers(a1, a2);
  if (!v14)
  {
    *(_OWORD *)(a1 + 4360) = *(_OWORD *)(a1 + 3280);
    *(_QWORD *)(a1 + 4376) = *(_QWORD *)(a1 + 3296);
    if (v19 < 1)
    {
LABEL_42:
      v14 = 0;
    }
    else
    {
      LOWORD(v38) = 0;
      while (!getyuvMB(a1, a2, a1 + 3176, (uint64_t)v46, PixelFormatType, (__int16)(v18 / v16)))
      {
        for (i = 0; i != 15; i += 5)
          *(int64x2_t *)((char *)&v46[i] + 8) = vdupq_n_s64(*((_QWORD *)&v46[i] + 1) + *((_QWORD *)&v46[i + 2] + 1));
        v38 = (__int16)(v38 + v15);
        if (v38 >= v19)
          goto LABEL_42;
      }
LABEL_43:
      v14 = -12909;
    }
  }
LABEL_44:
  v40 = 0;
  v41 = a1 + 4200;
  do
  {
    v42 = *(void **)(v41 + v40);
    if (v42)
    {
      free(v42);
      *(_QWORD *)(v41 + v40) = 0;
    }
    v40 += 8;
  }
  while (v40 != 24);
  return v14;
}

intptr_t VTMotionEstimationSessionCompleteFrames(_BYTE *a1)
{
  CFTypeID v2;

  if (a1
    && (v2 = CFGetTypeID(a1),
        MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v2 == sVTMotionEstimationSessionID)&& !a1[16])
  {
    return vtMotionEstimationSessionCompleteFramesInternal((uint64_t)a1);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTMotionEstimationSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  return sVTMotionEstimationSessionID;
}

intptr_t vtMotionEstimationSessionCompleteFramesInternal(uint64_t a1)
{
  CFTypeID v2;
  uint64_t v3;
  intptr_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  NSObject *v8;
  dispatch_time_t v9;

  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v2 != sVTMotionEstimationSessionID)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return 0;
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
    return VTCompressionSessionRemote_CompleteMotionVectors(v3);
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v6)
    return 4294954514;
  result = v6(v5);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 128))
    {
      v7 = 5;
      do
      {
        v8 = *(NSObject **)(a1 + 128);
        v9 = dispatch_time(0, 1000000000 * v7);
        result = dispatch_group_wait(v8, v9);
        v7 *= 2;
      }
      while (result);
      return result;
    }
    return 0;
  }
  return result;
}

void RegisterVTMotionEstimationSession()
{
  sVTMotionEstimationSessionID = _CFRuntimeRegisterClass();
  sVTMotionEstimationSessionPropertyCallbacks = 0;
  *(_QWORD *)algn_1EE285078 = VTMotionEstimationSessionCopySupportedPropertyDictionary;
  qword_1EE285080 = (uint64_t)VTMotionEstimationSessionSetProperty;
  unk_1EE285088 = VTMotionEstimationSessionCopyProperty;
  qword_1EE285090 = (uint64_t)VTMotionEstimationSessionSetProperties;
  unk_1EE285098 = VTMotionEstimationSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTMotionEstimationSessionPropertyCallbacks, (const void *)sVTMotionEstimationSessionID);
}

uint64_t VTMotionEstimationSessionCreate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  const __CFAllocator *v10;
  uint64_t Instance;
  CFTypeID v12;
  const __CFString *Value;
  const __CFString *v14;
  CFTypeID v15;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x1940281CC](&sCreateRegistryOnce, vtCreateMotionEstimationProcessorRegistry);
  if (!a5)
    return FigSignalErrorAt();
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v17 = 4294954392;
    goto LABEL_21;
  }
  if (VTMotionEstimationSession_ShouldUseSeparateProcess_onceToken != -1)
    dispatch_once(&VTMotionEstimationSession_ShouldUseSeparateProcess_onceToken, &__block_literal_global_7);
  if (!VTMotionEstimationSession_ShouldUseSeparateProcess_featureEnabled)
    goto LABEL_11;
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    if (FigServer_IsVideocodecd())
      goto LABEL_11;
  }
  else if (FigServer_IsServerProcess())
  {
    goto LABEL_11;
  }
  if (VTShouldRunVideoEncodersInProcess())
  {
LABEL_11:
    *(_DWORD *)(Instance + 40) = 16;
    *(_BYTE *)(Instance + 16) = 0;
    *(_DWORD *)(Instance + 32) = a3;
    *(_DWORD *)(Instance + 36) = a4;
    *(_WORD *)(Instance + 44) = 0;
    if (a2)
    {
      v12 = CFGetTypeID(a2);
      if (v12 == CFDictionaryGetTypeID())
      {
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetBooleanIfPresent();
        Value = (const __CFString *)FigCFDictionaryGetValue();
        if (Value)
        {
          v14 = Value;
          v15 = CFGetTypeID(Value);
          if (v15 == CFStringGetTypeID())
            *(_QWORD *)(Instance + 24) = CFStringCreateCopy(v10, v14);
        }
      }
    }
    v16 = FigRegistryCopyFilteredItemList();
    if (!(_DWORD)v16)
      v16 = FigSignalErrorAt();
    goto LABEL_19;
  }
  v16 = VTMotionEstimationSessionRemote_Create(Instance, a1, a3, a4, (uint64_t)a2, (uint64_t *)(Instance + 152));
  if ((_DWORD)v16)
  {
LABEL_19:
    v17 = v16;
    goto LABEL_21;
  }
  v17 = 0;
  *a5 = Instance;
  Instance = 0;
LABEL_21:
  if (Instance)
    CFRelease((CFTypeRef)Instance);
  return v17;
}

void vtCreateMotionEstimationProcessorRegistry()
{
  const __CFAllocator *v0;
  CFURLRef v1;
  CFURLRef v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!FigRegistryCreate() && access("/System/Library/Video/Plug-Ins/", 4) != -1)
  {
    v1 = CFURLCreateWithFileSystemPath(v0, CFSTR("/System/Library/Video/Plug-Ins/"), kCFURLPOSIXPathStyle, 1u);
    if (v1)
    {
      v2 = v1;
      if (!FigRegistryAddSearchPathWithOptions())
      {
        v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("CMClassID"), CFSTR("com.apple.videotoolbox.motionestimationprocessor"));
        CFDictionarySetValue(Mutable, CFSTR("CMClassImplementationName"), CFSTR("VTTestMotionEstimationProcessor"));
        CFDictionarySetValue(Mutable, CFSTR("CMFactoryFunction"), CFSTR("VTTestMotionEstimationProcessor_CreateInstance"));
        FigCFDictionarySetInt32();
        v6 = CFDictionaryCreateMutable(v0, 0, v3, v4);
        CFDictionarySetValue(v6, CFSTR("VTIsHardwareAccelerated"), (const void *)*MEMORY[0x1E0C9AE40]);
        CFDictionarySetValue(Mutable, CFSTR("CMMatchingInfo"), v6);
        FigRegistryAddItem();
        if (Mutable)
          CFRelease(Mutable);
      }
      CFRelease(v2);
    }
  }
}

BOOL vtMotionEstimationSessionRegistryFilter(uint64_t a1)
{
  uint64_t Value;

  return !FigRegistryItemCopyDescription()
      && vtDoesKeyMatch(a1, 0, (uint64_t)CFSTR("CMClassImplementationName"), 0)
      && (Value = FigCFDictionaryGetValue()) != 0
      && vtDoesKeyMatch(a1, Value, (uint64_t)CFSTR("VTIsHardwareAccelerated"), *MEMORY[0x1E0C9AE50]);
}

uint64_t VTMotionEstimationSessionCopySourcePixelBufferAttributes(_QWORD *a1, CFDictionaryRef *a2)
{
  CFTypeID v4;
  uint64_t v5;
  const __CFDictionary *v7;
  CFDictionaryRef Copy;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v4 != sVTMotionEstimationSessionID || !a2)
    return FigSignalErrorAt();
  v5 = a1[19];
  if (v5)
    return VTCompressionSessionRemote_CopySourcePixelBufferAttributes(v5);
  MEMORY[0x1940280C4](a1[18]);
  v7 = (const __CFDictionary *)a1[9];
  if (v7)
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7);
  else
    Copy = 0;
  *a2 = Copy;
  MEMORY[0x1940280D0](a1[18]);
  return 0;
}

_QWORD *VTMotionEstimationSessionInvalidate(uint64_t a1)
{
  CFTypeID v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  if (!a1)
    return (_QWORD *)FigSignalErrorAt();
  v2 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v2 != sVTMotionEstimationSessionID)
    return (_QWORD *)FigSignalErrorAt();
  result = *(_QWORD **)(a1 + 152);
  if (result)
  {
    result = VTCompressionSessionRemote_Invalidate(result);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      result = (_QWORD *)CMBaseObjectGetVTable();
      v5 = *(uint64_t (**)(uint64_t))(result[1] + 24);
      if (v5)
        result = (_QWORD *)v5(v4);
    }
  }
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t VTMotionEstimationSessionEstimateMotionVectors(char *cf, void *a2, void *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v11;
  CFTypeID v13;
  CFTypeID v14;
  CFTypeID v15;
  uint64_t v16;
  uint64_t v17;
  __CVBuffer *v18;
  __CVBuffer *v19;
  CVPixelBufferPoolRef *v20;
  uint64_t v21;
  VTPixelTransferSessionRef *v22;
  __CFDictionary *v23;
  const void *v24;
  uint64_t v25;
  CVPixelBufferRef v26;
  CVPixelBufferRef v27;
  uint64_t (*v28)(uint64_t, const void *, CVPixelBufferRef, CVPixelBufferRef, _QWORD, uint64_t);
  uint64_t v29;
  const void *v30;
  const void *v31;
  unsigned int v32;
  CFDictionaryValueCallBacks valueCallBacks;
  CVPixelBufferRef v34;
  CVPixelBufferRef pixelBufferOut;
  __int128 value;
  __int128 v37;
  const void *v38;

  if (a2)
  {
    v11 = *((_QWORD *)cf + 19);
    if (v11)
      return VTCompressionSessionRemote_EstimateMotionVectors(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
    v32 = a4;
    v34 = 0;
    pixelBufferOut = 0;
    value = 0u;
    v37 = 0u;
    v38 = 0;
    v13 = CFGetTypeID(cf);
    MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
    if (v13 == sVTMotionEstimationSessionID
      && !cf[16]
      && *((_QWORD *)cf + 6)
      && (v14 = CFGetTypeID(a2), v14 == CVPixelBufferGetTypeID())
      && a3
      && (v15 = CFGetTypeID(a3), v15 == CVPixelBufferGetTypeID())
      && a6)
    {
      v16 = *((_QWORD *)cf + 18);
      v17 = *((_QWORD *)cf + 17) + 1;
      *((_QWORD *)cf + 17) = v17;
      MEMORY[0x1940280C4](v16);
      if (CVPixelBufferIsCompatibleWithAttributes())
      {
        v18 = (__CVBuffer *)CFRetain(a2);
        pixelBufferOut = v18;
      }
      else
      {
        v18 = 0;
      }
      v31 = (const void *)v17;
      if (CVPixelBufferIsCompatibleWithAttributes())
      {
        v19 = (__CVBuffer *)CFRetain(a3);
        v34 = v19;
        if (v19 && v18)
          goto LABEL_31;
      }
      else
      {
        v19 = 0;
      }
      v20 = (CVPixelBufferPoolRef *)(cf + 88);
      if (*((_QWORD *)cf + 11)
        || (v21 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *((CFDictionaryRef *)cf + 9), (CVPixelBufferPoolRef *)cf + 11), !(_DWORD)v21))
      {
        v22 = (VTPixelTransferSessionRef *)(cf + 96);
        if (*((_QWORD *)cf + 12)
          || (v21 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (VTPixelTransferSessionRef *)cf + 12), !(_DWORD)v21))
        {
          if (v18
            || (v21 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v20, &pixelBufferOut),
                !(_DWORD)v21))
          {
            if (v19
              || (v21 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v20, &v34),
                  !(_DWORD)v21))
            {
              if (pixelBufferOut
                || (v21 = VTPixelTransferSessionTransferImage(*v22, (CVPixelBufferRef)a2, 0), !(_DWORD)v21))
              {
                if (v34 || (v21 = VTPixelTransferSessionTransferImage(*v22, (CVPixelBufferRef)a3, 0), !(_DWORD)v21))
                {
LABEL_31:
                  v23 = (__CFDictionary *)*((_QWORD *)cf + 8);
                  if (!v23)
                  {
                    valueCallBacks.version = 0;
                    valueCallBacks.retain = (CFDictionaryRetainCallBack)vtCloneFrameTrackingInfo;
                    valueCallBacks.copyDescription = 0;
                    valueCallBacks.equal = 0;
                    valueCallBacks.release = (CFDictionaryReleaseCallBack)vtFreeFrameTrackingInfo;
                    v23 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &valueCallBacks);
                    *((_QWORD *)cf + 8) = v23;
                  }
                  v24 = (const void *)*((_QWORD *)cf + 17);
                  *((_QWORD *)&v37 + 1) = a5;
                  v38 = a6;
                  *(_QWORD *)&value = v24;
                  *((_QWORD *)&value + 1) = pixelBufferOut;
                  *(_QWORD *)&v37 = v34;
                  CFDictionarySetValue(v23, v24, &value);
                  MEMORY[0x1940280D0](*((_QWORD *)cf + 18));
                  dispatch_group_enter(*((dispatch_group_t *)cf + 16));
                  v25 = *((_QWORD *)cf + 6);
                  v27 = v34;
                  v26 = pixelBufferOut;
                  v28 = *(uint64_t (**)(uint64_t, const void *, CVPixelBufferRef, CVPixelBufferRef, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                  if (v28)
                    return v28(v25, v31, v26, v27, v32, a5);
                  else
                    return 4294954514;
                }
              }
            }
          }
        }
      }
      v29 = v21;
      FigSignalErrorAt();
      v30 = v31;
      MEMORY[0x1940280D0](*((_QWORD *)cf + 18));
    }
    else
    {
      v29 = FigSignalErrorAt();
      v30 = 0;
    }
    VTMotionEstimationProcessorSessionEmitMotionVectors((uint64_t)(cf + 64), v30);
    if (pixelBufferOut)
      CFRelease(pixelBufferOut);
    if (v34)
      CFRelease(v34);
    return v29;
  }
  return FigSignalErrorAt();
}

uint64_t VTMotionEstimationProcessorSessionSetSourcePixelBufferAttributes(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;

  if (a1 && cf && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    MEMORY[0x1940280C4](a1[10]);
    if (!FigCFEqual())
    {
      v5 = (const void *)a1[1];
      a1[1] = cf;
      CFRetain(cf);
      if (v5)
        CFRelease(v5);
      v6 = (const void *)a1[3];
      if (v6)
      {
        CFRelease(v6);
        a1[3] = 0;
      }
    }
    MEMORY[0x1940280D0](a1[10]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t VTMotionEstimationProcessorSessionSetMotionVectorPixelBufferAttributes(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;

  if (a1 && cf && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 80));
    if (!FigCFEqual())
    {
      v5 = *(const void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = cf;
      CFRetain(cf);
      if (v5)
        CFRelease(v5);
      v6 = *(const void **)(a1 + 56);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 56) = 0;
      }
      if (CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a1 + 48), (CFDictionaryRef)cf, (CVPixelBufferPoolRef *)(a1 + 56)))
      {
        FigSignalErrorAt();
      }
    }
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 80));
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer(uint64_t a1, CVPixelBufferRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 80));
  v4 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CVPixelBufferPoolRef *)(a1 + 56), &pixelBufferOut);
  if ((_DWORD)v4)
  {
    v5 = v4;
    FigSignalErrorAt();
  }
  else if (pixelBufferOut)
  {
    v5 = 0;
    *a2 = pixelBufferOut;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 80));
  return v5;
}

uint64_t VTMotionEstimationProcessorSessionEmitMotionVectors(uint64_t a1, const void *a2)
{
  _QWORD *Value;
  uint64_t v5;
  void *v6;
  const void *v7;
  const void *v8;

  if (!a1)
    return FigSignalErrorAt();
  if (*(_QWORD *)a1)
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 80));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
    v5 = MEMORY[0x1940280D0](*(_QWORD *)(a1 + 80));
    if (Value)
    {
      v6 = (void *)MEMORY[0x194028B74](v5);
      (*(void (**)(void))(Value[4] + 16))();
      objc_autoreleasePoolPop(v6);
      v7 = (const void *)Value[1];
      if (v7)
        CFRelease(v7);
      v8 = (const void *)Value[2];
      if (v8)
        CFRelease(v8);
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 80));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)a1, a2);
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 80));
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  return 0;
}

uint64_t VTMotionEstimationProcessorGetClassID()
{
  MEMORY[0x1940281CC](&VTMotionEstimationProcessorGetClassID_sRegisterVTMotionEstimationProcessorTypeOnce, RegisterVTMotionEstimationProcessorType);
  return sVTMotionEstimationProcessorClassID;
}

uint64_t RegisterVTMotionEstimationProcessorType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t VTMotionEstimationProcessorGetTypeID()
{
  MEMORY[0x1940281CC](&VTMotionEstimationProcessorGetClassID_sRegisterVTMotionEstimationProcessorTypeOnce, RegisterVTMotionEstimationProcessorType);
  return CMBaseClassGetCFTypeID();
}

uint64_t VTMotionEstimationSessionCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  CFTypeID v4;
  uint64_t v5;
  CFTypeRef v7;
  CFTypeRef *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, CFTypeRef *);
  int v12;
  uint64_t v13;
  CFTypeRef cf;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v15[0] = 0;
  v15[1] = 0;
  if (!a1)
    goto LABEL_23;
  v4 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v4 != sVTMotionEstimationSessionID || *(_BYTE *)(a1 + 16) || !a2)
    goto LABEL_23;
  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
    return VTCompressionSessionRemote_CopySupportedPropertyDictionary(v5);
  MEMORY[0x1940281CC](&sCreateSupportedPropertyDictionaryOnce_0, vtMotionEstimationSessionCreateSupportedPropertyDictionary);
  if (!sVTMotionEstimationSessionSupportedPropertyDictionary)
    goto LABEL_23;
  v8 = (CFTypeRef *)(a1 + 56);
  v7 = *(CFTypeRef *)(a1 + 56);
  if (!v7)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v11 && !v11(v10, &cf))
    {
      v12 = sVTMotionEstimationSessionSupportedPropertyDictionary;
      if (sVTMotionEstimationSessionSupportedPropertyDictionary)
      {
        v15[0] = sVTMotionEstimationSessionSupportedPropertyDictionary;
        v12 = 1;
      }
      if (cf)
        v15[v12] = cf;
      v13 = FigCFCreateCombinedDictionary();
      if ((_DWORD)v13)
      {
        v9 = v13;
        FigSignalErrorAt();
        goto LABEL_11;
      }
      v7 = *v8;
      if (!*v8)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_23:
    v9 = FigSignalErrorAt();
    goto LABEL_11;
  }
LABEL_9:
  v7 = CFRetain(v7);
LABEL_10:
  v9 = 0;
  *a2 = v7;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t VTMotionEstimationSessionSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  CFTypeID v6;
  uint64_t v7;
  CFTypeID v9;
  uint64_t v10;
  void (*v11)(uint64_t, const void *, const __CFNumber *);

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v6 != sVTMotionEstimationSessionID || *(_BYTE *)(a1 + 16) || !a2)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(a1 + 152);
  if (v7)
    return VTCompressionSessionRemote_SetProperty(v7, a2, (uint64_t)a3);
  MEMORY[0x1940281CC](&sCreateSupportedPropertyDictionaryOnce_0, vtMotionEstimationSessionCreateSupportedPropertyDictionary);
  if (!sVTMotionEstimationSessionSupportedPropertyDictionary)
    return FigSignalErrorAt();
  if (CFDictionaryContainsKey((CFDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, a2))
  {
    if (!CFEqual(a2, CFSTR("ClientPID")))
      return 4294954396;
    if (!a3 || (v9 = CFGetTypeID(a3), v9 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 160));
      goto LABEL_13;
    }
    return FigSignalErrorAt();
  }
LABEL_13:
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    v11 = *(void (**)(uint64_t, const void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
    if (v11)
      v11(v10, a2, a3);
  }
  return 0;
}

uint64_t VTMotionEstimationSessionCopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, _QWORD *a4)
{
  CFTypeID v8;
  uint64_t v9;
  uint64_t result;
  const void *v11;
  int v12;
  const __CFAllocator *v13;
  const void *v14;
  void *Copy;
  void *v16;
  void **v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, const __CFAllocator *, _QWORD *);

  if (!a1)
    return FigSignalErrorAt();
  v8 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v8 != sVTMotionEstimationSessionID || *(_BYTE *)(a1 + 16) || !a2 || !a4)
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(a1 + 152);
  if (v9)
    return VTCompressionSessionRemote_CopyProperty(v9);
  if (FigCFEqual())
  {
    v12 = *(_DWORD *)(a1 + 40);
    v11 = (const void *)(a1 + 40);
    if (v12)
    {
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v14 = v11;
LABEL_11:
      Copy = CFNumberCreate(v13, kCFNumberSInt32Type, v14);
LABEL_12:
      v16 = Copy;
      result = 0;
LABEL_21:
      *a4 = v16;
      return result;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    result = 0;
    if (*(_BYTE *)(a1 + 44))
      v17 = (void **)MEMORY[0x1E0C9AE50];
    else
      v17 = (void **)MEMORY[0x1E0C9AE40];
    v16 = *v17;
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    v18 = *(const __CFString **)(a1 + 24);
    if (v18)
    {
      Copy = (void *)CFStringCreateCopy(a3, v18);
      goto LABEL_12;
    }
LABEL_25:
    result = 0;
    *a4 = 0;
    return result;
  }
  if (FigCFEqual())
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v14 = (const void *)(a1 + 160);
      goto LABEL_11;
    }
    goto LABEL_25;
  }
  v19 = *(_QWORD *)(a1 + 48);
  if (!v19)
    return 4294954396;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v20)
    return v20(v19, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t VTMotionEstimationSessionSetProperties(uint64_t a1, const void *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a1;
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v4 != sVTMotionEstimationSessionID)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(a2);
  if (v5 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
    return VTCompressionSessionRemote_SetProperties(v6, (CFDictionaryRef)a2);
  v9 = 0;
  CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)vtMotionEstimationSessionSetOneProperty, &v8);
  return v9;
}

uint64_t VTMotionEstimationSessionCopySerializableProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v5;
  uint64_t v6;

  if (a1
    && (v5 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v5 == sVTMotionEstimationSessionID)&& !*(_BYTE *)(a1 + 16)&& a3)
  {
    v6 = *(_QWORD *)(a1 + 152);
    if (v6)
      return VTCompressionSessionRemote_CopySerializableProperties(v6);
  }
  else
  {
    FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

double vtMotionEstimationSessionInit(uint64_t a1)
{
  double result;

  if (a1)
  {
    *(_QWORD *)(a1 + 160) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t vtMotionEstimationSessionFinalize(uint64_t a1)
{
  CFTypeID v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  NSObject *v13;
  const void *v14;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x1940281CC](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v2 != sVTMotionEstimationSessionID)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v4)
      v4(v3);
  }
  vtMotionEstimationSessionCompleteFramesInternal(a1);
  VTMotionEstimationSessionInvalidate(a1);
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v7 = *(const void **)(a1 + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v8 = *(const void **)(a1 + 72);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v9 = *(const void **)(a1 + 88);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v10 = *(const void **)(a1 + 96);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v11 = *(const void **)(a1 + 104);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v12 = *(const void **)(a1 + 120);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v13 = *(NSObject **)(a1 + 128);
  if (v13)
  {
    dispatch_release(v13);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v14 = *(const void **)(a1 + 152);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 152) = 0;
  }
  result = *(_QWORD *)(a1 + 144);
  if (result)
    result = FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t vtMotionEstimationSessionCopyDebugDesc()
{
  return 0;
}

void vtMotionEstimationSessionCreateSupportedPropertyDictionary()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  sVTMotionEstimationSessionSupportedPropertyDictionary = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, v2);
  CFDictionarySetValue(Mutable, CFSTR("ReadWriteStatus"), CFSTR("ReadOnly"));
  CFDictionarySetValue(v4, CFSTR("ReadWriteStatus"), CFSTR("ReadWrite"));
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, CFSTR("MotionVectorSize"), Mutable);
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, CFSTR("TrueMotion"), Mutable);
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, CFSTR("Label"), Mutable);
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, CFSTR("ClientPID"), v4);
  if (Mutable)
    CFRelease(Mutable);
  if (v4)
    CFRelease(v4);
}

uint64_t vtMotionEstimationSessionSetOneProperty(const void *a1, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result;

  result = VTMotionEstimationSessionSetProperty(*(_QWORD *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

BOOL vtDoesKeyMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FigCFDictionaryGetValueIfPresent()
      || !a4
      || !FigCFDictionaryGetValueIfPresent()
      || FigCFEqual() != 0;
}

_QWORD *vtCloneFrameTrackingInfo(const __CFAllocator *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  const __CFDictionary *v6;

  if (!a2)
    return 0;
  v3 = CFAllocatorAllocate(a1, 40, 0);
  v5 = *a2;
  v4 = a2[1];
  v3[4] = *((_QWORD *)a2 + 4);
  *(_OWORD *)v3 = v5;
  *((_OWORD *)v3 + 1) = v4;
  v3[4] = _Block_copy(*((const void **)a2 + 4));
  v6 = (const __CFDictionary *)*((_QWORD *)a2 + 3);
  if (v6)
    v3[3] = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
  return v3;
}

void vtFreeFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  const void *v4;

  if (a2)
  {
    _Block_release(*(const void **)(a2 + 32));
    v4 = *(const void **)(a2 + 24);
    if (v4)
      CFRelease(v4);
    CFAllocatorDeallocate(a1, (void *)a2);
  }
}

CFTypeRef VTMotionEstimationProcessorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTMotionEstimationProcessor]"));
}

uint64_t init_decode_table(_WORD *a1, int a2, int a3, uint64_t a4, uint64_t a5, __int16 a6, __int16 a7, _WORD *a8, _WORD *a9)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  char v18;
  _WORD *v19;
  int v20;
  char v21;
  __int16 v22;
  _BOOL4 v23;
  int v24;
  __int16 v25;
  int v26;
  _BOOL4 v27;
  unsigned int v28;
  int v29;
  char v30;
  __int16 v31;
  int v32;
  char v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  char v38;
  int v39;
  _WORD *v40;

  v10 = 1 << a7;
  v11 = (1 << a7) - 1;
  v12 = (unsigned __int16)*a9;
  if (a2 > a3)
  {
    v13 = 0;
LABEL_3:
    *a9 = v12;
    if (((unsigned __int16)v10 & (unsigned __int16)v12) != 0)
    {
      v14 = 0;
      v15 = 1 << a7;
      do
      {
        v16 = (_DWORD)v15 << 16;
        LODWORD(v15) = (__int16)v15 >> 1;
        ++v14;
      }
      while (((unsigned __int16)v12 & (v16 >> 17)) != 0);
      if (!a8)
      {
LABEL_8:
        if (v13 < (int)v10)
          memset_pattern16(a1, &unk_1928E14F0, 2 * (v11 - v13) + 2);
        return a6;
      }
    }
    else
    {
      v14 = 0;
      if (!a8)
        goto LABEL_8;
    }
    *a8 = v14;
    goto LABEL_8;
  }
  v18 = 0;
  v13 = 0;
  v19 = &a1[v10];
  v40 = a8;
  while (1)
  {
    v20 = *(unsigned __int8 *)(a4 + (__int16)a2);
    if (*(_BYTE *)(a4 + (__int16)a2))
      break;
LABEL_41:
    v12 *= 2;
    a2 = (__int16)(a2 + 1);
    a8 = v40;
    if (a2 > a3)
      goto LABEL_3;
  }
  v21 = a3 - a2;
  v22 = a7 - (a3 - a2);
  while (1)
  {
    v23 = a3 == 12;
    v24 = *(char *)(a5 + a6);
    v25 = *(unsigned __int8 *)(a5 + a6);
    v26 = v24 & 0xF;
    if ((v24 & 0xF) == 0)
      v23 = 0;
    if (v26 >= 8)
      v23 = 0;
    if (v24 < 0)
      v23 = 0;
    v27 = 13 - (__int16)a2 > v26 && v23;
    if (v27)
    {
      v28 = (v13 >> (12 - (v26 + v22))) & ~(-1 << v26);
      v29 = 1 << (v26 - 1);
      v30 = v28 >= (unsigned __int16)v29 ? 0 : 2 * v29 - 1;
      v31 = (16 * v25) & 0xF00 | (((_WORD)v26 + v22) << 11) | (v28 - v30) | 0x8000;
      v18 = a7 - v21;
    }
    else
    {
      v31 = ((a7 - ((_WORD)a3 - (_WORD)a2)) << 8) | v25;
    }
    if (a1 >= v19)
      return 4294954387;
    *a1++ = v31;
    v32 = ((unsigned __int16)++v12 << v21) & v11;
    if (++v13 < v32)
    {
      v33 = a7 - (v26 + v18);
      v34 = ~(-1 << v26);
      v35 = (0x8000 << v26) >> 16;
      v36 = (0x7FFFFFFF << v26) | 1;
      while (1)
      {
        if (v27)
        {
          v37 = (v13 >> v33) & v34;
          if (v35 <= v37)
            v38 = 0;
          else
            v38 = v36;
          v31 = v31 & 0xFF00 | (v38 + v37);
        }
        if (a1 >= v19)
          return 4294954387;
        *a1++ = v31;
        if (v32 == ++v13)
        {
          v13 = ((unsigned __int16)v12 << v21) & v11;
          break;
        }
      }
    }
    ++a6;
    v39 = (__int16)v20--;
    if (v39 <= 1)
      goto LABEL_41;
  }
}

uint64_t MakeDecodeTable(_WORD *a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  uint64_t v7;
  __int16 v8;
  int v10;
  _WORD *v11;
  __int16 inited;
  __int16 v13;
  __int16 v14;
  int v15;
  _WORD *v16;
  __int16 v19;

  v19 = 0;
  a4[3] = 1;
  *a4 = (__int16)a1;
  v7 = 16;
  do
  {
    v8 = v7 - 1;
    if (v7 < 0)
      break;
  }
  while (!*(unsigned __int8 *)(a2 + v7--));
  v10 = (__int16)(v8 + 1);
  if (v10 < 1)
    return -12909;
  if (v10 < (int)a1)
  {
    *a4 = v8 + 1;
    LOWORD(a1) = v8 + 1;
  }
  v11 = (_WORD *)*((_QWORD *)a4 + 1);
  if (!v11)
  {
    a1 = malloc_type_malloc(2 * (1 << (char)a1), 0x1000040BDFB0063uLL);
    *((_QWORD *)a4 + 1) = a1;
    if (!a1)
      return -12904;
    v11 = a1;
    LOWORD(a1) = *a4;
  }
  inited = init_decode_table(v11, 1, (__int16)a1, a2, a3, 0, (__int16)a1, a4 + 2, &v19);
  if ((inited & 0x8000) == 0)
  {
    v13 = inited;
    v14 = v10 - a4[2];
    v15 = *a4;
    if (v15 >= v10)
      v14 = 1;
    a4[1] = v14;
    v16 = (_WORD *)*((_QWORD *)a4 + 2);
    if (v16)
    {
LABEL_16:
      if (v10 <= (__int16)v15)
      {
        *(_DWORD *)v16 = -2147450880;
      }
      else if ((init_decode_table(v16, (__int16)(v15 + 1), v10, a2, a3, v13, a4[1], 0, &v19) & 0x80000000) != 0)
      {
        return -12909;
      }
      return 0;
    }
    v16 = malloc_type_malloc(2 * (1 << v14), 0x1000040BDFB0063uLL);
    *((_QWORD *)a4 + 2) = v16;
    if (v16)
    {
      LOWORD(v15) = *a4;
      goto LABEL_16;
    }
    free(*((void **)a4 + 1));
    *((_QWORD *)a4 + 1) = 0;
    return -12904;
  }
  return -12909;
}

uint64_t InitDecodeTables(__int16 *a1)
{
  uint64_t v2;
  uint64_t DecodeTable;

  v2 = (uint64_t)(a1 + 24);
  DecodeTable = MakeDecodeTable((_WORD *)0xC, (uint64_t)&unk_1928E1378, (uint64_t)&byte_1928E139A, a1 + 24);
  if ((_DWORD)DecodeTable
    || (DecodeTable = MakeDecodeTable((_WORD *)0xC, (uint64_t)&unk_1928E1389, (uint64_t)&byte_1928E143C, a1 + 36),
        (_DWORD)DecodeTable)
    || (DecodeTable = MakeDecodeTable((_WORD *)5, (uint64_t)&unk_1928E1356, (uint64_t)&unk_1928E134A, a1),
        (_DWORD)DecodeTable)
    || (DecodeTable = MakeDecodeTable((_WORD *)5, (uint64_t)&unk_1928E1367, (uint64_t)&unk_1928E134A, a1 + 12),
        (_DWORD)DecodeTable))
  {
    DisposeDecodeTable(v2);
    DisposeDecodeTable((uint64_t)(a1 + 36));
    DisposeDecodeTable((uint64_t)a1);
    DisposeDecodeTable((uint64_t)(a1 + 12));
  }
  else
  {
    a1[3] = 0;
    a1[39] = 0;
    a1[27] = 0;
    a1[15] = 0;
  }
  return DecodeTable;
}

void DisposeDecodeTable(uint64_t a1)
{
  if (*(_WORD *)(a1 + 6))
  {
    free(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t MuxedAlphaDecoder_CreateInstance()
{
  uint64_t v0;

  VTVideoDecoderGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t MuxedAlphaDecoder_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(v1 + 72));
  }
  return 0;
}

void MuxedAlphaDecoder_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  v5 = (const void *)DerivedStorage[7];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[7] = 0;
  }
  v6 = (const void *)DerivedStorage[3];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[3] = 0;
  }
  v7 = (const void *)DerivedStorage[8];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[8] = 0;
  }
  v8 = (const void *)DerivedStorage[9];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[9] = 0;
  }
  v9 = (const void *)DerivedStorage[10];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[10] = 0;
  }
  v10 = (const void *)DerivedStorage[11];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[11] = 0;
  }
  v11 = (const void *)DerivedStorage[16];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[16] = 0;
  }
  v12 = (const void *)DerivedStorage[18];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[18] = 0;
  }
  v13 = DerivedStorage[13];
  if (v13)
  {
    dispatch_release(v13);
    DerivedStorage[13] = 0;
  }
  v14 = DerivedStorage[14];
  if (v14)
  {
    dispatch_release(v14);
    DerivedStorage[14] = 0;
  }
  v15 = DerivedStorage[12];
  if (v15)
  {
    dispatch_release(v15);
    DerivedStorage[12] = 0;
  }
}

__CFString *MuxedAlphaDecoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<MuxedAlphaDecoder %p>"), a1);
  return Mutable;
}

uint64_t MuxedAlphaDecoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  CFTypeRef v9;
  const void *v10;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SublayerDecoderSpecification")))
  {
    v8 = *(const void **)(DerivedStorage + 24);
    if (v8)
      v9 = CFRetain(v8);
    else
      v9 = 0;
    result = 0;
    *a4 = v9;
  }
  else
  {
    v10 = *(const void **)(DerivedStorage + 40);
    if (v10)
      return VTSessionCopyProperty(v10, a2, a3, a4);
    else
      return 4294954393;
  }
  return result;
}

uint64_t MuxedAlphaDecoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  const void *v7;
  const void *v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("SublayerDecoderSpecification")))
  {
    if (CFEqual(a2, CFSTR("RequestedMVHEVCVideoLayerIDs")))
    {
      if ((_os_feature_enabled_impl() & 1) == 0)
        return FigSignalErrorAt();
      if (!FigVideoFormatDescriptionContainsStereoMultiviewVideo())
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return FigSignalErrorAt();
      }
      v9 = *(const void **)(DerivedStorage + 56);
      *(_QWORD *)(DerivedStorage + 56) = a3;
      if (a3)
        CFRetain(a3);
      if (v9)
        CFRelease(v9);
      v10 = *(const void **)(DerivedStorage + 40);
      if (v10 && *(_QWORD *)(DerivedStorage + 72))
      {
        v11 = VTSessionSetProperty(v10, a2, a3);
        VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 72), a2, a3);
        *(_BYTE *)(DerivedStorage + 136) = 1;
        return v11;
      }
    }
    else
    {
      v12 = *(const void **)(DerivedStorage + 40);
      if (v12 && *(_QWORD *)(DerivedStorage + 72))
      {
        v11 = VTSessionSetProperty(v12, a2, a3);
        VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 72), a2, a3);
        return v11;
      }
    }
    return 4294954393;
  }
  if (!a3)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a3);
  if (v6 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v7 = *(const void **)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = a3;
  CFRetain(a3);
  if (v7)
    CFRelease(v7);
  return 0;
}

uint64_t MuxedAlphaDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  uint64_t v11;
  uint64_t v12;
  const __CFDictionary *Extensions;
  const __CFDictionary *Value;
  const void *v15;
  CFTypeID v16;
  uint64_t HEVCParameterSetAtIndex;
  uint64_t v18;
  uint64_t FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
  uint64_t *v20;
  uint64_t v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  const __CFArray *v24;
  const __CFArray *ValueAtIndex;
  CFTypeID v26;
  CFTypeID v27;
  CMTagCategory category;
  int v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  BOOL *v33;
  unint64_t Dimensions;
  uint64_t v35;
  __CFDictionary *v36;
  BOOL v37;
  char v38;
  CFDictionaryRef v39;
  CFMutableDictionaryRef v40;
  CFMutableDictionaryRef v41;
  CFMutableArrayRef v42;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v44;
  __int16 v46;
  unint64_t v47;
  __CFDictionary *v48;
  CMItemCount numberOfTagsCopied;
  CMTag tagBuffer;
  uint64_t v51;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v7 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_QWORD *)(DerivedStorage + 16) = a3;
  if (a3)
    CFRetain(a3);
  if (v7)
    CFRelease(v7);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 48) = Mutable;
  if (Mutable)
  {
    v10 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(DerivedStorage + 80) = v10;
    if (v10)
    {
      FigVideoFormatDescriptionDetermineCompatibilityWithCoreMediaRequirementsForHEVCWithAlpha();
      if (FigVideoFormatDescriptionContainsStereoMultiviewVideo())
      {
        if ((_os_feature_enabled_impl() & 1) == 0)
          return FigSignalErrorAt();
        v51 = 0;
        VTVideoDecoderGetCMBaseObject(a1);
        CMBaseObjectGetDerivedStorage();
        v11 = FigVideoFormatDescriptionCopyFigTagCollectionArrayWithExtraChannels();
        if (!(_DWORD)v11)
          v11 = FigSignalErrorAt();
        v18 = v11;
        if ((_DWORD)v11)
          return v18;
        FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateFormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription();
        if ((_DWORD)FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
        FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateFormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription();
        if ((_DWORD)FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
      }
      else
      {
        LODWORD(numberOfTagsCopied) = 0;
        *(_QWORD *)&tagBuffer.category = 0;
        v51 = 0;
        VTVideoDecoderGetCMBaseObject(a1);
        v12 = CMBaseObjectGetDerivedStorage();
        Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v12 + 16));
        if (Extensions
          && (Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA2240])) != 0
          && (v15 = CFDictionaryGetValue(Value, CFSTR("hvcC"))) != 0
          && (v16 = CFGetTypeID(v15), v16 == CFDataGetTypeID()))
        {
          HEVCParameterSetAtIndex = FigHEVCBridge_GetHEVCParameterSetAtIndex();
          if (!(_DWORD)HEVCParameterSetAtIndex)
            HEVCParameterSetAtIndex = FigHEVCBridge_GetVPSAlphaChannelNuhLayerId();
          v18 = HEVCParameterSetAtIndex;
        }
        else
        {
          v18 = 4294954586;
        }
        LODWORD(numberOfTagsCopied) = 1;
        if ((_DWORD)v18)
          return v18;
        FigCFArrayAppendInt32();
        FigCFArrayAppendInt32();
        FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateSelectedLayerFormatDescriptionFromMuxedAlphaFormatDescription();
        if ((_DWORD)FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
        FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateSelectedLayerFormatDescriptionFromMuxedAlphaFormatDescription();
        if ((_DWORD)FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
      }
      FigCFArrayGetInt32AtIndex();
      v20 = (uint64_t *)(DerivedStorage + 40);
      FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = alphadecoder_createSubLayerVTDecompressionSession(a1, 0, *(const void **)(DerivedStorage + 24), *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (uint64_t)&kSupportedBaseLayerPixelFormats, 18, (VTSessionRef *)(DerivedStorage + 40), (BOOL *)&v46 + 1);
      if (!(_DWORD)FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
      {
        v21 = *v20;
        tagBuffer.category = kCMTagCategory_Undefined;
        v22 = alphadecoder_copyPixelBufferAttributesFromDecompressionSession(v21);
        if (v22)
        {
          v23 = v22;
          v24 = (const __CFArray *)CFDictionaryGetValue(v22, (const void *)*MEMORY[0x1E0CA9040]);
          if (v24
            && ((ValueAtIndex = v24, v26 = CFGetTypeID(v24), v26 != CFArrayGetTypeID())
             || CFArrayGetCount(ValueAtIndex) >= 1
             && (ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
            && (v27 = CFGetTypeID(ValueAtIndex), v27 == CFNumberGetTypeID())
            && (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &tagBuffer),
                (category = tagBuffer.category) != kCMTagCategory_Undefined))
          {
            v18 = 0;
          }
          else
          {
            v18 = FigSignalErrorAt();
            category = kCMTagCategory_Undefined;
          }
          CFRelease(v23);
          if ((_DWORD)v18)
            return v18;
        }
        else
        {
          v18 = FigSignalErrorAt();
          category = kCMTagCategory_Undefined;
          if ((_DWORD)v18)
            return v18;
        }
        v29 = 875704422;
        v30 = 1982882104;
        if ((int)category > 1982882103)
        {
          if ((int)category > 2016567607)
          {
            if ((int)category > 2016686641)
            {
              if (category == 2016686642)
              {
                v29 = 1278226488;
                v30 = 2016567608;
              }
              else
              {
                if (category != 2016687156)
                {
                  v31 = 2016698680;
                  goto LABEL_59;
                }
                v29 = 1278226488;
                v30 = 2016698680;
              }
LABEL_61:
              v47 = __PAIR64__(v30, v29);
              if (HIBYTE(v46))
                v33 = (BOOL *)&v46;
              else
                v33 = 0;
              FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = alphadecoder_createSubLayerVTDecompressionSession(a1, 1, *(const void **)(DerivedStorage + 24), *(const opaqueCMFormatDescription **)(DerivedStorage + 64), (uint64_t)&v47, 1, (VTSessionRef *)(DerivedStorage + 72), v33);
              if (!(_DWORD)FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
              {
                Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 16));
                v35 = alphadecoder_createPixelBufferAttributesDictionary(Dimensions, HIDWORD(Dimensions), (uint64_t)&v47 + 4, 1, &v48);
                v36 = v48;
                if (!(_DWORD)v35)
                {
                  VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), v48);
                  if (HIBYTE(v46))
                    v37 = v46 == 0;
                  else
                    v37 = 1;
                  v38 = !v37;
                  *(_BYTE *)(DerivedStorage + 124) = v38;
                  if (!v37)
                  {
                    v39 = alphadecoder_copyPixelBufferAttributesFromDecompressionSession(*v20);
                    if (v39)
                      VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), v39);
                    VTDecompressionSessionSetDecoderSessionAsPixelBufferSource(*v20, a2);
                    VTDecompressionSessionSetDecoderSessionAsPixelBufferSource(*(_QWORD *)(DerivedStorage + 72), a2);
                    v40 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    if (!v40)
                    {
                      v18 = FigSignalErrorAt();
                      if (v36)
                        goto LABEL_86;
                      goto LABEL_87;
                    }
                    v41 = v40;
                    FigCFDictionarySetBoolean();
                    v42 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
                    *(_QWORD *)(DerivedStorage + 128) = v42;
                    if (v42)
                    {
                      if (!FigVideoFormatDescriptionContainsStereoMultiviewVideo())
                      {
                        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 128), v41);
                        v18 = 0;
                        goto LABEL_91;
                      }
                      tagBuffer.category = kCMTagCategory_Undefined;
                      FigCFArrayGetInt32AtIndex();
                      FigCFDictionarySetInt32();
                      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 128), v41);
                      MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, v41);
                      if (MutableCopy)
                      {
                        v44 = MutableCopy;
                        FigCFArrayGetInt32AtIndex();
                        FigCFDictionarySetInt32();
                        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 128), v44);
                        CFRelease(v41);
                        CFRelease(v44);
                        v18 = 0;
                        if (!v36)
                          goto LABEL_87;
LABEL_86:
                        CFRelease(v36);
                        goto LABEL_87;
                      }
                    }
                    v18 = FigSignalErrorAt();
LABEL_91:
                    CFRelease(v41);
                    if (v36)
                      goto LABEL_86;
LABEL_87:
                    if (v39)
                      CFRelease(v39);
                    return v18;
                  }
                  if (CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(DerivedStorage + 32)) == 1752589105)
                  {
                    v18 = 0;
                    goto LABEL_85;
                  }
                  v35 = FigSignalErrorAt();
                }
                v18 = v35;
LABEL_85:
                v39 = 0;
                if (!v36)
                  goto LABEL_87;
                goto LABEL_86;
              }
              return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
            }
            if (category != 2016567608)
            {
              if (category == 2016686640)
              {
                v30 = 2016436536;
                v29 = 1278226488;
              }
              goto LABEL_61;
            }
            goto LABEL_60;
          }
          if ((int)category > 1983144247)
          {
            if (category == 1983144248)
              goto LABEL_60;
            v31 = 2016436536;
          }
          else
          {
            if (category == 1982882104)
              goto LABEL_60;
            v31 = 1983013176;
          }
LABEL_59:
          if (category != v31)
            goto LABEL_61;
          goto LABEL_60;
        }
        if ((int)category > 645411383)
        {
          if ((int)category > 875704949)
          {
            if (category == 875704950)
            {
              v29 = 1278226488;
              v30 = 1983013176;
            }
            else if (category == 875836534)
            {
              v29 = 1278226488;
              v30 = 1983144248;
            }
            goto LABEL_61;
          }
          if (category == 645411384)
          {
LABEL_60:
            v30 = category;
            v29 = category;
            goto LABEL_61;
          }
          v32 = 13368;
        }
        else
        {
          if ((int)category <= 645280823)
          {
            if (category == 645279800)
              goto LABEL_60;
            v31 = 645280312;
            goto LABEL_59;
          }
          if (category == 645280824)
            goto LABEL_60;
          v32 = 12344;
        }
        v31 = v32 | 0x26780000;
        goto LABEL_59;
      }
      return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
    }
  }
  return FigSignalErrorAt();
}

uint64_t MuxedAlphaDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, unsigned int a4, int *a5)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  const void *Decryptor;
  const void *v12;
  const void *v13;
  uint64_t (*v14)(const void *, CMBlockBufferRef *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  const __CFDictionary *MutableCopy;
  const void *v22;
  const void *v23;
  NSObject *v24;
  dispatch_time_t v25;
  CMSampleBufferRef *v26;
  CMSampleBufferRef *v27;
  uint64_t DataPointer;
  uint64_t DerivedSampleBuffer;
  uint64_t v30;
  uint64_t v31;
  CFIndex Count;
  const CFArrayCallBacks *v33;
  __CFArray *v34;
  __CFArray *v35;
  uint64_t v36;
  uint64_t ValueAtIndex;
  __int128 *v38;
  uint64_t v39;
  uint64_t PixelBufferWithOptions;
  uint64_t FirstValue;
  int v42;
  NSObject *v43;
  uint64_t v44;
  opaqueCMSampleBuffer *v45;
  uint64_t v46;
  uint64_t v47;
  const __CFDictionary *v48;
  uint64_t v49;
  opaqueCMSampleBuffer *v50;
  uint64_t v51;
  CMSampleBufferRef v52;
  CMSampleBufferRef v53;
  uint64_t v55;
  opaqueCMSampleBuffer *v56;
  uint64_t i;
  const __CFArray *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  __CFDictionary *v62;
  NSObject *object;
  const __CFDictionary *v64;
  __int128 v67;
  const void *v68;
  _QWORD block[2];
  void (*v70)(uint64_t);
  void *v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  const void *v80;
  NSObject *v81;
  char v82;
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[3];
  int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  CVPixelBufferRef *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[3];
  int v98;
  uint64_t v99;
  CMSampleBufferRef *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  CMSampleBufferRef *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  size_t v112;
  CMBlockBufferRef v113;
  char *dataPointerOut;
  CVPixelBufferRef v115;
  CMBlockBufferRef blockBufferOut[2];
  __int128 v117;
  uint64_t v118;

  v7 = a1;
  v118 = *MEMORY[0x1E0C80C00];
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v105 = 0;
  v106 = (CMSampleBufferRef *)&v105;
  v107 = 0x4000000000;
  v108 = 0u;
  v109 = 0u;
  v110 = 0;
  v99 = 0;
  v100 = (CMSampleBufferRef *)&v99;
  v101 = 0x4000000000;
  v102 = 0u;
  v103 = 0u;
  v104 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v97[0] = 0;
  v97[1] = v97;
  v97[2] = 0x2000000000;
  v98 = 0;
  v93 = 0;
  v94 = (CVPixelBufferRef *)&v93;
  v95 = 0x2000000000;
  v96 = 0;
  v89 = 0;
  v90 = &v89;
  v91 = 0x2000000000;
  v92 = 0;
  v87[0] = 0;
  v87[1] = v87;
  v87[2] = 0x2000000000;
  v88 = 0;
  v68 = a2;
  FigCFDictionarySetInt64();
  if (!*(_BYTE *)(DerivedStorage + 124)
    || (Decryptor = (const void *)FigSampleBufferGetDecryptor()) == 0
    || (v12 = Decryptor, v13 = *(const void **)(DerivedStorage + 144), Decryptor == v13))
  {
LABEL_19:
    v64 = 0;
    goto LABEL_20;
  }
  *(_QWORD *)(DerivedStorage + 144) = Decryptor;
  CFRetain(Decryptor);
  if (v13)
    CFRelease(v13);
  LODWORD(blockBufferOut[0]) = 0;
  v14 = *(uint64_t (**)(const void *, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v14)
  {
    PixelBufferWithOptions = 4294954514;
LABEL_84:
    v48 = 0;
LABEL_85:
    v43 = 0;
    goto LABEL_86;
  }
  v15 = v14(v12, blockBufferOut);
  if ((_DWORD)v15)
  {
    PixelBufferWithOptions = v15;
    goto LABEL_84;
  }
  v16 = 3;
  if (((uint64_t)blockBufferOut[0] & 1) == 0)
    v16 = 1;
  v17 = 7;
  if (((uint64_t)blockBufferOut[0] & 2) == 0)
    v17 = v16;
  if (*(_QWORD *)(DerivedStorage + 152) == v17)
    goto LABEL_19;
  *(_QWORD *)(DerivedStorage + 152) = v17;
  VTVideoDecoderGetCMBaseObject(v7);
  v18 = CMBaseObjectGetDerivedStorage();
  if (!v18)
    goto LABEL_19;
  v19 = alphadecoder_copyPixelBufferAttributesFromDecompressionSession(*(_QWORD *)(v18 + 40));
  if (!v19)
    goto LABEL_19;
  v20 = v19;
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v22 = (const void *)*MEMORY[0x1E0CA8FF0];
  CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FF0]);
  v23 = (const void *)FigCFDictionaryCreateMutableCopy();
  FigCFDictionarySetInt64();
  v64 = MutableCopy;
  CFDictionarySetValue(MutableCopy, v22, v23);
  CFRelease(v20);
  if (v23)
    CFRelease(v23);
  if (!MutableCopy)
    goto LABEL_19;
  VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), MutableCopy);
LABEL_20:
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 104));
  ++*(_DWORD *)(DerivedStorage + 120);
  v24 = *(NSObject **)(DerivedStorage + 112);
  v25 = dispatch_time(0, 10000000000);
  if (dispatch_semaphore_wait(v24, v25) || !CMSampleBufferDataIsReady(a3))
  {
    DerivedSampleBuffer = FigSignalErrorAt();
LABEL_97:
    PixelBufferWithOptions = DerivedSampleBuffer;
    v43 = 0;
    v48 = v64;
    goto LABEL_86;
  }
  CMSampleBufferGetDataBuffer(a3);
  v26 = v106;
  v27 = v100;
  VTVideoDecoderGetCMBaseObject(v7);
  CMBaseObjectGetDerivedStorage();
  v115 = 0;
  blockBufferOut[0] = 0;
  v113 = 0;
  dataPointerOut = 0;
  v111 = 0;
  v112 = 0;
  DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer();
  if ((_DWORD)DataPointer
    || (DataPointer = CMBlockBufferCreateWithMemoryBlock(v9, 0, (size_t)v115, v9, 0, 0, (size_t)v115, 1u, blockBufferOut), (_DWORD)DataPointer)|| (DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, &dataPointerOut), (_DWORD)DataPointer)|| (DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer(), (_DWORD)DataPointer)|| (DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer(), (_DWORD)DataPointer)|| (DataPointer = CMBlockBufferCreateWithMemoryBlock(v9, 0, v112, v9, 0, 0, v112, 1u, &v113), (_DWORD)DataPointer)|| (DataPointer = CMBlockBufferGetDataPointer(v113, 0, 0, 0, &v111), (_DWORD)DataPointer)|| (DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer(), (_DWORD)DataPointer))
  {
    PixelBufferWithOptions = DataPointer;
    v48 = v64;
    if (blockBufferOut[0])
      CFRelease(blockBufferOut[0]);
    if (v113)
      CFRelease(v113);
    goto LABEL_85;
  }
  v26[3] = blockBufferOut[0];
  v27[3] = v113;
  DerivedSampleBuffer = alphadecoder_createDerivedSampleBuffer(a3, v106[3], *(const opaqueCMFormatDescription **)(DerivedStorage + 32), v106 + 4);
  if ((_DWORD)DerivedSampleBuffer)
    goto LABEL_97;
  DerivedSampleBuffer = alphadecoder_createDerivedSampleBuffer(a3, v100[3], *(const opaqueCMFormatDescription **)(DerivedStorage + 64), v100 + 4);
  if ((_DWORD)DerivedSampleBuffer)
    goto LABEL_97;
  object = dispatch_group_create();
  v30 = a4;
  if ((a4 & 2) != 0)
    goto LABEL_62;
  if (*(_BYTE *)(DerivedStorage + 136))
  {
    v61 = v7;
    v62 = Mutable;
    v60 = v90;
    VTVideoDecoderGetCMBaseObject(v7);
    v31 = CMBaseObjectGetDerivedStorage();
    dataPointerOut = 0;
    v115 = 0;
    v113 = 0;
    Count = CFArrayGetCount(*(CFArrayRef *)(v31 + 48));
    v33 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v34 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    v35 = CFArrayCreateMutable(v9, 0, v33);
    if (Count < 1)
    {
LABEL_48:
      PixelBufferWithOptions = MEMORY[0x1940271DC](v9, v34, v35, &v113);
      if (!(_DWORD)PixelBufferWithOptions)
      {
        v60[3] = (uint64_t)v113;
        v113 = 0;
      }
    }
    else
    {
      v36 = 0;
      ValueAtIndex = 0;
      v67 = *MEMORY[0x1E0CA27F8];
      while (1)
      {
        v112 = 0;
        *(_OWORD *)blockBufferOut = v67;
        v117 = v67;
        FigCFArrayGetInt64AtIndex();
        *(CMTag *)blockBufferOut = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, v112);
        v38 = (__int128 *)(v36 ? MEMORY[0x1E0CA2848] : MEMORY[0x1E0CA2838]);
        v117 = *v38;
        v39 = CMTagCollectionCreate(v9, (const CMTag *)blockBufferOut, 2, (CMTagCollectionRef *)&dataPointerOut);
        if ((_DWORD)v39)
          break;
        if (*(_BYTE *)(v31 + 124))
          ValueAtIndex = FigCFArrayGetValueAtIndex();
        v39 = VTDecoderSessionCreatePixelBufferWithOptions(*(uint64_t **)(v31 + 8), v68, ValueAtIndex, &v115);
        if ((_DWORD)v39)
          break;
        CFArrayAppendValue(v35, v115);
        if (v115)
        {
          CFRelease(v115);
          v115 = 0;
        }
        CFArrayAppendValue(v34, dataPointerOut);
        if (dataPointerOut)
        {
          CFRelease(dataPointerOut);
          dataPointerOut = 0;
        }
        if (Count == ++v36)
          goto LABEL_48;
      }
      PixelBufferWithOptions = v39;
    }
    if (v115)
      CFRelease(v115);
    Mutable = v62;
    v30 = a4;
    if (v34)
      CFRelease(v34);
    if (v35)
      CFRelease(v35);
    if (dataPointerOut)
      CFRelease(dataPointerOut);
    v7 = v61;
    if (v113)
      CFRelease(v113);
  }
  else
  {
    FirstValue = FigCFArrayGetFirstValue();
    PixelBufferWithOptions = VTDecoderSessionCreatePixelBufferWithOptions(*(uint64_t **)(DerivedStorage + 8), v68, FirstValue, v94 + 3);
  }
  if ((_DWORD)PixelBufferWithOptions)
  {
    v43 = object;
    v48 = v64;
  }
  else
  {
LABEL_62:
    v42 = *(unsigned __int8 *)(DerivedStorage + 136);
    v43 = object;
    dispatch_retain(object);
    dispatch_group_enter(object);
    v44 = *(_QWORD *)(DerivedStorage + 40);
    v45 = v106[4];
    v46 = MEMORY[0x1E0C809B0];
    if (v42)
    {
      v86[0] = MEMORY[0x1E0C809B0];
      v86[1] = 0x40000000;
      v86[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke;
      v86[3] = &unk_1E2F62AC8;
      v86[4] = &v105;
      v86[5] = object;
      v47 = VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler(v44, v45, v30, (uint64_t)Mutable, a5, (unint64_t)v86);
      v48 = v64;
      if (!(_DWORD)v47)
      {
        dispatch_retain(object);
        dispatch_group_enter(object);
        v49 = *(_QWORD *)(DerivedStorage + 72);
        v50 = v100[4];
        v85[0] = v46;
        v85[1] = 0x40000000;
        v85[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke_2;
        v85[3] = &unk_1E2F62AF0;
        v85[4] = &v99;
        v85[5] = object;
        v51 = VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler(v49, v50, v30, (uint64_t)Mutable, a5, (unint64_t)v85);
        if (!(_DWORD)v51)
        {
LABEL_65:
          dispatch_retain(object);
          block[0] = v46;
          block[1] = 0x40000000;
          v70 = __MuxedAlphaDecoder_DecodeFrame_block_invoke_5;
          v71 = &unk_1E2F62B68;
          v72 = v97;
          v73 = &v105;
          v74 = &v99;
          v75 = v87;
          v82 = v30 & 1;
          v78 = DerivedStorage;
          v79 = v7;
          v76 = &v89;
          v77 = &v93;
          v80 = v68;
          v81 = object;
          if ((v30 & 1) != 0)
          {
            dispatch_group_notify(object, *(dispatch_queue_t *)(DerivedStorage + 96), block);
          }
          else
          {
            dispatch_group_wait(object, 0xFFFFFFFFFFFFFFFFLL);
            v70((uint64_t)block);
          }
          PixelBufferWithOptions = 0;
          goto LABEL_69;
        }
LABEL_82:
        PixelBufferWithOptions = v51;
        goto LABEL_69;
      }
    }
    else
    {
      v84[0] = MEMORY[0x1E0C809B0];
      v84[1] = 0x40000000;
      v84[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke_3;
      v84[3] = &unk_1E2F62B18;
      v84[4] = &v105;
      v84[5] = object;
      v47 = VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler(v44, v45, v30, (uint64_t)Mutable, a5, (unint64_t)v84);
      v48 = v64;
      if (!(_DWORD)v47)
      {
        dispatch_retain(object);
        dispatch_group_enter(object);
        v55 = *(_QWORD *)(DerivedStorage + 72);
        v56 = v100[4];
        v83[0] = v46;
        v83[1] = 0x40000000;
        v83[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke_4;
        v83[3] = &unk_1E2F62B40;
        v83[4] = &v99;
        v83[5] = object;
        v51 = VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler(v55, v56, v30, (uint64_t)Mutable, a5, (unint64_t)v83);
        if (!(_DWORD)v51)
          goto LABEL_65;
        goto LABEL_82;
      }
    }
    PixelBufferWithOptions = v47;
  }
LABEL_86:
  alphadecoder_emitDecodedFrame(v7, v68, PixelBufferWithOptions, 0, 0);
  for (i = 0; ; ++i)
  {
    v58 = *(const __CFArray **)(DerivedStorage + 128);
    if (v58)
      v58 = (const __CFArray *)CFArrayGetCount(v58);
    if (i >= (uint64_t)v58)
      break;
    v59 = FigCFArrayGetValueAtIndex();
    VTDecoderSessionForgetPixelBufferForFrame(*(uint64_t **)(DerivedStorage + 8), (uint64_t)v68, v59);
  }
LABEL_69:
  v52 = v106[3];
  if (v52)
    CFRelease(v52);
  v53 = v100[3];
  if (v53)
    CFRelease(v53);
  if (v43)
    dispatch_release(v43);
  if (Mutable)
    CFRelease(Mutable);
  if (v48)
    CFRelease(v48);
  _Block_object_dispose(v87, 8);
  _Block_object_dispose(&v89, 8);
  _Block_object_dispose(&v93, 8);
  _Block_object_dispose(v97, 8);
  _Block_object_dispose(&v99, 8);
  _Block_object_dispose(&v105, 8);
  return PixelBufferWithOptions;
}

