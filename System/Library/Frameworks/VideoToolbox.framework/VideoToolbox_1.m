uint64_t vt_Copy_422v_t4as(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  double *v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;

  v10 = a3[4];
  v9 = a3[5];
  v11 = a3[3];
  v12 = a5[1];
  v13 = (unsigned __int8 *)(a4[1] + v12 * v9 + (v10 & 0xFFFFFFFE));
  v14 = a7[4];
  v15 = a7[5];
  v16 = a9[1];
  v17 = (_WORD *)(a8[1] + v16 * v15 + 4 * v14);
  v18 = a3[2] + v10 - (v10 & 0xFFFFFFFE) + ((a3[2] + v10) & 1);
  if (v18 >= a7[2])
    v18 = a7[2];
  if (v11 >= a7[3])
    v11 = a7[3];
  if (v11)
  {
    v19 = 0;
    v20 = *a5;
    v21 = *a9;
    v22 = a9[2];
    v23 = a8[2] + v22 * v15 + 2 * v14;
    v24 = *a8 + *a9 * v15 + 2 * v14;
    v25 = *a4 + v20 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v23 + 2 * i) = -1;
          *(_WORD *)(v24 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v20;
      v24 += v21;
      v23 += v22;
      ++v19;
    }
    while (v19 != v11);
  }
  v27 = v9 & 1;
  if (v11 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v10;
  v30 = v18 >> 1;
  v31 = v10 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v32 = v13 + 2;
      v39 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v39;
      v33 = v17 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          v32 += 2;
          *v33 = v35 << 8;
          v33[1] = v36 << 8;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v13;
      v33 = v17;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v18)
    {
      v40 = *v32 << 8;
      v41 = v32[1] << 8;
      *v33 = v40;
      v33[1] = v41;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v11 - v28;
    do
    {
      v44 = v13;
      v45 = (double *)v17;
      if ((v29 & 1) != 0)
      {
        v44 = v13 + 2;
        v46 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v46;
        v45 = (double *)(v17 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          a1.i8[0] = *v44;
          a1.i8[4] = v44[1];
          v49 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v49, v49);
          *v45++ = *(double *)&a1;
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        v50 = *v48 << 8;
        v51 = v48[1] << 8;
        *(_WORD *)v45 = v50;
        *((_WORD *)v45 + 1) = v51;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v11)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v18)
    {
      v58 = *v13 << 8;
      v59 = v13[1] << 8;
      *v17 = v58;
      v17[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = a7[2] + v28 * v18 + v19;
    v30 = *a7 + *a8 * v18 + v19;
    v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v24 >> 1;
  v37 = (v24 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v14 + 2;
      v40 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v40;
      v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v14;
      v39 = v21;
      if (!v36)
        goto LABEL_25;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v35 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = v46[1] << 8;
          *v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v21 = v51 << 8;
      v21[1] = v52 << 8;
      v21 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v54;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x4as(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  double *v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;

  v10 = a3[4];
  v9 = a3[5];
  v11 = a3[3];
  v12 = a5[1];
  v13 = (unsigned __int8 *)(a4[1] + v12 * v9 + (v10 & 0xFFFFFFFE));
  v14 = a7[4];
  v15 = a7[5];
  v16 = a9[1];
  v17 = (_WORD *)(a8[1] + v16 * v15 + 4 * v14);
  v18 = a3[2] + v10 - (v10 & 0xFFFFFFFE) + ((a3[2] + v10) & 1);
  if (v18 >= a7[2])
    v18 = a7[2];
  if (v11 >= a7[3])
    v11 = a7[3];
  if (v11)
  {
    v19 = 0;
    v20 = *a5;
    v21 = *a9;
    v22 = a9[2];
    v23 = a8[2] + v22 * v15 + 2 * v14;
    v24 = *a8 + *a9 * v15 + 2 * v14;
    v25 = *a4 + v20 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v23 + 2 * i) = -1;
          *(_WORD *)(v24 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v20;
      v24 += v21;
      v23 += v22;
      ++v19;
    }
    while (v19 != v11);
  }
  v27 = v9 & 1;
  if (v11 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v10;
  v30 = v18 >> 1;
  v31 = v10 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v32 = v13 + 2;
      v39 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v39;
      v33 = v17 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          v32 += 2;
          *v33 = v35 << 8;
          v33[1] = v36 << 8;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v13;
      v33 = v17;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v18)
    {
      v40 = *v32 << 8;
      v41 = v32[1] << 8;
      *v33 = v40;
      v33[1] = v41;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v11 - v28;
    do
    {
      v44 = v13;
      v45 = (double *)v17;
      if ((v29 & 1) != 0)
      {
        v44 = v13 + 2;
        v46 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v46;
        v45 = (double *)(v17 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          a1.i8[0] = *v44;
          a1.i8[4] = v44[1];
          v49 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v49, v49);
          *v45++ = *(double *)&a1;
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        v50 = *v48 << 8;
        v51 = v48[1] << 8;
        *(_WORD *)v45 = v50;
        *((_WORD *)v45 + 1) = v51;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v11)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v18)
    {
      v58 = *v13 << 8;
      v59 = v13[1] << 8;
      *v17 = v58;
      v17[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = a7[2] + v28 * v18 + v19;
    v30 = *a7 + *a8 * v18 + v19;
    v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v24 >> 1;
  v37 = (v24 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v14 + 2;
      v40 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v40;
      v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v14;
      v39 = v21;
      if (!v36)
        goto LABEL_25;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v35 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = v46[1] << 8;
          *v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v21 = v51 << 8;
      v21[1] = v52 << 8;
      v21 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v54;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  size_t v29;
  uint64_t v30;
  __int16 *v31;
  __int16 *v32;
  uint64_t v33;
  __int16 v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  __int16 *v40;
  uint64_t v41;
  char v42;
  char v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (__int16 *)(a3[1] + v10 * v9 + (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (__int16 *)(a7[1] + v16 * v13 + 2 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14)
    v18 = v14;
  else
    v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= v15)
    v19 = v15;
  else
    v19 = a2[3];
  if (v19)
  {
    v49 = a8[1];
    v50 = v19;
    v51 = a4[1];
    v20 = *a4;
    v21 = *a8;
    v22 = a8[2];
    v23 = (char *)(a7[2] + v22 * v13 + v12);
    v24 = (char *)(*a7 + *a8 * v13 + v12);
    v25 = (char *)(*a3 + *a4 * v9 + (v8 & 0xFFFFFFFE));
    do
    {
      memcpy(v24, v25, v18);
      memset(v23, 255, v18);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    v16 = v49;
    v8 = a2[4];
    v9 = a2[5];
    v19 = v50;
    v10 = v51;
  }
  v26 = v9 & 1;
  if (v19 >= v26)
    v27 = v9 & 1;
  else
    v27 = 0;
  v28 = v8;
  v29 = v18 >> 1;
  v30 = v8 & 1;
  if (v18 >> 1 >= (v18 - v30) >> 1)
    v29 = (v18 - v30) >> 1;
  if ((v9 & 1) != 0)
  {
    v31 = v11;
    if ((v28 & 1) != 0)
    {
      v31 = v11 + 1;
      *v17 = *v11;
      v32 = v17 + 1;
      if (v29)
      {
LABEL_19:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31++;
          *v32++ = v34;
          v35 = __CFADD__(v33++, 1);
        }
        while (!v35);
        v36 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v17;
      if (v29)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v30) < v18)
      *v32 = *v31;
    v11 = (__int16 *)((char *)v11 + v10);
    v17 = (__int16 *)((char *)v17 + v16);
  }
  if (v19 == v27)
  {
    v37 = 0;
  }
  else
  {
    v38 = 0;
    v37 = v19 - v27;
    do
    {
      v39 = (char *)v11;
      v40 = v17;
      if ((v28 & 1) != 0)
      {
        v39 = (char *)(v11 + 1);
        *v17 = *v11;
        v40 = v17 + 1;
      }
      if (v29)
      {
        v41 = -(uint64_t)v29;
        do
        {
          v42 = *v39;
          v43 = v39[1];
          v39 += 2;
          *(_BYTE *)v40 = v42;
          *((_BYTE *)v40 + 1) = v43;
          *((_BYTE *)v40 + 2) = v42;
          *((_BYTE *)v40 + 3) = v43;
          v40 += 2;
          v35 = __CFADD__(v41++, 1);
        }
        while (!v35);
      }
      if ((v30 | (2 * v29)) < v18)
        *v40 = *(_WORD *)v39;
      v11 = (__int16 *)((char *)v11 + v10);
      v17 = (__int16 *)((char *)v17 + v16);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v26 < v19)
  {
    if ((v28 & 1) != 0)
    {
      v44 = *v11++;
      *v17++ = v44;
    }
    if (v29)
    {
      v45 = -(uint64_t)v29;
      do
      {
        v46 = *v11++;
        *v17++ = v46;
        v35 = __CFADD__(v45++, 1);
      }
      while (!v35);
      v29 *= 2;
    }
    if ((v29 | v30) < v18)
      *v17 = *v11;
  }
  return 0;
}

uint64_t vt_Copy_422v_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  size_t v32;
  __int16 *v33;
  __int16 *v34;
  uint64_t v35;
  __int16 v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  __int16 *v40;
  __int16 *v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v11 + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = a8[1];
  v19 = (__int16 *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v20 = v16 - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v20)
    v21 = v20;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v22 = v14;
  else
    v22 = *(_QWORD *)(a2 + 24);
  if (v22)
  {
    v49 = a8[1];
    v50 = v22;
    v51 = a4[1];
    v23 = *a4;
    v24 = *a8;
    v25 = a8[2];
    v26 = (char *)(a7[2] + v25 * v17 + v15);
    v27 = (char *)(*a7 + *a8 * v17 + v15);
    v28 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v27, v28, v21);
      memset(v26, 255, v21);
      v28 += v23;
      v27 += v24;
      v26 += v25;
      --v22;
    }
    while (v22);
    v18 = v49;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v22 = v50;
    v12 = v51;
  }
  v29 = v11 & 1;
  if (v22 >= v29)
    v30 = v11 & 1;
  else
    v30 = 0;
  v31 = v8;
  v32 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v32 = (v21 - v9) >> 1;
  if ((v11 & 1) != 0)
  {
    v33 = v13;
    if ((v31 & 1) != 0)
    {
      v33 = v13 + 1;
      *v19 = *v13;
      v34 = v19 + 1;
      if (!v32)
      {
LABEL_24:
        v13 = (__int16 *)((char *)v13 + v12);
        v19 = (__int16 *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      v34 = v19;
      if (!v32)
        goto LABEL_24;
    }
    v35 = -(uint64_t)v32;
    do
    {
      v36 = *v33++;
      *v34++ = v36;
      v37 = __CFADD__(v35++, 1);
    }
    while (!v37);
    goto LABEL_24;
  }
LABEL_25:
  if (v22 == v30)
  {
    v38 = 0;
  }
  else
  {
    v39 = 0;
    v38 = v22 - v30;
    do
    {
      v40 = v13;
      v41 = v19;
      if ((v31 & 1) != 0)
      {
        v40 = v13 + 1;
        *v19 = *v13;
        v41 = v19 + 1;
      }
      if (v32)
      {
        v42 = -(uint64_t)v32;
        do
        {
          v43 = *v40++;
          *v41++ = v43;
          v37 = __CFADD__(v42++, 1);
        }
        while (!v37);
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v19 = (__int16 *)((char *)v19 + v18);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v29 < v22)
  {
    if ((v31 & 1) != 0)
    {
      v44 = *v13++;
      *v19++ = v44;
    }
    if (v32)
    {
      v45 = -(uint64_t)v32;
      do
      {
        v46 = *v13++;
        *v19++ = v46;
        v37 = __CFADD__(v45++, 1);
      }
      while (!v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v55 = v24;
    v25 = *a4;
    v56 = a8[1];
    v57 = *a4;
    if (v13 >= v9)
      v25 = 0;
    v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    v27 = a8[2];
    v28 = (char *)(a7[2] + v27 * v19 + v17);
    v29 = *a8;
    v30 = (char *)(*a7 + *a8 * v19 + v17);
    v31 = -(uint64_t)v24;
    do
    {
      memcpy(v30, v26, v23);
      memset(v28, 255, v23);
      v26 += v57;
      v30 += v29;
      v28 += v27;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v24 = v55;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v56;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v34 = (v23 - v10) >> 1;
  else
    v34 = v23 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v35 = v16 + 2;
      v37 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v37;
      v36 = v22 + 2;
      if (!v34)
      {
LABEL_28:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v16;
      v36 = v22;
      if (!v34)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *v35;
      v40 = v35[1];
      v41 = v35[v15];
      v42 = v35[v15 + 1];
      v35 += 2;
      *v36 = (v39 + v41 + 1) >> 1;
      v36[1] = (v40 + v42 + 1) >> 1;
      v36 += 2;
      v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v33)
  {
    v43 = 0;
    v44 = v24 - v33;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v8 & 1) != 0)
      {
        v45 = v16 + 2;
        v47 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v47;
        v46 = v22 + 2;
      }
      if (v34)
      {
        v48 = -(uint64_t)v34;
        do
        {
          v49 = *v45;
          v50 = v45[1];
          v51 = v45[v15];
          v52 = v45[v15 + 1];
          v45 += 2;
          *v46 = (v49 + v51 + 1) >> 1;
          v46[1] = (v50 + v52 + 1) >> 1;
          v46 += 2;
          v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += 2 * v15;
      v22 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  size_t v35;
  __int16 *v36;
  __int16 *v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  __int16 *v42;
  __int16 *v43;
  uint64_t v44;
  __int16 v45;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v48 = v24;
    v49 = a4[1];
    v50 = a8[1];
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    v30 = (char *)(a7[2] + v27 * v19 + v17);
    v31 = (char *)(*a7 + v26 * v19 + v17);
    v32 = -(uint64_t)v24;
    do
    {
      memcpy(v31, v29, v23);
      memset(v30, 255, v23);
      v29 += v25;
      v31 += v26;
      v30 += v27;
      v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    v24 = v48;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v49;
    v21 = v50;
  }
  if (v24 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v35 = (v23 - v10) >> 1;
  else
    v35 = v23 >> 1;
  if (v12)
  {
    v36 = v16;
    if ((v8 & 1) != 0)
    {
      v36 = v16 + 1;
      *v22 = *v16;
      v37 = v22 + 1;
      if (!v35)
      {
LABEL_28:
        v16 += v15;
        v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v22;
      if (!v35)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v35;
    do
    {
      v39 = *v36++;
      *v37++ = v39;
      v33 = __CFADD__(v38++, 1);
    }
    while (!v33);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v34)
  {
    v40 = 0;
    v41 = v24 - v34;
    do
    {
      v42 = v16;
      v43 = v22;
      if ((v8 & 1) != 0)
      {
        v42 = v16 + 1;
        *v22 = *v16;
        v43 = v22 + 1;
      }
      if (v35)
      {
        v44 = -(uint64_t)v35;
        do
        {
          v45 = *v42++;
          *v43++ = v45;
          v33 = __CFADD__(v44++, 1);
        }
        while (!v33);
      }
      v16 += v15;
      v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_Copy_422f_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  _WORD *v26;
  unint64_t v27;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a4;
    v13 = a4[1];
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[5];
    v17 = (unsigned __int8 *)(a3[1] + v13 * v16 + v8);
    v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        LOWORD(v21) = 0;
        LOWORD(v22) = 0;
        v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v24 = *v23;
            v25 = v23[1];
            v23 += 2;
            v22 = ((16843010 * (unint64_t)(57344 * v24)) >> 32) + 4096;
            v21 = ((16843010 * (unint64_t)(57344 * v25)) >> 32) + 4096;
          }
          v26 = (_WORD *)(v15 + v19);
          v27 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v18 + v20))) >> 32;
          *v26 = -1;
          v26[1] = v27 + 4096;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422f_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  _BYTE *v26;
  unsigned int v27;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a4;
    v13 = a4[1];
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[5];
    v17 = (unsigned __int8 *)(a3[1] + v13 * v16 + v8);
    v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        LOBYTE(v21) = 0;
        LOBYTE(v22) = 0;
        v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v24 = *v23;
            v25 = v23[1];
            v23 += 2;
            v22 = ((7368928 * v24) >> 23) + 16;
            v21 = ((7368928 * v25) >> 23) + 16;
          }
          v26 = (_BYTE *)(v15 + v19);
          v27 = (7204443 * *(unsigned __int8 *)(v18 + v20)) >> 23;
          *v26 = -1;
          v26[1] = v27 + 16;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422f_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + i + 1))) >> 32;
          v24 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i))) >> 32;
          v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          *v22 = ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + i))) >> 32) + 4096;
          v22[1] = v24 + 4096;
          v22[2] = v23 + 4096;
          v22[3] = v25 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422f_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + v20);
          v23 = (7368928 * *(unsigned __int8 *)(v18 + i + 1)) >> 23;
          v24 = (7204443 * *(unsigned __int8 *)(v19 + i)) >> 23;
          v25 = (7204443 * *(unsigned __int8 *)(v19 + i + 1)) >> 23;
          *v22 = ((7368928 * *(unsigned __int8 *)(v18 + i)) >> 23) + 16;
          v22[1] = v24 + 16;
          v22[2] = v23 + 16;
          v22[3] = v25 + 16;
          v20 += 4;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422f_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v17 >> 1;
  v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1)
    v28 = (v17 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1];
      v30 = v12 + 2;
      *v16 = ((16843010 * (unint64_t)(57344 * *v12)) >> 32) + 4096;
      v16[1] = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
      v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = ((16843010 * (unint64_t)(57344 * v33)) >> 32) + 4096;
          v31[1] = ((16843010 * (unint64_t)(57344 * v34)) >> 32) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v12;
      v31 = v16;
      if (v28)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v31[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
    }
    v12 += v11;
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v16;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1];
        v42 = v12 + 2;
        *v16 = ((16843010 * (unint64_t)(57344 * *v12)) >> 32) + 4096;
        v16[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        v43 = v16 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          *v43 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          v48 = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
        v43[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      }
      v12 += v11;
      v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12;
      v52 = v12[1];
      v12 += 2;
      *v16 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v16[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12;
        v55 = v12[1];
        v12 += 2;
        *v16 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
        v16[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v16 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      v57 = *v12;
      v58 = v12[1];
      *v16 = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
      v16[1] = ((16843010 * (unint64_t)(57344 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v18 >> 1;
  v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1)
    v28 = (v18 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v13[1];
      v30 = v13 + 2;
      *v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
      v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = ((16843010 * (unint64_t)(57344 * v33)) >> 32) + 4096;
          v31[1] = ((16843010 * (unint64_t)(57344 * v34)) >> 32) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v13;
      v31 = v17;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v31[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v19 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        v43 = v17 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          *v43 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          v48 = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
        v43[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v17 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  __int16 v33;
  __int16 v34;
  BOOL v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + i) | (*(unsigned __int8 *)(v23 + i) << 8);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  v25 = v8 & 1;
  if (v10 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v18 >> 1;
  v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1)
    v28 = (v18 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v30 = v13 + 2;
      v37 = v13[1] | (v13[1] << 8);
      *v17 = *v13 | (*v13 << 8);
      v17[1] = v37;
      v31 = v17 + 2;
      if (v28)
      {
LABEL_19:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = v33 | (v33 << 8);
          v31[1] = v34 | (v34 << 8);
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v13;
      v31 = v17;
      if (v28)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v18)
    {
      v38 = *v30 | (*v30 << 8);
      v39 = v30[1] | (v30[1] << 8);
      *v31 = v38;
      v31[1] = v39;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v42 = v13 + 2;
        v44 = v13[1] | (v13[1] << 8);
        *v17 = *v13 | (*v13 << 8);
        v17[1] = v44;
        v43 = v17 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = *v42 | (*v42 << 8);
          v47 = v42[1] | (v42[1] << 8);
          *v43 = v46;
          v43[1] = v47;
          v42 += 2;
          v43[2] = v46;
          v43[3] = v47;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        v48 = *v42 | (*v42 << 8);
        v49 = v42[1] | (v42[1] << 8);
        *v43 = v48;
        v43[1] = v49;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v10)
  {
    if ((v27 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 | (v50 << 8);
      v17[1] = v51 | (v51 << 8);
      v17 += 2;
    }
    if (v28)
    {
      v52 = -(uint64_t)v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 | (v53 << 8);
        v17[1] = v54 | (v54 << 8);
        v17 += 2;
        v35 = __CFADD__(v52++, 1);
      }
      while (!v35);
      v55 = 2 * v28;
    }
    else
    {
      v55 = 0;
    }
    if ((v55 | (unint64_t)v29) < v18)
    {
      v56 = *v13 | (*v13 << 8);
      v57 = v13[1] | (v13[1] << 8);
      *v17 = v56;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = a7[2] + v28 * v18 + v19;
    v30 = *a7 + *a8 * v18 + v19;
    v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v24 >> 1;
  v37 = (v24 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v14[1];
      v38 = v14 + 2;
      *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v40)) >> 32) + 4096;
      v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v14;
      v39 = v21;
      if (!v36)
        goto LABEL_25;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (16843010 * (unint64_t)(57344 * v38[1])) >> 32;
      *v39 = ((16843010 * (unint64_t)(57344 * *v38)) >> 32) + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v35 & 1) != 0)
      {
        v48 = v14[1];
        v46 = v14 + 2;
        *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        v47 = v21 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v47[1] = v50 + 4096;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v21 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v21 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = v54 + 4096;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 2;
      *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (16843010 * (unint64_t)(57344 * v36[1])) >> 32;
      *v37 = ((16843010 * (unint64_t)(57344 * *v36)) >> 32) + 4096;
      v37[1] = v40 + 4096;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 2;
        *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (16843010 * (unint64_t)(57344 * v44[1])) >> 32;
          *v45 = ((16843010 * (unint64_t)(57344 * *v44)) >> 32) + 4096;
          v45[1] = v48 + 4096;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = v52 + 4096;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = v14[1] | (v14[1] << 8);
      *v21 = *v14 | (*v14 << 8);
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] | (v36[1] << 8);
      *v37 = *v36 | (*v36 << 8);
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = v14[1] | (v14[1] << 8);
        *v21 = *v14 | (*v14 << 8);
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] | (v44[1] << 8);
          *v45 = *v44 | (*v44 << 8);
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = v49 | (v49 << 8);
      v21[1] = v50 | (v50 << 8);
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] | (v14[1] << 8);
        *v21 = *v14 | (*v14 << 8);
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  _WORD *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v15 + 2;
      v39 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                         + 8193
                         + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)) >> 1;
      *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                          + 8193
                          + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)) >> 1;
      v22[1] = v39;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = *v37;
      v42 = v37[1];
      v43 = v37[v14];
      v44 = v37[v14 + 1];
      v37 += 2;
      *v38 = (((16843010 * (unint64_t)(57344 * v41)) >> 32)
                          + 8193
                          + ((16843010 * (unint64_t)(57344 * v43)) >> 32)) >> 1;
      v38[1] = (((16843010 * (unint64_t)(57344 * v42)) >> 32)
                            + 8193
                            + ((16843010 * (unint64_t)(57344 * v44)) >> 32)) >> 1;
      v38 += 2;
      v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v46 = 0;
    v47 = v25 - v34;
    do
    {
      v48 = v15;
      v49 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                           + 8193
                           + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)) >> 1;
        *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                            + 8193
                            + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)) >> 1;
        v22[1] = v50;
        v49 = v22 + 2;
      }
      if (v36)
      {
        v51 = -(uint64_t)v36;
        do
        {
          v52 = *v48;
          v53 = v48[1];
          v54 = v48[v14];
          v55 = v48[v14 + 1];
          v48 += 2;
          *v49 = (((16843010 * (unint64_t)(57344 * v52)) >> 32)
                              + 8193
                              + ((16843010 * (unint64_t)(57344 * v54)) >> 32)) >> 1;
          v49[1] = (((16843010 * (unint64_t)(57344 * v53)) >> 32)
                                + 8193
                                + ((16843010 * (unint64_t)(57344 * v55)) >> 32)) >> 1;
          v49 += 2;
          v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 2;
      *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = (16843010 * (unint64_t)(57344 * v37[1])) >> 32;
      *v38 = ((16843010 * (unint64_t)(57344 * *v37)) >> 32) + 4096;
      v38[1] = v41 + 4096;
      v37 += 2;
      v38 += 2;
      v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v43 = 0;
    v44 = v25 - v34;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v47[1] = v50 + 4096;
          v46 += 2;
          v47 += 2;
          v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  _WORD *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = (257 * (v16[v15 + 1] + v16[1]) + 1) >> 1;
      *v23 = (257 * (v16[v15] + *v16) + 1) >> 1;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38;
      v43 = v38[1];
      v44 = v38[v15];
      v45 = v38[v15 + 1];
      v38 += 2;
      *v39 = (257 * (v44 + v42) + 1) >> 1;
      v39[1] = (257 * (v45 + v43) + 1) >> 1;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = (257 * (v16[v15 + 1] + v16[1]) + 1) >> 1;
        *v23 = (257 * (v16[v15] + *v16) + 1) >> 1;
        v23[1] = v51;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49;
          v54 = v49[1];
          v55 = v49[v15];
          v56 = v49[v15 + 1];
          v49 += 2;
          *v50 = (257 * (v55 + v53) + 1) >> 1;
          v50[1] = (257 * (v56 + v54) + 1) >> 1;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = v16[1] | (v16[1] << 8);
      *v23 = *v16 | (*v16 << 8);
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = v38[1] | (v38[1] << 8);
      *v39 = *v38 | (*v38 << 8);
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] | (v16[1] << 8);
        *v23 = *v16 | (*v16 << 8);
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] | (v47[1] << 8);
          *v48 = *v47 | (*v47 << 8);
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_422f_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v17 >> 1;
  v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1)
    v28 = (v17 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1];
      v30 = v12 + 2;
      *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
      v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = 16 * ((16843010 * (unint64_t)(3584 * v33)) >> 32) + 4096;
          v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v34)) >> 32) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v12;
      v31 = v16;
      if (v28)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v12 += v11;
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v16;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1];
        v42 = v12 + 2;
        *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v16 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          *v43 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          v48 = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v12 += v11;
      v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12;
      v52 = v12[1];
      v12 += 2;
      *v16 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12;
        v55 = v12[1];
        v12 += 2;
        *v16 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      v57 = *v12;
      v58 = v12[1];
      *v16 = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v18 >> 1;
  v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1)
    v28 = (v18 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v13[1];
      v30 = v13 + 2;
      *v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
      v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = 16 * ((16843010 * (unint64_t)(3584 * v33)) >> 32) + 4096;
          v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v34)) >> 32) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v13;
      v31 = v17;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v19 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v17 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          *v43 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          v48 = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v17 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v24 + i))) >> 32);
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v18 >> 1;
  v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1)
    v28 = (v18 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v13[1];
      v30 = v13 + 2;
      *v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v37)) >> 32);
      v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = 16 * ((16843010 * (unint64_t)(4095 * v33)) >> 32);
          v31[1] = 16 * ((16843010 * (unint64_t)(4095 * v34)) >> 32);
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v13;
      v31 = v17;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
      v31[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v19 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
        v43 = v17 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = 16 * ((16843010 * (unint64_t)(4095 * *v42)) >> 32);
          *v43 = 16 * ((16843010 * (unint64_t)(4095 * *v42)) >> 32);
          v48 = 16 * ((16843010 * (unint64_t)(4095 * v46)) >> 32);
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
        v43[1] = 16 * ((16843010 * (unint64_t)(4095 * v50)) >> 32);
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 16 * ((16843010 * (unint64_t)(4095 * v51)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v52)) >> 32);
      v17 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 16 * ((16843010 * (unint64_t)(4095 * v54)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v55)) >> 32);
        v17 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = 16 * ((16843010 * (unint64_t)(4095 * v56)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v57)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = a7[2] + v28 * v18 + v19;
    v30 = *a7 + *a8 * v18 + v19;
    v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v24 >> 1;
  v37 = (v24 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v14[1];
      v38 = v14 + 2;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v14;
      v39 = v21;
      if (!v36)
        goto LABEL_25;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (16843010 * (unint64_t)(3584 * v38[1])) >> 32;
      *v39 = 16 * ((16843010 * (unint64_t)(3584 * *v38)) >> 32) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v35 & 1) != 0)
      {
        v48 = v14[1];
        v46 = v14 + 2;
        *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        v47 = v21 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v47[1] = 16 * v50 + 4096;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v21 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * v54 + 4096;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 2;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (16843010 * (unint64_t)(3584 * v36[1])) >> 32;
      *v37 = 16 * ((16843010 * (unint64_t)(3584 * *v36)) >> 32) + 4096;
      v37[1] = 16 * v40 + 4096;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 2;
        *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (16843010 * (unint64_t)(3584 * v44[1])) >> 32;
          *v45 = 16 * ((16843010 * (unint64_t)(3584 * *v44)) >> 32) + 4096;
          v45[1] = 16 * v48 + 4096;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * v52 + 4096;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v29 + i))) >> 32);
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 2;
      *v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (16843010 * (unint64_t)(4095 * v36[1])) >> 32;
      *v37 = 16 * ((16843010 * (unint64_t)(4095 * *v36)) >> 32);
      v37[1] = 16 * v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 2;
        *v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v46)) >> 32);
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (16843010 * (unint64_t)(4095 * v44[1])) >> 32;
          *v45 = 16 * ((16843010 * (unint64_t)(4095 * *v44)) >> 32);
          v45[1] = 16 * v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v50)) >> 32);
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (16843010 * (unint64_t)(4095 * v14[1])) >> 32;
        *v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v21[1] = 16 * v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  _WORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v15 + 2;
      v39 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32);
      *v22 = (8
            * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v15)) >> 32))
            + 4104) & 0xFFF0;
      v22[1] = (8 * v39 + 4104) & 0xFFF0;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = *v37;
      v42 = v37[1];
      v43 = v37[v14];
      v44 = v37[v14 + 1];
      v37 += 2;
      *v38 = (8
            * (((16843010 * (unint64_t)(3584 * v43)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v41)) >> 32))
            + 4104) & 0xFFF0;
      v38[1] = (8
              * (((16843010 * (unint64_t)(3584 * v44)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v42)) >> 32))
              + 4104) & 0xFFF0;
      v38 += 2;
      v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v46 = 0;
    v47 = v25 - v34;
    do
    {
      v48 = v15;
      v49 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32);
        *v22 = (8
              * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v15)) >> 32))
              + 4104) & 0xFFF0;
        v22[1] = (8 * v50 + 4104) & 0xFFF0;
        v49 = v22 + 2;
      }
      if (v36)
      {
        v51 = -(uint64_t)v36;
        do
        {
          v52 = *v48;
          v53 = v48[1];
          v54 = v48[v14];
          v55 = v48[v14 + 1];
          v48 += 2;
          *v49 = (8
                * (((16843010 * (unint64_t)(3584 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v52)) >> 32))
                + 4104) & 0xFFF0;
          v49[1] = (8
                  * (((16843010 * (unint64_t)(3584 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * v53)) >> 32))
                  + 4104) & 0xFFF0;
          v49 += 2;
          v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 2;
      *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = (16843010 * (unint64_t)(3584 * v37[1])) >> 32;
      *v38 = 16 * ((16843010 * (unint64_t)(3584 * *v37)) >> 32) + 4096;
      v38[1] = 16 * v41 + 4096;
      v37 += 2;
      v38 += 2;
      v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v43 = 0;
    v44 = v25 - v34;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v47[1] = 16 * v50 + 4096;
          v46 += 2;
          v47 += 2;
          v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  _WORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v15 + 2;
      v39 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32);
      *v22 = (8
            * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(4095 * *v15)) >> 32))
            + 8) & 0xFFF0;
      v22[1] = (8 * v39 + 8) & 0xFFF0;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = *v37;
      v42 = v37[1];
      v43 = v37[v14];
      v44 = v37[v14 + 1];
      v37 += 2;
      *v38 = (8
            * (((16843010 * (unint64_t)(4095 * v43)) >> 32)
             + ((16843010 * (unint64_t)(4095 * v41)) >> 32))
            + 8) & 0xFFF0;
      v38[1] = (8
              * (((16843010 * (unint64_t)(4095 * v44)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v42)) >> 32))
              + 8) & 0xFFF0;
      v38 += 2;
      v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v46 = 0;
    v47 = v25 - v34;
    do
    {
      v48 = v15;
      v49 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32);
        *v22 = (8
              * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v15)) >> 32))
              + 8) & 0xFFF0;
        v22[1] = (8 * v50 + 8) & 0xFFF0;
        v49 = v22 + 2;
      }
      if (v36)
      {
        v51 = -(uint64_t)v36;
        do
        {
          v52 = *v48;
          v53 = v48[1];
          v54 = v48[v14];
          v55 = v48[v14 + 1];
          v48 += 2;
          *v49 = (8
                * (((16843010 * (unint64_t)(4095 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v52)) >> 32))
                + 8) & 0xFFF0;
          v49[1] = (8
                  * (((16843010 * (unint64_t)(4095 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * v53)) >> 32))
                  + 8) & 0xFFF0;
          v49 += 2;
          v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 2;
      *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = (16843010 * (unint64_t)(4095 * v37[1])) >> 32;
      *v38 = 16 * ((16843010 * (unint64_t)(4095 * *v37)) >> 32);
      v38[1] = 16 * v41;
      v37 += 2;
      v38 += 2;
      v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v43 = 0;
    v44 = v25 - v34;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        v47 = v22 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          *v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          v47[1] = 16 * v50;
          v46 += 2;
          v47 += 2;
          v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_422f_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v24 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v17 >> 1;
  v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1)
    v28 = (v17 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1];
      v30 = v12 + 2;
      *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
      v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
          v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v12;
      v31 = v16;
      if (v28)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v12 += v11;
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v16;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1];
        v42 = v12 + 2;
        *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v16 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = ((16843010 * (unint64_t)(896 * *v42)) >> 32 << 6) + 4096;
          *v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v42)) >> 32) << 6) + 4096;
          v48 = ((16843010 * (unint64_t)(896 * v46)) >> 32 << 6) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v12 += v11;
      v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12;
      v52 = v12[1];
      v12 += 2;
      *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12;
        v55 = v12[1];
        v12 += 2;
        *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      v57 = *v12;
      v58 = v12[1];
      *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v24 + i))) >> 32) << 6)
                                  + 4096;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v18 >> 1;
  v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1)
    v28 = (v18 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v13[1];
      v30 = v13 + 2;
      *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
      v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
          v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v13;
      v31 = v17;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v19 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v17 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = ((16843010 * (unint64_t)(896 * *v42)) >> 32 << 6) + 4096;
          *v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v42)) >> 32) << 6) + 4096;
          v48 = ((16843010 * (unint64_t)(896 * v46)) >> 32 << 6) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v17 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v17 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v24 + i))) >> 32) << 6;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v18 >> 1;
  v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1)
    v28 = (v18 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v13[1];
      v30 = v13 + 2;
      *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v37)) >> 32) << 6;
      v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v33)) >> 32) << 6;
          v31[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v34)) >> 32) << 6;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v13;
      v31 = v17;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      v38 = *v30;
      v39 = v30[1];
      *v31 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
      v31[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v19 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
        v43 = v17 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1];
          v47 = (16843010 * (unint64_t)(1023 * *v42)) >> 32 << 6;
          *v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v42)) >> 32) << 6;
          v48 = (16843010 * (unint64_t)(1023 * v46)) >> 32 << 6;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
        v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v50)) >> 32) << 6;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v51)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v52)) >> 32) << 6;
      v17 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v55)) >> 32) << 6;
        v17 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v56)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v57)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = a7[2] + v28 * v18 + v19;
    v30 = *a7 + *a8 * v18 + v19;
    v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v24 >> 1;
  v37 = (v24 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v14[1];
      v38 = v14 + 2;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v14;
      v39 = v21;
      if (!v36)
        goto LABEL_25;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (16843010 * (unint64_t)(896 * v38[1])) >> 32;
      *v39 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v38)) >> 32) << 6) + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v35 & 1) != 0)
      {
        v48 = v14[1];
        v46 = v14 + 2;
        *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        v47 = v21 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v47[1] = ((_WORD)v50 << 6) + 4096;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v54 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v29 + i))) >> 32) << 6)
                                  + 4096;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 2;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (16843010 * (unint64_t)(896 * v36[1])) >> 32;
      *v37 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v36)) >> 32) << 6) + 4096;
      v37[1] = ((_WORD)v40 << 6) + 4096;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 2;
        *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (16843010 * (unint64_t)(896 * v44[1])) >> 32;
          *v45 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v44)) >> 32) << 6) + 4096;
          v45[1] = ((_WORD)v48 << 6) + 4096;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v52 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v29 + i))) >> 32) << 6;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 2;
      *v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (16843010 * (unint64_t)(1023 * v36[1])) >> 32;
      *v37 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v36)) >> 32) << 6;
      v37[1] = (_WORD)v40 << 6;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 2;
        *v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v46)) >> 32) << 6;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (16843010 * (unint64_t)(1023 * v44[1])) >> 32;
          *v45 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v44)) >> 32) << 6;
          v45[1] = (_WORD)v48 << 6;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v50)) >> 32) << 6;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (16843010 * (unint64_t)(1023 * v14[1])) >> 32;
        *v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v21[1] = (_WORD)v52 << 6;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  _WORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v15 + 2;
      v39 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(896 * v15[1])) >> 32);
      *v22 = (32
            * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v15)) >> 32))
            + 4128) & 0xFFC0;
      v22[1] = (32 * v39 + 4128) & 0xFFC0;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = *v37;
      v42 = v37[1];
      v43 = v37[v14];
      v44 = v37[v14 + 1];
      v37 += 2;
      *v38 = (32
            * (((16843010 * (unint64_t)(896 * v43)) >> 32)
             + ((16843010 * (unint64_t)(896 * v41)) >> 32))
            + 4128) & 0xFFC0;
      v38[1] = (32
              * (((16843010 * (unint64_t)(896 * v44)) >> 32)
               + ((16843010 * (unint64_t)(896 * v42)) >> 32))
              + 4128) & 0xFFC0;
      v38 += 2;
      v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v46 = 0;
    v47 = v25 - v34;
    do
    {
      v48 = v15;
      v49 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(896 * v15[1])) >> 32);
        *v22 = (32
              * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v15)) >> 32))
              + 4128) & 0xFFC0;
        v22[1] = (32 * v50 + 4128) & 0xFFC0;
        v49 = v22 + 2;
      }
      if (v36)
      {
        v51 = -(uint64_t)v36;
        do
        {
          v52 = *v48;
          v53 = v48[1];
          v54 = v48[v14];
          v55 = v48[v14 + 1];
          v48 += 2;
          *v49 = (32
                * (((16843010 * (unint64_t)(896 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v52)) >> 32))
                + 4128) & 0xFFC0;
          v49[1] = (32
                  * (((16843010 * (unint64_t)(896 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(896 * v53)) >> 32))
                  + 4128) & 0xFFC0;
          v49 += 2;
          v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 2;
      *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = (16843010 * (unint64_t)(896 * v37[1])) >> 32;
      *v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v37)) >> 32) << 6) + 4096;
      v38[1] = ((_WORD)v41 << 6) + 4096;
      v37 += 2;
      v38 += 2;
      v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v43 = 0;
    v44 = v25 - v34;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        v47 = v22 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v47[1] = ((_WORD)v50 << 6) + 4096;
          v46 += 2;
          v47 += 2;
          v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  _WORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v15 + 2;
      v39 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32);
      *v22 = (32
            * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(1023 * *v15)) >> 32))
            + 32) & 0xFFC0;
      v22[1] = (32 * v39 + 32) & 0xFFC0;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = *v37;
      v42 = v37[1];
      v43 = v37[v14];
      v44 = v37[v14 + 1];
      v37 += 2;
      *v38 = (32
            * (((16843010 * (unint64_t)(1023 * v43)) >> 32)
             + ((16843010 * (unint64_t)(1023 * v41)) >> 32))
            + 32) & 0xFFC0;
      v38[1] = (32
              * (((16843010 * (unint64_t)(1023 * v44)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v42)) >> 32))
              + 32) & 0xFFC0;
      v38 += 2;
      v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v46 = 0;
    v47 = v25 - v34;
    do
    {
      v48 = v15;
      v49 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32);
        *v22 = (32
              * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v15)) >> 32))
              + 32) & 0xFFC0;
        v22[1] = (32 * v50 + 32) & 0xFFC0;
        v49 = v22 + 2;
      }
      if (v36)
      {
        v51 = -(uint64_t)v36;
        do
        {
          v52 = *v48;
          v53 = v48[1];
          v54 = v48[v14];
          v55 = v48[v14 + 1];
          v48 += 2;
          *v49 = (32
                * (((16843010 * (unint64_t)(1023 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v52)) >> 32))
                + 32) & 0xFFC0;
          v49[1] = (32
                  * (((16843010 * (unint64_t)(1023 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * v53)) >> 32))
                  + 32) & 0xFFC0;
          v49 += 2;
          v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1))
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 2;
      *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v15;
      v38 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = (16843010 * (unint64_t)(1023 * v37[1])) >> 32;
      *v38 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v37)) >> 32) << 6;
      v38[1] = (_WORD)v41 << 6;
      v37 += 2;
      v38 += 2;
      v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    v43 = 0;
    v44 = v25 - v34;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        v47 = v22 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          *v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          v47[1] = (_WORD)v50 << 6;
          v46 += 2;
          v47 += 2;
          v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_422f_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_BYTE *)(a7[1] + v15 * v13 + 2 * v14);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v13;
    v22 = *a7 + *a8 * v13;
    v23 = *a4;
    v24 = v21 + v14;
    v25 = v22 + v14;
    v26 = *a3 + v23 * v8 + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_BYTE *)(v24 + i) = -1;
          *(_BYTE *)(v25 + i) = ((7204443 * *(unsigned __int8 *)(v26 + i)) >> 23) + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  if (v10 >= (v8 & 1u))
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v17 >> 1;
  v31 = v9 & 1;
  if (v17 >> 1 >= (v17 - v31) >> 1)
    v30 = (v17 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v32 = v12 + 2;
      v39 = (7368928 * v12[1]) >> 23;
      *v16 = ((7368928 * *v12) >> 23) + 16;
      v16[1] = v39 + 16;
      v33 = v16 + 2;
      if (v30)
      {
LABEL_20:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          v32 += 2;
          *v33 = ((7368928 * v35) >> 23) + 16;
          v33[1] = ((7368928 * v36) >> 23) + 16;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      v32 = v12;
      v33 = v16;
      if (v30)
        goto LABEL_20;
    }
    v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v17)
    {
      v40 = *v32;
      v41 = (7368928 * v32[1]) >> 23;
      *v33 = ((7368928 * v40) >> 23) + 16;
      v33[1] = v41 + 16;
    }
    v12 += v11;
    v16 += v15;
  }
  if (v10 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v10 - v28;
    do
    {
      v44 = v12;
      v45 = v16;
      if ((v29 & 1) != 0)
      {
        v44 = v12 + 2;
        v46 = (7368928 * v12[1]) >> 23;
        *v16 = ((7368928 * *v12) >> 23) + 16;
        v16[1] = v46 + 16;
        v45 = v16 + 2;
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = (7368928 * v44[1]) >> 23;
          v49 = ((7368928 * *v44) >> 23) + 16;
          *v45 = ((7368928 * *v44) >> 23) + 16;
          LOBYTE(v48) = v48 + 16;
          v45[1] = v48;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v48;
          v45 += 4;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v17)
      {
        v50 = *v44;
        v51 = (7368928 * v44[1]) >> 23;
        *v45 = ((7368928 * v50) >> 23) + 16;
        v45[1] = v51 + 16;
      }
      v12 += v11;
      v16 += v15;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v10)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v12;
      v53 = v12[1];
      v12 += 2;
      *v16 = ((7368928 * v52) >> 23) + 16;
      v16[1] = ((7368928 * v53) >> 23) + 16;
      v16 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v12;
        v56 = v12[1];
        v12 += 2;
        *v16 = ((7368928 * v55) >> 23) + 16;
        v16[1] = ((7368928 * v56) >> 23) + 16;
        v16 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v17)
    {
      v58 = *v12;
      v59 = (7368928 * v12[1]) >> 23;
      *v16 = ((7368928 * v58) >> 23) + 16;
      v16[1] = v59 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v14 + v13;
    v24 = *a3 + *a4 * v8 + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v23 + i) = ((7204443 * *(unsigned __int8 *)(v24 + i)) >> 23) + 16;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v19 >> 1;
  v29 = v9 & 1;
  if (v19 >> 1 >= (v19 - v29) >> 1)
    v28 = (v19 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v30 = v12 + 2;
      v37 = (7368928 * v12[1]) >> 23;
      *v18 = ((7368928 * *v12) >> 23) + 16;
      v18[1] = v37 + 16;
      v31 = v18 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30;
          v34 = v30[1];
          v30 += 2;
          *v31 = ((7368928 * v33) >> 23) + 16;
          v31[1] = ((7368928 * v34) >> 23) + 16;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v12;
      v31 = v18;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v19)
    {
      v38 = *v30;
      v39 = (7368928 * v30[1]) >> 23;
      *v31 = ((7368928 * v38) >> 23) + 16;
      v31[1] = v39 + 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v18;
      if ((v27 & 1) != 0)
      {
        v42 = v12 + 2;
        v44 = (7368928 * v12[1]) >> 23;
        *v18 = ((7368928 * *v12) >> 23) + 16;
        v18[1] = v44 + 16;
        v43 = v18 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = (7368928 * v42[1]) >> 23;
          v47 = ((7368928 * *v42) >> 23) + 16;
          *v43 = ((7368928 * *v42) >> 23) + 16;
          LOBYTE(v46) = v46 + 16;
          v43[1] = v46;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v46;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v19)
      {
        v48 = *v42;
        v49 = (7368928 * v42[1]) >> 23;
        *v43 = ((7368928 * v48) >> 23) + 16;
        v43[1] = v49 + 16;
      }
      v12 += v11;
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v50 = *v12;
      v51 = v12[1];
      v12 += 2;
      *v18 = ((7368928 * v50) >> 23) + 16;
      v18[1] = ((7368928 * v51) >> 23) + 16;
      v18 += 2;
    }
    if (v28)
    {
      v52 = -(uint64_t)v28;
      do
      {
        v53 = *v12;
        v54 = v12[1];
        v12 += 2;
        *v18 = ((7368928 * v53) >> 23) + 16;
        v18[1] = ((7368928 * v54) >> 23) + 16;
        v18 += 2;
        v35 = __CFADD__(v52++, 1);
      }
      while (!v35);
      v55 = 2 * v28;
    }
    else
    {
      v55 = 0;
    }
    if ((v55 | (unint64_t)v29) < v19)
    {
      v56 = *v12;
      v57 = (7368928 * v12[1]) >> 23;
      *v18 = ((7368928 * v56) >> 23) + 16;
      v18[1] = v57 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  size_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  size_t v26;
  uint64_t v27;
  __int16 *v28;
  __int16 *v29;
  uint64_t v30;
  __int16 v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  __int16 *v37;
  uint64_t v38;
  char v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v45;
  uint64_t v46;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (__int16 *)(a3[1] + v10 * v9 + (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a8[1];
  v15 = (__int16 *)(a7[1] + v14 * v13 + 2 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v16 = a6[2];
  else
    v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v45 = v17;
    v46 = a4[1];
    v19 = *a4;
    v20 = *a8;
    v21 = (char *)(*a7 + *a8 * v13 + v12);
    v22 = (char *)(*a3 + *a4 * v9 + (v8 & 0xFFFFFFFE));
    do
    {
      memcpy(v21, v22, v16);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    v8 = a2[4];
    v9 = a2[5];
    v17 = v45;
    v10 = v46;
  }
  v23 = v9 & 1;
  if (v17 >= v23)
    v24 = v9 & 1;
  else
    v24 = 0;
  v25 = v8;
  v26 = v16 >> 1;
  v27 = v8 & 1;
  if (v16 >> 1 >= (v16 - v27) >> 1)
    v26 = (v16 - v27) >> 1;
  if ((v9 & 1) != 0)
  {
    v28 = v11;
    if ((v25 & 1) != 0)
    {
      v28 = v11 + 1;
      *v15 = *v11;
      v29 = v15 + 1;
      if (v26)
      {
LABEL_19:
        v30 = -(uint64_t)v26;
        do
        {
          v31 = *v28++;
          *v29++ = v31;
          v32 = __CFADD__(v30++, 1);
        }
        while (!v32);
        v33 = 2 * v26;
        goto LABEL_25;
      }
    }
    else
    {
      v29 = v15;
      if (v26)
        goto LABEL_19;
    }
    v33 = 0;
LABEL_25:
    if ((v33 | (unint64_t)v27) < v16)
      *v29 = *v28;
    v11 = (__int16 *)((char *)v11 + v10);
    v15 = (__int16 *)((char *)v15 + v14);
  }
  if (v17 == v24)
  {
    v34 = 0;
  }
  else
  {
    v35 = 0;
    v34 = v17 - v24;
    do
    {
      v36 = (char *)v11;
      v37 = v15;
      if ((v25 & 1) != 0)
      {
        v36 = (char *)(v11 + 1);
        *v15 = *v11;
        v37 = v15 + 1;
      }
      if (v26)
      {
        v38 = -(uint64_t)v26;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *(_BYTE *)v37 = v39;
          *((_BYTE *)v37 + 1) = v40;
          *((_BYTE *)v37 + 2) = v39;
          *((_BYTE *)v37 + 3) = v40;
          v37 += 2;
          v32 = __CFADD__(v38++, 1);
        }
        while (!v32);
      }
      if ((v27 | (2 * v26)) < v16)
        *v37 = *(_WORD *)v36;
      v11 = (__int16 *)((char *)v11 + v10);
      v15 = (__int16 *)((char *)v15 + v14);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v23 < v17)
  {
    if ((v25 & 1) != 0)
    {
      v41 = *v11++;
      *v15++ = v41;
    }
    if (v26)
    {
      v42 = -(uint64_t)v26;
      do
      {
        v43 = *v11++;
        *v15++ = v43;
        v32 = __CFADD__(v42++, 1);
      }
      while (!v32);
      v26 *= 2;
    }
    if ((v26 | v27) < v16)
      *v15 = *v11;
  }
  return 0;
}

uint64_t vt_Copy_422f_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a8;
    v25 = a8[2];
    v26 = *a4;
    v27 = a7[2] + v25 * v18 + v16;
    v28 = *a7 + *a8 * v18 + v16;
    v29 = *a3 + v26 * v12 + v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v27 + i) = -1;
          *(_BYTE *)(v28 + i) = ((7204443 * *(unsigned __int8 *)(v29 + i)) >> 23) + 16;
        }
      }
      v29 += v26;
      v28 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v21 >> 1;
  v34 = v21 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = (7368928 * v14[1]) >> 23;
      *v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v38 + 16;
      v37 = v20 + 2;
      if (!v35)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (!v35)
        goto LABEL_26;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = (7368928 * v36[1]) >> 23;
      *v37 = ((7368928 * *v36) >> 23) + 16;
      v37[1] = v40 + 16;
      v37 += 2;
      v36 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v20;
      if ((v9 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v46 + 16;
        v45 = v20 + 2;
      }
      if (v35)
      {
        v47 = -(uint64_t)v35;
        do
        {
          v48 = (7368928 * v44[1]) >> 23;
          *v45 = ((7368928 * *v44) >> 23) + 16;
          v45[1] = v48 + 16;
          v45 += 2;
          v44 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v20 += v19;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v20 = ((7368928 * v49) >> 23) + 16;
      v20[1] = ((7368928 * v50) >> 23) + 16;
      v20 += 2;
    }
    if (v35)
    {
      v51 = -(uint64_t)v35;
      do
      {
        v52 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v52 + 16;
        v20 += 2;
        v14 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v21 >> 1;
  v32 = v21 - v10;
  if (v31 >= v32 >> 1)
    v33 = v32 >> 1;
  else
    v33 = v31;
  if ((v12 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v34 = v14 + 2;
      v36 = (7368928 * v14[1]) >> 23;
      *v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v36 + 16;
      v35 = v20 + 2;
      if (!v33)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v34 = v14;
      v35 = v20;
      if (!v33)
        goto LABEL_26;
    }
    v37 = -(uint64_t)v33;
    do
    {
      v38 = (7368928 * v34[1]) >> 23;
      *v35 = ((7368928 * *v34) >> 23) + 16;
      v35[1] = v38 + 16;
      v35 += 2;
      v34 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v20;
      if ((v9 & 1) != 0)
      {
        v42 = v14 + 2;
        v44 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v44 + 16;
        v43 = v20 + 2;
      }
      if (v33)
      {
        v45 = -(uint64_t)v33;
        do
        {
          v46 = (7368928 * v42[1]) >> 23;
          *v43 = ((7368928 * *v42) >> 23) + 16;
          v43[1] = v46 + 16;
          v43 += 2;
          v42 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 += v13;
      v20 += v19;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 2;
      *v20 = ((7368928 * v47) >> 23) + 16;
      v20[1] = ((7368928 * v48) >> 23) + 16;
      v20 += 2;
    }
    if (v33)
    {
      v49 = -(uint64_t)v33;
      do
      {
        v50 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v50 + 16;
        v20 += 2;
        v14 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v23)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v13;
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v11 + v30;
    v32 = a7[2] + v28 * v19 + v17;
    v33 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = ((7204443 * *(unsigned __int8 *)(v31 + i)) >> 23) + 16;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v23 >> 1;
  v37 = v23 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v16 + 2;
      v41 = (((7368928 * v16[1]) >> 23) + ((7368928 * v16[v15 + 1]) >> 23) + 33) >> 1;
      *v22 = (((7368928 * *v16) >> 23) + ((7368928 * v16[v15]) >> 23) + 33) >> 1;
      v22[1] = v41;
      v40 = v22 + 2;
      if (!v38)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (!v38)
        goto LABEL_29;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = *v39;
      v44 = v39[1];
      v45 = v39[v15];
      v46 = v39[v15 + 1];
      v39 += 2;
      *v40 = (((7368928 * v43) >> 23) + ((7368928 * v45) >> 23) + 33) >> 1;
      v40[1] = (((7368928 * v44) >> 23) + ((7368928 * v46) >> 23) + 33) >> 1;
      v40 += 2;
      v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v35)
  {
    v48 = 0;
    v49 = v24 - v35;
    do
    {
      v50 = v16;
      v51 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (((7368928 * v16[1]) >> 23) + ((7368928 * v16[v15 + 1]) >> 23) + 33) >> 1;
        *v22 = (((7368928 * *v16) >> 23) + ((7368928 * v16[v15]) >> 23) + 33) >> 1;
        v22[1] = v52;
        v51 = v22 + 2;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = *v50;
          v55 = v50[1];
          v56 = v50[v15];
          v57 = v50[v15 + 1];
          v50 += 2;
          *v51 = (((7368928 * v54) >> 23) + ((7368928 * v56) >> 23) + 33) >> 1;
          v51[1] = (((7368928 * v55) >> 23) + ((7368928 * v57) >> 23) + 33) >> 1;
          v51 += 2;
          v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v16 += 2 * v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _BYTE *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v23)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v13;
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v11 + v30;
    v32 = a7[2] + v28 * v19 + v17;
    v33 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = ((7204443 * *(unsigned __int8 *)(v31 + i)) >> 23) + 16;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v23 >> 1;
  v37 = v23 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v16 + 2;
      v41 = (7368928 * v16[1]) >> 23;
      *v22 = ((7368928 * *v16) >> 23) + 16;
      v22[1] = v41 + 16;
      v40 = v22 + 2;
      if (!v38)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (!v38)
        goto LABEL_29;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (7368928 * v39[1]) >> 23;
      *v40 = ((7368928 * *v39) >> 23) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v35)
  {
    v45 = 0;
    v46 = v24 - v35;
    v47 = 2 * v15;
    do
    {
      v48 = v16;
      v49 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v16 + 2;
        v50 = (7368928 * v16[1]) >> 23;
        *v22 = ((7368928 * *v16) >> 23) + 16;
        v22[1] = v50 + 16;
        v49 = v22 + 2;
      }
      if (v38)
      {
        v51 = -(uint64_t)v38;
        do
        {
          v52 = (7368928 * v48[1]) >> 23;
          *v49 = ((7368928 * *v48) >> 23) + 16;
          v49[1] = v52 + 16;
          v49 += 2;
          v48 += 2;
          v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      v16 += v47;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  _BYTE *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v13;
    if (v13 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v11 + v29;
    v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  v34 = v22 >> 1;
  v35 = v22 - v10;
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v15 + 2;
      v39 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
      *v21 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
      v21[1] = v39;
      v38 = v21 + 2;
      if (!v36)
      {
LABEL_29:
        v15 += 2 * v14;
        v21 += v20;
        goto LABEL_30;
      }
    }
    else
    {
      v37 = v15;
      v38 = v21;
      if (!v36)
        goto LABEL_29;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = *v37;
      v42 = v37[1];
      v43 = v37[v14];
      v44 = v37[v14 + 1];
      v37 += 2;
      *v38 = (((7368928 * v41) >> 23) + ((7368928 * v43) >> 23) + 33) >> 1;
      v38[1] = (((7368928 * v42) >> 23) + ((7368928 * v44) >> 23) + 33) >> 1;
      v38 += 2;
      v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    v46 = 0;
    v47 = v24 - v33;
    do
    {
      v48 = v15;
      v49 = v21;
      if ((v9 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
        *v21 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
        v21[1] = v50;
        v49 = v21 + 2;
      }
      if (v36)
      {
        v51 = -(uint64_t)v36;
        do
        {
          v52 = *v48;
          v53 = v48[1];
          v54 = v48[v14];
          v55 = v48[v14 + 1];
          v48 += 2;
          *v49 = (((7368928 * v52) >> 23) + ((7368928 * v54) >> 23) + 33) >> 1;
          v49[1] = (((7368928 * v53) >> 23) + ((7368928 * v55) >> 23) + 33) >> 1;
          v49 += 2;
          v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      v21 += v20;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v23)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v13;
    if (v13 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v11 + v29;
    v31 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  v34 = v23 >> 1;
  v35 = v23 - v10;
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v16 + 2;
      v39 = (7368928 * v16[1]) >> 23;
      *v22 = ((7368928 * *v16) >> 23) + 16;
      v22[1] = v39 + 16;
      v38 = v22 + 2;
      if (!v36)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v37 = v16;
      v38 = v22;
      if (!v36)
        goto LABEL_29;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = (7368928 * v37[1]) >> 23;
      *v38 = ((7368928 * *v37) >> 23) + 16;
      v38[1] = v41 + 16;
      v38 += 2;
      v37 += 2;
      v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    v43 = 0;
    v44 = v24 - v33;
    v45 = 2 * v15;
    do
    {
      v46 = v16;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v46 = v16 + 2;
        v48 = (7368928 * v16[1]) >> 23;
        *v22 = ((7368928 * *v16) >> 23) + 16;
        v22[1] = v48 + 16;
        v47 = v22 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = (7368928 * v46[1]) >> 23;
          *v47 = ((7368928 * *v46) >> 23) + 16;
          v47[1] = v50 + 16;
          v47 += 2;
          v46 += 2;
          v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v16 += v45;
      v22 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  size_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v54 = v24;
    v25 = *a4;
    v26 = *a8;
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v17);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v24 = v54;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v33 = (v23 - v10) >> 1;
  else
    v33 = v23 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v34 = v16 + 2;
      v36 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v36;
      v35 = v22 + 2;
      if (!v33)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v34 = v16;
      v35 = v22;
      if (!v33)
        goto LABEL_29;
    }
    v37 = -(uint64_t)v33;
    do
    {
      v38 = *v34;
      v39 = v34[1];
      v40 = v34[v15];
      v41 = v34[v15 + 1];
      v34 += 2;
      *v35 = (v38 + v40 + 1) >> 1;
      v35[1] = (v39 + v41 + 1) >> 1;
      v35 += 2;
      v31 = __CFADD__(v37++, 1);
    }
    while (!v31);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    do
    {
      v44 = v16;
      v45 = v22;
      if ((v8 & 1) != 0)
      {
        v44 = v16 + 2;
        v46 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v46;
        v45 = v22 + 2;
      }
      if (v33)
      {
        v47 = -(uint64_t)v33;
        do
        {
          v48 = *v44;
          v49 = v44[1];
          v50 = v44[v15];
          v51 = v44[v15 + 1];
          v44 += 2;
          *v45 = (v48 + v50 + 1) >> 1;
          v45[1] = (v49 + v51 + 1) >> 1;
          v45 += 2;
          v31 = __CFADD__(v47++, 1);
        }
        while (!v31);
      }
      v16 += 2 * v15;
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  size_t v33;
  __int16 *v34;
  __int16 *v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  __int16 *v40;
  __int16 *v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v45;
  uint64_t v46;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = v10 & 1;
  v14 = v13 + v10;
  v15 = (*(_DWORD *)(a2 + 24) + (_DWORD)v10) & 0xFFFFFFFE;
  v16 = a4[1];
  v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + ((v11 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                                          - v18)
    v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v12;
  v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v45 = v24;
    v46 = a4[1];
    v25 = *a4;
    v26 = *a8;
    if (v14 >= v10)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v18);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v9 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 40) & 1;
    v11 = v9 & 1;
    v24 = v45;
    v16 = v46;
  }
  if (v24 >= v13)
    v32 = v13;
  else
    v32 = 0;
  if (v23 >> 1 >= (v23 - v11) >> 1)
    v33 = (v23 - v11) >> 1;
  else
    v33 = v23 >> 1;
  if (v13)
  {
    v34 = v17;
    if ((v9 & 1) != 0)
    {
      v34 = v17 + 1;
      *v22 = *v17;
      v35 = v22 + 1;
      if (!v33)
      {
LABEL_28:
        v17 += v16;
        v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v22;
      if (!v33)
        goto LABEL_28;
    }
    v36 = -(uint64_t)v33;
    do
    {
      v37 = *v34++;
      *v35++ = v37;
      v31 = __CFADD__(v36++, 1);
    }
    while (!v31);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v32)
  {
    v38 = 0;
    v39 = v24 - v32;
    do
    {
      v40 = v17;
      v41 = v22;
      if ((v9 & 1) != 0)
      {
        v40 = v17 + 1;
        *v22 = *v17;
        v41 = v22 + 1;
      }
      if (v33)
      {
        v42 = -(uint64_t)v33;
        do
        {
          v43 = *v40++;
          *v41++ = v43;
          v31 = __CFADD__(v42++, 1);
        }
        while (!v31);
      }
      v17 += v16;
      v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  _BYTE *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v11 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v24 >> 1;
  v38 = v24 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = v15 + 2;
      v43 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
      *v22 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
      v41 = v22 + 1;
      *v23 = v43;
      v42 = v23 + 1;
      if (!v39)
      {
LABEL_29:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      v42 = v23;
      if (!v39)
        goto LABEL_29;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = *v40;
      v46 = v40[1];
      v47 = v40[v14];
      v48 = v40[v14 + 1];
      v40 += 2;
      *v41++ = (((7368928 * v45) >> 23) + ((7368928 * v47) >> 23) + 33) >> 1;
      *v42++ = (((7368928 * v46) >> 23) + ((7368928 * v48) >> 23) + 33) >> 1;
      v49 = __CFADD__(v44++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    v50 = 0;
    v51 = v26 - v36;
    do
    {
      v52 = v15;
      v53 = v22;
      v54 = v23;
      if ((v8 & 1) != 0)
      {
        v52 = v15 + 2;
        v55 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
        *v22 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
        v53 = v22 + 1;
        *v23 = v55;
        v54 = v23 + 1;
      }
      if (v39)
      {
        v56 = -(uint64_t)v39;
        do
        {
          v57 = *v52;
          v58 = v52[1];
          v59 = v52[v14];
          v60 = v52[v14 + 1];
          v52 += 2;
          *v53++ = (((7368928 * v57) >> 23) + ((7368928 * v59) >> 23) + 33) >> 1;
          *v54++ = (((7368928 * v58) >> 23) + ((7368928 * v60) >> 23) + 33) >> 1;
          v49 = __CFADD__(v56++, 1);
        }
        while (!v49);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v11 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v24 >> 1;
  v38 = v24 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = v15 + 2;
      v43 = (7368928 * v15[1]) >> 23;
      *v22 = ((7368928 * *v15) >> 23) + 16;
      v41 = v22 + 1;
      *v23 = v43 + 16;
      v42 = v23 + 1;
      if (!v39)
      {
LABEL_29:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      v42 = v23;
      if (!v39)
        goto LABEL_29;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = 7368928 * v40[1];
      *v41++ = ((7368928 * *v40) >> 23) + 16;
      *v42++ = (v45 >> 23) + 16;
      v40 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    v47 = 0;
    v48 = v26 - v36;
    v49 = 2 * v14;
    do
    {
      v50 = v15;
      v51 = v22;
      v52 = v23;
      if ((v8 & 1) != 0)
      {
        v50 = v15 + 2;
        v53 = (7368928 * v15[1]) >> 23;
        *v22 = ((7368928 * *v15) >> 23) + 16;
        v51 = v22 + 1;
        *v23 = v53 + 16;
        v52 = v23 + 1;
      }
      if (v39)
      {
        v54 = -(uint64_t)v39;
        do
        {
          v55 = 7368928 * v50[1];
          *v51++ = ((7368928 * *v50) >> 23) + 16;
          *v52++ = (v55 >> 23) + 16;
          v50 += 2;
          v46 = __CFADD__(v54++, 1);
        }
        while (!v46);
      }
      v15 += v49;
      v22 += v20;
      v23 += v21;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  size_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  else
    v26 = v14 - v13;
  if (v26)
  {
    v58 = v26;
    v59 = a8[2];
    v60 = a8[1];
    v27 = *a4;
    v28 = *a8;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    v31 = (char *)(*a7 + v28 * v19 + v17);
    v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
      v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    v26 = v58;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v22 = v59;
    v21 = v60;
  }
  if (v26 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v25 >> 1 >= (v25 - v10) >> 1)
    v35 = (v25 - v10) >> 1;
  else
    v35 = v25 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = v16 + 2;
      v39 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *v23 = (*v16 + v16[v15] + 1) >> 1;
      v37 = v23 + 1;
      *v24 = v39;
      v38 = v24 + 1;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v23;
      v38 = v24;
      if (!v35)
        goto LABEL_29;
    }
    v40 = -(uint64_t)v35;
    do
    {
      v41 = *v36;
      v42 = v36[1];
      v43 = v36[v15];
      v44 = v36[v15 + 1];
      v36 += 2;
      *v37++ = (v41 + v43 + 1) >> 1;
      *v38++ = (v42 + v44 + 1) >> 1;
      v33 = __CFADD__(v40++, 1);
    }
    while (!v33);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v34)
  {
    v45 = 0;
    v46 = v26 - v34;
    do
    {
      v47 = v16;
      v48 = v23;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v47 = v16 + 2;
        v50 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *v23 = (*v16 + v16[v15] + 1) >> 1;
        v48 = v23 + 1;
        *v24 = v50;
        v49 = v24 + 1;
      }
      if (v35)
      {
        v51 = -(uint64_t)v35;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v54 = v47[v15];
          v55 = v47[v15 + 1];
          v47 += 2;
          *v48++ = (v52 + v54 + 1) >> 1;
          *v49++ = (v53 + v55 + 1) >> 1;
          v33 = __CFADD__(v51++, 1);
        }
        while (!v33);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  size_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  char v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  uint64_t v47;
  char v48;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (_BYTE *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v17 - v16)
    v24 = v17 - v16;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v25 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v25 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v25)
  {
    v51 = v25;
    v52 = a4[1];
    v53 = a8[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v16);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, v24);
      v29 += v26;
      v30 += v27;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v25 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v14 = v52;
    v20 = v53;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 >> 1 >= (v24 - v10) >> 1)
    v34 = (v24 - v10) >> 1;
  else
    v34 = v24 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = v15[1];
      v35 = v15 + 2;
      *v22 = *v15;
      v36 = v22 + 1;
      *v23 = v38;
      v37 = v23 + 1;
      if (!v34)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v15;
      v36 = v22;
      v37 = v23;
      if (!v34)
        goto LABEL_28;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v35[1];
      *v36++ = *v35;
      *v37++ = v40;
      v35 += 2;
      v32 = __CFADD__(v39++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v33)
  {
    v41 = 0;
    v42 = v25 - v33;
    do
    {
      v43 = v15;
      v44 = v22;
      v45 = v23;
      if ((v8 & 1) != 0)
      {
        v46 = v15[1];
        v43 = v15 + 2;
        *v22 = *v15;
        v44 = v22 + 1;
        *v23 = v46;
        v45 = v23 + 1;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v43[1];
          *v44++ = *v43;
          *v45++ = v48;
          v43 += 2;
          v32 = __CFADD__(v47++, 1);
        }
        while (!v32);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  _WORD *v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a4[1];
    v11 = a4[2];
    v13 = *a4;
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v12 * v17;
    v20 = a3[2] + v11 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 2 * v16;
    v23 = v20 + v16;
    v24 = v21 + v16;
    do
    {
      if (v8)
      {
        v25 = 0;
        v26 = 0;
        for (i = 0; i != v8; ++i)
        {
          v28 = (_WORD *)(v15 + v26);
          v29 = *(unsigned __int8 *)(v22 + v25) << 8;
          v30 = *(unsigned __int8 *)(v22 + v25 + 1) << 8;
          v31 = *(unsigned __int8 *)(v24 + i) << 8;
          *v28 = *(unsigned __int8 *)(v23 + i) | (*(unsigned __int8 *)(v23 + i) << 8);
          v28[1] = v31;
          v28[2] = v29;
          v28[3] = v30;
          v26 += 8;
          v25 += 2;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  __int16 v29;
  char v30;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a4[1];
    v11 = a4[2];
    v13 = *a4;
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v12 * v17;
    v20 = a3[2] + v11 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 2 * v16;
    v23 = v20 + v16;
    v24 = v21 + v16;
    do
    {
      if (v8)
      {
        v25 = 0;
        v26 = 0;
        for (i = 0; i != v8; ++i)
        {
          v28 = v15 + v26;
          v29 = *(_WORD *)(v22 + v25);
          v30 = *(_BYTE *)(v24 + i);
          *(_BYTE *)v28 = *(_BYTE *)(v23 + i);
          *(_BYTE *)(v28 + 1) = v30;
          *(_WORD *)(v28 + 2) = v29;
          v26 += 4;
          v25 += 2;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * v20);
          v23 = (*(unsigned __int8 *)(v18 + v20 + 3) + (unsigned __int16)*(unsigned __int8 *)(v18 + v20 + 1)) << 7;
          v24 = *(unsigned __int8 *)(v19 + i) << 8;
          v25 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          *v22 = (*(unsigned __int8 *)(v18 + v20 + 2) + (unsigned __int16)*(unsigned __int8 *)(v18 + v20)) << 7;
          v22[1] = v24;
          v22[2] = v23;
          v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * v20);
          v23 = *(unsigned __int8 *)(v18 + v20 + 1) << 8;
          v24 = *(unsigned __int8 *)(v19 + i) << 8;
          v25 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          *v22 = *(unsigned __int8 *)(v18 + v20) << 8;
          v22[1] = v24;
          v22[2] = v23;
          v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  unsigned int v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + v20);
          v23 = (*(unsigned __int8 *)(v18 + v20 + 1) + *(unsigned __int8 *)(v18 + v20 + 3) + 1) >> 1;
          v24 = *(_BYTE *)(v19 + i);
          v25 = *(_BYTE *)(v19 + i + 1);
          *v22 = (*(unsigned __int8 *)(v18 + v20) + *(unsigned __int8 *)(v18 + v20 + 2) + 1) >> 1;
          v22[1] = v24;
          v22[2] = v23;
          v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  char v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + v20);
          v23 = *(_BYTE *)(v18 + v20 + 1);
          v24 = *(_BYTE *)(v19 + i);
          v25 = *(_BYTE *)(v19 + i + 1);
          *v22 = *(_BYTE *)(v18 + v20);
          v22[1] = v24;
          v22[2] = v23;
          v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + 2 * v15;
    v26 = v22 + 2 * v15;
    v27 = a3[2] + v24 * v8 + v9;
    v28 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(unsigned __int8 *)(v27 + i) | (*(unsigned __int8 *)(v27 + i) << 8);
          *(_WORD *)(v26 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v9 & 1;
  if (v10 >= v33)
    v34 = v33;
  else
    v34 = 0;
  v35 = v10 - v34;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v13 + 2;
      v38 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v38;
      v37 = v17 + 2;
    }
    else
    {
      v36 = v13;
      v37 = v17;
    }
    if (v10 == v34)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v34;
      do
      {
        v41 = *v36;
        v42 = v36[1];
        v36 += 2;
        *v37 = v41 << 8;
        v37[1] = v42 << 8;
        v37 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      v43 = *v36 << 8;
      v44 = v36[1] << 8;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v11 - v31;
    do
    {
      v47 = v13;
      v48 = v17;
      if ((v32 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v49;
        v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v34;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v47 += 2;
          *v48 = v52 << 8;
          v48[1] = v53 << 8;
          v48 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        v54 = *v47 << 8;
        v55 = v47[1] << 8;
        *v48 = v54;
        v48[1] = v55;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      v13 += 2;
      *v17 = v56 << 8;
      v17[1] = v57 << 8;
      v17 += 2;
    }
    if (v10 == v34)
    {
      v35 = 0;
    }
    else
    {
      v58 = v10 - v34;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        v13 += 2;
        *v17 = v59 << 8;
        v17[1] = v60 << 8;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      v61 = *v13 << 8;
      v62 = v13[1] << 8;
      *v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) << 8;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35 << 8;
        v31[1] = v36 << 8;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 << 8;
      v38 = v30[1] << 8;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46 << 8;
          v42[1] = v47 << 8;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 << 8;
        v49 = v41[1] << 8;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 << 8;
      v17[1] = v51 << 8;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 << 8;
        v17[1] = v54 << 8;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 << 8;
      v56 = v13[1] << 8;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int8 *)(v23 + i);
          if (v25 >= 0xEB)
            v25 = 235;
          if (v25 <= 0x10)
            v25 = 16;
          *(_WORD *)(v22 + 2 * i) = (-1048560 - v25 + (v25 << 16)) / 0xDB;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v13[1];
      if (v34 >= 0xF0)
        v34 = 240;
      if (v34 <= 0x10)
        v34 = 16;
      if (v35 >= 0xF0)
        v35 = 240;
      if (v35 <= 0x10)
        v36 = 16;
      else
        v36 = v35;
      v32 = v13 + 2;
      *v17 = (613566757 * (unint64_t)((-1048560 - v34 + (v34 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v36 + (v36 << 16)) >> 5)) >> 32;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v30;
      do
      {
        v39 = *v32;
        v40 = v32[1];
        if (v39 >= 0xF0)
          v39 = 240;
        if (v39 <= 0x10)
          v39 = 16;
        if (v40 >= 0xF0)
          v40 = 240;
        if (v40 <= 0x10)
          v40 = 16;
        v32 += 2;
        *v33 = (613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32;
        v33[1] = (613566757 * (unint64_t)((-1048560 - v40 + (v40 << 16)) >> 5)) >> 32;
        v33 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      v41 = *v32;
      v42 = v32[1];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v41 = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      *v33 = (613566757 * (unint64_t)((-1048560 - v41 + (v41 << 16)) >> 5)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v18 - v27;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v28 & 1) != 0)
      {
        v47 = *v13;
        v48 = v13[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v47 = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v49 = 16;
        else
          v49 = v48;
        v45 = v13 + 2;
        *v17 = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32;
        v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v30;
        do
        {
          v52 = *v45;
          v53 = v45[1];
          if (v52 >= 0xF0)
            v52 = 240;
          if (v52 <= 0x10)
            v52 = 16;
          if (v53 >= 0xF0)
            v53 = 240;
          if (v53 <= 0x10)
            v53 = 16;
          v45 += 2;
          *v46 = (613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32;
          v46[1] = (613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32;
          v46 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        v54 = *v45;
        v55 = v45[1];
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v54 = 16;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v55 = 16;
        *v46 = (613566757 * (unint64_t)((-1048560 - v54 + (v54 << 16)) >> 5)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      if (v56 >= 0xF0)
        v56 = 240;
      if (v56 <= 0x10)
        v56 = 16;
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        v57 = 16;
      v13 += 2;
      *v17 = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v58 = v10 - v30;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v59 = 16;
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          v60 = 16;
        v13 += 2;
        *v17 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF0)
        v61 = 240;
      if (v61 <= 0x10)
        v61 = 16;
      if (v62 >= 0xF0)
        v62 = 240;
      if (v62 <= 0x10)
        v62 = 16;
      *v17 = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  unint64_t v56;
  _WORD *v57;
  __int16 v58;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + v11;
    v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v19 = (v14[2] + (unsigned __int16)*v14) << 7;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = (v38[3] + (unsigned __int16)v38[1]) << 7;
        *v42 = (v38[2] + (unsigned __int16)*v38) << 7;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v19 = (v14[2] + (unsigned __int16)*v14) << 7;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (v46[3] + (unsigned __int16)v46[1]) << 7;
          *v50 = (v46[2] + (unsigned __int16)*v46) << 7;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v54 = v14[2];
      v55 = v14[3];
      v14 += 4;
      *v19 = (v54 + v52) << 7;
      v19[1] = (v55 + v53) << 7;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v56 = 0;
      do
      {
        v57 = &v19[v56];
        v58 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v57 = (v14[2] + (unsigned __int16)*v14) << 7;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + v11;
    v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = v14[1] << 8;
      *v19 = *v14 << 8;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] << 8;
        *v42 = *v38 << 8;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] << 8;
          *v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 4;
      *v19 = v52 << 8;
      v19[1] = v53 << 8;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v19[v54];
        v56 = v14[1] << 8;
        *v55 = *v14 << 8;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (v34[3] + (unsigned __int16)v34[1]) << 7;
        *v38 = (v34[2] + (unsigned __int16)*v34) << 7;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (v42[3] + (unsigned __int16)v42[1]) << 7;
          *v46 = (v42[2] + (unsigned __int16)*v42) << 7;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (v50 + v48) << 7;
      v21[1] = (v51 + v49) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v53 = (v14[2] + (unsigned __int16)*v14) << 7;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] << 8;
        *v38 = *v34 << 8;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] << 8;
          *v46 = *v42 << 8;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = v48 << 8;
      v21[1] = v49 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] << 8;
        *v51 = *v14 << 8;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *(_WORD *)(v27 + 2 * i) = (-1048560 - v30 + (v30 << 16)) / 0xDB;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF0)
        v37 = 240;
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      if (v14[1] >= 0xF0u)
        v39 = 240;
      else
        v39 = v14[1];
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v41 = v14[2];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      if (v14[3] >= 0xF0u)
        v43 = 240;
      else
        v43 = v14[3];
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      v35 = v14 + 4;
      *v21 = (((613566757 * (unint64_t)((-1048560 - v38 + (v38 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-1048560 - v40 + (v40 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v36[v45];
        v47 = *v35;
        v48 = v35[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v47 = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v48 = 16;
        v49 = v35[2];
        v50 = v35[3];
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v49 = 16;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v50 = 16;
        *v46 = (((613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v46[1] = (((613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v51 = 0;
  }
  else
  {
    v52 = 0;
    v51 = v9 - v32;
    do
    {
      v53 = v14;
      v54 = v21;
      if ((v33 & 1) != 0)
      {
        v55 = *v14;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        if (v14[1] >= 0xF0u)
          v57 = 240;
        else
          v57 = v14[1];
        if (v57 <= 0x10)
          v58 = 16;
        else
          v58 = v57;
        v59 = v14[2];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v14[3] >= 0xF0u)
          v61 = 240;
        else
          v61 = v14[3];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        v53 = v14 + 4;
        *v21 = (((613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v21[1] = (((613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v54[v63];
          v65 = *v53;
          v66 = v53[1];
          if (v65 >= 0xF0)
            v65 = 240;
          if (v65 <= 0x10)
            v65 = 16;
          if (v66 >= 0xF0)
            v66 = 240;
          if (v66 <= 0x10)
            v66 = 16;
          v67 = v53[2];
          v68 = v53[3];
          if (v67 >= 0xF0)
            v67 = 240;
          if (v67 <= 0x10)
            v67 = 16;
          if (v68 >= 0xF0)
            v68 = 240;
          if (v68 <= 0x10)
            v68 = 16;
          *v64 = (((613566757 * (unint64_t)((-1048560 - v65 + (v65 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v67 + (v67 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
          v64[1] = (((613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v68 + (v68 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF0)
        v69 = 240;
      if (v69 <= 0x10)
        v69 = 16;
      if (v70 >= 0xF0)
        v70 = 240;
      if (v70 <= 0x10)
        v70 = 16;
      v71 = v14[2];
      if (v71 >= 0xF0)
        v71 = 240;
      if (v71 <= 0x10)
        v71 = 16;
      if (v14[3] >= 0xF0u)
        v72 = 240;
      else
        v72 = v14[3];
      if (v72 <= 0x10)
        v72 = 16;
      v14 += 4;
      *v21 = (((613566757 * (unint64_t)((-1048560 - v69 + (v69 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v71 + (v71 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-1048560 - v70 + (v70 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v72 + (v72 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v73 = 0;
      do
      {
        v74 = &v21[v73];
        v75 = *v14;
        v76 = v14[1];
        if (v75 >= 0xF0)
          v75 = 240;
        if (v75 <= 0x10)
          v75 = 16;
        if (v76 >= 0xF0)
          v76 = 240;
        if (v76 <= 0x10)
          v76 = 16;
        v77 = v14[2];
        v78 = v14[3];
        if (v77 >= 0xF0)
          v77 = 240;
        if (v77 <= 0x10)
          v77 = 16;
        if (v78 >= 0xF0)
          v78 = 240;
        if (v78 <= 0x10)
          v78 = 16;
        *v74 = (((613566757 * (unint64_t)((-1048560 - v75 + (v75 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v77 + (v77 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v74[1] = (((613566757 * (unint64_t)((-1048560 - v76 + (v76 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v78 + (v78 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *(_WORD *)(v27 + 2 * i) = (-1048560 - v30 + (v30 << 16)) / 0xDB;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF0)
        v37 = 240;
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      if (v14[1] >= 0xF0u)
        v39 = 240;
      else
        v39 = v14[1];
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v35 = v14 + 4;
      *v21 = (613566757 * (unint64_t)((-1048560 - v38 + (v38 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v40 + (v40 << 16)) >> 5)) >> 32;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v36[v41];
        v43 = *v35;
        v44 = v35[1];
        if (v43 >= 0xF0)
          v43 = 240;
        if (v43 <= 0x10)
          v43 = 16;
        if (v44 >= 0xF0)
          v44 = 240;
        if (v44 <= 0x10)
          v44 = 16;
        *v42 = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
        v42[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v9 - v32;
    do
    {
      v47 = v14;
      v48 = v21;
      if ((v33 & 1) != 0)
      {
        v49 = *v14;
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v50 = 16;
        else
          v50 = v49;
        if (v14[1] >= 0xF0u)
          v51 = 240;
        else
          v51 = v14[1];
        if (v51 <= 0x10)
          v52 = 16;
        else
          v52 = v51;
        v47 = v14 + 4;
        *v21 = (613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32;
        v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        v53 = 0;
        do
        {
          v54 = &v48[v53];
          v55 = *v47;
          v56 = v47[1];
          if (v55 >= 0xF0)
            v55 = 240;
          if (v55 <= 0x10)
            v55 = 16;
          if (v56 >= 0xF0)
            v56 = 240;
          if (v56 <= 0x10)
            v56 = 16;
          *v54 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v57 = *v14;
      v58 = v14[1];
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        v57 = 16;
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      v14 += 4;
      *v21 = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v59 = 0;
      do
      {
        v60 = &v21[v59];
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        *v60 = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
        v60[1] = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  __int16 v47;
  unsigned __int8 *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  __int16 v65;
  __int16 v66;
  unsigned __int8 *v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = &v16[v15 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v16 + 4;
      v42 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v41) << 6;
      *v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v40) << 6;
      v23[1] = v42;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v15];
        v49 = v44[v15 - 3];
        v50 = v44[v15 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = (v50 + v47 + v52 + *v48) << 6;
        *v45 = (v49 + v46 + v51 + *(v48 - 1)) << 6;
        v45[1] = v53;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v16;
      v57 = v23;
      if ((v9 & 1) != 0)
      {
        v58 = &v16[v15 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v16 + 4;
        v61 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v60) << 6;
        *v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v59) << 6;
        v23[1] = v61;
        v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v15];
          v68 = v63[v15 - 3];
          v69 = v63[v15 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = (v69 + v66 + v71 + *v67) << 6;
          *v64 = (v68 + v65 + v70 + *(v67 - 1)) << 6;
          v64[1] = v72;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  _WORD *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v16 + 4;
      v39 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v39;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = v37[1] << 8;
        *v41 = *v37 << 8;
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v15;
    do
    {
      v46 = v16;
      v47 = v23;
      if ((v9 & 1) != 0)
      {
        v46 = v16 + 4;
        v48 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v48;
        v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] << 8;
          *v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  _WORD *v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  _WORD *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned __int8 *v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  _WORD *v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v8;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v9 + v33;
    v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_WORD *)(v35 + 2 * i) = (-1048560 - v37 + (v37 << 16)) / 0xDB;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v38 = v12;
  else
    v38 = 0;
  if (v24 < v10)
    v10 = 0;
  v39 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v16;
      v43 = v16[1];
      v44 = v16[v15];
      v45 = v16[v15 + 1];
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v43 = 16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v44 = 16;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      v47 = v16[2];
      v48 = v16[3];
      v49 = &v16[v15 + 2];
      v50 = *v49;
      v51 = v49[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      v52 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        v53 = 16;
      else
        v53 = v51;
      v40 = v16 + 4;
      *v23 = (v52
                          + ((613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32)
                          + 2) >> 2;
      v23[1] = (((613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32)
                            + 2) >> 2;
      v41 = v23 + 2;
    }
    else
    {
      v40 = v16;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v54 = 0;
      v55 = v40 + 3;
      do
      {
        v56 = *(v55 - 3);
        v57 = &v55[v15];
        if (v56 >= 0xF0)
          v56 = 240;
        if (v56 <= 0x10)
          v58 = 16;
        else
          v58 = v56;
        if (*(v55 - 2) >= 0xF0u)
          v59 = 240;
        else
          v59 = *(v55 - 2);
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v55[v15 - 3] >= 0xF0u)
          v61 = 240;
        else
          v61 = v55[v15 - 3];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        if (*(v57 - 2) >= 0xF0u)
          v63 = 240;
        else
          v63 = *(v57 - 2);
        if (v63 <= 0x10)
          v64 = 16;
        else
          v64 = v63;
        v65 = *(v55 - 1);
        v67 = *v55;
        v55 += 4;
        v66 = v67;
        v68 = *(v57 - 1);
        if (v65 >= 0xF0)
          v65 = 240;
        if (v65 <= 0x10)
          v69 = 16;
        else
          v69 = v65;
        if (v66 >= 0xF0)
          v70 = 240;
        else
          v70 = v66;
        v71 = *v57;
        if (v70 <= 0x10)
          v72 = 16;
        else
          v72 = v70;
        if (v68 >= 0xF0)
          v68 = 240;
        v73 = &v41[v54];
        if (v68 <= 0x10)
          v68 = 16;
        v74 = -1048560 - v58 + (v58 << 16);
        if (v71 >= 0xF0)
          v71 = 240;
        v75 = (613566757 * (unint64_t)(v74 >> 5)) >> 32;
        v76 = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
        v77 = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
        v78 = 613566757 * ((-1048560 - v64 + (v64 << 16)) >> 5);
        if (v71 <= 0x10)
          v71 = 16;
        *v73 = (v75
                            + ((613566757 * (unint64_t)((-1048560 - v69 + (v69 << 16)) >> 5)) >> 32)
                            + v77
                            + ((613566757 * (unint64_t)((-1048560 - v68 + (v68 << 16)) >> 5)) >> 32)
                            + 2) >> 2;
        v73[1] = (v76
                              + ((613566757 * (unint64_t)((-1048560 - v72 + (v72 << 16)) >> 5)) >> 32)
                              + HIDWORD(v78)
                              + ((613566757 * (unint64_t)((-1048560 - v71 + (v71 << 16)) >> 5)) >> 32)
                              + 2) >> 2;
        v54 += 2;
      }
      while (v54 < v39);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    v79 = 0;
    v80 = v27 - v38;
    do
    {
      v81 = v16;
      v82 = v23;
      if ((v9 & 1) != 0)
      {
        v83 = *v16;
        v84 = v16[1];
        v85 = v16[v15];
        v86 = v16[v15 + 1];
        if (v83 >= 0xF0)
          v83 = 240;
        if (v83 <= 0x10)
          v83 = 16;
        if (v84 >= 0xF0)
          v84 = 240;
        if (v84 <= 0x10)
          v84 = 16;
        if (v85 >= 0xF0)
          v85 = 240;
        if (v85 <= 0x10)
          v85 = 16;
        if (v86 >= 0xF0)
          v86 = 240;
        if (v86 <= 0x10)
          v87 = 16;
        else
          v87 = v86;
        v88 = v16[2];
        v89 = v16[3];
        v90 = &v16[v15 + 2];
        v91 = *v90;
        v92 = v90[1];
        if (v88 >= 0xF0)
          v88 = 240;
        if (v88 <= 0x10)
          v88 = 16;
        if (v89 >= 0xF0)
          v89 = 240;
        if (v89 <= 0x10)
          v89 = 16;
        if (v91 >= 0xF0)
          v91 = 240;
        if (v91 <= 0x10)
          v91 = 16;
        v93 = (613566757 * (unint64_t)((-1048560 - v83 + (v83 << 16)) >> 5)) >> 32;
        if (v92 >= 0xF0)
          v92 = 240;
        if (v92 <= 0x10)
          v94 = 16;
        else
          v94 = v92;
        v81 = v16 + 4;
        *v23 = (v93
                            + ((613566757 * (unint64_t)((-1048560 - v88 + (v88 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v85 + (v85 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v91 + (v91 << 16)) >> 5)) >> 32)
                            + 2) >> 2;
        v23[1] = (((613566757 * (unint64_t)((-1048560 - v84 + (v84 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v89 + (v89 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v87 + (v87 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v94 + (v94 << 16)) >> 5)) >> 32)
                              + 2) >> 2;
        v82 = v23 + 2;
      }
      if (v24 != v10)
      {
        v95 = 0;
        v96 = v81 + 3;
        do
        {
          v97 = *(v96 - 3);
          v98 = &v96[v15];
          if (v97 >= 0xF0)
            v97 = 240;
          if (v97 <= 0x10)
            v99 = 16;
          else
            v99 = v97;
          if (*(v96 - 2) >= 0xF0u)
            v100 = 240;
          else
            v100 = *(v96 - 2);
          if (v100 <= 0x10)
            v101 = 16;
          else
            v101 = v100;
          if (v96[v15 - 3] >= 0xF0u)
            v102 = 240;
          else
            v102 = v96[v15 - 3];
          if (v102 <= 0x10)
            v103 = 16;
          else
            v103 = v102;
          if (*(v98 - 2) >= 0xF0u)
            v104 = 240;
          else
            v104 = *(v98 - 2);
          if (v104 <= 0x10)
            v105 = 16;
          else
            v105 = v104;
          v106 = *(v96 - 1);
          v108 = *v96;
          v96 += 4;
          v107 = v108;
          v109 = *(v98 - 1);
          if (v106 >= 0xF0)
            v106 = 240;
          if (v106 <= 0x10)
            v110 = 16;
          else
            v110 = v106;
          if (v107 >= 0xF0)
            v111 = 240;
          else
            v111 = v107;
          v112 = *v98;
          if (v111 <= 0x10)
            v113 = 16;
          else
            v113 = v111;
          if (v109 >= 0xF0)
            v109 = 240;
          v114 = &v82[v95];
          if (v109 <= 0x10)
            v109 = 16;
          v115 = -1048560 - v99 + (v99 << 16);
          if (v112 >= 0xF0)
            v112 = 240;
          v116 = (613566757 * (unint64_t)(v115 >> 5)) >> 32;
          v117 = (613566757 * (unint64_t)((-1048560 - v101 + (v101 << 16)) >> 5)) >> 32;
          v118 = (613566757 * (unint64_t)((-1048560 - v103 + (v103 << 16)) >> 5)) >> 32;
          v119 = 613566757 * ((-1048560 - v105 + (v105 << 16)) >> 5);
          if (v112 <= 0x10)
            v112 = 16;
          *v114 = (v116
                               + ((613566757 * (unint64_t)((-1048560 - v110 + (v110 << 16)) >> 5)) >> 32)
                               + v118
                               + ((613566757 * (unint64_t)((-1048560 - v109 + (v109 << 16)) >> 5)) >> 32)
                               + 2) >> 2;
          v114[1] = (v117
                                 + ((613566757 * (unint64_t)((-1048560 - v113 + (v113 << 16)) >> 5)) >> 32)
                                 + HIDWORD(v119)
                                 + ((613566757 * (unint64_t)((-1048560 - v112 + (v112 << 16)) >> 5)) >> 32)
                                 + 2) >> 2;
          v95 += 2;
        }
        while (v95 < v39);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v79 += 2;
    }
    while (v79 < v80);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  _WORD *v59;
  unsigned int v60;
  unsigned int v61;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v10 + v8 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *(_WORD *)(v34 + 2 * i) = (-1048560 - v36 + (v36 << 16)) / 0xDB;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *v16;
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      if (v16[1] >= 0xF0u)
        v43 = 240;
      else
        v43 = v16[1];
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      v39 = v16 + 4;
      *v23 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v40[v45];
        v47 = *v39;
        v48 = v39[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v47 = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v48 = 16;
        *v46 = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32;
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v49 = 0;
    v50 = v27 - v37;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v23;
      if ((v8 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v16[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v16[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v16 + 4;
        *v23 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        v58 = 0;
        do
        {
          v59 = &v53[v58];
          v60 = *v52;
          v61 = v52[1];
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          if (v61 >= 0xF0)
            v61 = 240;
          if (v61 <= 0x10)
            v61 = 16;
          *v59 = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
          v59[1] = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      v16 += v51;
      v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + 2 * v15;
    v26 = v22 + 2 * v15;
    v27 = a3[2] + v24 * v8 + v9;
    v28 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(unsigned __int8 *)(v27 + i) | (*(unsigned __int8 *)(v27 + i) << 8);
          *(_WORD *)(v26 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v9 & 1;
  if (v10 >= v33)
    v34 = v33;
  else
    v34 = 0;
  v35 = v10 - v34;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v13 + 2;
      v38 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v38;
      v37 = v17 + 2;
    }
    else
    {
      v36 = v13;
      v37 = v17;
    }
    if (v10 == v34)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v34;
      do
      {
        v41 = *v36;
        v42 = v36[1];
        v36 += 2;
        *v37 = v41 << 8;
        v37[1] = v42 << 8;
        v37 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      v43 = *v36 << 8;
      v44 = v36[1] << 8;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v11 - v31;
    do
    {
      v47 = v13;
      v48 = v17;
      if ((v32 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v49;
        v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v34;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v47 += 2;
          *v48 = v52 << 8;
          v48[1] = v53 << 8;
          v48 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        v54 = *v47 << 8;
        v55 = v47[1] << 8;
        *v48 = v54;
        v48[1] = v55;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      v13 += 2;
      *v17 = v56 << 8;
      v17[1] = v57 << 8;
      v17 += 2;
    }
    if (v10 == v34)
    {
      v35 = 0;
    }
    else
    {
      v58 = v10 - v34;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        v13 += 2;
        *v17 = v59 << 8;
        v17[1] = v60 << 8;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      v61 = *v13 << 8;
      v62 = v13[1] << 8;
      *v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) << 8;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35 << 8;
        v31[1] = v36 << 8;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 << 8;
      v38 = v30[1] << 8;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46 << 8;
          v42[1] = v47 << 8;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 << 8;
        v49 = v41[1] << 8;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 << 8;
      v17[1] = v51 << 8;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 << 8;
        v17[1] = v54 << 8;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 << 8;
      v56 = v13[1] << 8;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int8 *)(v23 + i);
          if (v25 >= 0xEB)
            v25 = 235;
          if (v25 <= 0x10)
            v25 = 16;
          *(_WORD *)(v22 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)
                                                  + ((4095 * v25
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v13[1];
      if (v34 >= 0xF0)
        v34 = 240;
      if (v34 <= 0x10)
        v34 = 16;
      if (v35 >= 0xF0)
        v35 = 240;
      if (v35 <= 0x10)
        v36 = 16;
      else
        v36 = v35;
      v32 = v13 + 2;
      *v17 = 16 * ((613566757 * (unint64_t)((4095 * v34 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v36 - 65520) >> 5)) >> 32);
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v30;
      do
      {
        v39 = *v32;
        v40 = v32[1];
        if (v39 >= 0xF0)
          v39 = 240;
        if (v39 <= 0x10)
          v39 = 16;
        if (v40 >= 0xF0)
          v40 = 240;
        if (v40 <= 0x10)
          v40 = 16;
        v32 += 2;
        *v33 = 16 * ((613566757 * (unint64_t)((4095 * v39 - 65520) >> 5)) >> 32);
        v33[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
        v33 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      v41 = *v32;
      v42 = v32[1];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v41 = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      *v33 = 16 * ((613566757 * (unint64_t)((4095 * v41 - 65520) >> 5)) >> 32);
      v33[1] = 16 * ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32);
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v18 - v27;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v28 & 1) != 0)
      {
        v47 = *v13;
        v48 = v13[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v47 = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v49 = 16;
        else
          v49 = v48;
        v45 = v13 + 2;
        *v17 = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
        v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v30;
        do
        {
          v52 = *v45;
          v53 = v45[1];
          if (v52 >= 0xF0)
            v52 = 240;
          if (v52 <= 0x10)
            v52 = 16;
          if (v53 >= 0xF0)
            v53 = 240;
          if (v53 <= 0x10)
            v53 = 16;
          v45 += 2;
          *v46 = 16 * ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32);
          v46[1] = 16 * ((613566757 * (unint64_t)((4095 * v53 - 65520) >> 5)) >> 32);
          v46 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        v54 = *v45;
        v55 = v45[1];
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v54 = 16;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v55 = 16;
        *v46 = 16 * ((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32);
        v46[1] = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      if (v56 >= 0xF0)
        v56 = 240;
      if (v56 <= 0x10)
        v56 = 16;
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        v57 = 16;
      v13 += 2;
      *v17 = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v58 = v10 - v30;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v59 = 16;
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          v60 = 16;
        v13 += 2;
        *v17 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32);
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF0)
        v61 = 240;
      if (v61 <= 0x10)
        v61 = 16;
      if (v62 >= 0xF0)
        v62 = 240;
      if (v62 <= 0x10)
        v62 = 16;
      *v17 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  unint64_t v56;
  _WORD *v57;
  __int16 v58;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + v11;
    v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v19 = (v14[2] + (unsigned __int16)*v14) << 7;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = (v38[3] + (unsigned __int16)v38[1]) << 7;
        *v42 = (v38[2] + (unsigned __int16)*v38) << 7;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v19 = (v14[2] + (unsigned __int16)*v14) << 7;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (v46[3] + (unsigned __int16)v46[1]) << 7;
          *v50 = (v46[2] + (unsigned __int16)*v46) << 7;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v54 = v14[2];
      v55 = v14[3];
      v14 += 4;
      *v19 = (v54 + v52) << 7;
      v19[1] = (v55 + v53) << 7;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v56 = 0;
      do
      {
        v57 = &v19[v56];
        v58 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v57 = (v14[2] + (unsigned __int16)*v14) << 7;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + v11;
    v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = v14[1] << 8;
      *v19 = *v14 << 8;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] << 8;
        *v42 = *v38 << 8;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] << 8;
          *v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 4;
      *v19 = v52 << 8;
      v19[1] = v53 << 8;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v19[v54];
        v56 = v14[1] << 8;
        *v55 = *v14 << 8;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (v34[3] + (unsigned __int16)v34[1]) << 7;
        *v38 = (v34[2] + (unsigned __int16)*v34) << 7;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (v42[3] + (unsigned __int16)v42[1]) << 7;
          *v46 = (v42[2] + (unsigned __int16)*v42) << 7;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (v50 + v48) << 7;
      v21[1] = (v51 + v49) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v53 = (v14[2] + (unsigned __int16)*v14) << 7;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] << 8;
        *v38 = *v34 << 8;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] << 8;
          *v46 = *v42 << 8;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = v48 << 8;
      v21[1] = v49 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] << 8;
        *v51 = *v14 << 8;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)
                                                  + ((4095 * v30
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF0)
        v37 = 240;
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      if (v14[1] >= 0xF0u)
        v39 = 240;
      else
        v39 = v14[1];
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v41 = v14[2];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      if (v14[3] >= 0xF0u)
        v43 = 240;
      else
        v43 = v14[3];
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      v35 = v14 + 4;
      *v21 = (8
            * (((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v36[v45];
        v47 = *v35;
        v48 = v35[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v47 = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v48 = 16;
        v49 = v35[2];
        v50 = v35[3];
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v49 = 16;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v50 = 16;
        *v46 = (8
              * (((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v46[1] = (8
                * (((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v51 = 0;
  }
  else
  {
    v52 = 0;
    v51 = v9 - v32;
    do
    {
      v53 = v14;
      v54 = v21;
      if ((v33 & 1) != 0)
      {
        v55 = *v14;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        if (v14[1] >= 0xF0u)
          v57 = 240;
        else
          v57 = v14[1];
        if (v57 <= 0x10)
          v58 = 16;
        else
          v58 = v57;
        v59 = v14[2];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v14[3] >= 0xF0u)
          v61 = 240;
        else
          v61 = v14[3];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        v53 = v14 + 4;
        *v21 = (8
              * (((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8
                * (((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v54[v63];
          v65 = *v53;
          v66 = v53[1];
          if (v65 >= 0xF0)
            v65 = 240;
          if (v65 <= 0x10)
            v65 = 16;
          if (v66 >= 0xF0)
            v66 = 240;
          if (v66 <= 0x10)
            v66 = 16;
          v67 = v53[2];
          v68 = v53[3];
          if (v67 >= 0xF0)
            v67 = 240;
          if (v67 <= 0x10)
            v67 = 16;
          if (v68 >= 0xF0)
            v68 = 240;
          if (v68 <= 0x10)
            v68 = 16;
          *v64 = (8
                * (((613566757 * (unint64_t)((4095 * v67 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v65 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
          v64[1] = (8
                  * (((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v66 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF0)
        v69 = 240;
      if (v69 <= 0x10)
        v69 = 16;
      if (v70 >= 0xF0)
        v70 = 240;
      if (v70 <= 0x10)
        v70 = 16;
      v71 = v14[2];
      if (v71 >= 0xF0)
        v71 = 240;
      if (v71 <= 0x10)
        v71 = 16;
      if (v14[3] >= 0xF0u)
        v72 = 240;
      else
        v72 = v14[3];
      if (v72 <= 0x10)
        v72 = 16;
      v14 += 4;
      *v21 = (8
            * (((613566757 * (unint64_t)((4095 * v71 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v69 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((4095 * v72 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v70 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v73 = 0;
      do
      {
        v74 = &v21[v73];
        v75 = *v14;
        v76 = v14[1];
        if (v75 >= 0xF0)
          v75 = 240;
        if (v75 <= 0x10)
          v75 = 16;
        if (v76 >= 0xF0)
          v76 = 240;
        if (v76 <= 0x10)
          v76 = 16;
        v77 = v14[2];
        v78 = v14[3];
        if (v77 >= 0xF0)
          v77 = 240;
        if (v77 <= 0x10)
          v77 = 16;
        if (v78 >= 0xF0)
          v78 = 240;
        if (v78 <= 0x10)
          v78 = 16;
        *v74 = (8
              * (((613566757 * (unint64_t)((4095 * v77 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v75 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v74[1] = (8
                * (((613566757 * (unint64_t)((4095 * v78 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v76 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)
                                                  + ((4095 * v30
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF0)
        v37 = 240;
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      if (v14[1] >= 0xF0u)
        v39 = 240;
      else
        v39 = v14[1];
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v35 = v14 + 4;
      *v21 = 16 * ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v36[v41];
        v43 = *v35;
        v44 = v35[1];
        if (v43 >= 0xF0)
          v43 = 240;
        if (v43 <= 0x10)
          v43 = 16;
        if (v44 >= 0xF0)
          v44 = 240;
        if (v44 <= 0x10)
          v44 = 16;
        *v42 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
        v42[1] = 16 * ((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32);
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v9 - v32;
    do
    {
      v47 = v14;
      v48 = v21;
      if ((v33 & 1) != 0)
      {
        v49 = *v14;
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v50 = 16;
        else
          v50 = v49;
        if (v14[1] >= 0xF0u)
          v51 = 240;
        else
          v51 = v14[1];
        if (v51 <= 0x10)
          v52 = 16;
        else
          v52 = v51;
        v47 = v14 + 4;
        *v21 = 16 * ((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32);
        v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        v53 = 0;
        do
        {
          v54 = &v48[v53];
          v55 = *v47;
          v56 = v47[1];
          if (v55 >= 0xF0)
            v55 = 240;
          if (v55 <= 0x10)
            v55 = 16;
          if (v56 >= 0xF0)
            v56 = 240;
          if (v56 <= 0x10)
            v56 = 16;
          *v54 = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
          v54[1] = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v57 = *v14;
      v58 = v14[1];
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        v57 = 16;
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      v14 += 4;
      *v21 = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      v59 = 0;
      do
      {
        v60 = &v21[v59];
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        *v60 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
        v60[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  __int16 v47;
  unsigned __int8 *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  __int16 v65;
  __int16 v66;
  unsigned __int8 *v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = &v16[v15 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v16 + 4;
      v42 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v41) << 6;
      *v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v40) << 6;
      v23[1] = v42;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v15];
        v49 = v44[v15 - 3];
        v50 = v44[v15 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = (v50 + v47 + v52 + *v48) << 6;
        *v45 = (v49 + v46 + v51 + *(v48 - 1)) << 6;
        v45[1] = v53;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v16;
      v57 = v23;
      if ((v9 & 1) != 0)
      {
        v58 = &v16[v15 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v16 + 4;
        v61 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v60) << 6;
        *v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v59) << 6;
        v23[1] = v61;
        v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v15];
          v68 = v63[v15 - 3];
          v69 = v63[v15 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = (v69 + v66 + v71 + *v67) << 6;
          *v64 = (v68 + v65 + v70 + *(v67 - 1)) << 6;
          v64[1] = v72;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  _WORD *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v16 + 4;
      v39 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v39;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = v37[1] << 8;
        *v41 = *v37 << 8;
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v15;
    do
    {
      v46 = v16;
      v47 = v23;
      if ((v9 & 1) != 0)
      {
        v46 = v16 + 4;
        v48 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v48;
        v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] << 8;
          *v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned __int8 *v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  _WORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  _WORD *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned __int8 *v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  _WORD *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v8 + v33;
    v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)
                                                  + ((4095 * v37
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v38 = v12;
  else
    v38 = 0;
  if (v24 < v10)
    v10 = 0;
  v39 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      v43 = v16[1];
      v44 = v16[v15];
      v45 = v16[v15 + 1];
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v43 = 16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v44 = 16;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      v47 = v16[2];
      v48 = v16[3];
      v49 = &v16[v15 + 2];
      v50 = *v49;
      v51 = v49[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        v52 = 16;
      else
        v52 = v51;
      v40 = v16 + 4;
      *v23 = (4
            * (((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (4
              * (((613566757 * (unint64_t)((4095 * v46 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      v41 = v23 + 2;
    }
    else
    {
      v40 = v16;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v53 = 0;
      v54 = v40 + 3;
      do
      {
        v55 = *(v54 - 3);
        v56 = &v54[v15];
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v57 = 16;
        else
          v57 = v55;
        if (*(v54 - 2) >= 0xF0u)
          v58 = 240;
        else
          v58 = *(v54 - 2);
        if (v58 <= 0x10)
          v59 = 16;
        else
          v59 = v58;
        if (v54[v15 - 3] >= 0xF0u)
          v60 = 240;
        else
          v60 = v54[v15 - 3];
        if (v60 <= 0x10)
          v61 = 16;
        else
          v61 = v60;
        if (*(v56 - 2) >= 0xF0u)
          v62 = 240;
        else
          v62 = *(v56 - 2);
        v63 = *(v54 - 1);
        v65 = *v54;
        v54 += 4;
        v64 = v65;
        if (v62 <= 0x10)
          v66 = 16;
        else
          v66 = v62;
        v67 = *(v56 - 1);
        v68 = *v56;
        if (v63 >= 0xF0)
          v69 = 240;
        else
          v69 = v63;
        if (v69 <= 0x10)
          v70 = 16;
        else
          v70 = v69;
        if (v64 >= 0xF0)
          v71 = 240;
        else
          v71 = v64;
        if (v71 <= 0x10)
          v72 = 16;
        else
          v72 = v71;
        v73 = &v41[v53];
        if (v67 >= 0xF0)
          v67 = 240;
        if (v67 <= 0x10)
          v67 = 16;
        if (v68 >= 0xF0)
          v68 = 240;
        v74 = (613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32;
        v75 = (613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32;
        v76 = (613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32;
        v77 = (613566757 * (unint64_t)((4095 * v66 - 65520) >> 5)) >> 32;
        v78 = 613566757 * ((4095 * v70 - 65520) >> 5);
        if (v68 <= 0x10)
          v68 = 16;
        *v73 = (4 * (v76 + v74 + WORD2(v78) + ((613566757 * (unint64_t)((4095 * v67 - 65520) >> 5)) >> 32)) + 8) & 0xFFF0;
        v73[1] = (4
                * (v77
                 + v75
                 + ((613566757 * (unint64_t)((4095 * v72 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v53 += 2;
      }
      while (v53 < v39);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    v79 = 0;
    v80 = v27 - v38;
    do
    {
      v81 = v16;
      v82 = v23;
      if ((v8 & 1) != 0)
      {
        v83 = *v16;
        v84 = v16[1];
        v85 = v16[v15];
        v86 = v16[v15 + 1];
        if (v83 >= 0xF0)
          v83 = 240;
        if (v83 <= 0x10)
          v83 = 16;
        if (v84 >= 0xF0)
          v84 = 240;
        if (v84 <= 0x10)
          v84 = 16;
        if (v85 >= 0xF0)
          v85 = 240;
        if (v85 <= 0x10)
          v85 = 16;
        if (v86 >= 0xF0)
          v86 = 240;
        if (v86 <= 0x10)
          v87 = 16;
        else
          v87 = v86;
        v88 = v16[2];
        v89 = v16[3];
        v90 = &v16[v15 + 2];
        v91 = *v90;
        v92 = v90[1];
        if (v88 >= 0xF0)
          v88 = 240;
        if (v88 <= 0x10)
          v88 = 16;
        if (v89 >= 0xF0)
          v89 = 240;
        if (v89 <= 0x10)
          v89 = 16;
        if (v91 >= 0xF0)
          v91 = 240;
        if (v91 <= 0x10)
          v91 = 16;
        if (v92 >= 0xF0)
          v92 = 240;
        if (v92 <= 0x10)
          v93 = 16;
        else
          v93 = v92;
        v81 = v16 + 4;
        *v23 = (4
              * (((613566757 * (unint64_t)((4095 * v85 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v83 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v88 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v91 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (4
                * (((613566757 * (unint64_t)((4095 * v87 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v84 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v89 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v93 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v82 = v23 + 2;
      }
      if (v24 != v10)
      {
        v94 = 0;
        v95 = v81 + 3;
        do
        {
          v96 = *(v95 - 3);
          v97 = &v95[v15];
          if (v96 >= 0xF0)
            v96 = 240;
          if (v96 <= 0x10)
            v98 = 16;
          else
            v98 = v96;
          if (*(v95 - 2) >= 0xF0u)
            v99 = 240;
          else
            v99 = *(v95 - 2);
          if (v99 <= 0x10)
            v100 = 16;
          else
            v100 = v99;
          if (v95[v15 - 3] >= 0xF0u)
            v101 = 240;
          else
            v101 = v95[v15 - 3];
          if (v101 <= 0x10)
            v102 = 16;
          else
            v102 = v101;
          if (*(v97 - 2) >= 0xF0u)
            v103 = 240;
          else
            v103 = *(v97 - 2);
          v104 = *(v95 - 1);
          v106 = *v95;
          v95 += 4;
          v105 = v106;
          if (v103 <= 0x10)
            v107 = 16;
          else
            v107 = v103;
          v108 = *(v97 - 1);
          v109 = *v97;
          if (v104 >= 0xF0)
            v110 = 240;
          else
            v110 = v104;
          if (v110 <= 0x10)
            v111 = 16;
          else
            v111 = v110;
          if (v105 >= 0xF0)
            v112 = 240;
          else
            v112 = v105;
          if (v112 <= 0x10)
            v113 = 16;
          else
            v113 = v112;
          v114 = &v82[v94];
          if (v108 >= 0xF0)
            v108 = 240;
          if (v108 <= 0x10)
            v108 = 16;
          if (v109 >= 0xF0)
            v109 = 240;
          v115 = (613566757 * (unint64_t)((4095 * v98 - 65520) >> 5)) >> 32;
          v116 = (613566757 * (unint64_t)((4095 * v100 - 65520) >> 5)) >> 32;
          v117 = (613566757 * (unint64_t)((4095 * v102 - 65520) >> 5)) >> 32;
          v118 = (613566757 * (unint64_t)((4095 * v107 - 65520) >> 5)) >> 32;
          v119 = 613566757 * ((4095 * v111 - 65520) >> 5);
          if (v109 <= 0x10)
            v109 = 16;
          *v114 = (4
                 * (v117 + v115 + WORD2(v119) + ((613566757 * (unint64_t)((4095 * v108 - 65520) >> 5)) >> 32))
                 + 8) & 0xFFF0;
          v114[1] = (4
                   * (v118
                    + v116
                    + ((613566757 * (unint64_t)((4095 * v113 - 65520) >> 5)) >> 32)
                    + ((613566757 * (unint64_t)((4095 * v109 - 65520) >> 5)) >> 32))
                   + 8) & 0xFFF0;
          v94 += 2;
        }
        while (v94 < v39);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v79 += 2;
    }
    while (v79 < v80);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  _WORD *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v8 + v33;
    v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)
                                                  + ((4095 * v37
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v38 = v12;
  else
    v38 = 0;
  if (v24 < v10)
    v10 = 0;
  v39 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v16[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v16[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v40 = v16 + 4;
      *v23 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v41 = v23 + 2;
    }
    else
    {
      v40 = v16;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v46 = 0;
      do
      {
        v47 = &v41[v46];
        v48 = *v40;
        v49 = v40[1];
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v48 = 16;
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v49 = 16;
        *v47 = 16 * ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32);
        v47[1] = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
        v46 += 2;
        v40 += 4;
      }
      while (v46 < v39);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    v50 = 0;
    v51 = v27 - v38;
    v52 = 2 * v15;
    do
    {
      v53 = v16;
      v54 = v23;
      if ((v8 & 1) != 0)
      {
        v55 = *v16;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        if (v16[1] >= 0xF0u)
          v57 = 240;
        else
          v57 = v16[1];
        if (v57 <= 0x10)
          v58 = 16;
        else
          v58 = v57;
        v53 = v16 + 4;
        *v23 = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
        v54 = v23 + 2;
      }
      if (v24 != v10)
      {
        v59 = 0;
        do
        {
          v60 = &v54[v59];
          v61 = *v53;
          v62 = v53[1];
          if (v61 >= 0xF0)
            v61 = 240;
          if (v61 <= 0x10)
            v61 = 16;
          if (v62 >= 0xF0)
            v62 = 240;
          if (v62 <= 0x10)
            v62 = 16;
          *v60 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
          v60[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
          v59 += 2;
          v53 += 4;
        }
        while (v59 < v39);
      }
      v16 += v52;
      v23 = (_WORD *)((char *)v23 + v22);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + 2 * v15;
    v26 = v22 + 2 * v15;
    v27 = a3[2] + v24 * v8 + v9;
    v28 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(unsigned __int8 *)(v27 + i) | (*(unsigned __int8 *)(v27 + i) << 8);
          *(_WORD *)(v26 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v9 & 1;
  if (v10 >= v33)
    v34 = v33;
  else
    v34 = 0;
  v35 = v10 - v34;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v13 + 2;
      v38 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v38;
      v37 = v17 + 2;
    }
    else
    {
      v36 = v13;
      v37 = v17;
    }
    if (v10 == v34)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v34;
      do
      {
        v41 = *v36;
        v42 = v36[1];
        v36 += 2;
        *v37 = v41 << 8;
        v37[1] = v42 << 8;
        v37 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      v43 = *v36 << 8;
      v44 = v36[1] << 8;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v11 - v31;
    do
    {
      v47 = v13;
      v48 = v17;
      if ((v32 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v49;
        v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v34;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v47 += 2;
          *v48 = v52 << 8;
          v48[1] = v53 << 8;
          v48 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        v54 = *v47 << 8;
        v55 = v47[1] << 8;
        *v48 = v54;
        v48[1] = v55;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      v13 += 2;
      *v17 = v56 << 8;
      v17[1] = v57 << 8;
      v17 += 2;
    }
    if (v10 == v34)
    {
      v35 = 0;
    }
    else
    {
      v58 = v10 - v34;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        v13 += 2;
        *v17 = v59 << 8;
        v17[1] = v60 << 8;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      v61 = *v13 << 8;
      v62 = v13[1] << 8;
      *v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) << 8;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35 << 8;
        v31[1] = v36 << 8;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 << 8;
      v38 = v30[1] << 8;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46 << 8;
          v42[1] = v47 << 8;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 << 8;
        v49 = v41[1] << 8;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 << 8;
      v17[1] = v51 << 8;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 << 8;
        v17[1] = v54 << 8;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 << 8;
      v56 = v13[1] << 8;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int8 *)(v23 + i);
          if (v25 >= 0xEB)
            v25 = 235;
          if (v25 <= 0x10)
            v25 = 16;
          *(_WORD *)(v22 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)
                                                  + ((1023 * v25
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v13[1];
      if (v34 >= 0xF0)
        v34 = 240;
      if (v34 <= 0x10)
        v34 = 16;
      if (v35 >= 0xF0)
        v35 = 240;
      if (v35 <= 0x10)
        v36 = 16;
      else
        v36 = v35;
      v32 = v13 + 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v34 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v36 - 16368) >> 5)) >> 32) << 6;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v30;
      do
      {
        v39 = *v32;
        v40 = v32[1];
        if (v39 >= 0xF0)
          v39 = 240;
        if (v39 <= 0x10)
          v39 = 16;
        if (v40 >= 0xF0)
          v40 = 240;
        if (v40 <= 0x10)
          v40 = 16;
        v32 += 2;
        *v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v39 - 16368) >> 5)) >> 32) << 6;
        v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
        v33 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      v41 = *v32;
      v42 = v32[1];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v41 = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      *v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 16368) >> 5)) >> 32) << 6;
      v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32) << 6;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v18 - v27;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v28 & 1) != 0)
      {
        v47 = *v13;
        v48 = v13[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v47 = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v49 = 16;
        else
          v49 = v48;
        v45 = v13 + 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
        v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v30;
        do
        {
          v52 = *v45;
          v53 = v45[1];
          if (v52 >= 0xF0)
            v52 = 240;
          if (v52 <= 0x10)
            v52 = 16;
          if (v53 >= 0xF0)
            v53 = 240;
          if (v53 <= 0x10)
            v53 = 16;
          v45 += 2;
          *v46 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32) << 6;
          v46[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v53 - 16368) >> 5)) >> 32) << 6;
          v46 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        v54 = *v45;
        v55 = v45[1];
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v54 = 16;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v55 = 16;
        *v46 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      if (v56 >= 0xF0)
        v56 = 240;
      if (v56 <= 0x10)
        v56 = 16;
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        v57 = 16;
      v13 += 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v58 = v10 - v30;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v59 = 16;
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          v60 = 16;
        v13 += 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32) << 6;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF0)
        v61 = 240;
      if (v61 <= 0x10)
        v61 = 16;
      if (v62 >= 0xF0)
        v62 = 240;
      if (v62 <= 0x10)
        v62 = 16;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  unint64_t v56;
  _WORD *v57;
  __int16 v58;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + v11;
    v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v19 = (v14[2] + (unsigned __int16)*v14) << 7;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = (v38[3] + (unsigned __int16)v38[1]) << 7;
        *v42 = (v38[2] + (unsigned __int16)*v38) << 7;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v19 = (v14[2] + (unsigned __int16)*v14) << 7;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (v46[3] + (unsigned __int16)v46[1]) << 7;
          *v50 = (v46[2] + (unsigned __int16)*v46) << 7;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v54 = v14[2];
      v55 = v14[3];
      v14 += 4;
      *v19 = (v54 + v52) << 7;
      v19[1] = (v55 + v53) << 7;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v56 = 0;
      do
      {
        v57 = &v19[v56];
        v58 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v57 = (v14[2] + (unsigned __int16)*v14) << 7;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + v11;
    v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = v14[1] << 8;
      *v19 = *v14 << 8;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] << 8;
        *v42 = *v38 << 8;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] << 8;
          *v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 4;
      *v19 = v52 << 8;
      v19[1] = v53 << 8;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v19[v54];
        v56 = v14[1] << 8;
        *v55 = *v14 << 8;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (v34[3] + (unsigned __int16)v34[1]) << 7;
        *v38 = (v34[2] + (unsigned __int16)*v34) << 7;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (v42[3] + (unsigned __int16)v42[1]) << 7;
          *v46 = (v42[2] + (unsigned __int16)*v42) << 7;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (v50 + v48) << 7;
      v21[1] = (v51 + v49) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v53 = (v14[2] + (unsigned __int16)*v14) << 7;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] << 8;
        *v38 = *v34 << 8;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] << 8;
          *v46 = *v42 << 8;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = v48 << 8;
      v21[1] = v49 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] << 8;
        *v51 = *v14 << 8;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)
                                                  + ((1023 * v30
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF0)
        v37 = 240;
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      if (v14[1] >= 0xF0u)
        v39 = 240;
      else
        v39 = v14[1];
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v41 = v14[2];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      if (v14[3] >= 0xF0u)
        v43 = 240;
      else
        v43 = v14[3];
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      v35 = v14 + 4;
      *v21 = (32
            * (((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v36[v45];
        v47 = *v35;
        v48 = v35[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v47 = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v48 = 16;
        v49 = v35[2];
        v50 = v35[3];
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v49 = 16;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v50 = 16;
        *v46 = (32
              * (((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v46[1] = (32
                * (((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v51 = 0;
  }
  else
  {
    v52 = 0;
    v51 = v9 - v32;
    do
    {
      v53 = v14;
      v54 = v21;
      if ((v33 & 1) != 0)
      {
        v55 = *v14;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        if (v14[1] >= 0xF0u)
          v57 = 240;
        else
          v57 = v14[1];
        if (v57 <= 0x10)
          v58 = 16;
        else
          v58 = v57;
        v59 = v14[2];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v14[3] >= 0xF0u)
          v61 = 240;
        else
          v61 = v14[3];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        v53 = v14 + 4;
        *v21 = (32
              * (((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32
                * (((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v54[v63];
          v65 = *v53;
          v66 = v53[1];
          if (v65 >= 0xF0)
            v65 = 240;
          if (v65 <= 0x10)
            v65 = 16;
          if (v66 >= 0xF0)
            v66 = 240;
          if (v66 <= 0x10)
            v66 = 16;
          v67 = v53[2];
          v68 = v53[3];
          if (v67 >= 0xF0)
            v67 = 240;
          if (v67 <= 0x10)
            v67 = 16;
          if (v68 >= 0xF0)
            v68 = 240;
          if (v68 <= 0x10)
            v68 = 16;
          *v64 = (32
                * (((613566757 * (unint64_t)((1023 * v67 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v65 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
          v64[1] = (32
                  * (((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v66 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF0)
        v69 = 240;
      if (v69 <= 0x10)
        v69 = 16;
      if (v70 >= 0xF0)
        v70 = 240;
      if (v70 <= 0x10)
        v70 = 16;
      v71 = v14[2];
      if (v71 >= 0xF0)
        v71 = 240;
      if (v71 <= 0x10)
        v71 = 16;
      if (v14[3] >= 0xF0u)
        v72 = 240;
      else
        v72 = v14[3];
      if (v72 <= 0x10)
        v72 = 16;
      v14 += 4;
      *v21 = (32
            * (((613566757 * (unint64_t)((1023 * v71 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v69 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v72 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v73 = 0;
      do
      {
        v74 = &v21[v73];
        v75 = *v14;
        v76 = v14[1];
        if (v75 >= 0xF0)
          v75 = 240;
        if (v75 <= 0x10)
          v75 = 16;
        if (v76 >= 0xF0)
          v76 = 240;
        if (v76 <= 0x10)
          v76 = 16;
        v77 = v14[2];
        v78 = v14[3];
        if (v77 >= 0xF0)
          v77 = 240;
        if (v77 <= 0x10)
          v77 = 16;
        if (v78 >= 0xF0)
          v78 = 240;
        if (v78 <= 0x10)
          v78 = 16;
        *v74 = (32
              * (((613566757 * (unint64_t)((1023 * v77 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v75 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v74[1] = (32
                * (((613566757 * (unint64_t)((1023 * v78 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v76 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)
                                                  + ((1023 * v30
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF0)
        v37 = 240;
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      if (v14[1] >= 0xF0u)
        v39 = 240;
      else
        v39 = v14[1];
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v35 = v14 + 4;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v36[v41];
        v43 = *v35;
        v44 = v35[1];
        if (v43 >= 0xF0)
          v43 = 240;
        if (v43 <= 0x10)
          v43 = 16;
        if (v44 >= 0xF0)
          v44 = 240;
        if (v44 <= 0x10)
          v44 = 16;
        *v42 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
        v42[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32) << 6;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v9 - v32;
    do
    {
      v47 = v14;
      v48 = v21;
      if ((v33 & 1) != 0)
      {
        v49 = *v14;
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v50 = 16;
        else
          v50 = v49;
        if (v14[1] >= 0xF0u)
          v51 = 240;
        else
          v51 = v14[1];
        if (v51 <= 0x10)
          v52 = 16;
        else
          v52 = v51;
        v47 = v14 + 4;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32) << 6;
        v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        v53 = 0;
        do
        {
          v54 = &v48[v53];
          v55 = *v47;
          v56 = v47[1];
          if (v55 >= 0xF0)
            v55 = 240;
          if (v55 <= 0x10)
            v55 = 16;
          if (v56 >= 0xF0)
            v56 = 240;
          if (v56 <= 0x10)
            v56 = 16;
          *v54 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
          v54[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v57 = *v14;
      v58 = v14[1];
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        v57 = 16;
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      v14 += 4;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v59 = 0;
      do
      {
        v60 = &v21[v59];
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        *v60 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
        v60[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  __int16 v47;
  unsigned __int8 *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  __int16 v65;
  __int16 v66;
  unsigned __int8 *v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = &v16[v15 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v16 + 4;
      v42 = v16[v15 + 1] + v16[1] + v16[3] + v41;
      *v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v40) << 6;
      v23[1] = v42 << 6;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v15];
        v49 = v44[v15 - 3];
        v50 = v44[v15 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = v50 + v47 + v52 + *v48;
        *v45 = (v49 + v46 + v51 + *(v48 - 1)) << 6;
        v45[1] = v53 << 6;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v16;
      v57 = v23;
      if ((v9 & 1) != 0)
      {
        v58 = &v16[v15 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v16 + 4;
        v61 = v16[v15 + 1] + v16[1] + v16[3] + v60;
        *v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v59) << 6;
        v23[1] = v61 << 6;
        v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v15];
          v68 = v63[v15 - 3];
          v69 = v63[v15 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = v69 + v66 + v71 + *v67;
          *v64 = (v68 + v65 + v70 + *(v67 - 1)) << 6;
          v64[1] = v72 << 6;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  _WORD *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v16 + 4;
      v39 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v39;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = v37[1] << 8;
        *v41 = *v37 << 8;
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v15;
    do
    {
      v46 = v16;
      v47 = v23;
      if ((v9 & 1) != 0)
      {
        v46 = v16 + 4;
        v48 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v48;
        v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] << 8;
          *v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned __int8 *v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  _WORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  _WORD *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned __int8 *v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  _WORD *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v8 + v33;
    v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)
                                                  + ((1023 * v37
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v38 = v12;
  else
    v38 = 0;
  if (v24 < v10)
    v10 = 0;
  v39 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      v43 = v16[1];
      v44 = v16[v15];
      v45 = v16[v15 + 1];
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v43 = 16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v44 = 16;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      v47 = v16[2];
      v48 = v16[3];
      v49 = &v16[v15 + 2];
      v50 = *v49;
      v51 = v49[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        v52 = 16;
      else
        v52 = v51;
      v40 = v16 + 4;
      *v23 = (16
            * (((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v23[1] = (16
              * (((613566757 * (unint64_t)((1023 * v46 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      v41 = v23 + 2;
    }
    else
    {
      v40 = v16;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v53 = 0;
      v54 = v40 + 3;
      do
      {
        v55 = *(v54 - 3);
        v56 = &v54[v15];
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v57 = 16;
        else
          v57 = v55;
        if (*(v54 - 2) >= 0xF0u)
          v58 = 240;
        else
          v58 = *(v54 - 2);
        if (v58 <= 0x10)
          v59 = 16;
        else
          v59 = v58;
        if (v54[v15 - 3] >= 0xF0u)
          v60 = 240;
        else
          v60 = v54[v15 - 3];
        if (v60 <= 0x10)
          v61 = 16;
        else
          v61 = v60;
        if (*(v56 - 2) >= 0xF0u)
          v62 = 240;
        else
          v62 = *(v56 - 2);
        v63 = *(v54 - 1);
        v65 = *v54;
        v54 += 4;
        v64 = v65;
        if (v62 <= 0x10)
          v66 = 16;
        else
          v66 = v62;
        v67 = *(v56 - 1);
        v68 = *v56;
        if (v63 >= 0xF0)
          v69 = 240;
        else
          v69 = v63;
        if (v69 <= 0x10)
          v70 = 16;
        else
          v70 = v69;
        if (v64 >= 0xF0)
          v71 = 240;
        else
          v71 = v64;
        if (v71 <= 0x10)
          v72 = 16;
        else
          v72 = v71;
        v73 = &v41[v53];
        if (v67 >= 0xF0)
          v67 = 240;
        if (v67 <= 0x10)
          v67 = 16;
        if (v68 >= 0xF0)
          v68 = 240;
        v74 = (613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32;
        v75 = (613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32;
        v76 = (613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32;
        v77 = (613566757 * (unint64_t)((1023 * v66 - 16368) >> 5)) >> 32;
        v78 = 613566757 * ((1023 * v70 - 16368) >> 5);
        if (v68 <= 0x10)
          v68 = 16;
        *v73 = (16 * (v76 + v74 + WORD2(v78) + ((613566757 * (unint64_t)((1023 * v67 - 16368) >> 5)) >> 32)) + 32) & 0xFFC0;
        v73[1] = (16
                * (v77
                 + v75
                 + ((613566757 * (unint64_t)((1023 * v72 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v53 += 2;
      }
      while (v53 < v39);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    v79 = 0;
    v80 = v27 - v38;
    do
    {
      v81 = v16;
      v82 = v23;
      if ((v8 & 1) != 0)
      {
        v83 = *v16;
        v84 = v16[1];
        v85 = v16[v15];
        v86 = v16[v15 + 1];
        if (v83 >= 0xF0)
          v83 = 240;
        if (v83 <= 0x10)
          v83 = 16;
        if (v84 >= 0xF0)
          v84 = 240;
        if (v84 <= 0x10)
          v84 = 16;
        if (v85 >= 0xF0)
          v85 = 240;
        if (v85 <= 0x10)
          v85 = 16;
        if (v86 >= 0xF0)
          v86 = 240;
        if (v86 <= 0x10)
          v87 = 16;
        else
          v87 = v86;
        v88 = v16[2];
        v89 = v16[3];
        v90 = &v16[v15 + 2];
        v91 = *v90;
        v92 = v90[1];
        if (v88 >= 0xF0)
          v88 = 240;
        if (v88 <= 0x10)
          v88 = 16;
        if (v89 >= 0xF0)
          v89 = 240;
        if (v89 <= 0x10)
          v89 = 16;
        if (v91 >= 0xF0)
          v91 = 240;
        if (v91 <= 0x10)
          v91 = 16;
        if (v92 >= 0xF0)
          v92 = 240;
        if (v92 <= 0x10)
          v93 = 16;
        else
          v93 = v92;
        v81 = v16 + 4;
        *v23 = (16
              * (((613566757 * (unint64_t)((1023 * v85 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v83 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v88 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v91 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v23[1] = (16
                * (((613566757 * (unint64_t)((1023 * v87 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v84 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v89 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v93 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v82 = v23 + 2;
      }
      if (v24 != v10)
      {
        v94 = 0;
        v95 = v81 + 3;
        do
        {
          v96 = *(v95 - 3);
          v97 = &v95[v15];
          if (v96 >= 0xF0)
            v96 = 240;
          if (v96 <= 0x10)
            v98 = 16;
          else
            v98 = v96;
          if (*(v95 - 2) >= 0xF0u)
            v99 = 240;
          else
            v99 = *(v95 - 2);
          if (v99 <= 0x10)
            v100 = 16;
          else
            v100 = v99;
          if (v95[v15 - 3] >= 0xF0u)
            v101 = 240;
          else
            v101 = v95[v15 - 3];
          if (v101 <= 0x10)
            v102 = 16;
          else
            v102 = v101;
          if (*(v97 - 2) >= 0xF0u)
            v103 = 240;
          else
            v103 = *(v97 - 2);
          v104 = *(v95 - 1);
          v106 = *v95;
          v95 += 4;
          v105 = v106;
          if (v103 <= 0x10)
            v107 = 16;
          else
            v107 = v103;
          v108 = *(v97 - 1);
          v109 = *v97;
          if (v104 >= 0xF0)
            v110 = 240;
          else
            v110 = v104;
          if (v110 <= 0x10)
            v111 = 16;
          else
            v111 = v110;
          if (v105 >= 0xF0)
            v112 = 240;
          else
            v112 = v105;
          if (v112 <= 0x10)
            v113 = 16;
          else
            v113 = v112;
          v114 = &v82[v94];
          if (v108 >= 0xF0)
            v108 = 240;
          if (v108 <= 0x10)
            v108 = 16;
          if (v109 >= 0xF0)
            v109 = 240;
          v115 = (613566757 * (unint64_t)((1023 * v98 - 16368) >> 5)) >> 32;
          v116 = (613566757 * (unint64_t)((1023 * v100 - 16368) >> 5)) >> 32;
          v117 = (613566757 * (unint64_t)((1023 * v102 - 16368) >> 5)) >> 32;
          v118 = (613566757 * (unint64_t)((1023 * v107 - 16368) >> 5)) >> 32;
          v119 = 613566757 * ((1023 * v111 - 16368) >> 5);
          if (v109 <= 0x10)
            v109 = 16;
          *v114 = (16
                 * (v117 + v115 + WORD2(v119) + ((613566757 * (unint64_t)((1023 * v108 - 16368) >> 5)) >> 32))
                 + 32) & 0xFFC0;
          v114[1] = (16
                   * (v118
                    + v116
                    + ((613566757 * (unint64_t)((1023 * v113 - 16368) >> 5)) >> 32)
                    + ((613566757 * (unint64_t)((1023 * v109 - 16368) >> 5)) >> 32))
                   + 32) & 0xFFC0;
          v94 += 2;
        }
        while (v94 < v39);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v79 += 2;
    }
    while (v79 < v80);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  _WORD *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v8 + v33;
    v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)
                                                  + ((1023 * v37
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v38 = v12;
  else
    v38 = 0;
  if (v24 < v10)
    v10 = 0;
  v39 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v16[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v16[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v40 = v16 + 4;
      *v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v41 = v23 + 2;
    }
    else
    {
      v40 = v16;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v46 = 0;
      do
      {
        v47 = &v41[v46];
        v48 = *v40;
        v49 = v40[1];
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v48 = 16;
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v49 = 16;
        *v47 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
        v47[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
        v46 += 2;
        v40 += 4;
      }
      while (v46 < v39);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    v50 = 0;
    v51 = v27 - v38;
    v52 = 2 * v15;
    do
    {
      v53 = v16;
      v54 = v23;
      if ((v8 & 1) != 0)
      {
        v55 = *v16;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        if (v16[1] >= 0xF0u)
          v57 = 240;
        else
          v57 = v16[1];
        if (v57 <= 0x10)
          v58 = 16;
        else
          v58 = v57;
        v53 = v16 + 4;
        *v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
        v54 = v23 + 2;
      }
      if (v24 != v10)
      {
        v59 = 0;
        do
        {
          v60 = &v54[v59];
          v61 = *v53;
          v62 = v53[1];
          if (v61 >= 0xF0)
            v61 = 240;
          if (v61 <= 0x10)
            v61 = 16;
          if (v62 >= 0xF0)
            v62 = 240;
          if (v62 <= 0x10)
            v62 = 16;
          *v60 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
          v60[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
          v59 += 2;
          v53 += 4;
        }
        while (v59 < v39);
      }
      v16 += v52;
      v23 = (_WORD *)((char *)v23 + v22);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_444v_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  __int16 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  __int16 v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + 2 * v9);
  v14 = a6[4];
  v13 = a6[5];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v13 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] < v15)
    v15 = a2[3];
  if (v15)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v13 + v14;
    v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v24 = *(unsigned __int8 *)(v22 + i);
          if (v24 >= 0xEB)
            v24 = 235;
          if (v24 <= 0x10)
            v24 = 16;
          *(_BYTE *)(v21 + i) = (((255 * v24
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 7;
        }
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v15);
    v9 = a2[4];
    v8 = a2[5];
  }
  v25 = v8 & 1;
  if (v15 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v9 & 1;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v33 = *v12;
      v34 = v12[1];
      if (v33 >= 0xF0)
        v33 = 240;
      if (v33 <= 0x10)
        LOWORD(v33) = 16;
      if (v34 >= 0xF0)
        v34 = 240;
      if (v34 <= 0x10)
        v35 = 16;
      else
        v35 = v34;
      v31 = v12 + 2;
      *v17 = (9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16;
      v17[1] = (9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v12;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v36 = 0;
    }
    else
    {
      v37 = v10 - v29;
      do
      {
        v38 = *v31;
        v39 = v31[1];
        if (v38 >= 0xF0)
          v38 = 240;
        if (v38 <= 0x10)
          LOWORD(v38) = 16;
        if (v39 >= 0xF0)
          v39 = 240;
        if (v39 <= 0x10)
          LOWORD(v39) = 16;
        v31 += 2;
        *v32 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
        v32[1] = (9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16;
        v32 += 2;
        --v37;
      }
      while (v37);
      v36 = v10 - v29;
    }
    if (v36 + v28 < v10)
    {
      v40 = *v31;
      v41 = v31[1];
      if (v40 >= 0xF0)
        v40 = 240;
      if (v40 <= 0x10)
        LOWORD(v40) = 16;
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        LOWORD(v41) = 16;
      *v32 = (9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16;
      v32[1] = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
    }
    v12 += v11;
    v17 += v16;
  }
  if (v15 == v26)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v15 - v26;
    do
    {
      v44 = v12;
      v45 = v17;
      if ((v27 & 1) != 0)
      {
        v46 = *v12;
        v47 = v12[1];
        if (v46 >= 0xF0)
          v46 = 240;
        if (v46 <= 0x10)
          LOWORD(v46) = 16;
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v48 = 16;
        else
          v48 = v47;
        v44 = v12 + 2;
        *v17 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
        v17[1] = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
        v45 = v17 + 2;
      }
      if (v10 == v29)
      {
        v49 = 0;
      }
      else
      {
        v50 = v10 - v29;
        do
        {
          v51 = *v44;
          v52 = v44[1];
          if (v51 >= 0xF0)
            v51 = 240;
          if (v51 <= 0x10)
            LOWORD(v51) = 16;
          if (v52 >= 0xF0)
            v52 = 240;
          if (v52 <= 0x10)
            LOWORD(v52) = 16;
          v44 += 2;
          *v45 = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
          v45[1] = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
          v45 += 2;
          --v50;
        }
        while (v50);
        v49 = v10 - v29;
      }
      if (v49 + v28 < v10)
      {
        v53 = *v44;
        v54 = v44[1];
        if (v53 >= 0xF0)
          v53 = 240;
        if (v53 <= 0x10)
          LOWORD(v53) = 16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          LOWORD(v54) = 16;
        *v45 = (9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16;
        v45[1] = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
      }
      v12 += v11;
      v17 += v16;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v25 < v15)
  {
    if ((v27 & 1) != 0)
    {
      v55 = *v12;
      v56 = v12[1];
      if (v55 >= 0xF0)
        v55 = 240;
      if (v55 <= 0x10)
        LOWORD(v55) = 16;
      if (v56 >= 0xF0)
        v56 = 240;
      if (v56 <= 0x10)
        LOWORD(v56) = 16;
      v12 += 2;
      *v17 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
      v17[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v57 = v10 - v29;
      do
      {
        v58 = *v12;
        v59 = v12[1];
        if (v58 >= 0xF0)
          v58 = 240;
        if (v58 <= 0x10)
          LOWORD(v58) = 16;
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          LOWORD(v59) = 16;
        v12 += 2;
        *v17 = (9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16;
        v17[1] = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v30 + v28 < v10)
    {
      v60 = *v12;
      v61 = v12[1];
      if (v60 >= 0xF0)
        v60 = 240;
      if (v60 <= 0x10)
        LOWORD(v60) = 16;
      if (v61 >= 0xF0)
        v61 = 240;
      if (v61 <= 0x10)
        LOWORD(v61) = 16;
      *v17 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
      v17[1] = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  size_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  size_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  size_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  size_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = a8[1];
  v19 = (_BYTE *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v20)
    v21 = v20;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v22 = v14;
  else
    v22 = *(_QWORD *)(a2 + 24);
  if (v22)
  {
    v56 = a8[1];
    v58 = a4[1];
    v59 = a8[2];
    v23 = (char *)(a7[2] + v59 * v17 + v15);
    v60 = *a8;
    v24 = (char *)(*a7 + *a8 * v17 + v15);
    v25 = a4[2];
    v26 = (char *)(a3[2] + v25 * v11 + v10);
    v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v11 + v10);
    v57 = v22;
    do
    {
      memcpy(v24, v28, v21);
      memcpy(v23, v26, v21);
      v28 += v27;
      v24 += v60;
      v26 += v25;
      v23 += v59;
      --v22;
    }
    while (v22);
    v18 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v22 = v57;
    v12 = v58;
  }
  v29 = v11 & 1;
  if (v22 >= v29)
    v30 = v11 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v9)
    v9 = 0;
  v32 = v21 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v13 + 4;
      v35 = (v13[1] + v13[3] + 1) >> 1;
      *v19 = (*v13 + v13[2] + 1) >> 1;
      v19[1] = v35;
      v34 = v19 + 2;
    }
    else
    {
      v33 = v13;
      v34 = v19;
    }
    if (v21 != v9)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (v33[1] + v33[3] + 1) >> 1;
        *v37 = (*v33 + v33[2] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v13 += v12;
    v19 += v18;
  }
  if (v22 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v22 - v30;
    do
    {
      v41 = v13;
      v42 = v19;
      if ((v31 & 1) != 0)
      {
        v41 = v13 + 4;
        v43 = (v13[1] + v13[3] + 1) >> 1;
        *v19 = (*v13 + v13[2] + 1) >> 1;
        v19[1] = v43;
        v42 = v19 + 2;
      }
      if (v21 != v9)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (v41[1] + v41[3] + 1) >> 1;
          *v45 = (*v41 + v41[2] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v13 += v12;
      v19 += v18;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v22)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v13;
      v48 = v13[1];
      v49 = v13[2];
      v50 = v13[3];
      v13 += 4;
      *v19 = (v47 + v49 + 1) >> 1;
      v19[1] = (v48 + v50 + 1) >> 1;
      v19 += 2;
    }
    if (v21 != v9)
    {
      v51 = 0;
      do
      {
        v52 = &v19[v51];
        v53 = (v13[1] + v13[3] + 1) >> 1;
        *v52 = (*v13 + v13[2] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  size_t v32;
  __int16 *v33;
  __int16 *v34;
  size_t v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;
  __int16 *v39;
  __int16 *v40;
  size_t v41;
  __int16 v42;
  __int16 v43;
  size_t v44;
  __int16 v45;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = a8[1];
  v19 = (__int16 *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v20)
    v21 = v20;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v22 = v14;
  else
    v22 = *(_QWORD *)(a2 + 24);
  if (v22)
  {
    v48 = a8[1];
    v50 = a4[1];
    v51 = a8[2];
    v23 = (char *)(a7[2] + v51 * v17 + v15);
    v52 = *a8;
    v24 = (char *)(*a7 + *a8 * v17 + v15);
    v25 = a4[2];
    v26 = (char *)(a3[2] + v25 * v11 + v10);
    v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v11 + v10);
    v49 = v22;
    do
    {
      memcpy(v24, v28, v21);
      memcpy(v23, v26, v21);
      v28 += v27;
      v24 += v52;
      v26 += v25;
      v23 += v51;
      --v22;
    }
    while (v22);
    v18 = v48;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v22 = v49;
    v12 = v50;
  }
  v29 = v11 & 1;
  if (v22 >= v29)
    v30 = v11 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v9)
    v9 = 0;
  v32 = v21 - v9;
  if ((v11 & 1) != 0)
  {
    v33 = v13;
    if ((v31 & 1) != 0)
    {
      v33 = v13 + 2;
      *v19 = *v13;
      v34 = v19 + 1;
    }
    else
    {
      v34 = v19;
    }
    if (v21 != v9)
    {
      v35 = 0;
      do
      {
        v36 = *v33;
        v33 += 2;
        v34[v35 / 2] = v36;
        v35 += 2;
      }
      while (v35 < v32);
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v19 = (__int16 *)((char *)v19 + v18);
  }
  if (v22 == v30)
  {
    v37 = 0;
  }
  else
  {
    v38 = 0;
    v37 = v22 - v30;
    do
    {
      v39 = v13;
      v40 = v19;
      if ((v31 & 1) != 0)
      {
        v39 = v13 + 2;
        *v19 = *v13;
        v40 = v19 + 1;
      }
      if (v21 != v9)
      {
        v41 = 0;
        do
        {
          v42 = *v39;
          v39 += 2;
          v40[v41 / 2] = v42;
          v41 += 2;
        }
        while (v41 < v32);
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v19 = (__int16 *)((char *)v19 + v18);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v29 < v22)
  {
    if ((v31 & 1) != 0)
    {
      v43 = *v13;
      v13 += 2;
      *v19++ = v43;
    }
    if (v21 != v9)
    {
      v44 = 0;
      do
      {
        v45 = *v13;
        v13 += 2;
        v19[v44 / 2] = v45;
        v44 += 2;
      }
      while (v44 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  size_t v27;
  unsigned __int8 *v28;
  _BYTE *v29;
  unsigned int v30;
  size_t v31;
  _BYTE *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  size_t v39;
  _BYTE *v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  size_t v46;
  _BYTE *v47;
  unsigned int v48;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    v18 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else
    v18 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v19 = *(_QWORD *)(a6 + 24);
  else
    v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    v51 = v19;
    v20 = *a4;
    v21 = *a8;
    v22 = (char *)(*a7 + *a8 * v15 + v14);
    v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    v19 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v24 = v11 & 1;
  if (v19 >= v24)
    v25 = v11 & 1;
  else
    v25 = 0;
  v26 = v8;
  if (v18 < v9)
    v9 = 0;
  v27 = v18 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v28 = v13 + 4;
      v30 = (v13[1] + v13[3] + 1) >> 1;
      *v17 = (*v13 + v13[2] + 1) >> 1;
      v17[1] = v30;
      v29 = v17 + 2;
    }
    else
    {
      v28 = v13;
      v29 = v17;
    }
    if (v18 != v9)
    {
      v31 = 0;
      do
      {
        v32 = &v29[v31];
        v33 = (v28[1] + v28[3] + 1) >> 1;
        *v32 = (*v28 + v28[2] + 1) >> 1;
        v32[1] = v33;
        v31 += 2;
        v28 += 4;
      }
      while (v31 < v27);
    }
    v13 += v12;
    v17 += v16;
  }
  if (v19 == v25)
  {
    v34 = 0;
  }
  else
  {
    v35 = 0;
    v34 = v19 - v25;
    do
    {
      v36 = v13;
      v37 = v17;
      if ((v26 & 1) != 0)
      {
        v36 = v13 + 4;
        v38 = (v13[1] + v13[3] + 1) >> 1;
        *v17 = (*v13 + v13[2] + 1) >> 1;
        v17[1] = v38;
        v37 = v17 + 2;
      }
      if (v18 != v9)
      {
        v39 = 0;
        do
        {
          v40 = &v37[v39];
          v41 = (v36[1] + v36[3] + 1) >> 1;
          *v40 = (*v36 + v36[2] + 1) >> 1;
          v40[1] = v41;
          v39 += 2;
          v36 += 4;
        }
        while (v39 < v27);
      }
      v13 += v12;
      v17 += v16;
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v24 < v19)
  {
    if ((v26 & 1) != 0)
    {
      v42 = *v13;
      v43 = v13[1];
      v44 = v13[2];
      v45 = v13[3];
      v13 += 4;
      *v17 = (v42 + v44 + 1) >> 1;
      v17[1] = (v43 + v45 + 1) >> 1;
      v17 += 2;
    }
    if (v18 != v9)
    {
      v46 = 0;
      do
      {
        v47 = &v17[v46];
        v48 = (v13[1] + v13[3] + 1) >> 1;
        *v47 = (*v13 + v13[2] + 1) >> 1;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  size_t v27;
  __int16 *v28;
  __int16 *v29;
  size_t v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  __int16 *v34;
  __int16 *v35;
  size_t v36;
  __int16 v37;
  __int16 v38;
  size_t v39;
  __int16 v40;
  unint64_t v43;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = a8[1];
  v17 = (__int16 *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    v18 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else
    v18 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v19 = *(_QWORD *)(a6 + 24);
  else
    v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    v43 = v19;
    v20 = *a4;
    v21 = *a8;
    v22 = (char *)(*a7 + *a8 * v15 + v14);
    v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    v19 = v43;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v24 = v11 & 1;
  if (v19 >= v24)
    v25 = v11 & 1;
  else
    v25 = 0;
  v26 = v8;
  if (v18 < v9)
    v9 = 0;
  v27 = v18 - v9;
  if ((v11 & 1) != 0)
  {
    v28 = v13;
    if ((v26 & 1) != 0)
    {
      v28 = v13 + 2;
      *v17 = *v13;
      v29 = v17 + 1;
    }
    else
    {
      v29 = v17;
    }
    if (v18 != v9)
    {
      v30 = 0;
      do
      {
        v31 = *v28;
        v28 += 2;
        v29[v30 / 2] = v31;
        v30 += 2;
      }
      while (v30 < v27);
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (__int16 *)((char *)v17 + v16);
  }
  if (v19 == v25)
  {
    v32 = 0;
  }
  else
  {
    v33 = 0;
    v32 = v19 - v25;
    do
    {
      v34 = v13;
      v35 = v17;
      if ((v26 & 1) != 0)
      {
        v34 = v13 + 2;
        *v17 = *v13;
        v35 = v17 + 1;
      }
      if (v18 != v9)
      {
        v36 = 0;
        do
        {
          v37 = *v34;
          v34 += 2;
          v35[v36 / 2] = v37;
          v36 += 2;
        }
        while (v36 < v27);
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (__int16 *)((char *)v17 + v16);
      ++v33;
    }
    while (v33 != v32);
  }
  if (v32 + v24 < v19)
  {
    if ((v26 & 1) != 0)
    {
      v38 = *v13;
      v13 += 2;
      *v17++ = v38;
    }
    if (v18 != v9)
    {
      v39 = 0;
      do
      {
        v40 = *v13;
        v13 += 2;
        v17[v39 / 2] = v40;
        v39 += 2;
      }
      while (v39 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  unint64_t v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _BYTE *v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unint64_t v61;
  _BYTE *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  _BYTE *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v29 = *(unsigned __int8 *)(v27 + i);
          if (v29 >= 0xEB)
            v29 = 235;
          if (v29 <= 0x10)
            v29 = 16;
          *(_BYTE *)(v26 + i) = (((255 * v29
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  if (v9 >= (v12 & 1u))
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v35 = *v14;
      if (v35 >= 0xF0)
        v35 = 240;
      if (v35 <= 0x10)
        v36 = 16;
      else
        v36 = v35;
      if (v14[1] >= 0xF0u)
        v37 = 240;
      else
        v37 = v14[1];
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      v39 = v14[2];
      if (v39 >= 0xF0)
        v39 = 240;
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      if (v14[3] >= 0xF0u)
        v41 = 240;
      else
        v41 = v14[3];
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      v33 = v14 + 4;
      *v20 = (((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v20[1] = (((9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v43 = 0;
      do
      {
        v44 = &v34[v43];
        v45 = *v33;
        v46 = v33[1];
        if (v45 >= 0xF0)
          v45 = 240;
        if (v45 <= 0x10)
          LOWORD(v45) = 16;
        if (v46 >= 0xF0)
          v46 = 240;
        if (v46 <= 0x10)
          LOWORD(v46) = 16;
        v47 = v33[2];
        v48 = v33[3];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          LOWORD(v47) = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          LOWORD(v48) = 16;
        *v44 = (((9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v44[1] = (((9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        v43 += 2;
        v33 += 4;
      }
      while (v43 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v9 == v30)
  {
    v49 = 0;
  }
  else
  {
    v50 = 0;
    v49 = v9 - v30;
    do
    {
      v51 = v14;
      v52 = v20;
      if ((v31 & 1) != 0)
      {
        v53 = *v14;
        if (v53 >= 0xF0)
          v53 = 240;
        if (v53 <= 0x10)
          v54 = 16;
        else
          v54 = v53;
        if (v14[1] >= 0xF0u)
          v55 = 240;
        else
          v55 = v14[1];
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        v57 = v14[2];
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          v58 = 16;
        else
          v58 = v57;
        if (v14[3] >= 0xF0u)
          v59 = 240;
        else
          v59 = v14[3];
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        v51 = v14 + 4;
        *v20 = (((9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v20[1] = (((9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        v52 = v20 + 2;
      }
      if (v21 != v10)
      {
        v61 = 0;
        do
        {
          v62 = &v52[v61];
          v63 = *v51;
          v64 = v51[1];
          if (v63 >= 0xF0)
            v63 = 240;
          if (v63 <= 0x10)
            LOWORD(v63) = 16;
          if (v64 >= 0xF0)
            v64 = 240;
          if (v64 <= 0x10)
            LOWORD(v64) = 16;
          v65 = v51[2];
          v66 = v51[3];
          if (v65 >= 0xF0)
            v65 = 240;
          if (v65 <= 0x10)
            LOWORD(v65) = 16;
          if (v66 >= 0xF0)
            v66 = 240;
          if (v66 <= 0x10)
            LOWORD(v66) = 16;
          *v62 = (((9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16)
                + 1) >> 1;
          v62[1] = (((9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          v61 += 2;
          v51 += 4;
        }
        while (v61 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + (v12 & 1) < v9)
  {
    if ((v31 & 1) != 0)
    {
      v67 = *v14;
      v68 = v14[1];
      if (v67 >= 0xF0)
        v67 = 240;
      if (v67 <= 0x10)
        LOWORD(v67) = 16;
      if (v68 >= 0xF0)
        v68 = 240;
      if (v68 <= 0x10)
        LOWORD(v68) = 16;
      v69 = v14[2];
      if (v69 >= 0xF0)
        v69 = 240;
      if (v69 <= 0x10)
        LOWORD(v69) = 16;
      if (v14[3] >= 0xF0u)
        v70 = 240;
      else
        v70 = v14[3];
      if (v70 <= 0x10)
        LOWORD(v70) = 16;
      v14 += 4;
      *v20 = (((9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v20[1] = (((9363 * ((unsigned __int16)(255 * v68 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v71 = 0;
      do
      {
        v72 = &v20[v71];
        v73 = *v14;
        v74 = v14[1];
        if (v73 >= 0xF0)
          v73 = 240;
        if (v73 <= 0x10)
          LOWORD(v73) = 16;
        if (v74 >= 0xF0)
          v74 = 240;
        if (v74 <= 0x10)
          LOWORD(v74) = 16;
        v75 = v14[2];
        v76 = v14[3];
        if (v75 >= 0xF0)
          v75 = 240;
        if (v75 <= 0x10)
          LOWORD(v75) = 16;
        if (v76 >= 0xF0)
          v76 = 240;
        if (v76 <= 0x10)
          LOWORD(v76) = 16;
        *v72 = (((9363 * ((unsigned __int16)(255 * v73 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v75 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v72[1] = (((9363 * ((unsigned __int16)(255 * v74 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v76 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        v71 += 2;
        v14 += 4;
      }
      while (v71 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v29 = *(unsigned __int8 *)(v27 + i);
          if (v29 >= 0xEB)
            v29 = 235;
          if (v29 <= 0x10)
            v29 = 16;
          *(_BYTE *)(v26 + i) = (((255 * v29
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  if (v8 >= (v12 & 1u))
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v35 = *v14;
      if (v35 >= 0xF0)
        v35 = 240;
      if (v35 <= 0x10)
        v36 = 16;
      else
        v36 = v35;
      if (v14[1] >= 0xF0u)
        v37 = 240;
      else
        v37 = v14[1];
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      v33 = v14 + 4;
      *v20 = (9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v34[v39];
        v41 = *v33;
        v42 = v33[1];
        if (v41 >= 0xF0)
          v41 = 240;
        if (v41 <= 0x10)
          LOWORD(v41) = 16;
        if (v42 >= 0xF0)
          v42 = 240;
        if (v42 <= 0x10)
          LOWORD(v42) = 16;
        *v40 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
        v40[1] = (9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16;
        v39 += 2;
        v33 += 4;
      }
      while (v39 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v8 - v30;
    do
    {
      v45 = v14;
      v46 = v20;
      if ((v31 & 1) != 0)
      {
        v47 = *v14;
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          v48 = 16;
        else
          v48 = v47;
        if (v14[1] >= 0xF0u)
          v49 = 240;
        else
          v49 = v14[1];
        if (v49 <= 0x10)
          v50 = 16;
        else
          v50 = v49;
        v45 = v14 + 4;
        *v20 = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
        v20[1] = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
        v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        v51 = 0;
        do
        {
          v52 = &v46[v51];
          v53 = *v45;
          v54 = v45[1];
          if (v53 >= 0xF0)
            v53 = 240;
          if (v53 <= 0x10)
            LOWORD(v53) = 16;
          if (v54 >= 0xF0)
            v54 = 240;
          if (v54 <= 0x10)
            LOWORD(v54) = 16;
          *v52 = (9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16;
          v52[1] = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
          v51 += 2;
          v45 += 4;
        }
        while (v51 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v12 & 1) < v8)
  {
    if ((v31 & 1) != 0)
    {
      v55 = *v14;
      v56 = v14[1];
      if (v55 >= 0xF0)
        v55 = 240;
      if (v55 <= 0x10)
        LOWORD(v55) = 16;
      if (v56 >= 0xF0)
        v56 = 240;
      if (v56 <= 0x10)
        LOWORD(v56) = 16;
      v14 += 4;
      *v20 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v57 = 0;
      do
      {
        v58 = &v20[v57];
        v59 = *v14;
        v60 = v14[1];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          LOWORD(v59) = 16;
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          LOWORD(v60) = 16;
        *v58 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        v58[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        v57 += 2;
        v14 += 4;
      }
      while (v57 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  unsigned int v40;
  size_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  unsigned int v59;
  size_t v60;
  unsigned __int8 *v61;
  _BYTE *v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v25 = *a4;
    v75 = *a8;
    v76 = *a4;
    if (v13 >= v9)
      v25 = 0;
    v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    v73 = a8[1];
    v74 = a8[2];
    v27 = (char *)(a7[2] + v74 * v19 + v17);
    v28 = (char *)(*a7 + *a8 * v19 + v17);
    v29 = a4[2];
    v30 = (char *)(a3[2] + v29 * v13 + v11);
    v31 = -(uint64_t)v24;
    do
    {
      memcpy(v28, v26, v23);
      memcpy(v27, v30, v23);
      v26 += v76;
      v28 += v75;
      v30 += v29;
      v27 += v74;
    }
    while (!__CFADD__(v31++, 1));
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v73;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v23 < v10)
    v10 = 0;
  v34 = v23 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = &v16[v15 + 2];
      v38 = *v37;
      v39 = v37[1];
      v35 = v16 + 4;
      v40 = (v16[1] + v16[3] + v16[v15 + 1] + v39 + 2) >> 2;
      *v22 = (*v16 + v16[2] + v16[v15] + v38 + 2) >> 2;
      v22[1] = v40;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v23 != v10)
    {
      v41 = 0;
      v42 = v35 + 3;
      do
      {
        v43 = &v36[v41];
        v44 = *(v42 - 3);
        v45 = *(v42 - 2);
        v46 = &v42[v15];
        v47 = v42[v15 - 3];
        v48 = v42[v15 - 2];
        v49 = *(v42 - 1);
        v50 = *v42;
        v42 += 4;
        v51 = (v45 + v50 + v48 + *v46 + 2) >> 2;
        *v43 = (v44 + v49 + v47 + *(v46 - 1) + 2) >> 2;
        v43[1] = v51;
        v41 += 2;
      }
      while (v41 < v34);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v33)
  {
    v52 = 0;
    v53 = v24 - v33;
    do
    {
      v54 = v16;
      v55 = v22;
      if ((v8 & 1) != 0)
      {
        v56 = &v16[v15 + 2];
        v57 = *v56;
        v58 = v56[1];
        v54 = v16 + 4;
        v59 = (v16[1] + v16[3] + v16[v15 + 1] + v58 + 2) >> 2;
        *v22 = (*v16 + v16[2] + v16[v15] + v57 + 2) >> 2;
        v22[1] = v59;
        v55 = v22 + 2;
      }
      if (v23 != v10)
      {
        v60 = 0;
        v61 = v54 + 3;
        do
        {
          v62 = &v55[v60];
          v63 = *(v61 - 3);
          v64 = *(v61 - 2);
          v65 = &v61[v15];
          v66 = v61[v15 - 3];
          v67 = v61[v15 - 2];
          v68 = *(v61 - 1);
          v69 = *v61;
          v61 += 4;
          v70 = (v64 + v69 + v67 + *v65 + 2) >> 2;
          *v62 = (v63 + v68 + v66 + *(v65 - 1) + 2) >> 2;
          v62[1] = v70;
          v60 += 2;
        }
        while (v60 < v34);
      }
      v16 += 2 * v15;
      v22 += v21;
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v34;
  size_t v35;
  __int16 *v36;
  __int16 *v37;
  size_t v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  __int16 *v42;
  __int16 *v43;
  size_t v44;
  __int16 v45;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v49 = a4[1];
    v50 = a8[1];
    v25 = *a4;
    v51 = a8[2];
    v52 = *a4;
    if (v13 >= v9)
      v25 = 0;
    v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    v27 = (char *)(a7[2] + a8[2] * v19 + v17);
    v28 = *a8;
    v29 = (char *)(*a7 + *a8 * v19 + v17);
    v30 = a4[2];
    v31 = (char *)(a3[2] + v30 * v13 + v11);
    v48 = v24;
    v32 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v26, v23);
      memcpy(v27, v31, v23);
      v26 += v52;
      v29 += v28;
      v31 += v30;
      v27 += v51;
    }
    while (!__CFADD__(v32++, 1));
    v24 = v48;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v49;
    v21 = v50;
  }
  if (v24 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v23 < v10)
    v10 = 0;
  v35 = v23 - v10;
  if (v12)
  {
    v36 = v16;
    if ((v8 & 1) != 0)
    {
      v36 = v16 + 2;
      *v22 = *v16;
      v37 = v22 + 1;
    }
    else
    {
      v37 = v22;
    }
    if (v23 != v10)
    {
      v38 = 0;
      do
      {
        v39 = *v36;
        v36 += 2;
        v37[v38 / 2] = v39;
        v38 += 2;
      }
      while (v38 < v35);
    }
    v16 += v15;
    v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v34)
  {
    v40 = 0;
    v41 = v24 - v34;
    do
    {
      v42 = v16;
      v43 = v22;
      if ((v8 & 1) != 0)
      {
        v42 = v16 + 2;
        *v22 = *v16;
        v43 = v22 + 1;
      }
      if (v23 != v10)
      {
        v44 = 0;
        do
        {
          v45 = *v42;
          v42 += 2;
          v43[v44 / 2] = v45;
          v44 += 2;
        }
        while (v44 < v35);
      }
      v16 += v15;
      v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  size_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned int v39;
  size_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  _BYTE *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unsigned int v58;
  size_t v59;
  unsigned __int8 *v60;
  _BYTE *v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unint64_t v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v72 = v24;
    v25 = *a4;
    v26 = *a8;
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v17);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    v24 = v72;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v23 < v10)
    v10 = 0;
  v33 = v23 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = &v16[v15 + 2];
      v37 = *v36;
      v38 = v36[1];
      v34 = v16 + 4;
      v39 = (v16[1] + v16[3] + v16[v15 + 1] + v38 + 2) >> 2;
      *v22 = (*v16 + v16[2] + v16[v15] + v37 + 2) >> 2;
      v22[1] = v39;
      v35 = v22 + 2;
    }
    else
    {
      v34 = v16;
      v35 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      v41 = v34 + 3;
      do
      {
        v42 = &v35[v40];
        v43 = *(v41 - 3);
        v44 = *(v41 - 2);
        v45 = &v41[v15];
        v46 = v41[v15 - 3];
        v47 = v41[v15 - 2];
        v48 = *(v41 - 1);
        v49 = *v41;
        v41 += 4;
        v50 = (v44 + v49 + v47 + *v45 + 2) >> 2;
        *v42 = (v43 + v48 + v46 + *(v45 - 1) + 2) >> 2;
        v42[1] = v50;
        v40 += 2;
      }
      while (v40 < v33);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v32)
  {
    v51 = 0;
    v52 = v24 - v32;
    do
    {
      v53 = v16;
      v54 = v22;
      if ((v8 & 1) != 0)
      {
        v55 = &v16[v15 + 2];
        v56 = *v55;
        v57 = v55[1];
        v53 = v16 + 4;
        v58 = (v16[1] + v16[3] + v16[v15 + 1] + v57 + 2) >> 2;
        *v22 = (*v16 + v16[2] + v16[v15] + v56 + 2) >> 2;
        v22[1] = v58;
        v54 = v22 + 2;
      }
      if (v23 != v10)
      {
        v59 = 0;
        v60 = v53 + 3;
        do
        {
          v61 = &v54[v59];
          v62 = *(v60 - 3);
          v63 = *(v60 - 2);
          v64 = &v60[v15];
          v65 = v60[v15 - 3];
          v66 = v60[v15 - 2];
          v67 = *(v60 - 1);
          v68 = *v60;
          v60 += 4;
          v69 = (v63 + v68 + v66 + *v64 + 2) >> 2;
          *v61 = (v62 + v67 + v65 + *(v64 - 1) + 2) >> 2;
          v61[1] = v69;
          v59 += 2;
        }
        while (v59 < v33);
      }
      v16 += 2 * v15;
      v22 += v21;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  size_t v33;
  __int16 *v34;
  __int16 *v35;
  size_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  __int16 *v40;
  __int16 *v41;
  size_t v42;
  __int16 v43;
  unint64_t v45;
  uint64_t v46;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = v10 & 1;
  v14 = v13 + v10;
  v15 = (*(_DWORD *)(a2 + 24) + (_DWORD)v10) & 0xFFFFFFFE;
  v16 = a4[1];
  v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + 2 * (v11 + v9));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                            + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                        - v18)
    v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v12;
  v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v45 = v24;
    v46 = a4[1];
    v25 = *a4;
    v26 = *a8;
    if (v14 >= v10)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v18);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    v9 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 40) & 1;
    v11 = v9 & 1;
    v24 = v45;
    v16 = v46;
  }
  if (v24 >= v13)
    v32 = v13;
  else
    v32 = 0;
  if (v23 < v11)
    v11 = 0;
  v33 = v23 - v11;
  if (v13)
  {
    v34 = v17;
    if ((v9 & 1) != 0)
    {
      v34 = v17 + 2;
      *v22 = *v17;
      v35 = v22 + 1;
    }
    else
    {
      v35 = v22;
    }
    if (v23 != v11)
    {
      v36 = 0;
      do
      {
        v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    v17 += v16;
    v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v32)
  {
    v38 = 0;
    v39 = v24 - v32;
    do
    {
      v40 = v17;
      v41 = v22;
      if ((v9 & 1) != 0)
      {
        v40 = v17 + 2;
        *v22 = *v17;
        v41 = v22 + 1;
      }
      if (v23 != v11)
      {
        v42 = 0;
        do
        {
          v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      v17 += v16;
      v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  __int16 v59;
  unsigned int v60;
  __int16 v61;
  unsigned int v62;
  __int16 v63;
  unsigned int v64;
  __int16 v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unsigned __int8 *v80;
  _BYTE *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  __int16 v86;
  unsigned int v87;
  unsigned int v88;
  unsigned __int8 *v89;
  unsigned int v90;
  unsigned int v91;
  __int16 v92;
  unint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned __int8 *v96;
  __int16 v97;
  unsigned int v98;
  __int16 v99;
  unsigned int v100;
  __int16 v101;
  unsigned int v102;
  __int16 v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  __int16 v109;
  _BYTE *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v25 = v19 - v18;
  if (v24 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v13 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v11 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          *(_BYTE *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v22 < v10)
    v10 = 0;
  v37 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = *v15;
      v41 = v15[1];
      v42 = v15[v14];
      v43 = v15[v14 + 1];
      if (v40 >= 0xF0)
        v40 = 240;
      if (v40 <= 0x10)
        LOWORD(v40) = 16;
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        LOWORD(v41) = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        LOWORD(v42) = 16;
      if (v43 >= 0xF0)
        v43 = 240;
      v44 = v15[2];
      if (v43 <= 0x10)
        v45 = 16;
      else
        v45 = v43;
      v46 = v15[3];
      v47 = &v15[v14 + 2];
      v48 = *v47;
      v49 = v47[1];
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        LOWORD(v44) = 16;
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        v50 = 16;
      else
        v50 = v46;
      if (v48 >= 0xF0)
        v51 = 240;
      else
        v51 = v48;
      if (v51 <= 0x10)
        v52 = 16;
      else
        v52 = v51;
      if (v49 >= 0xF0)
        v53 = 240;
      else
        v53 = v49;
      if (v53 <= 0x10)
        v54 = 16;
      else
        v54 = v53;
      v38 = v15 + 4;
      *v21 = (((9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16)
            + 2) >> 2;
      v21[1] = (((9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16)
              + 2) >> 2;
      v39 = v21 + 2;
    }
    else
    {
      v38 = v15;
      v39 = v21;
    }
    if (v22 != v10)
    {
      v55 = 0;
      v56 = v38 + 3;
      do
      {
        v57 = *(v56 - 3);
        v58 = &v56[v14];
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          v59 = 16;
        else
          v59 = v57;
        if (*(v56 - 2) >= 0xF0u)
          v60 = 240;
        else
          v60 = *(v56 - 2);
        if (v60 <= 0x10)
          v61 = 16;
        else
          v61 = v60;
        if (v56[v14 - 3] >= 0xF0u)
          v62 = 240;
        else
          v62 = v56[v14 - 3];
        if (v62 <= 0x10)
          v63 = 16;
        else
          v63 = v62;
        if (v56[v14 - 2] >= 0xF0u)
          v64 = 240;
        else
          v64 = v56[v14 - 2];
        if (v64 <= 0x10)
          v65 = 16;
        else
          v65 = v64;
        v66 = *(v56 - 1);
        v68 = *v56;
        v56 += 4;
        v67 = v68;
        v69 = *(v58 - 1);
        if (v66 >= 0xF0)
          v66 = 240;
        v70 = *v58;
        if (v66 <= 0x10)
          v71 = 16;
        else
          v71 = v66;
        if (v67 >= 0xF0)
          v67 = 240;
        v72 = &v39[v55];
        if (v67 <= 0x10)
          LOWORD(v67) = 16;
        if (v69 >= 0xF0)
          v69 = 240;
        v73 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        if (v69 <= 0x10)
          LOWORD(v69) = 16;
        v74 = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        v75 = 9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5);
        if (v70 >= 0xF0)
          v70 = 240;
        v76 = 9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5);
        v77 = 9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5);
        if (v70 <= 0x10)
          LOWORD(v70) = 16;
        *v72 = (v73
              + HIWORD(v75)
              + HIWORD(v77)
              + ((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        v72[1] = (v74
                + HIWORD(v76)
                + ((9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        v55 += 2;
      }
      while (v55 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    v78 = 0;
    v79 = v24 - v36;
    do
    {
      v80 = v15;
      v81 = v21;
      if ((v8 & 1) != 0)
      {
        v82 = *v15;
        v83 = v15[1];
        v84 = v15[v14];
        v85 = v15[v14 + 1];
        if (v82 >= 0xF0)
          v82 = 240;
        if (v82 <= 0x10)
          LOWORD(v82) = 16;
        if (v83 >= 0xF0)
          v83 = 240;
        if (v83 <= 0x10)
          LOWORD(v83) = 16;
        if (v84 >= 0xF0)
          v84 = 240;
        if (v84 <= 0x10)
          LOWORD(v84) = 16;
        if (v85 >= 0xF0)
          v85 = 240;
        if (v85 <= 0x10)
          v86 = 16;
        else
          v86 = v85;
        v87 = v15[2];
        v88 = v15[3];
        v89 = &v15[v14 + 2];
        v90 = *v89;
        v91 = v89[1];
        if (v87 >= 0xF0)
          v87 = 240;
        if (v87 <= 0x10)
          LOWORD(v87) = 16;
        if (v88 >= 0xF0)
          v88 = 240;
        if (v88 <= 0x10)
          LOWORD(v88) = 16;
        if (v90 >= 0xF0)
          v90 = 240;
        if (v90 <= 0x10)
          LOWORD(v90) = 16;
        if (v91 >= 0xF0)
          v91 = 240;
        if (v91 <= 0x10)
          v92 = 16;
        else
          v92 = v91;
        v80 = v15 + 4;
        *v21 = (((9363 * ((unsigned __int16)(255 * v82 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v84 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v87 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v90 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        v21[1] = (((9363 * ((unsigned __int16)(255 * v83 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v86 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v88 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v92 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        v81 = v21 + 2;
      }
      if (v22 != v10)
      {
        v93 = 0;
        v94 = v80 + 3;
        do
        {
          v95 = *(v94 - 3);
          v96 = &v94[v14];
          if (v95 >= 0xF0)
            v95 = 240;
          if (v95 <= 0x10)
            v97 = 16;
          else
            v97 = v95;
          if (*(v94 - 2) >= 0xF0u)
            v98 = 240;
          else
            v98 = *(v94 - 2);
          if (v98 <= 0x10)
            v99 = 16;
          else
            v99 = v98;
          if (v94[v14 - 3] >= 0xF0u)
            v100 = 240;
          else
            v100 = v94[v14 - 3];
          if (v100 <= 0x10)
            v101 = 16;
          else
            v101 = v100;
          if (v94[v14 - 2] >= 0xF0u)
            v102 = 240;
          else
            v102 = v94[v14 - 2];
          if (v102 <= 0x10)
            v103 = 16;
          else
            v103 = v102;
          v104 = *(v94 - 1);
          v106 = *v94;
          v94 += 4;
          v105 = v106;
          v107 = *(v96 - 1);
          if (v104 >= 0xF0)
            v104 = 240;
          v108 = *v96;
          if (v104 <= 0x10)
            v109 = 16;
          else
            v109 = v104;
          if (v105 >= 0xF0)
            v105 = 240;
          v110 = &v81[v93];
          if (v105 <= 0x10)
            LOWORD(v105) = 16;
          if (v107 >= 0xF0)
            v107 = 240;
          v111 = (9363 * ((unsigned __int16)(255 * v97 - 4080) >> 5)) >> 16;
          if (v107 <= 0x10)
            LOWORD(v107) = 16;
          v112 = (9363 * ((unsigned __int16)(255 * v99 - 4080) >> 5)) >> 16;
          v113 = 9363 * ((unsigned __int16)(255 * v101 - 4080) >> 5);
          if (v108 >= 0xF0)
            v108 = 240;
          v114 = 9363 * ((unsigned __int16)(255 * v103 - 4080) >> 5);
          v115 = 9363 * ((unsigned __int16)(255 * v109 - 4080) >> 5);
          if (v108 <= 0x10)
            LOWORD(v108) = 16;
          *v110 = (v111
                 + HIWORD(v113)
                 + HIWORD(v115)
                 + ((9363 * ((unsigned __int16)(255 * v107 - 4080) >> 5)) >> 16)
                 + 2) >> 2;
          v110[1] = (v112
                   + HIWORD(v114)
                   + ((9363 * ((unsigned __int16)(255 * v105 - 4080) >> 5)) >> 16)
                   + ((9363 * ((unsigned __int16)(255 * v108 - 4080) >> 5)) >> 16)
                   + 2) >> 2;
          v93 += 2;
        }
        while (v93 < v37);
      }
      v15 += 2 * v14;
      v21 += v20;
      v78 += 2;
    }
    while (v78 < v79);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  unsigned int v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _BYTE *v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  unint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v25 = v19 - v18;
  if (v24 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v13 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v11 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          *(_BYTE *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v22 < v10)
    v10 = 0;
  v37 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = *v15;
      if (v40 >= 0xF0)
        v40 = 240;
      if (v40 <= 0x10)
        v41 = 16;
      else
        v41 = v40;
      if (v15[1] >= 0xF0u)
        v42 = 240;
      else
        v42 = v15[1];
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      v38 = v15 + 4;
      *v21 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
      v21[1] = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      v39 = v21 + 2;
    }
    else
    {
      v38 = v15;
      v39 = v21;
    }
    if (v22 != v10)
    {
      v44 = 0;
      do
      {
        v45 = &v39[v44];
        v46 = *v38;
        v47 = v38[1];
        if (v46 >= 0xF0)
          v46 = 240;
        if (v46 <= 0x10)
          LOWORD(v46) = 16;
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          LOWORD(v47) = 16;
        *v45 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
        v45[1] = (9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16;
        v44 += 2;
        v38 += 4;
      }
      while (v44 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    v48 = 0;
    v49 = v24 - v36;
    v50 = 2 * v14;
    do
    {
      v51 = v15;
      v52 = v21;
      if ((v8 & 1) != 0)
      {
        v53 = *v15;
        if (v53 >= 0xF0)
          v53 = 240;
        if (v53 <= 0x10)
          v54 = 16;
        else
          v54 = v53;
        if (v15[1] >= 0xF0u)
          v55 = 240;
        else
          v55 = v15[1];
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        v51 = v15 + 4;
        *v21 = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
        v21[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
        v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        v57 = 0;
        do
        {
          v58 = &v52[v57];
          v59 = *v51;
          v60 = v51[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            LOWORD(v59) = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            LOWORD(v60) = 16;
          *v58 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
          v58[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
          v57 += 2;
          v51 += 4;
        }
        while (v57 < v37);
      }
      v15 += v50;
      v21 += v20;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v34;
  size_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned int v42;
  size_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unsigned int v61;
  size_t v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  else
    v26 = v14 - v13;
  if (v26)
  {
    v74 = v26;
    v75 = a8[2];
    v76 = a8[1];
    v27 = *a4;
    v28 = *a8;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    v31 = (char *)(*a7 + v28 * v19 + v17);
    v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    v26 = v74;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v22 = v75;
    v21 = v76;
  }
  if (v26 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v25 < v10)
    v10 = 0;
  v35 = v25 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = &v16[v15 + 2];
      v40 = *v39;
      v41 = v39[1];
      v36 = v16 + 4;
      v42 = (v16[1] + v16[3] + v16[v15 + 1] + v41 + 2) >> 2;
      *v23 = (*v16 + v16[2] + v16[v15] + v40 + 2) >> 2;
      v37 = v23 + 1;
      *v24 = v42;
      v38 = v24 + 1;
    }
    else
    {
      v36 = v16;
      v37 = v23;
      v38 = v24;
    }
    if (v25 != v10)
    {
      v43 = 0;
      v44 = v36 + 3;
      do
      {
        v45 = *(v44 - 3);
        v46 = *(v44 - 2);
        v47 = &v44[v15];
        v48 = v44[v15 - 3];
        v49 = v44[v15 - 2];
        v50 = *(v44 - 1);
        v51 = *v44;
        v44 += 4;
        v52 = v46 + v51 + v49 + *v47 + 2;
        *v37++ = (v45 + v50 + v48 + *(v47 - 1) + 2) >> 2;
        *v38++ = v52 >> 2;
        v43 += 2;
      }
      while (v43 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    v53 = 0;
    v54 = v26 - v34;
    do
    {
      v55 = v16;
      v56 = v23;
      v57 = v24;
      if ((v8 & 1) != 0)
      {
        v58 = &v16[v15 + 2];
        v59 = *v58;
        v60 = v58[1];
        v55 = v16 + 4;
        v61 = (v16[1] + v16[3] + v16[v15 + 1] + v60 + 2) >> 2;
        *v23 = (*v16 + v16[2] + v16[v15] + v59 + 2) >> 2;
        v56 = v23 + 1;
        *v24 = v61;
        v57 = v24 + 1;
      }
      if (v25 != v10)
      {
        v62 = 0;
        v63 = v55 + 3;
        do
        {
          v64 = *(v63 - 3);
          v65 = *(v63 - 2);
          v66 = &v63[v15];
          v67 = v63[v15 - 3];
          v68 = v63[v15 - 2];
          v69 = *(v63 - 1);
          v70 = *v63;
          v63 += 4;
          v71 = v65 + v70 + v68 + *v66 + 2;
          *v56++ = (v64 + v69 + v67 + *(v66 - 1) + 2) >> 2;
          *v57++ = v71 >> 2;
          v62 += 2;
        }
        while (v62 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v34;
  size_t v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  char v39;
  size_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  char v47;
  size_t v48;
  char v49;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_BYTE *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  else
    v26 = v14 - v13;
  if (v26)
  {
    v52 = v26;
    v53 = a4[1];
    v54 = a8[1];
    v27 = *a4;
    v28 = *a8;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    v31 = (char *)(*a7 + v28 * v19 + v17);
    v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    v26 = v52;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v53;
    v21 = v54;
  }
  if (v26 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v25 < v10)
    v10 = 0;
  v35 = v25 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v16[1];
      v36 = v16 + 4;
      *v23 = *v16;
      v37 = v23 + 1;
      *v24 = v39;
      v38 = v24 + 1;
    }
    else
    {
      v36 = v16;
      v37 = v23;
      v38 = v24;
    }
    if (v25 != v10)
    {
      v40 = 0;
      do
      {
        v41 = v36[1];
        *v37++ = *v36;
        *v38++ = v41;
        v40 += 2;
        v36 += 4;
      }
      while (v40 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    v42 = 0;
    v43 = v26 - v34;
    do
    {
      v44 = v16;
      v45 = v23;
      v46 = v24;
      if ((v8 & 1) != 0)
      {
        v47 = v16[1];
        v44 = v16 + 4;
        *v23 = *v16;
        v45 = v23 + 1;
        *v24 = v47;
        v46 = v24 + 1;
      }
      if (v25 != v10)
      {
        v48 = 0;
        do
        {
          v49 = v44[1];
          *v45++ = *v44;
          *v46++ = v49;
          v48 += 2;
          v44 += 4;
        }
        while (v48 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  __int16 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  __int16 v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  _BYTE *v74;
  _BYTE *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  __int16 v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int8 *v83;
  unsigned int v84;
  unsigned int v85;
  __int16 v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned __int8 *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned __int16 v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v11 + v33;
    v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_BYTE *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v38 = v12;
  else
    v38 = 0;
  if (v24 < v10)
    v10 = 0;
  v39 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v43 = *v15;
      v44 = v15[1];
      v45 = v15[v14];
      v46 = v15[v14 + 1];
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        LOWORD(v43) = 16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        LOWORD(v44) = 16;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v47 = 16;
      else
        v47 = v45;
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        LOWORD(v46) = 16;
      v48 = v15[2];
      v49 = v15[3];
      v50 = &v15[v14 + 2];
      v51 = *v50;
      v52 = v50[1];
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        LOWORD(v48) = 16;
      if (v49 >= 0xF0)
        v49 = 240;
      if (v49 <= 0x10)
        LOWORD(v49) = 16;
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        LOWORD(v51) = 16;
      if (v52 >= 0xF0)
        v52 = 240;
      if (v52 <= 0x10)
        v53 = 16;
      else
        v53 = v52;
      v40 = v15 + 4;
      *v22 = (((9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16)
            + 2) >> 2;
      v41 = v22 + 1;
      *v23 = (((9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16)
            + 2) >> 2;
      v42 = v23 + 1;
    }
    else
    {
      v40 = v15;
      v41 = v22;
      v42 = v23;
    }
    if (v24 != v10)
    {
      v54 = 0;
      v55 = v40 + 3;
      do
      {
        v56 = *(v55 - 3);
        v57 = *(v55 - 2);
        v58 = &v55[v14];
        v59 = v55[v14 - 3];
        if (v56 >= 0xF0)
          v56 = 240;
        if (v56 <= 0x10)
          LOWORD(v56) = 16;
        v60 = *(v58 - 2);
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          LOWORD(v57) = 16;
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          LOWORD(v59) = 16;
        if (v60 >= 0xF0)
          v60 = 240;
        v61 = *(v55 - 1);
        if (v60 <= 0x10)
          LOWORD(v60) = 16;
        v63 = *v55;
        v55 += 4;
        v62 = v63;
        v64 = *(v58 - 1);
        if (v61 >= 0xF0)
          v61 = 240;
        v65 = *v58;
        if (v61 <= 0x10)
          LOWORD(v61) = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          LOWORD(v62) = 16;
        if (v64 >= 0xF0)
          v64 = 240;
        v66 = 255 * v56 - 4080;
        if (v64 <= 0x10)
          LOWORD(v64) = 16;
        v67 = (9363 * (v66 >> 5)) >> 16;
        v68 = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
        if (v65 >= 0xF0)
          v65 = 240;
        v69 = 9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5);
        v70 = 9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5);
        if (v65 <= 0x10)
          LOWORD(v65) = 16;
        *v41++ = (v67
                + HIWORD(v69)
                + ((9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        *v42++ = (v68
                + HIWORD(v70)
                + ((9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        v54 += 2;
      }
      while (v54 < v39);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v38)
  {
    v71 = 0;
    v72 = v26 - v38;
    do
    {
      v73 = v15;
      v74 = v22;
      v75 = v23;
      if ((v8 & 1) != 0)
      {
        v76 = *v15;
        v77 = v15[1];
        v78 = v15[v14];
        v79 = v15[v14 + 1];
        if (v76 >= 0xF0)
          v76 = 240;
        if (v76 <= 0x10)
          LOWORD(v76) = 16;
        if (v77 >= 0xF0)
          v77 = 240;
        if (v77 <= 0x10)
          LOWORD(v77) = 16;
        if (v78 >= 0xF0)
          v78 = 240;
        if (v78 <= 0x10)
          v80 = 16;
        else
          v80 = v78;
        if (v79 >= 0xF0)
          v79 = 240;
        if (v79 <= 0x10)
          LOWORD(v79) = 16;
        v81 = v15[2];
        v82 = v15[3];
        v83 = &v15[v14 + 2];
        v84 = *v83;
        v85 = v83[1];
        if (v81 >= 0xF0)
          v81 = 240;
        if (v81 <= 0x10)
          LOWORD(v81) = 16;
        if (v82 >= 0xF0)
          v82 = 240;
        if (v82 <= 0x10)
          LOWORD(v82) = 16;
        if (v84 >= 0xF0)
          v84 = 240;
        if (v84 <= 0x10)
          LOWORD(v84) = 16;
        if (v85 >= 0xF0)
          v85 = 240;
        if (v85 <= 0x10)
          v86 = 16;
        else
          v86 = v85;
        v73 = v15 + 4;
        *v22 = (((9363 * ((unsigned __int16)(255 * v76 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v80 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v81 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v84 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        v74 = v22 + 1;
        *v23 = (((9363 * ((unsigned __int16)(255 * v77 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v79 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v82 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v86 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        v75 = v23 + 1;
      }
      if (v24 != v10)
      {
        v87 = 0;
        v88 = v73 + 3;
        do
        {
          v89 = *(v88 - 3);
          v90 = *(v88 - 2);
          v91 = &v88[v14];
          v92 = v88[v14 - 3];
          if (v89 >= 0xF0)
            v89 = 240;
          if (v89 <= 0x10)
            LOWORD(v89) = 16;
          v93 = *(v91 - 2);
          if (v90 >= 0xF0)
            v90 = 240;
          if (v90 <= 0x10)
            LOWORD(v90) = 16;
          if (v92 >= 0xF0)
            v92 = 240;
          if (v92 <= 0x10)
            LOWORD(v92) = 16;
          if (v93 >= 0xF0)
            v93 = 240;
          v94 = *(v88 - 1);
          if (v93 <= 0x10)
            LOWORD(v93) = 16;
          v96 = *v88;
          v88 += 4;
          v95 = v96;
          v97 = *(v91 - 1);
          if (v94 >= 0xF0)
            v94 = 240;
          v98 = *v91;
          if (v94 <= 0x10)
            LOWORD(v94) = 16;
          if (v95 >= 0xF0)
            v95 = 240;
          if (v95 <= 0x10)
            LOWORD(v95) = 16;
          if (v97 >= 0xF0)
            v97 = 240;
          v99 = 255 * v89 - 4080;
          if (v97 <= 0x10)
            LOWORD(v97) = 16;
          v100 = (9363 * (v99 >> 5)) >> 16;
          v101 = (9363 * ((unsigned __int16)(255 * v90 - 4080) >> 5)) >> 16;
          if (v98 >= 0xF0)
            v98 = 240;
          v102 = 9363 * ((unsigned __int16)(255 * v92 - 4080) >> 5);
          v103 = 9363 * ((unsigned __int16)(255 * v93 - 4080) >> 5);
          if (v98 <= 0x10)
            LOWORD(v98) = 16;
          *v74++ = (v100
                  + HIWORD(v102)
                  + ((9363 * ((unsigned __int16)(255 * v94 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v97 - 4080) >> 5)) >> 16)
                  + 2) >> 2;
          *v75++ = (v101
                  + HIWORD(v103)
                  + ((9363 * ((unsigned __int16)(255 * v95 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v98 - 4080) >> 5)) >> 16)
                  + 2) >> 2;
          v87 += 2;
        }
        while (v87 < v39);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v71 += 2;
    }
    while (v71 < v72);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  _BYTE *v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v11 + v33;
    v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_BYTE *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v38 = v12;
  else
    v38 = 0;
  if (v24 < v10)
    v10 = 0;
  v39 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v43 = *v15;
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      if (v15[1] >= 0xF0u)
        v45 = 240;
      else
        v45 = v15[1];
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      v40 = v15 + 4;
      v47 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
      *v22 = (9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16;
      v41 = v22 + 1;
      *v23 = v47;
      v42 = v23 + 1;
    }
    else
    {
      v40 = v15;
      v41 = v22;
      v42 = v23;
    }
    if (v24 != v10)
    {
      v48 = 0;
      do
      {
        v49 = *v40;
        v50 = v40[1];
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          LOWORD(v49) = 16;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          LOWORD(v50) = 16;
        *v41++ = (9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16;
        *v42++ = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
        v48 += 2;
        v40 += 4;
      }
      while (v48 < v39);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v38)
  {
    v51 = 0;
    v52 = v26 - v38;
    v53 = 2 * v14;
    do
    {
      v54 = v15;
      v55 = v22;
      v56 = v23;
      if ((v8 & 1) != 0)
      {
        v57 = *v15;
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          v58 = 16;
        else
          v58 = v57;
        if (v15[1] >= 0xF0u)
          v59 = 240;
        else
          v59 = v15[1];
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        v54 = v15 + 4;
        v61 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        *v22 = (9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16;
        v55 = v22 + 1;
        *v23 = v61;
        v56 = v23 + 1;
      }
      if (v24 != v10)
      {
        v62 = 0;
        do
        {
          v63 = *v54;
          v64 = v54[1];
          if (v63 >= 0xF0)
            v63 = 240;
          if (v63 <= 0x10)
            LOWORD(v63) = 16;
          if (v64 >= 0xF0)
            v64 = 240;
          if (v64 <= 0x10)
            LOWORD(v64) = 16;
          *v55++ = (9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16;
          *v56++ = (9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16;
          v62 += 2;
          v54 += 4;
        }
        while (v62 < v39);
      }
      v15 += v53;
      v22 += v20;
      v23 += v21;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_Copy_444v_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  _WORD *v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = *a3 + *a4 * v15;
    v18 = a3[1] + v12 * v15 + 2 * v16;
    v19 = v17 + v16;
    do
    {
      if (v8)
      {
        v20 = 0;
        v21 = 0;
        for (i = 0; i != v8; ++i)
        {
          v23 = (_WORD *)(v14 + v21);
          v24 = *(unsigned __int8 *)(v18 + v20) << 8;
          v25 = *(unsigned __int8 *)(v18 + v20 + 1) << 8;
          v26 = *(unsigned __int8 *)(v19 + i) << 8;
          *v23 = -1;
          v23[1] = v26;
          v23[2] = v24;
          v23[3] = v25;
          v21 += 8;
          v20 += 2;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_444v_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  __int16 v24;
  char v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = *a3 + *a4 * v15;
    v18 = a3[1] + v12 * v15 + 2 * v16;
    v19 = v17 + v16;
    do
    {
      if (v8)
      {
        v20 = 0;
        v21 = 0;
        for (i = 0; i != v8; ++i)
        {
          v23 = v14 + v21;
          v24 = *(_WORD *)(v18 + v20);
          v25 = *(_BYTE *)(v19 + i);
          *(_BYTE *)v23 = -1;
          *(_BYTE *)(v23 + 1) = v25;
          *(_WORD *)(v23 + 2) = v24;
          v21 += 4;
          v20 += 2;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_444v_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13 + 2;
      v34 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v34;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = v37 << 8;
        v33[1] = v38 << 8;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 << 8;
      v40 = v32[1] << 8;
      *v33 = v39;
      v33[1] = v40;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v43 = v13 + 2;
        v45 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v45;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = v48 << 8;
          v44[1] = v49 << 8;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 << 8;
        v51 = v43[1] << 8;
        *v44 = v50;
        v44[1] = v51;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13 << 8;
      v58 = v13[1] << 8;
      *v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (v36[3] + (unsigned __int16)v36[1]) << 7;
        *v40 = (v36[2] + (unsigned __int16)*v36) << 7;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (v44[3] + (unsigned __int16)v44[1]) << 7;
          *v48 = (v44[2] + (unsigned __int16)*v44) << 7;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (v52 + v50) << 7;
      v21[1] = (v53 + v51) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v55 = (v14[2] + (unsigned __int16)*v14) << 7;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = v36[1] << 8;
        *v40 = *v36 << 8;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = v44[1] << 8;
          *v48 = *v44 << 8;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = v50 << 8;
      v21[1] = v51 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = v14[1] << 8;
        *v53 = *v14 << 8;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13 + 2;
      v34 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v34;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = v37 << 8;
        v33[1] = v38 << 8;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 << 8;
      v40 = v32[1] << 8;
      *v33 = v39;
      v33[1] = v40;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v43 = v13 + 2;
        v45 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v45;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = v48 << 8;
          v44[1] = v49 << 8;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 << 8;
        v51 = v43[1] << 8;
        *v44 = v50;
        v44[1] = v51;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13 << 8;
      v58 = v13[1] << 8;
      *v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (v36[3] + (unsigned __int16)v36[1]) << 7;
        *v40 = (v36[2] + (unsigned __int16)*v36) << 7;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (v44[3] + (unsigned __int16)v44[1]) << 7;
          *v48 = (v44[2] + (unsigned __int16)*v44) << 7;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (v52 + v50) << 7;
      v21[1] = (v53 + v51) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v55 = (v14[2] + (unsigned __int16)*v14) << 7;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = v36[1] << 8;
        *v40 = *v36 << 8;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = v44[1] << 8;
          *v48 = *v44 << 8;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = v50 << 8;
      v21[1] = v51 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = v14[1] << 8;
        *v53 = *v14 << 8;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13 + 2;
      v34 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v34;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = v37 << 8;
        v33[1] = v38 << 8;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 << 8;
      v40 = v32[1] << 8;
      *v33 = v39;
      v33[1] = v40;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v43 = v13 + 2;
        v45 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v45;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = v48 << 8;
          v44[1] = v49 << 8;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 << 8;
        v51 = v43[1] << 8;
        *v44 = v50;
        v44[1] = v51;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13 << 8;
      v58 = v13[1] << 8;
      *v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (v36[3] + (unsigned __int16)v36[1]) << 7;
        *v40 = (v36[2] + (unsigned __int16)*v36) << 7;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (v44[3] + (unsigned __int16)v44[1]) << 7;
          *v48 = (v44[2] + (unsigned __int16)*v44) << 7;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (v52 + v50) << 7;
      v21[1] = (v53 + v51) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *v55 = (v14[2] + (unsigned __int16)*v14) << 7;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = v36[1] << 8;
        *v40 = *v36 << 8;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = v44[1] << 8;
          *v48 = *v44 << 8;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = v50 << 8;
      v21[1] = v51 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = v14[1] << 8;
        *v53 = *v14 << 8;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  size_t v27;
  size_t v28;
  size_t v29;
  __int16 *v30;
  __int16 *v31;
  size_t v32;
  size_t v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;
  __int16 *v37;
  __int16 *v38;
  size_t v39;
  size_t v40;
  __int16 v41;
  __int16 v42;
  size_t v43;
  __int16 v44;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (__int16 *)(a3[1] + v10 * v9 + 2 * v8);
  v12 = a6[4];
  v13 = a6[5];
  v14 = a8[1];
  v15 = (__int16 *)(a7[1] + v14 * v13 + 2 * v12);
  if (a2[2] >= a6[2])
    v16 = a6[2];
  else
    v16 = a2[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v47 = a8[1];
    v48 = a4[1];
    v49 = v17;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[2];
    v21 = (char *)(a7[2] + v20 * v13 + v12);
    v22 = (char *)(*a7 + *a8 * v13 + v12);
    v23 = (char *)(*a3 + *a4 * v9 + v8);
    do
    {
      memcpy(v22, v23, v16);
      memset(v21, 255, v16);
      v23 += v18;
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    v14 = v47;
    v8 = a2[4];
    v9 = a2[5];
    v10 = v48;
    v17 = v49;
  }
  v24 = v9 & 1;
  if (v17 >= v24)
    v25 = v9 & 1;
  else
    v25 = 0;
  v26 = v8;
  v27 = v8 & 1;
  if (v16 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v16 - v28;
  if ((v9 & 1) != 0)
  {
    v30 = v11;
    if ((v26 & 1) != 0)
    {
      v30 = v11 + 1;
      *v15 = *v11;
      v31 = v15 + 1;
    }
    else
    {
      v31 = v15;
    }
    if (v16 == v28)
    {
      v32 = 0;
    }
    else
    {
      v33 = v16 - v28;
      do
      {
        v34 = *v30++;
        *v31++ = v34;
        --v33;
      }
      while (v33);
      v32 = v16 - v28;
    }
    if (v32 + v27 < v16)
      *v31 = *v30;
    v11 = (__int16 *)((char *)v11 + v10);
    v15 = (__int16 *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    v35 = 0;
  }
  else
  {
    v36 = 0;
    v35 = v17 - v25;
    do
    {
      v37 = v11;
      v38 = v15;
      if ((v26 & 1) != 0)
      {
        v37 = v11 + 1;
        *v15 = *v11;
        v38 = v15 + 1;
      }
      if (v16 == v28)
      {
        v39 = 0;
      }
      else
      {
        v40 = v16 - v28;
        do
        {
          v41 = *v37++;
          *v38++ = v41;
          --v40;
        }
        while (v40);
        v39 = v16 - v28;
      }
      if (v39 + v27 < v16)
        *v38 = *v37;
      v11 = (__int16 *)((char *)v11 + v10);
      v15 = (__int16 *)((char *)v15 + v14);
      ++v36;
    }
    while (v36 != v35);
  }
  if (v35 + v24 < v17)
  {
    if ((v26 & 1) != 0)
    {
      v42 = *v11++;
      *v15++ = v42;
    }
    if (v16 == v28)
    {
      v29 = 0;
    }
    else
    {
      v43 = v16 - v28;
      do
      {
        v44 = *v11++;
        *v15++ = v44;
        --v43;
      }
      while (v43);
    }
    if (v29 + v27 < v16)
      *v15 = *v11;
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  size_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  size_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  size_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  size_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = a8[1];
  v19 = (_BYTE *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v20)
    v21 = v20;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v22 = v14;
  else
    v22 = *(_QWORD *)(a2 + 24);
  if (v22)
  {
    v56 = a8[1];
    v57 = v22;
    v58 = a4[1];
    v23 = *a4;
    v24 = *a8;
    v25 = a8[2];
    v26 = (char *)(a7[2] + v25 * v17 + v15);
    v27 = (char *)(*a7 + *a8 * v17 + v15);
    v28 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v27, v28, v21);
      memset(v26, 255, v21);
      v28 += v23;
      v27 += v24;
      v26 += v25;
      --v22;
    }
    while (v22);
    v18 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v22 = v57;
    v12 = v58;
  }
  v29 = v11 & 1;
  if (v22 >= v29)
    v30 = v11 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v9)
    v9 = 0;
  v32 = v21 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v13 + 4;
      v35 = (v13[1] + v13[3] + 1) >> 1;
      *v19 = (*v13 + v13[2] + 1) >> 1;
      v19[1] = v35;
      v34 = v19 + 2;
    }
    else
    {
      v33 = v13;
      v34 = v19;
    }
    if (v21 != v9)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (v33[1] + v33[3] + 1) >> 1;
        *v37 = (*v33 + v33[2] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v13 += v12;
    v19 += v18;
  }
  if (v22 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v22 - v30;
    do
    {
      v41 = v13;
      v42 = v19;
      if ((v31 & 1) != 0)
      {
        v41 = v13 + 4;
        v43 = (v13[1] + v13[3] + 1) >> 1;
        *v19 = (*v13 + v13[2] + 1) >> 1;
        v19[1] = v43;
        v42 = v19 + 2;
      }
      if (v21 != v9)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (v41[1] + v41[3] + 1) >> 1;
          *v45 = (*v41 + v41[2] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v13 += v12;
      v19 += v18;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v22)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v13;
      v48 = v13[1];
      v49 = v13[2];
      v50 = v13[3];
      v13 += 4;
      *v19 = (v47 + v49 + 1) >> 1;
      v19[1] = (v48 + v50 + 1) >> 1;
      v19 += 2;
    }
    if (v21 != v9)
    {
      v51 = 0;
      do
      {
        v52 = &v19[v51];
        v53 = (v13[1] + v13[3] + 1) >> 1;
        *v52 = (*v13 + v13[2] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  size_t v32;
  __int16 *v33;
  __int16 *v34;
  size_t v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;
  __int16 *v39;
  __int16 *v40;
  size_t v41;
  __int16 v42;
  __int16 v43;
  size_t v44;
  __int16 v45;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = a8[1];
  v19 = (__int16 *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v20)
    v21 = v20;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v22 = v14;
  else
    v22 = *(_QWORD *)(a2 + 24);
  if (v22)
  {
    v48 = a8[1];
    v49 = v22;
    v50 = a4[1];
    v23 = *a4;
    v24 = *a8;
    v25 = a8[2];
    v26 = (char *)(a7[2] + v25 * v17 + v15);
    v27 = (char *)(*a7 + *a8 * v17 + v15);
    v28 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v27, v28, v21);
      memset(v26, 255, v21);
      v28 += v23;
      v27 += v24;
      v26 += v25;
      --v22;
    }
    while (v22);
    v18 = v48;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v22 = v49;
    v12 = v50;
  }
  v29 = v11 & 1;
  if (v22 >= v29)
    v30 = v11 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v9)
    v9 = 0;
  v32 = v21 - v9;
  if ((v11 & 1) != 0)
  {
    v33 = v13;
    if ((v31 & 1) != 0)
    {
      v33 = v13 + 2;
      *v19 = *v13;
      v34 = v19 + 1;
    }
    else
    {
      v34 = v19;
    }
    if (v21 != v9)
    {
      v35 = 0;
      do
      {
        v36 = *v33;
        v33 += 2;
        v34[v35 / 2] = v36;
        v35 += 2;
      }
      while (v35 < v32);
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v19 = (__int16 *)((char *)v19 + v18);
  }
  if (v22 == v30)
  {
    v37 = 0;
  }
  else
  {
    v38 = 0;
    v37 = v22 - v30;
    do
    {
      v39 = v13;
      v40 = v19;
      if ((v31 & 1) != 0)
      {
        v39 = v13 + 2;
        *v19 = *v13;
        v40 = v19 + 1;
      }
      if (v21 != v9)
      {
        v41 = 0;
        do
        {
          v42 = *v39;
          v39 += 2;
          v40[v41 / 2] = v42;
          v41 += 2;
        }
        while (v41 < v32);
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v19 = (__int16 *)((char *)v19 + v18);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v29 < v22)
  {
    if ((v31 & 1) != 0)
    {
      v43 = *v13;
      v13 += 2;
      *v19++ = v43;
    }
    if (v21 != v9)
    {
      v44 = 0;
      do
      {
        v45 = *v13;
        v13 += 2;
        v19[v44 / 2] = v45;
        v44 += 2;
      }
      while (v44 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  unsigned int v40;
  size_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  unsigned int v59;
  size_t v60;
  unsigned __int8 *v61;
  _BYTE *v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v73;
  uint64_t v74;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v25 = *a4;
    v73 = a8[1];
    v74 = *a4;
    if (v13 >= v9)
      v25 = 0;
    v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    v27 = a8[2];
    v28 = (char *)(a7[2] + v27 * v19 + v17);
    v29 = *a8;
    v30 = (char *)(*a7 + *a8 * v19 + v17);
    v31 = -(uint64_t)v24;
    do
    {
      memcpy(v30, v26, v23);
      memset(v28, 255, v23);
      v26 += v74;
      v30 += v29;
      v28 += v27;
    }
    while (!__CFADD__(v31++, 1));
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v73;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v23 < v10)
    v10 = 0;
  v34 = v23 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = &v16[v15 + 2];
      v38 = *v37;
      v39 = v37[1];
      v35 = v16 + 4;
      v40 = (v16[1] + v16[3] + v16[v15 + 1] + v39 + 2) >> 2;
      *v22 = (*v16 + v16[2] + v16[v15] + v38 + 2) >> 2;
      v22[1] = v40;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v23 != v10)
    {
      v41 = 0;
      v42 = v35 + 3;
      do
      {
        v43 = &v36[v41];
        v44 = *(v42 - 3);
        v45 = *(v42 - 2);
        v46 = &v42[v15];
        v47 = v42[v15 - 3];
        v48 = v42[v15 - 2];
        v49 = *(v42 - 1);
        v50 = *v42;
        v42 += 4;
        v51 = (v45 + v50 + v48 + *v46 + 2) >> 2;
        *v43 = (v44 + v49 + v47 + *(v46 - 1) + 2) >> 2;
        v43[1] = v51;
        v41 += 2;
      }
      while (v41 < v34);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v33)
  {
    v52 = 0;
    v53 = v24 - v33;
    do
    {
      v54 = v16;
      v55 = v22;
      if ((v8 & 1) != 0)
      {
        v56 = &v16[v15 + 2];
        v57 = *v56;
        v58 = v56[1];
        v54 = v16 + 4;
        v59 = (v16[1] + v16[3] + v16[v15 + 1] + v58 + 2) >> 2;
        *v22 = (*v16 + v16[2] + v16[v15] + v57 + 2) >> 2;
        v22[1] = v59;
        v55 = v22 + 2;
      }
      if (v23 != v10)
      {
        v60 = 0;
        v61 = v54 + 3;
        do
        {
          v62 = &v55[v60];
          v63 = *(v61 - 3);
          v64 = *(v61 - 2);
          v65 = &v61[v15];
          v66 = v61[v15 - 3];
          v67 = v61[v15 - 2];
          v68 = *(v61 - 1);
          v69 = *v61;
          v61 += 4;
          v70 = (v64 + v69 + v67 + *v65 + 2) >> 2;
          *v62 = (v63 + v68 + v66 + *(v65 - 1) + 2) >> 2;
          v62[1] = v70;
          v60 += 2;
        }
        while (v60 < v34);
      }
      v16 += 2 * v15;
      v22 += v21;
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v34;
  size_t v35;
  __int16 *v36;
  __int16 *v37;
  size_t v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  __int16 *v42;
  __int16 *v43;
  size_t v44;
  __int16 v45;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v48 = v24;
    v49 = a4[1];
    v50 = a8[1];
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    v30 = (char *)(a7[2] + v27 * v19 + v17);
    v31 = (char *)(*a7 + v26 * v19 + v17);
    v32 = -(uint64_t)v24;
    do
    {
      memcpy(v31, v29, v23);
      memset(v30, 255, v23);
      v29 += v25;
      v31 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v32++, 1));
    v24 = v48;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v49;
    v21 = v50;
  }
  if (v24 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v23 < v10)
    v10 = 0;
  v35 = v23 - v10;
  if (v12)
  {
    v36 = v16;
    if ((v8 & 1) != 0)
    {
      v36 = v16 + 2;
      *v22 = *v16;
      v37 = v22 + 1;
    }
    else
    {
      v37 = v22;
    }
    if (v23 != v10)
    {
      v38 = 0;
      do
      {
        v39 = *v36;
        v36 += 2;
        v37[v38 / 2] = v39;
        v38 += 2;
      }
      while (v38 < v35);
    }
    v16 += v15;
    v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v34)
  {
    v40 = 0;
    v41 = v24 - v34;
    do
    {
      v42 = v16;
      v43 = v22;
      if ((v8 & 1) != 0)
      {
        v42 = v16 + 2;
        *v22 = *v16;
        v43 = v22 + 1;
      }
      if (v23 != v10)
      {
        v44 = 0;
        do
        {
          v45 = *v42;
          v42 += 2;
          v43[v44 / 2] = v45;
          v44 += 2;
        }
        while (v44 < v35);
      }
      v16 += v15;
      v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_Copy_444f_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = a3[1] + v12 * v15 + 2 * v16;
    v18 = *a3 + *a4 * v15 + v16;
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = 0;
        for (i = 0; i != v8; ++i)
        {
          v22 = (_WORD *)(v14 + v20);
          v23 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v17 + v19))) >> 32;
          v24 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v17 + v19 + 1))) >> 32;
          v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v18 + i))) >> 32;
          *v22 = -1;
          v22[1] = v25 + 4096;
          v22[2] = v23 + 4096;
          v22[3] = v24 + 4096;
          v20 += 8;
          v19 += 2;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_444f_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = a3[1] + v12 * v15 + 2 * v16;
    v18 = *a3 + *a4 * v15 + v16;
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = 0;
        for (i = 0; i != v8; ++i)
        {
          v22 = (_BYTE *)(v14 + v20);
          v23 = (7368928 * *(unsigned __int8 *)(v17 + v19)) >> 23;
          v24 = (7368928 * *(unsigned __int8 *)(v17 + v19 + 1)) >> 23;
          v25 = (7204443 * *(unsigned __int8 *)(v18 + i)) >> 23;
          *v22 = -1;
          v22[1] = v25 + 16;
          v22[2] = v23 + 16;
          v22[3] = v24 + 16;
          v20 += 4;
          v19 += 2;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * v20);
          v23 = (((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 1))) >> 32)
                             + ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 3))) >> 32)
                             + 8193) >> 1;
          v24 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i))) >> 32;
          v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          *v22 = (((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20))) >> 32)
                              + ((16843010
                                * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 2))) >> 32)
                              + 8193) >> 1;
          v22[1] = v24 + 4096;
          v22[2] = v23;
          v22[3] = v25 + 4096;
          v20 += 4;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * v20);
          v23 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 1))) >> 32;
          v24 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i))) >> 32;
          v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          *v22 = ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20))) >> 32) + 4096;
          v22[1] = v24 + 4096;
          v22[2] = v23 + 4096;
          v22[3] = v25 + 4096;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + v20);
          v23 = (((7368928 * *(unsigned __int8 *)(v18 + v20 + 1)) >> 23)
               + ((7368928 * *(unsigned __int8 *)(v18 + v20 + 3)) >> 23)
               + 33) >> 1;
          v24 = (7204443 * *(unsigned __int8 *)(v19 + i)) >> 23;
          v25 = (7204443 * *(unsigned __int8 *)(v19 + i + 1)) >> 23;
          *v22 = (((7368928 * *(unsigned __int8 *)(v18 + v20)) >> 23)
                + ((7368928 * *(unsigned __int8 *)(v18 + v20 + 2)) >> 23)
                + 33) >> 1;
          v22[1] = v24 + 16;
          v22[2] = v23;
          v22[3] = v25 + 16;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 2 * v9;
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + v20);
          v23 = (7368928 * *(unsigned __int8 *)(v18 + v20 + 1)) >> 23;
          v24 = (7204443 * *(unsigned __int8 *)(v19 + i)) >> 23;
          v25 = (7204443 * *(unsigned __int8 *)(v19 + i + 1)) >> 23;
          *v22 = ((7368928 * *(unsigned __int8 *)(v18 + v20)) >> 23) + 16;
          v22[1] = v24 + 16;
          v22[2] = v23 + 16;
          v22[3] = v25 + 16;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_444f_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v13[1];
      v32 = v13 + 2;
      *v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v34)) >> 32) + 4096;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
        v33[1] = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32;
      v40 = v32[1];
      *v33 = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
      v33[1] = ((16843010 * (unint64_t)(57344 * v40)) >> 32) + 4096;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v45 = v13[1];
        v43 = v13 + 2;
        *v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v45)) >> 32) + 4096;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
          v44[1] = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43;
        v51 = v43[1];
        *v44 = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
        v44[1] = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v53)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13;
      v58 = v13[1];
      *v17 = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v23 + i))) >> 32)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v33)) >> 32) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = ((16843010 * (unint64_t)(57344 * v36)) >> 32) + 4096;
        v32[1] = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v32[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = ((16843010 * (unint64_t)(57344 * v47)) >> 32) + 4096;
          v43[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
        v43[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) | (*(unsigned __int8 *)(v22 + i) << 8);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = v13[1] | (v13[1] << 8);
      *v17 = *v13 | (*v13 << 8);
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35 | (v35 << 8);
        v31[1] = v36 | (v36 << 8);
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 | (*v30 << 8);
      v38 = v30[1] | (v30[1] << 8);
      *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = v13[1] | (v13[1] << 8);
        *v17 = *v13 | (*v13 << 8);
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46 | (v46 << 8);
          v42[1] = v47 | (v47 << 8);
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 | (*v41 << 8);
        v49 = v41[1] | (v41[1] << 8);
        *v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 | (v50 << 8);
      v17[1] = v51 | (v51 << 8);
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 | (v53 << 8);
        v17[1] = v54 | (v54 << 8);
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 | (*v13 << 8);
      v56 = v13[1] | (v13[1] << 8);
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  unsigned int v38;
  unint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                         + 8193) >> 1;
      *v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                          + 8193) >> 1;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (((16843010 * (unint64_t)(57344 * v36[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v36[3])) >> 32)
                           + 8193) >> 1;
        *v40 = (((16843010 * (unint64_t)(57344 * *v36)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v36[2])) >> 32)
                            + 8193) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        *v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (((16843010 * (unint64_t)(57344 * v44[1])) >> 32)
                             + ((16843010 * (unint64_t)(57344 * v44[3])) >> 32)
                             + 8193) >> 1;
          *v48 = (((16843010 * (unint64_t)(57344 * *v44)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * v44[2])) >> 32)
                              + 8193) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (((16843010 * (unint64_t)(57344 * v50)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v52)) >> 32)
                          + 8193) >> 1;
      v21[1] = (((16843010 * (unint64_t)(57344 * v51)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v53)) >> 32)
                            + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        *v55 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 4;
      *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (16843010 * (unint64_t)(57344 * v36[1])) >> 32;
        *v40 = ((16843010 * (unint64_t)(57344 * *v36)) >> 32) + 4096;
        v40[1] = v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 4;
        *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (16843010 * (unint64_t)(57344 * v44[1])) >> 32;
          *v48 = ((16843010 * (unint64_t)(57344 * *v44)) >> 32) + 4096;
          v48[1] = v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *v53 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v53[1] = v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                         + 8193) >> 1;
      *v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                          + 8193) >> 1;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((16843010 * (unint64_t)(57344 * v34[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v34[3])) >> 32)
                           + 8193) >> 1;
        *v38 = (((16843010 * (unint64_t)(57344 * *v34)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v34[2])) >> 32)
                            + 8193) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        *v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((16843010 * (unint64_t)(57344 * v42[1])) >> 32)
                             + ((16843010 * (unint64_t)(57344 * v42[3])) >> 32)
                             + 8193) >> 1;
          *v46 = (((16843010 * (unint64_t)(57344 * *v42)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * v42[2])) >> 32)
                              + 8193) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (((16843010 * (unint64_t)(57344 * v48)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v50)) >> 32)
                          + 8193) >> 1;
      v21[1] = (((16843010 * (unint64_t)(57344 * v49)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v51)) >> 32)
                            + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        *v53 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v36)) >> 32) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (16843010 * (unint64_t)(57344 * v34[1])) >> 32;
        *v38 = ((16843010 * (unint64_t)(57344 * *v34)) >> 32) + 4096;
        v38[1] = v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (16843010 * (unint64_t)(57344 * v42[1])) >> 32;
          *v46 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          v46[1] = v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *v51 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v51[1] = v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) | (*(unsigned __int8 *)(v28 + i) << 8);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (257 * (v14[3] + v14[1]) + 1) >> 1;
      *v21 = (257 * (v14[2] + *v14) + 1) >> 1;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (257 * (v34[3] + v34[1]) + 1) >> 1;
        *v38 = (257 * (v34[2] + *v34) + 1) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (257 * (v14[3] + v14[1]) + 1) >> 1;
        *v21 = (257 * (v14[2] + *v14) + 1) >> 1;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (257 * (v42[3] + v42[1]) + 1) >> 1;
          *v46 = (257 * (v42[2] + *v42) + 1) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (257 * (v50 + v48) + 1) >> 1;
      v21[1] = (257 * (v51 + v49) + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (257 * (v14[3] + v14[1]) + 1) >> 1;
        *v53 = (257 * (v14[2] + *v14) + 1) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) | (*(unsigned __int8 *)(v28 + i) << 8);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = v14[1] | (v14[1] << 8);
      *v21 = *v14 | (*v14 << 8);
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] | (v34[1] << 8);
        *v38 = *v34 | (*v34 << 8);
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = v14[1] | (v14[1] << 8);
        *v21 = *v14 | (*v14 << 8);
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] | (v42[1] << 8);
          *v46 = *v42 | (*v42 << 8);
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = v48 | (v48 << 8);
      v21[1] = v49 | (v49 << 8);
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] | (v14[1] << 8);
        *v51 = *v14 | (*v14 << 8);
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  _WORD *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  _WORD *v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = &v15[v14 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v15[3])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v41)) >> 32)
                         + 16386) >> 2;
      *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v15[2])) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v40)) >> 32)
                          + 16386) >> 2;
      v22[1] = v42;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = *(v44 - 2);
        v46 = &v44[v14];
        v47 = v44[v14 - 3];
        v48 = v44[v14 - 2];
        v49 = *(v44 - 1);
        v50 = (16843010 * (unint64_t)(57344 * *(v44 - 3))) >> 32;
        v51 = *v44;
        v44 += 4;
        v52 = ((16843010 * (unint64_t)(57344 * v45)) >> 32)
            + ((16843010 * (unint64_t)(57344 * v51)) >> 32)
            + ((16843010 * (unint64_t)(57344 * v48)) >> 32)
            + ((16843010 * (unint64_t)(57344 * *v46)) >> 32)
            + 16386;
        v53 = &v38[v43];
        *v53 = (v50
                            + ((16843010 * (unint64_t)(57344 * v49)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v47)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * *(v46 - 1))) >> 32)
                            + 16386) >> 2;
        v53[1] = v52 >> 2;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v15;
      v57 = v22;
      if ((v8 & 1) != 0)
      {
        v58 = &v15[v14 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v15 + 4;
        v61 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v15[3])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v60)) >> 32)
                           + 16386) >> 2;
        *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v15[2])) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v59)) >> 32)
                            + 16386) >> 2;
        v22[1] = v61;
        v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = *(v63 - 2);
          v65 = &v63[v14];
          v66 = v63[v14 - 3];
          v67 = v63[v14 - 2];
          v68 = *(v63 - 1);
          v69 = (16843010 * (unint64_t)(57344 * *(v63 - 3))) >> 32;
          v70 = *v63;
          v63 += 4;
          v71 = ((16843010 * (unint64_t)(57344 * v64)) >> 32)
              + ((16843010 * (unint64_t)(57344 * v70)) >> 32)
              + ((16843010 * (unint64_t)(57344 * v67)) >> 32)
              + ((16843010 * (unint64_t)(57344 * *v65)) >> 32)
              + 16386;
          v72 = &v57[v62];
          *v72 = (v69
                              + ((16843010 * (unint64_t)(57344 * v68)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * v66)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * *(v65 - 1))) >> 32)
                              + 16386) >> 2;
          v72[1] = v71 >> 2;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (16843010 * (unint64_t)(57344 * v37[1])) >> 32;
        *v41 = ((16843010 * (unint64_t)(57344 * *v37)) >> 32) + 4096;
        v41[1] = v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *v50 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v50[1] = v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = &v16[v15 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v16 + 4;
      v42 = (257 * (v16[v15 + 1] + v16[1] + v16[3] + v41) + 2) >> 2;
      *v23 = (257 * (v16[v15] + *v16 + v16[2] + v40) + 2) >> 2;
      v23[1] = v42;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v15];
        v49 = v44[v15 - 3];
        v50 = v44[v15 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = (257 * (v50 + v47 + v52 + *v48) + 2) >> 2;
        *v45 = (257 * (v49 + v46 + v51 + *(v48 - 1)) + 2) >> 2;
        v45[1] = v53;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v16;
      v57 = v23;
      if ((v9 & 1) != 0)
      {
        v58 = &v16[v15 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v16 + 4;
        v61 = (257 * (v16[v15 + 1] + v16[1] + v16[3] + v60) + 2) >> 2;
        *v23 = (257 * (v16[v15] + *v16 + v16[2] + v59) + 2) >> 2;
        v23[1] = v61;
        v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v15];
          v68 = v63[v15 - 3];
          v69 = v63[v15 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = (257 * (v69 + v66 + v71 + *v67) + 2) >> 2;
          *v64 = (257 * (v68 + v65 + v70 + *(v67 - 1)) + 2) >> 2;
          v64[1] = v72;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  _WORD *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  if (v26 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v9 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v16 + 4;
      v39 = v16[1] | (v16[1] << 8);
      *v23 = *v16 | (*v16 << 8);
      v23[1] = v39;
      v38 = v23 + 2;
    }
    else
    {
      v37 = v16;
      v38 = v23;
    }
    if (v24 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = v37[1] | (v37[1] << 8);
        *v41 = *v37 | (*v37 << 8);
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v15;
    do
    {
      v46 = v16;
      v47 = v23;
      if ((v9 & 1) != 0)
      {
        v46 = v16 + 4;
        v48 = v16[1] | (v16[1] << 8);
        *v23 = *v16 | (*v16 << 8);
        v23[1] = v48;
        v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] | (v46[1] << 8);
          *v50 = *v46 | (*v46 << 8);
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_444f_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + 2 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  v26 = v8 & 1;
  if (v17 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v12[1];
      v32 = v12 + 2;
      *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v34)) >> 32) + 4096;
      v33 = v16 + 2;
    }
    else
    {
      v32 = v12;
      v33 = v16;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v33[1] = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32;
      v40 = v32[1];
      *v33 = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v33[1] = 16 * ((16843010 * (unint64_t)(3584 * v40)) >> 32) + 4096;
    }
    v12 += v11;
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v17 - v27;
    do
    {
      v43 = v12;
      v44 = v16;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1];
        v43 = v12 + 2;
        *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v45)) >> 32) + 4096;
        v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v44[1] = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43;
        v51 = v43[1];
        *v44 = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
        v44[1] = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      }
      v12 += v11;
      v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v12;
      v53 = v12[1];
      v12 += 2;
      *v16 = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v12;
        v56 = v12[1];
        v12 += 2;
        *v16 = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v12;
      v58 = v12[1];
      *v16 = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v23 + i))) >> 32)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v33)) >> 32) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = 16 * ((16843010 * (unint64_t)(3584 * v36)) >> 32) + 4096;
        v32[1] = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v32[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = 16 * ((16843010 * (unint64_t)(3584 * v47)) >> 32) + 4096;
          v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v23 + i))) >> 32);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v33)) >> 32);
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = 16 * ((16843010 * (unint64_t)(4095 * v36)) >> 32);
        v32[1] = 16 * ((16843010 * (unint64_t)(4095 * v37)) >> 32);
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
      v32[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = 16 * ((16843010 * (unint64_t)(4095 * v47)) >> 32);
          v43[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
        v43[1] = 16 * ((16843010 * (unint64_t)(4095 * v50)) >> 32);
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 16 * ((16843010 * (unint64_t)(4095 * v51)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v52)) >> 32);
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 16 * ((16843010 * (unint64_t)(4095 * v54)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v55)) >> 32);
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = 16 * ((16843010 * (unint64_t)(4095 * v56)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v57)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
      *v21 = (8
            * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v38 + 4104) & 0xFFF0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((16843010 * (unint64_t)(3584 * v36[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v36[1])) >> 32);
        *v40 = (8
              * (((16843010 * (unint64_t)(3584 * v36[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v36)) >> 32))
              + 4104) & 0xFFF0;
        v40[1] = (8 * v41 + 4104) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        *v21 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v46 + 4104) & 0xFFF0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((16843010 * (unint64_t)(3584 * v44[3])) >> 32)
              + ((16843010 * (unint64_t)(3584 * v44[1])) >> 32);
          *v48 = (8
                * (((16843010 * (unint64_t)(3584 * v44[2])) >> 32)
                 + ((16843010 * (unint64_t)(3584 * *v44)) >> 32))
                + 4104) & 0xFFF0;
          v48[1] = (8 * v49 + 4104) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (8
            * (((16843010 * (unint64_t)(3584 * v52)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v50)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((16843010 * (unint64_t)(3584 * v53)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v51)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        *v55 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v55[1] = (8 * v56 + 4104) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 4;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (16843010 * (unint64_t)(3584 * v36[1])) >> 32;
        *v40 = 16 * ((16843010 * (unint64_t)(3584 * *v36)) >> 32) + 4096;
        v40[1] = 16 * v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 4;
        *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (16843010 * (unint64_t)(3584 * v44[1])) >> 32;
          *v48 = 16 * ((16843010 * (unint64_t)(3584 * *v44)) >> 32) + 4096;
          v48[1] = 16 * v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *v53 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v53[1] = 16 * v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
      *v21 = (8
            * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v36 + 4104) & 0xFFF0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((16843010 * (unint64_t)(3584 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v34[1])) >> 32);
        *v38 = (8
              * (((16843010 * (unint64_t)(3584 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v34)) >> 32))
              + 4104) & 0xFFF0;
        v38[1] = (8 * v39 + 4104) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        *v21 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v44 + 4104) & 0xFFF0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((16843010 * (unint64_t)(3584 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(3584 * v42[1])) >> 32);
          *v46 = (8
                * (((16843010 * (unint64_t)(3584 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(3584 * *v42)) >> 32))
                + 4104) & 0xFFF0;
          v46[1] = (8 * v47 + 4104) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (8
            * (((16843010 * (unint64_t)(3584 * v50)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v48)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((16843010 * (unint64_t)(3584 * v51)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v49)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        *v53 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v53[1] = (8 * v54 + 4104) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v36)) >> 32) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (16843010 * (unint64_t)(3584 * v34[1])) >> 32;
        *v38 = 16 * ((16843010 * (unint64_t)(3584 * *v34)) >> 32) + 4096;
        v38[1] = 16 * v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (16843010 * (unint64_t)(3584 * v42[1])) >> 32;
          *v46 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          v46[1] = 16 * v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *v51 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v51[1] = 16 * v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v28 + i))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((16843010 * (unint64_t)(4095 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v14[1])) >> 32);
      *v21 = (8
            * (((16843010 * (unint64_t)(4095 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(4095 * *v14)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8 * v36 + 8) & 0xFFF0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((16843010 * (unint64_t)(4095 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v34[1])) >> 32);
        *v38 = (8
              * (((16843010 * (unint64_t)(4095 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v34)) >> 32))
              + 8) & 0xFFF0;
        v38[1] = (8 * v39 + 8) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((16843010 * (unint64_t)(4095 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v14[1])) >> 32);
        *v21 = (8
              * (((16843010 * (unint64_t)(4095 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v14)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8 * v44 + 8) & 0xFFF0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((16843010 * (unint64_t)(4095 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(4095 * v42[1])) >> 32);
          *v46 = (8
                * (((16843010 * (unint64_t)(4095 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(4095 * *v42)) >> 32))
                + 8) & 0xFFF0;
          v46[1] = (8 * v47 + 8) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (8
            * (((16843010 * (unint64_t)(4095 * v50)) >> 32)
             + ((16843010 * (unint64_t)(4095 * v48)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((16843010 * (unint64_t)(4095 * v51)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v49)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((16843010 * (unint64_t)(4095 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v14[1])) >> 32);
        *v53 = (8
              * (((16843010 * (unint64_t)(4095 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v14)) >> 32))
              + 8) & 0xFFF0;
        v53[1] = (8 * v54 + 8) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v28 + i))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v36)) >> 32);
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (16843010 * (unint64_t)(4095 * v34[1])) >> 32;
        *v38 = 16 * ((16843010 * (unint64_t)(4095 * *v34)) >> 32);
        v38[1] = 16 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (16843010 * (unint64_t)(4095 * v42[1])) >> 32;
          *v46 = 16 * ((16843010 * (unint64_t)(4095 * *v42)) >> 32);
          v46[1] = 16 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (16843010 * (unint64_t)(4095 * v14[1])) >> 32;
        *v51 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v51[1] = 16 * v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = &v15[v14 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v41)) >> 32);
      *v22 = (4
            * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(3584 * v40)) >> 32))
            + 4104) & 0xFFF0;
      v22[1] = (4 * v42 + 4104) & 0xFFF0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v14];
        v49 = v44[v14 - 3];
        v50 = v44[v14 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        *v45 = (4
              * (((16843010 * (unint64_t)(3584 * v49)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v46)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v51)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v53)) >> 32))
              + 4104) & 0xFFF0;
        v45[1] = (4
                * (((16843010 * (unint64_t)(3584 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * (_DWORD)v48)) >> 32))
                + 4104) & 0xFFF0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v15;
      v57 = v22;
      if ((v8 & 1) != 0)
      {
        v58 = &v15[v14 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v15 + 4;
        v61 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v60)) >> 32);
        *v22 = (4
              * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * v59)) >> 32))
              + 4104) & 0xFFF0;
        v22[1] = (4 * v61 + 4104) & 0xFFF0;
        v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v14];
          v68 = v63[v14 - 3];
          v69 = v63[v14 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          *v64 = (4
                * (((16843010 * (unint64_t)(3584 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v72)) >> 32))
                + 4104) & 0xFFF0;
          v64[1] = (4
                  * (((16843010 * (unint64_t)(3584 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * (_DWORD)v67)) >> 32))
                  + 4104) & 0xFFF0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (16843010 * (unint64_t)(3584 * v37[1])) >> 32;
        *v41 = 16 * ((16843010 * (unint64_t)(3584 * *v37)) >> 32) + 4096;
        v41[1] = 16 * v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *v50 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v50[1] = 16 * v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v32 + i))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = &v15[v14 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v41)) >> 32);
      *v22 = (4
            * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(4095 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(4095 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(4095 * v40)) >> 32))
            + 8) & 0xFFF0;
      v22[1] = (4 * v42 + 8) & 0xFFF0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v14];
        v49 = v44[v14 - 3];
        v50 = v44[v14 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        *v45 = (4
              * (((16843010 * (unint64_t)(4095 * v49)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v46)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v51)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v53)) >> 32))
              + 8) & 0xFFF0;
        v45[1] = (4
                * (((16843010 * (unint64_t)(4095 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * (_DWORD)v48)) >> 32))
                + 8) & 0xFFF0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v15;
      v57 = v22;
      if ((v8 & 1) != 0)
      {
        v58 = &v15[v14 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v15 + 4;
        v61 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v60)) >> 32);
        *v22 = (4
              * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * v59)) >> 32))
              + 8) & 0xFFF0;
        v22[1] = (4 * v61 + 8) & 0xFFF0;
        v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v14];
          v68 = v63[v14 - 3];
          v69 = v63[v14 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          *v64 = (4
                * (((16843010 * (unint64_t)(4095 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v72)) >> 32))
                + 8) & 0xFFF0;
          v64[1] = (4
                  * (((16843010 * (unint64_t)(4095 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * (_DWORD)v67)) >> 32))
                  + 8) & 0xFFF0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v32 + i))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (16843010 * (unint64_t)(4095 * v37[1])) >> 32;
        *v41 = 16 * ((16843010 * (unint64_t)(4095 * *v37)) >> 32);
        v41[1] = 16 * v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          *v50 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          v50[1] = 16 * v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_444f_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + 2 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v24 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  v26 = v8 & 1;
  if (v17 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v12[1];
      v32 = v12 + 2;
      *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
      v33 = v16 + 2;
    }
    else
    {
      v32 = v12;
      v33 = v16;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v33[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32;
      v40 = v32[1];
      *v33 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v33[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
    }
    v12 += v11;
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v17 - v27;
    do
    {
      v43 = v12;
      v44 = v16;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1];
        v43 = v12 + 2;
        *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
        v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v44[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43;
        v51 = v43[1];
        *v44 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
        v44[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      }
      v12 += v11;
      v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v12;
      v53 = v12[1];
      v12 += 2;
      *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v12;
        v56 = v12[1];
        v12 += 2;
        *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v12;
      v58 = v12[1];
      *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v23 + i))) >> 32) << 6)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
        v32[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v32[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
          v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v23 + i))) >> 32) << 6;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v33)) >> 32) << 6;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v36)) >> 32) << 6;
        v32[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v37)) >> 32) << 6;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
      v32[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v47)) >> 32) << 6;
          v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
        v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v50)) >> 32) << 6;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v51)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v52)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v55)) >> 32) << 6;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v56)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v57)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v30 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
      *v21 = (32
            * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v38 + 4128) & 0xFFC0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((16843010 * (unint64_t)(896 * v36[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v36[1])) >> 32);
        *v40 = (32
              * (((16843010 * (unint64_t)(896 * v36[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v36)) >> 32))
              + 4128) & 0xFFC0;
        v40[1] = (32 * v41 + 4128) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        *v21 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v46 + 4128) & 0xFFC0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((16843010 * (unint64_t)(896 * v44[3])) >> 32)
              + ((16843010 * (unint64_t)(896 * v44[1])) >> 32);
          *v48 = (32
                * (((16843010 * (unint64_t)(896 * v44[2])) >> 32)
                 + ((16843010 * (unint64_t)(896 * *v44)) >> 32))
                + 4128) & 0xFFC0;
          v48[1] = (32 * v49 + 4128) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (32
            * (((16843010 * (unint64_t)(896 * v52)) >> 32)
             + ((16843010 * (unint64_t)(896 * v50)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((16843010 * (unint64_t)(896 * v53)) >> 32)
               + ((16843010 * (unint64_t)(896 * v51)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        *v55 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v55[1] = (32 * v56 + 4128) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v30 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 4;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (16843010 * (unint64_t)(896 * v36[1])) >> 32;
        *v40 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v36)) >> 32) << 6) + 4096;
        v40[1] = ((_WORD)v41 << 6) + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 4;
        *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (16843010 * (unint64_t)(896 * v44[1])) >> 32;
          *v48 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v44)) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v49 << 6) + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *v53 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v53[1] = ((_WORD)v54 << 6) + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v28 + i))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
      *v21 = (32
            * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v36 + 4128) & 0xFFC0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((16843010 * (unint64_t)(896 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v34[1])) >> 32);
        *v38 = (32
              * (((16843010 * (unint64_t)(896 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v34)) >> 32))
              + 4128) & 0xFFC0;
        v38[1] = (32 * v39 + 4128) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        *v21 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v44 + 4128) & 0xFFC0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((16843010 * (unint64_t)(896 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(896 * v42[1])) >> 32);
          *v46 = (32
                * (((16843010 * (unint64_t)(896 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(896 * *v42)) >> 32))
                + 4128) & 0xFFC0;
          v46[1] = (32 * v47 + 4128) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (32
            * (((16843010 * (unint64_t)(896 * v50)) >> 32)
             + ((16843010 * (unint64_t)(896 * v48)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((16843010 * (unint64_t)(896 * v51)) >> 32)
               + ((16843010 * (unint64_t)(896 * v49)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        *v53 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v53[1] = (32 * v54 + 4128) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v28 + i))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (16843010 * (unint64_t)(896 * v34[1])) >> 32;
        *v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v34)) >> 32) << 6) + 4096;
        v38[1] = ((_WORD)v39 << 6) + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (16843010 * (unint64_t)(896 * v42[1])) >> 32;
          *v46 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v42)) >> 32) << 6) + 4096;
          v46[1] = ((_WORD)v47 << 6) + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *v51 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v51[1] = ((_WORD)v52 << 6) + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v28 + i))) >> 32) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((16843010 * (unint64_t)(1023 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v14[1])) >> 32);
      *v21 = (32
            * (((16843010 * (unint64_t)(1023 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(1023 * *v14)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32 * v36 + 32) & 0xFFC0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((16843010 * (unint64_t)(1023 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v34[1])) >> 32);
        *v38 = (32
              * (((16843010 * (unint64_t)(1023 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v34)) >> 32))
              + 32) & 0xFFC0;
        v38[1] = (32 * v39 + 32) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((16843010 * (unint64_t)(1023 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v14[1])) >> 32);
        *v21 = (32
              * (((16843010 * (unint64_t)(1023 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v14)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32 * v44 + 32) & 0xFFC0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((16843010 * (unint64_t)(1023 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(1023 * v42[1])) >> 32);
          *v46 = (32
                * (((16843010 * (unint64_t)(1023 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(1023 * *v42)) >> 32))
                + 32) & 0xFFC0;
          v46[1] = (32 * v47 + 32) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (32
            * (((16843010 * (unint64_t)(1023 * v50)) >> 32)
             + ((16843010 * (unint64_t)(1023 * v48)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((16843010 * (unint64_t)(1023 * v51)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v49)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((16843010 * (unint64_t)(1023 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v14[1])) >> 32);
        *v53 = (32
              * (((16843010 * (unint64_t)(1023 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v14)) >> 32))
              + 32) & 0xFFC0;
        v53[1] = (32 * v54 + 32) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v28 + i))) >> 32) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v36)) >> 32) << 6;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (16843010 * (unint64_t)(1023 * v34[1])) >> 32;
        *v38 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v34)) >> 32) << 6;
        v38[1] = (_WORD)v39 << 6;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (16843010 * (unint64_t)(1023 * v42[1])) >> 32;
          *v46 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v42)) >> 32) << 6;
          v46[1] = (_WORD)v47 << 6;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (16843010 * (unint64_t)(1023 * v14[1])) >> 32;
        *v51 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v51[1] = (_WORD)v52 << 6;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v32 + i))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = &v15[v14 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(896 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(896 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(896 * v41)) >> 32);
      *v22 = (16
            * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(896 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(896 * v40)) >> 32))
            + 4128) & 0xFFC0;
      v22[1] = (16 * v42 + 4128) & 0xFFC0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v14];
        v49 = v44[v14 - 3];
        v50 = v44[v14 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        *v45 = (16
              * (((16843010 * (unint64_t)(896 * v49)) >> 32)
               + ((16843010 * (unint64_t)(896 * v46)) >> 32)
               + ((16843010 * (unint64_t)(896 * v51)) >> 32)
               + ((16843010 * (unint64_t)(896 * v53)) >> 32))
              + 4128) & 0xFFC0;
        v45[1] = (16
                * (((16843010 * (unint64_t)(896 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(896 * (_DWORD)v48)) >> 32))
                + 4128) & 0xFFC0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v15;
      v57 = v22;
      if ((v8 & 1) != 0)
      {
        v58 = &v15[v14 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v15 + 4;
        v61 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(896 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(896 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v60)) >> 32);
        *v22 = (16
              * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(896 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * v59)) >> 32))
              + 4128) & 0xFFC0;
        v22[1] = (16 * v61 + 4128) & 0xFFC0;
        v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v14];
          v68 = v63[v14 - 3];
          v69 = v63[v14 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          *v64 = (16
                * (((16843010 * (unint64_t)(896 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v72)) >> 32))
                + 4128) & 0xFFC0;
          v64[1] = (16
                  * (((16843010 * (unint64_t)(896 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(896 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(896 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(896 * (_DWORD)v67)) >> 32))
                  + 4128) & 0xFFC0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v32 + i))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (16843010 * (unint64_t)(896 * v37[1])) >> 32;
        *v41 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v37)) >> 32) << 6) + 4096;
        v41[1] = ((_WORD)v42 << 6) + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *v50 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v50[1] = ((_WORD)v51 << 6) + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v32 + i))) >> 32) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = &v15[v14 + 2];
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v41)) >> 32);
      *v22 = (16
            * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(1023 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(1023 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(1023 * v40)) >> 32))
            + 32) & 0xFFC0;
      v22[1] = (16 * v42 + 32) & 0xFFC0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 3;
      do
      {
        v45 = &v38[v43];
        v46 = *(v44 - 3);
        v47 = *(v44 - 2);
        v48 = &v44[v14];
        v49 = v44[v14 - 3];
        v50 = v44[v14 - 2];
        v51 = *(v44 - 1);
        v52 = *v44;
        v44 += 4;
        v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        *v45 = (16
              * (((16843010 * (unint64_t)(1023 * v49)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v46)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v51)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v53)) >> 32))
              + 32) & 0xFFC0;
        v45[1] = (16
                * (((16843010 * (unint64_t)(1023 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * (_DWORD)v48)) >> 32))
                + 32) & 0xFFC0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v54 = 0;
    v55 = v26 - v35;
    do
    {
      v56 = v15;
      v57 = v22;
      if ((v8 & 1) != 0)
      {
        v58 = &v15[v14 + 2];
        v59 = *v58;
        v60 = v58[1];
        v56 = v15 + 4;
        v61 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v60)) >> 32);
        *v22 = (16
              * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * v59)) >> 32))
              + 32) & 0xFFC0;
        v22[1] = (16 * v61 + 32) & 0xFFC0;
        v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        v62 = 0;
        v63 = v56 + 3;
        do
        {
          v64 = &v57[v62];
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = &v63[v14];
          v68 = v63[v14 - 3];
          v69 = v63[v14 - 2];
          v70 = *(v63 - 1);
          v71 = *v63;
          v63 += 4;
          v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          *v64 = (16
                * (((16843010 * (unint64_t)(1023 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v72)) >> 32))
                + 32) & 0xFFC0;
          v64[1] = (16
                  * (((16843010 * (unint64_t)(1023 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * (_DWORD)v67)) >> 32))
                  + 32) & 0xFFC0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v10 + v8 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v32 + i))) >> 32) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1))
    v35 = v9 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (16843010 * (unint64_t)(1023 * v37[1])) >> 32;
        *v41 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v37)) >> 32) << 6;
        v41[1] = (_WORD)v42 << 6;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          *v50 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          v50[1] = (_WORD)v51 << 6;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_444f_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = v21 + v15;
    v25 = v22 + v15;
    v26 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_BYTE *)(v24 + i) = -1;
          *(_BYTE *)(v25 + i) = ((7204443 * *(unsigned __int8 *)(v26 + i)) >> 23) + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v28 = v8 & 1;
  if (v11 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v9 & 1;
  if (v10 >= v31)
    v32 = v9 & 1;
  else
    v32 = 0;
  v33 = v10 - v32;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v34 = v13 + 2;
      v36 = (7368928 * v13[1]) >> 23;
      *v17 = ((7368928 * *v13) >> 23) + 16;
      v17[1] = v36 + 16;
      v35 = v17 + 2;
    }
    else
    {
      v34 = v13;
      v35 = v17;
    }
    if (v10 == v32)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v32;
      do
      {
        v39 = *v34;
        v40 = v34[1];
        v34 += 2;
        *v35 = ((7368928 * v39) >> 23) + 16;
        v35[1] = ((7368928 * v40) >> 23) + 16;
        v35 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v32;
    }
    if (v37 + v31 < v10)
    {
      v41 = *v34;
      v42 = (7368928 * v34[1]) >> 23;
      *v35 = ((7368928 * v41) >> 23) + 16;
      v35[1] = v42 + 16;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v11 - v29;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v30 & 1) != 0)
      {
        v45 = v13 + 2;
        v47 = (7368928 * v13[1]) >> 23;
        *v17 = ((7368928 * *v13) >> 23) + 16;
        v17[1] = v47 + 16;
        v46 = v17 + 2;
      }
      if (v10 == v32)
      {
        v48 = 0;
      }
      else
      {
        v49 = v10 - v32;
        do
        {
          v50 = *v45;
          v51 = v45[1];
          v45 += 2;
          *v46 = ((7368928 * v50) >> 23) + 16;
          v46[1] = ((7368928 * v51) >> 23) + 16;
          v46 += 2;
          --v49;
        }
        while (v49);
        v48 = v10 - v32;
      }
      if (v48 + v31 < v10)
      {
        v52 = *v45;
        v53 = (7368928 * v45[1]) >> 23;
        *v46 = ((7368928 * v52) >> 23) + 16;
        v46[1] = v53 + 16;
      }
      v13 += v12;
      v17 += v16;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v11)
  {
    if ((v30 & 1) != 0)
    {
      v54 = *v13;
      v55 = v13[1];
      v13 += 2;
      *v17 = ((7368928 * v54) >> 23) + 16;
      v17[1] = ((7368928 * v55) >> 23) + 16;
      v17 += 2;
    }
    if (v10 == v32)
    {
      v33 = 0;
    }
    else
    {
      v56 = v10 - v32;
      do
      {
        v57 = *v13;
        v58 = v13[1];
        v13 += 2;
        *v17 = ((7368928 * v57) >> 23) + 16;
        v17[1] = ((7368928 * v58) >> 23) + 16;
        v17 += 2;
        --v56;
      }
      while (v56);
    }
    if (v33 + v31 < v10)
    {
      v59 = *v13;
      v60 = (7368928 * v13[1]) >> 23;
      *v17 = ((7368928 * v59) >> 23) + 16;
      v17[1] = v60 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + v14;
    v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_BYTE *)(v21 + i) = ((7204443 * *(unsigned __int8 *)(v22 + i)) >> 23) + 16;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = (7368928 * v13[1]) >> 23;
      *v17 = ((7368928 * *v13) >> 23) + 16;
      v17[1] = v32 + 16;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = ((7368928 * v35) >> 23) + 16;
        v31[1] = ((7368928 * v36) >> 23) + 16;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30;
      v38 = (7368928 * v30[1]) >> 23;
      *v31 = ((7368928 * v37) >> 23) + 16;
      v31[1] = v38 + 16;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = (7368928 * v13[1]) >> 23;
        *v17 = ((7368928 * *v13) >> 23) + 16;
        v17[1] = v43 + 16;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = ((7368928 * v46) >> 23) + 16;
          v42[1] = ((7368928 * v47) >> 23) + 16;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41;
        v49 = (7368928 * v41[1]) >> 23;
        *v42 = ((7368928 * v48) >> 23) + 16;
        v42[1] = v49 + 16;
      }
      v13 += v12;
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = ((7368928 * v50) >> 23) + 16;
      v17[1] = ((7368928 * v51) >> 23) + 16;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = ((7368928 * v53) >> 23) + 16;
        v17[1] = ((7368928 * v54) >> 23) + 16;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13;
      v56 = (7368928 * v13[1]) >> 23;
      *v17 = ((7368928 * v55) >> 23) + 16;
      v17[1] = v56 + 16;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  unsigned int v44;
  unint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BYTE *v53;
  unsigned int v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = v23 + v15;
    v27 = v24 + v15;
    v28 = *a3 + v25 * v12 + v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((7204443 * *(unsigned __int8 *)(v28 + i)) >> 23) + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v19 < v10)
    v10 = 0;
  v33 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
      *v18 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
      v18[1] = v36;
      v35 = v18 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v18;
    }
    if (v19 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((7368928 * v34[1]) >> 23) + ((7368928 * v34[3]) >> 23) + 33) >> 1;
        *v38 = (((7368928 * *v34) >> 23) + ((7368928 * v34[2]) >> 23) + 33) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v18;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        *v18 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v18[1] = v44;
        v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((7368928 * v42[1]) >> 23) + ((7368928 * v42[3]) >> 23) + 33) >> 1;
          *v46 = (((7368928 * *v42) >> 23) + ((7368928 * v42[2]) >> 23) + 33) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v18 = (((7368928 * v48) >> 23) + ((7368928 * v50) >> 23) + 33) >> 1;
      v18[1] = (((7368928 * v49) >> 23) + ((7368928 * v51) >> 23) + 33) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v18[v52];
        v54 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        *v53 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  unsigned int v44;
  unint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned int v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = v23 + v15;
    v27 = v24 + v15;
    v28 = *a3 + v25 * v12 + v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((7204443 * *(unsigned __int8 *)(v28 + i)) >> 23) + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v19 < v10)
    v10 = 0;
  v33 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (7368928 * v14[1]) >> 23;
      *v18 = ((7368928 * *v14) >> 23) + 16;
      v18[1] = v36 + 16;
      v35 = v18 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v18;
    }
    if (v19 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (7368928 * v34[1]) >> 23;
        *v38 = ((7368928 * *v34) >> 23) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v18;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (7368928 * v14[1]) >> 23;
        *v18 = ((7368928 * *v14) >> 23) + 16;
        v18[1] = v44 + 16;
        v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (7368928 * v42[1]) >> 23;
          *v46 = ((7368928 * *v42) >> 23) + 16;
          v46[1] = v47 + 16;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v18 = ((7368928 * v48) >> 23) + 16;
      v18[1] = ((7368928 * v49) >> 23) + 16;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v18[v50];
        v52 = (7368928 * v14[1]) >> 23;
        *v51 = ((7368928 * *v14) >> 23) + 16;
        v51[1] = v52 + 16;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 4;
      v35 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
      *v20 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (((7368928 * v33[1]) >> 23) + ((7368928 * v33[3]) >> 23) + 33) >> 1;
        *v37 = (((7368928 * *v33) >> 23) + ((7368928 * v33[2]) >> 23) + 33) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 4;
        v43 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        *v20 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (((7368928 * v41[1]) >> 23) + ((7368928 * v41[3]) >> 23) + 33) >> 1;
          *v45 = (((7368928 * *v41) >> 23) + ((7368928 * v41[2]) >> 23) + 33) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v49 = v14[2];
      v50 = v14[3];
      v14 += 4;
      *v20 = (((7368928 * v47) >> 23) + ((7368928 * v49) >> 23) + 33) >> 1;
      v20[1] = (((7368928 * v48) >> 23) + ((7368928 * v50) >> 23) + 33) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        *v52 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  _BYTE *v50;
  unsigned int v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 4;
      v35 = (7368928 * v14[1]) >> 23;
      *v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v35 + 16;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (7368928 * v33[1]) >> 23;
        *v37 = ((7368928 * *v33) >> 23) + 16;
        v37[1] = v38 + 16;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 4;
        v43 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v43 + 16;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (7368928 * v41[1]) >> 23;
          *v45 = ((7368928 * *v41) >> 23) + 16;
          v45[1] = v46 + 16;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 4;
      *v20 = ((7368928 * v47) >> 23) + 16;
      v20[1] = ((7368928 * v48) >> 23) + 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v49 = 0;
      do
      {
        v50 = &v20[v49];
        v51 = (7368928 * v14[1]) >> 23;
        *v50 = ((7368928 * *v14) >> 23) + 16;
        v50[1] = v51 + 16;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  size_t v27;
  unsigned __int8 *v28;
  _BYTE *v29;
  unsigned int v30;
  size_t v31;
  _BYTE *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  size_t v39;
  _BYTE *v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  size_t v46;
  _BYTE *v47;
  unsigned int v48;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    v18 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else
    v18 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v19 = *(_QWORD *)(a6 + 24);
  else
    v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    v51 = v19;
    v20 = *a4;
    v21 = *a8;
    v22 = (char *)(*a7 + *a8 * v15 + v14);
    v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    v19 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v24 = v11 & 1;
  if (v19 >= v24)
    v25 = v11 & 1;
  else
    v25 = 0;
  v26 = v8;
  if (v18 < v9)
    v9 = 0;
  v27 = v18 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v28 = v13 + 4;
      v30 = (v13[1] + v13[3] + 1) >> 1;
      *v17 = (*v13 + v13[2] + 1) >> 1;
      v17[1] = v30;
      v29 = v17 + 2;
    }
    else
    {
      v28 = v13;
      v29 = v17;
    }
    if (v18 != v9)
    {
      v31 = 0;
      do
      {
        v32 = &v29[v31];
        v33 = (v28[1] + v28[3] + 1) >> 1;
        *v32 = (*v28 + v28[2] + 1) >> 1;
        v32[1] = v33;
        v31 += 2;
        v28 += 4;
      }
      while (v31 < v27);
    }
    v13 += v12;
    v17 += v16;
  }
  if (v19 == v25)
  {
    v34 = 0;
  }
  else
  {
    v35 = 0;
    v34 = v19 - v25;
    do
    {
      v36 = v13;
      v37 = v17;
      if ((v26 & 1) != 0)
      {
        v36 = v13 + 4;
        v38 = (v13[1] + v13[3] + 1) >> 1;
        *v17 = (*v13 + v13[2] + 1) >> 1;
        v17[1] = v38;
        v37 = v17 + 2;
      }
      if (v18 != v9)
      {
        v39 = 0;
        do
        {
          v40 = &v37[v39];
          v41 = (v36[1] + v36[3] + 1) >> 1;
          *v40 = (*v36 + v36[2] + 1) >> 1;
          v40[1] = v41;
          v39 += 2;
          v36 += 4;
        }
        while (v39 < v27);
      }
      v13 += v12;
      v17 += v16;
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v24 < v19)
  {
    if ((v26 & 1) != 0)
    {
      v42 = *v13;
      v43 = v13[1];
      v44 = v13[2];
      v45 = v13[3];
      v13 += 4;
      *v17 = (v42 + v44 + 1) >> 1;
      v17[1] = (v43 + v45 + 1) >> 1;
      v17 += 2;
    }
    if (v18 != v9)
    {
      v46 = 0;
      do
      {
        v47 = &v17[v46];
        v48 = (v13[1] + v13[3] + 1) >> 1;
        *v47 = (*v13 + v13[2] + 1) >> 1;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  size_t v27;
  __int16 *v28;
  __int16 *v29;
  size_t v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  __int16 *v34;
  __int16 *v35;
  size_t v36;
  __int16 v37;
  __int16 v38;
  size_t v39;
  __int16 v40;
  unint64_t v43;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = a8[1];
  v17 = (__int16 *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    v18 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else
    v18 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v19 = *(_QWORD *)(a6 + 24);
  else
    v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    v43 = v19;
    v20 = *a4;
    v21 = *a8;
    v22 = (char *)(*a7 + *a8 * v15 + v14);
    v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    v19 = v43;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v24 = v11 & 1;
  if (v19 >= v24)
    v25 = v11 & 1;
  else
    v25 = 0;
  v26 = v8;
  if (v18 < v9)
    v9 = 0;
  v27 = v18 - v9;
  if ((v11 & 1) != 0)
  {
    v28 = v13;
    if ((v26 & 1) != 0)
    {
      v28 = v13 + 2;
      *v17 = *v13;
      v29 = v17 + 1;
    }
    else
    {
      v29 = v17;
    }
    if (v18 != v9)
    {
      v30 = 0;
      do
      {
        v31 = *v28;
        v28 += 2;
        v29[v30 / 2] = v31;
        v30 += 2;
      }
      while (v30 < v27);
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (__int16 *)((char *)v17 + v16);
  }
  if (v19 == v25)
  {
    v32 = 0;
  }
  else
  {
    v33 = 0;
    v32 = v19 - v25;
    do
    {
      v34 = v13;
      v35 = v17;
      if ((v26 & 1) != 0)
      {
        v34 = v13 + 2;
        *v17 = *v13;
        v35 = v17 + 1;
      }
      if (v18 != v9)
      {
        v36 = 0;
        do
        {
          v37 = *v34;
          v34 += 2;
          v35[v36 / 2] = v37;
          v36 += 2;
        }
        while (v36 < v27);
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (__int16 *)((char *)v17 + v16);
      ++v33;
    }
    while (v33 != v32);
  }
  if (v32 + v24 < v19)
  {
    if ((v26 & 1) != 0)
    {
      v38 = *v13;
      v13 += 2;
      *v17++ = v38;
    }
    if (v18 != v9)
    {
      v39 = 0;
      do
      {
        v40 = *v13;
        v13 += 2;
        v17[v39 / 2] = v40;
        v39 += 2;
      }
      while (v39 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  unsigned __int8 *v64;
  _BYTE *v65;
  int v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v13 >= v9;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v13;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v11 + v31;
    v33 = a7[2] + v29 * v18 + v16;
    v34 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v32 + i)) >> 23) + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v22 < v10)
    v10 = 0;
  v37 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = &v15[v14 + 2];
      v41 = *v40;
      v42 = v40[1];
      v38 = v15 + 4;
      v43 = (((7368928 * v15[1]) >> 23)
           + ((7368928 * v15[v14 + 1]) >> 23)
           + ((7368928 * v15[3]) >> 23)
           + ((7368928 * v42) >> 23)
           + 66) >> 2;
      *v21 = (((7368928 * *v15) >> 23)
            + ((7368928 * v15[v14]) >> 23)
            + ((7368928 * v15[2]) >> 23)
            + ((7368928 * v41) >> 23)
            + 66) >> 2;
      v21[1] = v43;
      v39 = v21 + 2;
    }
    else
    {
      v38 = v15;
      v39 = v21;
    }
    if (v22 != v10)
    {
      v44 = 0;
      v45 = v38 + 3;
      do
      {
        v46 = &v39[v44];
        v47 = *(v45 - 3);
        v48 = *(v45 - 2);
        v49 = &v45[v14];
        v50 = v45[v14 - 3];
        v51 = v45[v14 - 2];
        v52 = *(v45 - 1);
        v53 = *v45;
        v45 += 4;
        v54 = (((7368928 * v48) >> 23)
             + ((7368928 * v51) >> 23)
             + ((7368928 * v53) >> 23)
             + ((7368928 * *v49) >> 23)
             + 66) >> 2;
        *v46 = (((7368928 * v47) >> 23)
              + ((7368928 * v50) >> 23)
              + ((7368928 * v52) >> 23)
              + ((7368928 * *(v49 - 1)) >> 23)
              + 66) >> 2;
        v46[1] = v54;
        v44 += 2;
      }
      while (v44 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    v55 = 0;
    v56 = v24 - v36;
    do
    {
      v57 = v15;
      v58 = v21;
      if ((v8 & 1) != 0)
      {
        v59 = &v15[v14 + 2];
        v60 = *v59;
        v61 = v59[1];
        v57 = v15 + 4;
        v62 = (((7368928 * v15[1]) >> 23)
             + ((7368928 * v15[v14 + 1]) >> 23)
             + ((7368928 * v15[3]) >> 23)
             + ((7368928 * v61) >> 23)
             + 66) >> 2;
        *v21 = (((7368928 * *v15) >> 23)
              + ((7368928 * v15[v14]) >> 23)
              + ((7368928 * v15[2]) >> 23)
              + ((7368928 * v60) >> 23)
              + 66) >> 2;
        v21[1] = v62;
        v58 = v21 + 2;
      }
      if (v22 != v10)
      {
        v63 = 0;
        v64 = v57 + 3;
        do
        {
          v65 = &v58[v63];
          v66 = *(v64 - 3);
          v67 = *(v64 - 2);
          v68 = &v64[v14];
          v69 = v64[v14 - 3];
          v70 = v64[v14 - 2];
          v71 = *(v64 - 1);
          v72 = *v64;
          v64 += 4;
          v73 = (((7368928 * v67) >> 23)
               + ((7368928 * v70) >> 23)
               + ((7368928 * v72) >> 23)
               + ((7368928 * *v68) >> 23)
               + 66) >> 2;
          *v65 = (((7368928 * v66) >> 23)
                + ((7368928 * v69) >> 23)
                + ((7368928 * v71) >> 23)
                + ((7368928 * *(v68 - 1)) >> 23)
                + 66) >> 2;
          v65[1] = v73;
          v63 += 2;
        }
        while (v63 < v37);
      }
      v15 += 2 * v14;
      v21 += v20;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  unsigned int v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned int v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v13 >= v9;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v13;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v11 + v31;
    v33 = a7[2] + v29 * v18 + v16;
    v34 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v32 + i)) >> 23) + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v22 < v10)
    v10 = 0;
  v37 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = v15 + 4;
      v40 = (7368928 * v15[1]) >> 23;
      *v21 = ((7368928 * *v15) >> 23) + 16;
      v21[1] = v40 + 16;
      v39 = v21 + 2;
    }
    else
    {
      v38 = v15;
      v39 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = (7368928 * v38[1]) >> 23;
        *v42 = ((7368928 * *v38) >> 23) + 16;
        v42[1] = v43 + 16;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    v44 = 0;
    v45 = v24 - v36;
    v46 = 2 * v14;
    do
    {
      v47 = v15;
      v48 = v21;
      if ((v8 & 1) != 0)
      {
        v47 = v15 + 4;
        v49 = (7368928 * v15[1]) >> 23;
        *v21 = ((7368928 * *v15) >> 23) + 16;
        v21[1] = v49 + 16;
        v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        v50 = 0;
        do
        {
          v51 = &v48[v50];
          v52 = (7368928 * v47[1]) >> 23;
          *v51 = ((7368928 * *v47) >> 23) + 16;
          v51[1] = v52 + 16;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      v15 += v46;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  unsigned __int8 *v61;
  _BYTE *v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 2 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13 < v19 - v18)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v13;
    if (v13 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v11 + v29;
    v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = &v15[v14 + 2];
      v38 = *v37;
      v39 = v37[1];
      v35 = v15 + 4;
      v40 = (((7368928 * v15[1]) >> 23)
           + ((7368928 * v15[v14 + 1]) >> 23)
           + ((7368928 * v15[3]) >> 23)
           + ((7368928 * v39) >> 23)
           + 66) >> 2;
      *v21 = (((7368928 * *v15) >> 23)
            + ((7368928 * v15[v14]) >> 23)
            + ((7368928 * v15[2]) >> 23)
            + ((7368928 * v38) >> 23)
            + 66) >> 2;
      v21[1] = v40;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v15;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      v42 = v35 + 3;
      do
      {
        v43 = &v36[v41];
        v44 = *(v42 - 3);
        v45 = *(v42 - 2);
        v46 = &v42[v14];
        v47 = v42[v14 - 3];
        v48 = v42[v14 - 2];
        v49 = *(v42 - 1);
        v50 = *v42;
        v42 += 4;
        v51 = (((7368928 * v45) >> 23)
             + ((7368928 * v48) >> 23)
             + ((7368928 * v50) >> 23)
             + ((7368928 * *v46) >> 23)
             + 66) >> 2;
        *v43 = (((7368928 * v44) >> 23)
              + ((7368928 * v47) >> 23)
              + ((7368928 * v49) >> 23)
              + ((7368928 * *(v46 - 1)) >> 23)
              + 66) >> 2;
        v43[1] = v51;
        v41 += 2;
      }
      while (v41 < v34);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v33)
  {
    v52 = 0;
    v53 = v24 - v33;
    do
    {
      v54 = v15;
      v55 = v21;
      if ((v9 & 1) != 0)
      {
        v56 = &v15[v14 + 2];
        v57 = *v56;
        v58 = v56[1];
        v54 = v15 + 4;
        v59 = (((7368928 * v15[1]) >> 23)
             + ((7368928 * v15[v14 + 1]) >> 23)
             + ((7368928 * v15[3]) >> 23)
             + ((7368928 * v58) >> 23)
             + 66) >> 2;
        *v21 = (((7368928 * *v15) >> 23)
              + ((7368928 * v15[v14]) >> 23)
              + ((7368928 * v15[2]) >> 23)
              + ((7368928 * v57) >> 23)
              + 66) >> 2;
        v21[1] = v59;
        v55 = v21 + 2;
      }
      if (v22 != v10)
      {
        v60 = 0;
        v61 = v54 + 3;
        do
        {
          v62 = &v55[v60];
          v63 = *(v61 - 3);
          v64 = *(v61 - 2);
          v65 = &v61[v14];
          v66 = v61[v14 - 3];
          v67 = v61[v14 - 2];
          v68 = *(v61 - 1);
          v69 = *v61;
          v61 += 4;
          v70 = (((7368928 * v64) >> 23)
               + ((7368928 * v67) >> 23)
               + ((7368928 * v69) >> 23)
               + ((7368928 * *v65) >> 23)
               + 66) >> 2;
          *v62 = (((7368928 * v63) >> 23)
                + ((7368928 * v66) >> 23)
                + ((7368928 * v68) >> 23)
                + ((7368928 * *(v65 - 1)) >> 23)
                + 66) >> 2;
          v62[1] = v70;
          v60 += 2;
        }
        while (v60 < v34);
      }
      v15 += 2 * v14;
      v21 += v20;
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned int v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int v49;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 2 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v13;
    if (v13 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v11 + v29;
    v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v35 = v15 + 4;
      v37 = (7368928 * v15[1]) >> 23;
      *v21 = ((7368928 * *v15) >> 23) + 16;
      v21[1] = v37 + 16;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v15;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = (7368928 * v35[1]) >> 23;
        *v39 = ((7368928 * *v35) >> 23) + 16;
        v39[1] = v40 + 16;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v33)
  {
    v41 = 0;
    v42 = v24 - v33;
    v43 = 2 * v14;
    do
    {
      v44 = v15;
      v45 = v21;
      if ((v9 & 1) != 0)
      {
        v44 = v15 + 4;
        v46 = (7368928 * v15[1]) >> 23;
        *v21 = ((7368928 * *v15) >> 23) + 16;
        v21[1] = v46 + 16;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (7368928 * v44[1]) >> 23;
          *v48 = ((7368928 * *v44) >> 23) + 16;
          v48[1] = v49 + 16;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v34);
      }
      v15 += v43;
      v21 += v20;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  size_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned int v39;
  size_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  _BYTE *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unsigned int v58;
  size_t v59;
  unsigned __int8 *v60;
  _BYTE *v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unint64_t v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v72 = v24;
    v25 = *a4;
    v26 = *a8;
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v17);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    v24 = v72;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v23 < v10)
    v10 = 0;
  v33 = v23 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = &v16[v15 + 2];
      v37 = *v36;
      v38 = v36[1];
      v34 = v16 + 4;
      v39 = (v16[1] + v16[3] + v16[v15 + 1] + v38 + 2) >> 2;
      *v22 = (*v16 + v16[2] + v16[v15] + v37 + 2) >> 2;
      v22[1] = v39;
      v35 = v22 + 2;
    }
    else
    {
      v34 = v16;
      v35 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      v41 = v34 + 3;
      do
      {
        v42 = &v35[v40];
        v43 = *(v41 - 3);
        v44 = *(v41 - 2);
        v45 = &v41[v15];
        v46 = v41[v15 - 3];
        v47 = v41[v15 - 2];
        v48 = *(v41 - 1);
        v49 = *v41;
        v41 += 4;
        v50 = (v44 + v49 + v47 + *v45 + 2) >> 2;
        *v42 = (v43 + v48 + v46 + *(v45 - 1) + 2) >> 2;
        v42[1] = v50;
        v40 += 2;
      }
      while (v40 < v33);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v32)
  {
    v51 = 0;
    v52 = v24 - v32;
    do
    {
      v53 = v16;
      v54 = v22;
      if ((v8 & 1) != 0)
      {
        v55 = &v16[v15 + 2];
        v56 = *v55;
        v57 = v55[1];
        v53 = v16 + 4;
        v58 = (v16[1] + v16[3] + v16[v15 + 1] + v57 + 2) >> 2;
        *v22 = (*v16 + v16[2] + v16[v15] + v56 + 2) >> 2;
        v22[1] = v58;
        v54 = v22 + 2;
      }
      if (v23 != v10)
      {
        v59 = 0;
        v60 = v53 + 3;
        do
        {
          v61 = &v54[v59];
          v62 = *(v60 - 3);
          v63 = *(v60 - 2);
          v64 = &v60[v15];
          v65 = v60[v15 - 3];
          v66 = v60[v15 - 2];
          v67 = *(v60 - 1);
          v68 = *v60;
          v60 += 4;
          v69 = (v63 + v68 + v66 + *v64 + 2) >> 2;
          *v61 = (v62 + v67 + v65 + *(v64 - 1) + 2) >> 2;
          v61[1] = v69;
          v59 += 2;
        }
        while (v59 < v33);
      }
      v16 += 2 * v15;
      v22 += v21;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  size_t v33;
  __int16 *v34;
  __int16 *v35;
  size_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  __int16 *v40;
  __int16 *v41;
  size_t v42;
  __int16 v43;
  unint64_t v45;
  uint64_t v46;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = v10 & 1;
  v14 = v13 + v10;
  v15 = (*(_DWORD *)(a2 + 24) + (_DWORD)v10) & 0xFFFFFFFE;
  v16 = a4[1];
  v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + 2 * (v11 + v9));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                            + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                        - v18)
    v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v12;
  v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v45 = v24;
    v46 = a4[1];
    v25 = *a4;
    v26 = *a8;
    if (v14 >= v10)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v18);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    v9 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 40) & 1;
    v11 = v9 & 1;
    v24 = v45;
    v16 = v46;
  }
  if (v24 >= v13)
    v32 = v13;
  else
    v32 = 0;
  if (v23 < v11)
    v11 = 0;
  v33 = v23 - v11;
  if (v13)
  {
    v34 = v17;
    if ((v9 & 1) != 0)
    {
      v34 = v17 + 2;
      *v22 = *v17;
      v35 = v22 + 1;
    }
    else
    {
      v35 = v22;
    }
    if (v23 != v11)
    {
      v36 = 0;
      do
      {
        v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    v17 += v16;
    v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v32)
  {
    v38 = 0;
    v39 = v24 - v32;
    do
    {
      v40 = v17;
      v41 = v22;
      if ((v9 & 1) != 0)
      {
        v40 = v17 + 2;
        *v22 = *v17;
        v41 = v22 + 1;
      }
      if (v23 != v11)
      {
        v42 = 0;
        do
        {
          v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      v17 += v16;
      v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  _BYTE *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v11 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = &v15[v14 + 2];
      v42 = *v41;
      v43 = v41[1];
      v38 = v15 + 4;
      v44 = (((7368928 * v15[1]) >> 23)
           + ((7368928 * v15[v14 + 1]) >> 23)
           + ((7368928 * v15[3]) >> 23)
           + ((7368928 * v43) >> 23)
           + 66) >> 2;
      *v22 = (((7368928 * *v15) >> 23)
            + ((7368928 * v15[v14]) >> 23)
            + ((7368928 * v15[2]) >> 23)
            + ((7368928 * v42) >> 23)
            + 66) >> 2;
      v39 = v22 + 1;
      *v23 = v44;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v45 = 0;
      v46 = v38 + 3;
      do
      {
        v47 = *(v46 - 3);
        v48 = *(v46 - 2);
        v49 = &v46[v14];
        v50 = v46[v14 - 3];
        v51 = v46[v14 - 2];
        v52 = *(v46 - 1);
        v53 = *v46;
        v46 += 4;
        v54 = ((7368928 * v48) >> 23)
            + ((7368928 * v51) >> 23)
            + ((7368928 * v53) >> 23)
            + ((7368928 * *v49) >> 23)
            + 66;
        *v39++ = (((7368928 * v47) >> 23)
                + ((7368928 * v50) >> 23)
                + ((7368928 * v52) >> 23)
                + ((7368928 * *(v49 - 1)) >> 23)
                + 66) >> 2;
        *v40++ = v54 >> 2;
        v45 += 2;
      }
      while (v45 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v55 = 0;
    v56 = v26 - v36;
    do
    {
      v57 = v15;
      v58 = v22;
      v59 = v23;
      if ((v8 & 1) != 0)
      {
        v60 = &v15[v14 + 2];
        v61 = *v60;
        v62 = v60[1];
        v57 = v15 + 4;
        v63 = (((7368928 * v15[1]) >> 23)
             + ((7368928 * v15[v14 + 1]) >> 23)
             + ((7368928 * v15[3]) >> 23)
             + ((7368928 * v62) >> 23)
             + 66) >> 2;
        *v22 = (((7368928 * *v15) >> 23)
              + ((7368928 * v15[v14]) >> 23)
              + ((7368928 * v15[2]) >> 23)
              + ((7368928 * v61) >> 23)
              + 66) >> 2;
        v58 = v22 + 1;
        *v23 = v63;
        v59 = v23 + 1;
      }
      if (v24 != v10)
      {
        v64 = 0;
        v65 = v57 + 3;
        do
        {
          v66 = *(v65 - 3);
          v67 = *(v65 - 2);
          v68 = &v65[v14];
          v69 = v65[v14 - 3];
          v70 = v65[v14 - 2];
          v71 = *(v65 - 1);
          v72 = *v65;
          v65 += 4;
          v73 = ((7368928 * v67) >> 23)
              + ((7368928 * v70) >> 23)
              + ((7368928 * v72) >> 23)
              + ((7368928 * *v68) >> 23)
              + 66;
          *v58++ = (((7368928 * v66) >> 23)
                  + ((7368928 * v69) >> 23)
                  + ((7368928 * v71) >> 23)
                  + ((7368928 * *(v68 - 1)) >> 23)
                  + 66) >> 2;
          *v59++ = v73 >> 2;
          v64 += 2;
        }
        while (v64 < v37);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v11 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = v15 + 4;
      v41 = (7368928 * v15[1]) >> 23;
      *v22 = ((7368928 * *v15) >> 23) + 16;
      v39 = v22 + 1;
      *v23 = v41 + 16;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v42 = 0;
      do
      {
        v43 = (7368928 * v38[1]) >> 23;
        *v39++ = ((7368928 * *v38) >> 23) + 16;
        *v40++ = v43 + 16;
        v42 += 2;
        v38 += 4;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v44 = 0;
    v45 = v26 - v36;
    v46 = 2 * v14;
    do
    {
      v47 = v15;
      v48 = v22;
      v49 = v23;
      if ((v8 & 1) != 0)
      {
        v47 = v15 + 4;
        v50 = (7368928 * v15[1]) >> 23;
        *v22 = ((7368928 * *v15) >> 23) + 16;
        v48 = v22 + 1;
        *v23 = v50 + 16;
        v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        v51 = 0;
        do
        {
          v52 = (7368928 * v47[1]) >> 23;
          *v48++ = ((7368928 * *v47) >> 23) + 16;
          *v49++ = v52 + 16;
          v51 += 2;
          v47 += 4;
        }
        while (v51 < v37);
      }
      v15 += v46;
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v34;
  size_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned int v42;
  size_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unsigned int v61;
  size_t v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  else
    v26 = v14 - v13;
  if (v26)
  {
    v74 = v26;
    v75 = a8[2];
    v76 = a8[1];
    v27 = *a4;
    v28 = *a8;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    v31 = (char *)(*a7 + v28 * v19 + v17);
    v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    v26 = v74;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v22 = v75;
    v21 = v76;
  }
  if (v26 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v25 < v10)
    v10 = 0;
  v35 = v25 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = &v16[v15 + 2];
      v40 = *v39;
      v41 = v39[1];
      v36 = v16 + 4;
      v42 = (v16[1] + v16[3] + v16[v15 + 1] + v41 + 2) >> 2;
      *v23 = (*v16 + v16[2] + v16[v15] + v40 + 2) >> 2;
      v37 = v23 + 1;
      *v24 = v42;
      v38 = v24 + 1;
    }
    else
    {
      v36 = v16;
      v37 = v23;
      v38 = v24;
    }
    if (v25 != v10)
    {
      v43 = 0;
      v44 = v36 + 3;
      do
      {
        v45 = *(v44 - 3);
        v46 = *(v44 - 2);
        v47 = &v44[v15];
        v48 = v44[v15 - 3];
        v49 = v44[v15 - 2];
        v50 = *(v44 - 1);
        v51 = *v44;
        v44 += 4;
        v52 = v46 + v51 + v49 + *v47 + 2;
        *v37++ = (v45 + v50 + v48 + *(v47 - 1) + 2) >> 2;
        *v38++ = v52 >> 2;
        v43 += 2;
      }
      while (v43 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    v53 = 0;
    v54 = v26 - v34;
    do
    {
      v55 = v16;
      v56 = v23;
      v57 = v24;
      if ((v8 & 1) != 0)
      {
        v58 = &v16[v15 + 2];
        v59 = *v58;
        v60 = v58[1];
        v55 = v16 + 4;
        v61 = (v16[1] + v16[3] + v16[v15 + 1] + v60 + 2) >> 2;
        *v23 = (*v16 + v16[2] + v16[v15] + v59 + 2) >> 2;
        v56 = v23 + 1;
        *v24 = v61;
        v57 = v24 + 1;
      }
      if (v25 != v10)
      {
        v62 = 0;
        v63 = v55 + 3;
        do
        {
          v64 = *(v63 - 3);
          v65 = *(v63 - 2);
          v66 = &v63[v15];
          v67 = v63[v15 - 3];
          v68 = v63[v15 - 2];
          v69 = *(v63 - 1);
          v70 = *v63;
          v63 += 4;
          v71 = v65 + v70 + v68 + *v66 + 2;
          *v56++ = (v64 + v69 + v67 + *(v66 - 1) + 2) >> 2;
          *v57++ = v71 >> 2;
          v62 += 2;
        }
        while (v62 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v34;
  size_t v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  char v39;
  size_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  char v47;
  size_t v48;
  char v49;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_BYTE *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  else
    v26 = v14 - v13;
  if (v26)
  {
    v52 = v26;
    v53 = a4[1];
    v54 = a8[1];
    v27 = *a4;
    v28 = *a8;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    v31 = (char *)(*a7 + v28 * v19 + v17);
    v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    v26 = v52;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v53;
    v21 = v54;
  }
  if (v26 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v25 < v10)
    v10 = 0;
  v35 = v25 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v16[1];
      v36 = v16 + 4;
      *v23 = *v16;
      v37 = v23 + 1;
      *v24 = v39;
      v38 = v24 + 1;
    }
    else
    {
      v36 = v16;
      v37 = v23;
      v38 = v24;
    }
    if (v25 != v10)
    {
      v40 = 0;
      do
      {
        v41 = v36[1];
        *v37++ = *v36;
        *v38++ = v41;
        v40 += 2;
        v36 += 4;
      }
      while (v40 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    v42 = 0;
    v43 = v26 - v34;
    do
    {
      v44 = v16;
      v45 = v23;
      v46 = v24;
      if ((v8 & 1) != 0)
      {
        v47 = v16[1];
        v44 = v16 + 4;
        *v23 = *v16;
        v45 = v23 + 1;
        *v24 = v47;
        v46 = v24 + 1;
      }
      if (v25 != v10)
      {
        v48 = 0;
        do
        {
          v49 = v44[1];
          *v45++ = *v44;
          *v46++ = v49;
          v48 += 2;
          v44 += 4;
        }
        while (v48 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_f420_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_f420_32ARGB;
  *a11 = vt_VImage_Cleanup_f420_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_f420_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_f420_32BGRA;
  *a11 = vt_VImage_Cleanup_f420_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_f420_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  uint64_t j;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  _WORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 & 0xFFFFFFFE;
  v14 = v8 + v12;
  v15 = (v8 + v12) & 1;
  v16 = a4[1];
  v17 = a4[2];
  v18 = v12 >> 1;
  v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v21 = *(_QWORD *)(a6 + 24);
  v22 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v23 = *(_QWORD *)(a6 + 40);
  v24 = a8[1];
  v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  v26 = v11 - (v10 + v9);
  v27 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27)
    v27 = v26;
  v28 = v14 - v13 + v15;
  if (v28 >= v21)
    v28 = v21;
  if (v28)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v13 >= v12)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v9 + v33;
    v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (i = 0; i != v27; ++i)
          *(_WORD *)(v35 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v34 + i))) >> 32) << 6)
                                  + 4096;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  v37 = v12 & 1;
  if (v28 >> 1 >= (v28 - v37) >> 1)
    v38 = (v28 - (v12 & 1)) >> 1;
  else
    v38 = v28 >> 1;
  v39 = v9;
  v40 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1)
    v40 = (v27 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    v41 = v19;
    if ((v39 & 1) != 0)
    {
      v41 = v19 + 1;
      v42 = v20 + 1;
      v44 = *v20;
      *v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v19)) >> 32) << 6) + 4096;
      v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
      v43 = v25 + 2;
      if (!v40)
      {
LABEL_27:
        v19 += v16;
        v20 += v17;
        v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_28;
      }
    }
    else
    {
      v42 = v20;
      v43 = v25;
      if (!v40)
        goto LABEL_27;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v47 = *v41++;
      v46 = v47;
      v48 = *v42++;
      *v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
      v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v43 += 2;
      v49 = __CFADD__(v45++, 1);
    }
    while (!v49);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v51 = v19;
      v52 = v20;
      v53 = v25;
      if ((v39 & 1) != 0)
      {
        v51 = v19 + 1;
        v52 = v20 + 1;
        v54 = *v20;
        *v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v19)) >> 32) << 6) + 4096;
        v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v53 = v25 + 2;
      }
      if (v40)
      {
        v55 = -(uint64_t)v40;
        do
        {
          v57 = *v51++;
          v56 = v57;
          v58 = *v52++;
          v59 = ((16843010 * (unint64_t)(896 * v56)) >> 32 << 6) + 4096;
          *v53 = v59;
          v53[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
          v60 = (_WORD *)((char *)v53 + v24);
          *v60 = v59;
          v60[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
          v53 += 2;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    v61 = 2 * v38;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | (unint64_t)v37) < v28)
  {
    if ((v39 & 1) != 0)
    {
      v63 = *v19++;
      v62 = v63;
      v64 = *v20++;
      *v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v62)) >> 32) << 6) + 4096;
      v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v64)) >> 32) << 6) + 4096;
      v25 += 2;
    }
    if (v40)
    {
      v65 = -(uint64_t)v40;
      do
      {
        v67 = *v19++;
        v66 = v67;
        v68 = *v20++;
        *v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
        v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
        v25 += 2;
        v49 = __CFADD__(v65++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_f420_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  uint64_t j;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  _WORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 & 0xFFFFFFFE;
  v14 = v8 + v12;
  v15 = (v8 + v12) & 1;
  v16 = a4[1];
  v17 = a4[2];
  v18 = v12 >> 1;
  v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v21 = *(_QWORD *)(a6 + 24);
  v22 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v23 = *(_QWORD *)(a6 + 40);
  v24 = a8[1];
  v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  v26 = v11 - (v10 + v9);
  v27 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27)
    v27 = v26;
  v28 = v14 - v13 + v15;
  if (v28 >= v21)
    v28 = v21;
  if (v28)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v13 >= v12)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v9 + v33;
    v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (i = 0; i != v27; ++i)
          *(_WORD *)(v35 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v34 + i))) >> 32) << 6;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  v37 = v12 & 1;
  if (v28 >> 1 >= (v28 - v37) >> 1)
    v38 = (v28 - (v12 & 1)) >> 1;
  else
    v38 = v28 >> 1;
  v39 = v9;
  v40 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1)
    v40 = (v27 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    v41 = v19;
    if ((v39 & 1) != 0)
    {
      v41 = v19 + 1;
      v42 = v20 + 1;
      v44 = *v20;
      *v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v19)) >> 32) << 6;
      v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
      v43 = v25 + 2;
      if (!v40)
      {
LABEL_27:
        v19 += v16;
        v20 += v17;
        v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_28;
      }
    }
    else
    {
      v42 = v20;
      v43 = v25;
      if (!v40)
        goto LABEL_27;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v47 = *v41++;
      v46 = v47;
      v48 = *v42++;
      *v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v46)) >> 32) << 6;
      v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
      v43 += 2;
      v49 = __CFADD__(v45++, 1);
    }
    while (!v49);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v51 = v19;
      v52 = v20;
      v53 = v25;
      if ((v39 & 1) != 0)
      {
        v51 = v19 + 1;
        v52 = v20 + 1;
        v54 = *v20;
        *v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v19)) >> 32) << 6;
        v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
        v53 = v25 + 2;
      }
      if (v40)
      {
        v55 = -(uint64_t)v40;
        do
        {
          v57 = *v51++;
          v56 = v57;
          v58 = *v52++;
          v59 = (16843010 * (unint64_t)(1023 * v56)) >> 32 << 6;
          *v53 = v59;
          v53[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v58)) >> 32) << 6;
          v60 = (_WORD *)((char *)v53 + v24);
          *v60 = v59;
          v60[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v58)) >> 32) << 6;
          v53 += 2;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    v61 = 2 * v38;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | (unint64_t)v37) < v28)
  {
    if ((v39 & 1) != 0)
    {
      v63 = *v19++;
      v62 = v63;
      v64 = *v20++;
      *v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v62)) >> 32) << 6;
      v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v64)) >> 32) << 6;
      v25 += 2;
    }
    if (v40)
    {
      v65 = -(uint64_t)v40;
      do
      {
        v67 = *v19++;
        v66 = v67;
        v68 = *v20++;
        *v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v66)) >> 32) << 6;
        v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v68)) >> 32) << 6;
        v25 += 2;
        v49 = __CFADD__(v65++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

vImage_Error vt_VImage_Setup_420v_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420v_32ARGB;
  *a11 = vt_VImage_Cleanup_420v_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_420v_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420v_32BGRA;
  *a11 = vt_VImage_Cleanup_420v_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_420v_2vuy(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, char **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v12 = *a6;
    v13 = (char *)a4[1];
    v14 = 2 * *a3;
    v15 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        v17 = (char *)v16;
        v18 = v11;
        v19 = v12;
        v20 = v13;
        do
        {
          v21 = &v17[v7];
          v22 = &v19[v9];
          v23 = *v20;
          v24 = v20[1];
          v25 = *(v17 - 1);
          v26 = *v17;
          v17 += 2;
          *v19 = *v20;
          v19[1] = v25;
          v19[2] = v24;
          v19[3] = v26;
          v27 = *(v21 - 1);
          LOBYTE(v21) = *v21;
          *v22 = v23;
          v22[1] = v27;
          v22[2] = v24;
          v22[3] = (char)v21;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v13 += v8;
      v12 += v15;
      ++v6;
      v16 += v14;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_yuvs_vec(uint64_t a1, uint64_t a2, _QWORD *a3, int8x16_t **a4, uint64_t *a5, char **a6)
{
  vt_Copy_420v_yuvs_arm(a4, *a6, a1, a2, a3, *a5);
  return 0;
}

uint64_t vt_Copy_420v_yuvs(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v12 = (_BYTE *)*a6;
    v13 = (char *)a4[1];
    v14 = 2 * *a3;
    v15 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        v17 = (char *)v16;
        v18 = v11;
        v19 = v12;
        v20 = v13;
        do
        {
          v21 = &v17[v7];
          v22 = &v19[v9];
          v23 = *v20;
          v24 = v20[1];
          v25 = *(v17 - 1);
          v26 = *v17;
          v17 += 2;
          *v19 = v25;
          v19[1] = v23;
          v19[2] = v26;
          v19[3] = v24;
          v27 = *(v21 - 1);
          LOBYTE(v21) = *v21;
          *v22 = v27;
          v22[1] = v23;
          v22[2] = (_BYTE)v21;
          v22[3] = v24;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v13 += v8;
      v12 += v15;
      ++v6;
      v16 += v14;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_yuvf_vec(uint64_t a1, uint64_t a2, _QWORD *a3, uint8x16_t **a4, uint64_t *a5, int8x16_t **a6, double a7, double a8, double a9, uint32x4_t a10, uint32x4_t a11)
{
  vt_Copy_420v_yuvf_arm(a4, *a6, a1, a2, a3, *a5, a7, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_420v_yuvf(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v12 = (_BYTE *)*a6;
    v13 = 2 * *a3;
    v14 = (unsigned __int8 *)a4[1];
    v15 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        v17 = (unsigned __int8 *)v16;
        v18 = v11;
        v19 = v12;
        v20 = v14;
        do
        {
          v21 = &v17[v7];
          v22 = &v19[v9];
          v23 = *v20;
          v24 = v20[1];
          v25 = *(v17 - 1);
          v26 = *v17;
          v17 += 2;
          *v19 = sLumaTableVtoF[v25];
          LOBYTE(v23) = sChromaTableVtoF[v23];
          v19[1] = v23;
          v19[2] = sLumaTableVtoF[v26];
          LOBYTE(v24) = sChromaTableVtoF[v24];
          v19[3] = v24;
          v27 = *(v21 - 1);
          v28 = *v21;
          *v22 = sLumaTableVtoF[v27];
          v22[1] = v23;
          v22[2] = sLumaTableVtoF[v28];
          v22[3] = v24;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v14 += v8;
      v12 += v15;
      ++v6;
      v16 += v13;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_y420_vec(size_t __n, uint64_t a2, _QWORD *a3, _DWORD *a4, _QWORD *a5, char **a6)
{
  char *v12;
  char *v13;
  uint64_t v14;

  if (a2)
  {
    v12 = *a6;
    v13 = *(char **)a4;
    v14 = a2;
    do
    {
      memcpy(v12, v13, __n);
      v13 += *a3;
      v12 += *a5;
      --v14;
    }
    while (v14);
  }
  vt_Copy_420v_y420_Chroma_arm(a4, (uint64_t)a6, __n, a2, (uint64_t)a3, (uint64_t)a5);
  return 0;
}

uint64_t vt_Copy_420v_y420(size_t __n, unint64_t a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 >= 2)
  {
    v7 = 0;
    v8 = *a3;
    v9 = *a5;
    v24 = a5[1];
    v25 = a3[1];
    v22 = a2 >> 1;
    v23 = a5[2];
    v11 = a6[1];
    v10 = a6[2];
    v12 = *a6;
    if (__n >> 1 <= 1)
      v13 = 1;
    else
      v13 = __n >> 1;
    v14 = *a4;
    v15 = a4[1];
    do
    {
      memcpy(v12, v14, __n);
      v16 = &v14[v8];
      v17 = &v12[v9];
      memcpy(v17, v16, __n);
      if (__n >= 2)
      {
        v18 = 0;
        v19 = v15;
        do
        {
          v20 = v19[1];
          v11[v18] = *v19;
          v10[v18] = v20;
          v19 += 2;
          ++v18;
        }
        while (v13 != v18);
      }
      v14 = &v16[v8];
      v12 = &v17[v9];
      v15 += v25;
      v11 += v24;
      v10 += v23;
      ++v7;
    }
    while (v7 != v22);
  }
  return 0;
}

uint64_t vt_Copy_420v_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  unsigned __int8 *v24;
  __int16 v25;
  __int16 v26;
  _WORD *v27;
  __int16 v28;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v18 = (unsigned __int8 *)(a3[1] + v15 * (v9 >> 1) + v8);
    v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v25 = *v24;
            v26 = v24[1];
            v24 += 2;
            v23 = v25 << 8;
            v22 = v26 << 8;
          }
          v27 = (_WORD *)(v17 + v20);
          v28 = *(unsigned __int8 *)(v19 + v21) << 8;
          *v27 = -1;
          v27[1] = v28;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420v_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char *v24;
  char v25;
  _BYTE *v26;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + a6[4];
    v18 = (char *)(a3[1] + v15 * (v9 >> 1) + v8);
    v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v23 = *v24;
            v22 = v24[1];
            v24 += 2;
          }
          v25 = *(_BYTE *)(v19 + v21);
          v26 = (_BYTE *)(v17 + v20);
          *v26 = -1;
          v26[1] = v25;
          v26[2] = v23;
          v26[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420v_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  _WORD *v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFELL;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v12 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v10 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40);
  v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(_QWORD *)(a6 + 24))
    v13 = *(_QWORD *)(a6 + 24);
  if (v13)
  {
    v14 = 0;
    v15 = *a4;
    v16 = a4[1];
    v17 = *a8;
    v18 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v11;
    v19 = a3[1] + v16 * (v9 >> 1) + (v8 & 0xFFFFFFFFFFFFFFFELL);
    v20 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v12)
      {
        v21 = 0;
        for (i = 0; i < v12; i += 2)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          v25 = *(unsigned __int8 *)(v20 + i) << 8;
          v26 = *(unsigned __int8 *)(v20 + i + 1) << 8;
          *v23 = *(unsigned __int8 *)(v19 + i) << 8;
          v23[1] = v25;
          v23[2] = v24;
          v23[3] = v26;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_420v_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  BOOL v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t j;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  __int16 v59;
  __int16 v60;
  _WORD *v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18)
    v22 = v18;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = a8[2];
    v30 = v25 + v27;
    v31 = a7[2] + v29 * v16 + 2 * v15;
    v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  v34 = v8 & 1;
  v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35)
    v35 = v22 >> 1;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1)
    v37 = (v21 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v46 = v14[1] << 8;
      *v20 = *v14 << 8;
      v20[1] = v46;
      v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39;
          v43 = v39[1];
          v39 += 2;
          *v40 = v42 << 8;
          v40[1] = v43 << 8;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      v47 = *v39 << 8;
      v48 = v39[1] << 8;
      *v40 = v47;
      v40[1] = v48;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v14;
      v51 = v20;
      if ((v36 & 1) != 0)
      {
        v50 = v14 + 2;
        v52 = *v14 << 8;
        v53 = v14[1] << 8;
        *v20 = v52;
        v20[1] = v53;
        v54 = (_WORD *)((char *)v20 + v19);
        *v54 = v52;
        v54[1] = v53;
        v51 = v20 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = *v50;
          v57 = v50[1];
          v50 += 2;
          v56 <<= 8;
          v57 <<= 8;
          *v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          v58 = (_WORD *)((char *)v51 + v19);
          *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        v59 = *v50 << 8;
        v60 = v50[1] << 8;
        *v51 = v59;
        v51[1] = v60;
        v61 = (_WORD *)((char *)v51 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 += v13;
      v20 += v19;
    }
    v62 = 2 * v35;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if ((v36 & 1) != 0)
    {
      v63 = *v14;
      v64 = v14[1];
      v14 += 2;
      *v20 = v63 << 8;
      v20[1] = v64 << 8;
      v20 += 2;
    }
    if (v37)
    {
      v65 = -(uint64_t)v37;
      do
      {
        v66 = *v14;
        v67 = v14[1];
        v14 += 2;
        *v20 = v66 << 8;
        v20[1] = v67 << 8;
        v20 += 2;
        v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      v68 = 2 * v37;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      v69 = *v14 << 8;
      v70 = v14[1] << 8;
      *v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v43 = v14[1] << 8;
      *v20 = *v14 << 8;
      v20[1] = v43;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 << 8;
      v45 = v36[1] << 8;
      *v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = *v14 << 8;
        v50 = v14[1] << 8;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 << 8;
        v57 = v47[1] << 8;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v19);
        *v58 = v56;
        v58[1] = v57;
      }
      v14 += v13;
      v20 += v19;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v14;
      v61 = v14[1];
      v14 += 2;
      *v20 = v60 << 8;
      v20[1] = v61 << 8;
      v20 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v14;
        v64 = v14[1];
        v14 += 2;
        *v20 = v63 << 8;
        v20[1] = v64 << 8;
        v20 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      v66 = *v14 << 8;
      v67 = v14[1] << 8;
      *v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t j;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  _WORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  _WORD *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  _WORD *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v20 = a6[2];
  v19 = a6[3];
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v20)
    v23 = v20;
  if (v13 - v12 + v14 >= v19)
    v24 = v19;
  else
    v24 = v13 - v12 + v14;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a8;
    v30 = v27 + (v9 & 0xFFFFFFFE) + v28;
    v31 = *a7 + *a8 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v33 = *(unsigned __int8 *)(v30 + i);
          if (v33 >= 0xEB)
            v33 = 235;
          if (v33 <= 0x10)
            v33 = 16;
          *(_WORD *)(v31 + 2 * i) = (-1048560 - v33 + (v33 << 16)) / 0xDB;
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  v34 = v8 & 1;
  v35 = (v24 - v34) >> 1;
  if (v24 >> 1 < v35)
    v35 = v24 >> 1;
  v36 = v9;
  v37 = v23 >> 1;
  v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1)
    v37 = (v23 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = *v16;
      v47 = v16[1];
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        v46 = 16;
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v48 = 16;
      else
        v48 = v47;
      v39 = v16 + 2;
      *v22 = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32;
      v40 = v22 + 2;
      if (v37)
        goto LABEL_26;
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (v37)
      {
LABEL_26:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39;
          v43 = v39[1];
          if (v42 >= 0xF0)
            v42 = 240;
          if (v42 <= 0x10)
            v42 = 16;
          if (v43 >= 0xF0)
            v43 = 240;
          if (v43 <= 0x10)
            v43 = 16;
          v39 += 2;
          *v40 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
          v40[1] = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_49;
      }
    }
    v45 = 0;
LABEL_49:
    if ((v45 | (unint64_t)v38) < v23)
    {
      v49 = *v39;
      v50 = v39[1];
      if (v49 >= 0xF0)
        v49 = 240;
      if (v49 <= 0x10)
        v49 = 16;
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      *v40 = (613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32;
      v40[1] = (613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32;
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v52 = v16;
      v53 = v22;
      if ((v36 & 1) != 0)
      {
        v54 = *v16;
        v55 = v16[1];
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v54 = 16;
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        v52 = v16 + 2;
        v57 = (613566757 * (unint64_t)((-1048560 - v54 + (v54 << 16)) >> 5)) >> 32;
        v58 = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
        *v22 = v57;
        v22[1] = v58;
        v59 = (_WORD *)((char *)v22 + v21);
        *v59 = v57;
        v59[1] = v58;
        v53 = v22 + 2;
      }
      if (v37)
      {
        v60 = -(uint64_t)v37;
        do
        {
          v61 = *v52;
          v62 = v52[1];
          if (v61 >= 0xF0)
            v61 = 240;
          if (v61 <= 0x10)
            v61 = 16;
          if (v62 >= 0xF0)
            v62 = 240;
          if (v62 <= 0x10)
            v62 = 16;
          v63 = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
          *v53 = v63;
          v64 = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
          v53[1] = v64;
          v53[2] = v63;
          v53[3] = v64;
          v65 = (_WORD *)((char *)v53 + v21);
          *v65 = v63;
          v65[1] = v64;
          v52 += 2;
          v65[2] = v63;
          v65[3] = v64;
          v53 += 4;
          v44 = __CFADD__(v60++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        v66 = *v52;
        v67 = v52[1];
        if (v66 >= 0xF0)
          v66 = 240;
        if (v66 <= 0x10)
          v66 = 16;
        if (v67 >= 0xF0)
          v67 = 240;
        if (v67 <= 0x10)
          v67 = 16;
        v68 = (613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32;
        v69 = (613566757 * (unint64_t)((-1048560 - v67 + (v67 << 16)) >> 5)) >> 32;
        *v53 = v68;
        v53[1] = v69;
        v70 = (_WORD *)((char *)v53 + v21);
        *v70 = v68;
        v70[1] = v69;
      }
      v16 += v15;
      v22 += v21;
    }
    v71 = 2 * v35;
  }
  else
  {
    v71 = 0;
  }
  if ((v71 | (unint64_t)v34) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v72 = *v16;
      v73 = v16[1];
      if (v72 >= 0xF0)
        v72 = 240;
      if (v72 <= 0x10)
        v72 = 16;
      if (v73 >= 0xF0)
        v73 = 240;
      if (v73 <= 0x10)
        v73 = 16;
      v16 += 2;
      *v22 = (613566757 * (unint64_t)((-1048560 - v72 + (v72 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v73 + (v73 << 16)) >> 5)) >> 32;
      v22 += 2;
    }
    if (v37)
    {
      v74 = -(uint64_t)v37;
      do
      {
        v75 = *v16;
        v76 = v16[1];
        if (v75 >= 0xF0)
          v75 = 240;
        if (v75 <= 0x10)
          v75 = 16;
        if (v76 >= 0xF0)
          v76 = 240;
        if (v76 <= 0x10)
          v76 = 16;
        v16 += 2;
        *v22 = (613566757 * (unint64_t)((-1048560 - v75 + (v75 << 16)) >> 5)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1048560 - v76 + (v76 << 16)) >> 5)) >> 32;
        v22 += 2;
        v44 = __CFADD__(v74++, 1);
      }
      while (!v44);
      v37 *= 2;
    }
    if ((v37 | v38) < v23)
    {
      v77 = *v16;
      v78 = v16[1];
      if (v77 >= 0xF0)
        v77 = 240;
      if (v77 <= 0x10)
        v77 = 16;
      if (v78 >= 0xF0)
        v78 = 240;
      if (v78 <= 0x10)
        v78 = 16;
      *v22 = (613566757 * (unint64_t)((-1048560 - v77 + (v77 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v78 + (v78 << 16)) >> 5)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  BOOL v47;
  uint64_t j;
  unsigned __int8 *v49;
  _WORD *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = v27;
    v30 = v9 + v8 + v29;
    v31 = *a8;
    v32 = a8[2];
    v33 = v28 + v30;
    v34 = a7[2] + v32 * v19 + v20;
    v35 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = -1;
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v33 + i) << 8;
        }
      }
      v33 += v27;
      v35 += v31;
      v34 += v32;
      ++v26;
    }
    while (v26 != v25);
  }
  v37 = v11 & 1;
  if (v25 >> 1 >= (v25 - v37) >> 1)
    v38 = (v25 - (v11 & 1)) >> 1;
  else
    v38 = v25 >> 1;
  v39 = v8;
  v40 = v24 >> 1;
  v41 = (v24 - v9) >> 1;
  if (v40 >= v41)
    v40 = v41;
  if ((v11 & 1) != 0)
  {
    if ((v39 & 1) != 0)
    {
      v42 = v15 + 2;
      v44 = v15[1] << 8;
      *v22 = *v15 << 8;
      v22[1] = v44;
      v43 = v22 + 2;
      if (!v40)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v42 = v15;
      v43 = v22;
      if (!v40)
        goto LABEL_27;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v46 = v42[1] << 8;
      *v43 = *v42 << 8;
      v43[1] = v46;
      v42 += 2;
      v43 += 2;
      v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v49 = v15;
      v50 = v22;
      if ((v39 & 1) != 0)
      {
        v49 = v15 + 2;
        v51 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v51;
        v50 = v22 + 2;
      }
      if (v40)
      {
        v52 = -(uint64_t)v40;
        do
        {
          v53 = *v49 << 8;
          v54 = v49[1] << 8;
          *v50 = v53;
          v50[1] = v54;
          v55 = (_WORD *)((char *)v50 + v21);
          *v55 = v53;
          v55[1] = v54;
          v50 += 2;
          v49 += 2;
          v47 = __CFADD__(v52++, 1);
        }
        while (!v47);
      }
      v15 += v14;
      v22 += v21;
    }
    v56 = 2 * v38;
  }
  else
  {
    v56 = 0;
  }
  if ((v56 | (unint64_t)v37) < v25)
  {
    if ((v39 & 1) != 0)
    {
      v57 = *v15;
      v58 = v15[1];
      v15 += 2;
      *v22 = v57 << 8;
      v22[1] = v58 << 8;
      v22 += 2;
    }
    if (v40)
    {
      v59 = -(uint64_t)v40;
      do
      {
        v60 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v60;
        v15 += 2;
        v22 += 2;
        v47 = __CFADD__(v59++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v15 + 2;
      v41 = v15[1] << 8;
      *v22 = *v15 << 8;
      v22[1] = v41;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] << 8;
      *v40 = *v39 << 8;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v46 = v15 + 2;
        v48 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v48;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = *v46 << 8;
          v51 = v46[1] << 8;
          *v47 = v50;
          v47[1] = v51;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = v54 << 8;
      v22[1] = v55 << 8;
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t j;
  unsigned __int8 *v50;
  _WORD *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  _WORD *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a8;
    v31 = v28 + v9 + v8 + v29;
    v32 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v34 = *(unsigned __int8 *)(v31 + i);
          if (v34 >= 0xEB)
            v34 = 235;
          if (v34 <= 0x10)
            v34 = 16;
          *(_WORD *)(v32 + 2 * i) = (-1048560 - v34 + (v34 << 16)) / 0xDB;
        }
      }
      v31 += v27;
      v32 += v30;
      ++v26;
    }
    while (v26 != v25);
  }
  v35 = v11 & 1;
  if (v25 >> 1 >= (v25 - v35) >> 1)
    v36 = (v25 - (v11 & 1)) >> 1;
  else
    v36 = v25 >> 1;
  v37 = v8;
  v38 = v24 >> 1;
  if (v24 >> 1 >= (v24 - v9) >> 1)
    v38 = (v24 - v9) >> 1;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v41 = *v15;
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      if (v15[1] >= 0xF0u)
        v43 = 240;
      else
        v43 = v15[1];
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      v39 = v15 + 2;
      *v22 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      v40 = v22 + 2;
      if (!v38)
        goto LABEL_50;
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v38)
      {
LABEL_50:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_51;
      }
    }
    v45 = -(uint64_t)v38;
    do
    {
      v46 = *v39;
      v47 = v39[1];
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        v46 = 16;
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      *v40 = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      v40[1] = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
      v39 += 2;
      v40 += 2;
      v48 = __CFADD__(v45++, 1);
    }
    while (!v48);
    goto LABEL_50;
  }
LABEL_51:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v50 = v15;
      v51 = v22;
      if ((v37 & 1) != 0)
      {
        v52 = *v15;
        if (v52 >= 0xF0)
          v52 = 240;
        if (v52 <= 0x10)
          v53 = 16;
        else
          v53 = v52;
        if (v15[1] >= 0xF0u)
          v54 = 240;
        else
          v54 = v15[1];
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        v50 = v15 + 2;
        *v22 = (613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        v51 = v22 + 2;
      }
      if (v38)
      {
        v56 = -(uint64_t)v38;
        do
        {
          v57 = *v50;
          v58 = v50[1];
          if (v57 >= 0xF0)
            v57 = 240;
          if (v57 <= 0x10)
            v57 = 16;
          if (v58 >= 0xF0)
            v58 = 240;
          if (v58 <= 0x10)
            v58 = 16;
          v59 = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
          v60 = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
          *v51 = v59;
          v51[1] = v60;
          v61 = (_WORD *)((char *)v51 + v21);
          *v61 = v59;
          v61[1] = v60;
          v51 += 2;
          v50 += 2;
          v48 = __CFADD__(v56++, 1);
        }
        while (!v48);
      }
      v15 += v14;
      v22 += v21;
    }
    v62 = 2 * v36;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | (unint64_t)v35) < v25)
  {
    if ((v37 & 1) != 0)
    {
      v63 = *v15;
      v64 = v15[1];
      if (v63 >= 0xF0)
        v63 = 240;
      if (v63 <= 0x10)
        v63 = 16;
      if (v64 >= 0xF0)
        v64 = 240;
      if (v64 <= 0x10)
        v64 = 16;
      v15 += 2;
      *v22 = (613566757 * (unint64_t)((-1048560 - v63 + (v63 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v64 + (v64 << 16)) >> 5)) >> 32;
      v22 += 2;
    }
    if (v38)
    {
      v65 = -(uint64_t)v38;
      do
      {
        v66 = *v15;
        v67 = v15[1];
        if (v66 >= 0xF0)
          v66 = 240;
        if (v66 <= 0x10)
          v66 = 16;
        if (v67 >= 0xF0)
          v67 = 240;
        if (v67 <= 0x10)
          v67 = 16;
        *v22 = (613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1048560 - v67 + (v67 << 16)) >> 5)) >> 32;
        v15 += 2;
        v22 += 2;
        v48 = __CFADD__(v65++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  BOOL v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - v12;
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 2;
      v42 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v42;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = v40[1] << 8;
      *v41 = *v40 << 8;
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = v47[1] << 8;
          *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  uint64_t j;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v9) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          *(_WORD *)(v33 + 2 * i) = (-1048560 - v35 + (v35 << 16)) / 0xDB;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v36 = v26 >> 1;
  v37 = v26 - v12;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  v39 = v25 - (v8 & 1);
  if (v25 >> 1 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v25 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v43 = *v16;
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      if (v16[1] >= 0xF0u)
        v45 = 240;
      else
        v45 = v16[1];
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      v41 = v16 + 2;
      *v23 = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      v42 = v23 + 2;
      if (!v40)
        goto LABEL_51;
    }
    else
    {
      v41 = v16;
      v42 = v23;
      if (!v40)
      {
LABEL_51:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    v47 = -(uint64_t)v40;
    do
    {
      v48 = *v41;
      v49 = v41[1];
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      if (v49 >= 0xF0)
        v49 = 240;
      if (v49 <= 0x10)
        v49 = 16;
      *v42 = (613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32;
      v42[1] = (613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32;
      v41 += 2;
      v42 += 2;
      v50 = __CFADD__(v47++, 1);
    }
    while (!v50);
    goto LABEL_51;
  }
LABEL_52:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v52 = v16;
      v53 = v23;
      if ((v8 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v16[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v16[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v16 + 2;
        *v23 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        v53 = v23 + 2;
      }
      if (v40)
      {
        v58 = -(uint64_t)v40;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          *v53 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
          v52 += 2;
          v53 += 2;
          v50 = __CFADD__(v58++, 1);
        }
        while (!v50);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  BOOL v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t j;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  __int16 v59;
  __int16 v60;
  _WORD *v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18)
    v22 = v18;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = a8[2];
    v30 = v25 + v27;
    v31 = a7[2] + v29 * v16 + 2 * v15;
    v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  v34 = v8 & 1;
  v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35)
    v35 = v22 >> 1;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1)
    v37 = (v21 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v46 = v14[1] << 8;
      *v20 = *v14 << 8;
      v20[1] = v46;
      v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39;
          v43 = v39[1];
          v39 += 2;
          *v40 = v42 << 8;
          v40[1] = v43 << 8;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      v47 = *v39 << 8;
      v48 = v39[1] << 8;
      *v40 = v47;
      v40[1] = v48;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v14;
      v51 = v20;
      if ((v36 & 1) != 0)
      {
        v50 = v14 + 2;
        v52 = *v14 << 8;
        v53 = v14[1] << 8;
        *v20 = v52;
        v20[1] = v53;
        v54 = (_WORD *)((char *)v20 + v19);
        *v54 = v52;
        v54[1] = v53;
        v51 = v20 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = *v50;
          v57 = v50[1];
          v50 += 2;
          v56 <<= 8;
          v57 <<= 8;
          *v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          v58 = (_WORD *)((char *)v51 + v19);
          *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        v59 = *v50 << 8;
        v60 = v50[1] << 8;
        *v51 = v59;
        v51[1] = v60;
        v61 = (_WORD *)((char *)v51 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 += v13;
      v20 += v19;
    }
    v62 = 2 * v35;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if ((v36 & 1) != 0)
    {
      v63 = *v14;
      v64 = v14[1];
      v14 += 2;
      *v20 = v63 << 8;
      v20[1] = v64 << 8;
      v20 += 2;
    }
    if (v37)
    {
      v65 = -(uint64_t)v37;
      do
      {
        v66 = *v14;
        v67 = v14[1];
        v14 += 2;
        *v20 = v66 << 8;
        v20[1] = v67 << 8;
        v20 += 2;
        v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      v68 = 2 * v37;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      v69 = *v14 << 8;
      v70 = v14[1] << 8;
      *v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v43 = v14[1] << 8;
      *v20 = *v14 << 8;
      v20[1] = v43;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 << 8;
      v45 = v36[1] << 8;
      *v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = *v14 << 8;
        v50 = v14[1] << 8;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 << 8;
        v57 = v47[1] << 8;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v19);
        *v58 = v56;
        v58[1] = v57;
      }
      v14 += v13;
      v20 += v19;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v14;
      v61 = v14[1];
      v14 += 2;
      *v20 = v60 << 8;
      v20[1] = v61 << 8;
      v20 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v14;
        v64 = v14[1];
        v14 += 2;
        *v20 = v63 << 8;
        v20[1] = v64 << 8;
        v20 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      v66 = *v14 << 8;
      v67 = v14[1] << 8;
      *v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t j;
  unsigned __int8 *v49;
  _WORD *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  _WORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  _WORD *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  _WORD *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v31 = *(unsigned __int8 *)(v28 + i);
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *(_WORD *)(v29 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)
                                                  + ((4095 * v31
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = *v14;
      v44 = v14[1];
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v43 = 16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v36 = v14 + 2;
      *v20 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v37 = v20 + 2;
      if (v34)
        goto LABEL_26;
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
      {
LABEL_26:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          if (v39 >= 0xF0)
            v39 = 240;
          if (v39 <= 0x10)
            v39 = 16;
          if (v40 >= 0xF0)
            v40 = 240;
          if (v40 <= 0x10)
            v40 = 16;
          v36 += 2;
          *v37 = 16 * ((613566757 * (unint64_t)((4095 * v39 - 65520) >> 5)) >> 32);
          v37[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_49;
      }
    }
    v42 = 0;
LABEL_49:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v46 = *v36;
      v47 = v36[1];
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        v46 = 16;
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      *v37 = 16 * ((613566757 * (unint64_t)((4095 * v46 - 65520) >> 5)) >> 32);
      v37[1] = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v49 = v14;
      v50 = v20;
      if ((v33 & 1) != 0)
      {
        v51 = *v14;
        v52 = v14[1];
        if (v51 >= 0xF0)
          v51 = 240;
        if (v51 <= 0x10)
          v51 = 16;
        if (v52 >= 0xF0)
          v52 = 240;
        if (v52 <= 0x10)
          v53 = 16;
        else
          v53 = v52;
        v49 = v14 + 2;
        v54 = 16 * ((613566757 * (unint64_t)((4095 * v51 - 65520) >> 5)) >> 32);
        *v20 = v54;
        v55 = 16 * ((613566757 * (unint64_t)((4095 * v53 - 65520) >> 5)) >> 32);
        v20[1] = v55;
        v56 = (_WORD *)((char *)v20 + v19);
        *v56 = v54;
        v56[1] = v55;
        v50 = v20 + 2;
      }
      if (v34)
      {
        v57 = -(uint64_t)v34;
        do
        {
          v58 = *v49;
          v59 = v49[1];
          if (v58 >= 0xF0)
            v58 = 240;
          if (v58 <= 0x10)
            v58 = 16;
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          v60 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
          *v50 = v60;
          v61 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v50[1] = v61;
          v50[2] = v60;
          v50[3] = v61;
          v62 = (_WORD *)((char *)v50 + v19);
          *v62 = v60;
          v62[1] = v61;
          v49 += 2;
          v62[2] = v60;
          v62[3] = v61;
          v50 += 4;
          v41 = __CFADD__(v57++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v63 = *v49;
        v64 = v49[1];
        if (v63 >= 0xF0)
          v63 = 240;
        if (v63 <= 0x10)
          v63 = 16;
        if (v64 >= 0xF0)
          v64 = 240;
        if (v64 <= 0x10)
          v64 = 16;
        v65 = 16 * ((613566757 * (unint64_t)((4095 * v63 - 65520) >> 5)) >> 32);
        *v50 = v65;
        v66 = 16 * ((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32);
        v50[1] = v66;
        v67 = (_WORD *)((char *)v50 + v19);
        *v67 = v65;
        v67[1] = v66;
      }
      v14 += v13;
      v20 += v19;
    }
    v68 = 2 * v32;
  }
  else
  {
    v68 = 0;
  }
  if ((v68 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF0)
        v69 = 240;
      if (v69 <= 0x10)
        v69 = 16;
      if (v70 >= 0xF0)
        v70 = 240;
      if (v70 <= 0x10)
        v70 = 16;
      v14 += 2;
      *v20 = 16 * ((613566757 * (unint64_t)((4095 * v69 - 65520) >> 5)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v70 - 65520) >> 5)) >> 32);
      v20 += 2;
    }
    if (v34)
    {
      v71 = -(uint64_t)v34;
      do
      {
        v72 = *v14;
        v73 = v14[1];
        if (v72 >= 0xF0)
          v72 = 240;
        if (v72 <= 0x10)
          v72 = 16;
        if (v73 >= 0xF0)
          v73 = 240;
        if (v73 <= 0x10)
          v73 = 16;
        v14 += 2;
        *v20 = 16 * ((613566757 * (unint64_t)((4095 * v72 - 65520) >> 5)) >> 32);
        v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v73 - 65520) >> 5)) >> 32);
        v20 += 2;
        v41 = __CFADD__(v71++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      v74 = *v14;
      v75 = v14[1];
      if (v74 >= 0xF0)
        v74 = 240;
      if (v74 <= 0x10)
        v74 = 16;
      if (v75 >= 0xF0)
        v75 = 240;
      if (v75 <= 0x10)
        v75 = 16;
      *v20 = 16 * ((613566757 * (unint64_t)((4095 * v74 - 65520) >> 5)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v75 - 65520) >> 5)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  BOOL v47;
  uint64_t j;
  unsigned __int8 *v49;
  _WORD *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = v27;
    v30 = v9 + v8 + v29;
    v31 = *a8;
    v32 = a8[2];
    v33 = v28 + v30;
    v34 = a7[2] + v32 * v19 + v20;
    v35 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = -1;
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v33 + i) << 8;
        }
      }
      v33 += v27;
      v35 += v31;
      v34 += v32;
      ++v26;
    }
    while (v26 != v25);
  }
  v37 = v11 & 1;
  if (v25 >> 1 >= (v25 - v37) >> 1)
    v38 = (v25 - (v11 & 1)) >> 1;
  else
    v38 = v25 >> 1;
  v39 = v8;
  v40 = v24 >> 1;
  v41 = (v24 - v9) >> 1;
  if (v40 >= v41)
    v40 = v41;
  if ((v11 & 1) != 0)
  {
    if ((v39 & 1) != 0)
    {
      v42 = v15 + 2;
      v44 = v15[1] << 8;
      *v22 = *v15 << 8;
      v22[1] = v44;
      v43 = v22 + 2;
      if (!v40)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v42 = v15;
      v43 = v22;
      if (!v40)
        goto LABEL_27;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v46 = v42[1] << 8;
      *v43 = *v42 << 8;
      v43[1] = v46;
      v42 += 2;
      v43 += 2;
      v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v49 = v15;
      v50 = v22;
      if ((v39 & 1) != 0)
      {
        v49 = v15 + 2;
        v51 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v51;
        v50 = v22 + 2;
      }
      if (v40)
      {
        v52 = -(uint64_t)v40;
        do
        {
          v53 = *v49 << 8;
          v54 = v49[1] << 8;
          *v50 = v53;
          v50[1] = v54;
          v55 = (_WORD *)((char *)v50 + v21);
          *v55 = v53;
          v55[1] = v54;
          v50 += 2;
          v49 += 2;
          v47 = __CFADD__(v52++, 1);
        }
        while (!v47);
      }
      v15 += v14;
      v22 += v21;
    }
    v56 = 2 * v38;
  }
  else
  {
    v56 = 0;
  }
  if ((v56 | (unint64_t)v37) < v25)
  {
    if ((v39 & 1) != 0)
    {
      v57 = *v15;
      v58 = v15[1];
      v15 += 2;
      *v22 = v57 << 8;
      v22[1] = v58 << 8;
      v22 += 2;
    }
    if (v40)
    {
      v59 = -(uint64_t)v40;
      do
      {
        v60 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v60;
        v15 += 2;
        v22 += 2;
        v47 = __CFADD__(v59++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v15 + 2;
      v41 = v15[1] << 8;
      *v22 = *v15 << 8;
      v22[1] = v41;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] << 8;
      *v40 = *v39 << 8;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v46 = v15 + 2;
        v48 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v48;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = *v46 << 8;
          v51 = v46[1] << 8;
          *v47 = v50;
          v47[1] = v51;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = v54 << 8;
      v22[1] = v55 << 8;
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t j;
  unsigned __int8 *v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  _WORD *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v34 = *(unsigned __int8 *)(v31 + i);
          if (v34 >= 0xEB)
            v34 = 235;
          if (v34 <= 0x10)
            v34 = 16;
          *(_WORD *)(v32 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v34 - 65520)) >> 32)
                                                  + ((4095 * v34
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v34 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v35 = v11 & 1;
  if (v25 >> 1 >= (v25 - v35) >> 1)
    v36 = (v25 - (v11 & 1)) >> 1;
  else
    v36 = v25 >> 1;
  v37 = v8;
  v38 = v24 >> 1;
  v39 = (v24 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = *v15;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v15[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v15[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v40 = v15 + 2;
      *v22 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v41 = v22 + 2;
      if (!v38)
        goto LABEL_50;
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
      {
LABEL_50:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_51;
      }
    }
    v46 = -(uint64_t)v38;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      *v41 = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
      v41[1] = 16 * ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32);
      v40 += 2;
      v41 += 2;
      v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_50;
  }
LABEL_51:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v51 = v15;
      v52 = v22;
      if ((v37 & 1) != 0)
      {
        v53 = *v15;
        if (v53 >= 0xF0)
          v53 = 240;
        if (v53 <= 0x10)
          v54 = 16;
        else
          v54 = v53;
        if (v15[1] >= 0xF0u)
          v55 = 240;
        else
          v55 = v15[1];
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        v51 = v15 + 2;
        *v22 = 16 * ((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
        v52 = v22 + 2;
      }
      if (v38)
      {
        v57 = -(uint64_t)v38;
        do
        {
          v58 = *v51;
          v59 = v51[1];
          if (v58 >= 0xF0)
            v58 = 240;
          if (v58 <= 0x10)
            v58 = 16;
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          v60 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
          *v52 = v60;
          v61 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v52[1] = v61;
          v62 = (_WORD *)((char *)v52 + v21);
          *v62 = v60;
          v62[1] = v61;
          v52 += 2;
          v51 += 2;
          v49 = __CFADD__(v57++, 1);
        }
        while (!v49);
      }
      v15 += v14;
      v22 += v21;
    }
    v63 = 2 * v36;
  }
  else
  {
    v63 = 0;
  }
  if ((v63 | (unint64_t)v35) < v25)
  {
    if ((v37 & 1) != 0)
    {
      v64 = *v15;
      v65 = v15[1];
      if (v64 >= 0xF0)
        v64 = 240;
      if (v64 <= 0x10)
        v64 = 16;
      if (v65 >= 0xF0)
        v65 = 240;
      if (v65 <= 0x10)
        v65 = 16;
      v15 += 2;
      *v22 = 16 * ((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v65 - 65520) >> 5)) >> 32);
      v22 += 2;
    }
    if (v38)
    {
      v66 = -(uint64_t)v38;
      do
      {
        v67 = *v15;
        v68 = v15[1];
        if (v67 >= 0xF0)
          v67 = 240;
        if (v67 <= 0x10)
          v67 = 16;
        if (v68 >= 0xF0)
          v68 = 240;
        if (v68 <= 0x10)
          v68 = 16;
        *v22 = 16 * ((613566757 * (unint64_t)((4095 * v67 - 65520) >> 5)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32);
        v15 += 2;
        v22 += 2;
        v49 = __CFADD__(v66++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  BOOL v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - v12;
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 2;
      v42 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v42;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = v40[1] << 8;
      *v41 = *v40 << 8;
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = v47[1] << 8;
          *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t j;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = v13 >= v8;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + *a4 * v13;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v10 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                                  + ((4095 * v36
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  v37 = v26 >> 1;
  v38 = v26 - v12;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v25 - (v9 & 1);
  if (v25 >> 1 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v44 = *v16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      if (v16[1] >= 0xF0u)
        v46 = 240;
      else
        v46 = v16[1];
      if (v46 <= 0x10)
        v47 = 16;
      else
        v47 = v46;
      v42 = v16 + 2;
      *v23 = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
      v43 = v23 + 2;
      if (!v41)
        goto LABEL_51;
    }
    else
    {
      v42 = v16;
      v43 = v23;
      if (!v41)
      {
LABEL_51:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    v48 = -(uint64_t)v41;
    do
    {
      v49 = *v42;
      v50 = v42[1];
      if (v49 >= 0xF0)
        v49 = 240;
      if (v49 <= 0x10)
        v49 = 16;
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      *v43 = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
      v43[1] = 16 * ((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32);
      v42 += 2;
      v43 += 2;
      v28 = __CFADD__(v48++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v52 = v16;
      v53 = v23;
      if ((v9 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v16[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v16[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v16 + 2;
        *v23 = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
        v53 = v23 + 2;
      }
      if (v41)
      {
        v58 = -(uint64_t)v41;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          *v53 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v53[1] = 16 * ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32);
          v52 += 2;
          v53 += 2;
          v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  BOOL v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t j;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  __int16 v59;
  __int16 v60;
  _WORD *v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18)
    v22 = v18;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = a8[2];
    v30 = v25 + v27;
    v31 = a7[2] + v29 * v16 + 2 * v15;
    v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  v34 = v8 & 1;
  v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35)
    v35 = v22 >> 1;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1)
    v37 = (v21 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v46 = v14[1] << 8;
      *v20 = *v14 << 8;
      v20[1] = v46;
      v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39;
          v43 = v39[1];
          v39 += 2;
          *v40 = v42 << 8;
          v40[1] = v43 << 8;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      v47 = *v39 << 8;
      v48 = v39[1] << 8;
      *v40 = v47;
      v40[1] = v48;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v14;
      v51 = v20;
      if ((v36 & 1) != 0)
      {
        v50 = v14 + 2;
        v52 = *v14 << 8;
        v53 = v14[1] << 8;
        *v20 = v52;
        v20[1] = v53;
        v54 = (_WORD *)((char *)v20 + v19);
        *v54 = v52;
        v54[1] = v53;
        v51 = v20 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = *v50;
          v57 = v50[1];
          v50 += 2;
          v56 <<= 8;
          v57 <<= 8;
          *v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          v58 = (_WORD *)((char *)v51 + v19);
          *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        v59 = *v50 << 8;
        v60 = v50[1] << 8;
        *v51 = v59;
        v51[1] = v60;
        v61 = (_WORD *)((char *)v51 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 += v13;
      v20 += v19;
    }
    v62 = 2 * v35;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if ((v36 & 1) != 0)
    {
      v63 = *v14;
      v64 = v14[1];
      v14 += 2;
      *v20 = v63 << 8;
      v20[1] = v64 << 8;
      v20 += 2;
    }
    if (v37)
    {
      v65 = -(uint64_t)v37;
      do
      {
        v66 = *v14;
        v67 = v14[1];
        v14 += 2;
        *v20 = v66 << 8;
        v20[1] = v67 << 8;
        v20 += 2;
        v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      v68 = 2 * v37;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      v69 = *v14 << 8;
      v70 = v14[1] << 8;
      *v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v43 = v14[1] << 8;
      *v20 = *v14 << 8;
      v20[1] = v43;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 << 8;
      v45 = v36[1] << 8;
      *v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = *v14 << 8;
        v50 = v14[1] << 8;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 << 8;
        v57 = v47[1] << 8;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v19);
        *v58 = v56;
        v58[1] = v57;
      }
      v14 += v13;
      v20 += v19;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v14;
      v61 = v14[1];
      v14 += 2;
      *v20 = v60 << 8;
      v20[1] = v61 << 8;
      v20 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v14;
        v64 = v14[1];
        v14 += 2;
        *v20 = v63 << 8;
        v20[1] = v64 << 8;
        v20 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      v66 = *v14 << 8;
      v67 = v14[1] << 8;
      *v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t j;
  unsigned __int8 *v49;
  _WORD *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  _WORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  _WORD *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  _WORD *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v31 = *(unsigned __int8 *)(v28 + i);
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *(_WORD *)(v29 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)
                                                  + ((1023 * v31
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = *v14;
      v44 = v14[1];
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v43 = 16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v36 = v14 + 2;
      *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v37 = v20 + 2;
      if (v34)
        goto LABEL_26;
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
      {
LABEL_26:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          if (v39 >= 0xF0)
            v39 = 240;
          if (v39 <= 0x10)
            v39 = 16;
          if (v40 >= 0xF0)
            v40 = 240;
          if (v40 <= 0x10)
            v40 = 16;
          v36 += 2;
          *v37 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v39 - 16368) >> 5)) >> 32) << 6;
          v37[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_49;
      }
    }
    v42 = 0;
LABEL_49:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v46 = *v36;
      v47 = v36[1];
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        v46 = 16;
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      *v37 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 16368) >> 5)) >> 32) << 6;
      v37[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v49 = v14;
      v50 = v20;
      if ((v33 & 1) != 0)
      {
        v51 = *v14;
        v52 = v14[1];
        if (v51 >= 0xF0)
          v51 = 240;
        if (v51 <= 0x10)
          v51 = 16;
        if (v52 >= 0xF0)
          v52 = 240;
        if (v52 <= 0x10)
          v53 = 16;
        else
          v53 = v52;
        v49 = v14 + 2;
        v54 = (613566757 * (unint64_t)((1023 * v51 - 16368) >> 5)) >> 32 << 6;
        *v20 = v54;
        v55 = (613566757 * (unint64_t)((1023 * v53 - 16368) >> 5)) >> 32 << 6;
        v20[1] = v55;
        v56 = (_WORD *)((char *)v20 + v19);
        *v56 = v54;
        v56[1] = v55;
        v50 = v20 + 2;
      }
      if (v34)
      {
        v57 = -(uint64_t)v34;
        do
        {
          v58 = *v49;
          v59 = v49[1];
          if (v58 >= 0xF0)
            v58 = 240;
          if (v58 <= 0x10)
            v58 = 16;
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          v60 = (613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32 << 6;
          *v50 = v60;
          v61 = (613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32 << 6;
          v50[1] = v61;
          v50[2] = v60;
          v50[3] = v61;
          v62 = (_WORD *)((char *)v50 + v19);
          *v62 = v60;
          v62[1] = v61;
          v49 += 2;
          v62[2] = v60;
          v62[3] = v61;
          v50 += 4;
          v41 = __CFADD__(v57++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v63 = *v49;
        v64 = v49[1];
        if (v63 >= 0xF0)
          v63 = 240;
        if (v63 <= 0x10)
          v63 = 16;
        if (v64 >= 0xF0)
          v64 = 240;
        if (v64 <= 0x10)
          v64 = 16;
        v65 = (613566757 * (unint64_t)((1023 * v63 - 16368) >> 5)) >> 32 << 6;
        *v50 = v65;
        v66 = (613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32 << 6;
        v50[1] = v66;
        v67 = (_WORD *)((char *)v50 + v19);
        *v67 = v65;
        v67[1] = v66;
      }
      v14 += v13;
      v20 += v19;
    }
    v68 = 2 * v32;
  }
  else
  {
    v68 = 0;
  }
  if ((v68 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF0)
        v69 = 240;
      if (v69 <= 0x10)
        v69 = 16;
      if (v70 >= 0xF0)
        v70 = 240;
      if (v70 <= 0x10)
        v70 = 16;
      v14 += 2;
      *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v69 - 16368) >> 5)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32) << 6;
      v20 += 2;
    }
    if (v34)
    {
      v71 = -(uint64_t)v34;
      do
      {
        v72 = *v14;
        v73 = v14[1];
        if (v72 >= 0xF0)
          v72 = 240;
        if (v72 <= 0x10)
          v72 = 16;
        if (v73 >= 0xF0)
          v73 = 240;
        if (v73 <= 0x10)
          v73 = 16;
        v14 += 2;
        *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v72 - 16368) >> 5)) >> 32) << 6;
        v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v73 - 16368) >> 5)) >> 32) << 6;
        v20 += 2;
        v41 = __CFADD__(v71++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      v74 = *v14;
      v75 = v14[1];
      if (v74 >= 0xF0)
        v74 = 240;
      if (v74 <= 0x10)
        v74 = 16;
      if (v75 >= 0xF0)
        v75 = 240;
      if (v75 <= 0x10)
        v75 = 16;
      *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v74 - 16368) >> 5)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 16368) >> 5)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  BOOL v47;
  uint64_t j;
  unsigned __int8 *v49;
  _WORD *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = v27;
    v30 = v9 + v8 + v29;
    v31 = *a8;
    v32 = a8[2];
    v33 = v28 + v30;
    v34 = a7[2] + v32 * v19 + v20;
    v35 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = -1;
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v33 + i) << 8;
        }
      }
      v33 += v27;
      v35 += v31;
      v34 += v32;
      ++v26;
    }
    while (v26 != v25);
  }
  v37 = v11 & 1;
  if (v25 >> 1 >= (v25 - v37) >> 1)
    v38 = (v25 - (v11 & 1)) >> 1;
  else
    v38 = v25 >> 1;
  v39 = v8;
  v40 = v24 >> 1;
  v41 = (v24 - v9) >> 1;
  if (v40 >= v41)
    v40 = v41;
  if ((v11 & 1) != 0)
  {
    if ((v39 & 1) != 0)
    {
      v42 = v15 + 2;
      v44 = v15[1] << 8;
      *v22 = *v15 << 8;
      v22[1] = v44;
      v43 = v22 + 2;
      if (!v40)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v42 = v15;
      v43 = v22;
      if (!v40)
        goto LABEL_27;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v46 = v42[1] << 8;
      *v43 = *v42 << 8;
      v43[1] = v46;
      v42 += 2;
      v43 += 2;
      v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v49 = v15;
      v50 = v22;
      if ((v39 & 1) != 0)
      {
        v49 = v15 + 2;
        v51 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v51;
        v50 = v22 + 2;
      }
      if (v40)
      {
        v52 = -(uint64_t)v40;
        do
        {
          v53 = *v49 << 8;
          v54 = v49[1] << 8;
          *v50 = v53;
          v50[1] = v54;
          v55 = (_WORD *)((char *)v50 + v21);
          *v55 = v53;
          v55[1] = v54;
          v50 += 2;
          v49 += 2;
          v47 = __CFADD__(v52++, 1);
        }
        while (!v47);
      }
      v15 += v14;
      v22 += v21;
    }
    v56 = 2 * v38;
  }
  else
  {
    v56 = 0;
  }
  if ((v56 | (unint64_t)v37) < v25)
  {
    if ((v39 & 1) != 0)
    {
      v57 = *v15;
      v58 = v15[1];
      v15 += 2;
      *v22 = v57 << 8;
      v22[1] = v58 << 8;
      v22 += 2;
    }
    if (v40)
    {
      v59 = -(uint64_t)v40;
      do
      {
        v60 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v60;
        v15 += 2;
        v22 += 2;
        v47 = __CFADD__(v59++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v15 + 2;
      v41 = v15[1] << 8;
      *v22 = *v15 << 8;
      v22[1] = v41;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] << 8;
      *v40 = *v39 << 8;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v46 = v15 + 2;
        v48 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v48;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = *v46 << 8;
          v51 = v46[1] << 8;
          *v47 = v50;
          v47[1] = v51;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = v54 << 8;
      v22[1] = v55 << 8;
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = v15[1] << 8;
        *v22 = *v15 << 8;
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t j;
  unsigned __int8 *v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  _WORD *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v34 = *(unsigned __int8 *)(v31 + i);
          if (v34 >= 0xEB)
            v34 = 235;
          if (v34 <= 0x10)
            v34 = 16;
          *(_WORD *)(v32 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v34 - 16368)) >> 32)
                                                  + ((1023 * v34
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v34 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v35 = v11 & 1;
  if (v25 >> 1 >= (v25 - v35) >> 1)
    v36 = (v25 - (v11 & 1)) >> 1;
  else
    v36 = v25 >> 1;
  v37 = v8;
  v38 = v24 >> 1;
  v39 = (v24 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = *v15;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v15[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v15[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v40 = v15 + 2;
      *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v41 = v22 + 2;
      if (!v38)
        goto LABEL_50;
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
      {
LABEL_50:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_51;
      }
    }
    v46 = -(uint64_t)v38;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      *v41 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
      v41[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
      v40 += 2;
      v41 += 2;
      v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_50;
  }
LABEL_51:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v51 = v15;
      v52 = v22;
      if ((v37 & 1) != 0)
      {
        v53 = *v15;
        if (v53 >= 0xF0)
          v53 = 240;
        if (v53 <= 0x10)
          v54 = 16;
        else
          v54 = v53;
        if (v15[1] >= 0xF0u)
          v55 = 240;
        else
          v55 = v15[1];
        if (v55 <= 0x10)
          v56 = 16;
        else
          v56 = v55;
        v51 = v15 + 2;
        *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
        v52 = v22 + 2;
      }
      if (v38)
      {
        v57 = -(uint64_t)v38;
        do
        {
          v58 = *v51;
          v59 = v51[1];
          if (v58 >= 0xF0)
            v58 = 240;
          if (v58 <= 0x10)
            v58 = 16;
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          v60 = (613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32 << 6;
          *v52 = v60;
          v61 = (613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32 << 6;
          v52[1] = v61;
          v62 = (_WORD *)((char *)v52 + v21);
          *v62 = v60;
          v62[1] = v61;
          v52 += 2;
          v51 += 2;
          v49 = __CFADD__(v57++, 1);
        }
        while (!v49);
      }
      v15 += v14;
      v22 += v21;
    }
    v63 = 2 * v36;
  }
  else
  {
    v63 = 0;
  }
  if ((v63 | (unint64_t)v35) < v25)
  {
    if ((v37 & 1) != 0)
    {
      v64 = *v15;
      v65 = v15[1];
      if (v64 >= 0xF0)
        v64 = 240;
      if (v64 <= 0x10)
        v64 = 16;
      if (v65 >= 0xF0)
        v65 = 240;
      if (v65 <= 0x10)
        v65 = 16;
      v15 += 2;
      *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v65 - 16368) >> 5)) >> 32) << 6;
      v22 += 2;
    }
    if (v38)
    {
      v66 = -(uint64_t)v38;
      do
      {
        v67 = *v15;
        v68 = v15[1];
        if (v67 >= 0xF0)
          v67 = 240;
        if (v67 <= 0x10)
          v67 = 16;
        if (v68 >= 0xF0)
          v68 = 240;
        if (v68 <= 0x10)
          v68 = 16;
        *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v67 - 16368) >> 5)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32) << 6;
        v15 += 2;
        v22 += 2;
        v49 = __CFADD__(v66++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  BOOL v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - v12;
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 2;
      v42 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v42;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = v40[1] << 8;
      *v41 = *v40 << 8;
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = v47[1] << 8;
          *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t j;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = v13 >= v8;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + *a4 * v13;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v10 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                                  + ((1023 * v36
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  v37 = v26 >> 1;
  v38 = v26 - v12;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v25 - (v9 & 1);
  if (v25 >> 1 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v44 = *v16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      if (v16[1] >= 0xF0u)
        v46 = 240;
      else
        v46 = v16[1];
      if (v46 <= 0x10)
        v47 = 16;
      else
        v47 = v46;
      v42 = v16 + 2;
      *v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
      v43 = v23 + 2;
      if (!v41)
        goto LABEL_51;
    }
    else
    {
      v42 = v16;
      v43 = v23;
      if (!v41)
      {
LABEL_51:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    v48 = -(uint64_t)v41;
    do
    {
      v49 = *v42;
      v50 = v42[1];
      if (v49 >= 0xF0)
        v49 = 240;
      if (v49 <= 0x10)
        v49 = 16;
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      *v43 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
      v43[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32) << 6;
      v42 += 2;
      v43 += 2;
      v28 = __CFADD__(v48++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v52 = v16;
      v53 = v23;
      if ((v9 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v16[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v16[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v16 + 2;
        *v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
        v53 = v23 + 2;
      }
      if (v41)
      {
        v58 = -(uint64_t)v41;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          *v53 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
          v53[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32) << 6;
          v52 += 2;
          v53 += 2;
          v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  size_t v35;
  uint64_t v36;
  __int16 *v37;
  _WORD *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t i;
  char *v43;
  _BYTE *v44;
  char v45;
  char v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  char v50;
  _BYTE *v51;
  char v52;
  char v53;
  _BYTE *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = (char *)(a3[1] + v12 * (v9 >> 1) + (v8 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[2];
  v17 = a6[3];
  v18 = a8[1];
  v19 = a7[1] + v18 * v15 + 2 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v16)
    v20 = v16;
  else
    v20 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v17)
    v21 = v17;
  else
    v21 = v11 - v10 + (v11 & 1);
  if (v21)
  {
    v60 = a8[1];
    v61 = v21;
    v62 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = a8[2];
    v25 = *a3 + *a4 * v10;
    if (v10 >= v9)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (char *)(v25 + (a2[4] & 0xFFFFFFFELL) + v26);
    v28 = (char *)(a7[2] + v24 * v15 + v14);
    v29 = (char *)(*a7 + v23 * v15 + v14);
    v30 = -(uint64_t)v21;
    do
    {
      memcpy(v29, v27, v20);
      memset(v28, 255, v20);
      v27 += v22;
      v29 += v23;
      v28 += v24;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v18 = v60;
    v8 = a2[4];
    v9 = a2[5];
    v21 = v61;
    v12 = v62;
  }
  v32 = v9 & 1;
  v33 = (v21 - v32) >> 1;
  if (v21 >> 1 < v33)
    v33 = v21 >> 1;
  v34 = v8;
  v35 = v20 >> 1;
  v36 = v8 & 1;
  if (v20 >> 1 >= (v20 - v36) >> 1)
    v35 = (v20 - v36) >> 1;
  if ((v9 & 1) != 0)
  {
    v37 = (__int16 *)v13;
    if ((v34 & 1) != 0)
    {
      v37 = (__int16 *)(v13 + 2);
      *(_WORD *)v19 = *(_WORD *)v13;
      v38 = (_WORD *)(v19 + 2);
      if (v35)
      {
LABEL_22:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37++;
          *v38++ = v40;
          v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
        v41 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      v38 = (_WORD *)v19;
      if (v35)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v36) < v20)
      *v38 = *v37;
    v13 += v12;
    v19 += v18;
  }
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v43 = v13;
      v44 = (_BYTE *)v19;
      if ((v34 & 1) != 0)
      {
        v45 = *v13;
        v46 = v13[1];
        v43 = v13 + 2;
        *(_BYTE *)v19 = *v13;
        *(_BYTE *)(v19 + 1) = v46;
        v47 = (_BYTE *)(v19 + v18);
        *v47 = v45;
        v47[1] = v46;
        v44 = (_BYTE *)(v19 + 2);
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = *v43;
          v50 = v43[1];
          v43 += 2;
          *v44 = v49;
          v44[1] = v50;
          v44[2] = v49;
          v44[3] = v50;
          v51 = &v44[v18 + 1];
          *(v51 - 1) = v49;
          *v51 = v50;
          v51[1] = v49;
          v51[2] = v50;
          v44 += 4;
          v31 = __CFADD__(v48++, 1);
        }
        while (!v31);
      }
      if ((v36 | (2 * v35)) < v20)
      {
        v52 = *v43;
        v53 = v43[1];
        *v44 = v52;
        v44[1] = v53;
        v54 = &v44[v18];
        *v54 = v52;
        v54[1] = v53;
      }
      v13 += v12;
      v19 += 2 * v18;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v21)
  {
    if ((v34 & 1) != 0)
    {
      v55 = *(_WORD *)v13;
      v13 += 2;
      *(_WORD *)v19 = v55;
      v19 += 2;
    }
    if (v35)
    {
      v56 = -(uint64_t)v35;
      do
      {
        v57 = *(_WORD *)v13;
        v13 += 2;
        *(_WORD *)v19 = v57;
        v19 += 2;
        v31 = __CFADD__(v56++, 1);
      }
      while (!v31);
      v35 *= 2;
    }
    if ((v35 | v36) < v20)
      *(_WORD *)v19 = *(_WORD *)v13;
  }
  return 0;
}

uint64_t vt_Copy_420v_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  size_t v33;
  uint64_t v34;
  __int16 *v35;
  _WORD *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t i;
  char *v41;
  _BYTE *v42;
  char v43;
  char v44;
  _BYTE *v45;
  uint64_t v46;
  char v47;
  char v48;
  _BYTE *v49;
  char v50;
  char v51;
  _BYTE *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  unint64_t v58;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = (char *)(a3[1] + v12 * (v9 >> 1) + (v8 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[2];
  v17 = a6[3];
  v18 = a8[1];
  v19 = a7[1] + v18 * v15 + 2 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v16)
    v20 = v16;
  else
    v20 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v17)
    v21 = v17;
  else
    v21 = v11 - v10 + (v11 & 1);
  if (v21)
  {
    v58 = v21;
    v22 = *a4;
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v9)
      v25 = 0;
    else
      v25 = *a4;
    v26 = (char *)(v24 + (a2[4] & 0xFFFFFFFELL) + v25);
    v27 = (char *)(*a7 + v23 * v15 + v14);
    v28 = -(uint64_t)v21;
    do
    {
      memcpy(v27, v26, v20);
      v26 += v22;
      v27 += v23;
      v29 = __CFADD__(v28++, 1);
    }
    while (!v29);
    v21 = v58;
    v8 = a2[4];
    v9 = a2[5];
  }
  v30 = v9 & 1;
  v31 = (v21 - v30) >> 1;
  if (v21 >> 1 < v31)
    v31 = v21 >> 1;
  v32 = v8;
  v33 = v20 >> 1;
  v34 = v8 & 1;
  if (v20 >> 1 >= (v20 - v34) >> 1)
    v33 = (v20 - v34) >> 1;
  if ((v9 & 1) != 0)
  {
    v35 = (__int16 *)v13;
    if ((v32 & 1) != 0)
    {
      v35 = (__int16 *)(v13 + 2);
      *(_WORD *)v19 = *(_WORD *)v13;
      v36 = (_WORD *)(v19 + 2);
      if (v33)
      {
LABEL_22:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35++;
          *v36++ = v38;
          v29 = __CFADD__(v37++, 1);
        }
        while (!v29);
        v39 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = (_WORD *)v19;
      if (v33)
        goto LABEL_22;
    }
    v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v34) < v20)
      *v36 = *v35;
    v13 += v12;
    v19 += v18;
  }
  if (v31)
  {
    for (i = 0; i != v31; ++i)
    {
      v41 = v13;
      v42 = (_BYTE *)v19;
      if ((v32 & 1) != 0)
      {
        v43 = *v13;
        v44 = v13[1];
        v41 = v13 + 2;
        *(_BYTE *)v19 = *v13;
        *(_BYTE *)(v19 + 1) = v44;
        v45 = (_BYTE *)(v19 + v18);
        *v45 = v43;
        v45[1] = v44;
        v42 = (_BYTE *)(v19 + 2);
      }
      if (v33)
      {
        v46 = -(uint64_t)v33;
        do
        {
          v47 = *v41;
          v48 = v41[1];
          v41 += 2;
          *v42 = v47;
          v42[1] = v48;
          v42[2] = v47;
          v42[3] = v48;
          v49 = &v42[v18 + 1];
          *(v49 - 1) = v47;
          *v49 = v48;
          v49[1] = v47;
          v49[2] = v48;
          v42 += 4;
          v29 = __CFADD__(v46++, 1);
        }
        while (!v29);
      }
      if ((v34 | (2 * v33)) < v20)
      {
        v50 = *v41;
        v51 = v41[1];
        *v42 = v50;
        v42[1] = v51;
        v52 = &v42[v18];
        *v52 = v50;
        v52[1] = v51;
      }
      v13 += v12;
      v19 += 2 * v18;
    }
    v31 *= 2;
  }
  if ((v31 | v30) < v21)
  {
    if ((v32 & 1) != 0)
    {
      v53 = *(_WORD *)v13;
      v13 += 2;
      *(_WORD *)v19 = v53;
      v19 += 2;
    }
    if (v33)
    {
      v54 = -(uint64_t)v33;
      do
      {
        v55 = *(_WORD *)v13;
        v13 += 2;
        *(_WORD *)v19 = v55;
        v19 += 2;
        v29 = __CFADD__(v54++, 1);
      }
      while (!v29);
      v33 *= 2;
    }
    if ((v33 | v34) < v20)
      *(_WORD *)v19 = *(_WORD *)v13;
  }
  return 0;
}

uint64_t vt_Copy_420v_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  __int16 v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t j;
  unsigned __int8 *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  __int16 v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = v10 >= v8;
    v23 = *a4;
    v24 = *a8;
    v25 = *a3 + *a4 * v10;
    if (v22)
      v26 = 0;
    else
      v26 = *a4;
    v27 = v25 + (a2[4] & 0xFFFFFFFELL) + v26;
    v28 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          v30 = *(unsigned __int8 *)(v27 + i);
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *(_BYTE *)(v28 + i) = (((255 * v30
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v30 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v30 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v31 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v31)
    v31 = v20 >> 1;
  v32 = v9;
  v33 = v19 >> 1;
  v34 = v9 & 1;
  if (v19 >> 1 >= (v19 - v34) >> 1)
    v33 = (v19 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v41 = *v12;
      v42 = v12[1];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        LOWORD(v41) = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      v35 = v12 + 2;
      *v18 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      v36 = v18 + 2;
      if (v33)
        goto LABEL_26;
    }
    else
    {
      v35 = v12;
      v36 = v18;
      if (v33)
      {
LABEL_26:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35;
          v39 = v35[1];
          if (v38 >= 0xF0)
            v38 = 240;
          if (v38 <= 0x10)
            LOWORD(v38) = 16;
          if (v39 >= 0xF0)
            v39 = 240;
          if (v39 <= 0x10)
            LOWORD(v39) = 16;
          v35 += 2;
          *v36 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
          v36[1] = (9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16;
          v36 += 2;
          v22 = __CFADD__(v37++, 1);
        }
        while (!v22);
        v40 = 2 * v33;
        goto LABEL_49;
      }
    }
    v40 = 0;
LABEL_49:
    if ((v40 | (unint64_t)v34) < v19)
    {
      v44 = *v35;
      v45 = v35[1];
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        LOWORD(v44) = 16;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        LOWORD(v45) = 16;
      *v36 = (9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16;
      v36[1] = (9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v47 = v12;
      v48 = v18;
      if ((v32 & 1) != 0)
      {
        v49 = *v12;
        v50 = v12[1];
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          LOWORD(v49) = 16;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v51 = 16;
        else
          v51 = v50;
        v47 = v12 + 2;
        v52 = (9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16;
        v53 = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
        *v18 = v52;
        v18[1] = v53;
        v54 = &v18[v17];
        *v54 = v52;
        v54[1] = v53;
        v48 = v18 + 2;
      }
      if (v33)
      {
        v55 = -(uint64_t)v33;
        do
        {
          v56 = *v47;
          v57 = v47[1];
          if (v56 >= 0xF0)
            v56 = 240;
          if (v56 <= 0x10)
            LOWORD(v56) = 16;
          if (v57 >= 0xF0)
            v57 = 240;
          if (v57 <= 0x10)
            LOWORD(v57) = 16;
          v58 = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
          *v48 = v58;
          v59 = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
          v48[1] = v59;
          v48[2] = v58;
          v48[3] = v59;
          v60 = &v48[v17 + 1];
          *(v60 - 1) = v58;
          *v60 = v59;
          v47 += 2;
          v60[1] = v58;
          v60[2] = v59;
          v48 += 4;
          v22 = __CFADD__(v55++, 1);
        }
        while (!v22);
      }
      if ((v34 | (2 * v33)) < v19)
      {
        v61 = *v47;
        v62 = v47[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          LOWORD(v61) = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          LOWORD(v62) = 16;
        v63 = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        v64 = (9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16;
        *v48 = v63;
        v48[1] = v64;
        v65 = &v48[v17];
        *v65 = v63;
        v65[1] = v64;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    v66 = 2 * v31;
  }
  else
  {
    v66 = 0;
  }
  if ((v66 | v8 & 1) < v20)
  {
    if ((v32 & 1) != 0)
    {
      v67 = *v12;
      v68 = v12[1];
      if (v67 >= 0xF0)
        v67 = 240;
      if (v67 <= 0x10)
        LOWORD(v67) = 16;
      if (v68 >= 0xF0)
        v68 = 240;
      if (v68 <= 0x10)
        LOWORD(v68) = 16;
      v12 += 2;
      *v18 = (9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v68 - 4080) >> 5)) >> 16;
      v18 += 2;
    }
    if (v33)
    {
      v69 = -(uint64_t)v33;
      do
      {
        v70 = *v12;
        v71 = v12[1];
        if (v70 >= 0xF0)
          v70 = 240;
        if (v70 <= 0x10)
          LOWORD(v70) = 16;
        if (v71 >= 0xF0)
          v71 = 240;
        if (v71 <= 0x10)
          LOWORD(v71) = 16;
        v12 += 2;
        *v18 = (9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16;
        v18[1] = (9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5)) >> 16;
        v18 += 2;
        v22 = __CFADD__(v69++, 1);
      }
      while (!v22);
      v72 = 2 * v33;
    }
    else
    {
      v72 = 0;
    }
    if ((v72 | (unint64_t)v34) < v19)
    {
      v73 = *v12;
      v74 = v12[1];
      if (v73 >= 0xF0)
        v73 = 240;
      if (v73 <= 0x10)
        LOWORD(v73) = 16;
      if (v74 >= 0xF0)
        v74 = 240;
      if (v74 <= 0x10)
        LOWORD(v74) = 16;
      *v18 = (9363 * ((unsigned __int16)(255 * v73 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v74 - 4080) >> 5)) >> 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  size_t v35;
  __int16 *v36;
  __int16 *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t i;
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  char v45;
  char *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (__int16 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (__int16 *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v17 - v16)
    v21 = v17 - v16;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (v13 - v12 + (v13 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v13 - v12 + (v13 & 1);
  if (v22)
  {
    v52 = v22;
    v23 = *a3 + *a4 * v12;
    v53 = a4[1];
    v54 = *a4;
    if (v12 >= v11)
      v24 = 0;
    else
      v24 = *a4;
    v25 = (char *)(v23 + v10 + v24);
    v26 = a8[2];
    v27 = (char *)(a7[2] + v26 * v18 + v16);
    v28 = *a8;
    v29 = (char *)(*a7 + *a8 * v18 + v16);
    v30 = -(uint64_t)v22;
    do
    {
      memcpy(v29, v25, v21);
      memset(v27, 255, v21);
      v25 += v54;
      v29 += v28;
      v27 += v26;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v22 = v52;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v14 = v53;
  }
  v32 = v11 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1)
    v33 = (v22 - (v11 & 1)) >> 1;
  else
    v33 = v22 >> 1;
  v34 = v8;
  v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v35 = (v21 - v9) >> 1;
  if ((v11 & 1) != 0)
  {
    v36 = v15;
    if ((v34 & 1) != 0)
    {
      v36 = v15 + 1;
      *v20 = *v15;
      v37 = v20 + 1;
      if (!v35)
      {
LABEL_28:
        v15 = (__int16 *)((char *)v15 + v14);
        v20 = (__int16 *)((char *)v20 + v19);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = v20;
      if (!v35)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v35;
    do
    {
      v39 = *v36++;
      *v37++ = v39;
      v31 = __CFADD__(v38++, 1);
    }
    while (!v31);
    goto LABEL_28;
  }
LABEL_29:
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v41 = (char *)v15;
      v42 = (char *)v20;
      if ((v34 & 1) != 0)
      {
        v41 = (char *)(v15 + 1);
        *v20 = *v15;
        v42 = (char *)(v20 + 1);
      }
      if (v35)
      {
        v43 = -(uint64_t)v35;
        do
        {
          v44 = *v41;
          v45 = v41[1];
          *v42 = *v41;
          v42[1] = v45;
          v46 = &v42[v19];
          *v46 = v44;
          v46[1] = v45;
          v42 += 2;
          v41 += 2;
          v31 = __CFADD__(v43++, 1);
        }
        while (!v31);
      }
      v15 = (__int16 *)((char *)v15 + v14);
      v20 += v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v47 = *v15++;
      *v20++ = v47;
    }
    if (v35)
    {
      v48 = -(uint64_t)v35;
      do
      {
        v49 = *v15++;
        *v20++ = v49;
        v31 = __CFADD__(v48++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_422v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  char v27;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = a5[1];
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v13 = *a6;
    v12 = a6[1];
    v14 = 2 * v7;
    v16 = *a4;
    v15 = a4[1];
    v17 = 2 * *a5;
    v18 = 2 * v9;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v19 = v12 + v9;
    v20 = v7 + v16 + 1;
    v21 = v13 + *a5;
    do
    {
      if (a1 >= 2)
      {
        v22 = 0;
        v23 = v11;
        do
        {
          v24 = (_BYTE *)(v19 + v22);
          v25 = (_BYTE *)(v12 + v22);
          v26 = *(_BYTE *)(v15 + v22);
          v27 = *(_BYTE *)(v15 + v22 + 1);
          *(_WORD *)(v13 + v22) = *(_WORD *)(v16 + v22);
          *v25 = v26;
          v25[1] = v27;
          *(_WORD *)(v21 + v22) = *(_WORD *)(v20 + v22 - 1);
          *v24 = v26;
          v24[1] = v27;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      v16 += v14;
      v15 += v8;
      v13 += v17;
      v12 += v18;
      ++v6;
      v19 += v18;
      v20 += v14;
      v21 += v17;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_422f(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = a5[1];
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v13 = *a6;
    v12 = a6[1];
    v14 = 2 * v7;
    v15 = 2 * *a5;
    v16 = 2 * v9;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v17 = *a4;
    v18 = a4[1];
    v19 = v12 + v9;
    v20 = v7 + *a4 + 1;
    v21 = v13 + *a5;
    do
    {
      if (a1 >= 2)
      {
        v22 = 0;
        v23 = v11;
        do
        {
          v24 = (_BYTE *)(v13 + v22);
          v25 = *(unsigned __int8 *)(v18 + v22);
          v26 = *(unsigned __int8 *)(v18 + v22 + 1);
          v27 = *(unsigned __int8 *)(v17 + v22 + 1);
          *v24 = sLumaTableVtoF[*(unsigned __int8 *)(v17 + v22)];
          v28 = (_BYTE *)(v12 + v22);
          v24[1] = sLumaTableVtoF[v27];
          LOBYTE(v27) = sChromaTableVtoF[v25];
          *v28 = v27;
          LOBYTE(v26) = sChromaTableVtoF[v26];
          v28[1] = v26;
          v29 = (_BYTE *)(v21 + v22);
          v30 = *(unsigned __int8 *)(v20 + v22);
          *v29 = sLumaTableVtoF[*(unsigned __int8 *)(v20 + v22 - 1)];
          v31 = (_BYTE *)(v19 + v22);
          v29[1] = sLumaTableVtoF[v30];
          *v31 = v27;
          v31[1] = v26;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      v17 += v14;
      v18 += v8;
      v13 += v15;
      v12 += v16;
      ++v6;
      v19 += v16;
      v20 += v14;
      v21 += v15;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  size_t v35;
  __int16 *v36;
  __int16 *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t i;
  __int16 *v41;
  __int16 *v42;
  uint64_t v43;
  __int16 v44;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (__int16 *)(a3[1] + v15 * ((v12 + v9) >> 1) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v48 = a8[1];
    v49 = a4[1];
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    v30 = (char *)(a7[2] + v27 * v19 + v17);
    v31 = (char *)(*a7 + v26 * v19 + v17);
    v46 = v24;
    v32 = -(uint64_t)v24;
    do
    {
      memcpy(v31, v29, v23);
      memset(v30, 255, v23);
      v29 += v25;
      v31 += v26;
      v30 += v27;
      v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    v21 = v48;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v49;
    v24 = v46;
  }
  v34 = v24 >> 1;
  if (v24 >> 1 >= (v24 - v12) >> 1)
    v34 = (v24 - v12) >> 1;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v35 = (v23 - v10) >> 1;
  else
    v35 = v23 >> 1;
  if (v12)
  {
    v36 = v16;
    if ((v8 & 1) != 0)
    {
      v36 = v16 + 1;
      *v22 = *v16;
      v37 = v22 + 1;
      if (!v35)
      {
LABEL_27:
        v16 = (__int16 *)((char *)v16 + v15);
        v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v37 = v22;
      if (!v35)
        goto LABEL_27;
    }
    v38 = -(uint64_t)v35;
    do
    {
      v39 = *v36++;
      *v37++ = v39;
      v33 = __CFADD__(v38++, 1);
    }
    while (!v33);
    goto LABEL_27;
  }
LABEL_28:
  if (v34)
  {
    for (i = 0; i != v34; ++i)
    {
      v41 = v16;
      v42 = v22;
      if ((v8 & 1) != 0)
      {
        v41 = v16 + 1;
        *v22 = *v16;
        v42 = v22 + 1;
      }
      if (v35)
      {
        v43 = -(uint64_t)v35;
        do
        {
          v44 = *v41++;
          *v42++ = v44;
          v33 = __CFADD__(v43++, 1);
        }
        while (!v33);
      }
      v16 = (__int16 *)((char *)v16 + v15);
      v22 = (__int16 *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_420f(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t i;
  unsigned __int8 *v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a5[1];
    v11 = a2 >> 1;
    v12 = a1 >> 1;
    v13 = (_BYTE *)*a6;
    v14 = a6[1];
    if (a1 >> 1 <= 1)
      v12 = 1;
    v16 = *a4;
    v15 = a4[1];
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          v13[i] = sLumaTableVtoF[v16[i]];
        v19 = &v16[v7];
        v20 = &v13[v9];
        v21 = v19;
        v22 = v20;
        v23 = a1;
        do
        {
          v24 = *v21++;
          *v22++ = sLumaTableVtoF[v24];
          --v23;
        }
        while (v23);
        v16 = &v19[v7];
        v13 = &v20[v9];
        if (a1 >= 2)
        {
          v25 = 0;
          v26 = v12;
          do
          {
            v27 = (_BYTE *)(v14 + v25);
            v28 = v15[v25 + 1];
            *v27 = sChromaTableVtoF[v15[v25]];
            v27[1] = sChromaTableVtoF[v28];
            v25 += 2;
            --v26;
          }
          while (v26);
        }
      }
      else
      {
        v16 += v7 + v7;
        v13 += v9 + v9;
      }
      v15 += v8;
      v14 += v10;
      ++v6;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_420v_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  _BYTE *v46;
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  uint64_t j;
  unsigned __int8 *v57;
  _BYTE *v58;
  _BYTE *v59;
  unsigned int v60;
  __int16 v61;
  unsigned int v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v9) >> 1) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v26)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v27 = v14 - v13;
  v28 = v20 - v19;
  if (v14 - v13 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v13 >= v9)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v11 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_BYTE *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v38 = v27 >> 1;
  v39 = v27 - v12;
  if (v38 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v38;
  v41 = v26 >> 1;
  v42 = v26 - v10;
  if (v41 >= v42 >> 1)
    v43 = v42 >> 1;
  else
    v43 = v41;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v47 = *v16;
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v48 = 16;
      else
        v48 = v47;
      if (v16[1] >= 0xF0u)
        v49 = 240;
      else
        v49 = v16[1];
      if (v49 <= 0x10)
        v50 = 16;
      else
        v50 = v49;
      v44 = v16 + 2;
      v51 = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
      *v24 = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
      v45 = v24 + 1;
      *v25 = v51;
      v46 = v25 + 1;
      if (!v43)
        goto LABEL_52;
    }
    else
    {
      v44 = v16;
      v45 = v24;
      v46 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v43)
      {
LABEL_52:
        v16 += v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_53;
      }
    }
    v52 = -(uint64_t)v43;
    do
    {
      v53 = *v44;
      v54 = v44[1];
      if (v53 >= 0xF0)
        v53 = 240;
      if (v53 <= 0x10)
        LOWORD(v53) = 16;
      if (v54 >= 0xF0)
        v54 = 240;
      if (v54 <= 0x10)
        LOWORD(v54) = 16;
      *v45++ = (9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16;
      *v46++ = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
      v44 += 2;
      v55 = __CFADD__(v52++, 1);
    }
    while (!v55);
    goto LABEL_52;
  }
LABEL_53:
  if (v40)
  {
    for (j = 0; j != v40; ++j)
    {
      v57 = v16;
      v58 = v24;
      v59 = v25;
      if ((v8 & 1) != 0)
      {
        v60 = *v16;
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          v61 = 16;
        else
          v61 = v60;
        if (v16[1] >= 0xF0u)
          v62 = 240;
        else
          v62 = v16[1];
        if (v62 <= 0x10)
          v63 = 16;
        else
          v63 = v62;
        v57 = v16 + 2;
        v64 = (9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16;
        *v24 = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        v58 = v24 + 1;
        *v25 = v64;
        v59 = v25 + 1;
      }
      if (v43)
      {
        v65 = -(uint64_t)v43;
        do
        {
          v66 = *v57;
          v67 = v57[1];
          if (v66 >= 0xF0)
            v66 = 240;
          if (v66 <= 0x10)
            LOWORD(v66) = 16;
          if (v67 >= 0xF0)
            v67 = 240;
          if (v67 <= 0x10)
            LOWORD(v67) = 16;
          *v58++ = (9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16;
          *v59++ = (9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16;
          v57 += 2;
          v55 = __CFADD__(v65++, 1);
        }
        while (!v55);
      }
      v16 += v15;
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_8GRAYSCALE(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a2 >> 1;
    v9 = a1 >> 1;
    v10 = *a6;
    v11 = *a4;
    v12 = 2 * *a3;
    v13 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v14 = v10 + *a5;
    do
    {
      if (a1 >= 2)
      {
        v15 = 0;
        v16 = v11 + v7;
        v17 = v9;
        do
        {
          v18 = (_BYTE *)(v14 + v15);
          v19 = (_BYTE *)(v10 + v15);
          v20 = sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15 + 1)];
          *v19 = ~sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15)];
          v19[1] = ~v20;
          LOBYTE(v19) = sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15 + 1)];
          *v18 = ~sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15)];
          v18[1] = ~(_BYTE)v19;
          v15 += 2;
          --v17;
        }
        while (v17);
      }
      v11 += v12;
      v10 += v13;
      ++v6;
      v14 += v13;
    }
    while (v6 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v0a8_y408(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  char v24;
  char v25;
  _BYTE *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = a2 >> 1;
    v8 = (_BYTE *)*a6;
    v9 = *a5;
    v11 = a4[1];
    v10 = a4[2];
    v13 = a3[1];
    v12 = a3[2];
    v14 = v10 + v12;
    v15 = *a4;
    v16 = *a4 + *a3;
    v17 = 2 * *a3;
    v18 = 2 * v12;
    if (a1 >> 1 <= 1)
      v19 = 1;
    else
      v19 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v20 = 0;
        v21 = v19;
        v22 = v8;
        do
        {
          v23 = *(_BYTE *)(v15 + v20);
          v24 = *(_BYTE *)(v15 + v20 + 1);
          v25 = *(_BYTE *)(v16 + v20);
          v26 = &v22[v9];
          v27 = *(_BYTE *)(v16 + v20 + 1);
          v28 = *(_BYTE *)(v11 + v20);
          v29 = *(_BYTE *)(v11 + v20 + 1);
          v30 = *(_BYTE *)(v10 + v20 + 1);
          v31 = *(_BYTE *)(v14 + v20);
          v32 = *(_BYTE *)(v14 + v20 + 1);
          *v22 = *(_BYTE *)(v10 + v20);
          v22[1] = v23;
          v22[2] = v28;
          v22[3] = v29;
          v22[4] = v30;
          v22[5] = v24;
          v22[6] = v28;
          v22[7] = v29;
          *v26 = v31;
          v26[1] = v25;
          v26[2] = v28;
          v26[3] = v29;
          v26[4] = v32;
          v26[5] = v27;
          v26[6] = v28;
          v22 += 8;
          v20 += 2;
          v26[7] = v29;
          --v21;
        }
        while (v21);
      }
      v15 += v17;
      v16 += v17;
      v11 += v13;
      v10 += v18;
      v14 += v18;
      v8 += 2 * v9;
      ++v6;
    }
    while (v6 != v7);
  }
  return 0;
}

uint64_t vt_Copy_v0a8_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  __int16 v29;
  unsigned __int8 *v30;
  __int16 v31;
  __int16 v32;
  _WORD *v33;
  __int16 v34;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v18 = *a3;
    v19 = a3[1] + v15 * (v9 >> 1);
    v20 = a4[2];
    v21 = a3[2] + v20 * v9;
    v22 = v18 + *a4 * v9;
    v23 = (unsigned __int8 *)(v19 + v8);
    v24 = v21 + v8;
    v25 = v22 + v8;
    do
    {
      if (v11)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = v23;
        do
        {
          if ((v27 & 1) == 0)
          {
            v31 = *v30;
            v32 = v30[1];
            v30 += 2;
            v29 = v31 << 8;
            v28 = v32 << 8;
          }
          v33 = (_WORD *)(v17 + v26);
          v34 = *(unsigned __int8 *)(v25 + v27) << 8;
          *v33 = *(unsigned __int8 *)(v24 + v27) | (*(unsigned __int8 *)(v24 + v27) << 8);
          v33[1] = v34;
          v33[2] = v29;
          v33[3] = v28;
          ++v27;
          v26 += 8;
        }
        while (v11 != v27);
      }
      v25 += v14;
      v17 += v16;
      v23 += (v13 << 63 >> 63) & v15;
      v24 += v20;
      ++v13;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_v0a8_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * (v8 >> 1) + v10);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = a2[2] + v9 - v10 + ((a2[2] + v9) & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  v19 = a2[3] + v8 - v11 + ((a2[3] + v8) & 1);
  if (v19 >= a6[3])
    v19 = a6[3];
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = a8[2];
    if (v11 >= v8)
      v24 = 0;
    else
      v24 = *a4;
    v25 = *a3 + *a4 * v11 + v10 + v24;
    v26 = a4[2];
    v27 = a7[2] + v23 * v15 + 2 * v14;
    v28 = *a7 + v22 * v15 + 2 * v14;
    v29 = a3[2] + v26 * v11 + v10;
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v21;
      v28 += v22;
      v29 += v26;
      v27 += v23;
      ++v20;
    }
    while (v20 != v19);
  }
  v31 = v8 & 1;
  v32 = (v19 - v31) >> 1;
  if (v19 >> 1 < v32)
    v32 = v19 >> 1;
  v33 = v9;
  v34 = v18 >> 1;
  v35 = v9 & 1;
  if (v18 >> 1 >= (v18 - v35) >> 1)
    v34 = (v18 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v13 + 2;
      v43 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v43;
      v37 = v17 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v13;
      v37 = v17;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v18)
    {
      v44 = *v36 << 8;
      v45 = v36[1] << 8;
      *v37 = v44;
      v37[1] = v45;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v13;
      v48 = v17;
      if ((v33 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = *v13 << 8;
        v50 = v13[1] << 8;
        *v17 = v49;
        v17[1] = v50;
        v51 = (_WORD *)((char *)v17 + v16);
        *v51 = v49;
        v51[1] = v50;
        v48 = v17 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v16);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v18)
      {
        v56 = *v47 << 8;
        v57 = v47[1] << 8;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v16);
        *v58 = v56;
        v58[1] = v57;
      }
      v13 += v12;
      v17 += v16;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v19)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v13;
      v61 = v13[1];
      v13 += 2;
      *v17 = v60 << 8;
      v17[1] = v61 << 8;
      v17 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v13;
        v64 = v13[1];
        v13 += 2;
        *v17 = v63 << 8;
        v17[1] = v64 << 8;
        v17 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v18)
    {
      v66 = *v13 << 8;
      v67 = v13[1] << 8;
      *v17 = v66;
      v17[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  BOOL v48;
  uint64_t j;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  _WORD *v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 & 0xFFFFFFFE;
  v14 = *(_QWORD *)(a2 + 24) + v12;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v17;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v9 + v8);
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (v22 < v23)
    v23 = v22;
  v24 = v14 - v13 + (v14 & 1);
  if (v24 >= *(_QWORD *)(a6 + 24))
    v24 = *(_QWORD *)(a6 + 24);
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    if (v13 >= v12)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a3 + *a4 * v13 + v10 + v29;
    v31 = a7[2] + v28 * v18;
    v32 = *a7 + v27 * v18;
    v33 = a4[2];
    v34 = v31 + v19;
    v35 = v32 + v19;
    v36 = a3[2] + v33 * v13 + v10;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = *(unsigned __int8 *)(v36 + i) | (*(unsigned __int8 *)(v36 + i) << 8);
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v26;
      v35 += v27;
      v36 += v33;
      v34 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v38 = v12 & 1;
  if (v24 >> 1 >= (v24 - v38) >> 1)
    v39 = (v24 - (v12 & 1)) >> 1;
  else
    v39 = v24 >> 1;
  v40 = v8;
  v41 = v23 >> 1;
  v42 = (v23 - v9) >> 1;
  if (v41 >= v42)
    v41 = v42;
  if ((v12 & 1) != 0)
  {
    if ((v40 & 1) != 0)
    {
      v43 = v16 + 2;
      v45 = v16[1] << 8;
      *v21 = *v16 << 8;
      v21[1] = v45;
      v44 = v21 + 2;
      if (!v41)
      {
LABEL_27:
        v16 += v15;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_28;
      }
    }
    else
    {
      v43 = v16;
      v44 = v21;
      if (!v41)
        goto LABEL_27;
    }
    v46 = -(uint64_t)v41;
    do
    {
      v47 = v43[1] << 8;
      *v44 = *v43 << 8;
      v44[1] = v47;
      v43 += 2;
      v44 += 2;
      v48 = __CFADD__(v46++, 1);
    }
    while (!v48);
    goto LABEL_27;
  }
LABEL_28:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v50 = v16;
      v51 = v21;
      if ((v40 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = v16[1] << 8;
        *v21 = *v16 << 8;
        v21[1] = v52;
        v51 = v21 + 2;
      }
      if (v41)
      {
        v53 = -(uint64_t)v41;
        do
        {
          v54 = *v50 << 8;
          v55 = v50[1] << 8;
          *v51 = v54;
          v51[1] = v55;
          v56 = (_WORD *)((char *)v51 + v20);
          *v56 = v54;
          v56[1] = v55;
          v51 += 2;
          v50 += 2;
          v48 = __CFADD__(v53++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v21 += v20;
    }
    v57 = 2 * v39;
  }
  else
  {
    v57 = 0;
  }
  if ((v57 | (unint64_t)v38) < v24)
  {
    if ((v40 & 1) != 0)
    {
      v58 = *v16;
      v59 = v16[1];
      v16 += 2;
      *v21 = v58 << 8;
      v21[1] = v59 << 8;
      v21 += 2;
    }
    if (v41)
    {
      v60 = -(uint64_t)v41;
      do
      {
        v61 = v16[1] << 8;
        *v21 = *v16 << 8;
        v21[1] = v61;
        v16 += 2;
        v21 += 2;
        v48 = __CFADD__(v60++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * (v8 >> 1) + v10);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = a2[2] + v9 - v10 + ((a2[2] + v9) & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  v19 = a2[3] + v8 - v11 + ((a2[3] + v8) & 1);
  if (v19 >= a6[3])
    v19 = a6[3];
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = a8[2];
    if (v11 >= v8)
      v24 = 0;
    else
      v24 = *a4;
    v25 = *a3 + *a4 * v11 + v10 + v24;
    v26 = a4[2];
    v27 = a7[2] + v23 * v15 + 2 * v14;
    v28 = *a7 + v22 * v15 + 2 * v14;
    v29 = a3[2] + v26 * v11 + v10;
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v21;
      v28 += v22;
      v29 += v26;
      v27 += v23;
      ++v20;
    }
    while (v20 != v19);
  }
  v31 = v8 & 1;
  v32 = (v19 - v31) >> 1;
  if (v19 >> 1 < v32)
    v32 = v19 >> 1;
  v33 = v9;
  v34 = v18 >> 1;
  v35 = v9 & 1;
  if (v18 >> 1 >= (v18 - v35) >> 1)
    v34 = (v18 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v13 + 2;
      v43 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v43;
      v37 = v17 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v13;
      v37 = v17;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v18)
    {
      v44 = *v36 << 8;
      v45 = v36[1] << 8;
      *v37 = v44;
      v37[1] = v45;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v13;
      v48 = v17;
      if ((v33 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = *v13 << 8;
        v50 = v13[1] << 8;
        *v17 = v49;
        v17[1] = v50;
        v51 = (_WORD *)((char *)v17 + v16);
        *v51 = v49;
        v51[1] = v50;
        v48 = v17 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v16);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v18)
      {
        v56 = *v47 << 8;
        v57 = v47[1] << 8;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v16);
        *v58 = v56;
        v58[1] = v57;
      }
      v13 += v12;
      v17 += v16;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v19)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v13;
      v61 = v13[1];
      v13 += 2;
      *v17 = v60 << 8;
      v17[1] = v61 << 8;
      v17 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v13;
        v64 = v13[1];
        v13 += 2;
        *v17 = v63 << 8;
        v17[1] = v64 << 8;
        v17 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v18)
    {
      v66 = *v13 << 8;
      v67 = v13[1] << 8;
      *v17 = v66;
      v17[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  BOOL v48;
  uint64_t j;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  _WORD *v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 & 0xFFFFFFFE;
  v14 = *(_QWORD *)(a2 + 24) + v12;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v17;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v9 + v8);
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (v22 < v23)
    v23 = v22;
  v24 = v14 - v13 + (v14 & 1);
  if (v24 >= *(_QWORD *)(a6 + 24))
    v24 = *(_QWORD *)(a6 + 24);
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    if (v13 >= v12)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a3 + *a4 * v13 + v10 + v29;
    v31 = a7[2] + v28 * v18;
    v32 = *a7 + v27 * v18;
    v33 = a4[2];
    v34 = v31 + v19;
    v35 = v32 + v19;
    v36 = a3[2] + v33 * v13 + v10;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = *(unsigned __int8 *)(v36 + i) | (*(unsigned __int8 *)(v36 + i) << 8);
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v26;
      v35 += v27;
      v36 += v33;
      v34 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v38 = v12 & 1;
  if (v24 >> 1 >= (v24 - v38) >> 1)
    v39 = (v24 - (v12 & 1)) >> 1;
  else
    v39 = v24 >> 1;
  v40 = v8;
  v41 = v23 >> 1;
  v42 = (v23 - v9) >> 1;
  if (v41 >= v42)
    v41 = v42;
  if ((v12 & 1) != 0)
  {
    if ((v40 & 1) != 0)
    {
      v43 = v16 + 2;
      v45 = v16[1] << 8;
      *v21 = *v16 << 8;
      v21[1] = v45;
      v44 = v21 + 2;
      if (!v41)
      {
LABEL_27:
        v16 += v15;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_28;
      }
    }
    else
    {
      v43 = v16;
      v44 = v21;
      if (!v41)
        goto LABEL_27;
    }
    v46 = -(uint64_t)v41;
    do
    {
      v47 = v43[1] << 8;
      *v44 = *v43 << 8;
      v44[1] = v47;
      v43 += 2;
      v44 += 2;
      v48 = __CFADD__(v46++, 1);
    }
    while (!v48);
    goto LABEL_27;
  }
LABEL_28:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v50 = v16;
      v51 = v21;
      if ((v40 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = v16[1] << 8;
        *v21 = *v16 << 8;
        v21[1] = v52;
        v51 = v21 + 2;
      }
      if (v41)
      {
        v53 = -(uint64_t)v41;
        do
        {
          v54 = *v50 << 8;
          v55 = v50[1] << 8;
          *v51 = v54;
          v51[1] = v55;
          v56 = (_WORD *)((char *)v51 + v20);
          *v56 = v54;
          v56[1] = v55;
          v51 += 2;
          v50 += 2;
          v48 = __CFADD__(v53++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v21 += v20;
    }
    v57 = 2 * v39;
  }
  else
  {
    v57 = 0;
  }
  if ((v57 | (unint64_t)v38) < v24)
  {
    if ((v40 & 1) != 0)
    {
      v58 = *v16;
      v59 = v16[1];
      v16 += 2;
      *v21 = v58 << 8;
      v21[1] = v59 << 8;
      v21 += 2;
    }
    if (v41)
    {
      v60 = -(uint64_t)v41;
      do
      {
        v61 = v16[1] << 8;
        *v21 = *v16 << 8;
        v21[1] = v61;
        v16 += 2;
        v21 += 2;
        v48 = __CFADD__(v60++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * (v8 >> 1) + v10);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = a2[2] + v9 - v10 + ((a2[2] + v9) & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  v19 = a2[3] + v8 - v11 + ((a2[3] + v8) & 1);
  if (v19 >= a6[3])
    v19 = a6[3];
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = a8[2];
    if (v11 >= v8)
      v24 = 0;
    else
      v24 = *a4;
    v25 = *a3 + *a4 * v11 + v10 + v24;
    v26 = a4[2];
    v27 = a7[2] + v23 * v15 + 2 * v14;
    v28 = *a7 + v22 * v15 + 2 * v14;
    v29 = a3[2] + v26 * v11 + v10;
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v21;
      v28 += v22;
      v29 += v26;
      v27 += v23;
      ++v20;
    }
    while (v20 != v19);
  }
  v31 = v8 & 1;
  v32 = (v19 - v31) >> 1;
  if (v19 >> 1 < v32)
    v32 = v19 >> 1;
  v33 = v9;
  v34 = v18 >> 1;
  v35 = v9 & 1;
  if (v18 >> 1 >= (v18 - v35) >> 1)
    v34 = (v18 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v13 + 2;
      v43 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v43;
      v37 = v17 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v13;
      v37 = v17;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v18)
    {
      v44 = *v36 << 8;
      v45 = v36[1] << 8;
      *v37 = v44;
      v37[1] = v45;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v13;
      v48 = v17;
      if ((v33 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = *v13 << 8;
        v50 = v13[1] << 8;
        *v17 = v49;
        v17[1] = v50;
        v51 = (_WORD *)((char *)v17 + v16);
        *v51 = v49;
        v51[1] = v50;
        v48 = v17 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v16);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v18)
      {
        v56 = *v47 << 8;
        v57 = v47[1] << 8;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v16);
        *v58 = v56;
        v58[1] = v57;
      }
      v13 += v12;
      v17 += v16;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v19)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v13;
      v61 = v13[1];
      v13 += 2;
      *v17 = v60 << 8;
      v17[1] = v61 << 8;
      v17 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v13;
        v64 = v13[1];
        v13 += 2;
        *v17 = v63 << 8;
        v17[1] = v64 << 8;
        v17 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v18)
    {
      v66 = *v13 << 8;
      v67 = v13[1] << 8;
      *v17 = v66;
      v17[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  _WORD *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  BOOL v48;
  uint64_t j;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  _WORD *v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 & 0xFFFFFFFE;
  v14 = *(_QWORD *)(a2 + 24) + v12;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v17;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v9 + v8);
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (v22 < v23)
    v23 = v22;
  v24 = v14 - v13 + (v14 & 1);
  if (v24 >= *(_QWORD *)(a6 + 24))
    v24 = *(_QWORD *)(a6 + 24);
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    if (v13 >= v12)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a3 + *a4 * v13 + v10 + v29;
    v31 = a7[2] + v28 * v18;
    v32 = *a7 + v27 * v18;
    v33 = a4[2];
    v34 = v31 + v19;
    v35 = v32 + v19;
    v36 = a3[2] + v33 * v13 + v10;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = *(unsigned __int8 *)(v36 + i) | (*(unsigned __int8 *)(v36 + i) << 8);
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v26;
      v35 += v27;
      v36 += v33;
      v34 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v38 = v12 & 1;
  if (v24 >> 1 >= (v24 - v38) >> 1)
    v39 = (v24 - (v12 & 1)) >> 1;
  else
    v39 = v24 >> 1;
  v40 = v8;
  v41 = v23 >> 1;
  v42 = (v23 - v9) >> 1;
  if (v41 >= v42)
    v41 = v42;
  if ((v12 & 1) != 0)
  {
    if ((v40 & 1) != 0)
    {
      v43 = v16 + 2;
      v45 = v16[1] << 8;
      *v21 = *v16 << 8;
      v21[1] = v45;
      v44 = v21 + 2;
      if (!v41)
      {
LABEL_27:
        v16 += v15;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_28;
      }
    }
    else
    {
      v43 = v16;
      v44 = v21;
      if (!v41)
        goto LABEL_27;
    }
    v46 = -(uint64_t)v41;
    do
    {
      v47 = v43[1] << 8;
      *v44 = *v43 << 8;
      v44[1] = v47;
      v43 += 2;
      v44 += 2;
      v48 = __CFADD__(v46++, 1);
    }
    while (!v48);
    goto LABEL_27;
  }
LABEL_28:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v50 = v16;
      v51 = v21;
      if ((v40 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = v16[1] << 8;
        *v21 = *v16 << 8;
        v21[1] = v52;
        v51 = v21 + 2;
      }
      if (v41)
      {
        v53 = -(uint64_t)v41;
        do
        {
          v54 = *v50 << 8;
          v55 = v50[1] << 8;
          *v51 = v54;
          v51[1] = v55;
          v56 = (_WORD *)((char *)v51 + v20);
          *v56 = v54;
          v56[1] = v55;
          v51 += 2;
          v50 += 2;
          v48 = __CFADD__(v53++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v21 += v20;
    }
    v57 = 2 * v39;
  }
  else
  {
    v57 = 0;
  }
  if ((v57 | (unint64_t)v38) < v24)
  {
    if ((v40 & 1) != 0)
    {
      v58 = *v16;
      v59 = v16[1];
      v16 += 2;
      *v21 = v58 << 8;
      v21[1] = v59 << 8;
      v21 += 2;
    }
    if (v41)
    {
      v60 = -(uint64_t)v41;
      do
      {
        v61 = v16[1] << 8;
        *v21 = *v16 << 8;
        v21[1] = v61;
        v16 += 2;
        v21 += 2;
        v48 = __CFADD__(v60++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  size_t v35;
  uint64_t v36;
  __int16 *v37;
  _WORD *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t i;
  char *v43;
  _BYTE *v44;
  char v45;
  char v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  char v50;
  _BYTE *v51;
  char v52;
  char v53;
  _BYTE *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = v9 & 0xFFFFFFFE;
  v12 = a2[3] + v9;
  v13 = a4[1];
  v14 = (char *)(a3[1] + v13 * (v9 >> 1) + v10);
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = a7[1] + v19 * v16 + 2 * v15;
  if (a2[2] + v8 - v10 + ((a2[2] + v8) & 1uLL) >= v17)
    v21 = v17;
  else
    v21 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v12 - v11 + (v12 & 1) >= v18)
    v22 = v18;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v60 = a8[1];
    v64 = *a4;
    if (v11 >= v9)
      v23 = 0;
    else
      v23 = *a4;
    v24 = (char *)(*a3 + *a4 * v11 + v10 + v23);
    v62 = a4[1];
    v63 = a8[2];
    v25 = (char *)(a7[2] + v63 * v16 + v15);
    v26 = *a8;
    v27 = (char *)(*a7 + *a8 * v16 + v15);
    v28 = a4[2];
    v29 = (char *)(a3[2] + v28 * v11 + v10);
    v61 = v22;
    v30 = -(uint64_t)v22;
    do
    {
      memcpy(v27, v24, v21);
      memcpy(v25, v29, v21);
      v24 += v64;
      v27 += v26;
      v29 += v28;
      v25 += v63;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v19 = v60;
    v8 = a2[4];
    v9 = a2[5];
    v22 = v61;
    v13 = v62;
  }
  v32 = v9 & 1;
  v33 = (v22 - v32) >> 1;
  if (v22 >> 1 < v33)
    v33 = v22 >> 1;
  v34 = v8;
  v35 = v21 >> 1;
  v36 = v8 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1)
    v35 = (v21 - v36) >> 1;
  if ((v9 & 1) != 0)
  {
    v37 = (__int16 *)v14;
    if ((v34 & 1) != 0)
    {
      v37 = (__int16 *)(v14 + 2);
      *(_WORD *)v20 = *(_WORD *)v14;
      v38 = (_WORD *)(v20 + 2);
      if (v35)
      {
LABEL_22:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37++;
          *v38++ = v40;
          v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
        v41 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      v38 = (_WORD *)v20;
      if (v35)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v36) < v21)
      *v38 = *v37;
    v14 += v13;
    v20 += v19;
  }
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v43 = v14;
      v44 = (_BYTE *)v20;
      if ((v34 & 1) != 0)
      {
        v45 = *v14;
        v46 = v14[1];
        v43 = v14 + 2;
        *(_BYTE *)v20 = *v14;
        *(_BYTE *)(v20 + 1) = v46;
        v47 = (_BYTE *)(v20 + v19);
        *v47 = v45;
        v47[1] = v46;
        v44 = (_BYTE *)(v20 + 2);
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = *v43;
          v50 = v43[1];
          v43 += 2;
          *v44 = v49;
          v44[1] = v50;
          v44[2] = v49;
          v44[3] = v50;
          v51 = &v44[v19 + 1];
          *(v51 - 1) = v49;
          *v51 = v50;
          v51[1] = v49;
          v51[2] = v50;
          v44 += 4;
          v31 = __CFADD__(v48++, 1);
        }
        while (!v31);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        v52 = *v43;
        v53 = v43[1];
        *v44 = v52;
        v44[1] = v53;
        v54 = &v44[v19];
        *v54 = v52;
        v54[1] = v53;
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v55 = *(_WORD *)v14;
      v14 += 2;
      *(_WORD *)v20 = v55;
      v20 += 2;
    }
    if (v35)
    {
      v56 = -(uint64_t)v35;
      do
      {
        v57 = *(_WORD *)v14;
        v14 += 2;
        *(_WORD *)v20 = v57;
        v20 += 2;
        v31 = __CFADD__(v56++, 1);
      }
      while (!v31);
      v35 *= 2;
    }
    if ((v35 | v36) < v21)
      *(_WORD *)v20 = *(_WORD *)v14;
  }
  return 0;
}

uint64_t vt_Copy_v0a8_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  size_t v34;
  __int16 *v35;
  __int16 *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t i;
  char *v40;
  char *v41;
  uint64_t v42;
  char v43;
  char v44;
  char *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (__int16 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (__int16 *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v17 - v16)
    v21 = v17 - v16;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (v13 - v12 + (v13 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v13 - v12 + (v13 & 1);
  if (v22)
  {
    v54 = *a8;
    v55 = *a4;
    if (v12 >= v11)
      v23 = 0;
    else
      v23 = *a4;
    v24 = (char *)(*a3 + *a4 * v12 + v10 + v23);
    v52 = a4[1];
    v53 = a8[2];
    v25 = (char *)(a7[2] + v53 * v18 + v16);
    v26 = (char *)(*a7 + *a8 * v18 + v16);
    v27 = a4[2];
    v28 = (char *)(a3[2] + v27 * v12 + v10);
    v51 = v22;
    v29 = -(uint64_t)v22;
    do
    {
      memcpy(v26, v24, v21);
      memcpy(v25, v28, v21);
      v24 += v55;
      v26 += v54;
      v28 += v27;
      v25 += v53;
      v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    v22 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v14 = v52;
  }
  v31 = v11 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1)
    v32 = (v22 - (v11 & 1)) >> 1;
  else
    v32 = v22 >> 1;
  v33 = v8;
  v34 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v34 = (v21 - v9) >> 1;
  if ((v11 & 1) != 0)
  {
    v35 = v15;
    if ((v33 & 1) != 0)
    {
      v35 = v15 + 1;
      *v20 = *v15;
      v36 = v20 + 1;
      if (!v34)
      {
LABEL_28:
        v15 = (__int16 *)((char *)v15 + v14);
        v20 = (__int16 *)((char *)v20 + v19);
        goto LABEL_29;
      }
    }
    else
    {
      v36 = v20;
      if (!v34)
        goto LABEL_28;
    }
    v37 = -(uint64_t)v34;
    do
    {
      v38 = *v35++;
      *v36++ = v38;
      v30 = __CFADD__(v37++, 1);
    }
    while (!v30);
    goto LABEL_28;
  }
LABEL_29:
  if (v32)
  {
    for (i = 0; i != v32; ++i)
    {
      v40 = (char *)v15;
      v41 = (char *)v20;
      if ((v33 & 1) != 0)
      {
        v40 = (char *)(v15 + 1);
        *v20 = *v15;
        v41 = (char *)(v20 + 1);
      }
      if (v34)
      {
        v42 = -(uint64_t)v34;
        do
        {
          v43 = *v40;
          v44 = v40[1];
          *v41 = *v40;
          v41[1] = v44;
          v45 = &v41[v19];
          *v45 = v43;
          v45[1] = v44;
          v41 += 2;
          v40 += 2;
          v30 = __CFADD__(v42++, 1);
        }
        while (!v30);
      }
      v15 = (__int16 *)((char *)v15 + v14);
      v20 += v19;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v46 = *v15++;
      *v20++ = v46;
    }
    if (v34)
    {
      v47 = -(uint64_t)v34;
      do
      {
        v48 = *v15++;
        *v20++ = v48;
        v30 = __CFADD__(v47++, 1);
      }
      while (!v30);
    }
  }
  return 0;
}

vImage_Error vt_VImage_Setup_420f_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420f_32BGRA;
  *a11 = vt_VImage_Cleanup_420f_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_420f_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420f_32ARGB;
  *a11 = vt_VImage_Cleanup_420f_32ARGB;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_420f_2vuy(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v12 = (_BYTE *)*a6;
    v13 = 2 * *a3;
    v14 = (unsigned __int8 *)a4[1];
    v15 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        v17 = (unsigned __int8 *)v16;
        v18 = v11;
        v19 = v12;
        v20 = v14;
        do
        {
          v21 = &v17[v7];
          v22 = &v19[v9];
          v23 = v20[1];
          v24 = *(v17 - 1);
          v25 = *v17;
          v17 += 2;
          v26 = sChromaTableFtoV[*v20];
          *v19 = v26;
          v19[1] = sLumaTableFtoV[v24];
          LOBYTE(v23) = sChromaTableFtoV[v23];
          v19[2] = v23;
          v19[3] = sLumaTableFtoV[v25];
          v27 = *(v21 - 1);
          v28 = *v21;
          *v22 = v26;
          v22[1] = sLumaTableFtoV[v27];
          v22[2] = v23;
          v22[3] = sLumaTableFtoV[v28];
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v14 += v8;
      v12 += v15;
      ++v6;
      v16 += v13;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420f_yuvs(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v12 = (_BYTE *)*a6;
    v13 = 2 * *a3;
    v14 = (unsigned __int8 *)a4[1];
    v15 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        v17 = (unsigned __int8 *)v16;
        v18 = v11;
        v19 = v12;
        v20 = v14;
        do
        {
          v21 = &v17[v7];
          v22 = &v19[v9];
          v23 = *v20;
          v24 = v20[1];
          v25 = *(v17 - 1);
          v26 = *v17;
          v17 += 2;
          *v19 = sLumaTableFtoV[v25];
          LOBYTE(v23) = sChromaTableFtoV[v23];
          v19[1] = v23;
          v19[2] = sLumaTableFtoV[v26];
          LOBYTE(v24) = sChromaTableFtoV[v24];
          v19[3] = v24;
          v27 = *(v21 - 1);
          v28 = *v21;
          *v22 = sLumaTableFtoV[v27];
          v22[1] = v23;
          v22[2] = sLumaTableFtoV[v28];
          v22[3] = v24;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v14 += v8;
      v12 += v15;
      ++v6;
      v16 += v13;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420f_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t j;
  unsigned __int8 *v46;
  _BYTE *v47;
  unsigned int v48;
  char v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  unsigned int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = a8[2];
    v25 = *a3 + *a4 * v10;
    if (v10 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = v25 + (a2[4] & 0xFFFFFFFELL) + v26;
    v28 = a7[2] + v24 * v14 + v13;
    v29 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v28 + i) = -1;
          *(_BYTE *)(v29 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
        }
      }
      v27 += v22;
      v29 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v31 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v31)
    v31 = v20 >> 1;
  v32 = v9;
  v33 = v19 >> 1;
  v34 = v9 & 1;
  if (v19 >> 1 >= (v19 - v34) >> 1)
    v33 = (v19 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v35 = v12 + 2;
      v42 = (7368928 * v12[1]) >> 23;
      *v18 = ((7368928 * *v12) >> 23) + 16;
      v18[1] = v42 + 16;
      v36 = v18 + 2;
      if (v33)
      {
LABEL_22:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35;
          v39 = v35[1];
          v35 += 2;
          *v36 = ((7368928 * v38) >> 23) + 16;
          v36[1] = ((7368928 * v39) >> 23) + 16;
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      v35 = v12;
      v36 = v18;
      if (v33)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v34) < v19)
    {
      v43 = *v35;
      v44 = (7368928 * v35[1]) >> 23;
      *v36 = ((7368928 * v43) >> 23) + 16;
      v36[1] = v44 + 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v46 = v12;
      v47 = v18;
      if ((v32 & 1) != 0)
      {
        v46 = v12 + 2;
        v48 = (7368928 * v12[1]) >> 23;
        v49 = ((7368928 * *v12) >> 23) + 16;
        *v18 = v49;
        LOBYTE(v48) = v48 + 16;
        v18[1] = v48;
        v50 = &v18[v17];
        *v50 = v49;
        v50[1] = v48;
        v47 = v18 + 2;
      }
      if (v33)
      {
        v51 = -(uint64_t)v33;
        do
        {
          v52 = v46[1];
          v53 = ((7368928 * *v46) >> 23) + 16;
          *v47 = ((7368928 * *v46) >> 23) + 16;
          v54 = ((7368928 * v52) >> 23) + 16;
          v47[1] = v54;
          v46 += 2;
          v47[2] = v53;
          v47[3] = v54;
          v55 = &v47[v17 + 1];
          *(v55 - 1) = v53;
          *v55 = v54;
          v55[1] = v53;
          v55[2] = v54;
          v47 += 4;
          v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v19)
      {
        v56 = *v46;
        v57 = (7368928 * v46[1]) >> 23;
        v58 = ((7368928 * v56) >> 23) + 16;
        *v47 = v58;
        LOBYTE(v57) = v57 + 16;
        v47[1] = v57;
        v59 = &v47[v17];
        *v59 = v58;
        v59[1] = v57;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    v60 = 2 * v31;
  }
  else
  {
    v60 = 0;
  }
  if ((v60 | v8 & 1) < v20)
  {
    if ((v32 & 1) != 0)
    {
      v61 = *v12;
      v62 = v12[1];
      v12 += 2;
      *v18 = ((7368928 * v61) >> 23) + 16;
      v18[1] = ((7368928 * v62) >> 23) + 16;
      v18 += 2;
    }
    if (v33)
    {
      v63 = -(uint64_t)v33;
      do
      {
        v64 = *v12;
        v65 = v12[1];
        v12 += 2;
        *v18 = ((7368928 * v64) >> 23) + 16;
        v18[1] = ((7368928 * v65) >> 23) + 16;
        v18 += 2;
        v40 = __CFADD__(v63++, 1);
      }
      while (!v40);
      v66 = 2 * v33;
    }
    else
    {
      v66 = 0;
    }
    if ((v66 | (unint64_t)v34) < v19)
    {
      v67 = *v12;
      v68 = (7368928 * v12[1]) >> 23;
      *v18 = ((7368928 * v67) >> 23) + 16;
      v18[1] = v68 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t j;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  char v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v8)
      v25 = 0;
    else
      v25 = *a4;
    v26 = v24 + (a2[4] & 0xFFFFFFFELL) + v25;
    v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v27 + i) = ((7204443 * *(unsigned __int8 *)(v26 + i)) >> 23) + 16;
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v29 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v29)
    v29 = v20 >> 1;
  v30 = v9;
  v31 = v19 >> 1;
  v32 = v9 & 1;
  if (v19 >> 1 >= (v19 - v32) >> 1)
    v31 = (v19 - v32) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v33 = v12 + 2;
      v40 = (7368928 * v12[1]) >> 23;
      *v18 = ((7368928 * *v12) >> 23) + 16;
      v18[1] = v40 + 16;
      v34 = v18 + 2;
      if (v31)
      {
LABEL_22:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33;
          v37 = v33[1];
          v33 += 2;
          *v34 = ((7368928 * v36) >> 23) + 16;
          v34[1] = ((7368928 * v37) >> 23) + 16;
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_28;
      }
    }
    else
    {
      v33 = v12;
      v34 = v18;
      if (v31)
        goto LABEL_22;
    }
    v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v32) < v19)
    {
      v41 = *v33;
      v42 = (7368928 * v33[1]) >> 23;
      *v34 = ((7368928 * v41) >> 23) + 16;
      v34[1] = v42 + 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v29)
  {
    for (j = 0; j != v29; ++j)
    {
      v44 = v12;
      v45 = v18;
      if ((v30 & 1) != 0)
      {
        v44 = v12 + 2;
        v46 = (7368928 * v12[1]) >> 23;
        v47 = ((7368928 * *v12) >> 23) + 16;
        *v18 = v47;
        LOBYTE(v46) = v46 + 16;
        v18[1] = v46;
        v48 = &v18[v17];
        *v48 = v47;
        v48[1] = v46;
        v45 = v18 + 2;
      }
      if (v31)
      {
        v49 = -(uint64_t)v31;
        do
        {
          v50 = v44[1];
          v51 = ((7368928 * *v44) >> 23) + 16;
          *v45 = ((7368928 * *v44) >> 23) + 16;
          v52 = ((7368928 * v50) >> 23) + 16;
          v45[1] = v52;
          v44 += 2;
          v45[2] = v51;
          v45[3] = v52;
          v53 = &v45[v17 + 1];
          *(v53 - 1) = v51;
          *v53 = v52;
          v53[1] = v51;
          v53[2] = v52;
          v45 += 4;
          v38 = __CFADD__(v49++, 1);
        }
        while (!v38);
      }
      if ((v32 | (2 * v31)) < v19)
      {
        v54 = *v44;
        v55 = (7368928 * v44[1]) >> 23;
        v56 = ((7368928 * v54) >> 23) + 16;
        *v45 = v56;
        LOBYTE(v55) = v55 + 16;
        v45[1] = v55;
        v57 = &v45[v17];
        *v57 = v56;
        v57[1] = v55;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    v58 = 2 * v29;
  }
  else
  {
    v58 = 0;
  }
  if ((v58 | v8 & 1) < v20)
  {
    if ((v30 & 1) != 0)
    {
      v59 = *v12;
      v60 = v12[1];
      v12 += 2;
      *v18 = ((7368928 * v59) >> 23) + 16;
      v18[1] = ((7368928 * v60) >> 23) + 16;
      v18 += 2;
    }
    if (v31)
    {
      v61 = -(uint64_t)v31;
      do
      {
        v62 = *v12;
        v63 = v12[1];
        v12 += 2;
        *v18 = ((7368928 * v62) >> 23) + 16;
        v18[1] = ((7368928 * v63) >> 23) + 16;
        v18 += 2;
        v38 = __CFADD__(v61++, 1);
      }
      while (!v38);
      v64 = 2 * v31;
    }
    else
    {
      v64 = 0;
    }
    if ((v64 | (unint64_t)v32) < v19)
    {
      v65 = *v12;
      v66 = (7368928 * v12[1]) >> 23;
      *v18 = ((7368928 * v65) >> 23) + 16;
      v18[1] = v66 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  size_t v33;
  uint64_t v34;
  __int16 *v35;
  _WORD *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t i;
  char *v41;
  _BYTE *v42;
  char v43;
  char v44;
  _BYTE *v45;
  uint64_t v46;
  char v47;
  char v48;
  _BYTE *v49;
  char v50;
  char v51;
  _BYTE *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  unint64_t v58;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = (char *)(a3[1] + v12 * (v9 >> 1) + (v8 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[2];
  v17 = a6[3];
  v18 = a8[1];
  v19 = a7[1] + v18 * v15 + 2 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v16)
    v20 = v16;
  else
    v20 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v17)
    v21 = v17;
  else
    v21 = v11 - v10 + (v11 & 1);
  if (v21)
  {
    v58 = v21;
    v22 = *a4;
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v9)
      v25 = 0;
    else
      v25 = *a4;
    v26 = (char *)(v24 + (a2[4] & 0xFFFFFFFELL) + v25);
    v27 = (char *)(*a7 + v23 * v15 + v14);
    v28 = -(uint64_t)v21;
    do
    {
      memcpy(v27, v26, v20);
      v26 += v22;
      v27 += v23;
      v29 = __CFADD__(v28++, 1);
    }
    while (!v29);
    v21 = v58;
    v8 = a2[4];
    v9 = a2[5];
  }
  v30 = v9 & 1;
  v31 = (v21 - v30) >> 1;
  if (v21 >> 1 < v31)
    v31 = v21 >> 1;
  v32 = v8;
  v33 = v20 >> 1;
  v34 = v8 & 1;
  if (v20 >> 1 >= (v20 - v34) >> 1)
    v33 = (v20 - v34) >> 1;
  if ((v9 & 1) != 0)
  {
    v35 = (__int16 *)v13;
    if ((v32 & 1) != 0)
    {
      v35 = (__int16 *)(v13 + 2);
      *(_WORD *)v19 = *(_WORD *)v13;
      v36 = (_WORD *)(v19 + 2);
      if (v33)
      {
LABEL_22:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35++;
          *v36++ = v38;
          v29 = __CFADD__(v37++, 1);
        }
        while (!v29);
        v39 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = (_WORD *)v19;
      if (v33)
        goto LABEL_22;
    }
    v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v34) < v20)
      *v36 = *v35;
    v13 += v12;
    v19 += v18;
  }
  if (v31)
  {
    for (i = 0; i != v31; ++i)
    {
      v41 = v13;
      v42 = (_BYTE *)v19;
      if ((v32 & 1) != 0)
      {
        v43 = *v13;
        v44 = v13[1];
        v41 = v13 + 2;
        *(_BYTE *)v19 = *v13;
        *(_BYTE *)(v19 + 1) = v44;
        v45 = (_BYTE *)(v19 + v18);
        *v45 = v43;
        v45[1] = v44;
        v42 = (_BYTE *)(v19 + 2);
      }
      if (v33)
      {
        v46 = -(uint64_t)v33;
        do
        {
          v47 = *v41;
          v48 = v41[1];
          v41 += 2;
          *v42 = v47;
          v42[1] = v48;
          v42[2] = v47;
          v42[3] = v48;
          v49 = &v42[v18 + 1];
          *(v49 - 1) = v47;
          *v49 = v48;
          v49[1] = v47;
          v49[2] = v48;
          v42 += 4;
          v29 = __CFADD__(v46++, 1);
        }
        while (!v29);
      }
      if ((v34 | (2 * v33)) < v20)
      {
        v50 = *v41;
        v51 = v41[1];
        *v42 = v50;
        v42[1] = v51;
        v52 = &v42[v18];
        *v52 = v50;
        v52[1] = v51;
      }
      v13 += v12;
      v19 += 2 * v18;
    }
    v31 *= 2;
  }
  if ((v31 | v30) < v21)
  {
    if ((v32 & 1) != 0)
    {
      v53 = *(_WORD *)v13;
      v13 += 2;
      *(_WORD *)v19 = v53;
      v19 += 2;
    }
    if (v33)
    {
      v54 = -(uint64_t)v33;
      do
      {
        v55 = *(_WORD *)v13;
        v13 += 2;
        *(_WORD *)v19 = v55;
        v19 += 2;
        v29 = __CFADD__(v54++, 1);
      }
      while (!v29);
      v33 *= 2;
    }
    if ((v33 | v34) < v20)
      *(_WORD *)v19 = *(_WORD *)v13;
  }
  return 0;
}

uint64_t vt_Copy_420f_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t j;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v21)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  v22 = *(_QWORD *)(a2 + 24) + v11 - v12 + ((*(_QWORD *)(a2 + 24) + v11) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = v12 >= v11;
    v26 = *a8;
    v27 = a8[2];
    v28 = *a3 + *a4 * v12;
    if (v25)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v10 + v29;
    v31 = a7[2] + v27 * v18 + v16;
    v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v31 + i) = -1;
          *(_BYTE *)(v32 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v34 = v22 >> 1;
  v35 = v11 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1)
    v34 = (v22 - (v11 & 1)) >> 1;
  v36 = v21 >> 1;
  v37 = v21 - v9;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if ((v11 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v14 + 2;
      v41 = (7368928 * v14[1]) >> 23;
      *v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v41 + 16;
      v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        v14 += v13;
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (7368928 * v39[1]) >> 23;
      *v40 = ((7368928 * *v39) >> 23) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v14;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v45 = v14 + 2;
        v47 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v47 + 16;
        v46 = v20 + 2;
      }
      if (v38)
      {
        v48 = -(uint64_t)v38;
        do
        {
          v49 = (7368928 * v45[1]) >> 23;
          v50 = ((7368928 * *v45) >> 23) + 16;
          *v46 = ((7368928 * *v45) >> 23) + 16;
          LOBYTE(v49) = v49 + 16;
          v46[1] = v49;
          v51 = &v46[v19];
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v53 = *v14;
      v54 = v14[1];
      v14 += 2;
      *v20 = ((7368928 * v53) >> 23) + 16;
      v20[1] = ((7368928 * v54) >> 23) + 16;
      v20 += 2;
    }
    if (v38)
    {
      v55 = -(uint64_t)v38;
      do
      {
        v56 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v56 + 16;
        v20 += 2;
        v14 += 2;
        v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_422v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = a5[1];
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v13 = *a6;
    v12 = a6[1];
    v14 = 2 * v7;
    v15 = 2 * *a5;
    v16 = 2 * v9;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v17 = *a4;
    v18 = a4[1];
    v19 = v12 + v9;
    v20 = v7 + *a4 + 1;
    v21 = v13 + *a5;
    do
    {
      if (a1 >= 2)
      {
        v22 = 0;
        v23 = v11;
        do
        {
          v24 = (_BYTE *)(v13 + v22);
          v25 = *(unsigned __int8 *)(v18 + v22);
          v26 = *(unsigned __int8 *)(v18 + v22 + 1);
          v27 = *(unsigned __int8 *)(v17 + v22 + 1);
          *v24 = sLumaTableFtoV[*(unsigned __int8 *)(v17 + v22)];
          v28 = (_BYTE *)(v12 + v22);
          v24[1] = sLumaTableFtoV[v27];
          LOBYTE(v27) = sChromaTableFtoV[v25];
          *v28 = v27;
          LOBYTE(v26) = sChromaTableFtoV[v26];
          v28[1] = v26;
          v29 = (_BYTE *)(v21 + v22);
          v30 = *(unsigned __int8 *)(v20 + v22);
          *v29 = sLumaTableFtoV[*(unsigned __int8 *)(v20 + v22 - 1)];
          v31 = (_BYTE *)(v19 + v22);
          v29[1] = sLumaTableFtoV[v30];
          *v31 = v27;
          v31[1] = v26;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      v17 += v14;
      v18 += v8;
      v13 += v15;
      v12 += v16;
      ++v6;
      v19 += v16;
      v20 += v14;
      v21 += v15;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420f_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t j;
  unsigned __int8 *v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v9) >> 1) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v23)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  v25 = v20 - v19;
  if (v14 - v13 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = v13 >= v9;
    v29 = *a8;
    v30 = a8[2];
    v31 = *a3 + *a4 * v13;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v11 + v32;
    v34 = a7[2] + v30 * v19 + v17;
    v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v34 + i) = -1;
          *(_BYTE *)(v35 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v37 = v24 >> 1;
  v38 = v24 - v12;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v23 >> 1;
  v41 = v23 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v43 = v16 + 2;
      v45 = (7368928 * v16[1]) >> 23;
      *v22 = ((7368928 * *v16) >> 23) + 16;
      v22[1] = v45 + 16;
      v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v22;
      if (!v42)
        goto LABEL_29;
    }
    v46 = -(uint64_t)v42;
    do
    {
      v47 = (7368928 * v43[1]) >> 23;
      *v44 = ((7368928 * *v43) >> 23) + 16;
      v44[1] = v47 + 16;
      v44 += 2;
      v43 += 2;
      v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v49 = v16;
      v50 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = (7368928 * v16[1]) >> 23;
        *v22 = ((7368928 * *v16) >> 23) + 16;
        v22[1] = v51 + 16;
        v50 = v22 + 2;
      }
      if (v42)
      {
        v52 = -(uint64_t)v42;
        do
        {
          v53 = (7368928 * v49[1]) >> 23;
          *v50 = ((7368928 * *v49) >> 23) + 16;
          v50[1] = v53 + 16;
          v50 += 2;
          v49 += 2;
          v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_420v_vec(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, int8x16_t **a6, uint16x4_t a7)
{
  vt_Copy_420f_420v_arm(a4, a6, a1, a2, a3, a5, a7);
  return 0;
}

uint64_t vt_Copy_420f_420v(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t i;
  unsigned __int8 *v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a5[1];
    v11 = a2 >> 1;
    v12 = a1 >> 1;
    v13 = (_BYTE *)*a6;
    v14 = a6[1];
    if (a1 >> 1 <= 1)
      v12 = 1;
    v16 = *a4;
    v15 = a4[1];
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          v13[i] = sLumaTableFtoV[v16[i]];
        v19 = &v16[v7];
        v20 = &v13[v9];
        v21 = v19;
        v22 = v20;
        v23 = a1;
        do
        {
          v24 = *v21++;
          *v22++ = sLumaTableFtoV[v24];
          --v23;
        }
        while (v23);
        v16 = &v19[v7];
        v13 = &v20[v9];
        if (a1 >= 2)
        {
          v25 = 0;
          v26 = v12;
          do
          {
            v27 = (_BYTE *)(v14 + v25);
            v28 = sChromaTableFtoV[v15[v25 + 1]];
            *v27 = sChromaTableFtoV[v15[v25]];
            v27[1] = v28;
            v25 += 2;
            --v26;
          }
          while (v26);
        }
      }
      else
      {
        v16 += v7 + v7;
        v13 += v9 + v9;
      }
      v15 += v8;
      v14 += v10;
      ++v6;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_420f_y420(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t i;
  unsigned __int8 *v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  _BYTE *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  char v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = a5[1];
    v11 = a5[2];
    v12 = a1 >> 1;
    v14 = a6[1];
    v13 = a6[2];
    v15 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v12 = 1;
    v16 = *a4;
    v17 = a4[1];
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          v15[i] = sLumaTableFtoV[v16[i]];
        v20 = &v16[v7];
        v21 = &v15[v9];
        v22 = v20;
        v23 = v21;
        v24 = a1;
        do
        {
          v25 = *v22++;
          *v23++ = sLumaTableFtoV[v25];
          --v24;
        }
        while (v24);
        v16 = &v20[v7];
        v15 = &v21[v9];
        if (a1 >= 2)
        {
          v26 = 0;
          v27 = v17;
          do
          {
            v28 = sChromaTableFtoV[v27[1]];
            *(_BYTE *)(v14 + v26) = sChromaTableFtoV[*v27];
            *(_BYTE *)(v13 + v26) = v28;
            v27 += 2;
            ++v26;
          }
          while (v12 != v26);
        }
      }
      else
      {
        v16 += v7 + v7;
        v15 += v9 + v9;
      }
      v17 += v8;
      v14 += v10;
      v13 += v11;
      ++v6;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_420f_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  _WORD *v27;
  unint64_t v28;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v18 = (unsigned __int8 *)(a3[1] + v15 * (v9 >> 1) + v8);
    v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        LOWORD(v22) = 0;
        LOWORD(v23) = 0;
        v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v25 = *v24;
            v26 = v24[1];
            v24 += 2;
            v23 = ((16843010 * (unint64_t)(57344 * v25)) >> 32) + 4096;
            v22 = ((16843010 * (unint64_t)(57344 * v26)) >> 32) + 4096;
          }
          v27 = (_WORD *)(v17 + v20);
          v28 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + v21))) >> 32;
          *v27 = -1;
          v27[1] = v28 + 4096;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420f_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  _BYTE *v27;
  unsigned int v28;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + a6[4];
    v18 = (unsigned __int8 *)(a3[1] + v15 * (v9 >> 1) + v8);
    v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        LOBYTE(v22) = 0;
        LOBYTE(v23) = 0;
        v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v25 = *v24;
            v26 = v24[1];
            v24 += 2;
            v23 = ((7368928 * v25) >> 23) + 16;
            v22 = ((7368928 * v26) >> 23) + 16;
          }
          v27 = (_BYTE *)(v17 + v20);
          v28 = (7204443 * *(unsigned __int8 *)(v19 + v21)) >> 23;
          *v27 = -1;
          v27[1] = v28 + 16;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420f_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFELL;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v12 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v10 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40);
  v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(_QWORD *)(a6 + 24))
    v13 = *(_QWORD *)(a6 + 24);
  if (v13)
  {
    v14 = 0;
    v15 = *a4;
    v16 = a4[1];
    v17 = *a8;
    v18 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v11;
    v19 = a3[1] + v16 * (v9 >> 1) + (v8 & 0xFFFFFFFFFFFFFFFELL);
    v20 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v12)
      {
        v21 = 0;
        for (i = 0; i < v12; i += 2)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v20 + i))) >> 32;
          v26 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v20 + i + 1))) >> 32;
          *v23 = ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v19 + i))) >> 32) + 4096;
          v23[1] = v25 + 4096;
          v23[2] = v24 + 4096;
          v23[3] = v26 + 4096;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_420f_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t j;
  unsigned __int8 *v48;
  _WORD *v49;
  unint64_t v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  _WORD *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  _WORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v18 + 4 * v17);
  v21 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v21 >= a6[2])
    v21 = a6[2];
  v22 = v13 - v12 + v14;
  if (v22 >= a6[3])
    v22 = a6[3];
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = v27 + (v9 & 0xFFFFFFFE) + v28;
    v30 = a7[2] + v26 * v18 + 2 * v17;
    v31 = *a7 + v25 * v18 + 2 * v17;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v30 + 2 * i) = -1;
          *(_WORD *)(v31 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
        }
      }
      v29 += v24;
      v31 += v25;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
  }
  v33 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v33)
    v33 = v22 >> 1;
  v34 = v9;
  v35 = v21 >> 1;
  v36 = v9 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1)
    v35 = (v21 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v44 = v16[1];
      v37 = v16 + 2;
      *v20 = ((16843010 * (unint64_t)(57344 * *v16)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
      v38 = v20 + 2;
      if (v35)
      {
LABEL_21:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v37[1];
          v37 += 2;
          *v38 = ((16843010 * (unint64_t)(57344 * v40)) >> 32) + 4096;
          v38[1] = ((16843010 * (unint64_t)(57344 * v41)) >> 32) + 4096;
          v38 += 2;
          v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        v43 = 2 * v35;
        goto LABEL_27;
      }
    }
    else
    {
      v37 = v16;
      v38 = v20;
      if (v35)
        goto LABEL_21;
    }
    v43 = 0;
LABEL_27:
    if ((v43 | (unint64_t)v36) < v21)
    {
      v45 = *v37;
      v46 = v37[1];
      *v38 = ((16843010 * (unint64_t)(57344 * v45)) >> 32) + 4096;
      v38[1] = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
    }
    v16 += v15;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v48 = v16;
      v49 = v20;
      if ((v34 & 1) != 0)
      {
        v48 = v16 + 2;
        v50 = (16843010 * (unint64_t)(57344 * v16[1])) >> 32;
        v51 = ((16843010 * (unint64_t)(57344 * *v16)) >> 32) + 4096;
        *v20 = v51;
        LOWORD(v50) = v50 + 4096;
        v20[1] = v50;
        v52 = (_WORD *)((char *)v20 + v19);
        *v52 = v51;
        v52[1] = v50;
        v49 = v20 + 2;
      }
      if (v35)
      {
        v53 = -(uint64_t)v35;
        do
        {
          v54 = 57344 * v48[1];
          v55 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          *v49 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          v56 = ((16843010 * (unint64_t)v54) >> 32) + 4096;
          v49[1] = v56;
          v49[2] = v55;
          v49[3] = v56;
          v57 = (_WORD *)((char *)v49 + v19);
          *v57 = v55;
          v57[1] = v56;
          v48 += 2;
          v57[2] = v55;
          v57[3] = v56;
          v49 += 4;
          v42 = __CFADD__(v53++, 1);
        }
        while (!v42);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        v58 = *v48;
        v59 = v48[1];
        v60 = ((16843010 * (unint64_t)(57344 * v58)) >> 32) + 4096;
        *v49 = v60;
        v61 = ((16843010 * (unint64_t)(57344 * v59)) >> 32) + 4096;
        v49[1] = v61;
        v62 = (_WORD *)((char *)v49 + v19);
        *v62 = v60;
        v62[1] = v61;
      }
      v16 += v15;
      v20 += v19;
    }
    v63 = 2 * v33;
  }
  else
  {
    v63 = 0;
  }
  if ((v63 | v8 & 1) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v64 = *v16;
      v65 = v16[1];
      v16 += 2;
      *v20 = ((16843010 * (unint64_t)(57344 * v64)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v65)) >> 32) + 4096;
      v20 += 2;
    }
    if (v35)
    {
      v66 = -(uint64_t)v35;
      do
      {
        v67 = *v16;
        v68 = v16[1];
        v16 += 2;
        *v20 = ((16843010 * (unint64_t)(57344 * v67)) >> 32) + 4096;
        v20[1] = ((16843010 * (unint64_t)(57344 * v68)) >> 32) + 4096;
        v20 += 2;
        v42 = __CFADD__(v66++, 1);
      }
      while (!v42);
      v69 = 2 * v35;
    }
    else
    {
      v69 = 0;
    }
    if ((v69 | (unint64_t)v36) < v21)
    {
      v70 = *v16;
      v71 = v16[1];
      *v20 = ((16843010 * (unint64_t)(57344 * v70)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v71)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  unint64_t v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  _WORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31)
    v31 = v22 >> 1;
  v32 = v9;
  v33 = v21 >> 1;
  v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1)
    v33 = (v21 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v42 = v14[1];
      v35 = v14 + 2;
      *v20 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v42)) >> 32) + 4096;
      v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35;
          v39 = v35[1];
          v35 += 2;
          *v36 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
          v36[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (v33)
        goto LABEL_21;
    }
    v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      v43 = *v35;
      v44 = v35[1];
      *v36 = ((16843010 * (unint64_t)(57344 * v43)) >> 32) + 4096;
      v36[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v46 = v14;
      v47 = v20;
      if ((v32 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        v49 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        *v20 = v49;
        LOWORD(v48) = v48 + 4096;
        v20[1] = v48;
        v50 = (_WORD *)((char *)v20 + v19);
        *v50 = v49;
        v50[1] = v48;
        v47 = v20 + 2;
      }
      if (v33)
      {
        v51 = -(uint64_t)v33;
        do
        {
          v52 = 57344 * v46[1];
          v53 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          *v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v54 = ((16843010 * (unint64_t)v52) >> 32) + 4096;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v55 = (_WORD *)((char *)v47 + v19);
          *v55 = v53;
          v55[1] = v54;
          v46 += 2;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        v56 = *v46;
        v57 = v46[1];
        v58 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
        *v47 = v58;
        v59 = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
        v47[1] = v59;
        v60 = (_WORD *)((char *)v47 + v19);
        *v60 = v58;
        v60[1] = v59;
      }
      v14 += v13;
      v20 += v19;
    }
    v61 = 2 * v31;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if ((v32 & 1) != 0)
    {
      v62 = *v14;
      v63 = v14[1];
      v14 += 2;
      *v20 = ((16843010 * (unint64_t)(57344 * v62)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v63)) >> 32) + 4096;
      v20 += 2;
    }
    if (v33)
    {
      v64 = -(uint64_t)v33;
      do
      {
        v65 = *v14;
        v66 = v14[1];
        v14 += 2;
        *v20 = ((16843010 * (unint64_t)(57344 * v65)) >> 32) + 4096;
        v20[1] = ((16843010 * (unint64_t)(57344 * v66)) >> 32) + 4096;
        v20 += 2;
        v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      v67 = 2 * v33;
    }
    else
    {
      v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      v68 = *v14;
      v69 = v14[1];
      *v20 = ((16843010 * (unint64_t)(57344 * v68)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v69)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  _WORD *v56;
  __int16 v57;
  __int16 v58;
  _WORD *v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  __int16 v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) | (*(unsigned __int8 *)(v28 + i) << 8);
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v43 = v14[1] | (v14[1] << 8);
      *v20 = *v14 | (*v14 << 8);
      v20[1] = v43;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 | (v39 << 8);
          v37[1] = v40 | (v40 << 8);
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 | (*v36 << 8);
      v45 = v36[1] | (v36[1] << 8);
      *v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = *v14 | (*v14 << 8);
        v50 = v14[1] | (v14[1] << 8);
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = v47[1];
          v54 = *v47 | (*v47 << 8);
          *v48 = v54;
          v55 = v53 | (v53 << 8);
          v48[1] = v55;
          v47 += 2;
          v48[2] = v54;
          v48[3] = v55;
          v56 = (_WORD *)((char *)v48 + v19);
          *v56 = v54;
          v56[1] = v55;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v57 = *v47 | (*v47 << 8);
        v58 = v47[1] | (v47[1] << 8);
        *v48 = v57;
        v48[1] = v58;
        v59 = (_WORD *)((char *)v48 + v19);
        *v59 = v57;
        v59[1] = v58;
      }
      v14 += v13;
      v20 += v19;
    }
    v60 = 2 * v32;
  }
  else
  {
    v60 = 0;
  }
  if ((v60 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v61 = *v14;
      v62 = v14[1];
      v14 += 2;
      *v20 = v61 | (v61 << 8);
      v20[1] = v62 | (v62 << 8);
      v20 += 2;
    }
    if (v34)
    {
      v63 = -(uint64_t)v34;
      do
      {
        v64 = *v14;
        v65 = v14[1];
        v14 += 2;
        *v20 = v64 | (v64 << 8);
        v20[1] = v65 | (v65 << 8);
        v20 += 2;
        v41 = __CFADD__(v63++, 1);
      }
      while (!v41);
      v66 = 2 * v34;
    }
    else
    {
      v66 = 0;
    }
    if ((v66 | (unint64_t)v35) < v21)
    {
      v67 = *v14 | (*v14 << 8);
      v68 = v14[1] | (v14[1] << 8);
      *v20 = v67;
      v20[1] = v68;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t j;
  unsigned __int8 *v48;
  _WORD *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  _WORD *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + v27 * v12;
    if (v12 >= v11)
      v31 = 0;
    else
      v31 = v27;
    v32 = v30 + v9 + v8 + v31;
    v33 = a7[2] + v29 * v19 + v20;
    v34 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
        }
      }
      v32 += v27;
      v34 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  v36 = v11 & 1;
  if (v25 >> 1 >= (v25 - v36) >> 1)
    v37 = (v25 - (v11 & 1)) >> 1;
  else
    v37 = v25 >> 1;
  v38 = v8;
  v39 = v24 >> 1;
  v40 = (v24 - v9) >> 1;
  if (v39 >= v40)
    v39 = v40;
  if ((v11 & 1) != 0)
  {
    if ((v38 & 1) != 0)
    {
      v43 = v15[1];
      v41 = v15 + 2;
      *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v43)) >> 32) + 4096;
      v42 = v22 + 2;
      if (!v39)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v41 = v15;
      v42 = v22;
      if (!v39)
        goto LABEL_27;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = (16843010 * (unint64_t)(57344 * v41[1])) >> 32;
      *v42 = ((16843010 * (unint64_t)(57344 * *v41)) >> 32) + 4096;
      v42[1] = v45 + 4096;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_27;
  }
LABEL_28:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v48 = v15;
      v49 = v22;
      if ((v38 & 1) != 0)
      {
        v50 = v15[1];
        v48 = v15 + 2;
        *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = (16843010 * (unint64_t)(57344 * v48[1])) >> 32;
          v53 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          *v49 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          LOWORD(v52) = v52 + 4096;
          v49[1] = v52;
          v54 = (_WORD *)((char *)v49 + v21);
          *v54 = v53;
          v54[1] = v52;
          v49 += 2;
          v48 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 += v14;
      v22 += v21;
    }
    v55 = 2 * v37;
  }
  else
  {
    v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v25)
  {
    if ((v38 & 1) != 0)
    {
      v56 = *v15;
      v57 = v15[1];
      v15 += 2;
      *v22 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
      v22 += 2;
    }
    if (v39)
    {
      v58 = -(uint64_t)v39;
      do
      {
        v59 = (16843010 * (unint64_t)(57344 * v15[1])) >> 32;
        *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = v59 + 4096;
        v15 += 2;
        v22 += 2;
        v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v41)) >> 32) + 4096;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = (16843010 * (unint64_t)(57344 * v39[1])) >> 32;
      *v40 = ((16843010 * (unint64_t)(57344 * *v39)) >> 32) + 4096;
      v40[1] = v43 + 4096;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          v51 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          *v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          LOWORD(v50) = v50 + 4096;
          v47[1] = v50;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = (16843010 * (unint64_t)(57344 * v15[1])) >> 32;
        *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = v57 + 4096;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v15 + 2;
      v41 = v15[1] | (v15[1] << 8);
      *v22 = *v15 | (*v15 << 8);
      v22[1] = v41;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] | (v39[1] << 8);
      *v40 = *v39 | (*v39 << 8);
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v46 = v15 + 2;
        v48 = v15[1] | (v15[1] << 8);
        *v22 = *v15 | (*v15 << 8);
        v22[1] = v48;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = *v46 | (*v46 << 8);
          v51 = v46[1] | (v46[1] << 8);
          *v47 = v50;
          v47[1] = v51;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = v54 | (v54 << 8);
      v22[1] = v55 | (v55 << 8);
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = v15[1] | (v15[1] << 8);
        *v22 = *v15 | (*v15 << 8);
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v25 >> 1;
  v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v41)) >> 32) + 4096;
      v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (16843010 * (unint64_t)(57344 * v39[1])) >> 32;
      *v40 = ((16843010 * (unint64_t)(57344 * *v39)) >> 32) + 4096;
      v40[1] = v43 + 4096;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v38)
      {
        v49 = -(uint64_t)v38;
        do
        {
          v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v47[1] = v50 + 4096;
          v46 += 2;
          v47 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  BOOL v45;
  uint64_t j;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - v12;
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 2;
      v42 = v16[1] | (v16[1] << 8);
      *v23 = *v16 | (*v16 << 8);
      v23[1] = v42;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = v40[1] | (v40[1] << 8);
      *v41 = *v40 | (*v40 << 8);
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] | (v16[1] << 8);
        *v23 = *v16 | (*v16 << 8);
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = v47[1] | (v47[1] << 8);
          *v48 = *v47 | (*v47 << 8);
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t j;
  unsigned __int8 *v48;
  _WORD *v49;
  unint64_t v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _WORD *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _WORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v18 + 4 * v17);
  v21 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v21 >= a6[2])
    v21 = a6[2];
  v22 = v13 - v12 + v14;
  if (v22 >= a6[3])
    v22 = a6[3];
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = v27 + (v9 & 0xFFFFFFFE) + v28;
    v30 = a7[2] + v26 * v18 + 2 * v17;
    v31 = *a7 + v25 * v18 + 2 * v17;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v30 + 2 * i) = -1;
          *(_WORD *)(v31 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
        }
      }
      v29 += v24;
      v31 += v25;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
  }
  v33 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v33)
    v33 = v22 >> 1;
  v34 = v9;
  v35 = v21 >> 1;
  v36 = v9 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1)
    v35 = (v21 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v44 = v16[1];
      v37 = v16 + 2;
      *v20 = 16 * ((16843010 * (unint64_t)(3584 * *v16)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
      v38 = v20 + 2;
      if (v35)
      {
LABEL_21:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v37[1];
          v37 += 2;
          *v38 = 16 * ((16843010 * (unint64_t)(3584 * v40)) >> 32) + 4096;
          v38[1] = 16 * ((16843010 * (unint64_t)(3584 * v41)) >> 32) + 4096;
          v38 += 2;
          v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        v43 = 2 * v35;
        goto LABEL_27;
      }
    }
    else
    {
      v37 = v16;
      v38 = v20;
      if (v35)
        goto LABEL_21;
    }
    v43 = 0;
LABEL_27:
    if ((v43 | (unint64_t)v36) < v21)
    {
      v45 = *v37;
      v46 = v37[1];
      *v38 = 16 * ((16843010 * (unint64_t)(3584 * v45)) >> 32) + 4096;
      v38[1] = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
    }
    v16 += v15;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v48 = v16;
      v49 = v20;
      if ((v34 & 1) != 0)
      {
        v48 = v16 + 2;
        v50 = (16843010 * (unint64_t)(3584 * v16[1])) >> 32;
        v51 = 16 * ((16843010 * (unint64_t)(3584 * *v16)) >> 32) + 4096;
        *v20 = v51;
        LOWORD(v50) = 16 * v50 + 4096;
        v20[1] = v50;
        v52 = (_WORD *)((char *)v20 + v19);
        *v52 = v51;
        v52[1] = v50;
        v49 = v20 + 2;
      }
      if (v35)
      {
        v53 = -(uint64_t)v35;
        do
        {
          v54 = 60365347840 * v48[1];
          v55 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          *v49 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          LOWORD(v54) = 16 * WORD2(v54) + 4096;
          v49[1] = v54;
          v49[2] = v55;
          v49[3] = v54;
          v56 = (_WORD *)((char *)v49 + v19);
          *v56 = v55;
          v56[1] = v54;
          v48 += 2;
          v56[2] = v55;
          v56[3] = v54;
          v49 += 4;
          v42 = __CFADD__(v53++, 1);
        }
        while (!v42);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        v57 = *v48;
        v58 = v48[1];
        v59 = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
        *v49 = v59;
        v60 = 16 * ((16843010 * (unint64_t)(3584 * v58)) >> 32) + 4096;
        v49[1] = v60;
        v61 = (_WORD *)((char *)v49 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v16 += v15;
      v20 += v19;
    }
    v62 = 2 * v33;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | v8 & 1) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v63 = *v16;
      v64 = v16[1];
      v16 += 2;
      *v20 = 16 * ((16843010 * (unint64_t)(3584 * v63)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v64)) >> 32) + 4096;
      v20 += 2;
    }
    if (v35)
    {
      v65 = -(uint64_t)v35;
      do
      {
        v66 = *v16;
        v67 = v16[1];
        v16 += 2;
        *v20 = 16 * ((16843010 * (unint64_t)(3584 * v66)) >> 32) + 4096;
        v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v67)) >> 32) + 4096;
        v20 += 2;
        v42 = __CFADD__(v65++, 1);
      }
      while (!v42);
      v68 = 2 * v35;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v36) < v21)
    {
      v69 = *v16;
      v70 = v16[1];
      *v20 = 16 * ((16843010 * (unint64_t)(3584 * v69)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v70)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  unint64_t v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _WORD *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _WORD *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31)
    v31 = v22 >> 1;
  v32 = v9;
  v33 = v21 >> 1;
  v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1)
    v33 = (v21 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v42 = v14[1];
      v35 = v14 + 2;
      *v20 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v42)) >> 32) + 4096;
      v36 = v20 + 2;
      if (v33)
      {
LABEL_22:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35;
          v39 = v35[1];
          v35 += 2;
          *v36 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
          v36[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (v33)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v34) < v21)
    {
      v43 = *v35;
      v44 = v35[1];
      *v36 = 16 * ((16843010 * (unint64_t)(3584 * v43)) >> 32) + 4096;
      v36[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v46 = v14;
      v47 = v20;
      if ((v32 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        v49 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        *v20 = v49;
        LOWORD(v48) = 16 * v48 + 4096;
        v20[1] = v48;
        v50 = (_WORD *)((char *)v20 + v19);
        *v50 = v49;
        v50[1] = v48;
        v47 = v20 + 2;
      }
      if (v33)
      {
        v51 = -(uint64_t)v33;
        do
        {
          v52 = 60365347840 * v46[1];
          v53 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          *v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          LOWORD(v52) = 16 * WORD2(v52) + 4096;
          v47[1] = v52;
          v47[2] = v53;
          v47[3] = v52;
          v54 = (_WORD *)((char *)v47 + v19);
          *v54 = v53;
          v54[1] = v52;
          v46 += 2;
          v54[2] = v53;
          v54[3] = v52;
          v47 += 4;
          v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        v55 = *v46;
        v56 = v46[1];
        v57 = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        *v47 = v57;
        v58 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v47[1] = v58;
        v59 = (_WORD *)((char *)v47 + v19);
        *v59 = v57;
        v59[1] = v58;
      }
      v14 += v13;
      v20 += v19;
    }
    v60 = 2 * v31;
  }
  else
  {
    v60 = 0;
  }
  if ((v60 | v8 & 1) < v22)
  {
    if ((v32 & 1) != 0)
    {
      v61 = *v14;
      v62 = v14[1];
      v14 += 2;
      *v20 = 16 * ((16843010 * (unint64_t)(3584 * v61)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v62)) >> 32) + 4096;
      v20 += 2;
    }
    if (v33)
    {
      v63 = -(uint64_t)v33;
      do
      {
        v64 = *v14;
        v65 = v14[1];
        v14 += 2;
        *v20 = 16 * ((16843010 * (unint64_t)(3584 * v64)) >> 32) + 4096;
        v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v65)) >> 32) + 4096;
        v20 += 2;
        v40 = __CFADD__(v63++, 1);
      }
      while (!v40);
      v66 = 2 * v33;
    }
    else
    {
      v66 = 0;
    }
    if ((v66 | (unint64_t)v34) < v21)
    {
      v67 = *v14;
      v68 = v14[1];
      *v20 = 16 * ((16843010 * (unint64_t)(3584 * v67)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v68)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  unint64_t v48;
  int v49;
  _WORD *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  _WORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v28 + i))) >> 32);
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31)
    v31 = v22 >> 1;
  v32 = v9;
  v33 = v21 >> 1;
  v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1)
    v33 = (v21 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v42 = v14[1];
      v35 = v14 + 2;
      *v20 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
      v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v42)) >> 32);
      v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35;
          v39 = v35[1];
          v35 += 2;
          *v36 = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
          v36[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (v33)
        goto LABEL_21;
    }
    v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      v43 = *v35;
      v44 = v35[1];
      *v36 = 16 * ((16843010 * (unint64_t)(4095 * v43)) >> 32);
      v36[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v46 = v14;
      v47 = v20;
      if ((v32 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = (16843010 * (unint64_t)(4095 * v14[1])) >> 32;
        v49 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        *v20 = v49;
        LOWORD(v48) = 16 * v48;
        v20[1] = v48;
        v50 = (_WORD *)((char *)v20 + v19);
        *v50 = v49;
        v50[1] = v48;
        v47 = v20 + 2;
      }
      if (v33)
      {
        v51 = -(uint64_t)v33;
        do
        {
          v52 = 4095 * v46[1];
          v53 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          *v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          v54 = 16 * ((16843010 * (unint64_t)v52) >> 32);
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v46 += 2;
          v55 = (_WORD *)((char *)v47 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        v56 = *v46;
        v57 = v46[1];
        v58 = 16 * ((16843010 * (unint64_t)(4095 * v56)) >> 32);
        *v47 = v58;
        v59 = 16 * ((16843010 * (unint64_t)(4095 * v57)) >> 32);
        v47[1] = v59;
        v60 = (_WORD *)((char *)v47 + v19);
        *v60 = v58;
        v60[1] = v59;
      }
      v14 += v13;
      v20 += v19;
    }
    v61 = 2 * v31;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if ((v32 & 1) != 0)
    {
      v62 = *v14;
      v63 = v14[1];
      v14 += 2;
      *v20 = 16 * ((16843010 * (unint64_t)(4095 * v62)) >> 32);
      v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v63)) >> 32);
      v20 += 2;
    }
    if (v33)
    {
      v64 = -(uint64_t)v33;
      do
      {
        v65 = *v14;
        v66 = v14[1];
        v14 += 2;
        *v20 = 16 * ((16843010 * (unint64_t)(4095 * v65)) >> 32);
        v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v66)) >> 32);
        v20 += 2;
        v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      v67 = 2 * v33;
    }
    else
    {
      v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      v68 = *v14;
      v69 = v14[1];
      *v20 = 16 * ((16843010 * (unint64_t)(4095 * v68)) >> 32);
      v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v69)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t j;
  unsigned __int8 *v48;
  _WORD *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  _WORD *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + v27 * v12;
    if (v12 >= v11)
      v31 = 0;
    else
      v31 = v27;
    v32 = v30 + v9 + v8 + v31;
    v33 = a7[2] + v29 * v19 + v20;
    v34 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
        }
      }
      v32 += v27;
      v34 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  v36 = v11 & 1;
  if (v25 >> 1 >= (v25 - v36) >> 1)
    v37 = (v25 - (v11 & 1)) >> 1;
  else
    v37 = v25 >> 1;
  v38 = v8;
  v39 = v24 >> 1;
  v40 = (v24 - v9) >> 1;
  if (v39 >= v40)
    v39 = v40;
  if ((v11 & 1) != 0)
  {
    if ((v38 & 1) != 0)
    {
      v43 = v15[1];
      v41 = v15 + 2;
      *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v43)) >> 32) + 4096;
      v42 = v22 + 2;
      if (!v39)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v41 = v15;
      v42 = v22;
      if (!v39)
        goto LABEL_27;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = (16843010 * (unint64_t)(3584 * v41[1])) >> 32;
      *v42 = 16 * ((16843010 * (unint64_t)(3584 * *v41)) >> 32) + 4096;
      v42[1] = 16 * v45 + 4096;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_27;
  }
LABEL_28:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v48 = v15;
      v49 = v22;
      if ((v38 & 1) != 0)
      {
        v50 = v15[1];
        v48 = v15 + 2;
        *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = (16843010 * (unint64_t)(3584 * v48[1])) >> 32;
          v53 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          *v49 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          LOWORD(v52) = 16 * v52 + 4096;
          v49[1] = v52;
          v54 = (_WORD *)((char *)v49 + v21);
          *v54 = v53;
          v54[1] = v52;
          v49 += 2;
          v48 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 += v14;
      v22 += v21;
    }
    v55 = 2 * v37;
  }
  else
  {
    v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v25)
  {
    if ((v38 & 1) != 0)
    {
      v56 = *v15;
      v57 = v15[1];
      v15 += 2;
      *v22 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v22 += 2;
    }
    if (v39)
    {
      v58 = -(uint64_t)v39;
      do
      {
        v59 = (16843010 * (unint64_t)(3584 * v15[1])) >> 32;
        *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * v59 + 4096;
        v15 += 2;
        v22 += 2;
        v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v41)) >> 32) + 4096;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = (16843010 * (unint64_t)(3584 * v39[1])) >> 32;
      *v40 = 16 * ((16843010 * (unint64_t)(3584 * *v39)) >> 32) + 4096;
      v40[1] = 16 * v43 + 4096;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          v51 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          *v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          LOWORD(v50) = 16 * v50 + 4096;
          v47[1] = v50;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = (16843010 * (unint64_t)(3584 * v15[1])) >> 32;
        *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * v57 + 4096;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v41)) >> 32);
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = (16843010 * (unint64_t)(4095 * v39[1])) >> 32;
      *v40 = 16 * ((16843010 * (unint64_t)(4095 * *v39)) >> 32);
      v40[1] = 16 * v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          v51 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          *v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          LOWORD(v50) = 16 * v50;
          v47[1] = v50;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = 16 * ((16843010 * (unint64_t)(4095 * v54)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v55)) >> 32);
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = (16843010 * (unint64_t)(4095 * v15[1])) >> 32;
        *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * v57;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v25 >> 1;
  v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v41)) >> 32) + 4096;
      v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (16843010 * (unint64_t)(3584 * v39[1])) >> 32;
      *v40 = 16 * ((16843010 * (unint64_t)(3584 * *v39)) >> 32) + 4096;
      v40[1] = 16 * v43 + 4096;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v38)
      {
        v49 = -(uint64_t)v38;
        do
        {
          v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v47[1] = 16 * v50 + 4096;
          v46 += 2;
          v47 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v25 >> 1;
  v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v41)) >> 32);
      v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (16843010 * (unint64_t)(4095 * v39[1])) >> 32;
      *v40 = 16 * ((16843010 * (unint64_t)(4095 * *v39)) >> 32);
      v40[1] = 16 * v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        v47 = v22 + 2;
      }
      if (v38)
      {
        v49 = -(uint64_t)v38;
        do
        {
          v50 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          *v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          v47[1] = 16 * v50;
          v46 += 2;
          v47 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t j;
  unsigned __int8 *v48;
  _WORD *v49;
  unint64_t v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _WORD *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _WORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v18 + 4 * v17);
  v21 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v21 >= a6[2])
    v21 = a6[2];
  v22 = v13 - v12 + v14;
  if (v22 >= a6[3])
    v22 = a6[3];
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = v27 + (v9 & 0xFFFFFFFE) + v28;
    v30 = a7[2] + v26 * v18 + 2 * v17;
    v31 = *a7 + v25 * v18 + 2 * v17;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v30 + 2 * i) = -1;
          *(_WORD *)(v31 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v29 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v29 += v24;
      v31 += v25;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
  }
  v33 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v33)
    v33 = v22 >> 1;
  v34 = v9;
  v35 = v21 >> 1;
  v36 = v9 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1)
    v35 = (v21 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v44 = v16[1];
      v37 = v16 + 2;
      *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v16)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
      v38 = v20 + 2;
      if (v35)
      {
LABEL_21:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v37[1];
          v37 += 2;
          *v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
          v38[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
          v38 += 2;
          v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        v43 = 2 * v35;
        goto LABEL_27;
      }
    }
    else
    {
      v37 = v16;
      v38 = v20;
      if (v35)
        goto LABEL_21;
    }
    v43 = 0;
LABEL_27:
    if ((v43 | (unint64_t)v36) < v21)
    {
      v45 = *v37;
      v46 = v37[1];
      *v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
      v38[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
    }
    v16 += v15;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v48 = v16;
      v49 = v20;
      if ((v34 & 1) != 0)
      {
        v48 = v16 + 2;
        v50 = (16843010 * (unint64_t)(896 * v16[1])) >> 32;
        v51 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v16)) >> 32) << 6) + 4096;
        *v20 = v51;
        LOWORD(v50) = ((_WORD)v50 << 6) + 4096;
        v20[1] = v50;
        v52 = (_WORD *)((char *)v20 + v19);
        *v52 = v51;
        v52[1] = v50;
        v49 = v20 + 2;
      }
      if (v35)
      {
        v53 = -(uint64_t)v35;
        do
        {
          v54 = 15091336960 * v48[1];
          v55 = ((16843010 * (unint64_t)(896 * *v48)) >> 32 << 6) + 4096;
          *v49 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v48)) >> 32) << 6) + 4096;
          LOWORD(v54) = (WORD2(v54) << 6) + 4096;
          v49[1] = v54;
          v49[2] = v55;
          v49[3] = v54;
          v56 = (_WORD *)((char *)v49 + v19);
          *v56 = v55;
          v56[1] = v54;
          v48 += 2;
          v56[2] = v55;
          v56[3] = v54;
          v49 += 4;
          v42 = __CFADD__(v53++, 1);
        }
        while (!v42);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        v57 = *v48;
        v58 = v48[1];
        v59 = ((16843010 * (unint64_t)(896 * v57)) >> 32 << 6) + 4096;
        *v49 = v59;
        v60 = ((16843010 * (unint64_t)(896 * v58)) >> 32 << 6) + 4096;
        v49[1] = v60;
        v61 = (_WORD *)((char *)v49 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v16 += v15;
      v20 += v19;
    }
    v62 = 2 * v33;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | v8 & 1) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v63 = *v16;
      v64 = v16[1];
      v16 += 2;
      *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v63)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v64)) >> 32) << 6) + 4096;
      v20 += 2;
    }
    if (v35)
    {
      v65 = -(uint64_t)v35;
      do
      {
        v66 = *v16;
        v67 = v16[1];
        v16 += 2;
        *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
        v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v67)) >> 32) << 6) + 4096;
        v20 += 2;
        v42 = __CFADD__(v65++, 1);
      }
      while (!v42);
      v68 = 2 * v35;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v36) < v21)
    {
      v69 = *v16;
      v70 = v16[1];
      *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v69)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v70)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  unint64_t v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _WORD *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _WORD *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v28 + i))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31)
    v31 = v22 >> 1;
  v32 = v9;
  v33 = v21 >> 1;
  v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1)
    v33 = (v21 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v42 = v14[1];
      v35 = v14 + 2;
      *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
      v36 = v20 + 2;
      if (v33)
      {
LABEL_22:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35;
          v39 = v35[1];
          v35 += 2;
          *v36 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
          v36[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (v33)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v34) < v21)
    {
      v43 = *v35;
      v44 = v35[1];
      *v36 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
      v36[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v46 = v14;
      v47 = v20;
      if ((v32 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        v49 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        *v20 = v49;
        LOWORD(v48) = ((_WORD)v48 << 6) + 4096;
        v20[1] = v48;
        v50 = (_WORD *)((char *)v20 + v19);
        *v50 = v49;
        v50[1] = v48;
        v47 = v20 + 2;
      }
      if (v33)
      {
        v51 = -(uint64_t)v33;
        do
        {
          v52 = 15091336960 * v46[1];
          v53 = ((16843010 * (unint64_t)(896 * *v46)) >> 32 << 6) + 4096;
          *v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          LOWORD(v52) = (WORD2(v52) << 6) + 4096;
          v47[1] = v52;
          v47[2] = v53;
          v47[3] = v52;
          v54 = (_WORD *)((char *)v47 + v19);
          *v54 = v53;
          v54[1] = v52;
          v46 += 2;
          v54[2] = v53;
          v54[3] = v52;
          v47 += 4;
          v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        v55 = *v46;
        v56 = v46[1];
        v57 = ((16843010 * (unint64_t)(896 * v55)) >> 32 << 6) + 4096;
        *v47 = v57;
        v58 = ((16843010 * (unint64_t)(896 * v56)) >> 32 << 6) + 4096;
        v47[1] = v58;
        v59 = (_WORD *)((char *)v47 + v19);
        *v59 = v57;
        v59[1] = v58;
      }
      v14 += v13;
      v20 += v19;
    }
    v60 = 2 * v31;
  }
  else
  {
    v60 = 0;
  }
  if ((v60 | v8 & 1) < v22)
  {
    if ((v32 & 1) != 0)
    {
      v61 = *v14;
      v62 = v14[1];
      v14 += 2;
      *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v61)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v62)) >> 32) << 6) + 4096;
      v20 += 2;
    }
    if (v33)
    {
      v63 = -(uint64_t)v33;
      do
      {
        v64 = *v14;
        v65 = v14[1];
        v14 += 2;
        *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v64)) >> 32) << 6) + 4096;
        v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v65)) >> 32) << 6) + 4096;
        v20 += 2;
        v40 = __CFADD__(v63++, 1);
      }
      while (!v40);
      v66 = 2 * v33;
    }
    else
    {
      v66 = 0;
    }
    if ((v66 | (unint64_t)v34) < v21)
    {
      v67 = *v14;
      v68 = v14[1];
      *v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v67)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _WORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  unint64_t v48;
  int v49;
  _WORD *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  _WORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v28 + i))) >> 32) << 6;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31)
    v31 = v22 >> 1;
  v32 = v9;
  v33 = v21 >> 1;
  v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1)
    v33 = (v21 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v42 = v14[1];
      v35 = v14 + 2;
      *v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
      v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v42)) >> 32) << 6;
      v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *v35;
          v39 = v35[1];
          v35 += 2;
          *v36 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
          v36[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (v33)
        goto LABEL_21;
    }
    v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      v43 = *v35;
      v44 = v35[1];
      *v36 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v43)) >> 32) << 6;
      v36[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
    }
    v14 += v13;
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v46 = v14;
      v47 = v20;
      if ((v32 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = (16843010 * (unint64_t)(1023 * v14[1])) >> 32;
        v49 = (16843010 * (unint64_t)(1023 * *v14)) >> 32 << 6;
        *v20 = v49;
        LOWORD(v48) = (_WORD)v48 << 6;
        v20[1] = v48;
        v50 = (_WORD *)((char *)v20 + v19);
        *v50 = v49;
        v50[1] = v48;
        v47 = v20 + 2;
      }
      if (v33)
      {
        v51 = -(uint64_t)v33;
        do
        {
          v52 = 1023 * v46[1];
          v53 = (16843010 * (unint64_t)(1023 * *v46)) >> 32 << 6;
          *v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          v54 = (16843010 * (unint64_t)v52) >> 32 << 6;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v46 += 2;
          v55 = (_WORD *)((char *)v47 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        v56 = *v46;
        v57 = v46[1];
        v58 = (16843010 * (unint64_t)(1023 * v56)) >> 32 << 6;
        *v47 = v58;
        v59 = (16843010 * (unint64_t)(1023 * v57)) >> 32 << 6;
        v47[1] = v59;
        v60 = (_WORD *)((char *)v47 + v19);
        *v60 = v58;
        v60[1] = v59;
      }
      v14 += v13;
      v20 += v19;
    }
    v61 = 2 * v31;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if ((v32 & 1) != 0)
    {
      v62 = *v14;
      v63 = v14[1];
      v14 += 2;
      *v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v62)) >> 32) << 6;
      v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v63)) >> 32) << 6;
      v20 += 2;
    }
    if (v33)
    {
      v64 = -(uint64_t)v33;
      do
      {
        v65 = *v14;
        v66 = v14[1];
        v14 += 2;
        *v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v65)) >> 32) << 6;
        v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v66)) >> 32) << 6;
        v20 += 2;
        v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      v67 = 2 * v33;
    }
    else
    {
      v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      v68 = *v14;
      v69 = v14[1];
      *v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v68)) >> 32) << 6;
      v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v69)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  _WORD *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t j;
  unsigned __int8 *v48;
  _WORD *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  _WORD *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + v27 * v12;
    if (v12 >= v11)
      v31 = 0;
    else
      v31 = v27;
    v32 = v30 + v9 + v8 + v31;
    v33 = a7[2] + v29 * v19 + v20;
    v34 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v32 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v32 += v27;
      v34 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  v36 = v11 & 1;
  if (v25 >> 1 >= (v25 - v36) >> 1)
    v37 = (v25 - (v11 & 1)) >> 1;
  else
    v37 = v25 >> 1;
  v38 = v8;
  v39 = v24 >> 1;
  v40 = (v24 - v9) >> 1;
  if (v39 >= v40)
    v39 = v40;
  if ((v11 & 1) != 0)
  {
    if ((v38 & 1) != 0)
    {
      v43 = v15[1];
      v41 = v15 + 2;
      *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
      v42 = v22 + 2;
      if (!v39)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v41 = v15;
      v42 = v22;
      if (!v39)
        goto LABEL_27;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = (16843010 * (unint64_t)(896 * v41[1])) >> 32;
      *v42 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v41)) >> 32) << 6) + 4096;
      v42[1] = ((_WORD)v45 << 6) + 4096;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_27;
  }
LABEL_28:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v48 = v15;
      v49 = v22;
      if ((v38 & 1) != 0)
      {
        v50 = v15[1];
        v48 = v15 + 2;
        *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = (16843010 * (unint64_t)(896 * v48[1])) >> 32;
          v53 = ((16843010 * (unint64_t)(896 * *v48)) >> 32 << 6) + 4096;
          *v49 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v48)) >> 32) << 6) + 4096;
          LOWORD(v52) = ((_WORD)v52 << 6) + 4096;
          v49[1] = v52;
          v54 = (_WORD *)((char *)v49 + v21);
          *v54 = v53;
          v54[1] = v52;
          v49 += 2;
          v48 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 += v14;
      v22 += v21;
    }
    v55 = 2 * v37;
  }
  else
  {
    v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v25)
  {
    if ((v38 & 1) != 0)
    {
      v56 = *v15;
      v57 = v15[1];
      v15 += 2;
      *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v39)
    {
      v58 = -(uint64_t)v39;
      do
      {
        v59 = (16843010 * (unint64_t)(896 * v15[1])) >> 32;
        *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v59 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = (16843010 * (unint64_t)(896 * v39[1])) >> 32;
      *v40 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v39)) >> 32) << 6) + 4096;
      v40[1] = ((_WORD)v43 << 6) + 4096;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          v51 = ((16843010 * (unint64_t)(896 * *v46)) >> 32 << 6) + 4096;
          *v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          LOWORD(v50) = ((_WORD)v50 << 6) + 4096;
          v47[1] = v50;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = (16843010 * (unint64_t)(896 * v15[1])) >> 32;
        *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v57 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v10 - (v9 + v8);
  v24 = v18 - v17;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16)
    v25 = v16;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v9 + v8 + v30;
    v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1)
    v35 = (v25 - (v11 & 1)) >> 1;
  else
    v35 = v25 >> 1;
  v36 = v8;
  v37 = v24 >> 1;
  v38 = (v24 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v41)) >> 32) << 6;
      v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
        goto LABEL_27;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = (16843010 * (unint64_t)(1023 * v39[1])) >> 32;
      *v40 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v39)) >> 32) << 6;
      v40[1] = (_WORD)v43 << 6;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v36 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        v47 = v22 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          v51 = (16843010 * (unint64_t)(1023 * *v46)) >> 32 << 6;
          *v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          LOWORD(v50) = (_WORD)v50 << 6;
          v47[1] = v50;
          v52 = (_WORD *)((char *)v47 + v21);
          *v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    v53 = 2 * v35;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if ((v36 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v55)) >> 32) << 6;
      v22 += 2;
    }
    if (v37)
    {
      v56 = -(uint64_t)v37;
      do
      {
        v57 = (16843010 * (unint64_t)(1023 * v15[1])) >> 32;
        *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (_WORD)v57 << 6;
        v15 += 2;
        v22 += 2;
        v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v25 >> 1;
  v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
      v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (16843010 * (unint64_t)(896 * v39[1])) >> 32;
      *v40 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v39)) >> 32) << 6) + 4096;
      v40[1] = ((_WORD)v43 << 6) + 4096;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        v47 = v22 + 2;
      }
      if (v38)
      {
        v49 = -(uint64_t)v38;
        do
        {
          v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v47[1] = ((_WORD)v50 << 6) + 4096;
          v46 += 2;
          v47 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t j;
  unsigned __int8 *v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - v10;
  v24 = v17 - v16;
  if (v23 < v24)
    v24 = v23;
  v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18)
    v25 = v19 - v18;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v10 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  v34 = v25 >> 1;
  v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v24 >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v15[1];
      v39 = v15 + 2;
      *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v41)) >> 32) << 6;
      v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (16843010 * (unint64_t)(1023 * v39[1])) >> 32;
      *v40 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v39)) >> 32) << 6;
      v40[1] = (_WORD)v43 << 6;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v46 = v15;
      v47 = v22;
      if ((v8 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 2;
        *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        v47 = v22 + 2;
      }
      if (v38)
      {
        v49 = -(uint64_t)v38;
        do
        {
          v50 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          *v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          v47[1] = (_WORD)v50 << 6;
          v46 += 2;
          v47 += 2;
          v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_8GRAYSCALE(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a2 >> 1;
    v9 = a1 >> 1;
    v10 = *a6;
    v11 = *a4;
    v12 = 2 * *a3;
    v13 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v14 = v10 + *a5;
    do
    {
      if (a1 >= 2)
      {
        v15 = 0;
        v16 = v11 + v7;
        v17 = v9;
        do
        {
          v18 = (_BYTE *)(v14 + v15);
          v19 = (_BYTE *)(v10 + v15);
          v20 = *(_BYTE *)(v11 + v15 + 1);
          *v19 = ~*(_BYTE *)(v11 + v15);
          v19[1] = ~v20;
          LOBYTE(v19) = *(_BYTE *)(v16 + v15 + 1);
          *v18 = ~*(_BYTE *)(v16 + v15);
          v18[1] = ~(_BYTE)v19;
          v15 += 2;
          --v17;
        }
        while (v17);
      }
      v11 += v12;
      v10 += v13;
      ++v6;
      v14 += v13;
    }
    while (v6 != v8);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_420v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  char v23;
  char v24;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v13 = *a6;
    v12 = a6[1];
    v14 = *a4;
    v15 = 2 * *a5;
    v16 = 2 * v7;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        v18 = 0;
        v19 = v13 + v8;
        v20 = v11;
        do
        {
          v21 = (_BYTE *)(v13 + v18);
          v22 = sLumaTableFtoV[~*(_BYTE *)(v14 + v18 + 1)];
          v23 = sLumaTableFtoV[~*(_BYTE *)(v17 + v18)];
          v24 = sLumaTableFtoV[~*(_BYTE *)(v17 + v18 + 1)];
          *v21 = sLumaTableFtoV[~*(_BYTE *)(v14 + v18)];
          v21[1] = v22;
          *(_BYTE *)(v19 + v18) = v23;
          *(_BYTE *)(v19 + v18 + 1) = v24;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_420f(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  char v23;
  char v24;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v13 = *a6;
    v12 = a6[1];
    v14 = *a4;
    v15 = 2 * *a5;
    v16 = 2 * v7;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        v18 = 0;
        v19 = v13 + v8;
        v20 = v11;
        do
        {
          v21 = (_BYTE *)(v13 + v18);
          v22 = ~*(_BYTE *)(v14 + v18 + 1);
          v23 = ~*(_BYTE *)(v17 + v18);
          v24 = ~*(_BYTE *)(v17 + v18 + 1);
          *v21 = ~*(_BYTE *)(v14 + v18);
          v21[1] = v22;
          *(_BYTE *)(v19 + v18) = v23;
          *(_BYTE *)(v19 + v18 + 1) = v24;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_32ARGB_2vuy(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_2vuy;
  *a11 = vt_VImage_Cleanup_32ARGB_2vuy;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_yuvs(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_yuvs;
  *a11 = vt_VImage_Cleanup_32ARGB_yuvs;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_2vuf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_2vuf;
  *a11 = vt_VImage_Cleanup_32ARGB_2vuf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_yuvf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_yuvf;
  *a11 = vt_VImage_Cleanup_32ARGB_yuvf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_y420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_y420;
  *a11 = vt_VImage_Cleanup_32ARGB_y420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_f420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_f420;
  *a11 = vt_VImage_Cleanup_32ARGB_f420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_420v(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_420v;
  *a11 = vt_VImage_Cleanup_32ARGB_420v;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_420f(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_420f;
  *a11 = vt_VImage_Cleanup_32ARGB_420f;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32ARGB_32BGRA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a6;
    v10 = *a4;
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          *(_DWORD *)(v9 + 4 * i) = bswap32(*(_DWORD *)(v10 + 4 * i));
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_32ARGB_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_32BGRA;
  *a11 = vt_VImage_Cleanup_32ARGB_32BGRA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32ARGB_v210(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_v210;
  *a11 = vt_VImage_Cleanup_32ARGB_v210;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32ARGB_R10k(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_R10k;
  *a11 = vt_VImage_Cleanup_32ARGB_R10k;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32ARGB_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp16, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_v216;
  *a11 = vt_VImage_Cleanup_32ARGB_v216;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_y408(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_y408;
  *a11 = vt_VImage_Cleanup_32ARGB_y408;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444CrYpCb10, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_v410;
  *a11 = vt_VImage_Cleanup_32ARGB_v410;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr16, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_y416;
  *a11 = vt_VImage_Cleanup_32ARGB_y416;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32ARGB_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_RGhA;
  *a11 = vt_VImage_Cleanup_32ARGB_RGhA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_32ARGB_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1095911234, a1);
}

vImage_Error vt_VImage_Copy_32ARGB_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1095911234, a1);
}

size_t vt_VImage_Setup_32ARGB_xw20(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, char a5, _QWORD *a6, _QWORD *a7, void (**a8)(void **a1))
{
  void *v16;
  const vImage_ARGBToYpCbCrMatrix **v17;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v19;
  __int128 v20;
  size_t result;
  void *v22;
  unint64_t v23;
  malloc_type_id_t v24;
  __int128 v25;
  __int128 v26;
  vImage_YpCbCrPixelRange pixelRange;

  v25 = 0u;
  v26 = 0u;
  v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v19 = xmmword_1928DFC70;
      v20 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v19 = xmmword_1928DFC90;
      v20 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v19 = xmmword_1928DFCB0;
      v20 = xmmword_1928DFCC0;
    }
    v25 = v19;
    v26 = v20;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v25;
    goto LABEL_11;
  }
  v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v17;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v16 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  if (!result && (*((_QWORD *)v16 + 34) != a1 || *((_QWORD *)v16 + 33) != a2 || *((_QWORD *)v16 + 35) != 4 * a1))
  {
    v22 = (void *)*((_QWORD *)v16 + 32);
    if (v22)
    {
      *((_QWORD *)v16 + 32) = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      result = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      result = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v24 = 1556728742;
    }
    else
    {
      result = 0;
      v24 = 1270757447;
    }
    result = (size_t)malloc_type_malloc(result, v24);
LABEL_25:
    *((_QWORD *)v16 + 32) = result;
    *((_QWORD *)v16 + 33) = a2;
    *((_QWORD *)v16 + 34) = a1;
    *((_QWORD *)v16 + 35) = v23;
  }
  *((_QWORD *)v16 + 37) = a4;
  *((_BYTE *)v16 + 288) = a5;
  *a7 = vt_VImage_Copy_32ARGB_xw20;
  *a8 = vt_VImage_Cleanup_32ARGB_xw20;
  *a6 = v16;
  return result;
}

size_t vt_VImage_Setup_32ARGB_xw22(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, char a5, _QWORD *a6, _QWORD *a7, void (**a8)(void **a1))
{
  void *v16;
  const vImage_ARGBToYpCbCrMatrix **v17;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v19;
  __int128 v20;
  size_t result;
  void *v22;
  unint64_t v23;
  malloc_type_id_t v24;
  __int128 v25;
  __int128 v26;
  vImage_YpCbCrPixelRange pixelRange;

  v25 = 0u;
  v26 = 0u;
  v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v19 = xmmword_1928DFC70;
      v20 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v19 = xmmword_1928DFC90;
      v20 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v19 = xmmword_1928DFCB0;
      v20 = xmmword_1928DFCC0;
    }
    v25 = v19;
    v26 = v20;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v25;
    goto LABEL_11;
  }
  v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v17;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v16 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  if (!result && (*((_QWORD *)v16 + 34) != a1 || *((_QWORD *)v16 + 33) != a2 || *((_QWORD *)v16 + 35) != 4 * a1))
  {
    v22 = (void *)*((_QWORD *)v16 + 32);
    if (v22)
    {
      *((_QWORD *)v16 + 32) = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      result = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      result = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v24 = 1556728742;
    }
    else
    {
      result = 0;
      v24 = 1270757447;
    }
    result = (size_t)malloc_type_malloc(result, v24);
LABEL_25:
    *((_QWORD *)v16 + 32) = result;
    *((_QWORD *)v16 + 33) = a2;
    *((_QWORD *)v16 + 34) = a1;
    *((_QWORD *)v16 + 35) = v23;
  }
  *((_QWORD *)v16 + 37) = a4;
  *((_BYTE *)v16 + 288) = a5;
  *a7 = vt_VImage_Copy_32ARGB_xw22;
  *a8 = vt_VImage_Cleanup_32ARGB_xw22;
  *a6 = v16;
  return result;
}

size_t vt_VImage_Setup_32ARGB_xw44(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, char a5, _QWORD *a6, _QWORD *a7, void (**a8)(void **a1))
{
  void *v16;
  const vImage_ARGBToYpCbCrMatrix **v17;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v19;
  __int128 v20;
  size_t result;
  void *v22;
  unint64_t v23;
  malloc_type_id_t v24;
  __int128 v25;
  __int128 v26;
  vImage_YpCbCrPixelRange pixelRange;

  v25 = 0u;
  v26 = 0u;
  v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v19 = xmmword_1928DFC70;
      v20 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v19 = xmmword_1928DFC90;
      v20 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v19 = xmmword_1928DFCB0;
      v20 = xmmword_1928DFCC0;
    }
    v25 = v19;
    v26 = v20;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v25;
    goto LABEL_11;
  }
  v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v17;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v16 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  if (!result && (*((_QWORD *)v16 + 34) != a1 || *((_QWORD *)v16 + 33) != a2 || *((_QWORD *)v16 + 35) != 4 * a1))
  {
    v22 = (void *)*((_QWORD *)v16 + 32);
    if (v22)
    {
      *((_QWORD *)v16 + 32) = 0;
      free(v22);
    }
    v23 = 4 * a1;
    if (a2 && v23)
    {
      result = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v23))
        goto LABEL_25;
      result = v23 * a2;
      if (!(v23 * a2))
        goto LABEL_25;
      v24 = 1556728742;
    }
    else
    {
      result = 0;
      v24 = 1270757447;
    }
    result = (size_t)malloc_type_malloc(result, v24);
LABEL_25:
    *((_QWORD *)v16 + 32) = result;
    *((_QWORD *)v16 + 33) = a2;
    *((_QWORD *)v16 + 34) = a1;
    *((_QWORD *)v16 + 35) = v23;
  }
  *((_QWORD *)v16 + 37) = a4;
  *((_BYTE *)v16 + 288) = a5;
  *a7 = vt_VImage_Copy_32ARGB_xw44;
  *a8 = vt_VImage_Cleanup_32ARGB_xw44;
  *a6 = v16;
  return result;
}

uint64_t vt_Copy_32ARGB_p420ITU2020(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  int v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  int *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int *v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  int v142;
  int v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  int v148;
  int v149;
  unint64_t v150;
  int *v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unint64_t v169;
  int *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  int *v176;
  unint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;

  v182 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v15 = v13 - v12;
  else
    v15 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 < v14 - v11)
    v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v17 = v13 % 6;
  v18 = v15 >= v17;
  v19 = v15 - v17;
  if (!v18)
    v19 = 0;
  v175 = v19;
  if (v16 >= 2)
  {
    v20 = 0;
    v163 = v12 % 3;
    v155 = v19 % 3;
    v177 = 6 * (v12 / 6) - v12 + 6;
    v162 = v16 >> 1;
    v21 = a8[1];
    v22 = (int *)(a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3));
    v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    v24 = (unsigned int *)(v23 + *a8);
    v25 = *a4;
    v26 = *a3 + *a4 * v9;
    v174 = v15;
    v27 = v26 + 4 * v10;
    v28 = v27 + v25;
    v161 = 2 * v25;
    v160 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v159 = v21 >> 2;
    v29 = *a3 + v25 + v25 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    do
    {
      v170 = v22;
      v171 = v20;
      v30 = 0;
      v167 = v26;
      v168 = v24;
      v31 = v26;
      v164 = v29;
      v165 = v28;
      v32 = v163;
      v33 = v163;
      v169 = v23;
      v34 = (unsigned int *)v23;
      v166 = v27;
      v35 = 4 * v10;
      do
      {
        v36 = v34;
        v37 = v24;
        if ((v30 & 1) != 0)
        {
          v41 = (unsigned __int8 *)(v27 - 3);
          v42 = (unsigned __int8 *)(v27 - 2);
          v43 = (unsigned __int8 *)(v27 - 1);
          v38 = *(unsigned __int8 *)(v31 + v35 + 1);
          v39 = *(unsigned __int8 *)(v31 + v35 + 2);
          v40 = *(unsigned __int8 *)(v31 + v35 + 3);
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v41 = (unsigned __int8 *)(v31 + v35 + 1);
          v42 = (unsigned __int8 *)(v31 + v35 + 2);
          v43 = (unsigned __int8 *)(v31 + v35 + 3);
        }
        v44 = *v43;
        v45 = *v42;
        v46 = *v41;
        v47 = *((unsigned __int8 *)&v182 + v32);
        *v36 = (((269488145
                              * (unint64_t)(1023
                                                 * ((1664 * v44 + 540672 + 19024 * v45 + 7371 * v46) >> 15)
                                                 + 127)) >> 32) >> 4 << v47) | *v36 & ~(1023 << v47);
        if ((v30 & 1) != 0)
        {
          v51 = (unsigned __int8 *)(v28 - 3);
          v52 = (unsigned __int8 *)(v28 - 2);
          v53 = (unsigned __int8 *)(v28 - 1);
          v48 = *(unsigned __int8 *)(v29 + v35 + 1);
          v49 = *(unsigned __int8 *)(v29 + v35 + 2);
          v50 = *(unsigned __int8 *)(v29 + v35 + 3);
        }
        else
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          v51 = (unsigned __int8 *)(v29 + v35 + 1);
          v52 = (unsigned __int8 *)(v29 + v35 + 2);
          v53 = (unsigned __int8 *)(v29 + v35 + 3);
        }
        v54 = *v53;
        v55 = *v52;
        v56 = *v51;
        if ((v30 & 1) != 0)
        {
          v59 = v40 + v44 + v50 + v54;
          v60 = v39 + v45 + v49 + v55;
          v61 = v38 + v46 + v48 + v56;
          v57 = (67372037
               * (unint64_t)(1023 * ((-10342 * v60 + 14350 * v59 - 4006 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v58 = (67372037
               * (unint64_t)(1023 * ((-13195 * v60 - 1153 * v59 + 14350 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v57) = 0;
          LODWORD(v58) = 0;
        }
        *v37 = *v37 & ~(1023 << v47) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((1664 * v54
                                                                                         + 540672
                                                                                         + 19024 * v55
                                                                                         + 7371 * v56) >> 15)
                                                                         + 127)) >> 32) >> 4 << v47);
        if (v32 == 2)
          v32 = 0;
        else
          ++v32;
        if ((v30 & 1) != 0)
        {
          v62 = *((unsigned __int8 *)&v182 + v33);
          *v22 = *v22 & ~(1023 << v62) | ((_DWORD)v57 << v62);
          v63 = (int *)((char *)v22 + ((v62 >> 2) & 0x3C));
          if (v33 == 2)
            v64 = 0;
          else
            v64 = v33 + 1;
          v65 = *((unsigned __int8 *)&v182 + v64);
          *v63 = *v63 & ~(1023 << v65) | ((_DWORD)v58 << v65);
          v66 = v65 >> 2;
          v35 = 4 * v10;
          v22 = (int *)((char *)v63 + (v66 & 0x3C));
          if (v64 == 2)
            v33 = 0;
          else
            v33 = v64 + 1;
        }
        v27 += 4;
        v34 = &v36[v47 >> 4];
        v28 += 4;
        ++v30;
        v29 += 4;
        v24 = &v37[v47 >> 4];
        v31 += 4;
      }
      while (v177 != v30);
      if (v177 >= v175)
      {
        v181 = v31 + v35;
        v179 = v29 + v35;
        v70 = v177;
        v121 = v174;
      }
      else
      {
        v158 = v33;
        v67 = 0;
        v68 = 0;
        v156 = v47 >> 2;
        v69 = (v47 >> 2) & 0x3C;
        v157 = v36;
        v172 = (char *)v36 + v69;
        v173 = (char *)v37 + v69;
        v70 = v177;
        do
        {
          v178 = (unsigned int *)&v22[v68 / 4];
          v180 = v67;
          v176 = v22;
          v71 = (unsigned __int8 *)(v27 + v67);
          v72 = *(unsigned __int8 *)(v27 + v67 + 1);
          v73 = v71[2];
          v74 = v71[3];
          v75 = 7371 * v72 + 540672 + 19024 * v73 + 1664 * v74;
          v76 = v71[5];
          v77 = v71[6];
          v78 = v71[7];
          v79 = 7371 * v76 + 540672 + 19024 * v77 + 1664 * v78;
          v80 = *(unsigned __int8 *)(v28 + v180 + 1);
          v81 = *(unsigned __int8 *)(v28 + v180 + 2);
          v82 = *(unsigned __int8 *)(v28 + v180 + 3);
          v83 = *(unsigned __int8 *)(v28 + v180 + 5);
          v84 = *(unsigned __int8 *)(v28 + v180 + 6);
          v85 = *(unsigned __int8 *)(v28 + v180 + 7);
          v86 = (unsigned int *)&v172[v68];
          v87 = 269488145 * (1023 * ((7371 * v80 + 540672 + 19024 * v81 + 1664 * v82) >> 15) + 127);
          v88 = v78 + v74 + v82 + v85;
          v89 = v77 + v73 + v81 + v84;
          v90 = v76 + v72 + v80 + v83;
          v91 = 67372037 * (1023 * ((-10342 * v89 - 4006 * v90 + 14350 * v88 + 0x1000000) >> 17) + 127);
          v92 = -13195 * v89 + 14350 * v90 - 1153 * v88 + 0x1000000;
          LODWORD(v87) = (v87 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((7371 * v83
                                                                                         + 540672
                                                                                         + 19024 * v84
                                                                                         + 1664 * v85) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          v93 = v71[9];
          v94 = v71[10];
          v95 = v71[11];
          v96 = (((269488145 * (unint64_t)(1023 * (v75 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v79 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v93 + 540672 + 19024 * v94 + 1664 * v95) >> 15) + 127)) >> 32) >> 4 << 20);
          v97 = (v91 >> 34) | (((67372037 * (unint64_t)(1023 * (v92 >> 17) + 127)) >> 32) >> 2 << 10);
          *v86 = v96;
          v98 = v71[13];
          v99 = v71[14];
          LODWORD(v91) = v71[15];
          v100 = *(unsigned __int8 *)(v28 + v180 + 9);
          v101 = *(unsigned __int8 *)(v28 + v180 + 10);
          v102 = *(unsigned __int8 *)(v28 + v180 + 11);
          v103 = (269488145
                * (unint64_t)(1023 * ((7371 * v98 + 540672 + 19024 * v99 + 1664 * v91) >> 15) + 127)) >> 36;
          *(_DWORD *)&v173[v68] = v87 | (((269488145
                                                       * (unint64_t)(1023
                                                                          * ((7371 * v100
                                                                                          + 540672
                                                                                          + 19024 * v101
                                                                                          + 1664 * v102) >> 15)
                                                                          + 127)) >> 32) >> 4 << 20);
          LODWORD(v87) = *(unsigned __int8 *)(v28 + v180 + 14);
          v104 = *(unsigned __int8 *)(v28 + v180 + 13);
          v105 = *(unsigned __int8 *)(v28 + v180 + 15);
          LODWORD(v91) = v91 + v95 + v102 + v105;
          v106 = 7371 * v104 + 540672 + 19024 * v87;
          v107 = v99 + v94 + v101 + v87;
          v108 = v98 + v93 + v100 + v104;
          *v178 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-10342 * v107
                                                                          - 4006 * v108
                                                                          + 14350 * v91
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v109 = v71[17];
          v110 = 1023 * ((v106 + 1664 * v105) >> 15);
          v111 = v71[18];
          v112 = v71[19];
          v113 = v71[21];
          v114 = v71[22];
          LODWORD(v71) = v71[23];
          v86[1] = v103 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((7371 * v109
                                                                            + 540672
                                                                            + 19024 * v111
                                                                            + 1664 * v112) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v113 + 540672 + 19024 * v114 + 1664 * (_DWORD)v71) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v86) = *(unsigned __int8 *)(v28 + v180 + 17);
          LODWORD(v103) = *(unsigned __int8 *)(v28 + v180 + 18);
          v115 = *(unsigned __int8 *)(v28 + v180 + 19);
          v116 = *(unsigned __int8 *)(v28 + v180 + 21);
          v117 = *(unsigned __int8 *)(v28 + v180 + 22);
          v118 = *(unsigned __int8 *)(v28 + v180 + 23);
          *(_DWORD *)&v173[v68 + 4] = (((269488145 * (unint64_t)(v110 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((7371 * (_DWORD)v86 + 540672 + 19024 * v103 + 1664 * v115) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v116 + 540672 + 19024 * v117 + 1664 * v118) >> 15) + 127)) >> 32) >> 4 << 20);
          v119 = 1023 * ((-13195 * v107 + 14350 * v108 - 1153 * v91 + 0x1000000) >> 17);
          LODWORD(v91) = v103 + v117;
          v22 = v176;
          v178[1] = (((67372037 * (unint64_t)(v119 + 127)) >> 32) >> 2) | (((67372037 * (unint64_t)(1023 * ((-13195 * (v114 + v111 + v91) + 14350 * (v113 + v109 + (_DWORD)v86 + v116) - 1153 * ((_DWORD)v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10342 * (v114 + v111 + v91) - 4006 * (v113 + v109 + (_DWORD)v86 + v116) + 14350 * ((_DWORD)v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v70 += 6;
          v68 += 8;
          v67 = v180 + 24;
        }
        while (v70 < v175);
        v22 = &v176[v68 / 4];
        v120 = v156 & 0x3C;
        v24 = (unsigned int *)((char *)v37 + v120 + v68);
        v34 = (unsigned int *)((char *)v157 + v120 + v68);
        v181 = v27 + v67;
        v179 = v28 + v67;
        v121 = v174;
        v33 = v158;
      }
      if (v70 < v121)
      {
        v122 = 0;
        v123 = v155;
        v124 = v179;
        v125 = v181;
        do
        {
          if ((v70 & 1) != 0)
          {
            v129 = (unsigned __int8 *)(v125 - 3);
            v130 = (unsigned __int8 *)(v125 - 2);
            v131 = (unsigned __int8 *)(v125 - 1);
            v126 = *(unsigned __int8 *)(v181 + v122 + 1);
            v127 = *(unsigned __int8 *)(v181 + v122 + 2);
            v128 = *(unsigned __int8 *)(v181 + v122 + 3);
          }
          else
          {
            v126 = 0;
            v127 = 0;
            v128 = 0;
            v129 = (unsigned __int8 *)(v181 + v122 + 1);
            v130 = (unsigned __int8 *)(v181 + v122 + 2);
            v131 = (unsigned __int8 *)(v181 + v122 + 3);
          }
          v132 = *v131;
          v133 = *v130;
          v134 = *v129;
          v135 = *((unsigned __int8 *)&v182 + v123);
          *v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((1664 * v132 + 540672 + 19024 * v133 + 7371 * v134) >> 15)
                                                   + 127)) >> 32) >> 4 << v135) | *v34 & ~(1023 << v135);
          if ((v70 & 1) != 0)
          {
            v139 = (unsigned __int8 *)(v124 - 3);
            v140 = (unsigned __int8 *)(v124 - 2);
            v141 = (unsigned __int8 *)(v124 - 1);
            v136 = *(unsigned __int8 *)(v179 + v122 + 1);
            v137 = *(unsigned __int8 *)(v179 + v122 + 2);
            v138 = *(unsigned __int8 *)(v179 + v122 + 3);
          }
          else
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            v139 = (unsigned __int8 *)(v179 + v122 + 1);
            v140 = (unsigned __int8 *)(v179 + v122 + 2);
            v141 = (unsigned __int8 *)(v179 + v122 + 3);
          }
          v142 = *v141;
          v143 = *v140;
          v144 = *v139;
          if ((v70 & 1) != 0)
          {
            v147 = v128 + v132 + v138 + v142;
            v148 = v127 + v133 + v137 + v143;
            v149 = v126 + v134 + v136 + v144;
            v145 = (67372037
                  * (unint64_t)(1023
                                     * ((-10342 * v148 + 14350 * v147 - 4006 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v146 = (67372037
                  * (unint64_t)(1023
                                     * ((-13195 * v148 - 1153 * v147 + 14350 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v145) = 0;
            LODWORD(v146) = 0;
          }
          *v24 = *v24 & ~(1023 << v135) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((1664 * v142
                                                                                            + 540672
                                                                                            + 19024 * v143
                                                                                            + 7371 * v144) >> 15)
                                                                            + 127)) >> 32) >> 4 << v135);
          if (v123 == 2)
            v123 = 0;
          else
            ++v123;
          if ((v70 & 1) != 0)
          {
            v150 = *((unsigned __int8 *)&v182 + v33);
            *v22 = *v22 & ~(1023 << v150) | ((_DWORD)v145 << v150);
            v151 = (int *)((char *)v22 + ((v150 >> 2) & 0x3C));
            if (v33 == 2)
              v152 = 0;
            else
              v152 = v33 + 1;
            v153 = *((unsigned __int8 *)&v182 + v152);
            *v151 = *v151 & ~(1023 << v153) | ((_DWORD)v146 << v153);
            v22 = (int *)((char *)v151 + ((v153 >> 2) & 0x3C));
            if (v152 == 2)
              v33 = 0;
            else
              v33 = v152 + 1;
          }
          v125 += 4;
          v34 += v135 >> 4;
          v124 += 4;
          ++v70;
          v122 += 4;
          v24 += v135 >> 4;
        }
        while (v174 != v70);
      }
      v23 = v169 + 4 * v160;
      v27 = v166 + v161;
      v28 = v165 + v161;
      v20 = v171 + 1;
      v29 = v164 + v161;
      v26 = v167 + v161;
      v24 = &v168[v160];
      v22 = &v170[v159];
    }
    while (v171 + 1 != v162);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_p420ITU709(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  int v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  int *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int *v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  int v142;
  int v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  int v148;
  int v149;
  unint64_t v150;
  int *v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unint64_t v169;
  int *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  int *v176;
  unint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;

  v182 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v15 = v13 - v12;
  else
    v15 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 < v14 - v11)
    v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v17 = v13 % 6;
  v18 = v15 >= v17;
  v19 = v15 - v17;
  if (!v18)
    v19 = 0;
  v175 = v19;
  if (v16 >= 2)
  {
    v20 = 0;
    v163 = v12 % 3;
    v155 = v19 % 3;
    v177 = 6 * (v12 / 6) - v12 + 6;
    v162 = v16 >> 1;
    v21 = a8[1];
    v22 = (int *)(a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3));
    v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    v24 = (unsigned int *)(v23 + *a8);
    v25 = *a4;
    v26 = *a3 + *a4 * v9;
    v174 = v15;
    v27 = v26 + 4 * v10;
    v28 = v27 + v25;
    v161 = 2 * v25;
    v160 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v159 = v21 >> 2;
    v29 = *a3 + v25 + v25 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    do
    {
      v170 = v22;
      v171 = v20;
      v30 = 0;
      v167 = v26;
      v168 = v24;
      v31 = v26;
      v164 = v29;
      v165 = v28;
      v32 = v163;
      v33 = v163;
      v169 = v23;
      v34 = (unsigned int *)v23;
      v166 = v27;
      v35 = 4 * v10;
      do
      {
        v36 = v34;
        v37 = v24;
        if ((v30 & 1) != 0)
        {
          v41 = (unsigned __int8 *)(v27 - 3);
          v42 = (unsigned __int8 *)(v27 - 2);
          v43 = (unsigned __int8 *)(v27 - 1);
          v38 = *(unsigned __int8 *)(v31 + v35 + 1);
          v39 = *(unsigned __int8 *)(v31 + v35 + 2);
          v40 = *(unsigned __int8 *)(v31 + v35 + 3);
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v41 = (unsigned __int8 *)(v31 + v35 + 1);
          v42 = (unsigned __int8 *)(v31 + v35 + 2);
          v43 = (unsigned __int8 *)(v31 + v35 + 3);
        }
        v44 = *v43;
        v45 = *v42;
        v46 = *v41;
        v47 = *((unsigned __int8 *)&v182 + v32);
        *v36 = (((269488145
                              * (unint64_t)(1023
                                                 * ((2032 * v44 + 540672 + 20127 * v45 + 5983 * v46) >> 15)
                                                 + 127)) >> 32) >> 4 << v47) | *v36 & ~(1023 << v47);
        if ((v30 & 1) != 0)
        {
          v51 = (unsigned __int8 *)(v28 - 3);
          v52 = (unsigned __int8 *)(v28 - 2);
          v53 = (unsigned __int8 *)(v28 - 1);
          v48 = *(unsigned __int8 *)(v29 + v35 + 1);
          v49 = *(unsigned __int8 *)(v29 + v35 + 2);
          v50 = *(unsigned __int8 *)(v29 + v35 + 3);
        }
        else
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          v51 = (unsigned __int8 *)(v29 + v35 + 1);
          v52 = (unsigned __int8 *)(v29 + v35 + 2);
          v53 = (unsigned __int8 *)(v29 + v35 + 3);
        }
        v54 = *v53;
        v55 = *v52;
        v56 = *v51;
        if ((v30 & 1) != 0)
        {
          v59 = v40 + v44 + v50 + v54;
          v60 = v39 + v45 + v49 + v55;
          v61 = v38 + v46 + v48 + v56;
          v57 = (67372037
               * (unint64_t)(1023 * ((-11093 * v60 + 14392 * v59 - 3297 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v58 = (67372037
               * (unint64_t)(1023 * ((-13072 * v60 - 1319 * v59 + 14392 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v57) = 0;
          LODWORD(v58) = 0;
        }
        *v37 = *v37 & ~(1023 << v47) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((2032 * v54
                                                                                         + 540672
                                                                                         + 20127 * v55
                                                                                         + 5983 * v56) >> 15)
                                                                         + 127)) >> 32) >> 4 << v47);
        if (v32 == 2)
          v32 = 0;
        else
          ++v32;
        if ((v30 & 1) != 0)
        {
          v62 = *((unsigned __int8 *)&v182 + v33);
          *v22 = *v22 & ~(1023 << v62) | ((_DWORD)v57 << v62);
          v63 = (int *)((char *)v22 + ((v62 >> 2) & 0x3C));
          if (v33 == 2)
            v64 = 0;
          else
            v64 = v33 + 1;
          v65 = *((unsigned __int8 *)&v182 + v64);
          *v63 = *v63 & ~(1023 << v65) | ((_DWORD)v58 << v65);
          v66 = v65 >> 2;
          v35 = 4 * v10;
          v22 = (int *)((char *)v63 + (v66 & 0x3C));
          if (v64 == 2)
            v33 = 0;
          else
            v33 = v64 + 1;
        }
        v27 += 4;
        v34 = &v36[v47 >> 4];
        v28 += 4;
        ++v30;
        v29 += 4;
        v24 = &v37[v47 >> 4];
        v31 += 4;
      }
      while (v177 != v30);
      if (v177 >= v175)
      {
        v181 = v31 + v35;
        v179 = v29 + v35;
        v70 = v177;
        v121 = v174;
      }
      else
      {
        v158 = v33;
        v67 = 0;
        v68 = 0;
        v156 = v47 >> 2;
        v69 = (v47 >> 2) & 0x3C;
        v157 = v36;
        v172 = (char *)v36 + v69;
        v173 = (char *)v37 + v69;
        v70 = v177;
        do
        {
          v178 = (unsigned int *)&v22[v68 / 4];
          v180 = v67;
          v176 = v22;
          v71 = (unsigned __int8 *)(v27 + v67);
          v72 = *(unsigned __int8 *)(v27 + v67 + 1);
          v73 = v71[2];
          v74 = v71[3];
          v75 = 5983 * v72 + 540672 + 20127 * v73 + 2032 * v74;
          v76 = v71[5];
          v77 = v71[6];
          v78 = v71[7];
          v79 = 5983 * v76 + 540672 + 20127 * v77 + 2032 * v78;
          v80 = *(unsigned __int8 *)(v28 + v180 + 1);
          v81 = *(unsigned __int8 *)(v28 + v180 + 2);
          v82 = *(unsigned __int8 *)(v28 + v180 + 3);
          v83 = *(unsigned __int8 *)(v28 + v180 + 5);
          v84 = *(unsigned __int8 *)(v28 + v180 + 6);
          v85 = *(unsigned __int8 *)(v28 + v180 + 7);
          v86 = (unsigned int *)&v172[v68];
          v87 = 269488145 * (1023 * ((5983 * v80 + 540672 + 20127 * v81 + 2032 * v82) >> 15) + 127);
          v88 = v78 + v74 + v82 + v85;
          v89 = v77 + v73 + v81 + v84;
          v90 = v76 + v72 + v80 + v83;
          v91 = 67372037 * (1023 * ((-11093 * v89 - 3297 * v90 + 14392 * v88 + 0x1000000) >> 17) + 127);
          v92 = -13072 * v89 + 14392 * v90 - 1319 * v88 + 0x1000000;
          LODWORD(v87) = (v87 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((5983 * v83
                                                                                         + 540672
                                                                                         + 20127 * v84
                                                                                         + 2032 * v85) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          v93 = v71[9];
          v94 = v71[10];
          v95 = v71[11];
          v96 = (((269488145 * (unint64_t)(1023 * (v75 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v79 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v93 + 540672 + 20127 * v94 + 2032 * v95) >> 15) + 127)) >> 32) >> 4 << 20);
          v97 = (v91 >> 34) | (((67372037 * (unint64_t)(1023 * (v92 >> 17) + 127)) >> 32) >> 2 << 10);
          *v86 = v96;
          v98 = v71[13];
          v99 = v71[14];
          LODWORD(v91) = v71[15];
          v100 = *(unsigned __int8 *)(v28 + v180 + 9);
          v101 = *(unsigned __int8 *)(v28 + v180 + 10);
          v102 = *(unsigned __int8 *)(v28 + v180 + 11);
          v103 = (269488145
                * (unint64_t)(1023 * ((5983 * v98 + 540672 + 20127 * v99 + 2032 * v91) >> 15) + 127)) >> 36;
          *(_DWORD *)&v173[v68] = v87 | (((269488145
                                                       * (unint64_t)(1023
                                                                          * ((5983 * v100
                                                                                          + 540672
                                                                                          + 20127 * v101
                                                                                          + 2032 * v102) >> 15)
                                                                          + 127)) >> 32) >> 4 << 20);
          LODWORD(v87) = *(unsigned __int8 *)(v28 + v180 + 14);
          v104 = *(unsigned __int8 *)(v28 + v180 + 13);
          v105 = *(unsigned __int8 *)(v28 + v180 + 15);
          LODWORD(v91) = v91 + v95 + v102 + v105;
          v106 = 5983 * v104 + 540672 + 20127 * v87;
          v107 = v99 + v94 + v101 + v87;
          v108 = v98 + v93 + v100 + v104;
          *v178 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-11093 * v107
                                                                          - 3297 * v108
                                                                          + 14392 * v91
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v109 = v71[17];
          v110 = 1023 * ((v106 + 2032 * v105) >> 15);
          v111 = v71[18];
          v112 = v71[19];
          v113 = v71[21];
          v114 = v71[22];
          LODWORD(v71) = v71[23];
          v86[1] = v103 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((5983 * v109
                                                                            + 540672
                                                                            + 20127 * v111
                                                                            + 2032 * v112) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v113 + 540672 + 20127 * v114 + 2032 * (_DWORD)v71) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v86) = *(unsigned __int8 *)(v28 + v180 + 17);
          LODWORD(v103) = *(unsigned __int8 *)(v28 + v180 + 18);
          v115 = *(unsigned __int8 *)(v28 + v180 + 19);
          v116 = *(unsigned __int8 *)(v28 + v180 + 21);
          v117 = *(unsigned __int8 *)(v28 + v180 + 22);
          v118 = *(unsigned __int8 *)(v28 + v180 + 23);
          *(_DWORD *)&v173[v68 + 4] = (((269488145 * (unint64_t)(v110 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((5983 * (_DWORD)v86 + 540672 + 20127 * v103 + 2032 * v115) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v116 + 540672 + 20127 * v117 + 2032 * v118) >> 15) + 127)) >> 32) >> 4 << 20);
          v119 = 1023 * ((-13072 * v107 + 14392 * v108 - 1319 * v91 + 0x1000000) >> 17);
          LODWORD(v91) = v103 + v117;
          v22 = v176;
          v178[1] = (((67372037 * (unint64_t)(v119 + 127)) >> 32) >> 2) | (((67372037 * (unint64_t)(1023 * ((-13072 * (v114 + v111 + v91) + 14392 * (v113 + v109 + (_DWORD)v86 + v116) - 1319 * ((_DWORD)v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11093 * (v114 + v111 + v91) - 3297 * (v113 + v109 + (_DWORD)v86 + v116) + 14392 * ((_DWORD)v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v70 += 6;
          v68 += 8;
          v67 = v180 + 24;
        }
        while (v70 < v175);
        v22 = &v176[v68 / 4];
        v120 = v156 & 0x3C;
        v24 = (unsigned int *)((char *)v37 + v120 + v68);
        v34 = (unsigned int *)((char *)v157 + v120 + v68);
        v181 = v27 + v67;
        v179 = v28 + v67;
        v121 = v174;
        v33 = v158;
      }
      if (v70 < v121)
      {
        v122 = 0;
        v123 = v155;
        v124 = v179;
        v125 = v181;
        do
        {
          if ((v70 & 1) != 0)
          {
            v129 = (unsigned __int8 *)(v125 - 3);
            v130 = (unsigned __int8 *)(v125 - 2);
            v131 = (unsigned __int8 *)(v125 - 1);
            v126 = *(unsigned __int8 *)(v181 + v122 + 1);
            v127 = *(unsigned __int8 *)(v181 + v122 + 2);
            v128 = *(unsigned __int8 *)(v181 + v122 + 3);
          }
          else
          {
            v126 = 0;
            v127 = 0;
            v128 = 0;
            v129 = (unsigned __int8 *)(v181 + v122 + 1);
            v130 = (unsigned __int8 *)(v181 + v122 + 2);
            v131 = (unsigned __int8 *)(v181 + v122 + 3);
          }
          v132 = *v131;
          v133 = *v130;
          v134 = *v129;
          v135 = *((unsigned __int8 *)&v182 + v123);
          *v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((2032 * v132 + 540672 + 20127 * v133 + 5983 * v134) >> 15)
                                                   + 127)) >> 32) >> 4 << v135) | *v34 & ~(1023 << v135);
          if ((v70 & 1) != 0)
          {
            v139 = (unsigned __int8 *)(v124 - 3);
            v140 = (unsigned __int8 *)(v124 - 2);
            v141 = (unsigned __int8 *)(v124 - 1);
            v136 = *(unsigned __int8 *)(v179 + v122 + 1);
            v137 = *(unsigned __int8 *)(v179 + v122 + 2);
            v138 = *(unsigned __int8 *)(v179 + v122 + 3);
          }
          else
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            v139 = (unsigned __int8 *)(v179 + v122 + 1);
            v140 = (unsigned __int8 *)(v179 + v122 + 2);
            v141 = (unsigned __int8 *)(v179 + v122 + 3);
          }
          v142 = *v141;
          v143 = *v140;
          v144 = *v139;
          if ((v70 & 1) != 0)
          {
            v147 = v128 + v132 + v138 + v142;
            v148 = v127 + v133 + v137 + v143;
            v149 = v126 + v134 + v136 + v144;
            v145 = (67372037
                  * (unint64_t)(1023
                                     * ((-11093 * v148 + 14392 * v147 - 3297 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v146 = (67372037
                  * (unint64_t)(1023
                                     * ((-13072 * v148 - 1319 * v147 + 14392 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v145) = 0;
            LODWORD(v146) = 0;
          }
          *v24 = *v24 & ~(1023 << v135) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((2032 * v142
                                                                                            + 540672
                                                                                            + 20127 * v143
                                                                                            + 5983 * v144) >> 15)
                                                                            + 127)) >> 32) >> 4 << v135);
          if (v123 == 2)
            v123 = 0;
          else
            ++v123;
          if ((v70 & 1) != 0)
          {
            v150 = *((unsigned __int8 *)&v182 + v33);
            *v22 = *v22 & ~(1023 << v150) | ((_DWORD)v145 << v150);
            v151 = (int *)((char *)v22 + ((v150 >> 2) & 0x3C));
            if (v33 == 2)
              v152 = 0;
            else
              v152 = v33 + 1;
            v153 = *((unsigned __int8 *)&v182 + v152);
            *v151 = *v151 & ~(1023 << v153) | ((_DWORD)v146 << v153);
            v22 = (int *)((char *)v151 + ((v153 >> 2) & 0x3C));
            if (v152 == 2)
              v33 = 0;
            else
              v33 = v152 + 1;
          }
          v125 += 4;
          v34 += v135 >> 4;
          v124 += 4;
          ++v70;
          v122 += 4;
          v24 += v135 >> 4;
        }
        while (v174 != v70);
      }
      v23 = v169 + 4 * v160;
      v27 = v166 + v161;
      v28 = v165 + v161;
      v20 = v171 + 1;
      v29 = v164 + v161;
      v26 = v167 + v161;
      v24 = &v168[v160];
      v22 = &v170[v159];
    }
    while (v171 + 1 != v162);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_p420ITU601(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  int v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  int *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int *v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  int v142;
  int v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  int v148;
  int v149;
  unint64_t v150;
  int *v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unint64_t v169;
  int *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  int *v176;
  unint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;

  v182 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v15 = v13 - v12;
  else
    v15 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 < v14 - v11)
    v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v17 = v13 % 6;
  v18 = v15 >= v17;
  v19 = v15 - v17;
  if (!v18)
    v19 = 0;
  v175 = v19;
  if (v16 >= 2)
  {
    v20 = 0;
    v163 = v12 % 3;
    v155 = v19 % 3;
    v177 = 6 * (v12 / 6) - v12 + 6;
    v162 = v16 >> 1;
    v21 = a8[1];
    v22 = (int *)(a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3));
    v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    v24 = (unsigned int *)(v23 + *a8);
    v25 = *a4;
    v26 = *a3 + *a4 * v9;
    v174 = v15;
    v27 = v26 + 4 * v10;
    v28 = v27 + v25;
    v161 = 2 * v25;
    v160 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v159 = v21 >> 2;
    v29 = *a3 + v25 + v25 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    do
    {
      v170 = v22;
      v171 = v20;
      v30 = 0;
      v167 = v26;
      v168 = v24;
      v31 = v26;
      v164 = v29;
      v165 = v28;
      v32 = v163;
      v33 = v163;
      v169 = v23;
      v34 = (unsigned int *)v23;
      v166 = v27;
      v35 = 4 * v10;
      do
      {
        v36 = v34;
        v37 = v24;
        if ((v30 & 1) != 0)
        {
          v41 = (unsigned __int8 *)(v27 - 3);
          v42 = (unsigned __int8 *)(v27 - 2);
          v43 = (unsigned __int8 *)(v27 - 1);
          v38 = *(unsigned __int8 *)(v31 + v35 + 1);
          v39 = *(unsigned __int8 *)(v31 + v35 + 2);
          v40 = *(unsigned __int8 *)(v31 + v35 + 3);
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v41 = (unsigned __int8 *)(v31 + v35 + 1);
          v42 = (unsigned __int8 *)(v31 + v35 + 2);
          v43 = (unsigned __int8 *)(v31 + v35 + 3);
        }
        v44 = *v43;
        v45 = *v42;
        v46 = *v41;
        v47 = *((unsigned __int8 *)&v182 + v32);
        *v36 = (((269488145
                              * (unint64_t)(1023
                                                 * ((3208 * v44 + 540672 + 16519 * v45 + 8414 * v46) >> 15)
                                                 + 127)) >> 32) >> 4 << v47) | *v36 & ~(1023 << v47);
        if ((v30 & 1) != 0)
        {
          v51 = (unsigned __int8 *)(v28 - 3);
          v52 = (unsigned __int8 *)(v28 - 2);
          v53 = (unsigned __int8 *)(v28 - 1);
          v48 = *(unsigned __int8 *)(v29 + v35 + 1);
          v49 = *(unsigned __int8 *)(v29 + v35 + 2);
          v50 = *(unsigned __int8 *)(v29 + v35 + 3);
        }
        else
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          v51 = (unsigned __int8 *)(v29 + v35 + 1);
          v52 = (unsigned __int8 *)(v29 + v35 + 2);
          v53 = (unsigned __int8 *)(v29 + v35 + 3);
        }
        v54 = *v53;
        v55 = *v52;
        v56 = *v51;
        if ((v30 & 1) != 0)
        {
          v59 = v40 + v44 + v50 + v54;
          v60 = v39 + v45 + v49 + v55;
          v61 = v38 + v46 + v48 + v56;
          v57 = (67372037
               * (unint64_t)(1023 * ((-9534 * v60 + 14392 * v59 - 4856 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v58 = (67372037
               * (unint64_t)(1023 * ((-12051 * v60 - 2340 * v59 + 14392 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v57) = 0;
          LODWORD(v58) = 0;
        }
        *v37 = *v37 & ~(1023 << v47) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((3208 * v54
                                                                                         + 540672
                                                                                         + 16519 * v55
                                                                                         + 8414 * v56) >> 15)
                                                                         + 127)) >> 32) >> 4 << v47);
        if (v32 == 2)
          v32 = 0;
        else
          ++v32;
        if ((v30 & 1) != 0)
        {
          v62 = *((unsigned __int8 *)&v182 + v33);
          *v22 = *v22 & ~(1023 << v62) | ((_DWORD)v57 << v62);
          v63 = (int *)((char *)v22 + ((v62 >> 2) & 0x3C));
          if (v33 == 2)
            v64 = 0;
          else
            v64 = v33 + 1;
          v65 = *((unsigned __int8 *)&v182 + v64);
          *v63 = *v63 & ~(1023 << v65) | ((_DWORD)v58 << v65);
          v66 = v65 >> 2;
          v35 = 4 * v10;
          v22 = (int *)((char *)v63 + (v66 & 0x3C));
          if (v64 == 2)
            v33 = 0;
          else
            v33 = v64 + 1;
        }
        v27 += 4;
        v34 = &v36[v47 >> 4];
        v28 += 4;
        ++v30;
        v29 += 4;
        v24 = &v37[v47 >> 4];
        v31 += 4;
      }
      while (v177 != v30);
      if (v177 >= v175)
      {
        v181 = v31 + v35;
        v179 = v29 + v35;
        v70 = v177;
        v121 = v174;
      }
      else
      {
        v158 = v33;
        v67 = 0;
        v68 = 0;
        v156 = v47 >> 2;
        v69 = (v47 >> 2) & 0x3C;
        v157 = v36;
        v172 = (char *)v36 + v69;
        v173 = (char *)v37 + v69;
        v70 = v177;
        do
        {
          v178 = (unsigned int *)&v22[v68 / 4];
          v180 = v67;
          v176 = v22;
          v71 = (unsigned __int8 *)(v27 + v67);
          v72 = *(unsigned __int8 *)(v27 + v67 + 1);
          v73 = v71[2];
          v74 = v71[3];
          v75 = 8414 * v72 + 540672 + 16519 * v73 + 3208 * v74;
          v76 = v71[5];
          v77 = v71[6];
          v78 = v71[7];
          v79 = 8414 * v76 + 540672 + 16519 * v77 + 3208 * v78;
          v80 = *(unsigned __int8 *)(v28 + v180 + 1);
          v81 = *(unsigned __int8 *)(v28 + v180 + 2);
          v82 = *(unsigned __int8 *)(v28 + v180 + 3);
          v83 = *(unsigned __int8 *)(v28 + v180 + 5);
          v84 = *(unsigned __int8 *)(v28 + v180 + 6);
          v85 = *(unsigned __int8 *)(v28 + v180 + 7);
          v86 = (unsigned int *)&v172[v68];
          v87 = 269488145 * (1023 * ((8414 * v80 + 540672 + 16519 * v81 + 3208 * v82) >> 15) + 127);
          v88 = v78 + v74 + v82 + v85;
          v89 = v77 + v73 + v81 + v84;
          v90 = v76 + v72 + v80 + v83;
          v91 = 67372037 * (1023 * ((-9534 * v89 - 4856 * v90 + 14392 * v88 + 0x1000000) >> 17) + 127);
          v92 = -12051 * v89 + 14392 * v90 - 2340 * v88 + 0x1000000;
          LODWORD(v87) = (v87 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((8414 * v83
                                                                                         + 540672
                                                                                         + 16519 * v84
                                                                                         + 3208 * v85) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          v93 = v71[9];
          v94 = v71[10];
          v95 = v71[11];
          v96 = (((269488145 * (unint64_t)(1023 * (v75 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v79 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v93 + 540672 + 16519 * v94 + 3208 * v95) >> 15) + 127)) >> 32) >> 4 << 20);
          v97 = (v91 >> 34) | (((67372037 * (unint64_t)(1023 * (v92 >> 17) + 127)) >> 32) >> 2 << 10);
          *v86 = v96;
          v98 = v71[13];
          v99 = v71[14];
          LODWORD(v91) = v71[15];
          v100 = *(unsigned __int8 *)(v28 + v180 + 9);
          v101 = *(unsigned __int8 *)(v28 + v180 + 10);
          v102 = *(unsigned __int8 *)(v28 + v180 + 11);
          v103 = (269488145
                * (unint64_t)(1023 * ((8414 * v98 + 540672 + 16519 * v99 + 3208 * v91) >> 15) + 127)) >> 36;
          *(_DWORD *)&v173[v68] = v87 | (((269488145
                                                       * (unint64_t)(1023
                                                                          * ((8414 * v100
                                                                                          + 540672
                                                                                          + 16519 * v101
                                                                                          + 3208 * v102) >> 15)
                                                                          + 127)) >> 32) >> 4 << 20);
          LODWORD(v87) = *(unsigned __int8 *)(v28 + v180 + 14);
          v104 = *(unsigned __int8 *)(v28 + v180 + 13);
          v105 = *(unsigned __int8 *)(v28 + v180 + 15);
          LODWORD(v91) = v91 + v95 + v102 + v105;
          v106 = 8414 * v104 + 540672 + 16519 * v87;
          v107 = v99 + v94 + v101 + v87;
          v108 = v98 + v93 + v100 + v104;
          *v178 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-9534 * v107
                                                                          - 4856 * v108
                                                                          + 14392 * v91
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v109 = v71[17];
          v110 = 1023 * ((v106 + 3208 * v105) >> 15);
          v111 = v71[18];
          v112 = v71[19];
          v113 = v71[21];
          v114 = v71[22];
          LODWORD(v71) = v71[23];
          v86[1] = v103 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((8414 * v109
                                                                            + 540672
                                                                            + 16519 * v111
                                                                            + 3208 * v112) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v113 + 540672 + 16519 * v114 + 3208 * (_DWORD)v71) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v86) = *(unsigned __int8 *)(v28 + v180 + 17);
          LODWORD(v103) = *(unsigned __int8 *)(v28 + v180 + 18);
          v115 = *(unsigned __int8 *)(v28 + v180 + 19);
          v116 = *(unsigned __int8 *)(v28 + v180 + 21);
          v117 = *(unsigned __int8 *)(v28 + v180 + 22);
          v118 = *(unsigned __int8 *)(v28 + v180 + 23);
          *(_DWORD *)&v173[v68 + 4] = (((269488145 * (unint64_t)(v110 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((8414 * (_DWORD)v86 + 540672 + 16519 * v103 + 3208 * v115) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v116 + 540672 + 16519 * v117 + 3208 * v118) >> 15) + 127)) >> 32) >> 4 << 20);
          v119 = 1023 * ((-12051 * v107 + 14392 * v108 - 2340 * v91 + 0x1000000) >> 17);
          LODWORD(v91) = v103 + v117;
          v22 = v176;
          v178[1] = (((67372037 * (unint64_t)(v119 + 127)) >> 32) >> 2) | (((67372037 * (unint64_t)(1023 * ((-12051 * (v114 + v111 + v91) + 14392 * (v113 + v109 + (_DWORD)v86 + v116) - 2340 * ((_DWORD)v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-9534 * (v114 + v111 + v91) - 4856 * (v113 + v109 + (_DWORD)v86 + v116) + 14392 * ((_DWORD)v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v70 += 6;
          v68 += 8;
          v67 = v180 + 24;
        }
        while (v70 < v175);
        v22 = &v176[v68 / 4];
        v120 = v156 & 0x3C;
        v24 = (unsigned int *)((char *)v37 + v120 + v68);
        v34 = (unsigned int *)((char *)v157 + v120 + v68);
        v181 = v27 + v67;
        v179 = v28 + v67;
        v121 = v174;
        v33 = v158;
      }
      if (v70 < v121)
      {
        v122 = 0;
        v123 = v155;
        v124 = v179;
        v125 = v181;
        do
        {
          if ((v70 & 1) != 0)
          {
            v129 = (unsigned __int8 *)(v125 - 3);
            v130 = (unsigned __int8 *)(v125 - 2);
            v131 = (unsigned __int8 *)(v125 - 1);
            v126 = *(unsigned __int8 *)(v181 + v122 + 1);
            v127 = *(unsigned __int8 *)(v181 + v122 + 2);
            v128 = *(unsigned __int8 *)(v181 + v122 + 3);
          }
          else
          {
            v126 = 0;
            v127 = 0;
            v128 = 0;
            v129 = (unsigned __int8 *)(v181 + v122 + 1);
            v130 = (unsigned __int8 *)(v181 + v122 + 2);
            v131 = (unsigned __int8 *)(v181 + v122 + 3);
          }
          v132 = *v131;
          v133 = *v130;
          v134 = *v129;
          v135 = *((unsigned __int8 *)&v182 + v123);
          *v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((3208 * v132 + 540672 + 16519 * v133 + 8414 * v134) >> 15)
                                                   + 127)) >> 32) >> 4 << v135) | *v34 & ~(1023 << v135);
          if ((v70 & 1) != 0)
          {
            v139 = (unsigned __int8 *)(v124 - 3);
            v140 = (unsigned __int8 *)(v124 - 2);
            v141 = (unsigned __int8 *)(v124 - 1);
            v136 = *(unsigned __int8 *)(v179 + v122 + 1);
            v137 = *(unsigned __int8 *)(v179 + v122 + 2);
            v138 = *(unsigned __int8 *)(v179 + v122 + 3);
          }
          else
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            v139 = (unsigned __int8 *)(v179 + v122 + 1);
            v140 = (unsigned __int8 *)(v179 + v122 + 2);
            v141 = (unsigned __int8 *)(v179 + v122 + 3);
          }
          v142 = *v141;
          v143 = *v140;
          v144 = *v139;
          if ((v70 & 1) != 0)
          {
            v147 = v128 + v132 + v138 + v142;
            v148 = v127 + v133 + v137 + v143;
            v149 = v126 + v134 + v136 + v144;
            v145 = (67372037
                  * (unint64_t)(1023
                                     * ((-9534 * v148 + 14392 * v147 - 4856 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v146 = (67372037
                  * (unint64_t)(1023
                                     * ((-12051 * v148 - 2340 * v147 + 14392 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v145) = 0;
            LODWORD(v146) = 0;
          }
          *v24 = *v24 & ~(1023 << v135) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((3208 * v142
                                                                                            + 540672
                                                                                            + 16519 * v143
                                                                                            + 8414 * v144) >> 15)
                                                                            + 127)) >> 32) >> 4 << v135);
          if (v123 == 2)
            v123 = 0;
          else
            ++v123;
          if ((v70 & 1) != 0)
          {
            v150 = *((unsigned __int8 *)&v182 + v33);
            *v22 = *v22 & ~(1023 << v150) | ((_DWORD)v145 << v150);
            v151 = (int *)((char *)v22 + ((v150 >> 2) & 0x3C));
            if (v33 == 2)
              v152 = 0;
            else
              v152 = v33 + 1;
            v153 = *((unsigned __int8 *)&v182 + v152);
            *v151 = *v151 & ~(1023 << v153) | ((_DWORD)v146 << v153);
            v22 = (int *)((char *)v151 + ((v153 >> 2) & 0x3C));
            if (v152 == 2)
              v33 = 0;
            else
              v33 = v152 + 1;
          }
          v125 += 4;
          v34 += v135 >> 4;
          v124 += 4;
          ++v70;
          v122 += 4;
          v24 += v135 >> 4;
        }
        while (v174 != v70);
      }
      v23 = v169 + 4 * v160;
      v27 = v166 + v161;
      v28 = v165 + v161;
      v20 = v171 + 1;
      v29 = v164 + v161;
      v26 = v167 + v161;
      v24 = &v168[v160];
      v22 = &v170[v159];
    }
    while (v171 + 1 != v162);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int *v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  int *v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v160;
  unsigned int *v161;
  unint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int *v174;
  int *v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int *v180;
  unint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int v187;

  v187 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v181 = v16;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  if (v17 >= 2)
  {
    v22 = 0;
    v168 = v13 % 3;
    v160 = v21 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v167 = v17 >> 1;
    v24 = a8[1];
    v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v27 = *a3;
    v28 = *a4;
    v29 = *a3 + *a4 * v9;
    v30 = v23;
    v186 = 4 * v10;
    v31 = v29 + 4 * v10;
    v32 = v31 + *a4;
    v166 = 2 * v28;
    v33 = (unsigned int *)(v26 + *a8);
    v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v164 = v24 >> 2;
    v34 = (unsigned int *)v26;
    v35 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v184 = v23;
    v177 = v21;
    do
    {
      v175 = v25;
      v176 = v22;
      v36 = 0;
      v172 = v29;
      v173 = v33;
      v169 = v35;
      v170 = v32;
      v37 = v168;
      v185 = v168;
      v174 = v34;
      v171 = v31;
      do
      {
        v38 = v34;
        v39 = v33;
        if ((v36 & 1) != 0)
        {
          v43 = (unsigned __int8 *)(v31 - 3);
          v44 = (unsigned __int8 *)(v31 - 2);
          v45 = (unsigned __int8 *)(v31 - 1);
          v40 = *(unsigned __int8 *)(v29 + v186 + 1);
          v41 = *(unsigned __int8 *)(v29 + v186 + 2);
          v42 = *(unsigned __int8 *)(v29 + v186 + 3);
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = (unsigned __int8 *)(v29 + v186 + 1);
          v44 = (unsigned __int8 *)(v29 + v186 + 2);
          v45 = (unsigned __int8 *)(v29 + v186 + 3);
        }
        v46 = *v45;
        v47 = *v44;
        v48 = *v43;
        v49 = *((unsigned __int8 *)&v187 + v37);
        *v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((22217 * v47 + 1943 * v46 + 8608 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if ((v36 & 1) != 0)
        {
          v53 = (unsigned __int8 *)(v32 - 3);
          v54 = (unsigned __int8 *)(v32 - 2);
          v55 = (unsigned __int8 *)(v32 - 1);
          v50 = *(unsigned __int8 *)(v35 + v186 + 1);
          v51 = *(unsigned __int8 *)(v35 + v186 + 2);
          v52 = *(unsigned __int8 *)(v35 + v186 + 3);
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = (unsigned __int8 *)(v35 + v186 + 1);
          v54 = (unsigned __int8 *)(v35 + v186 + 2);
          v55 = (unsigned __int8 *)(v35 + v186 + 3);
        }
        v56 = *v55;
        v57 = *v54;
        v58 = *v53;
        if ((v36 & 1) != 0)
        {
          v61 = v42 + v46 + v52 + v56;
          v62 = v41 + v47 + v51 + v57;
          v63 = v40 + v48 + v50 + v58;
          v59 = (67372037
               * (unint64_t)(1023 * ((-11808 * v62 + (v61 << 14) - 4574 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v60 = (67372037
               * (unint64_t)(1023 * ((-15065 * v62 - 1317 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((22217 * v57
                                                                                         + 1943 * v56
                                                                                         + 8608 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        if ((v36 & 1) != 0)
        {
          v64 = *((unsigned __int8 *)&v187 + v185);
          *v25 = *v25 & ~(1023 << v64) | ((_DWORD)v59 << v64);
          v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v185 == 2)
            v66 = 0;
          else
            v66 = v185 + 1;
          v67 = *((unsigned __int8 *)&v187 + v66);
          *v65 = *v65 & ~(1023 << v67) | ((_DWORD)v60 << v67);
          v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2)
            v68 = 0;
          else
            v68 = v66 + 1;
          v185 = v68;
          v30 = v184;
        }
        v31 += 4;
        v34 = &v38[v49 >> 4];
        v32 += 4;
        ++v36;
        v35 += 4;
        v33 = &v39[v49 >> 4];
        v29 += 4;
      }
      while (v30 != v36);
      if (v30 >= v21)
      {
        v183 = v29 + v186;
        v123 = v35 + v186;
        v72 = v30;
        v124 = v181;
      }
      else
      {
        v69 = 0;
        v70 = 0;
        v161 = v39;
        v162 = v49 >> 2;
        v71 = (v49 >> 2) & 0x3C;
        v163 = v38;
        v178 = (char *)v38 + v71;
        v179 = (char *)v39 + v71;
        v72 = v30;
        v180 = v25;
        do
        {
          v73 = *(unsigned __int8 *)(v31 + v69 + 1);
          v74 = *(unsigned __int8 *)(v31 + v69 + 2);
          v75 = *(unsigned __int8 *)(v31 + v69 + 3);
          v76 = 22217 * v74 + 8608 * v73 + 1943 * v75 + 0x4000;
          v77 = *(unsigned __int8 *)(v31 + v69 + 5);
          v78 = *(unsigned __int8 *)(v31 + v69 + 6);
          v79 = *(unsigned __int8 *)(v31 + v69 + 7);
          v80 = 22217 * v78 + 8608 * v77 + 1943 * v79 + 0x4000;
          v81 = *(unsigned __int8 *)(v32 + v69 + 1);
          v82 = *(unsigned __int8 *)(v32 + v69 + 2);
          v83 = *(unsigned __int8 *)(v32 + v69 + 3);
          v84 = *(unsigned __int8 *)(v32 + v69 + 5);
          v85 = *(unsigned __int8 *)(v32 + v69 + 6);
          v86 = *(unsigned __int8 *)(v32 + v69 + 7);
          v182 = (unsigned int *)&v178[v70];
          v87 = 269488145 * (1023 * ((22217 * v82 + 8608 * v81 + 1943 * v83 + 0x4000) >> 15) + 127);
          v88 = 269488145 * (1023 * ((22217 * v85 + 8608 * v84 + 1943 * v86 + 0x4000) >> 15) + 127);
          v89 = v79 + v75 + v83 + v86;
          v90 = v78 + v74 + v82 + v85;
          v91 = v77 + v73 + v81 + v84;
          v92 = (67372037
               * (unint64_t)(1023 * ((-11808 * v90 - 4574 * v91 + (v89 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v93 = (67372037
               * (unint64_t)(1023 * ((-15065 * v90 + (v91 << 14) - 1317 * v89 + 0x1000000) >> 17)
                                  + 127)) >> 32;
          v94 = *(unsigned __int8 *)(v31 + v69 + 9);
          v95 = *(unsigned __int8 *)(v31 + v69 + 10);
          v96 = *(unsigned __int8 *)(v31 + v69 + 11);
          *v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v95 + 8608 * v94 + 1943 * v96 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v97 = v92 | (v93 >> 2 << 10);
          LODWORD(v93) = *(unsigned __int8 *)(v31 + v69 + 13);
          LODWORD(v88) = *(unsigned __int8 *)(v31 + v69 + 14);
          v98 = *(unsigned __int8 *)(v31 + v69 + 15);
          v99 = *(unsigned __int8 *)(v32 + v69 + 9);
          v100 = *(unsigned __int8 *)(v32 + v69 + 10);
          v101 = *(unsigned __int8 *)(v32 + v69 + 11);
          v102 = (269488145
                * (unint64_t)(1023 * ((22217 * v88 + 8608 * v93 + 1943 * v98 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)&v179[v70] = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                           * (unint64_t)(1023 * ((22217 * v100 + 8608 * v99 + 1943 * v101 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v103 = *(unsigned __int8 *)(v32 + v69 + 13);
          v104 = *(unsigned __int8 *)(v32 + v69 + 14);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 15);
          v105 = 22217 * v104 + 8608 * v103;
          v106 = v98 + v96 + v101 + v87;
          v107 = v88 + v95 + v100 + v104;
          v108 = v93 + v94 + v99 + v103;
          v109 = (unsigned int *)&v180[v70 / 4];
          *v109 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-11808 * v107
                                                                          - 4574 * v108
                                                                          + (v106 << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v110 = *(unsigned __int8 *)(v31 + v69 + 17);
          v111 = *(unsigned __int8 *)(v31 + v69 + 18);
          v112 = *(unsigned __int8 *)(v31 + v69 + 19);
          v113 = *(unsigned __int8 *)(v31 + v69 + 21);
          v114 = *(unsigned __int8 *)(v31 + v69 + 22);
          v115 = *(unsigned __int8 *)(v31 + v69 + 23);
          LODWORD(v93) = 1023 * ((v105 + 1943 * v87 + 0x4000) >> 15);
          v182[1] = v102 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((22217 * v111
                                                                             + 8608 * v110
                                                                             + 1943 * v112
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v114 + 8608 * v113 + 1943 * v115 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v116 = *(unsigned __int8 *)(v32 + v69 + 17);
          LODWORD(v102) = *(unsigned __int8 *)(v32 + v69 + 18);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 19);
          v117 = *(unsigned __int8 *)(v32 + v69 + 21);
          v118 = *(unsigned __int8 *)(v32 + v69 + 22);
          v119 = *(unsigned __int8 *)(v32 + v69 + 23);
          *(_DWORD *)&v179[v70 + 4] = (((269488145 * (unint64_t)(v93 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((22217 * v102 + 8608 * v116 + 1943 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v118 + 8608 * v117 + 1943 * v119 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v120 = v114 + v111;
          v121 = v102 + v118;
          v21 = v177;
          v109[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-15065 * v107
                                                                      + (v108 << 14)
                                                                      - 1317 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-15065 * (v120 + v121) + ((v113 + v110 + v116 + v117) << 14) - 1317 * (v115 + v112 + v87 + v119) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11808 * (v120 + v121) - 4574 * (v113 + v110 + v116 + v117) + ((v115 + v112 + (_DWORD)v87 + v119) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v70 += 8;
          v69 += 24;
        }
        while (v72 < v177);
        v25 = &v180[v70 / 4];
        v122 = v162 & 0x3C;
        v33 = (unsigned int *)((char *)v161 + v122 + v70);
        v34 = (unsigned int *)((char *)v163 + v122 + v70);
        v183 = v31 + v69;
        v123 = v32 + v69;
        v124 = v181;
        v30 = v184;
      }
      if (v72 < v124)
      {
        v125 = 0;
        v126 = v160;
        v127 = v123;
        v128 = v183;
        do
        {
          if ((v72 & 1) != 0)
          {
            v132 = (unsigned __int8 *)(v128 - 3);
            v133 = (unsigned __int8 *)(v128 - 2);
            v134 = (unsigned __int8 *)(v128 - 1);
            v129 = *(unsigned __int8 *)(v183 + v125 + 1);
            v130 = *(unsigned __int8 *)(v183 + v125 + 2);
            v131 = *(unsigned __int8 *)(v183 + v125 + 3);
          }
          else
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v132 = (unsigned __int8 *)(v183 + v125 + 1);
            v133 = (unsigned __int8 *)(v183 + v125 + 2);
            v134 = (unsigned __int8 *)(v183 + v125 + 3);
          }
          v135 = *v134;
          v136 = *v133;
          v137 = *v132;
          v138 = *((unsigned __int8 *)&v187 + v126);
          *v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((22217 * v136 + 1943 * v135 + 8608 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v34 & ~(1023 << v138);
          if ((v72 & 1) != 0)
          {
            v142 = (unsigned __int8 *)(v127 - 3);
            v143 = (unsigned __int8 *)(v127 - 2);
            v144 = (unsigned __int8 *)(v127 - 1);
            v139 = *(unsigned __int8 *)(v123 + v125 + 1);
            v140 = *(unsigned __int8 *)(v123 + v125 + 2);
            v141 = *(unsigned __int8 *)(v123 + v125 + 3);
          }
          else
          {
            v139 = 0;
            v140 = 0;
            v141 = 0;
            v142 = (unsigned __int8 *)(v123 + v125 + 1);
            v143 = (unsigned __int8 *)(v123 + v125 + 2);
            v144 = (unsigned __int8 *)(v123 + v125 + 3);
          }
          v145 = *v144;
          v146 = *v143;
          v147 = *v142;
          if ((v72 & 1) != 0)
          {
            v150 = v131 + v135 + v141 + v145;
            v151 = v130 + v136 + v140 + v146;
            v152 = v129 + v137 + v139 + v147;
            v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-11808 * v151 + (v150 << 14) - 4574 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-15065 * v151 - 1317 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *v33 = *v33 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((22217 * v146
                                                                                            + 1943 * v145
                                                                                            + 8608 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2)
            v126 = 0;
          else
            ++v126;
          if ((v72 & 1) != 0)
          {
            v153 = *((unsigned __int8 *)&v187 + v185);
            *v25 = *v25 & ~(1023 << v153) | ((_DWORD)v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v185 == 2)
              v155 = 0;
            else
              v155 = v185 + 1;
            v156 = *((unsigned __int8 *)&v187 + v155);
            *v154 = *v154 & ~(1023 << v156) | ((_DWORD)v149 << v156);
            v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2)
              v157 = 0;
            else
              v157 = v155 + 1;
            v185 = v157;
          }
          v30 = v184;
          v128 += 4;
          v158 = v138 >> 4;
          v34 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v33 += v158;
        }
        while (v181 != v72);
      }
      v34 = &v174[v165];
      v31 = v171 + v166;
      v32 = v170 + v166;
      v22 = v176 + 1;
      v35 = v169 + v166;
      v29 = v172 + v166;
      v33 = &v173[v165];
      v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int *v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  int *v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v160;
  unsigned int *v161;
  unint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int *v174;
  int *v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int *v180;
  unint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int v187;

  v187 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v181 = v16;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  if (v17 >= 2)
  {
    v22 = 0;
    v168 = v13 % 3;
    v160 = v21 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v167 = v17 >> 1;
    v24 = a8[1];
    v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v27 = *a3;
    v28 = *a4;
    v29 = *a3 + *a4 * v9;
    v30 = v23;
    v186 = 4 * v10;
    v31 = v29 + 4 * v10;
    v32 = v31 + *a4;
    v166 = 2 * v28;
    v33 = (unsigned int *)(v26 + *a8);
    v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v164 = v24 >> 2;
    v34 = (unsigned int *)v26;
    v35 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v184 = v23;
    v177 = v21;
    do
    {
      v175 = v25;
      v176 = v22;
      v36 = 0;
      v172 = v29;
      v173 = v33;
      v169 = v35;
      v170 = v32;
      v37 = v168;
      v185 = v168;
      v174 = v34;
      v171 = v31;
      do
      {
        v38 = v34;
        v39 = v33;
        if ((v36 & 1) != 0)
        {
          v43 = (unsigned __int8 *)(v31 - 3);
          v44 = (unsigned __int8 *)(v31 - 2);
          v45 = (unsigned __int8 *)(v31 - 1);
          v40 = *(unsigned __int8 *)(v29 + v186 + 1);
          v41 = *(unsigned __int8 *)(v29 + v186 + 2);
          v42 = *(unsigned __int8 *)(v29 + v186 + 3);
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = (unsigned __int8 *)(v29 + v186 + 1);
          v44 = (unsigned __int8 *)(v29 + v186 + 2);
          v45 = (unsigned __int8 *)(v29 + v186 + 3);
        }
        v46 = *v45;
        v47 = *v44;
        v48 = *v43;
        v49 = *((unsigned __int8 *)&v187 + v37);
        *v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((23436 * v47 + 2366 * v46 + 6966 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if ((v36 & 1) != 0)
        {
          v53 = (unsigned __int8 *)(v32 - 3);
          v54 = (unsigned __int8 *)(v32 - 2);
          v55 = (unsigned __int8 *)(v32 - 1);
          v50 = *(unsigned __int8 *)(v35 + v186 + 1);
          v51 = *(unsigned __int8 *)(v35 + v186 + 2);
          v52 = *(unsigned __int8 *)(v35 + v186 + 3);
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = (unsigned __int8 *)(v35 + v186 + 1);
          v54 = (unsigned __int8 *)(v35 + v186 + 2);
          v55 = (unsigned __int8 *)(v35 + v186 + 3);
        }
        v56 = *v55;
        v57 = *v54;
        v58 = *v53;
        if ((v36 & 1) != 0)
        {
          v61 = v42 + v46 + v52 + v56;
          v62 = v41 + v47 + v51 + v57;
          v63 = v40 + v48 + v50 + v58;
          v59 = (67372037
               * (unint64_t)(1023 * ((-12629 * v62 + (v61 << 14) - 3753 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v60 = (67372037
               * (unint64_t)(1023 * ((-14881 * v62 - 1501 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((23436 * v57
                                                                                         + 2366 * v56
                                                                                         + 6966 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        if ((v36 & 1) != 0)
        {
          v64 = *((unsigned __int8 *)&v187 + v185);
          *v25 = *v25 & ~(1023 << v64) | ((_DWORD)v59 << v64);
          v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v185 == 2)
            v66 = 0;
          else
            v66 = v185 + 1;
          v67 = *((unsigned __int8 *)&v187 + v66);
          *v65 = *v65 & ~(1023 << v67) | ((_DWORD)v60 << v67);
          v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2)
            v68 = 0;
          else
            v68 = v66 + 1;
          v185 = v68;
          v30 = v184;
        }
        v31 += 4;
        v34 = &v38[v49 >> 4];
        v32 += 4;
        ++v36;
        v35 += 4;
        v33 = &v39[v49 >> 4];
        v29 += 4;
      }
      while (v30 != v36);
      if (v30 >= v21)
      {
        v183 = v29 + v186;
        v123 = v35 + v186;
        v72 = v30;
        v124 = v181;
      }
      else
      {
        v69 = 0;
        v70 = 0;
        v161 = v39;
        v162 = v49 >> 2;
        v71 = (v49 >> 2) & 0x3C;
        v163 = v38;
        v178 = (char *)v38 + v71;
        v179 = (char *)v39 + v71;
        v72 = v30;
        v180 = v25;
        do
        {
          v73 = *(unsigned __int8 *)(v31 + v69 + 1);
          v74 = *(unsigned __int8 *)(v31 + v69 + 2);
          v75 = *(unsigned __int8 *)(v31 + v69 + 3);
          v76 = 23436 * v74 + 6966 * v73 + 2366 * v75 + 0x4000;
          v77 = *(unsigned __int8 *)(v31 + v69 + 5);
          v78 = *(unsigned __int8 *)(v31 + v69 + 6);
          v79 = *(unsigned __int8 *)(v31 + v69 + 7);
          v80 = 23436 * v78 + 6966 * v77 + 2366 * v79 + 0x4000;
          v81 = *(unsigned __int8 *)(v32 + v69 + 1);
          v82 = *(unsigned __int8 *)(v32 + v69 + 2);
          v83 = *(unsigned __int8 *)(v32 + v69 + 3);
          v84 = *(unsigned __int8 *)(v32 + v69 + 5);
          v85 = *(unsigned __int8 *)(v32 + v69 + 6);
          v86 = *(unsigned __int8 *)(v32 + v69 + 7);
          v182 = (unsigned int *)&v178[v70];
          v87 = 269488145 * (1023 * ((23436 * v82 + 6966 * v81 + 2366 * v83 + 0x4000) >> 15) + 127);
          v88 = 269488145 * (1023 * ((23436 * v85 + 6966 * v84 + 2366 * v86 + 0x4000) >> 15) + 127);
          v89 = v79 + v75 + v83 + v86;
          v90 = v78 + v74 + v82 + v85;
          v91 = v77 + v73 + v81 + v84;
          v92 = (67372037
               * (unint64_t)(1023 * ((-12629 * v90 - 3753 * v91 + (v89 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v93 = (67372037
               * (unint64_t)(1023 * ((-14881 * v90 + (v91 << 14) - 1501 * v89 + 0x1000000) >> 17)
                                  + 127)) >> 32;
          v94 = *(unsigned __int8 *)(v31 + v69 + 9);
          v95 = *(unsigned __int8 *)(v31 + v69 + 10);
          v96 = *(unsigned __int8 *)(v31 + v69 + 11);
          *v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v95 + 6966 * v94 + 2366 * v96 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v97 = v92 | (v93 >> 2 << 10);
          LODWORD(v93) = *(unsigned __int8 *)(v31 + v69 + 13);
          LODWORD(v88) = *(unsigned __int8 *)(v31 + v69 + 14);
          v98 = *(unsigned __int8 *)(v31 + v69 + 15);
          v99 = *(unsigned __int8 *)(v32 + v69 + 9);
          v100 = *(unsigned __int8 *)(v32 + v69 + 10);
          v101 = *(unsigned __int8 *)(v32 + v69 + 11);
          v102 = (269488145
                * (unint64_t)(1023 * ((23436 * v88 + 6966 * v93 + 2366 * v98 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)&v179[v70] = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                           * (unint64_t)(1023 * ((23436 * v100 + 6966 * v99 + 2366 * v101 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v103 = *(unsigned __int8 *)(v32 + v69 + 13);
          v104 = *(unsigned __int8 *)(v32 + v69 + 14);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 15);
          v105 = 23436 * v104 + 6966 * v103;
          v106 = v98 + v96 + v101 + v87;
          v107 = v88 + v95 + v100 + v104;
          v108 = v93 + v94 + v99 + v103;
          v109 = (unsigned int *)&v180[v70 / 4];
          *v109 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-12629 * v107
                                                                          - 3753 * v108
                                                                          + (v106 << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v110 = *(unsigned __int8 *)(v31 + v69 + 17);
          v111 = *(unsigned __int8 *)(v31 + v69 + 18);
          v112 = *(unsigned __int8 *)(v31 + v69 + 19);
          v113 = *(unsigned __int8 *)(v31 + v69 + 21);
          v114 = *(unsigned __int8 *)(v31 + v69 + 22);
          v115 = *(unsigned __int8 *)(v31 + v69 + 23);
          LODWORD(v93) = 1023 * ((v105 + 2366 * v87 + 0x4000) >> 15);
          v182[1] = v102 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((23436 * v111
                                                                             + 6966 * v110
                                                                             + 2366 * v112
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v114 + 6966 * v113 + 2366 * v115 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v116 = *(unsigned __int8 *)(v32 + v69 + 17);
          LODWORD(v102) = *(unsigned __int8 *)(v32 + v69 + 18);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 19);
          v117 = *(unsigned __int8 *)(v32 + v69 + 21);
          v118 = *(unsigned __int8 *)(v32 + v69 + 22);
          v119 = *(unsigned __int8 *)(v32 + v69 + 23);
          *(_DWORD *)&v179[v70 + 4] = (((269488145 * (unint64_t)(v93 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((23436 * v102 + 6966 * v116 + 2366 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v118 + 6966 * v117 + 2366 * v119 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v120 = v114 + v111;
          v121 = v102 + v118;
          v21 = v177;
          v109[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-14881 * v107
                                                                      + (v108 << 14)
                                                                      - 1501 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-14881 * (v120 + v121) + ((v113 + v110 + v116 + v117) << 14) - 1501 * (v115 + v112 + v87 + v119) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-12629 * (v120 + v121) - 3753 * (v113 + v110 + v116 + v117) + ((v115 + v112 + (_DWORD)v87 + v119) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v70 += 8;
          v69 += 24;
        }
        while (v72 < v177);
        v25 = &v180[v70 / 4];
        v122 = v162 & 0x3C;
        v33 = (unsigned int *)((char *)v161 + v122 + v70);
        v34 = (unsigned int *)((char *)v163 + v122 + v70);
        v183 = v31 + v69;
        v123 = v32 + v69;
        v124 = v181;
        v30 = v184;
      }
      if (v72 < v124)
      {
        v125 = 0;
        v126 = v160;
        v127 = v123;
        v128 = v183;
        do
        {
          if ((v72 & 1) != 0)
          {
            v132 = (unsigned __int8 *)(v128 - 3);
            v133 = (unsigned __int8 *)(v128 - 2);
            v134 = (unsigned __int8 *)(v128 - 1);
            v129 = *(unsigned __int8 *)(v183 + v125 + 1);
            v130 = *(unsigned __int8 *)(v183 + v125 + 2);
            v131 = *(unsigned __int8 *)(v183 + v125 + 3);
          }
          else
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v132 = (unsigned __int8 *)(v183 + v125 + 1);
            v133 = (unsigned __int8 *)(v183 + v125 + 2);
            v134 = (unsigned __int8 *)(v183 + v125 + 3);
          }
          v135 = *v134;
          v136 = *v133;
          v137 = *v132;
          v138 = *((unsigned __int8 *)&v187 + v126);
          *v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((23436 * v136 + 2366 * v135 + 6966 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v34 & ~(1023 << v138);
          if ((v72 & 1) != 0)
          {
            v142 = (unsigned __int8 *)(v127 - 3);
            v143 = (unsigned __int8 *)(v127 - 2);
            v144 = (unsigned __int8 *)(v127 - 1);
            v139 = *(unsigned __int8 *)(v123 + v125 + 1);
            v140 = *(unsigned __int8 *)(v123 + v125 + 2);
            v141 = *(unsigned __int8 *)(v123 + v125 + 3);
          }
          else
          {
            v139 = 0;
            v140 = 0;
            v141 = 0;
            v142 = (unsigned __int8 *)(v123 + v125 + 1);
            v143 = (unsigned __int8 *)(v123 + v125 + 2);
            v144 = (unsigned __int8 *)(v123 + v125 + 3);
          }
          v145 = *v144;
          v146 = *v143;
          v147 = *v142;
          if ((v72 & 1) != 0)
          {
            v150 = v131 + v135 + v141 + v145;
            v151 = v130 + v136 + v140 + v146;
            v152 = v129 + v137 + v139 + v147;
            v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-12629 * v151 + (v150 << 14) - 3753 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-14881 * v151 - 1501 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *v33 = *v33 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((23436 * v146
                                                                                            + 2366 * v145
                                                                                            + 6966 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2)
            v126 = 0;
          else
            ++v126;
          if ((v72 & 1) != 0)
          {
            v153 = *((unsigned __int8 *)&v187 + v185);
            *v25 = *v25 & ~(1023 << v153) | ((_DWORD)v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v185 == 2)
              v155 = 0;
            else
              v155 = v185 + 1;
            v156 = *((unsigned __int8 *)&v187 + v155);
            *v154 = *v154 & ~(1023 << v156) | ((_DWORD)v149 << v156);
            v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2)
              v157 = 0;
            else
              v157 = v155 + 1;
            v185 = v157;
          }
          v30 = v184;
          v128 += 4;
          v158 = v138 >> 4;
          v34 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v33 += v158;
        }
        while (v181 != v72);
      }
      v34 = &v174[v165];
      v31 = v171 + v166;
      v32 = v170 + v166;
      v22 = v176 + 1;
      v35 = v169 + v166;
      v29 = v172 + v166;
      v33 = &v173[v165];
      v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int *v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  int *v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v160;
  unsigned int *v161;
  unint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int *v174;
  int *v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int *v180;
  unint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int v187;

  v187 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v181 = v16;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  if (v17 >= 2)
  {
    v22 = 0;
    v168 = v13 % 3;
    v160 = v21 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v167 = v17 >> 1;
    v24 = a8[1];
    v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v27 = *a3;
    v28 = *a4;
    v29 = *a3 + *a4 * v9;
    v30 = v23;
    v186 = 4 * v10;
    v31 = v29 + 4 * v10;
    v32 = v31 + *a4;
    v166 = 2 * v28;
    v33 = (unsigned int *)(v26 + *a8);
    v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v164 = v24 >> 2;
    v34 = (unsigned int *)v26;
    v35 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v184 = v23;
    v177 = v21;
    do
    {
      v175 = v25;
      v176 = v22;
      v36 = 0;
      v172 = v29;
      v173 = v33;
      v169 = v35;
      v170 = v32;
      v37 = v168;
      v185 = v168;
      v174 = v34;
      v171 = v31;
      do
      {
        v38 = v34;
        v39 = v33;
        if ((v36 & 1) != 0)
        {
          v43 = (unsigned __int8 *)(v31 - 3);
          v44 = (unsigned __int8 *)(v31 - 2);
          v45 = (unsigned __int8 *)(v31 - 1);
          v40 = *(unsigned __int8 *)(v29 + v186 + 1);
          v41 = *(unsigned __int8 *)(v29 + v186 + 2);
          v42 = *(unsigned __int8 *)(v29 + v186 + 3);
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = (unsigned __int8 *)(v29 + v186 + 1);
          v44 = (unsigned __int8 *)(v29 + v186 + 2);
          v45 = (unsigned __int8 *)(v29 + v186 + 3);
        }
        v46 = *v45;
        v47 = *v44;
        v48 = *v43;
        v49 = *((unsigned __int8 *)&v187 + v37);
        *v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((19235 * v47 + 3736 * v46 + 9798 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if ((v36 & 1) != 0)
        {
          v53 = (unsigned __int8 *)(v32 - 3);
          v54 = (unsigned __int8 *)(v32 - 2);
          v55 = (unsigned __int8 *)(v32 - 1);
          v50 = *(unsigned __int8 *)(v35 + v186 + 1);
          v51 = *(unsigned __int8 *)(v35 + v186 + 2);
          v52 = *(unsigned __int8 *)(v35 + v186 + 3);
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = (unsigned __int8 *)(v35 + v186 + 1);
          v54 = (unsigned __int8 *)(v35 + v186 + 2);
          v55 = (unsigned __int8 *)(v35 + v186 + 3);
        }
        v56 = *v55;
        v57 = *v54;
        v58 = *v53;
        if ((v36 & 1) != 0)
        {
          v61 = v42 + v46 + v52 + v56;
          v62 = v41 + v47 + v51 + v57;
          v63 = v40 + v48 + v50 + v58;
          v59 = (67372037
               * (unint64_t)(1023 * ((-10854 * v62 + (v61 << 14) - 5528 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v60 = (67372037
               * (unint64_t)(1023 * ((-13719 * v62 - 2663 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((19235 * v57
                                                                                         + 3736 * v56
                                                                                         + 9798 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        if ((v36 & 1) != 0)
        {
          v64 = *((unsigned __int8 *)&v187 + v185);
          *v25 = *v25 & ~(1023 << v64) | ((_DWORD)v59 << v64);
          v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v185 == 2)
            v66 = 0;
          else
            v66 = v185 + 1;
          v67 = *((unsigned __int8 *)&v187 + v66);
          *v65 = *v65 & ~(1023 << v67) | ((_DWORD)v60 << v67);
          v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2)
            v68 = 0;
          else
            v68 = v66 + 1;
          v185 = v68;
          v30 = v184;
        }
        v31 += 4;
        v34 = &v38[v49 >> 4];
        v32 += 4;
        ++v36;
        v35 += 4;
        v33 = &v39[v49 >> 4];
        v29 += 4;
      }
      while (v30 != v36);
      if (v30 >= v21)
      {
        v183 = v29 + v186;
        v123 = v35 + v186;
        v72 = v30;
        v124 = v181;
      }
      else
      {
        v69 = 0;
        v70 = 0;
        v161 = v39;
        v162 = v49 >> 2;
        v71 = (v49 >> 2) & 0x3C;
        v163 = v38;
        v178 = (char *)v38 + v71;
        v179 = (char *)v39 + v71;
        v72 = v30;
        v180 = v25;
        do
        {
          v73 = *(unsigned __int8 *)(v31 + v69 + 1);
          v74 = *(unsigned __int8 *)(v31 + v69 + 2);
          v75 = *(unsigned __int8 *)(v31 + v69 + 3);
          v76 = 19235 * v74 + 9798 * v73 + 3736 * v75 + 0x4000;
          v77 = *(unsigned __int8 *)(v31 + v69 + 5);
          v78 = *(unsigned __int8 *)(v31 + v69 + 6);
          v79 = *(unsigned __int8 *)(v31 + v69 + 7);
          v80 = 19235 * v78 + 9798 * v77 + 3736 * v79 + 0x4000;
          v81 = *(unsigned __int8 *)(v32 + v69 + 1);
          v82 = *(unsigned __int8 *)(v32 + v69 + 2);
          v83 = *(unsigned __int8 *)(v32 + v69 + 3);
          v84 = *(unsigned __int8 *)(v32 + v69 + 5);
          v85 = *(unsigned __int8 *)(v32 + v69 + 6);
          v86 = *(unsigned __int8 *)(v32 + v69 + 7);
          v182 = (unsigned int *)&v178[v70];
          v87 = 269488145 * (1023 * ((19235 * v82 + 9798 * v81 + 3736 * v83 + 0x4000) >> 15) + 127);
          v88 = 269488145 * (1023 * ((19235 * v85 + 9798 * v84 + 3736 * v86 + 0x4000) >> 15) + 127);
          v89 = v79 + v75 + v83 + v86;
          v90 = v78 + v74 + v82 + v85;
          v91 = v77 + v73 + v81 + v84;
          v92 = (67372037
               * (unint64_t)(1023 * ((-10854 * v90 - 5528 * v91 + (v89 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v93 = (67372037
               * (unint64_t)(1023 * ((-13719 * v90 + (v91 << 14) - 2663 * v89 + 0x1000000) >> 17)
                                  + 127)) >> 32;
          v94 = *(unsigned __int8 *)(v31 + v69 + 9);
          v95 = *(unsigned __int8 *)(v31 + v69 + 10);
          v96 = *(unsigned __int8 *)(v31 + v69 + 11);
          *v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v95 + 9798 * v94 + 3736 * v96 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v97 = v92 | (v93 >> 2 << 10);
          LODWORD(v93) = *(unsigned __int8 *)(v31 + v69 + 13);
          LODWORD(v88) = *(unsigned __int8 *)(v31 + v69 + 14);
          v98 = *(unsigned __int8 *)(v31 + v69 + 15);
          v99 = *(unsigned __int8 *)(v32 + v69 + 9);
          v100 = *(unsigned __int8 *)(v32 + v69 + 10);
          v101 = *(unsigned __int8 *)(v32 + v69 + 11);
          v102 = (269488145
                * (unint64_t)(1023 * ((19235 * v88 + 9798 * v93 + 3736 * v98 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)&v179[v70] = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                           * (unint64_t)(1023 * ((19235 * v100 + 9798 * v99 + 3736 * v101 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v103 = *(unsigned __int8 *)(v32 + v69 + 13);
          v104 = *(unsigned __int8 *)(v32 + v69 + 14);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 15);
          v105 = 19235 * v104 + 9798 * v103;
          v106 = v98 + v96 + v101 + v87;
          v107 = v88 + v95 + v100 + v104;
          v108 = v93 + v94 + v99 + v103;
          v109 = (unsigned int *)&v180[v70 / 4];
          *v109 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-10854 * v107
                                                                          - 5528 * v108
                                                                          + (v106 << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v110 = *(unsigned __int8 *)(v31 + v69 + 17);
          v111 = *(unsigned __int8 *)(v31 + v69 + 18);
          v112 = *(unsigned __int8 *)(v31 + v69 + 19);
          v113 = *(unsigned __int8 *)(v31 + v69 + 21);
          v114 = *(unsigned __int8 *)(v31 + v69 + 22);
          v115 = *(unsigned __int8 *)(v31 + v69 + 23);
          LODWORD(v93) = 1023 * ((v105 + 3736 * v87 + 0x4000) >> 15);
          v182[1] = v102 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((19235 * v111
                                                                             + 9798 * v110
                                                                             + 3736 * v112
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v114 + 9798 * v113 + 3736 * v115 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v116 = *(unsigned __int8 *)(v32 + v69 + 17);
          LODWORD(v102) = *(unsigned __int8 *)(v32 + v69 + 18);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 19);
          v117 = *(unsigned __int8 *)(v32 + v69 + 21);
          v118 = *(unsigned __int8 *)(v32 + v69 + 22);
          v119 = *(unsigned __int8 *)(v32 + v69 + 23);
          *(_DWORD *)&v179[v70 + 4] = (((269488145 * (unint64_t)(v93 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((19235 * v102 + 9798 * v116 + 3736 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v118 + 9798 * v117 + 3736 * v119 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v120 = v114 + v111;
          v121 = v102 + v118;
          v21 = v177;
          v109[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13719 * v107
                                                                      + (v108 << 14)
                                                                      - 2663 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13719 * (v120 + v121) + ((v113 + v110 + v116 + v117) << 14) - 2663 * (v115 + v112 + v87 + v119) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10854 * (v120 + v121) - 5528 * (v113 + v110 + v116 + v117) + ((v115 + v112 + (_DWORD)v87 + v119) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v70 += 8;
          v69 += 24;
        }
        while (v72 < v177);
        v25 = &v180[v70 / 4];
        v122 = v162 & 0x3C;
        v33 = (unsigned int *)((char *)v161 + v122 + v70);
        v34 = (unsigned int *)((char *)v163 + v122 + v70);
        v183 = v31 + v69;
        v123 = v32 + v69;
        v124 = v181;
        v30 = v184;
      }
      if (v72 < v124)
      {
        v125 = 0;
        v126 = v160;
        v127 = v123;
        v128 = v183;
        do
        {
          if ((v72 & 1) != 0)
          {
            v132 = (unsigned __int8 *)(v128 - 3);
            v133 = (unsigned __int8 *)(v128 - 2);
            v134 = (unsigned __int8 *)(v128 - 1);
            v129 = *(unsigned __int8 *)(v183 + v125 + 1);
            v130 = *(unsigned __int8 *)(v183 + v125 + 2);
            v131 = *(unsigned __int8 *)(v183 + v125 + 3);
          }
          else
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v132 = (unsigned __int8 *)(v183 + v125 + 1);
            v133 = (unsigned __int8 *)(v183 + v125 + 2);
            v134 = (unsigned __int8 *)(v183 + v125 + 3);
          }
          v135 = *v134;
          v136 = *v133;
          v137 = *v132;
          v138 = *((unsigned __int8 *)&v187 + v126);
          *v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((19235 * v136 + 3736 * v135 + 9798 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v34 & ~(1023 << v138);
          if ((v72 & 1) != 0)
          {
            v142 = (unsigned __int8 *)(v127 - 3);
            v143 = (unsigned __int8 *)(v127 - 2);
            v144 = (unsigned __int8 *)(v127 - 1);
            v139 = *(unsigned __int8 *)(v123 + v125 + 1);
            v140 = *(unsigned __int8 *)(v123 + v125 + 2);
            v141 = *(unsigned __int8 *)(v123 + v125 + 3);
          }
          else
          {
            v139 = 0;
            v140 = 0;
            v141 = 0;
            v142 = (unsigned __int8 *)(v123 + v125 + 1);
            v143 = (unsigned __int8 *)(v123 + v125 + 2);
            v144 = (unsigned __int8 *)(v123 + v125 + 3);
          }
          v145 = *v144;
          v146 = *v143;
          v147 = *v142;
          if ((v72 & 1) != 0)
          {
            v150 = v131 + v135 + v141 + v145;
            v151 = v130 + v136 + v140 + v146;
            v152 = v129 + v137 + v139 + v147;
            v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-10854 * v151 + (v150 << 14) - 5528 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-13719 * v151 - 2663 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *v33 = *v33 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((19235 * v146
                                                                                            + 3736 * v145
                                                                                            + 9798 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2)
            v126 = 0;
          else
            ++v126;
          if ((v72 & 1) != 0)
          {
            v153 = *((unsigned __int8 *)&v187 + v185);
            *v25 = *v25 & ~(1023 << v153) | ((_DWORD)v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v185 == 2)
              v155 = 0;
            else
              v155 = v185 + 1;
            v156 = *((unsigned __int8 *)&v187 + v155);
            *v154 = *v154 & ~(1023 << v156) | ((_DWORD)v149 << v156);
            v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2)
              v157 = 0;
            else
              v157 = v155 + 1;
            v185 = v157;
          }
          v30 = v184;
          v128 += 4;
          v158 = v138 >> 4;
          v34 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v33 += v158;
        }
        while (v181 != v72);
      }
      v34 = &v174[v165];
      v31 = v171 + v166;
      v32 = v170 + v166;
      v22 = v176 + 1;
      v35 = v169 + v166;
      v29 = v172 + v166;
      v33 = &v173[v165];
      v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_2vuy(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_2vuy;
  *a11 = vt_VImage_Cleanup_32BGRA_2vuy;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32BGRA_yuvsITU2020_vec(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  __int128 v12;
  unint64_t v13;

  v12 = xmmword_1928DFB44;
  v13 = 0xFB7FCC75380ED79ALL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000084000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU709_vec(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  __int128 v12;
  unint64_t v13;

  v12 = xmmword_1928DFB5C;
  v13 = 0xFAD9CCF03838D4ABLL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000084000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU601_vec(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  __int128 v12;
  unint64_t v13;

  v12 = xmmword_1928DFB74;
  v13 = 0xF6DCD0ED3838DAC2;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000084000, a8, a9, a10, a11);
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_yuvs(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_yuvs;
  *a11 = vt_VImage_Cleanup_32BGRA_yuvs;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_420f(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_420f;
  *a11 = vt_VImage_Cleanup_32BGRA_420f;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32BGRA_yuvfITU2020_vec(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  __int128 v12;
  unint64_t v13;

  v12 = xmmword_1928DFB8C;
  v13 = 0xFADBC5274000D1E0;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000004000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU709_vec(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  __int128 v12;
  unint64_t v13;

  v12 = xmmword_1928DFBA4;
  v13 = 0xFA23C5DF4000CEABLL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000004000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU601_vec(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  __int128 v12;
  unint64_t v13;

  v12 = xmmword_1928DFBBC;
  v13 = 0xF599CA694000D59ALL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000004000, a8, a9, a10, a11);
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_yuvf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_yuvf;
  *a11 = vt_VImage_Cleanup_32BGRA_yuvf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_2vuf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_2vuf;
  *a11 = vt_VImage_Cleanup_32BGRA_2vuf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_y420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_y420;
  *a11 = vt_VImage_Cleanup_32BGRA_y420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_f420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_f420;
  *a11 = vt_VImage_Cleanup_32BGRA_f420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_420v(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_420v;
  *a11 = vt_VImage_Cleanup_32BGRA_420v;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_v0a8(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v0a8;
  *a11 = vt_VImage_Cleanup_32BGRA_v0a8;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32BGRA_32ARGB(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a6;
    v10 = *a4;
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          *(_DWORD *)(v9 + 4 * i) = bswap32(*(_DWORD *)(v10 + 4 * i));
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_32BGRA_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_32ARGB;
  *a11 = vt_VImage_Cleanup_32BGRA_32ARGB;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_v210(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v210;
  *a11 = vt_VImage_Cleanup_32BGRA_v210;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32BGRA_R10k(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_R10k;
  *a11 = vt_VImage_Cleanup_32BGRA_R10k;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp16, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v216;
  *a11 = vt_VImage_Cleanup_32BGRA_v216;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_y408(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_y408;
  *a11 = vt_VImage_Cleanup_32BGRA_y408;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444CrYpCb10, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v410;
  *a11 = vt_VImage_Cleanup_32BGRA_v410;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr16, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_y416;
  *a11 = vt_VImage_Cleanup_32BGRA_y416;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32BGRA_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_RGhA;
  *a11 = vt_VImage_Cleanup_32BGRA_RGhA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_32BGRA_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1111970369, a1);
}

vImage_Error vt_VImage_Copy_32BGRA_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1111970369, a1);
}

vImage_Error vt_VImage_Setup_32BGRA_xw20(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  malloc_type_id_t v26;
  __int128 v28;
  __int128 v29;
  vImage_YpCbCrPixelRange pixelRange;

  v28 = 0u;
  v29 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v28 = v20;
    v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  if (!v22 && (*((_QWORD *)v17 + 34) != a1 || *((_QWORD *)v17 + 33) != a2 || *((_QWORD *)v17 + 35) != 4 * a1))
  {
    v23 = (void *)*((_QWORD *)v17 + 32);
    if (v23)
    {
      *((_QWORD *)v17 + 32) = 0;
      free(v23);
    }
    v24 = 4 * a1;
    if (a2 && v24)
    {
      v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v24))
        goto LABEL_25;
      v25 = v24 * a2;
      if (!(v24 * a2))
        goto LABEL_25;
      v26 = 1556728742;
    }
    else
    {
      v25 = 0;
      v26 = 1270757447;
    }
    v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((_QWORD *)v17 + 32) = v25;
    *((_QWORD *)v17 + 33) = a2;
    *((_QWORD *)v17 + 34) = a1;
    *((_QWORD *)v17 + 35) = v24;
  }
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_xw20;
  *a11 = vt_VImage_Cleanup_32BGRA_xw20;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_32BGRA_xw22(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  malloc_type_id_t v26;
  __int128 v28;
  __int128 v29;
  vImage_YpCbCrPixelRange pixelRange;

  v28 = 0u;
  v29 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v28 = v20;
    v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  if (!v22 && (*((_QWORD *)v17 + 34) != a1 || *((_QWORD *)v17 + 33) != a2 || *((_QWORD *)v17 + 35) != 4 * a1))
  {
    v23 = (void *)*((_QWORD *)v17 + 32);
    if (v23)
    {
      *((_QWORD *)v17 + 32) = 0;
      free(v23);
    }
    v24 = 4 * a1;
    if (a2 && v24)
    {
      v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v24))
        goto LABEL_25;
      v25 = v24 * a2;
      if (!(v24 * a2))
        goto LABEL_25;
      v26 = 1556728742;
    }
    else
    {
      v25 = 0;
      v26 = 1270757447;
    }
    v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((_QWORD *)v17 + 32) = v25;
    *((_QWORD *)v17 + 33) = a2;
    *((_QWORD *)v17 + 34) = a1;
    *((_QWORD *)v17 + 35) = v24;
  }
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_xw22;
  *a11 = vt_VImage_Cleanup_32BGRA_xw22;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_32BGRA_xw44(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  malloc_type_id_t v26;
  __int128 v28;
  __int128 v29;
  vImage_YpCbCrPixelRange pixelRange;

  v28 = 0u;
  v29 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v28 = v20;
    v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  if (!v22 && (*((_QWORD *)v17 + 34) != a1 || *((_QWORD *)v17 + 33) != a2 || *((_QWORD *)v17 + 35) != 4 * a1))
  {
    v23 = (void *)*((_QWORD *)v17 + 32);
    if (v23)
    {
      *((_QWORD *)v17 + 32) = 0;
      free(v23);
    }
    v24 = 4 * a1;
    if (a2 && v24)
    {
      v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v24))
        goto LABEL_25;
      v25 = v24 * a2;
      if (!(v24 * a2))
        goto LABEL_25;
      v26 = 1556728742;
    }
    else
    {
      v25 = 0;
      v26 = 1270757447;
    }
    v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((_QWORD *)v17 + 32) = v25;
    *((_QWORD *)v17 + 33) = a2;
    *((_QWORD *)v17 + 34) = a1;
    *((_QWORD *)v17 + 35) = v24;
  }
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_xw44;
  *a11 = vt_VImage_Cleanup_32BGRA_xw44;
  *a8 = v17;
  return v22;
}

uint64_t vt_Copy_32BGRA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  unsigned int *v41;
  unsigned __int8 *v42;
  unsigned int *v43;
  unsigned int *v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int *v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int *v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int *v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int *v124;
  uint64_t v125;
  unint64_t v126;
  unsigned __int8 *v127;
  int *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  int v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  int v156;
  unint64_t v157;
  int *v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int v161;
  unsigned int v163;
  unint64_t v164;
  unsigned int *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  int *v178;
  uint64_t v179;
  char *v180;
  int *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  char *v186;
  unsigned __int8 *v187;
  unsigned int v188;
  int v189;

  v189 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v15 = v13 - v12;
  else
    v15 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 < v14 - v11)
    v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v17 = v13 % 6;
  v18 = v15 >= v17;
  v19 = v15 - v17;
  if (!v18)
    v19 = 0;
  v182 = v19;
  if (v16 >= 2)
  {
    v179 = 0;
    v171 = v12 % 3;
    v163 = v19 % 3;
    v20 = 6 * (v12 / 6) - v12 + 6;
    v170 = v16 >> 1;
    v21 = a8[1];
    v22 = a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3);
    v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    v24 = (unsigned int *)(v23 + *a8);
    v25 = *a3;
    v26 = *a4;
    v27 = *a3 + *a4 * v9;
    v28 = 4 * v10;
    v29 = (unsigned __int8 *)(v27 + 4 * v10);
    v169 = 2 * v26;
    v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v30 = (int *)v22;
    v166 = v15;
    v167 = v21 >> 2;
    v31 = v26 + v26 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    v32 = &v29[v26];
    v33 = (unsigned int *)v23;
    v34 = v28;
    v35 = v29;
    v36 = v25 + v31;
    v183 = v28;
    v185 = v20;
    do
    {
      v37 = 0;
      v175 = v27;
      v176 = v24;
      v38 = v27;
      v172 = v36;
      v173 = v32;
      v39 = v171;
      v188 = v171;
      v177 = v33;
      v178 = v30;
      v40 = v30;
      v41 = v33;
      v174 = v35;
      v42 = v35;
      do
      {
        v43 = v41;
        v44 = v24;
        if ((v37 & 1) != 0)
        {
          v50 = (unsigned __int8 *)(v38 + v34 - 4);
          v48 = v42 - 2;
          v49 = v42 - 3;
          v45 = *(unsigned __int8 *)(v38 + v34 + 2);
          v46 = *(unsigned __int8 *)(v38 + v34 + 1);
          v47 = *(unsigned __int8 *)(v38 + v34);
        }
        else
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = (unsigned __int8 *)(v38 + v34 + 2);
          v49 = (unsigned __int8 *)(v38 + v34 + 1);
          v50 = v42;
        }
        v51 = *v50;
        v52 = *v49;
        v53 = *v48;
        v54 = *((unsigned __int8 *)&v189 + v39);
        *v43 = (((269488145
                              * (unint64_t)(1023
                                                 * ((1664 * v51 + 540672 + 19024 * v52 + 7371 * v53) >> 15)
                                                 + 127)) >> 32) >> 4 << v54) | *v43 & ~(1023 << v54);
        if ((v37 & 1) != 0)
        {
          v60 = (unsigned __int8 *)(v36 + v34 - 4);
          v58 = v32 - 2;
          v59 = v32 - 3;
          v55 = *(unsigned __int8 *)(v36 + v34 + 2);
          v56 = *(unsigned __int8 *)(v36 + v34 + 1);
          v57 = *(unsigned __int8 *)(v36 + v34);
        }
        else
        {
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = (unsigned __int8 *)(v36 + v34 + 2);
          v59 = (unsigned __int8 *)(v36 + v34 + 1);
          v60 = v32;
        }
        v61 = *v60;
        v62 = *v59;
        v63 = *v58;
        if ((v37 & 1) != 0)
        {
          v66 = v47 + v51 + v57 + v61;
          v67 = v46 + v52 + v56 + v62;
          v68 = v45 + v53 + v55 + v63;
          v64 = (67372037
               * (unint64_t)(1023 * ((-10342 * v67 + 14350 * v66 - 4006 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v65 = (67372037
               * (unint64_t)(1023 * ((-13195 * v67 - 1153 * v66 + 14350 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v64) = 0;
          LODWORD(v65) = 0;
        }
        *v44 = *v44 & ~(1023 << v54) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((1664 * v61
                                                                                         + 540672
                                                                                         + 19024 * v62
                                                                                         + 7371 * v63) >> 15)
                                                                         + 127)) >> 32) >> 4 << v54);
        if (v39 == 2)
          v39 = 0;
        else
          ++v39;
        if ((v37 & 1) != 0)
        {
          v69 = *((unsigned __int8 *)&v189 + v188);
          *v40 = *v40 & ~(1023 << v69) | ((_DWORD)v64 << v69);
          v70 = (int *)((char *)v40 + ((v69 >> 2) & 0x3C));
          if (v188 == 2)
            v71 = 0;
          else
            v71 = v188 + 1;
          v72 = *((unsigned __int8 *)&v189 + v71);
          v34 = v183;
          *v70 = *v70 & ~(1023 << v72) | ((_DWORD)v65 << v72);
          v40 = (int *)((char *)v70 + ((v72 >> 2) & 0x3C));
          if (v71 == 2)
            v73 = 0;
          else
            v73 = v71 + 1;
          v188 = v73;
        }
        v42 += 4;
        v41 = &v43[v54 >> 4];
        v32 += 4;
        ++v37;
        v36 += 4;
        v24 = &v44[v54 >> 4];
        v38 += 4;
      }
      while (v185 != v37);
      if (v185 >= v182)
      {
        v127 = (unsigned __int8 *)(v38 + v34);
        v187 = (unsigned __int8 *)(v36 + v34);
        v77 = v185;
        v128 = v40;
        v126 = v166;
      }
      else
      {
        v74 = 0;
        v164 = v54 >> 2;
        v165 = v44;
        v75 = (v54 >> 2) & 0x3C;
        v180 = (char *)v44 + v75;
        v76 = v34;
        v77 = v185;
        v181 = v40;
        do
        {
          v186 = &v180[v74];
          v78 = *(unsigned __int8 *)(v38 + v76 + 2);
          v79 = *(unsigned __int8 *)(v38 + v76 + 1);
          v80 = *(unsigned __int8 *)(v38 + v76);
          v81 = 7371 * v78 + 540672 + 19024 * v79 + 1664 * v80;
          v82 = *(unsigned __int8 *)(v38 + v76 + 6);
          v83 = *(unsigned __int8 *)(v38 + v76 + 5);
          v84 = *(unsigned __int8 *)(v38 + v76 + 4);
          v85 = *(unsigned __int8 *)(v36 + v76 + 2);
          v86 = *(unsigned __int8 *)(v36 + v76 + 1);
          v87 = *(unsigned __int8 *)(v36 + v76);
          v88 = *(unsigned __int8 *)(v36 + v76 + 6);
          v89 = *(unsigned __int8 *)(v36 + v76 + 5);
          v90 = *(unsigned __int8 *)(v36 + v76 + 4);
          v91 = (unsigned int *)((char *)v43 + v75 + v74);
          v92 = 269488145 * (1023 * ((7371 * v85 + 540672 + 19024 * v86 + 1664 * v87) >> 15) + 127);
          v93 = v84 + v80 + v87 + v90;
          v94 = v83 + v79 + v86 + v89;
          v95 = v82 + v78 + v85 + v88;
          v96 = 67372037 * (1023 * ((-10342 * v94 - 4006 * v95 + 14350 * v93 + 0x1000000) >> 17) + 127);
          v97 = -13195 * v94 + 14350 * v95 - 1153 * v93 + 0x1000000;
          v98 = (((269488145 * (unint64_t)(1023 * (v81 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((7371 * v82 + 540672 + 19024 * v83 + 1664 * v84) >> 15) + 127)) >> 32) >> 4 << 10);
          LODWORD(v92) = (v92 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((7371 * v88
                                                                                         + 540672
                                                                                         + 19024 * v89
                                                                                         + 1664 * v90) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          v99 = *(unsigned __int8 *)(v38 + v76 + 10);
          v100 = *(unsigned __int8 *)(v38 + v76 + 9);
          v101 = *(unsigned __int8 *)(v38 + v76 + 8);
          v102 = (v96 >> 34) | (((67372037 * (unint64_t)(1023 * (v97 >> 17) + 127)) >> 32) >> 2 << 10);
          *v91 = v98 | (((269488145
                                      * (unint64_t)(1023
                                                         * ((7371 * v99
                                                                         + 540672
                                                                         + 19024 * v100
                                                                         + 1664 * v101) >> 15)
                                                         + 127)) >> 32) >> 4 << 20);
          v103 = *(unsigned __int8 *)(v38 + v76 + 14);
          v104 = *(unsigned __int8 *)(v38 + v76 + 13);
          LODWORD(v96) = *(unsigned __int8 *)(v38 + v76 + 12);
          v105 = *(unsigned __int8 *)(v36 + v76 + 10);
          v106 = *(unsigned __int8 *)(v36 + v76 + 9);
          v107 = *(unsigned __int8 *)(v36 + v76 + 8);
          v108 = (269488145
                * (unint64_t)(1023 * ((7371 * v103 + 540672 + 19024 * v104 + 1664 * v96) >> 15)
                                   + 127)) >> 36;
          *(_DWORD *)v186 = v92 | (((269488145
                                                 * (unint64_t)(1023
                                                                    * ((7371 * v105
                                                                                    + 540672
                                                                                    + 19024 * v106
                                                                                    + 1664 * v107) >> 15)
                                                                    + 127)) >> 32) >> 4 << 20);
          LODWORD(v92) = *(unsigned __int8 *)(v36 + v76 + 13);
          v109 = *(unsigned __int8 *)(v36 + v76 + 14);
          v110 = *(unsigned __int8 *)(v36 + v76 + 12);
          v184 = v96 + v101 + v107 + v110;
          v111 = v104 + v100 + v106 + v92;
          LODWORD(v96) = v103 + v99 + v105 + v109;
          v112 = (unsigned int *)&v181[v74 / 4];
          *v112 = v102 | (((67372037
                                        * (unint64_t)(1023
                                                           * ((-10342 * v111
                                                                           - 4006 * v96
                                                                           + 14350 * v184
                                                                           + 0x1000000) >> 17)
                                                           + 127)) >> 32) >> 2 << 20);
          v113 = *(unsigned __int8 *)(v38 + v76 + 18);
          v114 = 1023 * ((7371 * v109 + 540672 + 19024 * v92 + 1664 * v110) >> 15);
          v115 = *(unsigned __int8 *)(v38 + v76 + 17);
          v116 = *(unsigned __int8 *)(v38 + v76 + 16);
          v117 = *(unsigned __int8 *)(v38 + v76 + 22);
          v118 = *(unsigned __int8 *)(v38 + v76 + 21);
          v119 = *(unsigned __int8 *)(v38 + v76 + 20);
          v91[1] = v108 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((7371 * v113
                                                                            + 540672
                                                                            + 19024 * v115
                                                                            + 1664 * v116) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v117 + 540672 + 19024 * v118 + 1664 * v119) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v91) = *(unsigned __int8 *)(v36 + v76 + 18);
          LODWORD(v108) = *(unsigned __int8 *)(v36 + v76 + 17);
          v120 = *(unsigned __int8 *)(v36 + v76 + 16);
          v121 = *(unsigned __int8 *)(v36 + v76 + 22);
          v122 = *(unsigned __int8 *)(v36 + v76 + 21);
          v123 = *(unsigned __int8 *)(v36 + v76 + 20);
          *((_DWORD *)v186 + 1) = (((269488145 * (unint64_t)(v114 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((7371 * (_DWORD)v91 + 540672 + 19024 * v108 + 1664 * v120) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v121 + 540672 + 19024 * v122 + 1664 * v123) >> 15) + 127)) >> 32) >> 4 << 20);
          v112[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13195 * v111
                                                                      + 14350 * v96
                                                                      - 1153 * v184
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13195 * (v118 + v115 + v108 + v122) + 14350 * (v117 + v113 + (_DWORD)v91 + v121) - 1153 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10342 * (v118 + v115 + v108 + v122) - 4006 * (v117 + v113 + (_DWORD)v91 + v121) + 14350 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v77 += 6;
          v74 += 8;
          v76 += 24;
        }
        while (v77 < v182);
        v124 = &v181[v74 / 4];
        v125 = v164 & 0x3C;
        v24 = (unsigned int *)((char *)v165 + v125 + v74);
        v126 = v166;
        v41 = (unsigned int *)((char *)v43 + v125 + v74);
        v127 = (unsigned __int8 *)(v38 + v76);
        v187 = (unsigned __int8 *)(v36 + v76);
        v34 = v183;
        v128 = v124;
      }
      if (v77 < v126)
      {
        v129 = 0;
        v130 = v163;
        v131 = v187;
        v132 = v127;
        do
        {
          if ((v77 & 1) != 0)
          {
            v138 = &v127[v129 - 4];
            v136 = v132 - 2;
            v137 = v132 - 3;
            v133 = v127[v129 + 2];
            v134 = v127[v129 + 1];
            v135 = v127[v129];
          }
          else
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            v136 = &v127[v129 + 2];
            v137 = &v127[v129 + 1];
            v138 = v132;
          }
          v139 = *v138;
          v140 = *v137;
          v141 = *v136;
          v142 = *((unsigned __int8 *)&v189 + v130);
          *v41 = (((269488145
                                * (unint64_t)(1023
                                                   * ((1664 * v139 + 540672 + 19024 * v140 + 7371 * v141) >> 15)
                                                   + 127)) >> 32) >> 4 << v142) | *v41 & ~(1023 << v142);
          if ((v77 & 1) != 0)
          {
            v148 = &v187[v129 - 4];
            v146 = v131 - 2;
            v147 = v131 - 3;
            v143 = v187[v129 + 2];
            v144 = v187[v129 + 1];
            v145 = v187[v129];
          }
          else
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            v146 = &v187[v129 + 2];
            v147 = &v187[v129 + 1];
            v148 = v131;
          }
          v149 = *v148;
          v150 = *v147;
          v151 = *v146;
          if ((v77 & 1) != 0)
          {
            v154 = v135 + v139 + v145 + v149;
            v155 = v134 + v140 + v144 + v150;
            v156 = v133 + v141 + v143 + v151;
            v152 = (67372037
                  * (unint64_t)(1023
                                     * ((-10342 * v155 + 14350 * v154 - 4006 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v153 = (67372037
                  * (unint64_t)(1023
                                     * ((-13195 * v155 - 1153 * v154 + 14350 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v152) = 0;
            LODWORD(v153) = 0;
          }
          *v24 = *v24 & ~(1023 << v142) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((1664 * v149
                                                                                            + 540672
                                                                                            + 19024 * v150
                                                                                            + 7371 * v151) >> 15)
                                                                            + 127)) >> 32) >> 4 << v142);
          if (v130 == 2)
            v130 = 0;
          else
            ++v130;
          if ((v77 & 1) != 0)
          {
            v157 = *((unsigned __int8 *)&v189 + v188);
            *v128 = *v128 & ~(1023 << v157) | ((_DWORD)v152 << v157);
            v158 = (int *)((char *)v128 + ((v157 >> 2) & 0x3C));
            if (v188 == 2)
              v159 = 0;
            else
              v159 = v188 + 1;
            v160 = *((unsigned __int8 *)&v189 + v159);
            v34 = v183;
            *v158 = *v158 & ~(1023 << v160) | ((_DWORD)v153 << v160);
            v128 = (int *)((char *)v158 + ((v160 >> 2) & 0x3C));
            if (v159 == 2)
              v161 = 0;
            else
              v161 = v159 + 1;
            v188 = v161;
          }
          v132 += 4;
          v41 += v142 >> 4;
          v131 += 4;
          ++v77;
          v129 += 4;
          v24 += v142 >> 4;
        }
        while (v126 != v77);
      }
      v33 = &v177[v168];
      v35 = &v174[v169];
      v32 = &v173[v169];
      v36 = v172 + v169;
      v27 = v175 + v169;
      v24 = &v176[v168];
      v30 = &v178[v167];
      ++v179;
    }
    while (v179 != v170);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  unsigned int *v41;
  unsigned __int8 *v42;
  unsigned int *v43;
  unsigned int *v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int *v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int *v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int *v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int *v124;
  uint64_t v125;
  unint64_t v126;
  unsigned __int8 *v127;
  int *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  int v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  int v156;
  unint64_t v157;
  int *v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int v161;
  unsigned int v163;
  unint64_t v164;
  unsigned int *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  int *v178;
  uint64_t v179;
  char *v180;
  int *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  char *v186;
  unsigned __int8 *v187;
  unsigned int v188;
  int v189;

  v189 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v15 = v13 - v12;
  else
    v15 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 < v14 - v11)
    v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v17 = v13 % 6;
  v18 = v15 >= v17;
  v19 = v15 - v17;
  if (!v18)
    v19 = 0;
  v182 = v19;
  if (v16 >= 2)
  {
    v179 = 0;
    v171 = v12 % 3;
    v163 = v19 % 3;
    v20 = 6 * (v12 / 6) - v12 + 6;
    v170 = v16 >> 1;
    v21 = a8[1];
    v22 = a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3);
    v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    v24 = (unsigned int *)(v23 + *a8);
    v25 = *a3;
    v26 = *a4;
    v27 = *a3 + *a4 * v9;
    v28 = 4 * v10;
    v29 = (unsigned __int8 *)(v27 + 4 * v10);
    v169 = 2 * v26;
    v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v30 = (int *)v22;
    v166 = v15;
    v167 = v21 >> 2;
    v31 = v26 + v26 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    v32 = &v29[v26];
    v33 = (unsigned int *)v23;
    v34 = v28;
    v35 = v29;
    v36 = v25 + v31;
    v183 = v28;
    v185 = v20;
    do
    {
      v37 = 0;
      v175 = v27;
      v176 = v24;
      v38 = v27;
      v172 = v36;
      v173 = v32;
      v39 = v171;
      v188 = v171;
      v177 = v33;
      v178 = v30;
      v40 = v30;
      v41 = v33;
      v174 = v35;
      v42 = v35;
      do
      {
        v43 = v41;
        v44 = v24;
        if ((v37 & 1) != 0)
        {
          v50 = (unsigned __int8 *)(v38 + v34 - 4);
          v48 = v42 - 2;
          v49 = v42 - 3;
          v45 = *(unsigned __int8 *)(v38 + v34 + 2);
          v46 = *(unsigned __int8 *)(v38 + v34 + 1);
          v47 = *(unsigned __int8 *)(v38 + v34);
        }
        else
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = (unsigned __int8 *)(v38 + v34 + 2);
          v49 = (unsigned __int8 *)(v38 + v34 + 1);
          v50 = v42;
        }
        v51 = *v50;
        v52 = *v49;
        v53 = *v48;
        v54 = *((unsigned __int8 *)&v189 + v39);
        *v43 = (((269488145
                              * (unint64_t)(1023
                                                 * ((2032 * v51 + 540672 + 20127 * v52 + 5983 * v53) >> 15)
                                                 + 127)) >> 32) >> 4 << v54) | *v43 & ~(1023 << v54);
        if ((v37 & 1) != 0)
        {
          v60 = (unsigned __int8 *)(v36 + v34 - 4);
          v58 = v32 - 2;
          v59 = v32 - 3;
          v55 = *(unsigned __int8 *)(v36 + v34 + 2);
          v56 = *(unsigned __int8 *)(v36 + v34 + 1);
          v57 = *(unsigned __int8 *)(v36 + v34);
        }
        else
        {
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = (unsigned __int8 *)(v36 + v34 + 2);
          v59 = (unsigned __int8 *)(v36 + v34 + 1);
          v60 = v32;
        }
        v61 = *v60;
        v62 = *v59;
        v63 = *v58;
        if ((v37 & 1) != 0)
        {
          v66 = v47 + v51 + v57 + v61;
          v67 = v46 + v52 + v56 + v62;
          v68 = v45 + v53 + v55 + v63;
          v64 = (67372037
               * (unint64_t)(1023 * ((-11093 * v67 + 14392 * v66 - 3297 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v65 = (67372037
               * (unint64_t)(1023 * ((-13072 * v67 - 1319 * v66 + 14392 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v64) = 0;
          LODWORD(v65) = 0;
        }
        *v44 = *v44 & ~(1023 << v54) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((2032 * v61
                                                                                         + 540672
                                                                                         + 20127 * v62
                                                                                         + 5983 * v63) >> 15)
                                                                         + 127)) >> 32) >> 4 << v54);
        if (v39 == 2)
          v39 = 0;
        else
          ++v39;
        if ((v37 & 1) != 0)
        {
          v69 = *((unsigned __int8 *)&v189 + v188);
          *v40 = *v40 & ~(1023 << v69) | ((_DWORD)v64 << v69);
          v70 = (int *)((char *)v40 + ((v69 >> 2) & 0x3C));
          if (v188 == 2)
            v71 = 0;
          else
            v71 = v188 + 1;
          v72 = *((unsigned __int8 *)&v189 + v71);
          v34 = v183;
          *v70 = *v70 & ~(1023 << v72) | ((_DWORD)v65 << v72);
          v40 = (int *)((char *)v70 + ((v72 >> 2) & 0x3C));
          if (v71 == 2)
            v73 = 0;
          else
            v73 = v71 + 1;
          v188 = v73;
        }
        v42 += 4;
        v41 = &v43[v54 >> 4];
        v32 += 4;
        ++v37;
        v36 += 4;
        v24 = &v44[v54 >> 4];
        v38 += 4;
      }
      while (v185 != v37);
      if (v185 >= v182)
      {
        v127 = (unsigned __int8 *)(v38 + v34);
        v187 = (unsigned __int8 *)(v36 + v34);
        v77 = v185;
        v128 = v40;
        v126 = v166;
      }
      else
      {
        v74 = 0;
        v164 = v54 >> 2;
        v165 = v44;
        v75 = (v54 >> 2) & 0x3C;
        v180 = (char *)v44 + v75;
        v76 = v34;
        v77 = v185;
        v181 = v40;
        do
        {
          v186 = &v180[v74];
          v78 = *(unsigned __int8 *)(v38 + v76 + 2);
          v79 = *(unsigned __int8 *)(v38 + v76 + 1);
          v80 = *(unsigned __int8 *)(v38 + v76);
          v81 = 5983 * v78 + 540672 + 20127 * v79 + 2032 * v80;
          v82 = *(unsigned __int8 *)(v38 + v76 + 6);
          v83 = *(unsigned __int8 *)(v38 + v76 + 5);
          v84 = *(unsigned __int8 *)(v38 + v76 + 4);
          v85 = *(unsigned __int8 *)(v36 + v76 + 2);
          v86 = *(unsigned __int8 *)(v36 + v76 + 1);
          v87 = *(unsigned __int8 *)(v36 + v76);
          v88 = *(unsigned __int8 *)(v36 + v76 + 6);
          v89 = *(unsigned __int8 *)(v36 + v76 + 5);
          v90 = *(unsigned __int8 *)(v36 + v76 + 4);
          v91 = (unsigned int *)((char *)v43 + v75 + v74);
          v92 = 269488145 * (1023 * ((5983 * v85 + 540672 + 20127 * v86 + 2032 * v87) >> 15) + 127);
          v93 = v84 + v80 + v87 + v90;
          v94 = v83 + v79 + v86 + v89;
          v95 = v82 + v78 + v85 + v88;
          v96 = 67372037 * (1023 * ((-11093 * v94 - 3297 * v95 + 14392 * v93 + 0x1000000) >> 17) + 127);
          v97 = -13072 * v94 + 14392 * v95 - 1319 * v93 + 0x1000000;
          v98 = (((269488145 * (unint64_t)(1023 * (v81 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((5983 * v82 + 540672 + 20127 * v83 + 2032 * v84) >> 15) + 127)) >> 32) >> 4 << 10);
          LODWORD(v92) = (v92 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((5983 * v88
                                                                                         + 540672
                                                                                         + 20127 * v89
                                                                                         + 2032 * v90) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          v99 = *(unsigned __int8 *)(v38 + v76 + 10);
          v100 = *(unsigned __int8 *)(v38 + v76 + 9);
          v101 = *(unsigned __int8 *)(v38 + v76 + 8);
          v102 = (v96 >> 34) | (((67372037 * (unint64_t)(1023 * (v97 >> 17) + 127)) >> 32) >> 2 << 10);
          *v91 = v98 | (((269488145
                                      * (unint64_t)(1023
                                                         * ((5983 * v99
                                                                         + 540672
                                                                         + 20127 * v100
                                                                         + 2032 * v101) >> 15)
                                                         + 127)) >> 32) >> 4 << 20);
          v103 = *(unsigned __int8 *)(v38 + v76 + 14);
          v104 = *(unsigned __int8 *)(v38 + v76 + 13);
          LODWORD(v96) = *(unsigned __int8 *)(v38 + v76 + 12);
          v105 = *(unsigned __int8 *)(v36 + v76 + 10);
          v106 = *(unsigned __int8 *)(v36 + v76 + 9);
          v107 = *(unsigned __int8 *)(v36 + v76 + 8);
          v108 = (269488145
                * (unint64_t)(1023 * ((5983 * v103 + 540672 + 20127 * v104 + 2032 * v96) >> 15)
                                   + 127)) >> 36;
          *(_DWORD *)v186 = v92 | (((269488145
                                                 * (unint64_t)(1023
                                                                    * ((5983 * v105
                                                                                    + 540672
                                                                                    + 20127 * v106
                                                                                    + 2032 * v107) >> 15)
                                                                    + 127)) >> 32) >> 4 << 20);
          LODWORD(v92) = *(unsigned __int8 *)(v36 + v76 + 13);
          v109 = *(unsigned __int8 *)(v36 + v76 + 14);
          v110 = *(unsigned __int8 *)(v36 + v76 + 12);
          v184 = v96 + v101 + v107 + v110;
          v111 = v104 + v100 + v106 + v92;
          LODWORD(v96) = v103 + v99 + v105 + v109;
          v112 = (unsigned int *)&v181[v74 / 4];
          *v112 = v102 | (((67372037
                                        * (unint64_t)(1023
                                                           * ((-11093 * v111
                                                                           - 3297 * v96
                                                                           + 14392 * v184
                                                                           + 0x1000000) >> 17)
                                                           + 127)) >> 32) >> 2 << 20);
          v113 = *(unsigned __int8 *)(v38 + v76 + 18);
          v114 = 1023 * ((5983 * v109 + 540672 + 20127 * v92 + 2032 * v110) >> 15);
          v115 = *(unsigned __int8 *)(v38 + v76 + 17);
          v116 = *(unsigned __int8 *)(v38 + v76 + 16);
          v117 = *(unsigned __int8 *)(v38 + v76 + 22);
          v118 = *(unsigned __int8 *)(v38 + v76 + 21);
          v119 = *(unsigned __int8 *)(v38 + v76 + 20);
          v91[1] = v108 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((5983 * v113
                                                                            + 540672
                                                                            + 20127 * v115
                                                                            + 2032 * v116) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v117 + 540672 + 20127 * v118 + 2032 * v119) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v91) = *(unsigned __int8 *)(v36 + v76 + 18);
          LODWORD(v108) = *(unsigned __int8 *)(v36 + v76 + 17);
          v120 = *(unsigned __int8 *)(v36 + v76 + 16);
          v121 = *(unsigned __int8 *)(v36 + v76 + 22);
          v122 = *(unsigned __int8 *)(v36 + v76 + 21);
          v123 = *(unsigned __int8 *)(v36 + v76 + 20);
          *((_DWORD *)v186 + 1) = (((269488145 * (unint64_t)(v114 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((5983 * (_DWORD)v91 + 540672 + 20127 * v108 + 2032 * v120) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v121 + 540672 + 20127 * v122 + 2032 * v123) >> 15) + 127)) >> 32) >> 4 << 20);
          v112[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13072 * v111
                                                                      + 14392 * v96
                                                                      - 1319 * v184
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13072 * (v118 + v115 + v108 + v122) + 14392 * (v117 + v113 + (_DWORD)v91 + v121) - 1319 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11093 * (v118 + v115 + v108 + v122) - 3297 * (v117 + v113 + (_DWORD)v91 + v121) + 14392 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v77 += 6;
          v74 += 8;
          v76 += 24;
        }
        while (v77 < v182);
        v124 = &v181[v74 / 4];
        v125 = v164 & 0x3C;
        v24 = (unsigned int *)((char *)v165 + v125 + v74);
        v126 = v166;
        v41 = (unsigned int *)((char *)v43 + v125 + v74);
        v127 = (unsigned __int8 *)(v38 + v76);
        v187 = (unsigned __int8 *)(v36 + v76);
        v34 = v183;
        v128 = v124;
      }
      if (v77 < v126)
      {
        v129 = 0;
        v130 = v163;
        v131 = v187;
        v132 = v127;
        do
        {
          if ((v77 & 1) != 0)
          {
            v138 = &v127[v129 - 4];
            v136 = v132 - 2;
            v137 = v132 - 3;
            v133 = v127[v129 + 2];
            v134 = v127[v129 + 1];
            v135 = v127[v129];
          }
          else
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            v136 = &v127[v129 + 2];
            v137 = &v127[v129 + 1];
            v138 = v132;
          }
          v139 = *v138;
          v140 = *v137;
          v141 = *v136;
          v142 = *((unsigned __int8 *)&v189 + v130);
          *v41 = (((269488145
                                * (unint64_t)(1023
                                                   * ((2032 * v139 + 540672 + 20127 * v140 + 5983 * v141) >> 15)
                                                   + 127)) >> 32) >> 4 << v142) | *v41 & ~(1023 << v142);
          if ((v77 & 1) != 0)
          {
            v148 = &v187[v129 - 4];
            v146 = v131 - 2;
            v147 = v131 - 3;
            v143 = v187[v129 + 2];
            v144 = v187[v129 + 1];
            v145 = v187[v129];
          }
          else
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            v146 = &v187[v129 + 2];
            v147 = &v187[v129 + 1];
            v148 = v131;
          }
          v149 = *v148;
          v150 = *v147;
          v151 = *v146;
          if ((v77 & 1) != 0)
          {
            v154 = v135 + v139 + v145 + v149;
            v155 = v134 + v140 + v144 + v150;
            v156 = v133 + v141 + v143 + v151;
            v152 = (67372037
                  * (unint64_t)(1023
                                     * ((-11093 * v155 + 14392 * v154 - 3297 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v153 = (67372037
                  * (unint64_t)(1023
                                     * ((-13072 * v155 - 1319 * v154 + 14392 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v152) = 0;
            LODWORD(v153) = 0;
          }
          *v24 = *v24 & ~(1023 << v142) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((2032 * v149
                                                                                            + 540672
                                                                                            + 20127 * v150
                                                                                            + 5983 * v151) >> 15)
                                                                            + 127)) >> 32) >> 4 << v142);
          if (v130 == 2)
            v130 = 0;
          else
            ++v130;
          if ((v77 & 1) != 0)
          {
            v157 = *((unsigned __int8 *)&v189 + v188);
            *v128 = *v128 & ~(1023 << v157) | ((_DWORD)v152 << v157);
            v158 = (int *)((char *)v128 + ((v157 >> 2) & 0x3C));
            if (v188 == 2)
              v159 = 0;
            else
              v159 = v188 + 1;
            v160 = *((unsigned __int8 *)&v189 + v159);
            v34 = v183;
            *v158 = *v158 & ~(1023 << v160) | ((_DWORD)v153 << v160);
            v128 = (int *)((char *)v158 + ((v160 >> 2) & 0x3C));
            if (v159 == 2)
              v161 = 0;
            else
              v161 = v159 + 1;
            v188 = v161;
          }
          v132 += 4;
          v41 += v142 >> 4;
          v131 += 4;
          ++v77;
          v129 += 4;
          v24 += v142 >> 4;
        }
        while (v126 != v77);
      }
      v33 = &v177[v168];
      v35 = &v174[v169];
      v32 = &v173[v169];
      v36 = v172 + v169;
      v27 = v175 + v169;
      v24 = &v176[v168];
      v30 = &v178[v167];
      ++v179;
    }
    while (v179 != v170);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  unsigned int *v41;
  unsigned __int8 *v42;
  unsigned int *v43;
  unsigned int *v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int *v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int *v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int *v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int *v124;
  uint64_t v125;
  unint64_t v126;
  unsigned __int8 *v127;
  int *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  int v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  int v156;
  unint64_t v157;
  int *v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int v161;
  unsigned int v163;
  unint64_t v164;
  unsigned int *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  int *v178;
  uint64_t v179;
  char *v180;
  int *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  char *v186;
  unsigned __int8 *v187;
  unsigned int v188;
  int v189;

  v189 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v15 = v13 - v12;
  else
    v15 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 < v14 - v11)
    v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v17 = v13 % 6;
  v18 = v15 >= v17;
  v19 = v15 - v17;
  if (!v18)
    v19 = 0;
  v182 = v19;
  if (v16 >= 2)
  {
    v179 = 0;
    v171 = v12 % 3;
    v163 = v19 % 3;
    v20 = 6 * (v12 / 6) - v12 + 6;
    v170 = v16 >> 1;
    v21 = a8[1];
    v22 = a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3);
    v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    v24 = (unsigned int *)(v23 + *a8);
    v25 = *a3;
    v26 = *a4;
    v27 = *a3 + *a4 * v9;
    v28 = 4 * v10;
    v29 = (unsigned __int8 *)(v27 + 4 * v10);
    v169 = 2 * v26;
    v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v30 = (int *)v22;
    v166 = v15;
    v167 = v21 >> 2;
    v31 = v26 + v26 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    v32 = &v29[v26];
    v33 = (unsigned int *)v23;
    v34 = v28;
    v35 = v29;
    v36 = v25 + v31;
    v183 = v28;
    v185 = v20;
    do
    {
      v37 = 0;
      v175 = v27;
      v176 = v24;
      v38 = v27;
      v172 = v36;
      v173 = v32;
      v39 = v171;
      v188 = v171;
      v177 = v33;
      v178 = v30;
      v40 = v30;
      v41 = v33;
      v174 = v35;
      v42 = v35;
      do
      {
        v43 = v41;
        v44 = v24;
        if ((v37 & 1) != 0)
        {
          v50 = (unsigned __int8 *)(v38 + v34 - 4);
          v48 = v42 - 2;
          v49 = v42 - 3;
          v45 = *(unsigned __int8 *)(v38 + v34 + 2);
          v46 = *(unsigned __int8 *)(v38 + v34 + 1);
          v47 = *(unsigned __int8 *)(v38 + v34);
        }
        else
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = (unsigned __int8 *)(v38 + v34 + 2);
          v49 = (unsigned __int8 *)(v38 + v34 + 1);
          v50 = v42;
        }
        v51 = *v50;
        v52 = *v49;
        v53 = *v48;
        v54 = *((unsigned __int8 *)&v189 + v39);
        *v43 = (((269488145
                              * (unint64_t)(1023
                                                 * ((3208 * v51 + 540672 + 16519 * v52 + 8414 * v53) >> 15)
                                                 + 127)) >> 32) >> 4 << v54) | *v43 & ~(1023 << v54);
        if ((v37 & 1) != 0)
        {
          v60 = (unsigned __int8 *)(v36 + v34 - 4);
          v58 = v32 - 2;
          v59 = v32 - 3;
          v55 = *(unsigned __int8 *)(v36 + v34 + 2);
          v56 = *(unsigned __int8 *)(v36 + v34 + 1);
          v57 = *(unsigned __int8 *)(v36 + v34);
        }
        else
        {
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = (unsigned __int8 *)(v36 + v34 + 2);
          v59 = (unsigned __int8 *)(v36 + v34 + 1);
          v60 = v32;
        }
        v61 = *v60;
        v62 = *v59;
        v63 = *v58;
        if ((v37 & 1) != 0)
        {
          v66 = v47 + v51 + v57 + v61;
          v67 = v46 + v52 + v56 + v62;
          v68 = v45 + v53 + v55 + v63;
          v64 = (67372037
               * (unint64_t)(1023 * ((-9534 * v67 + 14392 * v66 - 4856 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v65 = (67372037
               * (unint64_t)(1023 * ((-12051 * v67 - 2340 * v66 + 14392 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v64) = 0;
          LODWORD(v65) = 0;
        }
        *v44 = *v44 & ~(1023 << v54) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((3208 * v61
                                                                                         + 540672
                                                                                         + 16519 * v62
                                                                                         + 8414 * v63) >> 15)
                                                                         + 127)) >> 32) >> 4 << v54);
        if (v39 == 2)
          v39 = 0;
        else
          ++v39;
        if ((v37 & 1) != 0)
        {
          v69 = *((unsigned __int8 *)&v189 + v188);
          *v40 = *v40 & ~(1023 << v69) | ((_DWORD)v64 << v69);
          v70 = (int *)((char *)v40 + ((v69 >> 2) & 0x3C));
          if (v188 == 2)
            v71 = 0;
          else
            v71 = v188 + 1;
          v72 = *((unsigned __int8 *)&v189 + v71);
          v34 = v183;
          *v70 = *v70 & ~(1023 << v72) | ((_DWORD)v65 << v72);
          v40 = (int *)((char *)v70 + ((v72 >> 2) & 0x3C));
          if (v71 == 2)
            v73 = 0;
          else
            v73 = v71 + 1;
          v188 = v73;
        }
        v42 += 4;
        v41 = &v43[v54 >> 4];
        v32 += 4;
        ++v37;
        v36 += 4;
        v24 = &v44[v54 >> 4];
        v38 += 4;
      }
      while (v185 != v37);
      if (v185 >= v182)
      {
        v127 = (unsigned __int8 *)(v38 + v34);
        v187 = (unsigned __int8 *)(v36 + v34);
        v77 = v185;
        v128 = v40;
        v126 = v166;
      }
      else
      {
        v74 = 0;
        v164 = v54 >> 2;
        v165 = v44;
        v75 = (v54 >> 2) & 0x3C;
        v180 = (char *)v44 + v75;
        v76 = v34;
        v77 = v185;
        v181 = v40;
        do
        {
          v186 = &v180[v74];
          v78 = *(unsigned __int8 *)(v38 + v76 + 2);
          v79 = *(unsigned __int8 *)(v38 + v76 + 1);
          v80 = *(unsigned __int8 *)(v38 + v76);
          v81 = 8414 * v78 + 540672 + 16519 * v79 + 3208 * v80;
          v82 = *(unsigned __int8 *)(v38 + v76 + 6);
          v83 = *(unsigned __int8 *)(v38 + v76 + 5);
          v84 = *(unsigned __int8 *)(v38 + v76 + 4);
          v85 = *(unsigned __int8 *)(v36 + v76 + 2);
          v86 = *(unsigned __int8 *)(v36 + v76 + 1);
          v87 = *(unsigned __int8 *)(v36 + v76);
          v88 = *(unsigned __int8 *)(v36 + v76 + 6);
          v89 = *(unsigned __int8 *)(v36 + v76 + 5);
          v90 = *(unsigned __int8 *)(v36 + v76 + 4);
          v91 = (unsigned int *)((char *)v43 + v75 + v74);
          v92 = 269488145 * (1023 * ((8414 * v85 + 540672 + 16519 * v86 + 3208 * v87) >> 15) + 127);
          v93 = v84 + v80 + v87 + v90;
          v94 = v83 + v79 + v86 + v89;
          v95 = v82 + v78 + v85 + v88;
          v96 = 67372037 * (1023 * ((-9534 * v94 - 4856 * v95 + 14392 * v93 + 0x1000000) >> 17) + 127);
          v97 = -12051 * v94 + 14392 * v95 - 2340 * v93 + 0x1000000;
          v98 = (((269488145 * (unint64_t)(1023 * (v81 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((8414 * v82 + 540672 + 16519 * v83 + 3208 * v84) >> 15) + 127)) >> 32) >> 4 << 10);
          LODWORD(v92) = (v92 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((8414 * v88
                                                                                         + 540672
                                                                                         + 16519 * v89
                                                                                         + 3208 * v90) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          v99 = *(unsigned __int8 *)(v38 + v76 + 10);
          v100 = *(unsigned __int8 *)(v38 + v76 + 9);
          v101 = *(unsigned __int8 *)(v38 + v76 + 8);
          v102 = (v96 >> 34) | (((67372037 * (unint64_t)(1023 * (v97 >> 17) + 127)) >> 32) >> 2 << 10);
          *v91 = v98 | (((269488145
                                      * (unint64_t)(1023
                                                         * ((8414 * v99
                                                                         + 540672
                                                                         + 16519 * v100
                                                                         + 3208 * v101) >> 15)
                                                         + 127)) >> 32) >> 4 << 20);
          v103 = *(unsigned __int8 *)(v38 + v76 + 14);
          v104 = *(unsigned __int8 *)(v38 + v76 + 13);
          LODWORD(v96) = *(unsigned __int8 *)(v38 + v76 + 12);
          v105 = *(unsigned __int8 *)(v36 + v76 + 10);
          v106 = *(unsigned __int8 *)(v36 + v76 + 9);
          v107 = *(unsigned __int8 *)(v36 + v76 + 8);
          v108 = (269488145
                * (unint64_t)(1023 * ((8414 * v103 + 540672 + 16519 * v104 + 3208 * v96) >> 15)
                                   + 127)) >> 36;
          *(_DWORD *)v186 = v92 | (((269488145
                                                 * (unint64_t)(1023
                                                                    * ((8414 * v105
                                                                                    + 540672
                                                                                    + 16519 * v106
                                                                                    + 3208 * v107) >> 15)
                                                                    + 127)) >> 32) >> 4 << 20);
          LODWORD(v92) = *(unsigned __int8 *)(v36 + v76 + 13);
          v109 = *(unsigned __int8 *)(v36 + v76 + 14);
          v110 = *(unsigned __int8 *)(v36 + v76 + 12);
          v184 = v96 + v101 + v107 + v110;
          v111 = v104 + v100 + v106 + v92;
          LODWORD(v96) = v103 + v99 + v105 + v109;
          v112 = (unsigned int *)&v181[v74 / 4];
          *v112 = v102 | (((67372037
                                        * (unint64_t)(1023
                                                           * ((-9534 * v111
                                                                           - 4856 * v96
                                                                           + 14392 * v184
                                                                           + 0x1000000) >> 17)
                                                           + 127)) >> 32) >> 2 << 20);
          v113 = *(unsigned __int8 *)(v38 + v76 + 18);
          v114 = 1023 * ((8414 * v109 + 540672 + 16519 * v92 + 3208 * v110) >> 15);
          v115 = *(unsigned __int8 *)(v38 + v76 + 17);
          v116 = *(unsigned __int8 *)(v38 + v76 + 16);
          v117 = *(unsigned __int8 *)(v38 + v76 + 22);
          v118 = *(unsigned __int8 *)(v38 + v76 + 21);
          v119 = *(unsigned __int8 *)(v38 + v76 + 20);
          v91[1] = v108 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((8414 * v113
                                                                            + 540672
                                                                            + 16519 * v115
                                                                            + 3208 * v116) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v117 + 540672 + 16519 * v118 + 3208 * v119) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v91) = *(unsigned __int8 *)(v36 + v76 + 18);
          LODWORD(v108) = *(unsigned __int8 *)(v36 + v76 + 17);
          v120 = *(unsigned __int8 *)(v36 + v76 + 16);
          v121 = *(unsigned __int8 *)(v36 + v76 + 22);
          v122 = *(unsigned __int8 *)(v36 + v76 + 21);
          v123 = *(unsigned __int8 *)(v36 + v76 + 20);
          *((_DWORD *)v186 + 1) = (((269488145 * (unint64_t)(v114 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((8414 * (_DWORD)v91 + 540672 + 16519 * v108 + 3208 * v120) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v121 + 540672 + 16519 * v122 + 3208 * v123) >> 15) + 127)) >> 32) >> 4 << 20);
          v112[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-12051 * v111
                                                                      + 14392 * v96
                                                                      - 2340 * v184
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-12051 * (v118 + v115 + v108 + v122) + 14392 * (v117 + v113 + (_DWORD)v91 + v121) - 2340 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-9534 * (v118 + v115 + v108 + v122) - 4856 * (v117 + v113 + (_DWORD)v91 + v121) + 14392 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v77 += 6;
          v74 += 8;
          v76 += 24;
        }
        while (v77 < v182);
        v124 = &v181[v74 / 4];
        v125 = v164 & 0x3C;
        v24 = (unsigned int *)((char *)v165 + v125 + v74);
        v126 = v166;
        v41 = (unsigned int *)((char *)v43 + v125 + v74);
        v127 = (unsigned __int8 *)(v38 + v76);
        v187 = (unsigned __int8 *)(v36 + v76);
        v34 = v183;
        v128 = v124;
      }
      if (v77 < v126)
      {
        v129 = 0;
        v130 = v163;
        v131 = v187;
        v132 = v127;
        do
        {
          if ((v77 & 1) != 0)
          {
            v138 = &v127[v129 - 4];
            v136 = v132 - 2;
            v137 = v132 - 3;
            v133 = v127[v129 + 2];
            v134 = v127[v129 + 1];
            v135 = v127[v129];
          }
          else
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            v136 = &v127[v129 + 2];
            v137 = &v127[v129 + 1];
            v138 = v132;
          }
          v139 = *v138;
          v140 = *v137;
          v141 = *v136;
          v142 = *((unsigned __int8 *)&v189 + v130);
          *v41 = (((269488145
                                * (unint64_t)(1023
                                                   * ((3208 * v139 + 540672 + 16519 * v140 + 8414 * v141) >> 15)
                                                   + 127)) >> 32) >> 4 << v142) | *v41 & ~(1023 << v142);
          if ((v77 & 1) != 0)
          {
            v148 = &v187[v129 - 4];
            v146 = v131 - 2;
            v147 = v131 - 3;
            v143 = v187[v129 + 2];
            v144 = v187[v129 + 1];
            v145 = v187[v129];
          }
          else
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            v146 = &v187[v129 + 2];
            v147 = &v187[v129 + 1];
            v148 = v131;
          }
          v149 = *v148;
          v150 = *v147;
          v151 = *v146;
          if ((v77 & 1) != 0)
          {
            v154 = v135 + v139 + v145 + v149;
            v155 = v134 + v140 + v144 + v150;
            v156 = v133 + v141 + v143 + v151;
            v152 = (67372037
                  * (unint64_t)(1023
                                     * ((-9534 * v155 + 14392 * v154 - 4856 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v153 = (67372037
                  * (unint64_t)(1023
                                     * ((-12051 * v155 - 2340 * v154 + 14392 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v152) = 0;
            LODWORD(v153) = 0;
          }
          *v24 = *v24 & ~(1023 << v142) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((3208 * v149
                                                                                            + 540672
                                                                                            + 16519 * v150
                                                                                            + 8414 * v151) >> 15)
                                                                            + 127)) >> 32) >> 4 << v142);
          if (v130 == 2)
            v130 = 0;
          else
            ++v130;
          if ((v77 & 1) != 0)
          {
            v157 = *((unsigned __int8 *)&v189 + v188);
            *v128 = *v128 & ~(1023 << v157) | ((_DWORD)v152 << v157);
            v158 = (int *)((char *)v128 + ((v157 >> 2) & 0x3C));
            if (v188 == 2)
              v159 = 0;
            else
              v159 = v188 + 1;
            v160 = *((unsigned __int8 *)&v189 + v159);
            v34 = v183;
            *v158 = *v158 & ~(1023 << v160) | ((_DWORD)v153 << v160);
            v128 = (int *)((char *)v158 + ((v160 >> 2) & 0x3C));
            if (v159 == 2)
              v161 = 0;
            else
              v161 = v159 + 1;
            v188 = v161;
          }
          v132 += 4;
          v41 += v142 >> 4;
          v131 += 4;
          ++v77;
          v129 += 4;
          v24 += v142 >> 4;
        }
        while (v126 != v77);
      }
      v33 = &v177[v168];
      v35 = &v174[v169];
      v32 = &v173[v169];
      v36 = v172 + v169;
      v27 = v175 + v169;
      v24 = &v176[v168];
      v30 = &v178[v167];
      ++v179;
    }
    while (v179 != v170);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int *v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  int *v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v160;
  unsigned int *v161;
  unint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int *v174;
  int *v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int *v180;
  unint64_t v181;
  unsigned int *v182;
  unint64_t v183;
  char *v184;
  unsigned __int8 *v185;
  unsigned int v186;
  uint64_t v187;
  int v188;

  v188 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v181 = v16;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  if (v17 >= 2)
  {
    v22 = 0;
    v168 = v13 % 3;
    v160 = v21 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v167 = v17 >> 1;
    v24 = a8[1];
    v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = (unsigned int *)(*a7 + *a8 * v12 + 4 * (v13 / 3));
    v27 = *a3;
    v28 = *a4;
    v29 = (unsigned int *)((char *)v26 + *a8);
    v30 = *a3 + v28 * v9;
    v31 = v23;
    v187 = 4 * v10;
    v32 = (unsigned __int8 *)(v30 + 4 * v10);
    v33 = &v32[v28];
    v166 = 2 * v28;
    v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v164 = v24 >> 2;
    v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v183 = v31;
    v177 = v21;
    do
    {
      v175 = v25;
      v176 = v22;
      v35 = 0;
      v172 = v30;
      v173 = v29;
      v36 = v30;
      v169 = v34;
      v170 = v33;
      v37 = v168;
      v186 = v168;
      v174 = v26;
      v171 = v32;
      do
      {
        v38 = v26;
        v39 = v29;
        if ((v35 & 1) != 0)
        {
          v45 = (unsigned __int8 *)(v36 + v187 - 4);
          v43 = v32 - 2;
          v44 = v32 - 3;
          v40 = *(unsigned __int8 *)(v36 + v187 + 2);
          v41 = *(unsigned __int8 *)(v36 + v187 + 1);
          v42 = *(unsigned __int8 *)(v36 + v187);
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = (unsigned __int8 *)(v36 + v187 + 2);
          v44 = (unsigned __int8 *)(v36 + v187 + 1);
          v45 = v32;
        }
        v46 = *v45;
        v47 = *v44;
        v48 = *v43;
        v49 = *((unsigned __int8 *)&v188 + v37);
        *v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((22217 * v47 + 1943 * v46 + 8608 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if ((v35 & 1) != 0)
        {
          v55 = (unsigned __int8 *)(v34 + v187 - 4);
          v53 = v33 - 2;
          v54 = v33 - 3;
          v50 = *(unsigned __int8 *)(v34 + v187 + 2);
          v51 = *(unsigned __int8 *)(v34 + v187 + 1);
          v52 = *(unsigned __int8 *)(v34 + v187);
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = (unsigned __int8 *)(v34 + v187 + 2);
          v54 = (unsigned __int8 *)(v34 + v187 + 1);
          v55 = v33;
        }
        v56 = *v55;
        v57 = *v54;
        v58 = *v53;
        if ((v35 & 1) != 0)
        {
          v61 = v42 + v46 + v52 + v56;
          v62 = v41 + v47 + v51 + v57;
          v63 = v40 + v48 + v50 + v58;
          v59 = (67372037
               * (unint64_t)(1023 * ((-11808 * v62 + (v61 << 14) - 4574 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v60 = (67372037
               * (unint64_t)(1023 * ((-15065 * v62 - 1317 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((22217 * v57
                                                                                         + 1943 * v56
                                                                                         + 8608 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        if ((v35 & 1) != 0)
        {
          v64 = *((unsigned __int8 *)&v188 + v186);
          *v25 = *v25 & ~(1023 << v64) | ((_DWORD)v59 << v64);
          v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v186 == 2)
            v66 = 0;
          else
            v66 = v186 + 1;
          v67 = *((unsigned __int8 *)&v188 + v66);
          *v65 = *v65 & ~(1023 << v67) | ((_DWORD)v60 << v67);
          v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2)
            v68 = 0;
          else
            v68 = v66 + 1;
          v186 = v68;
          v31 = v183;
        }
        v32 += 4;
        v26 = &v38[v49 >> 4];
        v33 += 4;
        ++v35;
        v34 += 4;
        v29 = &v39[v49 >> 4];
        v36 += 4;
      }
      while (v31 != v35);
      if (v31 >= v21)
      {
        v185 = (unsigned __int8 *)(v36 + v187);
        v123 = (unsigned __int8 *)(v34 + v187);
        v72 = v31;
        v124 = v181;
      }
      else
      {
        v69 = 0;
        v161 = v39;
        v162 = v49 >> 2;
        v70 = (v49 >> 2) & 0x3C;
        v163 = v38;
        v178 = (char *)v38 + v70;
        v179 = (char *)v39 + v70;
        v71 = v187;
        v72 = v31;
        v180 = v25;
        do
        {
          v184 = &v179[v69];
          v73 = *(unsigned __int8 *)(v36 + v71 + 2);
          v74 = *(unsigned __int8 *)(v36 + v71 + 1);
          v75 = *(unsigned __int8 *)(v36 + v71);
          v76 = 22217 * v74 + 8608 * v73 + 1943 * v75 + 0x4000;
          v77 = *(unsigned __int8 *)(v36 + v71 + 6);
          v78 = *(unsigned __int8 *)(v36 + v71 + 5);
          v79 = *(unsigned __int8 *)(v36 + v71 + 4);
          v80 = 22217 * v78 + 8608 * v77 + 1943 * v79 + 0x4000;
          v81 = *(unsigned __int8 *)(v34 + v71 + 2);
          v82 = *(unsigned __int8 *)(v34 + v71 + 1);
          v83 = *(unsigned __int8 *)(v34 + v71);
          v84 = *(unsigned __int8 *)(v34 + v71 + 6);
          v85 = *(unsigned __int8 *)(v34 + v71 + 5);
          v86 = *(unsigned __int8 *)(v34 + v71 + 4);
          v182 = (unsigned int *)&v178[v69];
          v87 = 269488145 * (1023 * ((22217 * v82 + 8608 * v81 + 1943 * v83 + 0x4000) >> 15) + 127);
          v88 = 269488145 * (1023 * ((22217 * v85 + 8608 * v84 + 1943 * v86 + 0x4000) >> 15) + 127);
          v89 = v79 + v75 + v83 + v86;
          v90 = v77 + v73 + v81 + v84;
          v91 = *(unsigned __int8 *)(v36 + v71 + 10);
          v92 = *(unsigned __int8 *)(v36 + v71 + 9);
          v93 = *(unsigned __int8 *)(v36 + v71 + 8);
          *v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v92 + 8608 * v91 + 1943 * v93 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v94 = (((67372037
                               * (unint64_t)(1023
                                                  * ((-11808 * (v78 + v74 + v82 + v85)
                                                                  - 4574 * v90
                                                                  + (v89 << 14)
                                                                  + 0x1000000) >> 17)
                                                  + 127)) >> 32) >> 2) | (((67372037
                                                                                        * (unint64_t)(1023 * ((-15065 * (v78 + v74 + v82 + v85) + (v90 << 14) - 1317 * v89 + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v95 = *(unsigned __int8 *)(v36 + v71 + 14);
          LODWORD(v88) = *(unsigned __int8 *)(v36 + v71 + 13);
          v96 = *(unsigned __int8 *)(v36 + v71 + 12);
          v97 = *(unsigned __int8 *)(v34 + v71 + 10);
          v98 = *(unsigned __int8 *)(v34 + v71 + 9);
          v99 = *(unsigned __int8 *)(v34 + v71 + 8);
          v100 = (269488145
                * (unint64_t)(1023 * ((22217 * v88 + 8608 * v95 + 1943 * v96 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)v184 = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                     * (unint64_t)(1023 * ((22217 * v98 + 8608 * v97 + 1943 * v99 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v101 = *(unsigned __int8 *)(v34 + v71 + 14);
          v102 = *(unsigned __int8 *)(v34 + v71 + 13);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 12);
          v103 = v96 + v93;
          v104 = v99 + v87;
          v105 = 22217 * v102 + 8608 * v101;
          v106 = v103 + v104;
          v107 = v88 + v92 + v98 + v102;
          v108 = v95 + v91 + v97 + v101;
          v109 = v105 + 1943 * v87 + 0x4000;
          v110 = (unsigned int *)&v180[v69 / 4];
          *v110 = v94 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-11808 * v107
                                                                          - 4574 * v108
                                                                          + ((v103 + v104) << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v111 = *(unsigned __int8 *)(v36 + v71 + 18);
          v112 = *(unsigned __int8 *)(v36 + v71 + 17);
          v113 = *(unsigned __int8 *)(v36 + v71 + 16);
          v114 = *(unsigned __int8 *)(v36 + v71 + 22);
          v115 = *(unsigned __int8 *)(v36 + v71 + 21);
          v116 = *(unsigned __int8 *)(v36 + v71 + 20);
          v182[1] = v100 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((22217 * v112
                                                                             + 8608 * v111
                                                                             + 1943 * v113
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v115 + 8608 * v114 + 1943 * v116 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v100) = *(unsigned __int8 *)(v34 + v71 + 18);
          v117 = *(unsigned __int8 *)(v34 + v71 + 17);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 16);
          v118 = *(unsigned __int8 *)(v34 + v71 + 22);
          v119 = *(unsigned __int8 *)(v34 + v71 + 21);
          v120 = *(unsigned __int8 *)(v34 + v71 + 20);
          *((_DWORD *)v184 + 1) = (((269488145 * (unint64_t)(1023 * (v109 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((22217 * v117 + 8608 * v100 + 1943 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v119 + 8608 * v118 + 1943 * v120 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v121 = v117 + v119;
          v21 = v177;
          v110[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-15065 * v107
                                                                      + (v108 << 14)
                                                                      - 1317 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-15065 * (v115 + v112 + v121) + ((v114 + v111 + (_DWORD)v100 + v118) << 14) - 1317 * (v116 + v113 + v87 + v120) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11808 * (v115 + v112 + v121) - 4574 * (v114 + v111 + v100 + v118) + ((v116 + v113 + (_DWORD)v87 + v120) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v69 += 8;
          v71 += 24;
        }
        while (v72 < v177);
        v25 = &v180[v69 / 4];
        v122 = v162 & 0x3C;
        v29 = (unsigned int *)((char *)v161 + v122 + v69);
        v26 = (unsigned int *)((char *)v163 + v122 + v69);
        v185 = (unsigned __int8 *)(v36 + v71);
        v123 = (unsigned __int8 *)(v34 + v71);
        v124 = v181;
        v31 = v183;
      }
      if (v72 < v124)
      {
        v125 = 0;
        v126 = v160;
        v127 = v123;
        v128 = v185;
        do
        {
          if ((v72 & 1) != 0)
          {
            v134 = &v185[v125 - 4];
            v132 = v128 - 2;
            v133 = v128 - 3;
            v129 = v185[v125 + 2];
            v130 = v185[v125 + 1];
            v131 = v185[v125];
          }
          else
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v132 = &v185[v125 + 2];
            v133 = &v185[v125 + 1];
            v134 = v128;
          }
          v135 = *v134;
          v136 = *v133;
          v137 = *v132;
          v138 = *((unsigned __int8 *)&v188 + v126);
          *v26 = (((269488145
                                * (unint64_t)(1023
                                                   * ((22217 * v136 + 1943 * v135 + 8608 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v26 & ~(1023 << v138);
          if ((v72 & 1) != 0)
          {
            v144 = &v123[v125 - 4];
            v142 = v127 - 2;
            v143 = v127 - 3;
            v139 = v123[v125 + 2];
            v140 = v123[v125 + 1];
            v141 = v123[v125];
          }
          else
          {
            v139 = 0;
            v140 = 0;
            v141 = 0;
            v142 = &v123[v125 + 2];
            v143 = &v123[v125 + 1];
            v144 = v127;
          }
          v145 = *v144;
          v146 = *v143;
          v147 = *v142;
          if ((v72 & 1) != 0)
          {
            v150 = v131 + v135 + v141 + v145;
            v151 = v130 + v136 + v140 + v146;
            v152 = v129 + v137 + v139 + v147;
            v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-11808 * v151 + (v150 << 14) - 4574 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-15065 * v151 - 1317 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *v29 = *v29 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((22217 * v146
                                                                                            + 1943 * v145
                                                                                            + 8608 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2)
            v126 = 0;
          else
            ++v126;
          if ((v72 & 1) != 0)
          {
            v153 = *((unsigned __int8 *)&v188 + v186);
            *v25 = *v25 & ~(1023 << v153) | ((_DWORD)v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v186 == 2)
              v155 = 0;
            else
              v155 = v186 + 1;
            v156 = *((unsigned __int8 *)&v188 + v155);
            *v154 = *v154 & ~(1023 << v156) | ((_DWORD)v149 << v156);
            v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2)
              v157 = 0;
            else
              v157 = v155 + 1;
            v186 = v157;
          }
          v31 = v183;
          v128 += 4;
          v158 = v138 >> 4;
          v26 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v29 += v158;
        }
        while (v181 != v72);
      }
      v26 = &v174[v165];
      v32 = &v171[v166];
      v33 = &v170[v166];
      v22 = v176 + 1;
      v34 = v169 + v166;
      v30 = v172 + v166;
      v29 = &v173[v165];
      v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int *v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  int *v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v160;
  unsigned int *v161;
  unint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int *v174;
  int *v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int *v180;
  unint64_t v181;
  unsigned int *v182;
  unint64_t v183;
  char *v184;
  unsigned __int8 *v185;
  unsigned int v186;
  uint64_t v187;
  int v188;

  v188 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v181 = v16;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  if (v17 >= 2)
  {
    v22 = 0;
    v168 = v13 % 3;
    v160 = v21 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v167 = v17 >> 1;
    v24 = a8[1];
    v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = (unsigned int *)(*a7 + *a8 * v12 + 4 * (v13 / 3));
    v27 = *a3;
    v28 = *a4;
    v29 = (unsigned int *)((char *)v26 + *a8);
    v30 = *a3 + v28 * v9;
    v31 = v23;
    v187 = 4 * v10;
    v32 = (unsigned __int8 *)(v30 + 4 * v10);
    v33 = &v32[v28];
    v166 = 2 * v28;
    v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v164 = v24 >> 2;
    v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v183 = v31;
    v177 = v21;
    do
    {
      v175 = v25;
      v176 = v22;
      v35 = 0;
      v172 = v30;
      v173 = v29;
      v36 = v30;
      v169 = v34;
      v170 = v33;
      v37 = v168;
      v186 = v168;
      v174 = v26;
      v171 = v32;
      do
      {
        v38 = v26;
        v39 = v29;
        if ((v35 & 1) != 0)
        {
          v45 = (unsigned __int8 *)(v36 + v187 - 4);
          v43 = v32 - 2;
          v44 = v32 - 3;
          v40 = *(unsigned __int8 *)(v36 + v187 + 2);
          v41 = *(unsigned __int8 *)(v36 + v187 + 1);
          v42 = *(unsigned __int8 *)(v36 + v187);
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = (unsigned __int8 *)(v36 + v187 + 2);
          v44 = (unsigned __int8 *)(v36 + v187 + 1);
          v45 = v32;
        }
        v46 = *v45;
        v47 = *v44;
        v48 = *v43;
        v49 = *((unsigned __int8 *)&v188 + v37);
        *v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((23436 * v47 + 2366 * v46 + 6966 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if ((v35 & 1) != 0)
        {
          v55 = (unsigned __int8 *)(v34 + v187 - 4);
          v53 = v33 - 2;
          v54 = v33 - 3;
          v50 = *(unsigned __int8 *)(v34 + v187 + 2);
          v51 = *(unsigned __int8 *)(v34 + v187 + 1);
          v52 = *(unsigned __int8 *)(v34 + v187);
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = (unsigned __int8 *)(v34 + v187 + 2);
          v54 = (unsigned __int8 *)(v34 + v187 + 1);
          v55 = v33;
        }
        v56 = *v55;
        v57 = *v54;
        v58 = *v53;
        if ((v35 & 1) != 0)
        {
          v61 = v42 + v46 + v52 + v56;
          v62 = v41 + v47 + v51 + v57;
          v63 = v40 + v48 + v50 + v58;
          v59 = (67372037
               * (unint64_t)(1023 * ((-12629 * v62 + (v61 << 14) - 3753 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v60 = (67372037
               * (unint64_t)(1023 * ((-14881 * v62 - 1501 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((23436 * v57
                                                                                         + 2366 * v56
                                                                                         + 6966 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        if ((v35 & 1) != 0)
        {
          v64 = *((unsigned __int8 *)&v188 + v186);
          *v25 = *v25 & ~(1023 << v64) | ((_DWORD)v59 << v64);
          v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v186 == 2)
            v66 = 0;
          else
            v66 = v186 + 1;
          v67 = *((unsigned __int8 *)&v188 + v66);
          *v65 = *v65 & ~(1023 << v67) | ((_DWORD)v60 << v67);
          v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2)
            v68 = 0;
          else
            v68 = v66 + 1;
          v186 = v68;
          v31 = v183;
        }
        v32 += 4;
        v26 = &v38[v49 >> 4];
        v33 += 4;
        ++v35;
        v34 += 4;
        v29 = &v39[v49 >> 4];
        v36 += 4;
      }
      while (v31 != v35);
      if (v31 >= v21)
      {
        v185 = (unsigned __int8 *)(v36 + v187);
        v123 = (unsigned __int8 *)(v34 + v187);
        v72 = v31;
        v124 = v181;
      }
      else
      {
        v69 = 0;
        v161 = v39;
        v162 = v49 >> 2;
        v70 = (v49 >> 2) & 0x3C;
        v163 = v38;
        v178 = (char *)v38 + v70;
        v179 = (char *)v39 + v70;
        v71 = v187;
        v72 = v31;
        v180 = v25;
        do
        {
          v184 = &v179[v69];
          v73 = *(unsigned __int8 *)(v36 + v71 + 2);
          v74 = *(unsigned __int8 *)(v36 + v71 + 1);
          v75 = *(unsigned __int8 *)(v36 + v71);
          v76 = 23436 * v74 + 6966 * v73 + 2366 * v75 + 0x4000;
          v77 = *(unsigned __int8 *)(v36 + v71 + 6);
          v78 = *(unsigned __int8 *)(v36 + v71 + 5);
          v79 = *(unsigned __int8 *)(v36 + v71 + 4);
          v80 = 23436 * v78 + 6966 * v77 + 2366 * v79 + 0x4000;
          v81 = *(unsigned __int8 *)(v34 + v71 + 2);
          v82 = *(unsigned __int8 *)(v34 + v71 + 1);
          v83 = *(unsigned __int8 *)(v34 + v71);
          v84 = *(unsigned __int8 *)(v34 + v71 + 6);
          v85 = *(unsigned __int8 *)(v34 + v71 + 5);
          v86 = *(unsigned __int8 *)(v34 + v71 + 4);
          v182 = (unsigned int *)&v178[v69];
          v87 = 269488145 * (1023 * ((23436 * v82 + 6966 * v81 + 2366 * v83 + 0x4000) >> 15) + 127);
          v88 = 269488145 * (1023 * ((23436 * v85 + 6966 * v84 + 2366 * v86 + 0x4000) >> 15) + 127);
          v89 = v79 + v75 + v83 + v86;
          v90 = v77 + v73 + v81 + v84;
          v91 = *(unsigned __int8 *)(v36 + v71 + 10);
          v92 = *(unsigned __int8 *)(v36 + v71 + 9);
          v93 = *(unsigned __int8 *)(v36 + v71 + 8);
          *v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v92 + 6966 * v91 + 2366 * v93 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v94 = (((67372037
                               * (unint64_t)(1023
                                                  * ((-12629 * (v78 + v74 + v82 + v85)
                                                                  - 3753 * v90
                                                                  + (v89 << 14)
                                                                  + 0x1000000) >> 17)
                                                  + 127)) >> 32) >> 2) | (((67372037
                                                                                        * (unint64_t)(1023 * ((-14881 * (v78 + v74 + v82 + v85) + (v90 << 14) - 1501 * v89 + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v95 = *(unsigned __int8 *)(v36 + v71 + 14);
          LODWORD(v88) = *(unsigned __int8 *)(v36 + v71 + 13);
          v96 = *(unsigned __int8 *)(v36 + v71 + 12);
          v97 = *(unsigned __int8 *)(v34 + v71 + 10);
          v98 = *(unsigned __int8 *)(v34 + v71 + 9);
          v99 = *(unsigned __int8 *)(v34 + v71 + 8);
          v100 = (269488145
                * (unint64_t)(1023 * ((23436 * v88 + 6966 * v95 + 2366 * v96 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)v184 = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                     * (unint64_t)(1023 * ((23436 * v98 + 6966 * v97 + 2366 * v99 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v101 = *(unsigned __int8 *)(v34 + v71 + 14);
          v102 = *(unsigned __int8 *)(v34 + v71 + 13);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 12);
          v103 = v96 + v93;
          v104 = v99 + v87;
          v105 = 23436 * v102 + 6966 * v101;
          v106 = v103 + v104;
          v107 = v88 + v92 + v98 + v102;
          v108 = v95 + v91 + v97 + v101;
          v109 = v105 + 2366 * v87 + 0x4000;
          v110 = (unsigned int *)&v180[v69 / 4];
          *v110 = v94 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-12629 * v107
                                                                          - 3753 * v108
                                                                          + ((v103 + v104) << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v111 = *(unsigned __int8 *)(v36 + v71 + 18);
          v112 = *(unsigned __int8 *)(v36 + v71 + 17);
          v113 = *(unsigned __int8 *)(v36 + v71 + 16);
          v114 = *(unsigned __int8 *)(v36 + v71 + 22);
          v115 = *(unsigned __int8 *)(v36 + v71 + 21);
          v116 = *(unsigned __int8 *)(v36 + v71 + 20);
          v182[1] = v100 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((23436 * v112
                                                                             + 6966 * v111
                                                                             + 2366 * v113
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v115 + 6966 * v114 + 2366 * v116 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v100) = *(unsigned __int8 *)(v34 + v71 + 18);
          v117 = *(unsigned __int8 *)(v34 + v71 + 17);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 16);
          v118 = *(unsigned __int8 *)(v34 + v71 + 22);
          v119 = *(unsigned __int8 *)(v34 + v71 + 21);
          v120 = *(unsigned __int8 *)(v34 + v71 + 20);
          *((_DWORD *)v184 + 1) = (((269488145 * (unint64_t)(1023 * (v109 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((23436 * v117 + 6966 * v100 + 2366 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v119 + 6966 * v118 + 2366 * v120 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v121 = v117 + v119;
          v21 = v177;
          v110[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-14881 * v107
                                                                      + (v108 << 14)
                                                                      - 1501 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-14881 * (v115 + v112 + v121) + ((v114 + v111 + (_DWORD)v100 + v118) << 14) - 1501 * (v116 + v113 + v87 + v120) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-12629 * (v115 + v112 + v121) - 3753 * (v114 + v111 + v100 + v118) + ((v116 + v113 + (_DWORD)v87 + v120) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v69 += 8;
          v71 += 24;
        }
        while (v72 < v177);
        v25 = &v180[v69 / 4];
        v122 = v162 & 0x3C;
        v29 = (unsigned int *)((char *)v161 + v122 + v69);
        v26 = (unsigned int *)((char *)v163 + v122 + v69);
        v185 = (unsigned __int8 *)(v36 + v71);
        v123 = (unsigned __int8 *)(v34 + v71);
        v124 = v181;
        v31 = v183;
      }
      if (v72 < v124)
      {
        v125 = 0;
        v126 = v160;
        v127 = v123;
        v128 = v185;
        do
        {
          if ((v72 & 1) != 0)
          {
            v134 = &v185[v125 - 4];
            v132 = v128 - 2;
            v133 = v128 - 3;
            v129 = v185[v125 + 2];
            v130 = v185[v125 + 1];
            v131 = v185[v125];
          }
          else
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v132 = &v185[v125 + 2];
            v133 = &v185[v125 + 1];
            v134 = v128;
          }
          v135 = *v134;
          v136 = *v133;
          v137 = *v132;
          v138 = *((unsigned __int8 *)&v188 + v126);
          *v26 = (((269488145
                                * (unint64_t)(1023
                                                   * ((23436 * v136 + 2366 * v135 + 6966 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v26 & ~(1023 << v138);
          if ((v72 & 1) != 0)
          {
            v144 = &v123[v125 - 4];
            v142 = v127 - 2;
            v143 = v127 - 3;
            v139 = v123[v125 + 2];
            v140 = v123[v125 + 1];
            v141 = v123[v125];
          }
          else
          {
            v139 = 0;
            v140 = 0;
            v141 = 0;
            v142 = &v123[v125 + 2];
            v143 = &v123[v125 + 1];
            v144 = v127;
          }
          v145 = *v144;
          v146 = *v143;
          v147 = *v142;
          if ((v72 & 1) != 0)
          {
            v150 = v131 + v135 + v141 + v145;
            v151 = v130 + v136 + v140 + v146;
            v152 = v129 + v137 + v139 + v147;
            v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-12629 * v151 + (v150 << 14) - 3753 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-14881 * v151 - 1501 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *v29 = *v29 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((23436 * v146
                                                                                            + 2366 * v145
                                                                                            + 6966 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2)
            v126 = 0;
          else
            ++v126;
          if ((v72 & 1) != 0)
          {
            v153 = *((unsigned __int8 *)&v188 + v186);
            *v25 = *v25 & ~(1023 << v153) | ((_DWORD)v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v186 == 2)
              v155 = 0;
            else
              v155 = v186 + 1;
            v156 = *((unsigned __int8 *)&v188 + v155);
            *v154 = *v154 & ~(1023 << v156) | ((_DWORD)v149 << v156);
            v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2)
              v157 = 0;
            else
              v157 = v155 + 1;
            v186 = v157;
          }
          v31 = v183;
          v128 += 4;
          v158 = v138 >> 4;
          v26 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v29 += v158;
        }
        while (v181 != v72);
      }
      v26 = &v174[v165];
      v32 = &v171[v166];
      v33 = &v170[v166];
      v22 = v176 + 1;
      v34 = v169 + v166;
      v30 = v172 + v166;
      v29 = &v173[v165];
      v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int *v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  int *v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v160;
  unsigned int *v161;
  unint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int *v174;
  int *v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int *v180;
  unint64_t v181;
  unsigned int *v182;
  unint64_t v183;
  char *v184;
  unsigned __int8 *v185;
  unsigned int v186;
  uint64_t v187;
  int v188;

  v188 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v181 = v16;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  if (v17 >= 2)
  {
    v22 = 0;
    v168 = v13 % 3;
    v160 = v21 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v167 = v17 >> 1;
    v24 = a8[1];
    v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = (unsigned int *)(*a7 + *a8 * v12 + 4 * (v13 / 3));
    v27 = *a3;
    v28 = *a4;
    v29 = (unsigned int *)((char *)v26 + *a8);
    v30 = *a3 + v28 * v9;
    v31 = v23;
    v187 = 4 * v10;
    v32 = (unsigned __int8 *)(v30 + 4 * v10);
    v33 = &v32[v28];
    v166 = 2 * v28;
    v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v164 = v24 >> 2;
    v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v183 = v31;
    v177 = v21;
    do
    {
      v175 = v25;
      v176 = v22;
      v35 = 0;
      v172 = v30;
      v173 = v29;
      v36 = v30;
      v169 = v34;
      v170 = v33;
      v37 = v168;
      v186 = v168;
      v174 = v26;
      v171 = v32;
      do
      {
        v38 = v26;
        v39 = v29;
        if ((v35 & 1) != 0)
        {
          v45 = (unsigned __int8 *)(v36 + v187 - 4);
          v43 = v32 - 2;
          v44 = v32 - 3;
          v40 = *(unsigned __int8 *)(v36 + v187 + 2);
          v41 = *(unsigned __int8 *)(v36 + v187 + 1);
          v42 = *(unsigned __int8 *)(v36 + v187);
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = (unsigned __int8 *)(v36 + v187 + 2);
          v44 = (unsigned __int8 *)(v36 + v187 + 1);
          v45 = v32;
        }
        v46 = *v45;
        v47 = *v44;
        v48 = *v43;
        v49 = *((unsigned __int8 *)&v188 + v37);
        *v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((19235 * v47 + 3736 * v46 + 9798 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if ((v35 & 1) != 0)
        {
          v55 = (unsigned __int8 *)(v34 + v187 - 4);
          v53 = v33 - 2;
          v54 = v33 - 3;
          v50 = *(unsigned __int8 *)(v34 + v187 + 2);
          v51 = *(unsigned __int8 *)(v34 + v187 + 1);
          v52 = *(unsigned __int8 *)(v34 + v187);
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = (unsigned __int8 *)(v34 + v187 + 2);
          v54 = (unsigned __int8 *)(v34 + v187 + 1);
          v55 = v33;
        }
        v56 = *v55;
        v57 = *v54;
        v58 = *v53;
        if ((v35 & 1) != 0)
        {
          v61 = v42 + v46 + v52 + v56;
          v62 = v41 + v47 + v51 + v57;
          v63 = v40 + v48 + v50 + v58;
          v59 = (67372037
               * (unint64_t)(1023 * ((-10854 * v62 + (v61 << 14) - 5528 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          v60 = (67372037
               * (unint64_t)(1023 * ((-13719 * v62 - 2663 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((19235 * v57
                                                                                         + 3736 * v56
                                                                                         + 9798 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        if ((v35 & 1) != 0)
        {
          v64 = *((unsigned __int8 *)&v188 + v186);
          *v25 = *v25 & ~(1023 << v64) | ((_DWORD)v59 << v64);
          v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v186 == 2)
            v66 = 0;
          else
            v66 = v186 + 1;
          v67 = *((unsigned __int8 *)&v188 + v66);
          *v65 = *v65 & ~(1023 << v67) | ((_DWORD)v60 << v67);
          v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2)
            v68 = 0;
          else
            v68 = v66 + 1;
          v186 = v68;
          v31 = v183;
        }
        v32 += 4;
        v26 = &v38[v49 >> 4];
        v33 += 4;
        ++v35;
        v34 += 4;
        v29 = &v39[v49 >> 4];
        v36 += 4;
      }
      while (v31 != v35);
      if (v31 >= v21)
      {
        v185 = (unsigned __int8 *)(v36 + v187);
        v123 = (unsigned __int8 *)(v34 + v187);
        v72 = v31;
        v124 = v181;
      }
      else
      {
        v69 = 0;
        v161 = v39;
        v162 = v49 >> 2;
        v70 = (v49 >> 2) & 0x3C;
        v163 = v38;
        v178 = (char *)v38 + v70;
        v179 = (char *)v39 + v70;
        v71 = v187;
        v72 = v31;
        v180 = v25;
        do
        {
          v184 = &v179[v69];
          v73 = *(unsigned __int8 *)(v36 + v71 + 2);
          v74 = *(unsigned __int8 *)(v36 + v71 + 1);
          v75 = *(unsigned __int8 *)(v36 + v71);
          v76 = 19235 * v74 + 9798 * v73 + 3736 * v75 + 0x4000;
          v77 = *(unsigned __int8 *)(v36 + v71 + 6);
          v78 = *(unsigned __int8 *)(v36 + v71 + 5);
          v79 = *(unsigned __int8 *)(v36 + v71 + 4);
          v80 = 19235 * v78 + 9798 * v77 + 3736 * v79 + 0x4000;
          v81 = *(unsigned __int8 *)(v34 + v71 + 2);
          v82 = *(unsigned __int8 *)(v34 + v71 + 1);
          v83 = *(unsigned __int8 *)(v34 + v71);
          v84 = *(unsigned __int8 *)(v34 + v71 + 6);
          v85 = *(unsigned __int8 *)(v34 + v71 + 5);
          v86 = *(unsigned __int8 *)(v34 + v71 + 4);
          v182 = (unsigned int *)&v178[v69];
          v87 = 269488145 * (1023 * ((19235 * v82 + 9798 * v81 + 3736 * v83 + 0x4000) >> 15) + 127);
          v88 = 269488145 * (1023 * ((19235 * v85 + 9798 * v84 + 3736 * v86 + 0x4000) >> 15) + 127);
          v89 = v79 + v75 + v83 + v86;
          v90 = v77 + v73 + v81 + v84;
          v91 = *(unsigned __int8 *)(v36 + v71 + 10);
          v92 = *(unsigned __int8 *)(v36 + v71 + 9);
          v93 = *(unsigned __int8 *)(v36 + v71 + 8);
          *v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v92 + 9798 * v91 + 3736 * v93 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v94 = (((67372037
                               * (unint64_t)(1023
                                                  * ((-10854 * (v78 + v74 + v82 + v85)
                                                                  - 5528 * v90
                                                                  + (v89 << 14)
                                                                  + 0x1000000) >> 17)
                                                  + 127)) >> 32) >> 2) | (((67372037
                                                                                        * (unint64_t)(1023 * ((-13719 * (v78 + v74 + v82 + v85) + (v90 << 14) - 2663 * v89 + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v95 = *(unsigned __int8 *)(v36 + v71 + 14);
          LODWORD(v88) = *(unsigned __int8 *)(v36 + v71 + 13);
          v96 = *(unsigned __int8 *)(v36 + v71 + 12);
          v97 = *(unsigned __int8 *)(v34 + v71 + 10);
          v98 = *(unsigned __int8 *)(v34 + v71 + 9);
          v99 = *(unsigned __int8 *)(v34 + v71 + 8);
          v100 = (269488145
                * (unint64_t)(1023 * ((19235 * v88 + 9798 * v95 + 3736 * v96 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)v184 = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                     * (unint64_t)(1023 * ((19235 * v98 + 9798 * v97 + 3736 * v99 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v101 = *(unsigned __int8 *)(v34 + v71 + 14);
          v102 = *(unsigned __int8 *)(v34 + v71 + 13);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 12);
          v103 = v96 + v93;
          v104 = v99 + v87;
          v105 = 19235 * v102 + 9798 * v101;
          v106 = v103 + v104;
          v107 = v88 + v92 + v98 + v102;
          v108 = v95 + v91 + v97 + v101;
          v109 = v105 + 3736 * v87 + 0x4000;
          v110 = (unsigned int *)&v180[v69 / 4];
          *v110 = v94 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-10854 * v107
                                                                          - 5528 * v108
                                                                          + ((v103 + v104) << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          v111 = *(unsigned __int8 *)(v36 + v71 + 18);
          v112 = *(unsigned __int8 *)(v36 + v71 + 17);
          v113 = *(unsigned __int8 *)(v36 + v71 + 16);
          v114 = *(unsigned __int8 *)(v36 + v71 + 22);
          v115 = *(unsigned __int8 *)(v36 + v71 + 21);
          v116 = *(unsigned __int8 *)(v36 + v71 + 20);
          v182[1] = v100 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((19235 * v112
                                                                             + 9798 * v111
                                                                             + 3736 * v113
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v115 + 9798 * v114 + 3736 * v116 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v100) = *(unsigned __int8 *)(v34 + v71 + 18);
          v117 = *(unsigned __int8 *)(v34 + v71 + 17);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 16);
          v118 = *(unsigned __int8 *)(v34 + v71 + 22);
          v119 = *(unsigned __int8 *)(v34 + v71 + 21);
          v120 = *(unsigned __int8 *)(v34 + v71 + 20);
          *((_DWORD *)v184 + 1) = (((269488145 * (unint64_t)(1023 * (v109 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((19235 * v117 + 9798 * v100 + 3736 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v119 + 9798 * v118 + 3736 * v120 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          v121 = v117 + v119;
          v21 = v177;
          v110[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13719 * v107
                                                                      + (v108 << 14)
                                                                      - 2663 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13719 * (v115 + v112 + v121) + ((v114 + v111 + (_DWORD)v100 + v118) << 14) - 2663 * (v116 + v113 + v87 + v120) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10854 * (v115 + v112 + v121) - 5528 * (v114 + v111 + v100 + v118) + ((v116 + v113 + (_DWORD)v87 + v120) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v69 += 8;
          v71 += 24;
        }
        while (v72 < v177);
        v25 = &v180[v69 / 4];
        v122 = v162 & 0x3C;
        v29 = (unsigned int *)((char *)v161 + v122 + v69);
        v26 = (unsigned int *)((char *)v163 + v122 + v69);
        v185 = (unsigned __int8 *)(v36 + v71);
        v123 = (unsigned __int8 *)(v34 + v71);
        v124 = v181;
        v31 = v183;
      }
      if (v72 < v124)
      {
        v125 = 0;
        v126 = v160;
        v127 = v123;
        v128 = v185;
        do
        {
          if ((v72 & 1) != 0)
          {
            v134 = &v185[v125 - 4];
            v132 = v128 - 2;
            v133 = v128 - 3;
            v129 = v185[v125 + 2];
            v130 = v185[v125 + 1];
            v131 = v185[v125];
          }
          else
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v132 = &v185[v125 + 2];
            v133 = &v185[v125 + 1];
            v134 = v128;
          }
          v135 = *v134;
          v136 = *v133;
          v137 = *v132;
          v138 = *((unsigned __int8 *)&v188 + v126);
          *v26 = (((269488145
                                * (unint64_t)(1023
                                                   * ((19235 * v136 + 3736 * v135 + 9798 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v26 & ~(1023 << v138);
          if ((v72 & 1) != 0)
          {
            v144 = &v123[v125 - 4];
            v142 = v127 - 2;
            v143 = v127 - 3;
            v139 = v123[v125 + 2];
            v140 = v123[v125 + 1];
            v141 = v123[v125];
          }
          else
          {
            v139 = 0;
            v140 = 0;
            v141 = 0;
            v142 = &v123[v125 + 2];
            v143 = &v123[v125 + 1];
            v144 = v127;
          }
          v145 = *v144;
          v146 = *v143;
          v147 = *v142;
          if ((v72 & 1) != 0)
          {
            v150 = v131 + v135 + v141 + v145;
            v151 = v130 + v136 + v140 + v146;
            v152 = v129 + v137 + v139 + v147;
            v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-10854 * v151 + (v150 << 14) - 5528 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-13719 * v151 - 2663 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *v29 = *v29 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((19235 * v146
                                                                                            + 3736 * v145
                                                                                            + 9798 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2)
            v126 = 0;
          else
            ++v126;
          if ((v72 & 1) != 0)
          {
            v153 = *((unsigned __int8 *)&v188 + v186);
            *v25 = *v25 & ~(1023 << v153) | ((_DWORD)v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v186 == 2)
              v155 = 0;
            else
              v155 = v186 + 1;
            v156 = *((unsigned __int8 *)&v188 + v155);
            *v154 = *v154 & ~(1023 << v156) | ((_DWORD)v149 << v156);
            v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2)
              v157 = 0;
            else
              v157 = v155 + 1;
            v186 = v157;
          }
          v31 = v183;
          v128 += 4;
          v158 = v138 >> 4;
          v26 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v29 += v158;
        }
        while (v181 != v72);
      }
      v26 = &v174[v165];
      v32 = &v171[v166];
      v33 = &v170[v166];
      v22 = v176 + 1;
      v34 = v169 + v166;
      v30 = v172 + v166;
      v29 = &v173[v165];
      v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_L565_32BGRA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a6;
    v10 = *a4;
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
        {
          v12 = *(unsigned __int16 *)(v10 + 2 * i);
          *(_DWORD *)(v9 + 4 * i) = (((v12 >> 8) & 0xF8 | (v12 >> 13)) << 16) | (((v12 >> 3) & 0xFC | (((v12 >> 3) & 0xFC) >> 6)) << 8) | ((8 * v12) >> 5) & 7 | (8 * (v12 & 0x1F)) | 0xFF000000;
        }
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_L565_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_32BGRA;
  *a11 = vt_VImage_Cleanup_L565_32BGRA;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_L565_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_32ARGB;
  *a11 = vt_VImage_Cleanup_L565_32ARGB;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_L565_5551(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a6;
    v10 = *a4;
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          *(_WORD *)(v9 + 2 * i) = *(_WORD *)(v10 + 2 * i) & 0xFFC0 | (2 * (*(_WORD *)(v10 + 2 * i) & 0x1F)) | 1;
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_L565_5551(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_5551;
  *a11 = vt_VImage_Cleanup_L565_5551;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_L565_1555(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_1555;
  *a11 = vt_VImage_Cleanup_L565_1555;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_R10k_32BGRA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a6;
    v10 = *a4;
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
        {
          v12 = bswap32(*(_DWORD *)(v10 + 4 * i));
          v13 = (((v12 >> 2) & 0x3FE) + 2) >> 2;
          v14 = (((v12 >> 12) & 0x3FE) + 2) >> 2;
          v15 = ((v12 >> 22) + 2) >> 2;
          if (v13 >= 0xFF)
            v13 = 255;
          if (v14 >= 0xFF)
            v14 = 255;
          if (v15 >= 0xFF)
            v15 = 255;
          *(_DWORD *)(v9 + 4 * i) = v13 | (v14 << 8) | (v15 << 16) | 0xFF000000;
        }
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_R10k_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_R10k_32BGRA;
  *a11 = vt_VImage_Cleanup_R10k_32BGRA;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_R10k_32ARGB(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  uint64_t i;
  unsigned int v13;
  unsigned int v14;
  uint32x2_t v15;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a6;
    v10 = *a4;
    v11 = (int8x8_t)vdup_n_s32(0x3FEu);
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
        {
          v13 = bswap32(*(_DWORD *)(v10 + 4 * i));
          v14 = ((v13 >> 22) + 2) >> 2;
          if (v14 >= 0xFF)
            v14 = 255;
          v15 = vshl_u32(vmin_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v13), (uint32x2_t)0xFFFFFFFEFFFFFFF4), v11), (int32x2_t)0x200000002), 2uLL), (uint32x2_t)0xFF000000FFLL), (uint32x2_t)0x1800000010);
          *(_DWORD *)(v9 + 4 * i) = v15.i32[0] | (v14 << 8) | v15.i32[1] | 0xFF;
        }
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_R10k_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_R10k_32ARGB;
  *a11 = vt_VImage_Cleanup_R10k_32ARGB;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_R10k_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_R10k_RGhA;
  *a11 = vt_VImage_Cleanup_R10k_RGhA;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_y408_y416(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_y408_y416;
  *a11 = vt_VImage_Cleanup_y408_y416;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_y408_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _WORD *v26;
  __int16 v27;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i != v8; ++i)
        {
          v26 = (_WORD *)(v20 + v24);
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v23 + v24) | (*(unsigned __int8 *)(v23 + v24) << 8);
          v27 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v26 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          v26[1] = v27;
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  _WORD *v23;
  __int16 v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i != v8; ++i)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *v23 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          v23[1] = v24;
          *(_WORD *)(v19 + 2 * i) = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _WORD *v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 4 * v15;
    v17 = *a7 + *a8 * v14 + 2 * v15;
    v18 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i != v8; ++i)
        {
          v21 = v18 + v19;
          v22 = *(unsigned __int8 *)(v18 + v19 + 2);
          if (v22 >= 0xF0)
            v22 = 240;
          if (v22 <= 0x10)
            v22 = 16;
          v23 = *(unsigned __int8 *)(v21 + 3);
          if (v23 >= 0xF0)
            v23 = 240;
          v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x10)
            v23 = 16;
          *v24 = (613566757 * (unint64_t)((-1048560 - v22 + (v22 << 16)) >> 5)) >> 32;
          v24[1] = (613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32;
          v25 = *(unsigned __int8 *)(v21 + 1);
          if (v25 >= 0xEB)
            v25 = 235;
          if (v25 <= 0x10)
            v25 = 16;
          *(_WORD *)(v17 + 2 * i) = (-1048560 - v25 + (v25 << 16)) / 0xDB;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + 2 * v9;
    v21 = v18 + 2 * v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)v22;
        v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            v26 = *v24;
            v27 = v24[4];
            *v25 = (v24[3] + (unsigned __int16)*(v24 - 1)) << 7;
            v25[1] = (v27 + v26) << 7;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  __int16 v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + 2 * v9;
    v21 = v18 + 2 * v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)v22;
        v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            v26 = *v24 << 8;
            *v25 = *(v24 - 1) << 8;
            v25[1] = v26;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  __int16 v22;
  __int16 v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *v20;
            v23 = v20[4];
            *v21 = (v20[3] + (unsigned __int16)*(v20 - 1)) << 7;
            v21[1] = (v23 + v22) << 7;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  __int16 v22;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *v20 << 8;
            *v21 = *(v20 - 1) << 8;
            v21[1] = v22;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a4;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a7 + *a8 * v15 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + v12 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            v23 = v20[3];
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              v22 = 16;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              v23 = 16;
            v24 = *v20;
            v25 = v20[4];
            if (v24 >= 0xF0)
              v24 = 240;
            if (v24 <= 0x10)
              v24 = 16;
            if (v25 >= 0xF0)
              v25 = 240;
            if (v25 <= 0x10)
              v25 = 16;
            *v21 = (((613566757 * (unint64_t)((-1048560 - v22 + (v22 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
            v21[1] = (((613566757 * (unint64_t)((-1048560 - v24 + (v24 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v25 + (v25 << 16)) >> 5)) >> 32)
                                  + 1) >> 1;
            v21 += 2;
          }
          v26 = *(v20 - 2);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_WORD *)(v17 + 2 * v19++) = (-1048560 - v26 + (v26 << 16)) / 0xDB;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a4;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a7 + *a8 * v15 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + v12 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              v22 = 16;
            v23 = *v20;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              v23 = 16;
            *v21 = (613566757 * (unint64_t)((-1048560 - v22 + (v22 << 16)) >> 5)) >> 32;
            v21[1] = (613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32;
            v21 += 2;
          }
          v24 = *(v20 - 2);
          if (v24 >= 0xEB)
            v24 = 235;
          if (v24 <= 0x10)
            v24 = 16;
          *(_WORD *)(v17 + 2 * v19++) = (-1048560 - v24 + (v24 << 16)) / 0xDB;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;
  uint64_t v31;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = (*(unsigned __int8 *)(v26 + v27)
                 + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 3)
                 + *(unsigned __int8 *)(v25 + v27 + 7)
                 + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 4)) << 6;
            *v29 = (*(unsigned __int8 *)(v26 + v27 - 1)
                  + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 3)) << 6;
            v29[1] = v30;
            v29 += 2;
          }
          *(_WORD *)(v24 + 2 * v28++) = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v31 = 0;
      else
        v31 = v21;
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  uint64_t v28;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *v25 << 8;
            *v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) << 8;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v28 = 0;
      else
        v28 = v19;
      v20 += v28;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = a8[1];
    v23 = a7[1] + ((unint64_t)(v22 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v8 + (v8 & 1) + *a3 + v20 + v20 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v23;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = (unsigned __int8 *)(v25 + v27);
            v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            v32 = (unsigned __int8 *)(v26 + v27);
            v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              v31 = 16;
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              v33 = 16;
            v34 = v30[3];
            v35 = *v32;
            if (v34 >= 0xF0)
              v34 = 240;
            if (v34 <= 0x10)
              v34 = 16;
            if (v35 >= 0xF0)
              v35 = 240;
            if (v35 <= 0x10)
              v35 = 16;
            v36 = v30[6];
            v37 = v32[3];
            if (v36 >= 0xF0)
              v36 = 240;
            if (v36 <= 0x10)
              v36 = 16;
            if (v37 >= 0xF0)
              v37 = 240;
            if (v37 <= 0x10)
              v37 = 16;
            v38 = v30[7];
            v39 = v32[4];
            if (v38 >= 0xF0)
              v38 = 240;
            if (v38 <= 0x10)
              v38 = 16;
            v40 = -1048560 - v31 + (v31 << 16);
            if (v39 >= 0xF0)
              v39 = 240;
            v41 = (613566757 * (unint64_t)(v40 >> 5)) >> 32;
            v42 = -1048560 - v34 + (v34 << 16);
            if (v39 <= 0x10)
              v39 = 16;
            *v29 = (v41
                                + ((613566757 * (unint64_t)((-1048560 - v33 + (v33 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v36 + (v36 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v37 + (v37 << 16)) >> 5)) >> 32)
                                + 2) >> 2;
            v29[1] = (((613566757 * (unint64_t)(v42 >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v35 + (v35 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v38 + (v38 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32)
                                  + 2) >> 2;
            v29 += 2;
          }
          v43 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v43 >= 0xEB)
            v43 = 235;
          if (v43 <= 0x10)
            v43 = 16;
          *(_WORD *)(v24 + 2 * v28++) = (-1048560 - v43 + (v43 << 16)) / 0xDB;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v20;
      v24 += v21;
      if ((v19 & 1) != 0)
        v44 = 0;
      else
        v44 = v22;
      v23 += v44;
      ++v19;
      v26 += v20;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF0)
              v27 = 240;
            if (v27 <= 0x10)
              v27 = 16;
            v28 = *v25;
            if (v28 >= 0xF0)
              v28 = 240;
            if (v28 <= 0x10)
              v28 = 16;
            *v26 = (613566757 * (unint64_t)((-1048560 - v27 + (v27 << 16)) >> 5)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-1048560 - v28 + (v28 << 16)) >> 5)) >> 32;
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB)
            v29 = 235;
          if (v29 <= 0x10)
            v29 = 16;
          *(_WORD *)(v22 + 2 * v24++) = (-1048560 - v29 + (v29 << 16)) / 0xDB;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y408_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _WORD *v26;
  __int16 v27;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i != v8; ++i)
        {
          v26 = (_WORD *)(v20 + v24);
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v23 + v24) | (*(unsigned __int8 *)(v23 + v24) << 8);
          v27 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v26 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          v26[1] = v27;
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  _WORD *v23;
  __int16 v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i != v8; ++i)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *v23 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          v23[1] = v24;
          *(_WORD *)(v19 + 2 * i) = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _WORD *v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 4 * v15;
    v17 = *a7 + *a8 * v14 + 2 * v15;
    v18 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i != v8; ++i)
        {
          v21 = v18 + v19;
          v22 = *(unsigned __int8 *)(v18 + v19 + 2);
          if (v22 >= 0xF0)
            v22 = 240;
          if (v22 <= 0x10)
            v22 = 16;
          v23 = *(unsigned __int8 *)(v21 + 3);
          if (v23 >= 0xF0)
            v23 = 240;
          v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x10)
            v23 = 16;
          *v24 = 16 * ((613566757 * (unint64_t)((4095 * v22 - 65520) >> 5)) >> 32);
          v24[1] = 16 * ((613566757 * (unint64_t)((4095 * v23 - 65520) >> 5)) >> 32);
          v25 = *(unsigned __int8 *)(v21 + 1);
          if (v25 >= 0xEB)
            v25 = 235;
          if (v25 <= 0x10)
            v25 = 16;
          *(_WORD *)(v17 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)
                                                  + ((4095 * v25
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + 2 * v9;
    v21 = v18 + 2 * v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)v22;
        v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            v26 = *v24;
            v27 = v24[4];
            *v25 = (v24[3] + (unsigned __int16)*(v24 - 1)) << 7;
            v25[1] = (v27 + v26) << 7;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  __int16 v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + 2 * v9;
    v21 = v18 + 2 * v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)v22;
        v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            v26 = *v24 << 8;
            *v25 = *(v24 - 1) << 8;
            v25[1] = v26;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  __int16 v22;
  __int16 v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *v20;
            v23 = v20[4];
            *v21 = (v20[3] + (unsigned __int16)*(v20 - 1)) << 7;
            v21[1] = (v23 + v22) << 7;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  __int16 v22;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *v20 << 8;
            *v21 = *(v20 - 1) << 8;
            v21[1] = v22;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a4;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a7 + *a8 * v15 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            v23 = v20[3];
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              v22 = 16;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              v23 = 16;
            v24 = *v20;
            v25 = v20[4];
            if (v24 >= 0xF0)
              v24 = 240;
            if (v24 <= 0x10)
              v24 = 16;
            if (v25 >= 0xF0)
              v25 = 240;
            if (v25 <= 0x10)
              v25 = 16;
            *v21 = (8
                  * (((613566757 * (unint64_t)((4095 * v23 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v22 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
            v21[1] = (8
                    * (((613566757 * (unint64_t)((4095 * v25 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v24 - 65520) >> 5)) >> 32))
                    + 8) & 0xFFF0;
            v21 += 2;
          }
          v26 = *(v20 - 2);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)
                                                      + ((4095 * v26
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v26 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a4;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a7 + *a8 * v15 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              v22 = 16;
            v23 = *v20;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              v23 = 16;
            *v21 = 16 * ((613566757 * (unint64_t)((4095 * v22 - 65520) >> 5)) >> 32);
            v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v23 - 65520) >> 5)) >> 32);
            v21 += 2;
          }
          v24 = *(v20 - 2);
          if (v24 >= 0xEB)
            v24 = 235;
          if (v24 <= 0x10)
            v24 = 16;
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(4095 * v24 - 65520)) >> 32)
                                                      + ((4095 * v24
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v24 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;
  uint64_t v31;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = (*(unsigned __int8 *)(v26 + v27)
                 + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 3)
                 + *(unsigned __int8 *)(v25 + v27 + 7)
                 + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 4)) << 6;
            *v29 = (*(unsigned __int8 *)(v26 + v27 - 1)
                  + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 3)) << 6;
            v29[1] = v30;
            v29 += 2;
          }
          *(_WORD *)(v24 + 2 * v28++) = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v31 = 0;
      else
        v31 = v21;
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  uint64_t v28;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *v25 << 8;
            *v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) << 8;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v28 = 0;
      else
        v28 = v19;
      v20 += v28;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = (unsigned __int8 *)(v25 + v27);
            v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            v32 = (unsigned __int8 *)(v26 + v27);
            v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              v31 = 16;
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              v33 = 16;
            v34 = v30[3];
            v35 = *v32;
            if (v34 >= 0xF0)
              v34 = 240;
            if (v34 <= 0x10)
              v34 = 16;
            if (v35 >= 0xF0)
              v35 = 240;
            if (v35 <= 0x10)
              v35 = 16;
            v36 = v30[6];
            v37 = v32[3];
            if (v36 >= 0xF0)
              v36 = 240;
            if (v36 <= 0x10)
              v36 = 16;
            if (v37 >= 0xF0)
              v37 = 240;
            if (v37 <= 0x10)
              v37 = 16;
            v38 = v30[7];
            v39 = v32[4];
            if (v38 >= 0xF0)
              v38 = 240;
            if (v38 <= 0x10)
              v38 = 16;
            if (v39 >= 0xF0)
              v39 = 240;
            if (v39 <= 0x10)
              v39 = 16;
            *v29 = (4
                  * (((613566757 * (unint64_t)((4095 * v33 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v31 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v36 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v37 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
            v29[1] = (4
                    * (((613566757 * (unint64_t)((4095 * v35 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v34 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v39 - 65520) >> 5)) >> 32))
                    + 8) & 0xFFF0;
            v29 += 2;
          }
          v40 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v40 >= 0xEB)
            v40 = 235;
          if (v40 <= 0x10)
            v40 = 16;
          *(_WORD *)(v24 + 2 * v28++) = ((((725633745 * (unint64_t)(4095 * v40 - 65520)) >> 32)
                                                      + ((4095 * v40
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v40 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v41 = 0;
      else
        v41 = v21;
      v22 += v41;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF0)
              v27 = 240;
            if (v27 <= 0x10)
              v27 = 16;
            v28 = *v25;
            if (v28 >= 0xF0)
              v28 = 240;
            if (v28 <= 0x10)
              v28 = 16;
            *v26 = 16 * ((613566757 * (unint64_t)((4095 * v27 - 65520) >> 5)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((4095 * v28 - 65520) >> 5)) >> 32);
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB)
            v29 = 235;
          if (v29 <= 0x10)
            v29 = 16;
          *(_WORD *)(v22 + 2 * v24++) = ((((725633745 * (unint64_t)(4095 * v29 - 65520)) >> 32)
                                                      + ((4095 * v29
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v29 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y408_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _WORD *v26;
  __int16 v27;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i != v8; ++i)
        {
          v26 = (_WORD *)(v20 + v24);
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v23 + v24) | (*(unsigned __int8 *)(v23 + v24) << 8);
          v27 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v26 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          v26[1] = v27;
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  _WORD *v23;
  __int16 v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i != v8; ++i)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *v23 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          v23[1] = v24;
          *(_WORD *)(v19 + 2 * i) = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _WORD *v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 4 * v15;
    v17 = *a7 + *a8 * v14 + 2 * v15;
    v18 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i != v8; ++i)
        {
          v21 = v18 + v19;
          v22 = *(unsigned __int8 *)(v18 + v19 + 2);
          if (v22 >= 0xF0)
            v22 = 240;
          if (v22 <= 0x10)
            v22 = 16;
          v23 = *(unsigned __int8 *)(v21 + 3);
          if (v23 >= 0xF0)
            v23 = 240;
          v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x10)
            v23 = 16;
          *v24 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v22 - 16368) >> 5)) >> 32) << 6;
          v24[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v23 - 16368) >> 5)) >> 32) << 6;
          v25 = *(unsigned __int8 *)(v21 + 1);
          if (v25 >= 0xEB)
            v25 = 235;
          if (v25 <= 0x10)
            v25 = 16;
          *(_WORD *)(v17 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)
                                                  + ((1023 * v25
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + 2 * v9;
    v21 = v18 + 2 * v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)v22;
        v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            v26 = *v24;
            v27 = v24[4];
            *v25 = (v24[3] + (unsigned __int16)*(v24 - 1)) << 7;
            v25[1] = (v27 + v26) << 7;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  __int16 v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + 2 * v9;
    v21 = v18 + 2 * v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)v22;
        v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            v26 = *v24 << 8;
            *v25 = *(v24 - 1) << 8;
            v25[1] = v26;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  __int16 v22;
  __int16 v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *v20;
            v23 = v20[4];
            *v21 = (v20[3] + (unsigned __int16)*(v20 - 1)) << 7;
            v21[1] = (v23 + v22) << 7;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  __int16 v22;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *v20 << 8;
            *v21 = *(v20 - 1) << 8;
            v21[1] = v22;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a4;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a7 + *a8 * v15 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            v23 = v20[3];
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              v22 = 16;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              v23 = 16;
            v24 = *v20;
            v25 = v20[4];
            if (v24 >= 0xF0)
              v24 = 240;
            if (v24 <= 0x10)
              v24 = 16;
            if (v25 >= 0xF0)
              v25 = 240;
            if (v25 <= 0x10)
              v25 = 16;
            *v21 = (32
                  * (((613566757 * (unint64_t)((1023 * v23 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v22 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
            v21[1] = (32
                    * (((613566757 * (unint64_t)((1023 * v25 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v24 - 16368) >> 5)) >> 32))
                    + 32) & 0xFFC0;
            v21 += 2;
          }
          v26 = *(v20 - 2);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)
                                                      + ((1023 * v26
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v26 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a4;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a7 + *a8 * v15 + 2 * v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              v22 = 16;
            v23 = *v20;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              v23 = 16;
            *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v22 - 16368) >> 5)) >> 32) << 6;
            v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v23 - 16368) >> 5)) >> 32) << 6;
            v21 += 2;
          }
          v24 = *(v20 - 2);
          if (v24 >= 0xEB)
            v24 = 235;
          if (v24 <= 0x10)
            v24 = 16;
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(1023 * v24 - 16368)) >> 32)
                                                      + ((1023 * v24
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v24 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;
  uint64_t v31;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = *(unsigned __int8 *)(v26 + v27)
                + *(unsigned __int8 *)(v25 + v27 + 3)
                + *(unsigned __int8 *)(v25 + v27 + 7)
                + *(unsigned __int8 *)(v26 + v27 + 4);
            *v29 = (*(unsigned __int8 *)(v26 + v27 - 1)
                  + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 3)) << 6;
            v29[1] = v30 << 6;
            v29 += 2;
          }
          *(_WORD *)(v24 + 2 * v28++) = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v31 = 0;
      else
        v31 = v21;
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  uint64_t v28;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *v25 << 8;
            *v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) << 8;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v28 = 0;
      else
        v28 = v19;
      v20 += v28;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = (unsigned __int8 *)(v25 + v27);
            v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            v32 = (unsigned __int8 *)(v26 + v27);
            v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              v31 = 16;
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              v33 = 16;
            v34 = v30[3];
            v35 = *v32;
            if (v34 >= 0xF0)
              v34 = 240;
            if (v34 <= 0x10)
              v34 = 16;
            if (v35 >= 0xF0)
              v35 = 240;
            if (v35 <= 0x10)
              v35 = 16;
            v36 = v30[6];
            v37 = v32[3];
            if (v36 >= 0xF0)
              v36 = 240;
            if (v36 <= 0x10)
              v36 = 16;
            if (v37 >= 0xF0)
              v37 = 240;
            if (v37 <= 0x10)
              v37 = 16;
            v38 = v30[7];
            v39 = v32[4];
            if (v38 >= 0xF0)
              v38 = 240;
            if (v38 <= 0x10)
              v38 = 16;
            if (v39 >= 0xF0)
              v39 = 240;
            if (v39 <= 0x10)
              v39 = 16;
            *v29 = (16
                  * (((613566757 * (unint64_t)((1023 * v33 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v31 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v36 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v37 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
            v29[1] = (16
                    * (((613566757 * (unint64_t)((1023 * v35 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v34 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v39 - 16368) >> 5)) >> 32))
                    + 32) & 0xFFC0;
            v29 += 2;
          }
          v40 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v40 >= 0xEB)
            v40 = 235;
          if (v40 <= 0x10)
            v40 = 16;
          *(_WORD *)(v24 + 2 * v28++) = ((((725633745 * (unint64_t)(1023 * v40 - 16368)) >> 32)
                                                      + ((1023 * v40
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v40 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v41 = 0;
      else
        v41 = v21;
      v22 += v41;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF0)
              v27 = 240;
            if (v27 <= 0x10)
              v27 = 16;
            v28 = *v25;
            if (v28 >= 0xF0)
              v28 = 240;
            if (v28 <= 0x10)
              v28 = 16;
            *v26 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v27 - 16368) >> 5)) >> 32) << 6;
            v26[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v28 - 16368) >> 5)) >> 32) << 6;
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB)
            v29 = 235;
          if (v29 <= 0x10)
            v29 = 16;
          *(_WORD *)(v22 + 2 * v24++) = ((((725633745 * (unint64_t)(1023 * v29 - 16368)) >> 32)
                                                      + ((1023 * v29
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v29 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y408_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 2 * v15;
    v21 = v17 + v15;
    v22 = v18 + v15;
    v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        v25 = 0;
        for (i = 0; i != v8; ++i)
        {
          *(_BYTE *)(v21 + i) = *(_BYTE *)(v23 + v24);
          *(_WORD *)(v20 + v25) = *(_WORD *)(v23 + v24 + 2);
          *(_BYTE *)(v22 + i) = *(_BYTE *)(v23 + v24 + 1);
          v25 += 2;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 2 * v14;
    v19 = v16 + v14;
    v20 = a2[4] + *a4 * a2[5] + *a3 + 3;
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = 0;
        v23 = v20;
        do
        {
          *(_WORD *)(v18 + v21) = *(_WORD *)(v23 - 1);
          *(_BYTE *)(v19 + v22++) = *(_BYTE *)(v23 - 2);
          v21 += 2;
          v23 += 4;
        }
        while (v8 != v22);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 2 * v15;
    v17 = *a7 + *a8 * v14 + v15;
    v18 = a2[4] + *a4 * a2[5] + *a3 + 3;
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = 0;
        v21 = (unsigned __int8 *)v18;
        do
        {
          v22 = (_BYTE *)(v16 + v19);
          v23 = *(v21 - 1);
          if (v23 >= 0xF0)
            v23 = 240;
          if (v23 <= 0x10)
            LOWORD(v23) = 16;
          v24 = *v21;
          if (v24 >= 0xF0)
            v24 = 240;
          if (v24 <= 0x10)
            LOWORD(v24) = 16;
          *v22 = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
          v22[1] = (9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16;
          v25 = *(v21 - 2);
          if (v25 >= 0xEB)
            v25 = 235;
          if (v25 <= 0x10)
            v25 = 16;
          *(_BYTE *)(v17 + v20++) = (((255 * v25
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v25 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v25 - 4080)) >> 16)) >> 7;
          v19 += 2;
          v21 += 4;
        }
        while (v8 != v20);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  unsigned int v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + v9;
    v21 = v18 + v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = (unsigned __int8 *)v22;
        v25 = (_BYTE *)v15;
        do
        {
          *(_BYTE *)(v20 + v23) = *(v24 - 3);
          if ((v23 & 1) == 0)
          {
            v26 = (*v24 + v24[4] + 1) >> 1;
            *v25 = (*(v24 - 1) + v24[3] + 1) >> 1;
            v25[1] = v26;
            v25 += 2;
          }
          *(_BYTE *)(v21 + v23++) = *(v24 - 2);
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    v16 = a8[2];
    v17 = a7[2] + v16 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v17 + v9;
    v21 = v18 + v9;
    v22 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v23 = 0;
        v24 = v22;
        v25 = (_WORD *)v15;
        do
        {
          *(_BYTE *)(v20 + v23) = *(_BYTE *)(v24 - 3);
          if ((v23 & 1) == 0)
            *v25++ = *(_WORD *)(v24 - 1);
          *(_BYTE *)(v21 + v23++) = *(_BYTE *)(v24 - 2);
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  unsigned int v22;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_BYTE *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = (*v20 + v20[4] + 1) >> 1;
            *v21 = (*(v20 - 1) + v20[3] + 1) >> 1;
            v21[1] = v22;
            v21 += 2;
          }
          *(_BYTE *)(v17 + v19++) = *(v20 - 2);
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = v18;
        v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
            *v21++ = *(_WORD *)(v20 - 1);
          *(_BYTE *)(v17 + v19++) = *(_BYTE *)(v20 - 2);
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_BYTE *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            v23 = v20[3];
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              LOWORD(v22) = 16;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              LOWORD(v23) = 16;
            v24 = *v20;
            v25 = v20[4];
            if (v24 >= 0xF0)
              v24 = 240;
            if (v24 <= 0x10)
              LOWORD(v24) = 16;
            if (v25 >= 0xF0)
              v25 = 240;
            if (v25 <= 0x10)
              LOWORD(v25) = 16;
            *v21 = (((9363 * ((unsigned __int16)(255 * v22 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
            v21[1] = (((9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v25 - 4080) >> 5)) >> 16)
                    + 1) >> 1;
            v21 += 2;
          }
          v26 = *(v20 - 2);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_BYTE *)(v17 + v19++) = (((255 * v26
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 7;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v10 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(_QWORD *)(a2 + 32) & 1)
       + *(_QWORD *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v11 = 0;
    v12 = *a8;
    v13 = a8[1];
    v14 = *(_QWORD *)(a6 + 40);
    v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    v16 = *a4;
    v17 = *a7 + *a8 * v14 + v9;
    v18 = *(_QWORD *)(a2 + 32) + *a4 * *(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)v18;
        v21 = (_BYTE *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            v22 = *(v20 - 1);
            if (v22 >= 0xF0)
              v22 = 240;
            if (v22 <= 0x10)
              LOWORD(v22) = 16;
            v23 = *v20;
            if (v23 >= 0xF0)
              v23 = 240;
            if (v23 <= 0x10)
              LOWORD(v23) = 16;
            *v21 = (9363 * ((unsigned __int16)(255 * v22 - 4080) >> 5)) >> 16;
            v21[1] = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
            v21 += 2;
          }
          v24 = *(v20 - 2);
          if (v24 >= 0xEB)
            v24 = 235;
          if (v24 <= 0x10)
            v24 = 16;
          *(_BYTE *)(v17 + v19++) = (((255 * v24
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 7;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 & 0x7FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_BYTE *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = (*(unsigned __int8 *)(v25 + v27 + 3)
                 + *(unsigned __int8 *)(v26 + v27)
                 + *(unsigned __int8 *)(v25 + v27 + 7)
                 + *(unsigned __int8 *)(v26 + v27 + 4)
                 + 2) >> 2;
            *v29 = (*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v26 + v27 - 1)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + *(unsigned __int8 *)(v26 + v27 + 3)
                  + 2) >> 2;
            v29[1] = v30;
            v29 += 2;
          }
          *(_BYTE *)(v24 + v28++) = *(_BYTE *)(v25 + v27 + 1);
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v31 = 0;
      else
        v31 = v21;
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = v23;
        v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
            *v26++ = *(_WORD *)(v25 - 1);
          *(_BYTE *)(v22 + v24++) = *(_BYTE *)(v25 - 2);
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v27 = 0;
      else
        v27 = v19;
      v20 += v27;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 & 0x7FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_BYTE *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            v30 = (unsigned __int8 *)(v25 + v27);
            v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            v32 = (unsigned __int8 *)(v26 + v27);
            v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              LOWORD(v31) = 16;
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              LOWORD(v33) = 16;
            v34 = v30[3];
            v35 = *v32;
            if (v34 >= 0xF0)
              v34 = 240;
            if (v34 <= 0x10)
              LOWORD(v34) = 16;
            if (v35 >= 0xF0)
              v35 = 240;
            if (v35 <= 0x10)
              LOWORD(v35) = 16;
            v36 = v30[6];
            v37 = v32[3];
            if (v36 >= 0xF0)
              v36 = 240;
            if (v36 <= 0x10)
              LOWORD(v36) = 16;
            if (v37 >= 0xF0)
              v37 = 240;
            if (v37 <= 0x10)
              LOWORD(v37) = 16;
            v38 = v30[7];
            v39 = v32[4];
            if (v38 >= 0xF0)
              v38 = 240;
            if (v38 <= 0x10)
              LOWORD(v38) = 16;
            if (v39 >= 0xF0)
              v39 = 240;
            if (v39 <= 0x10)
              LOWORD(v39) = 16;
            *v29 = (((9363 * ((unsigned __int16)(255 * v31 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v37 - 4080) >> 5)) >> 16)
                  + 2) >> 2;
            v29[1] = (((9363 * ((unsigned __int16)(255 * v34 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16)
                    + 2) >> 2;
            v29 += 2;
          }
          v40 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v40 >= 0xEB)
            v40 = 235;
          if (v40 <= 0x10)
            v40 = 16;
          *(_BYTE *)(v24 + v28++) = (((255 * v40
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v40 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v40 - 4080)) >> 16)) >> 7;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v41 = 0;
      else
        v41 = v21;
      v22 += v41;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_BYTE *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF0)
              v27 = 240;
            if (v27 <= 0x10)
              LOWORD(v27) = 16;
            v28 = *v25;
            if (v28 >= 0xF0)
              v28 = 240;
            if (v28 <= 0x10)
              LOWORD(v28) = 16;
            *v26 = (9363 * ((unsigned __int16)(255 * v27 - 4080) >> 5)) >> 16;
            v26[1] = (9363 * ((unsigned __int16)(255 * v28 - 4080) >> 5)) >> 16;
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB)
            v29 = 235;
          if (v29 <= 0x10)
            v29 = 16;
          *(_BYTE *)(v22 + v24++) = (((255 * v29
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v19;
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (v9 & 1) + v9;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    v21 = a8[2];
    v22 = a7[2] + v21 * v13;
    v23 = *a7 + *a8 * v13;
    v24 = *a4;
    v25 = v22 + v12;
    v26 = v23 + v12;
    v27 = *a3 + *a4 * v11 + v10;
    v28 = v8 + (v8 & 1) + *a3 + v24 + v24 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v15)
      {
        v29 = 0;
        v30 = 0;
        v31 = (_BYTE *)v20;
        do
        {
          v32 = (_BYTE *)(v27 + v29);
          *(_BYTE *)(v25 + v30) = *(_BYTE *)(v27 + v29);
          if (((v30 | v17) & 1) == 0)
          {
            v33 = (v32[3]
                 + *(unsigned __int8 *)(v28 + v29)
                 + v32[7]
                 + *(unsigned __int8 *)(v28 + v29 + 4)
                 + 2) >> 2;
            *v31 = (v32[2]
                  + *(unsigned __int8 *)(v28 + v29 - 1)
                  + v32[6]
                  + *(unsigned __int8 *)(v28 + v29 + 3)
                  + 2) >> 2;
            v31[1] = v33;
            v31 += 2;
          }
          *(_BYTE *)(v26 + v30++) = v32[1];
          v29 += 4;
        }
        while (v15 != v30);
      }
      v27 += v24;
      v26 += v18;
      if ((v17 & 1) != 0)
        v34 = 0;
      else
        v34 = v19;
      v20 += v34;
      v25 += v21;
      ++v17;
      v28 += v24;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - ((unint64_t)(v8 & 1) + v8) < v14)
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
        - ((*(_QWORD *)(a2 + 32) & 1)
         + *(_QWORD *)(a2 + 32));
  v15 = v10 - v9;
  if (v10 - v9 >= (unint64_t)(v13 - v12))
    v15 = v13 - v12;
  if (v15)
  {
    v16 = 0;
    v17 = *a8;
    v18 = a8[1];
    v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    v20 = a8[2];
    v21 = a7[2] + v20 * v12;
    v22 = *a7 + *a8 * v12;
    v23 = *a4;
    v24 = v21 + v11;
    v25 = v22 + v11;
    v26 = v8 + *a4 * v9 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v14)
      {
        v27 = 0;
        v28 = v26;
        v29 = (_WORD *)v19;
        do
        {
          *(_BYTE *)(v24 + v27) = *(_BYTE *)(v28 - 3);
          if (((v27 | v16) & 1) == 0)
            *v29++ = *(_WORD *)(v28 - 1);
          *(_BYTE *)(v25 + v27++) = *(_BYTE *)(v28 - 2);
          v28 += 4;
        }
        while (v14 != v27);
      }
      v25 += v17;
      if ((v16 & 1) != 0)
        v30 = 0;
      else
        v30 = v18;
      v19 += v30;
      v24 += v20;
      ++v16;
      v26 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a8[2];
    v23 = *a4;
    v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v15) >> 1) + (v14 >> 1));
    v25 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 >> 1));
    v26 = *a7 + *a8 * v15 + v14;
    v27 = *a3 + *a4 * v12 + v10;
    v28 = v8 + (v8 & 1) + *a3 + v23 + v23 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v17)
      {
        v29 = 0;
        v30 = 0;
        v31 = v24;
        v32 = v25;
        do
        {
          if (((v30 | v19) & 1) == 0)
          {
            v33 = (*(unsigned __int8 *)(v27 + v29 + 3)
                 + *(unsigned __int8 *)(v28 + v29)
                 + *(unsigned __int8 *)(v27 + v29 + 7)
                 + *(unsigned __int8 *)(v28 + v29 + 4)
                 + 2) >> 2;
            *v32++ = (*(unsigned __int8 *)(v27 + v29 + 2)
                    + *(unsigned __int8 *)(v28 + v29 - 1)
                    + *(unsigned __int8 *)(v27 + v29 + 6)
                    + *(unsigned __int8 *)(v28 + v29 + 3)
                    + 2) >> 2;
            *v31++ = v33;
          }
          *(_BYTE *)(v26 + v30++) = *(_BYTE *)(v27 + v29 + 1);
          v29 += 4;
        }
        while (v17 != v30);
      }
      v27 += v23;
      v26 += v20;
      if ((v19 & 1) != 0)
        v34 = 0;
      else
        v34 = v21;
      v25 += v34;
      if ((v19 & 1) != 0)
        v35 = 0;
      else
        v35 = v22;
      v24 += v35;
      ++v19;
      v28 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a8[2];
    v21 = *a4;
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    v24 = *a7 + *a8 * v13 + v12;
    v25 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v26 = 0;
        v27 = (char *)v25;
        v28 = v22;
        v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            v30 = *v27;
            *v29++ = *(v27 - 1);
            *v28++ = v30;
          }
          *(_BYTE *)(v24 + v26++) = *(v27 - 2);
          v27 += 4;
        }
        while (v15 != v26);
      }
      v24 += v18;
      if ((v17 & 1) != 0)
        v31 = 0;
      else
        v31 = v19;
      v23 += v31;
      if ((v17 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v22 += v32;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = a8[2];
    v46 = a8[1];
    v21 = *a4;
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v15) >> 1) + (v14 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v46 * v15) >> 1) + (v14 >> 1));
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + v14;
    v26 = *a3 + *a4 * v12 + v10;
    v27 = v8 + (v8 & 1) + *a3 + v21 + v21 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v17)
      {
        v28 = 0;
        v29 = 0;
        v30 = v22;
        v31 = v23;
        do
        {
          if (((v29 | v19) & 1) == 0)
          {
            v32 = (unsigned __int8 *)(v26 + v28);
            v33 = *(unsigned __int8 *)(v26 + v28 + 2);
            v34 = (unsigned __int8 *)(v27 + v28);
            v35 = *(unsigned __int8 *)(v27 + v28 - 1);
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              LOWORD(v33) = 16;
            if (v35 >= 0xF0)
              v35 = 240;
            if (v35 <= 0x10)
              LOWORD(v35) = 16;
            v36 = v32[3];
            v37 = *v34;
            if (v36 >= 0xF0)
              v36 = 240;
            if (v36 <= 0x10)
              LOWORD(v36) = 16;
            if (v37 >= 0xF0)
              v37 = 240;
            if (v37 <= 0x10)
              LOWORD(v37) = 16;
            v38 = v32[6];
            v39 = v34[3];
            if (v38 >= 0xF0)
              v38 = 240;
            if (v38 <= 0x10)
              LOWORD(v38) = 16;
            if (v39 >= 0xF0)
              v39 = 240;
            if (v39 <= 0x10)
              LOWORD(v39) = 16;
            v40 = v32[7];
            v41 = v34[4];
            if (v40 >= 0xF0)
              v40 = 240;
            if (v40 <= 0x10)
              LOWORD(v40) = 16;
            if (v41 >= 0xF0)
              v41 = 240;
            if (v41 <= 0x10)
              LOWORD(v41) = 16;
            *v31++ = (((9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16)
                    + 2) >> 2;
            *v30++ = (((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v37 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16)
                    + 2) >> 2;
          }
          v42 = *(unsigned __int8 *)(v26 + v28 + 1);
          if (v42 >= 0xEB)
            v42 = 235;
          if (v42 <= 0x10)
            v42 = 16;
          *(_BYTE *)(v25 + v29++) = (((255 * v42
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v42 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v42 - 4080)) >> 16)) >> 7;
          v28 += 4;
        }
        while (v17 != v29);
      }
      v26 += v21;
      v25 += v24;
      v43 = v46;
      if ((v19 & 1) != 0)
        v43 = 0;
      v23 += v43;
      if ((v19 & 1) != 0)
        v44 = 0;
      else
        v44 = v20;
      v22 += v44;
      ++v19;
      v27 += v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a8[2];
    v21 = *a4;
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    v24 = *a7 + *a8 * v13 + v12;
    v25 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        v26 = 0;
        v27 = (unsigned __int8 *)v25;
        v28 = v22;
        v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            v30 = *(v27 - 1);
            if (v30 >= 0xF0)
              v30 = 240;
            if (v30 <= 0x10)
              LOWORD(v30) = 16;
            v31 = *v27;
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              LOWORD(v31) = 16;
            *v29++ = (9363 * ((unsigned __int16)(255 * v30 - 4080) >> 5)) >> 16;
            *v28++ = (9363 * ((unsigned __int16)(255 * v31 - 4080) >> 5)) >> 16;
          }
          v32 = *(v27 - 2);
          if (v32 >= 0xEB)
            v32 = 235;
          if (v32 <= 0x10)
            v32 = 16;
          *(_BYTE *)(v24 + v26++) = (((255 * v32
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v32 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v32 - 4080)) >> 16)) >> 7;
          v27 += 4;
        }
        while (v15 != v26);
      }
      v24 += v18;
      if ((v17 & 1) != 0)
        v33 = 0;
      else
        v33 = v19;
      v23 += v33;
      if ((v17 & 1) != 0)
        v34 = 0;
      else
        v34 = v20;
      v22 += v34;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_y408_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y408_32ARGB;
  *a11 = vt_VImage_Cleanup_y408_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y408_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y408_32BGRA;
  *a11 = vt_VImage_Cleanup_y408_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_32ARGB;
  *a11 = vt_VImage_Cleanup_v410_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_32BGRA;
  *a11 = vt_VImage_Cleanup_v410_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_l64r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, (vImageARGBType)0xFFFFFFFF, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_l64r;
  *a11 = vt_VImage_Cleanup_v410_l64r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, kvImageARGB16Q12, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_RGhA;
  *a11 = vt_VImage_Cleanup_v410_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_y416_y408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_y416_y408;
  *a11 = vt_VImage_Cleanup_y416_y408;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_y416_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_32BGRA;
  *a11 = vt_VImage_Cleanup_y416_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y416_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_32ARGB;
  *a11 = vt_VImage_Cleanup_y416_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y416_l64r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_l64r;
  *a11 = vt_VImage_Cleanup_y416_l64r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y416_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_RGhA;
  *a11 = vt_VImage_Cleanup_y416_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_y416_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i != v8; ++i)
        {
          v26 = v23 + 2 * v24;
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)v26;
          *(_DWORD *)(v20 + v24) = *(_DWORD *)(v26 + 4);
          *(_WORD *)(v22 + 2 * i) = *(_WORD *)(v26 + 2);
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = v20;
        v23 = v8;
        do
        {
          *(_DWORD *)(v18 + 2 * v21) = *(_DWORD *)(v22 - 2);
          *(_WORD *)(v19 + v21) = *(_WORD *)(v22 - 4);
          v21 += 2;
          v22 += 8;
          --v23;
        }
        while (v23);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 4 * v15;
    v17 = *a7 + *a8 * v14 + 2 * v15;
    v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = (unsigned __int16 *)v18;
        v21 = v8;
        do
        {
          v22 = (_WORD *)(v16 + 2 * v19);
          v23 = *(v20 - 1);
          if (v23 >= 0xF000)
            v23 = 61440;
          if (v23 <= 0x1000)
            v23 = 4096;
          v24 = *v20;
          if (v24 >= 0xF000)
            v24 = 61440;
          if (v24 <= 0x1000)
            v24 = 4096;
          *v22 = (613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32;
          v22[1] = (613566757 * (unint64_t)((-268431360 - v24 + (v24 << 16)) >> 13)) >> 32;
          v25 = *(v20 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v17 + v19) = (-268431360 - v25 + (v25 << 16)) / 0xDB00;
          v19 += 2;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _WORD *v26;
  unsigned int v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = (unsigned __int16 *)v23;
        v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 6);
          if ((v24 & 1) == 0)
          {
            v27 = (*(v25 - 3) + v25[1] + 1) >> 1;
            *v26 = (*(v25 - 4) + *v25 + 1) >> 1;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 5);
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = v23;
        v26 = (_DWORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(_WORD *)(v25 - 6);
          if ((v24 & 1) == 0)
            *v26++ = *(_DWORD *)(v25 - 2);
          *(_WORD *)(v22 + 2 * v24++) = *(_WORD *)(v25 - 4);
          v25 += 8;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = (*(v21 - 3) + v21[1] + 1) >> 1;
            *v22 = (*(v21 - 4) + *v21 + 1) >> 1;
            v22[1] = v23;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 5);
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = v19;
        v22 = (_DWORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
            *v22++ = *(_DWORD *)(v21 - 2);
          *(_WORD *)(v18 + 2 * v20++) = *(_WORD *)(v21 - 4);
          v21 += 8;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 4);
            v24 = *v21;
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            v25 = *(v21 - 3);
            v26 = v21[1];
            if (v25 >= 0xF000)
              v25 = 61440;
            if (v25 <= 0x1000)
              v25 = 4096;
            if (v26 >= 0xF000)
              v26 = 61440;
            if (v26 <= 0x1000)
              v26 = 4096;
            *v22 = (((613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v24 + (v24 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
            v22[1] = (((613566757 * (unint64_t)((-268431360 - v25 + (v25 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v26 + (v26 << 16)) >> 13)) >> 32)
                                  + 1) >> 1;
            v22 += 2;
          }
          v27 = *(v21 - 5);
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          *(_WORD *)(v18 + 2 * v20++) = (-268431360 - v27 + (v27 << 16)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 1);
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            v24 = *v21;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            *v22 = (613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32;
            v22[1] = (613566757 * (unint64_t)((-268431360 - v24 + (v24 << 16)) >> 13)) >> 32;
            v22 += 2;
          }
          v25 = *(v21 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v18 + 2 * v20++) = (-268431360 - v25 + (v25 << 16)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  unsigned int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a4;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (*(unsigned __int16 *)(v24 + v26 + 6)
                 + *(unsigned __int16 *)(v25 + v26 - 6)
                 + *(unsigned __int16 *)(v24 + v26 + 14)
                 + *(unsigned __int16 *)(v25 + v26 + 2)
                 + 2) >> 2;
            *v28 = (*(unsigned __int16 *)(v24 + v26 + 4)
                  + *(unsigned __int16 *)(v25 + v26 - 8)
                  + *(unsigned __int16 *)(v24 + v26 + 12)
                  + *(unsigned __int16 *)(v25 + v26)
                  + 2) >> 2;
            v28[1] = v29;
            v28 += 2;
          }
          *(_WORD *)(v23 + 2 * v27++) = *(_WORD *)(v24 + v26 + 2);
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if ((v18 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v19 = *a4;
    v20 = *a7 + *a8 * v11 + 2 * v10;
    v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        v22 = 0;
        v23 = v21;
        v24 = (_DWORD *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0)
            *v24++ = *(_DWORD *)(v23 - 2);
          *(_WORD *)(v20 + 2 * v22++) = *(_WORD *)(v23 - 4);
          v23 += 8;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if ((v15 & 1) != 0)
        v25 = 0;
      else
        v25 = v17;
      v18 += v25;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (unsigned __int16 *)(v24 + v26);
            v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            v31 = (unsigned __int16 *)(v25 + v26);
            v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            if (v32 >= 0xF000)
              v32 = 61440;
            if (v32 <= 0x1000)
              v32 = 4096;
            v33 = v29[3];
            v34 = *(v31 - 3);
            if (v33 >= 0xF000)
              v33 = 61440;
            if (v33 <= 0x1000)
              v33 = 4096;
            if (v34 >= 0xF000)
              v34 = 61440;
            if (v34 <= 0x1000)
              v34 = 4096;
            v35 = v29[6];
            v36 = *v31;
            if (v35 >= 0xF000)
              v35 = 61440;
            if (v35 <= 0x1000)
              v35 = 4096;
            if (v36 >= 0xF000)
              v36 = 61440;
            if (v36 <= 0x1000)
              v36 = 4096;
            v37 = v29[7];
            v38 = v31[1];
            if (v37 >= 0xF000)
              v37 = 61440;
            if (v37 <= 0x1000)
              v37 = 4096;
            v39 = -268431360 - v30 + (v30 << 16);
            if (v38 >= 0xF000)
              v38 = 61440;
            v40 = (613566757 * (unint64_t)(v39 >> 13)) >> 32;
            v41 = -268431360 - v33 + (v33 << 16);
            if (v38 <= 0x1000)
              v38 = 4096;
            *v28 = (v40
                                + ((613566757 * (unint64_t)((-268431360 - v32 + (v32 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v35 + (v35 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v36 + (v36 << 16)) >> 13)) >> 32)
                                + 2) >> 2;
            v28[1] = (((613566757 * (unint64_t)(v41 >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v34 + (v34 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v37 + (v37 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32)
                                  + 2) >> 2;
            v28 += 2;
          }
          v42 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v42 >= 0xEB00)
            v42 = 60160;
          if (v42 <= 0x1000)
            v42 = 4096;
          *(_WORD *)(v23 + 2 * v27++) = (-268431360 - v42 + (v42 << 16)) / 0xDB00;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if ((v18 & 1) != 0)
        v43 = 0;
      else
        v43 = v21;
      v22 += v43;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int16 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF000)
              v27 = 61440;
            if (v27 <= 0x1000)
              v27 = 4096;
            v28 = *v25;
            if (v28 >= 0xF000)
              v28 = 61440;
            if (v28 <= 0x1000)
              v28 = 4096;
            *v26 = (613566757 * (unint64_t)((-268431360 - v27 + (v27 << 16)) >> 13)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-268431360 - v28 + (v28 << 16)) >> 13)) >> 32;
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_WORD *)(v22 + 2 * v24++) = (-268431360 - v29 + (v29 << 16)) / 0xDB00;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y416_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i != v8; ++i)
        {
          v26 = (_WORD *)(v20 + v24);
          v27 = (_WORD *)(v23 + 2 * v24);
          *(_WORD *)(v21 + 2 * i) = *v27;
          v28 = v27[3] & 0xFFF0;
          *v26 = v27[2] & 0xFFF0;
          v26[1] = v28;
          *(_WORD *)(v22 + 2 * i) = v27[1] & 0xFFF0;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  _WORD *v24;
  __int16 v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = (_WORD *)v20;
        v23 = v8;
        do
        {
          v24 = (_WORD *)(v18 + 2 * v21);
          v25 = *v22 & 0xFFF0;
          *v24 = *(v22 - 1) & 0xFFF0;
          v24[1] = v25;
          *(_WORD *)(v19 + v21) = *(v22 - 2) & 0xFFF0;
          v21 += 2;
          v22 += 4;
          --v23;
        }
        while (v23);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 4 * v15;
    v17 = *a7 + *a8 * v14 + 2 * v15;
    v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = (unsigned __int16 *)v18;
        v21 = v8;
        do
        {
          v22 = (_WORD *)(v16 + 2 * v19);
          v23 = *(v20 - 1);
          if (v23 >= 0xF000)
            v23 = 61440;
          if (v23 <= 0x1000)
            v23 = 4096;
          v24 = *v20;
          if (v24 >= 0xF000)
            v24 = 61440;
          if (v24 <= 0x1000)
            v24 = 4096;
          *v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v23 + (v23 << 12)) >> 13)) >> 32);
          v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32);
          v25 = *(v20 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v17 + v19) = 16 * ((-16773120 - v25 + (v25 << 12)) / 0xDB00);
          v19 += 2;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  unsigned int v27;
  int v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = (_WORD *)v23;
        v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 6);
          if ((v24 & 1) == 0)
          {
            v27 = (unsigned __int16)*(v25 - 3);
            v28 = (unsigned __int16)v25[1] >> 4;
            *v26 = (8 * ((*v25 >> 4) + (*(v25 - 4) >> 4)) + 8) & 0xFFF0;
            v26[1] = (8 * (v28 + (v27 >> 4)) + 8) & 0xFFF0;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 5) & 0xFFF0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  __int16 v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = (_WORD *)v23;
        v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 3);
          if ((v24 & 1) == 0)
          {
            v27 = *v25 & 0xFFF0;
            *v26 = *(v25 - 1) & 0xFFF0;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) & 0xFFF0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  unsigned int v23;
  int v24;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (_WORD *)v19;
        v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = (unsigned __int16)*(v21 - 3);
            v24 = (unsigned __int16)v21[1] >> 4;
            *v22 = (8 * ((*v21 >> 4) + (*(v21 - 4) >> 4)) + 8) & 0xFFF0;
            v22[1] = (8 * (v24 + (v23 >> 4)) + 8) & 0xFFF0;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 5) & 0xFFF0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  __int16 v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (_WORD *)v19;
        v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *v21 & 0xFFF0;
            *v22 = *(v21 - 1) & 0xFFF0;
            v22[1] = v23;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 2) & 0xFFF0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 4);
            v24 = *v21;
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            v25 = *(v21 - 3);
            v26 = v21[1];
            if (v25 >= 0xF000)
              v25 = 61440;
            if (v25 <= 0x1000)
              v25 = 4096;
            if (v26 >= 0xF000)
              v26 = 61440;
            if (v26 <= 0x1000)
              v26 = 4096;
            *v22 = (8
                  * (((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v23 + (v23 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
            v22[1] = (8
                    * (((613566757 * (unint64_t)((-16773120 - v26 + (v26 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v25 + (v25 << 12)) >> 13)) >> 32))
                    + 8) & 0xFFF0;
            v22 += 2;
          }
          v27 = *(v21 - 5);
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          *(_WORD *)(v18 + 2 * v20++) = 16 * ((-16773120 - v27 + (v27 << 12)) / 0xDB00);
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 1);
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            v24 = *v21;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            *v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v23 + (v23 << 12)) >> 13)) >> 32);
            v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32);
            v22 += 2;
          }
          v25 = *(v21 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v18 + 2 * v20++) = 16 * ((-16773120 - v25 + (v25 << 12)) / 0xDB00);
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a4;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (*(unsigned __int16 *)(v25 + v26 - 6) >> 4)
                + (*(unsigned __int16 *)(v24 + v26 + 6) >> 4)
                + (*(unsigned __int16 *)(v24 + v26 + 14) >> 4)
                + (*(unsigned __int16 *)(v25 + v26 + 2) >> 4);
            *v28 = (4
                  * ((*(_WORD *)(v25 + v26 - 8) >> 4)
                   + (*(_WORD *)(v24 + v26 + 4) >> 4)
                   + (*(_WORD *)(v24 + v26 + 12) >> 4)
                   + (*(_WORD *)(v25 + v26) >> 4))
                  + 8) & 0xFFF0;
            v28[1] = (4 * v29 + 8) & 0xFFF0;
            v28 += 2;
          }
          *(_WORD *)(v23 + 2 * v27++) = *(_WORD *)(v24 + v26 + 2) & 0xFFF0;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if ((v18 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  uint64_t v26;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v19 = *a4;
    v20 = *a7 + *a8 * v11 + 2 * v10;
    v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        v22 = 0;
        v23 = (_WORD *)v21;
        v24 = (_WORD *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0)
          {
            v25 = *v23 & 0xFFF0;
            *v24 = *(v23 - 1) & 0xFFF0;
            v24[1] = v25;
            v24 += 2;
          }
          *(_WORD *)(v20 + 2 * v22++) = *(v23 - 2) & 0xFFF0;
          v23 += 4;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if ((v15 & 1) != 0)
        v26 = 0;
      else
        v26 = v17;
      v18 += v26;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (unsigned __int16 *)(v24 + v26);
            v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            v31 = (unsigned __int16 *)(v25 + v26);
            v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            if (v32 >= 0xF000)
              v32 = 61440;
            if (v32 <= 0x1000)
              v32 = 4096;
            v33 = v29[3];
            v34 = *(v31 - 3);
            if (v33 >= 0xF000)
              v33 = 61440;
            if (v33 <= 0x1000)
              v33 = 4096;
            if (v34 >= 0xF000)
              v34 = 61440;
            if (v34 <= 0x1000)
              v34 = 4096;
            v35 = v29[6];
            v36 = *v31;
            if (v35 >= 0xF000)
              v35 = 61440;
            if (v35 <= 0x1000)
              v35 = 4096;
            if (v36 >= 0xF000)
              v36 = 61440;
            if (v36 <= 0x1000)
              v36 = 4096;
            v37 = v29[7];
            v38 = v31[1];
            if (v37 >= 0xF000)
              v37 = 61440;
            if (v37 <= 0x1000)
              v37 = 4096;
            if (v38 >= 0xF000)
              v38 = 61440;
            v39 = (613566757 * (unint64_t)((-16773120 - v30 + (v30 << 12)) >> 13)) >> 32;
            if (v38 <= 0x1000)
              v38 = 4096;
            *v28 = (4
                  * (((613566757 * (unint64_t)((-16773120 - v32 + (v32 << 12)) >> 13)) >> 32)
                   + v39
                   + ((613566757 * (unint64_t)((-16773120 - v35 + (v35 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v36 + (v36 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
            v28[1] = (4
                    * (((613566757 * (unint64_t)((-16773120 - v34 + (v34 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v33 + (v33 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v37 + (v37 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32))
                    + 8) & 0xFFF0;
            v28 += 2;
          }
          v40 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v40 >= 0xEB00)
            v40 = 60160;
          if (v40 <= 0x1000)
            v40 = 4096;
          *(_WORD *)(v23 + 2 * v27++) = 16 * ((-16773120 - v40 + (v40 << 12)) / 0xDB00);
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if ((v18 & 1) != 0)
        v41 = 0;
      else
        v41 = v21;
      v22 += v41;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int16 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF000)
              v27 = 61440;
            if (v27 <= 0x1000)
              v27 = 4096;
            v28 = *v25;
            if (v28 >= 0xF000)
              v28 = 61440;
            if (v28 <= 0x1000)
              v28 = 4096;
            *v26 = 16 * ((613566757 * (unint64_t)((-16773120 - v27 + (v27 << 12)) >> 13)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v28 + (v28 << 12)) >> 13)) >> 32);
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_WORD *)(v22 + 2 * v24++) = 16 * ((-16773120 - v29 + (v29 << 12)) / 0xDB00);
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y416_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i != v8; ++i)
        {
          v26 = (_WORD *)(v20 + v24);
          v27 = (_WORD *)(v23 + 2 * v24);
          *(_WORD *)(v21 + 2 * i) = *v27;
          v28 = v27[3] & 0xFFC0;
          *v26 = v27[2] & 0xFFC0;
          v26[1] = v28;
          *(_WORD *)(v22 + 2 * i) = v27[1] & 0xFFC0;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  _WORD *v24;
  __int16 v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = (_WORD *)v20;
        v23 = v8;
        do
        {
          v24 = (_WORD *)(v18 + 2 * v21);
          v25 = *v22 & 0xFFC0;
          *v24 = *(v22 - 1) & 0xFFC0;
          v24[1] = v25;
          *(_WORD *)(v19 + v21) = *(v22 - 2) & 0xFFC0;
          v21 += 2;
          v22 += 4;
          --v23;
        }
        while (v23);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 4 * v15;
    v17 = *a7 + *a8 * v14 + 2 * v15;
    v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = (unsigned __int16 *)v18;
        v21 = v8;
        do
        {
          v22 = (_WORD *)(v16 + 2 * v19);
          v23 = *(v20 - 1);
          if (v23 >= 0xF000)
            v23 = 61440;
          if (v23 <= 0x1000)
            v23 = 4096;
          v24 = *v20;
          if (v24 >= 0xF000)
            v24 = 61440;
          if (v24 <= 0x1000)
            v24 = 4096;
          *v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v23 + (v23 << 10)) >> 13)) >> 32) << 6;
          v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32) << 6;
          v25 = *(v20 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v17 + v19) = (unsigned __int16)((-4190208 - v25 + (v25 << 10)) / 0xDB00) << 6;
          v19 += 2;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  unsigned int v27;
  int v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = (_WORD *)v23;
        v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 6);
          if ((v24 & 1) == 0)
          {
            v27 = (unsigned __int16)*(v25 - 3);
            v28 = (unsigned __int16)v25[1] >> 6;
            *v26 = (32 * ((*v25 >> 6) + (*(v25 - 4) >> 6)) + 32) & 0xFFC0;
            v26[1] = (32 * (v28 + (v27 >> 6)) + 32) & 0xFFC0;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 5) & 0xFFC0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  __int16 v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = (_WORD *)v23;
        v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 3);
          if ((v24 & 1) == 0)
          {
            v27 = *v25 & 0xFFC0;
            *v26 = *(v25 - 1) & 0xFFC0;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) & 0xFFC0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  unsigned int v23;
  int v24;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (_WORD *)v19;
        v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = (unsigned __int16)*(v21 - 3);
            v24 = (unsigned __int16)v21[1] >> 6;
            *v22 = (32 * ((*v21 >> 6) + (*(v21 - 4) >> 6)) + 32) & 0xFFC0;
            v22[1] = (32 * (v24 + (v23 >> 6)) + 32) & 0xFFC0;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 5) & 0xFFC0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  __int16 v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (_WORD *)v19;
        v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *v21 & 0xFFC0;
            *v22 = *(v21 - 1) & 0xFFC0;
            v22[1] = v23;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 2) & 0xFFC0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 4);
            v24 = *v21;
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            v25 = *(v21 - 3);
            v26 = v21[1];
            if (v25 >= 0xF000)
              v25 = 61440;
            if (v25 <= 0x1000)
              v25 = 4096;
            if (v26 >= 0xF000)
              v26 = 61440;
            if (v26 <= 0x1000)
              v26 = 4096;
            *v22 = (32
                  * (((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v23 + (v23 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
            v22[1] = (32
                    * (((613566757 * (unint64_t)((-4190208 - v26 + (v26 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v25 + (v25 << 10)) >> 13)) >> 32))
                    + 32) & 0xFFC0;
            v22 += 2;
          }
          v27 = *(v21 - 5);
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          *(_WORD *)(v18 + 2 * v20++) = (unsigned __int16)((-4190208 - v27 + (v27 << 10)) / 0xDB00) << 6;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 1);
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            v24 = *v21;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            *v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v23 + (v23 << 10)) >> 13)) >> 32) << 6;
            v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32) << 6;
            v22 += 2;
          }
          v25 = *(v21 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v18 + 2 * v20++) = (unsigned __int16)((-4190208 - v25 + (v25 << 10)) / 0xDB00) << 6;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a4;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (*(unsigned __int16 *)(v25 + v26 - 6) >> 6)
                + (*(unsigned __int16 *)(v24 + v26 + 6) >> 6)
                + (*(unsigned __int16 *)(v24 + v26 + 14) >> 6)
                + (*(unsigned __int16 *)(v25 + v26 + 2) >> 6);
            *v28 = (16
                  * ((*(_WORD *)(v25 + v26 - 8) >> 6)
                   + (*(_WORD *)(v24 + v26 + 4) >> 6)
                   + (*(_WORD *)(v24 + v26 + 12) >> 6)
                   + (*(_WORD *)(v25 + v26) >> 6))
                  + 32) & 0xFFC0;
            v28[1] = (16 * v29 + 32) & 0xFFC0;
            v28 += 2;
          }
          *(_WORD *)(v23 + 2 * v27++) = *(_WORD *)(v24 + v26 + 2) & 0xFFC0;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if ((v18 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  uint64_t v26;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v19 = *a4;
    v20 = *a7 + *a8 * v11 + 2 * v10;
    v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        v22 = 0;
        v23 = (_WORD *)v21;
        v24 = (_WORD *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0)
          {
            v25 = *v23 & 0xFFC0;
            *v24 = *(v23 - 1) & 0xFFC0;
            v24[1] = v25;
            v24 += 2;
          }
          *(_WORD *)(v20 + 2 * v22++) = *(v23 - 2) & 0xFFC0;
          v23 += 4;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if ((v15 & 1) != 0)
        v26 = 0;
      else
        v26 = v17;
      v18 += v26;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (unsigned __int16 *)(v24 + v26);
            v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            v31 = (unsigned __int16 *)(v25 + v26);
            v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            if (v32 >= 0xF000)
              v32 = 61440;
            if (v32 <= 0x1000)
              v32 = 4096;
            v33 = v29[3];
            v34 = *(v31 - 3);
            if (v33 >= 0xF000)
              v33 = 61440;
            if (v33 <= 0x1000)
              v33 = 4096;
            if (v34 >= 0xF000)
              v34 = 61440;
            if (v34 <= 0x1000)
              v34 = 4096;
            v35 = v29[6];
            v36 = *v31;
            if (v35 >= 0xF000)
              v35 = 61440;
            if (v35 <= 0x1000)
              v35 = 4096;
            if (v36 >= 0xF000)
              v36 = 61440;
            if (v36 <= 0x1000)
              v36 = 4096;
            v37 = v29[7];
            v38 = v31[1];
            if (v37 >= 0xF000)
              v37 = 61440;
            if (v37 <= 0x1000)
              v37 = 4096;
            if (v38 >= 0xF000)
              v38 = 61440;
            v39 = (613566757 * (unint64_t)((-4190208 - v30 + (v30 << 10)) >> 13)) >> 32;
            if (v38 <= 0x1000)
              v38 = 4096;
            *v28 = (16
                  * (((613566757 * (unint64_t)((-4190208 - v32 + (v32 << 10)) >> 13)) >> 32)
                   + v39
                   + ((613566757 * (unint64_t)((-4190208 - v35 + (v35 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v36 + (v36 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
            v28[1] = (16
                    * (((613566757 * (unint64_t)((-4190208 - v34 + (v34 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v33 + (v33 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v37 + (v37 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32))
                    + 32) & 0xFFC0;
            v28 += 2;
          }
          v40 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v40 >= 0xEB00)
            v40 = 60160;
          if (v40 <= 0x1000)
            v40 = 4096;
          *(_WORD *)(v23 + 2 * v27++) = (unsigned __int16)((-4190208 - v40 + (v40 << 10)) / 0xDB00) << 6;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if ((v18 & 1) != 0)
        v41 = 0;
      else
        v41 = v21;
      v22 += v41;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int16 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF000)
              v27 = 61440;
            if (v27 <= 0x1000)
              v27 = 4096;
            v28 = *v25;
            if (v28 >= 0xF000)
              v28 = 61440;
            if (v28 <= 0x1000)
              v28 = 4096;
            *v26 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v27 + (v27 << 10)) >> 13)) >> 32) << 6;
            v26[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v28 + (v28 << 10)) >> 13)) >> 32) << 6;
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_WORD *)(v22 + 2 * v24++) = (unsigned __int16)((-4190208 - v29 + (v29 << 10)) / 0xDB00) << 6;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y416_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  _BYTE *v27;
  char v28;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 2 * v15;
    v21 = v17 + v15;
    v22 = v18 + v15;
    v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        v24 = 0;
        v25 = 0;
        for (i = 0; i != v8; ++i)
        {
          *(_BYTE *)(v21 + i) = *(_WORD *)(v23 + v24);
          v27 = (_BYTE *)(v20 + v25);
          v28 = *(_BYTE *)(v23 + v24 + 7);
          *v27 = *(_BYTE *)(v23 + v24 + 5);
          v27[1] = v28;
          *(_BYTE *)(v22 + i) = *(_BYTE *)(v23 + v24 + 3);
          v25 += 2;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 2 * v14;
    v19 = v16 + v14;
    v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = 0;
        v23 = v20;
        do
        {
          v24 = (_BYTE *)(v18 + v21);
          v25 = *(_BYTE *)(v23 + 1);
          *v24 = *(_BYTE *)(v23 - 1);
          v24[1] = v25;
          *(_BYTE *)(v19 + v22++) = *(_BYTE *)(v23 - 3);
          v21 += 2;
          v23 += 8;
        }
        while (v8 != v22);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 2 * v15;
    v17 = *a7 + *a8 * v14 + v15;
    v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = 0;
        v21 = (unsigned __int16 *)v18;
        do
        {
          v22 = (_BYTE *)(v16 + v19);
          v23 = *(v21 - 1);
          if (v23 >= 0xF000)
            v23 = 61440;
          if (v23 <= 0x1000)
            v23 = 4096;
          v24 = *v21;
          if (v24 >= 0xF000)
            v24 = 61440;
          if (v24 <= 0x1000)
            v24 = 4096;
          *v22 = (613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32;
          v22[1] = (613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32;
          v25 = *(v21 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_BYTE *)(v17 + v20++) = (-1044480 - v25 + (v25 << 8)) / 0xDB00;
          v19 += 2;
          v21 += 4;
        }
        while (v8 != v20);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + v10;
    v22 = v19 + v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = v23;
        v26 = (_BYTE *)v16;
        do
        {
          *(_BYTE *)(v21 + v24) = *(_WORD *)(v25 - 12);
          if ((v24 & 1) == 0)
          {
            v27 = (*(unsigned __int8 *)(v25 - 5) + *(unsigned __int8 *)(v25 + 3) + 1) >> 1;
            *v26 = (*(unsigned __int8 *)(v25 - 7) + *(unsigned __int8 *)(v25 + 1) + 1) >> 1;
            v26[1] = v27;
            v26 += 2;
          }
          *(_BYTE *)(v22 + v24++) = *(_BYTE *)(v25 - 9);
          v25 += 8;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  char v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + v10;
    v22 = v19 + v10;
    v23 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v24 = 0;
        v25 = v23;
        v26 = (_BYTE *)v16;
        do
        {
          *(_BYTE *)(v21 + v24) = *(_WORD *)(v25 - 6);
          if ((v24 & 1) == 0)
          {
            v27 = *(_BYTE *)(v25 + 1);
            *v26 = *(_BYTE *)(v25 - 1);
            v26[1] = v27;
            v26 += 2;
          }
          *(_BYTE *)(v22 + v24++) = *(_BYTE *)(v25 - 3);
          v25 += 8;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = v19;
        v22 = (_BYTE *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = (*(unsigned __int8 *)(v21 - 5) + *(unsigned __int8 *)(v21 + 3) + 1) >> 1;
            *v22 = (*(unsigned __int8 *)(v21 - 7) + *(unsigned __int8 *)(v21 + 1) + 1) >> 1;
            v22[1] = v23;
            v22 += 2;
          }
          *(_BYTE *)(v18 + v20++) = *(_BYTE *)(v21 - 9);
          v21 += 8;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = v19;
        v22 = (_BYTE *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(_BYTE *)(v21 + 1);
            *v22 = *(_BYTE *)(v21 - 1);
            v22[1] = v23;
            v22 += 2;
          }
          *(_BYTE *)(v18 + v20++) = *(_BYTE *)(v21 - 3);
          v21 += 8;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_BYTE *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 4);
            v24 = *v21;
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            v25 = *(v21 - 3);
            v26 = v21[1];
            if (v25 >= 0xF000)
              v25 = 61440;
            if (v25 <= 0x1000)
              v25 = 4096;
            if (v26 >= 0xF000)
              v26 = 61440;
            if (v26 <= 0x1000)
              v26 = 4096;
            *v22 = (((613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
            v22[1] = (((613566757 * (unint64_t)((-1044480 - v25 + (v25 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v26 + (v26 << 8)) >> 13)) >> 32)
                                  + 1) >> 1;
            v22 += 2;
          }
          v27 = *(v21 - 5);
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          *(_BYTE *)(v18 + v20++) = (-1044480 - v27 + (v27 << 8)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + v10;
    v19 = *a4 * *(_QWORD *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)v19;
        v22 = (_BYTE *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v23 = *(v21 - 1);
            if (v23 >= 0xF000)
              v23 = 61440;
            if (v23 <= 0x1000)
              v23 = 4096;
            v24 = *v21;
            if (v24 >= 0xF000)
              v24 = 61440;
            if (v24 <= 0x1000)
              v24 = 4096;
            *v22 = (613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32;
            v22[1] = (613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32;
            v22 += 2;
          }
          v25 = *(v21 - 2);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_BYTE *)(v18 + v20++) = (-1044480 - v25 + (v25 << 8)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (v8 & 1) + v8;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v14 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v14 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (v15 >= v13 - v12)
    v15 = v13 - v12;
  if (v15)
  {
    v16 = 0;
    v17 = *a8;
    v18 = a8[1];
    v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    v20 = a8[2];
    v21 = a7[2] + v20 * v12;
    v22 = *a7 + *a8 * v12;
    v23 = *a4;
    v24 = v21 + v11;
    v25 = v22 + v11;
    v26 = *a3 + *a4 * v10 + 2 * v9;
    v27 = v23 + v23 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v14)
      {
        v28 = 0;
        v29 = 0;
        v30 = (_BYTE *)v19;
        do
        {
          v31 = (_BYTE *)(v26 + v28);
          *(_BYTE *)(v24 + v29) = *(_WORD *)(v26 + v28);
          if (((v29 | v16) & 1) == 0)
          {
            v32 = (v31[7]
                 + *(unsigned __int8 *)(v27 + v28 - 5)
                 + v31[15]
                 + *(unsigned __int8 *)(v27 + v28 + 3)
                 + 2) >> 2;
            *v30 = (v31[5]
                  + *(unsigned __int8 *)(v27 + v28 - 7)
                  + v31[13]
                  + *(unsigned __int8 *)(v27 + v28 + 1)
                  + 2) >> 2;
            v30[1] = v32;
            v30 += 2;
          }
          *(_BYTE *)(v25 + v29++) = v31[3];
          v28 += 8;
        }
        while (v14 != v29);
      }
      v26 += v23;
      v25 += v17;
      if ((v16 & 1) != 0)
        v33 = 0;
      else
        v33 = v18;
      v19 += v33;
      v24 += v20;
      ++v16;
      v27 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char v29;
  uint64_t v30;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v19 = a8[2];
    v20 = a7[2] + v19 * v11;
    v21 = *a7 + *a8 * v11;
    v22 = *a4;
    v23 = v20 + v10;
    v24 = v21 + v10;
    v25 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        v26 = 0;
        v27 = v25;
        v28 = (_BYTE *)v18;
        do
        {
          *(_BYTE *)(v23 + v26) = *(_WORD *)(v27 - 6);
          if (((v26 | v15) & 1) == 0)
          {
            v29 = *(_BYTE *)(v27 + 1);
            *v28 = *(_BYTE *)(v27 - 1);
            v28[1] = v29;
            v28 += 2;
          }
          *(_BYTE *)(v24 + v26++) = *(_BYTE *)(v27 - 3);
          v27 += 8;
        }
        while (v13 != v26);
      }
      v24 += v16;
      if ((v15 & 1) != 0)
        v30 = 0;
      else
        v30 = v17;
      v18 += v30;
      v23 += v19;
      ++v15;
      v25 += v22;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 & 0x7FFFFFFFFFFFFFFFLL);
    v22 = *a4;
    v23 = *a7 + *a8 * v14 + v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_BYTE *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (*(unsigned __int8 *)(v24 + v26 + 7)
                 + *(unsigned __int8 *)(v25 + v26 - 5)
                 + *(unsigned __int8 *)(v24 + v26 + 15)
                 + *(unsigned __int8 *)(v25 + v26 + 3)
                 + 2) >> 2;
            *v28 = (*(unsigned __int8 *)(v24 + v26 + 5)
                  + *(unsigned __int8 *)(v25 + v26 - 7)
                  + *(unsigned __int8 *)(v24 + v26 + 13)
                  + *(unsigned __int8 *)(v25 + v26 + 1)
                  + 2) >> 2;
            v28[1] = v29;
            v28 += 2;
          }
          *(_BYTE *)(v23 + v27++) = *(_BYTE *)(v24 + v26 + 3);
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if ((v18 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v19 = *a4;
    v20 = *a7 + *a8 * v11 + v10;
    v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        v22 = 0;
        v23 = v21;
        v24 = (_BYTE *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0)
          {
            v25 = *(_BYTE *)(v23 + 1);
            *v24 = *(_BYTE *)(v23 - 1);
            v24[1] = v25;
            v24 += 2;
          }
          *(_BYTE *)(v20 + v22++) = *(_BYTE *)(v23 - 3);
          v23 += 8;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if ((v15 & 1) != 0)
        v26 = 0;
      else
        v26 = v17;
      v18 += v26;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + (v13 & 0x7FFFFFFFFFFFFFFFLL);
    v23 = *a7 + *a8 * v14 + v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_BYTE *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            v29 = (unsigned __int16 *)(v24 + v26);
            v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            v31 = (unsigned __int16 *)(v25 + v26);
            v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            if (v32 >= 0xF000)
              v32 = 61440;
            if (v32 <= 0x1000)
              v32 = 4096;
            v33 = v29[3];
            v34 = *(v31 - 3);
            if (v33 >= 0xF000)
              v33 = 61440;
            if (v33 <= 0x1000)
              v33 = 4096;
            if (v34 >= 0xF000)
              v34 = 61440;
            if (v34 <= 0x1000)
              v34 = 4096;
            v35 = v29[6];
            v36 = *v31;
            if (v35 >= 0xF000)
              v35 = 61440;
            if (v35 <= 0x1000)
              v35 = 4096;
            if (v36 >= 0xF000)
              v36 = 61440;
            if (v36 <= 0x1000)
              v36 = 4096;
            v37 = v29[7];
            v38 = v31[1];
            if (v37 >= 0xF000)
              v37 = 61440;
            if (v37 <= 0x1000)
              v37 = 4096;
            v39 = -1044480 - v30 + (v30 << 8);
            if (v38 >= 0xF000)
              v38 = 61440;
            v40 = (613566757 * (unint64_t)(v39 >> 13)) >> 32;
            v41 = -1044480 - v33 + (v33 << 8);
            if (v38 <= 0x1000)
              v38 = 4096;
            *v28 = (v40
                                + ((613566757 * (unint64_t)((-1044480 - v32 + (v32 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v36 + (v36 << 8)) >> 13)) >> 32)
                                + 2) >> 2;
            v28[1] = (((613566757 * (unint64_t)(v41 >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v34 + (v34 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v38 + (v38 << 8)) >> 13)) >> 32)
                                  + 2) >> 2;
            v28 += 2;
          }
          v42 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v42 >= 0xEB00)
            v42 = 60160;
          if (v42 <= 0x1000)
            v42 = 4096;
          *(_BYTE *)(v23 + v27++) = (-1044480 - v42 + (v42 << 8)) / 0xDB00;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if ((v18 & 1) != 0)
        v43 = 0;
      else
        v43 = v21;
      v22 += v43;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + v12;
    v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int16 *)v23;
        v26 = (_BYTE *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF000)
              v27 = 61440;
            if (v27 <= 0x1000)
              v27 = 4096;
            v28 = *v25;
            if (v28 >= 0xF000)
              v28 = 61440;
            if (v28 <= 0x1000)
              v28 = 4096;
            *v26 = (613566757 * (unint64_t)((-1044480 - v27 + (v27 << 8)) >> 13)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-1044480 - v28 + (v28 << 8)) >> 13)) >> 32;
            v26 += 2;
          }
          v29 = *(v25 - 2);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_BYTE *)(v22 + v24++) = (-1044480 - v29 + (v29 << 8)) / 0xDB00;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v20;
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a8[2];
    v22 = *a4;
    v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    v24 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 >> 1));
    v25 = *a7 + *a8 * v14 + v13;
    v26 = *a3 + *a4 * v11 + 2 * v9;
    v27 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        v28 = 0;
        v29 = 0;
        v30 = v23;
        v31 = v24;
        do
        {
          if (((v29 | v18) & 1) == 0)
          {
            v32 = (*(unsigned __int8 *)(v26 + v28 + 7)
                 + *(unsigned __int8 *)(v27 + v28 - 5)
                 + *(unsigned __int8 *)(v26 + v28 + 15)
                 + *(unsigned __int8 *)(v27 + v28 + 3)
                 + 2) >> 2;
            *v31++ = (*(unsigned __int8 *)(v26 + v28 + 5)
                    + *(unsigned __int8 *)(v27 + v28 - 7)
                    + *(unsigned __int8 *)(v26 + v28 + 13)
                    + *(unsigned __int8 *)(v27 + v28 + 1)
                    + 2) >> 2;
            *v30++ = v32;
          }
          *(_BYTE *)(v25 + v29++) = *(_BYTE *)(v26 + v28 + 3);
          v28 += 8;
        }
        while (v16 != v29);
      }
      v26 += v22;
      v25 += v19;
      if ((v18 & 1) != 0)
        v33 = 0;
      else
        v33 = v20;
      v24 += v33;
      if ((v18 & 1) != 0)
        v34 = 0;
      else
        v34 = v21;
      v23 += v34;
      ++v18;
      v27 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a8[2];
    v21 = *a4;
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    v24 = *a7 + *a8 * v13 + v12;
    v25 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        v26 = 0;
        v27 = v25;
        v28 = v22;
        v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            v30 = *(_BYTE *)(v27 + 1);
            *v29++ = *(_BYTE *)(v27 - 1);
            *v28++ = v30;
          }
          *(_BYTE *)(v24 + v26++) = *(_BYTE *)(v27 - 3);
          v27 += 8;
        }
        while (v15 != v26);
      }
      v24 += v18;
      if ((v17 & 1) != 0)
        v31 = 0;
      else
        v31 = v19;
      v23 += v31;
      if ((v17 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v22 += v32;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint16x4_t v34;
  uint32x4_t v35;
  uint16x4_t v36;
  uint32x4_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a8[2];
    v22 = *a4;
    v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    v24 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 >> 1));
    v25 = *a7 + *a8 * v14 + v13;
    v26 = *a3 + *a4 * v11 + 2 * v9;
    v27 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    v28 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
    v29 = (uint32x4_t)vdupq_n_s32(0x24924925u);
    do
    {
      if (v16)
      {
        v30 = 0;
        v31 = 0;
        v32 = v23;
        v33 = v24;
        do
        {
          if (((v31 | v18) & 1) == 0)
          {
            v34.i16[0] = *(_WORD *)(v26 + v30 + 4);
            v34.i16[1] = *(_WORD *)(v27 + v30 - 8);
            v34.i16[2] = *(_WORD *)(v26 + v30 + 12);
            v34.i16[3] = *(_WORD *)(v27 + v30);
            v35 = vshrq_n_u32(vmlal_u16(v28, vmax_u16(vmin_u16(v34, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
            v36.i16[0] = *(_WORD *)(v26 + v30 + 6);
            v36.i16[1] = *(_WORD *)(v27 + v30 - 6);
            v36.i16[2] = *(_WORD *)(v26 + v30 + 14);
            v36.i16[3] = *(_WORD *)(v27 + v30 + 2);
            v37 = vshrq_n_u32(vmlal_u16(v28, vmax_u16(vmin_u16(v36, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
            *v33++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v35.i8, *(uint32x2_t *)v29.i8), (int32x4_t)vmull_high_u32(v35, v29)))+ 2) >> 2;
            *v32++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v37.i8, *(uint32x2_t *)v29.i8), (int32x4_t)vmull_high_u32(v37, v29)))+ 2) >> 2;
          }
          v38 = *(unsigned __int16 *)(v26 + v30 + 2);
          if (v38 >= 0xEB00)
            v38 = 60160;
          if (v38 <= 0x1000)
            v38 = 4096;
          *(_BYTE *)(v25 + v31++) = (255 * v38 - 1044480) / 0xDB00;
          v30 += 8;
        }
        while (v16 != v31);
      }
      v26 += v22;
      v25 += v19;
      if ((v18 & 1) != 0)
        v39 = 0;
      else
        v39 = v20;
      v24 += v39;
      if ((v18 & 1) != 0)
        v40 = 0;
      else
        v40 = v21;
      v23 += v40;
      ++v18;
      v27 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a8[2];
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v13) >> 1) + (v12 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    v24 = *a7 + *a8 * v13 + v12;
    v25 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        v26 = 0;
        v27 = (unsigned __int16 *)v25;
        v28 = v22;
        v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            v30 = *(v27 - 1);
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            v31 = *v27;
            if (v31 >= 0xF000)
              v31 = 61440;
            if (v31 <= 0x1000)
              v31 = 4096;
            *v29++ = (613566757 * (unint64_t)((-1044480 - v30 + (v30 << 8)) >> 13)) >> 32;
            *v28++ = (613566757 * (unint64_t)((-1044480 - v31 + (v31 << 8)) >> 13)) >> 32;
          }
          v32 = *(v27 - 2);
          if (v32 >= 0xEB00)
            v32 = 60160;
          if (v32 <= 0x1000)
            v32 = 4096;
          *(_BYTE *)(v24 + v26++) = (-1044480 - v32 + (v32 << 8)) / 0xDB00;
          v27 += 4;
        }
        while (v15 != v26);
      }
      v24 += v19;
      if ((v17 & 1) != 0)
        v33 = 0;
      else
        v33 = v20;
      v23 += v33;
      if ((v17 & 1) != 0)
        v34 = 0;
      else
        v34 = v21;
      v22 += v34;
      ++v17;
      v25 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _WORD *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint32x2_t v43;
  unsigned int v44;
  unsigned int v45;
  _OWORD v47[2];
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[48];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  *(_OWORD *)&v54[32] = 0u;
  *(_OWORD *)&v54[16] = 0u;
  *(_OWORD *)v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  memset(v47, 0, sizeof(v47));
  v9 = a2[2];
  v10 = a2[3];
  v48[0] = vdupq_n_s64(1uLL);
  v48[1] = xmmword_1928DFC30;
  v49 = 1;
  *(_OWORD *)&v54[8] = v48[0];
  *(_OWORD *)&v54[24] = xmmword_1928DFC50;
  v73 = 0;
  *(_QWORD *)&v54[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v48, a8, a7, v47);
  if (v10 >= 2)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = v10 >> 1;
    v21 = v9 >> 1;
    v22 = (_BYTE *)*((_QWORD *)&v47[0] + 1);
    v23 = *(_BYTE **)&v47[0];
    v24 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    v25 = v13 + v24 + v14 * v11;
    v26 = 2 * *a8;
    v27 = v14 + v24;
    v28 = 2 * v14;
    if (v9 >> 1 <= 1)
      v21 = 1;
    v29 = v13 + v27 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v30 = 0;
        v31 = v21;
        v32 = v22;
        v33 = v23;
        do
        {
          v34 = &v33[v18];
          v35 = (_WORD *)(v29 + v30);
          v36 = (_WORD *)(v25 + v30);
          v37 = *(unsigned __int16 *)(v29 + v30) + *(unsigned __int16 *)(v25 + v30);
          v38 = v37 >> 1;
          if (v37 >> 1 >= 0xF000)
            v38 = 61440;
          v39 = v38 + 128;
          v40 = (unsigned __int16)v35[2] + (unsigned __int16)v36[2];
          v41 = v40 >> 1;
          if (v40 >> 1 >= 0xF000)
            v41 = 61440;
          v42 = v41 + 128;
          v15.i16[0] = v36[1];
          v15.i16[2] = v36[3];
          v43 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v15, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v16.i16[0] = v35[1];
          v16.i16[2] = v35[3];
          v33[1] = v43.i8[4];
          *v33 = v43.i8[0];
          v33 += 2;
          v15 = (int8x8_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v16, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v34[1] = v15.i8[4];
          *v34 = v15.i8[0];
          v44 = v39 >> 8;
          if (v37 < 0x2000)
            LOBYTE(v44) = 16;
          v45 = v42 >> 8;
          if (v40 < 0x2000)
            LOBYTE(v45) = 16;
          *v32 = v44;
          v32[1] = v45;
          v32 += 2;
          v30 += 8;
          --v31;
        }
        while (v31);
      }
      v23 += v26;
      v22 += v19;
      v25 += v28;
      ++v17;
      v29 += v28;
    }
    while (v17 != v20);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  uint32x2_t v35;
  uint32x2_t v36;
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  *(_OWORD *)&v45[32] = 0u;
  *(_OWORD *)&v45[16] = 0u;
  *(_OWORD *)v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  memset(v38, 0, sizeof(v38));
  v9 = a2[2];
  v10 = a2[3];
  v39[0] = vdupq_n_s64(1uLL);
  v39[1] = xmmword_1928DFC30;
  v40 = 1;
  *(_OWORD *)&v45[8] = v39[0];
  *(_OWORD *)&v45[24] = xmmword_1928DFC50;
  v64 = 0;
  *(_QWORD *)&v45[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v39, a8, a7, v38);
  if (v10 >= 2)
  {
    v18 = 0;
    v19 = a8[1];
    v20 = v9 >> 1;
    v21 = *((_QWORD *)&v38[0] + 1);
    v22 = *(_QWORD *)&v38[0];
    v23 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    v24 = v13 + v23 + v14 * v11;
    v25 = 2 * *a8;
    v26 = v14 + v23;
    v27 = 2 * v14;
    if (v9 >> 1 <= 1)
      v20 = 1;
    v28 = v26 + v13 + v14 * v11 + 6;
    v29 = *(_QWORD *)&v38[0] + *a8;
    do
    {
      if (v9 >= 2)
      {
        v30 = 0;
        v31 = 0;
        do
        {
          v32 = (_BYTE *)(v22 + 2 * v31);
          v33 = (_BYTE *)(v29 + 2 * v31);
          v34 = (_BYTE *)(v21 + 2 * v31);
          v15.i16[0] = *(_WORD *)(v24 + v30 + 2);
          v15.i16[2] = *(_WORD *)(v24 + v30 + 6);
          v35 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v15, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v16.i16[0] = *(_WORD *)(v28 + v30 - 4);
          v16.i16[2] = *(_WORD *)(v28 + v30);
          v17.i16[0] = *(_WORD *)(v24 + v30);
          v17.i16[2] = *(_WORD *)(v24 + v30 + 4);
          v32[1] = v35.i8[4];
          *v32 = v35.i8[0];
          v36 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v16, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v33[1] = v36.i8[4];
          *v33 = v36.i8[0];
          v15 = (int8x8_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v17, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0x8000000080), 8uLL);
          v34[1] = v15.i8[4];
          *v34 = v15.i8[0];
          ++v31;
          v30 += 8;
        }
        while (v20 != v31);
      }
      v22 += v25;
      v21 += v19;
      v24 += v27;
      ++v18;
      v28 += v27;
      v29 += v25;
    }
    while (v18 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned __int16 *v29;
  _BYTE *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _OWORD v48[2];
  _OWORD v49[2];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[48];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  *(_OWORD *)&v55[32] = 0u;
  *(_OWORD *)&v55[16] = 0u;
  *(_OWORD *)v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  memset(v48, 0, sizeof(v48));
  v9 = a2[3];
  v47 = a2[2];
  v49[0] = vdupq_n_s64(1uLL);
  v49[1] = xmmword_1928DFC30;
  v50 = 1;
  *(_OWORD *)&v55[8] = v49[0];
  *(_OWORD *)&v55[24] = xmmword_1928DFC50;
  v74 = 0;
  *(_QWORD *)&v55[40] = 2;
  v11 = a2[4];
  v10 = a2[5];
  v12 = *a3;
  v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v49, a8, a7, v48);
  if (v9 >= 2)
  {
    v14 = 0;
    v45 = v9 >> 1;
    v46 = a8[1];
    v15 = *(_QWORD *)&v48[0];
    v16 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    v17 = *((_QWORD *)&v48[0] + 1);
    v18 = v12 + v16 + v13 * v10;
    v19 = 2 * *a8;
    v20 = 2 * v13;
    if (v47 >> 1 <= 1)
      v21 = 1;
    else
      v21 = v47 >> 1;
    v44 = v21;
    v22 = *a8 + *(_QWORD *)&v48[0] + 1;
    v23 = v12 + v13 + v16 + v13 * v10;
    do
    {
      if (v47 >= 2)
      {
        v24 = 0;
        v25 = 0;
        v26 = v44;
        do
        {
          v27 = (_BYTE *)(v15 + v25);
          v28 = (_BYTE *)(v22 + v25);
          v29 = (unsigned __int16 *)(v23 + v24);
          v30 = (_BYTE *)(v17 + v25);
          v31 = (unsigned __int16 *)(v18 + v24);
          v32 = *(unsigned __int16 *)(v23 + v24) + *(unsigned __int16 *)(v18 + v24);
          if (v32 >> 1 >= 0xF000)
            v33 = 61440;
          else
            v33 = v32 >> 1;
          v34 = v31[1];
          if (v34 >= 0xEB00)
            v34 = 60160;
          if (v34 <= 0x1000)
            v35 = 4096;
          else
            v35 = v34;
          v36 = v29[2] + v31[2];
          v37 = v36 >> 1;
          if (v36 >> 1 >= 0xF000)
            v37 = 61440;
          v38 = v31[3];
          if (v38 >= 0xEB00)
            v38 = 60160;
          if (v38 <= 0x1000)
            v38 = 4096;
          v39 = v29[1];
          if (v39 >= 0xEB00)
            v39 = 60160;
          if (v39 <= 0x1000)
            v39 = 4096;
          v40 = v29[3];
          if (v40 >= 0xEB00)
            v40 = 60160;
          if (v40 <= 0x1000)
            v40 = 4096;
          *v27 = (-1016685 - v35 + (v35 << 8)) / 0xDB00u;
          v27[1] = (-1016685 - v38 + (v38 << 8)) / 0xDB00;
          *(v28 - 1) = (-1016685 - v39 + (v39 << 8)) / 0xDB00;
          *v28 = (-1016685 - v40 + (v40 << 8)) / 0xDB00;
          v41 = (613566757 * (unint64_t)((-1015920 - v33 + (v33 << 8)) >> 13)) >> 32;
          if (v32 < 0x2000)
            LOBYTE(v41) = 0;
          *v30 = v41;
          v42 = (613566757 * (unint64_t)((-1015920 - v37 + (v37 << 8)) >> 13)) >> 32;
          if (v36 < 0x2000)
            LOBYTE(v42) = 0;
          v30[1] = v42;
          v25 += 2;
          v24 += 8;
          --v26;
        }
        while (v26);
      }
      v15 += v19;
      v17 += v46;
      v18 += v20;
      ++v14;
      v22 += v19;
      v23 += v20;
    }
    while (v14 != v45);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unsigned __int16 *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v42;
  unint64_t v43;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  memset(v44, 0, sizeof(v44));
  v9 = a2[3];
  v43 = a2[2];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_1928DFC30;
  v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_1928DFC50;
  v70 = 0;
  *(_QWORD *)&v51[40] = 2;
  v11 = a2[4];
  v10 = a2[5];
  v12 = *a3;
  v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v9 >= 2)
  {
    v14 = 0;
    v15 = a8[1];
    v16 = v9 >> 1;
    v17 = *(_QWORD *)&v44[0];
    v18 = v43 >> 1;
    v19 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    v20 = *((_QWORD *)&v44[0] + 1);
    v21 = v12 + v19 + v13 * v10;
    v22 = 2 * *a8;
    v23 = 2 * v13;
    if (v43 >> 1 <= 1)
      v18 = 1;
    v42 = v18;
    v24 = v13 + v19 + v12 + v13 * v10 + 6;
    v25 = *a8 + *(_QWORD *)&v44[0] + 1;
    do
    {
      if (v43 >= 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = v42;
        do
        {
          v29 = (_BYTE *)(v17 + v26);
          v30 = (unsigned __int16 *)(v21 + v27);
          v31 = (_BYTE *)(v25 + v26);
          v32 = *(unsigned __int16 *)(v21 + v27);
          if (v32 >= 0xF000)
            v32 = 61440;
          v33 = v30[1];
          if (v32 <= 0x1000)
            v32 = 4096;
          if (v33 >= 0xEB00)
            v33 = 60160;
          if (v33 <= 0x1000)
            v33 = 4096;
          v34 = v30[2];
          if (v34 >= 0xF000)
            v34 = 61440;
          if (v34 <= 0x1000)
            v34 = 4096;
          v35 = v30[3];
          if (v35 >= 0xEB00)
            v35 = 60160;
          if (v35 <= 0x1000)
            v35 = 4096;
          v36 = *(unsigned __int16 *)(v24 + v27 - 4);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          v37 = *(unsigned __int16 *)(v24 + v27);
          if (v37 >= 0xEB00)
            v37 = 60160;
          v38 = (_BYTE *)(v20 + v26);
          *v29 = (-1016685 - v33 + (v33 << 8)) / 0xDB00;
          v39 = 19611723 * ((-1016685 - v35 + (v35 << 8)) >> 8);
          if (v37 <= 0x1000)
            v40 = 4096;
          else
            v40 = v37;
          v29[1] = BYTE4(v39);
          *(v31 - 1) = (-1016685 - v36 + (v36 << 8)) / 0xDB00;
          *v31 = (-1016685 - v40 + (v40 << 8)) / 0xDB00u;
          *v38 = (613566757 * (unint64_t)((-1015920 - v32 + (v32 << 8)) >> 13)) >> 32;
          v38[1] = (613566757 * (unint64_t)((-1015920 - v34 + (v34 << 8)) >> 13)) >> 32;
          v27 += 8;
          v26 += 2;
          --v28;
        }
        while (v28);
      }
      v17 += v22;
      v20 += v15;
      v21 += v23;
      ++v14;
      v24 += v23;
      v25 += v22;
    }
    while (v14 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_x420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _WORD *v31;
  unsigned __int16 *v32;
  __int16 *v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  __int16 v43;
  __int16 v44;
  _OWORD v46[2];
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[48];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  *(_OWORD *)&v53[32] = 0u;
  *(_OWORD *)&v53[16] = 0u;
  *(_OWORD *)v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v46, 0, sizeof(v46));
  v9 = a2[2];
  v10 = a2[3];
  v47[0] = vdupq_n_s64(1uLL);
  v47[1] = xmmword_1928DFD10;
  v48 = 1;
  *(_OWORD *)&v53[8] = v47[0];
  *(_OWORD *)&v53[24] = xmmword_1928DFD20;
  v72 = 0;
  *(_QWORD *)&v53[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v47, a8, a7, v46);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v46[0] + 1);
    v22 = *(_QWORD *)&v46[0];
    v23 = 2 * *a8;
    v24 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v25 = *a8 + *(_QWORD *)&v46[0] + 2;
    v26 = v13 + v14 + v19 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v27 = 0;
        v28 = 0;
        v29 = v18;
        do
        {
          v30 = (_WORD *)(v22 + v28);
          v31 = (_WORD *)(v25 + v28);
          v32 = (unsigned __int16 *)(v26 + v27);
          v33 = (__int16 *)(v21 + v28);
          v34 = (unsigned __int16 *)(v20 + v27);
          v35 = *(unsigned __int16 *)(v26 + v27) + *(unsigned __int16 *)(v20 + v27);
          v36 = v35 >> 1;
          if (v35 >> 1 >= 0xF000)
            LOWORD(v36) = -4096;
          v37 = v34[1];
          if (v37 >= 0xEB00)
            v37 = 60160;
          if (v37 <= 0x1000)
            LOWORD(v37) = 4096;
          v38 = v32[2] + v34[2];
          v39 = v38 >> 1;
          if (v38 >> 1 >= 0xF000)
            LOWORD(v39) = -4096;
          v40 = v34[3];
          if (v40 >= 0xEB00)
            v40 = 60160;
          if (v40 <= 0x1000)
            LOWORD(v40) = 4096;
          v41 = v32[1];
          if (v41 >= 0xEB00)
            v41 = 60160;
          if (v41 <= 0x1000)
            LOWORD(v41) = 4096;
          v42 = v32[3];
          if (v42 >= 0xEB00)
            v42 = 60160;
          if (v42 <= 0x1000)
            LOWORD(v42) = 4096;
          *v30 = (v37 + 32) & 0xFFC0;
          v30[1] = (v40 + 32) & 0xFFC0;
          *(v31 - 1) = (v41 + 32) & 0xFFC0;
          *v31 = (v42 + 32) & 0xFFC0;
          v43 = v36 & 0xFFC0;
          if (v35 < 0x2000)
            v43 = 4096;
          *v33 = v43;
          v44 = v39 & 0xFFC0;
          if (v38 < 0x2000)
            v44 = 4096;
          v33[1] = v44;
          v28 += 4;
          v27 += 8;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v23;
      v26 += v24;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_x420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _WORD *v31;
  _WORD *v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _OWORD v41[2];
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  memset(v41, 0, sizeof(v41));
  v9 = a2[2];
  v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_1928DFD10;
  v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_1928DFD20;
  v67 = 0;
  *(_QWORD *)&v48[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = *((_QWORD *)&v41[0] + 1);
    v20 = *(_QWORD *)&v41[0];
    v21 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    v22 = v13 + v21 + v14 * v11;
    v23 = 2 * *a8;
    v24 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v25 = v14 + v21 + v13 + v14 * v11 + 6;
    v26 = *a8 + *(_QWORD *)&v41[0] + 2;
    do
    {
      if (v9 >= 2)
      {
        v27 = 0;
        v28 = 0;
        v29 = v18;
        do
        {
          v30 = (_WORD *)(v20 + v27);
          v31 = (_WORD *)(v26 + v27);
          v32 = (_WORD *)(v19 + v27);
          v33 = (unsigned __int16 *)(v22 + v28);
          v34 = *(unsigned __int16 *)(v22 + v28);
          if (v34 >= 0xF000)
            v34 = 61440;
          if (v34 <= 0x1000)
            LOWORD(v34) = 4096;
          v35 = v33[1];
          if (v35 >= 0xEB00)
            v35 = 60160;
          if (v35 <= 0x1000)
            LOWORD(v35) = 4096;
          v36 = v33[2];
          if (v36 >= 0xF000)
            v36 = 61440;
          if (v36 <= 0x1000)
            LOWORD(v36) = 4096;
          v37 = v33[3];
          if (v37 >= 0xEB00)
            v37 = 60160;
          if (v37 <= 0x1000)
            LOWORD(v37) = 4096;
          v38 = *(unsigned __int16 *)(v25 + v28 - 4);
          if (v38 >= 0xEB00)
            v38 = 60160;
          if (v38 <= 0x1000)
            LOWORD(v38) = 4096;
          v39 = *(unsigned __int16 *)(v25 + v28);
          if (v39 >= 0xEB00)
            v39 = 60160;
          if (v39 <= 0x1000)
            LOWORD(v39) = 4096;
          *v30 = (v35 + 32) & 0xFFC0;
          v30[1] = (v37 + 32) & 0xFFC0;
          *(v31 - 1) = (v38 + 32) & 0xFFC0;
          *v31 = (v39 + 32) & 0xFFC0;
          *v32 = v34 & 0xFFC0;
          v32[1] = v36 & 0xFFC0;
          v28 += 8;
          v27 += 4;
          --v29;
        }
        while (v29);
      }
      v20 += v23;
      v19 += v16;
      v22 += v24;
      ++v15;
      v25 += v24;
      v26 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

